<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Alt.GUI.Ext</name>
    </assembly>
    <members>
        <member name="T:Alt.Box2D.DebugDraw">
            Implement and register this class with a World to provide debug drawing of physics
            entities in your game.
        </member>
        <member name="M:Alt.Box2D.DebugDraw.AppendFlags(Alt.Box2D.DebugDrawFlags)">
            Append flags to the current flags.
        </member>
        <member name="M:Alt.Box2D.DebugDraw.ClearFlags(Alt.Box2D.DebugDrawFlags)">
            Clear flags from the current flags.
        </member>
        <member name="M:Alt.Box2D.DebugDraw.DrawPolygon(Alt.Box2D.FixedArray8{Alt.Sketch.Vector2}@,System.Int32,Alt.Sketch.Color)">
            Draw a closed polygon provided in CCW order.
        </member>
        <member name="M:Alt.Box2D.DebugDraw.DrawSolidPolygon(Alt.Box2D.FixedArray8{Alt.Sketch.Vector2}@,System.Int32,Alt.Sketch.Color)">
            Draw a solid closed polygon provided in CCW order.
        </member>
        <member name="M:Alt.Box2D.DebugDraw.DrawCircle(Alt.Sketch.Vector2,System.Double,Alt.Sketch.Color)">
            Draw a circle.
        </member>
        <member name="M:Alt.Box2D.DebugDraw.DrawSolidCircle(Alt.Sketch.Vector2,System.Double,Alt.Sketch.Vector2,Alt.Sketch.Color)">
            Draw a solid circle.
        </member>
        <member name="M:Alt.Box2D.DebugDraw.DrawSegment(Alt.Sketch.Vector2,Alt.Sketch.Vector2,Alt.Sketch.Color)">
            Draw a line segment.
        </member>
        <member name="M:Alt.Box2D.DebugDraw.DrawTransform(Alt.Box2D.Transform@)">
            Draw a transform. Choose your own length scale.
            @param xf a transform.
        </member>
        <member name="T:Alt.Box2D.BroadPhase">
            The broad-phase is used for computing pairs and performing volume queries and ray casts.
            This broad-phase does not persist pairs. Instead, this reports potentially new pairs.
            It is up to the client to consume the new pairs and to track subsequent overlap.
        </member>
        <member name="M:Alt.Box2D.BroadPhase.CreateProxy(Alt.Box2D.AABB@,System.Object)">
            Create a proxy with an initial AABB. Pairs are not reported until
            UpdatePairs is called.
        </member>
        <member name="M:Alt.Box2D.BroadPhase.DestroyProxy(System.Int32)">
            Destroy a proxy. It is up to the client to remove any pairs.
        </member>
        <member name="M:Alt.Box2D.BroadPhase.GetFatAABB(System.Int32,Alt.Box2D.AABB@)">
            Get the AABB for a proxy.
        </member>
        <member name="M:Alt.Box2D.BroadPhase.GetUserData(System.Int32)">
            Get user data from a proxy. Returns null if the id is invalid.
        </member>
        <member name="M:Alt.Box2D.BroadPhase.TestOverlap(System.Int32,System.Int32)">
            Test overlap of fat AABBs.
        </member>
        <member name="M:Alt.Box2D.BroadPhase.UpdatePairs``1(Alt.Action{``0,``0})">
            Update the pairs. This results in pair callbacks. This can only add pairs.
        </member>
        <member name="M:Alt.Box2D.BroadPhase.Query(Alt.Func{System.Int32,System.Boolean},Alt.Box2D.AABB@)">
            Query an AABB for overlapping proxies. The callback class
            is called for each proxy that overlaps the supplied AABB.
        </member>
        <member name="M:Alt.Box2D.BroadPhase.ComputeHeight">
            Compute the height of the embedded tree.
        </member>
        <member name="P:Alt.Box2D.BroadPhase.ProxyCount">
            Get the number of proxies.
        </member>
        <member name="T:Alt.Box2D.ContactFeature">
            The features that intersect to form the contact point
            This must be 4 bytes or less.
        </member>
        <!-- Некорректный комментарий в формате XML для члена "F:Alt.Box2D.ContactFeature.indexB" проигнорирован -->
        <!-- Некорректный комментарий в формате XML для члена "F:Alt.Box2D.ContactFeature.typeA" проигнорирован -->
        <!-- Некорректный комментарий в формате XML для члена "F:Alt.Box2D.ContactFeature.typeB" проигнорирован -->
        <member name="T:Alt.Box2D.ContactID">
            Contact ids to facilitate warm starting.
        </member>
        <member name="F:Alt.Box2D.ContactID.Key">
            The features that intersect to form the contact point
        </member>
        <member name="T:Alt.Box2D.ManifoldPoint">
            A manifold point is a contact point belonging to a contact
            manifold. It holds details related to the geometry and dynamics
            of the contact points.
            The local point usage depends on the manifold type:
            -ShapeType.Circles: the local center of circleB
            -SeparationFunction.FaceA: the local center of cirlceB or the clip point of polygonB
            -SeparationFunction.FaceB: the clip point of polygonA
            This structure is stored across time steps, so we keep it small.
            Note: the impulses are used for internal caching and may not
            provide reliable contact forces, especially for high speed collisions.
        </member>
        <!-- Некорректный комментарий в формате XML для члена "F:Alt.Box2D.ManifoldPoint.NormalImpulse" проигнорирован -->
        <!-- Некорректный комментарий в формате XML для члена "F:Alt.Box2D.ManifoldPoint.TangentImpulse" проигнорирован -->
        <!-- Некорректный комментарий в формате XML для члена "F:Alt.Box2D.ManifoldPoint.Id" проигнорирован -->
        <member name="T:Alt.Box2D.Manifold">
            A manifold for two touching convex Shapes.
            Box2D supports multiple types of contact:
            - clip point versus plane with radius
            - point versus point with radius (circles)
            The local point usage depends on the manifold type:
            -ShapeType.Circles: the local center of circleA
            -SeparationFunction.FaceA: the center of faceA
            -SeparationFunction.FaceB: the center of faceB
            Similarly the local normal usage:
            -ShapeType.Circles: not used
            -SeparationFunction.FaceA: the normal on polygonA
            -SeparationFunction.FaceB: the normal on polygonB
            We store contacts in this way so that position correction can
            account for movement, which is critical for continuous physics.
            All contact scenarios must be expressed in one of these types.
            This structure is stored across time steps, so we keep it small.
        </member>
        <!-- Некорректный комментарий в формате XML для члена "F:Alt.Box2D.Manifold._localNormal" проигнорирован -->
        <!-- Некорректный комментарий в формате XML для члена "F:Alt.Box2D.Manifold._localPoint" проигнорирован -->
        <!-- Некорректный комментарий в формате XML для члена "F:Alt.Box2D.Manifold._type" проигнорирован -->
        <member name="T:Alt.Box2D.WorldManifold">
            This is used to compute the current state of a contact manifold.
        </member>
        <member name="M:Alt.Box2D.WorldManifold.#ctor(Alt.Box2D.Manifold@,Alt.Box2D.Transform@,System.Double,Alt.Box2D.Transform@,System.Double)">
            Evaluate the manifold with supplied transforms. This assumes
            modest motion from the original state. This does not change the
            point count, impulses, etc. The radii must come from the Shapes
            that generated the manifold.
        </member>
        <!-- Некорректный комментарий в формате XML для члена "F:Alt.Box2D.WorldManifold._points" проигнорирован -->
        <member name="T:Alt.Box2D.PointState">
            This is used for determining the state of contact points.
        </member>
        <!-- Некорректный комментарий в формате XML для члена "F:Alt.Box2D.PointState.Add" проигнорирован -->
        <!-- Некорректный комментарий в формате XML для члена "F:Alt.Box2D.PointState.Persist" проигнорирован -->
        <!-- Некорректный комментарий в формате XML для члена "F:Alt.Box2D.PointState.Remove" проигнорирован -->
        <member name="T:Alt.Box2D.ClipVertex">
            Used for computing contact manifolds.
        </member>
        <member name="T:Alt.Box2D.RayCastInput">
            Ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1).
        </member>
        <member name="T:Alt.Box2D.RayCastOutput">
            Ray-cast output data.  The ray hits at p1 + fraction * (p2 - p1), where p1 and p2
            come from RayCastInput. 
        </member>
        <member name="T:Alt.Box2D.AABB">
            An axis aligned bounding box.
        </member>
        <member name="M:Alt.Box2D.AABB.IsValid">
            Verify that the bounds are sorted.
        </member>
        <member name="M:Alt.Box2D.AABB.GetCenter">
            Get the center of the AABB.
        </member>
        <member name="M:Alt.Box2D.AABB.GetExtents">
            Get the extents of the AABB (half-widths).
        </member>
        <member name="M:Alt.Box2D.AABB.GetPerimeter">
            Get the perimeter length
        </member>
        <member name="M:Alt.Box2D.AABB.Combine(Alt.Box2D.AABB@)">
            Combine an AABB into this one.
        </member>
        <member name="M:Alt.Box2D.AABB.Combine(Alt.Box2D.AABB@,Alt.Box2D.AABB@)">
            Combine two AABBs into this one.
        </member>
        <member name="M:Alt.Box2D.AABB.Contains(Alt.Box2D.AABB@)">
            Does this aabb contain the provided AABB.
        </member>
        <!-- Некорректный комментарий в формате XML для члена "F:Alt.Box2D.AABB.upperBound" проигнорирован -->
        <member name="M:Alt.Box2D.Collision.CollideCircles(Alt.Box2D.Manifold@,Alt.Box2D.CircleShape,Alt.Box2D.Transform@,Alt.Box2D.CircleShape,Alt.Box2D.Transform@)">
            Compute the collision manifold between two circles.
        </member>
        <member name="M:Alt.Box2D.Collision.CollidePolygonAndCircle(Alt.Box2D.Manifold@,Alt.Box2D.PolygonShape,Alt.Box2D.Transform@,Alt.Box2D.CircleShape,Alt.Box2D.Transform@)">
            Compute the collision manifold between a polygon and a circle.
        </member>
        <member name="M:Alt.Box2D.Collision.CollidePolygons(Alt.Box2D.Manifold@,Alt.Box2D.PolygonShape,Alt.Box2D.Transform@,Alt.Box2D.PolygonShape,Alt.Box2D.Transform@)">
            Compute the collision manifold between two polygons.
        </member>
        <member name="M:Alt.Box2D.Collision.ClipSegmentToLine(Alt.Box2D.FixedArray2{Alt.Box2D.ClipVertex}@,Alt.Box2D.FixedArray2{Alt.Box2D.ClipVertex}@,Alt.Sketch.Vector2,System.Double,System.Int32)">
            Clipping for contact manifolds.
        </member>
        <member name="T:Alt.Box2D.DistanceProxy">
            A distance proxy is used by the GJK algorithm.
            It encapsulates any shape.
        </member>
        <member name="M:Alt.Box2D.DistanceProxy.Set(Alt.Box2D.Shape,System.Int32)">
            Initialize the proxy using the given shape. The shape
            must remain in scope while the proxy is in use.
        </member>
        <member name="M:Alt.Box2D.DistanceProxy.GetSupport(Alt.Sketch.Vector2)">
            Get the supporting vertex index in the given direction.
        </member>
        <member name="M:Alt.Box2D.DistanceProxy.GetSupportVertex(Alt.Sketch.Vector2)">
            Get the supporting vertex in the given direction.
        </member>
        <member name="M:Alt.Box2D.DistanceProxy.GetVertexCount">
            Get the vertex count.
        </member>
        <member name="M:Alt.Box2D.DistanceProxy.GetVertex(System.Int32)">
            Get a vertex by index. Used by b2Distance.
        </member>
        <member name="T:Alt.Box2D.SimplexCache">
            Used to warm start ComputeDistance.
            Set count to zero on first call.
        </member>
        <!-- Некорректный комментарий в формате XML для члена "F:Alt.Box2D.SimplexCache.count" проигнорирован -->
        <!-- Некорректный комментарий в формате XML для члена "F:Alt.Box2D.SimplexCache.indexB" проигнорирован -->
        <member name="T:Alt.Box2D.DistanceInput">
            Input for ComputeDistance.
            You have to option to use the shape radii
            in the computation. Even 
        </member>
        <member name="T:Alt.Box2D.DistanceOutput">
            Output for ComputeDistance.
        </member>
        <!-- Некорректный комментарий в формате XML для члена "F:Alt.Box2D.DistanceOutput.pointB" проигнорирован -->
        <!-- Некорректный комментарий в формате XML для члена "F:Alt.Box2D.DistanceOutput.distance" проигнорирован -->
        <member name="T:Alt.Box2D.RayCastCallbackInternal">
            A dynamic AABB tree broad-phase, inspired by Nathanael Presson's btDbvt.
        </member>
        <member name="T:Alt.Box2D.DynamicTreeNode">
            A node in the dynamic tree. The client does not interact with this directly.
        </member>
        <member name="F:Alt.Box2D.DynamicTreeNode.aabb">
            This is the fattened AABB.
        </member>
        <member name="T:Alt.Box2D.DynamicTree">
             A dynamic tree arranges data in a binary tree to accelerate
             queries such as volume queries and ray casts. Leafs are proxies
             with an AABB. In the tree we expand the proxy AABB by Settings.b2_fatAABBFactor
             so that the proxy AABB is bigger than the client object. This allows the client
             object to move by small amounts without triggering a tree update.
            
             Nodes are pooled and relocatable, so we use node indices rather than pointers.
        </member>
        <member name="M:Alt.Box2D.DynamicTree.#ctor">
            ructing the tree initializes the node pool.
        </member>
        <member name="M:Alt.Box2D.DynamicTree.CreateProxy(Alt.Box2D.AABB@,System.Object)">
            Create a proxy. Provide a tight fitting AABB and a userData pointer.
        </member>
        <member name="M:Alt.Box2D.DynamicTree.DestroyProxy(System.Int32)">
            Destroy a proxy. This asserts if the id is invalid.
        </member>
        <member name="M:Alt.Box2D.DynamicTree.MoveProxy(System.Int32,Alt.Box2D.AABB@,Alt.Sketch.Vector2)">
            Move a proxy with a swepted AABB. If the proxy has moved outside of its fattened AABB,
            then the proxy is removed from the tree and re-inserted. Otherwise
            the function returns immediately.
            @return true if the proxy was re-inserted.
        </member>
        <member name="M:Alt.Box2D.DynamicTree.Rebalance(System.Int32)">
            Perform some iterations to re-balance the tree.
        </member>
        <member name="M:Alt.Box2D.DynamicTree.GetUserData(System.Int32)">
            Get proxy user data.
            @return the proxy user data or 0 if the id is invalid.
        </member>
        <member name="M:Alt.Box2D.DynamicTree.GetFatAABB(System.Int32,Alt.Box2D.AABB@)">
            Get the fat AABB for a proxy.
        </member>
        <member name="M:Alt.Box2D.DynamicTree.ComputeHeight">
            Compute the height of the binary tree in O(N) time. Should not be
            called often.
        </member>
        <member name="M:Alt.Box2D.DynamicTree.Query(Alt.Func{System.Int32,System.Boolean},Alt.Box2D.AABB@)">
            Query an AABB for overlapping proxies. The callback class
            is called for each proxy that overlaps the supplied AABB.
        </member>
        <member name="M:Alt.Box2D.DynamicTree.RayCast(Alt.Box2D.RayCastCallbackInternal,Alt.Box2D.RayCastInput@)">
            Ray-cast against the proxies in the tree. This relies on the callback
            to perform a exact ray-cast in the case were the proxy contains a Shape.
            The callback also performs the any collision filtering. This has performance
            roughly equal to k * log(n), where k is the number of collisions and n is the
            number of proxies in the tree.
            @param input the ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1).
            @param callback a callback class that is called for each proxy that is hit by the ray.
        </member>
        <member name="F:Alt.Box2D.DynamicTree._path">
            This is used incrementally traverse the tree for re-balancing.
        </member>
        <member name="T:Alt.Box2D.Shape">
            A shape is used for collision detection. You can create a shape however you like.
            Shapes used for simulation in b2World are created automatically when a b2Fixture
            is created. Shapes may encapsulate a one or more child shapes.
        </member>
        <member name="M:Alt.Box2D.Shape.Clone">
            Clone the concrete shape using the provided allocator.
        </member>
        <member name="M:Alt.Box2D.Shape.GetChildCount">
            Get the number of child primitives.
        </member>
        <member name="M:Alt.Box2D.Shape.TestPoint(Alt.Box2D.Transform@,Alt.Sketch.Vector2)">
            Test a point for containment in this shape. This only works for convex shapes.
            @param xf the shape world transform.
            @param p a point in world coordinates.
        </member>
        <member name="M:Alt.Box2D.Shape.RayCast(Alt.Box2D.RayCastOutput@,Alt.Box2D.RayCastInput@,Alt.Box2D.Transform@,System.Int32)">
            Cast a ray against a child shape.
            @param output the ray-cast results.
            @param input the ray-cast input parameters.
            @param transform the transform to be applied to the shape.
            @param childIndex the child shape index
        </member>
        <member name="M:Alt.Box2D.Shape.ComputeAABB(Alt.Box2D.AABB@,Alt.Box2D.Transform@,System.Int32)">
            Given a transform, compute the associated axis aligned bounding box for a child shape.
            @param aabb returns the axis aligned box.
            @param xf the world transform of the shape.
        </member>
        <member name="M:Alt.Box2D.Shape.ComputeMass(Alt.Box2D.MassData@,System.Double)">
            Compute the mass properties of this shape using its dimensions and density.
            The inertia tensor is computed about the local origin, not the centroid.
            @param massData returns the mass data for this shape.
            @param density the density in kilograms per meter squared.
        </member>
        <member name="P:Alt.Box2D.Shape.ShapeType">
            Get the type of this shape. You can use this to down cast to the concrete shape.
            @return the shape type.
        </member>
        <member name="M:Alt.Box2D.CircleShape.Clone">
            Implement Shape.
        </member>
        <member name="M:Alt.Box2D.CircleShape.GetChildCount">
            @see b2Shape::GetChildCount
        </member>
        <member name="M:Alt.Box2D.CircleShape.TestPoint(Alt.Box2D.Transform@,Alt.Sketch.Vector2)">
            @see Shape.TestPoint
        </member>
        <member name="M:Alt.Box2D.CircleShape.ComputeAABB(Alt.Box2D.AABB@,Alt.Box2D.Transform@,System.Int32)">
            @see Shape.ComputeAABB
        </member>
        <member name="M:Alt.Box2D.CircleShape.ComputeMass(Alt.Box2D.MassData@,System.Double)">
            @see Shape.ComputeMass
        </member>
        <member name="M:Alt.Box2D.CircleShape.GetVertexCount">
            Get the vertex count.
        </member>
        <member name="M:Alt.Box2D.CircleShape.GetVertex(System.Int32)">
            Get a vertex by index. Used by b2Distance.
        </member>
        <member name="F:Alt.Box2D.CircleShape._p">
            Position
        </member>
        <member name="M:Alt.Box2D.EdgeShape.Set(Alt.Sketch.Vector2,Alt.Sketch.Vector2)">
            Set this as an isolated edge.
        </member>
        <member name="M:Alt.Box2D.EdgeShape.Clone">
            Implement Shape.
        </member>
        <member name="M:Alt.Box2D.EdgeShape.GetChildCount">
            @see Shape::GetChildCount
        </member>
        <member name="M:Alt.Box2D.EdgeShape.TestPoint(Alt.Box2D.Transform@,Alt.Sketch.Vector2)">
            @see Shape::TestPoint
        </member>
        <member name="M:Alt.Box2D.EdgeShape.RayCast(Alt.Box2D.RayCastOutput@,Alt.Box2D.RayCastInput@,Alt.Box2D.Transform@,System.Int32)">
            Implement Shape.
            
        </member>
        <member name="M:Alt.Box2D.EdgeShape.ComputeAABB(Alt.Box2D.AABB@,Alt.Box2D.Transform@,System.Int32)">
            @see Shape::ComputeAABB
        </member>
        <member name="M:Alt.Box2D.EdgeShape.ComputeMass(Alt.Box2D.MassData@,System.Double)">
            @see Shape::ComputeMass
        </member>
        <member name="F:Alt.Box2D.EdgeShape._vertex1">
            These are the edge vertices
        </member>
        <member name="F:Alt.Box2D.EdgeShape._vertex2">
            These are the edge vertices
        </member>
        <member name="F:Alt.Box2D.EdgeShape._vertex0">
            Optional adjacent vertices. These are used for smooth collision.
        </member>
        <member name="F:Alt.Box2D.EdgeShape._vertex3">
            Optional adjacent vertices. These are used for smooth collision.
        </member>
        <member name="T:Alt.Box2D.LoopShape">
            A loop Shape is a free form sequence of line segments that form a circular list.
            The loop may cross upon itself, but this is not recommended for smooth collision.
            The loop has double sided collision, so you can use inside and outside collision.
            Therefore, you may use any winding order.
        </member>
        <member name="M:Alt.Box2D.LoopShape.Clone">
            Implement Shape.
        </member>
        <member name="M:Alt.Box2D.LoopShape.GetChildCount">
            @see Shape::GetChildCount
        </member>
        <member name="M:Alt.Box2D.LoopShape.GetChildEdge(Alt.Box2D.EdgeShape@,System.Int32)">
            Get a child edge.
        </member>
        <member name="M:Alt.Box2D.LoopShape.TestPoint(Alt.Box2D.Transform@,Alt.Sketch.Vector2)">
            This always return false.
            @see Shape::TestPoint
        </member>
        <member name="M:Alt.Box2D.LoopShape.RayCast(Alt.Box2D.RayCastOutput@,Alt.Box2D.RayCastInput@,Alt.Box2D.Transform@,System.Int32)">
            Implement Shape.
        </member>
        <member name="M:Alt.Box2D.LoopShape.ComputeAABB(Alt.Box2D.AABB@,Alt.Box2D.Transform@,System.Int32)">
            @see Shape::ComputeAABB
        </member>
        <member name="M:Alt.Box2D.LoopShape.ComputeMass(Alt.Box2D.MassData@,System.Double)">
            Chains have zero mass.
            @see Shape::ComputeMass
        </member>
        <member name="F:Alt.Box2D.LoopShape._vertices">
            The vertices. These are not owned/freed by the loop Shape.
        </member>
        <member name="F:Alt.Box2D.LoopShape._count">
            The vertex count.
        </member>
        <member name="M:Alt.Box2D.PolygonShape.Clone">
            Implement Shape.
        </member>
        <member name="M:Alt.Box2D.PolygonShape.GetChildCount">
            @see b2Shape::GetChildCount
        </member>
        <member name="M:Alt.Box2D.PolygonShape.Set(Alt.Sketch.Vector2[],System.Int32)">
            Copy vertices. This assumes the vertices define a convex polygon.
            It is assumed that the exterior is the the right of each edge.
        </member>
        <member name="M:Alt.Box2D.PolygonShape.SetAsBox(System.Double,System.Double)">
            Build vertices to represent an axis-aligned box.
            @param hx the half-width.
            @param hy the half-height.
        </member>
        <member name="M:Alt.Box2D.PolygonShape.SetAsBox(System.Double,System.Double,Alt.Sketch.Vector2,System.Double)">
            Build vertices to represent an oriented box.
            @param hx the half-width.
            @param hy the half-height.
            @param center the center of the box in local coordinates.
            @param angle the rotation of the box in local coordinates.
        </member>
        <member name="M:Alt.Box2D.PolygonShape.SetAsEdge(Alt.Sketch.Vector2,Alt.Sketch.Vector2)">
            Set this as a single edge.
        </member>
        <member name="M:Alt.Box2D.PolygonShape.TestPoint(Alt.Box2D.Transform@,Alt.Sketch.Vector2)">
            @see Shape.TestPoint
        </member>
        <member name="M:Alt.Box2D.PolygonShape.ComputeAABB(Alt.Box2D.AABB@,Alt.Box2D.Transform@,System.Int32)">
            @see Shape.ComputeAABB
        </member>
        <member name="M:Alt.Box2D.PolygonShape.ComputeMass(Alt.Box2D.MassData@,System.Double)">
            @see Shape.ComputeMass
        </member>
        <member name="M:Alt.Box2D.PolygonShape.GetVertexCount">
            Get the vertex count.
        </member>
        <member name="M:Alt.Box2D.PolygonShape.GetVertex(System.Int32)">
            Get a vertex by index.
        </member>
        <member name="T:Alt.Box2D.MassData">
            This holds the mass data computed for a shape.
        </member>
        <member name="F:Alt.Box2D.MassData.mass">
            The mass of the shape, usually in kilograms.
        </member>
        <member name="F:Alt.Box2D.MassData.center">
            The position of the shape's centroid relative to the shape's origin.
        </member>
        <member name="F:Alt.Box2D.MassData.I">
            The rotational inertia of the shape about the local origin.
        </member>
        <member name="T:Alt.Box2D.TOIInput">
            Input parameters for CalculateTimeOfImpact
        </member>
        <member name="M:Alt.Box2D.TimeOfImpact.CalculateTimeOfImpact(Alt.Box2D.TOIOutput@,Alt.Box2D.TOIInput@)">
            Compute the upper bound on time before two shapes penetrate. Time is represented as
            a fraction between [0,tMax]. This uses a swept separating axis and may miss some intermediate,
            non-tunneling collision. If you change the time interval, you should call this function
            again.
            Note: use b2Distance to compute the contact point and normal at the time of impact.
        </member>
        <member name="M:Alt.Box2D.MathUtils.IsValid(System.Double)">
            This function is used to ensure that a floating point number is
            not a NaN or infinity.
        </member>
        <member name="M:Alt.Box2D.MathUtils.InvSqrt(System.Double)">
            This is a approximate yet fast inverse square-root.
        </member>
        <member name="T:Alt.Box2D.Mat22">
            A 2-by-2 matrix. Stored in column-major order.
        </member>
        <member name="M:Alt.Box2D.Mat22.#ctor(Alt.Sketch.Vector2,Alt.Sketch.Vector2)">
            construct this matrix using columns.
        </member>
        <member name="M:Alt.Box2D.Mat22.#ctor(System.Double,System.Double,System.Double,System.Double)">
            construct this matrix using scalars.
        </member>
        <member name="M:Alt.Box2D.Mat22.#ctor(System.Double)">
            construct this matrix using an angle. This matrix becomes
            an orthonormal rotation matrix.
        </member>
        <member name="M:Alt.Box2D.Mat22.Set(Alt.Sketch.Vector2,Alt.Sketch.Vector2)">
            Initialize this matrix using columns.
        </member>
        <member name="M:Alt.Box2D.Mat22.Set(System.Double)">
            Initialize this matrix using an angle. This matrix becomes
            an orthonormal rotation matrix.
        </member>
        <member name="M:Alt.Box2D.Mat22.SetIdentity">
            Set this to the identity matrix.
        </member>
        <member name="M:Alt.Box2D.Mat22.SetZero">
            Set this matrix to all zeros.
        </member>
        <member name="M:Alt.Box2D.Mat22.GetAngle">
            Extract the angle from this matrix (assumed to be
            a rotation matrix).
        </member>
        <member name="M:Alt.Box2D.Mat22.Solve(Alt.Sketch.Vector2)">
            Solve A * x = b, where b is a column vector. This is more efficient
            than computing the inverse in one-shot cases.
        </member>
        <member name="T:Alt.Box2D.Mat33">
            A 3-by-3 matrix. Stored in column-major order.
        </member>
        <member name="M:Alt.Box2D.Mat33.#ctor(Alt.Sketch.Vector3,Alt.Sketch.Vector3,Alt.Sketch.Vector3)">
            construct this matrix using columns.
        </member>
        <member name="M:Alt.Box2D.Mat33.SetZero">
            Set this matrix to all zeros.
        </member>
        <member name="M:Alt.Box2D.Mat33.Solve33(Alt.Sketch.Vector3)">
            Solve A * x = b, where b is a column vector. This is more efficient
            than computing the inverse in one-shot cases.
        </member>
        <member name="M:Alt.Box2D.Mat33.Solve22(Alt.Sketch.Vector2)">
            Solve A * x = b, where b is a column vector. This is more efficient
            than computing the inverse in one-shot cases. Solve only the upper
            2-by-2 matrix equation.
        </member>
        <member name="T:Alt.Box2D.Transform">
            A transform contains translation and rotation. It is used to represent
            the position and orientation of rigid frames.
        </member>
        <member name="M:Alt.Box2D.Transform.#ctor(Alt.Sketch.Vector2,Alt.Box2D.Mat22@)">
            Initialize using a position vector and a rotation matrix.
        </member>
        <member name="M:Alt.Box2D.Transform.SetIdentity">
            Set this to the identity transform.
        </member>
        <member name="M:Alt.Box2D.Transform.Set(Alt.Sketch.Vector2,System.Double)">
            Set this based on the position and angle.
        </member>
        <member name="M:Alt.Box2D.Transform.GetAngle">
            Calculate the angle that the rotation matrix represents.
        </member>
        <member name="T:Alt.Box2D.Sweep">
            This describes the motion of a body/shape for TOI computation.
            Shapes are defined with respect to the body origin, which may
            no coincide with the center of mass. However, to support dynamics
            we must interpolate the center of mass position.
        </member>
        <member name="M:Alt.Box2D.Sweep.GetTransform(Alt.Box2D.Transform@,System.Double)">
            Get the interpolated transform at a specific time.
            @param alpha is a factor in [0,1], where 0 indicates t0.
        </member>
        <member name="M:Alt.Box2D.Sweep.Advance(System.Double)">
            Advance the sweep forward, yielding a new initial state.
            @param t the new initial time.
        </member>
        <member name="M:Alt.Box2D.Sweep.Normalize">
            Normalize the angles.
        </member>
        <!-- Некорректный комментарий в формате XML для члена "F:Alt.Box2D.Sweep.c0" проигнорирован -->
        <!-- Некорректный комментарий в формате XML для члена "F:Alt.Box2D.Sweep.c" проигнорирован -->
        <!-- Некорректный комментарий в формате XML для члена "F:Alt.Box2D.Sweep.a0" проигнорирован -->
        <!-- Некорректный комментарий в формате XML для члена "F:Alt.Box2D.Sweep.a" проигнорирован -->
        <member name="F:Alt.Box2D.Settings.b2_maxManifoldPoints">
            The maximum number of contact points between two convex shapes.
        </member>
        <member name="F:Alt.Box2D.Settings.b2_maxPolygonVertices">
            The maximum number of vertices on a convex polygon.
        </member>
        <member name="F:Alt.Box2D.Settings.b2_aabbExtension">
            This is used to fatten AABBs in the dynamic tree. This allows proxies
            to move by a small amount without triggering a tree adjustment.
            This is in meters.
        </member>
        <member name="F:Alt.Box2D.Settings.b2_aabbMultiplier">
            This is used to fatten AABBs in the dynamic tree. This is used to predict
            the future position based on the current displacement.
            This is a dimensionless multiplier.
        </member>
        <member name="F:Alt.Box2D.Settings.b2_linearSlop">
            A small length used as a collision and constraint tolerance. Usually it is
            chosen to be numerically significant, but visually insignificant.
        </member>
        <member name="F:Alt.Box2D.Settings.b2_angularSlop">
            A small angle used as a collision and constraint tolerance. Usually it is
            chosen to be numerically significant, but visually insignificant.
        </member>
        <member name="F:Alt.Box2D.Settings.b2_polygonRadius">
            The radius of the polygon/edge shape skin. This should not be modified. Making
            this smaller means polygons will have an insufficient buffer for continuous collision.
            Making it larger may create artifacts for vertex collision.
        </member>
        <member name="F:Alt.Box2D.Settings.b2_maxTOIContacts">
            Maximum number of contacts to be handled to solve a TOI impact.
        </member>
        <member name="F:Alt.Box2D.Settings.b2_velocityThreshold">
            A velocity threshold for elastic collisions. Any collision with a relative linear
            velocity below this threshold will be treated as inelastic.
        </member>
        <member name="F:Alt.Box2D.Settings.b2_maxLinearCorrection">
            The maximum linear position correction used when solving constraints. This helps to
            prevent overshoot.
        </member>
        <member name="F:Alt.Box2D.Settings.b2_maxAngularCorrection">
            The maximum angular position correction used when solving constraints. This helps to
            prevent overshoot.
        </member>
        <member name="F:Alt.Box2D.Settings.b2_contactBaumgarte">
            This scale factor controls how fast overlap is resolved. Ideally this would be 1 so
            that overlap is removed in one time step. However using values close to 1 often lead
            to overshoot.
        </member>
        <member name="F:Alt.Box2D.Settings.b2_timeToSleep">
            The time that a body must be still before it will go to sleep.
        </member>
        <member name="F:Alt.Box2D.Settings.b2_linearSleepTolerance">
            A body cannot sleep if its linear velocity is above this tolerance.
        </member>
        <member name="F:Alt.Box2D.Settings.b2_angularSleepTolerance">
            A body cannot sleep if its angular velocity is above this tolerance.
        </member>
        <member name="F:Alt.Box2D.Settings.b2_maxTranslation">
            The maximum linear velocity of a body. This limit is very large and is used
            to prevent numerical problems. You shouldn't need to adjust this.
        </member>
        <member name="F:Alt.Box2D.Settings.b2_maxRotation">
            The maximum angular velocity of a body. This limit is very large and is used
            to prevent numerical problems. You shouldn't need to adjust this.
        </member>
        <member name="M:Alt.Box2D.Settings.b2MixFriction(System.Double,System.Double)">
            Friction mixing law. Feel free to customize this.
        </member>
        <member name="M:Alt.Box2D.Settings.b2MixRestitution(System.Double,System.Double)">
            Restitution mixing law. Feel free to customize this.
        </member>
        <member name="T:Alt.Box2D.BodyType">
            The body type.
            static: zero mass, zero velocity, may be manually moved
            kinematic: zero mass, non-zero velocity set by user, moved by solver
            dynamic: positive mass, non-zero velocity determined by forces, moved by solver
        </member>
        <member name="T:Alt.Box2D.BodyDef">
            A body definition holds all the data needed to construct a rigid body.
            You can safely re-use body definitions. Shapes are added to a body after construction.
        </member>
        <member name="M:Alt.Box2D.BodyDef.#ctor">
            This constructor sets the body definition default values.
        </member>
        <member name="F:Alt.Box2D.BodyDef.type">
            The body type: static, kinematic, or dynamic.
            Note: if a dynamic body would have zero mass, the mass is set to one.
        </member>
        <member name="F:Alt.Box2D.BodyDef.position">
            The world position of the body. Avoid creating bodies at the origin
            since this can lead to many overlapping shapes.
        </member>
        <member name="F:Alt.Box2D.BodyDef.angle">
            The world angle of the body in radians.
        </member>
        <member name="F:Alt.Box2D.BodyDef.linearVelocity">
            The linear velocity of the body's origin in world co-ordinates.
        </member>
        <member name="F:Alt.Box2D.BodyDef.angularVelocity">
            The angular velocity of the body.
        </member>
        <member name="F:Alt.Box2D.BodyDef.linearDamping">
            Linear damping is use to reduce the linear velocity. The damping parameter
            can be larger than 1.0 but the damping effect becomes sensitive to the
            time step when the damping parameter is large.
        </member>
        <member name="F:Alt.Box2D.BodyDef.angularDamping">
            Angular damping is use to reduce the angular velocity. The damping parameter
            can be larger than 1.0 but the damping effect becomes sensitive to the
            time step when the damping parameter is large.
        </member>
        <member name="F:Alt.Box2D.BodyDef.allowSleep">
            Set this flag to false if this body should never fall asleep. Note that
            this increases CPU usage.
        </member>
        <member name="F:Alt.Box2D.BodyDef.awake">
            Is this body awake or sleeping?
        </member>
        <member name="F:Alt.Box2D.BodyDef.fixedRotation">
            Should this body be prevented from rotating? Useful for characters.
        </member>
        <member name="F:Alt.Box2D.BodyDef.bullet">
            Is this a fast moving body that should be prevented from tunneling through
            other moving bodies? Note that all bodies are prevented from tunneling through
            kinematic and static bodies. This setting is only considered on dynamic bodies.
            @warning You should use this flag sparingly since it increases processing time.
        </member>
        <member name="F:Alt.Box2D.BodyDef.active">
            Does this body start out active?
        </member>
        <member name="F:Alt.Box2D.BodyDef.userData">
            Use this to store application specific body data.
        </member>
        <member name="F:Alt.Box2D.BodyDef.inertiaScale">
            Experimental: scales the inertia tensor.
        </member>
        <member name="M:Alt.Box2D.Body.SetType(Alt.Box2D.BodyType)">
            Set the type of this body. This may alter the mass and velocity.
        </member>
        <member name="M:Alt.Box2D.Body.GetType">
            Get the type of this body.
        </member>
        <member name="M:Alt.Box2D.Body.CreateFixture(Alt.Box2D.FixtureDef)">
            Creates a fixture and attach it to this body. Use this function if you need
            to set some fixture parameters, like friction. Otherwise you can create the
            fixture directly from a shape.
            If the density is non-zero, this function automatically updates the mass of the body.
            Contacts are not created until the next time step.
            @param def the fixture definition.
            @warning This function is locked during callbacks.
        </member>
        <member name="M:Alt.Box2D.Body.CreateFixture(Alt.Box2D.Shape,System.Double)">
            Creates a fixture from a shape and attach it to this body.
            This is a convenience function. Use FixtureDef if you need to set parameters
            like friction, restitution, user data, or filtering.
            If the density is non-zero, this function automatically updates the mass of the body.
            @param shape the shape to be cloned.
            @param density the shape density (set to zero for static bodies).
            @warning This function is locked during callbacks.
        </member>
        <member name="M:Alt.Box2D.Body.DestroyFixture(Alt.Box2D.Fixture)">
            Destroy a fixture. This removes the fixture from the broad-phase and
            destroys all contacts associated with this fixture. This will	
            automatically adjust the mass of the body if the body is dynamic and the
            fixture has positive density.
            All fixtures attached to a body are implicitly destroyed when the body is destroyed.
            @param fixture the fixture to be removed.
            @warning This function is locked during callbacks.
        </member>
        <member name="M:Alt.Box2D.Body.SetTransform(Alt.Sketch.Vector2,System.Double)">
            Set the position of the body's origin and rotation.
            This breaks any contacts and wakes the other bodies.
            Manipulating a body's transform may cause non-physical behavior.
            @param position the world position of the body's local origin.
            @param angle the world rotation in radians.
        </member>
        <member name="M:Alt.Box2D.Body.GetTransform(Alt.Box2D.Transform@)">
            Get the body transform for the body's origin.
            @return the world transform of the body's origin.
        </member>
        <member name="M:Alt.Box2D.Body.GetPosition">
            Get the world body origin position.
            @return the world position of the body's origin.
        </member>
        <member name="M:Alt.Box2D.Body.GetAngle">
            Get the angle in radians.
            @return the current world rotation angle in radians.
        </member>
        <member name="M:Alt.Box2D.Body.GetWorldCenter">
            Get the world position of the center of mass.
        </member>
        <member name="M:Alt.Box2D.Body.GetLocalCenter">
            Get the local position of the center of mass.
        </member>
        <member name="M:Alt.Box2D.Body.SetLinearVelocity(Alt.Sketch.Vector2)">
            Set the linear velocity of the center of mass.
            @param v the new linear velocity of the center of mass.
        </member>
        <member name="M:Alt.Box2D.Body.GetLinearVelocity">
            Get the linear velocity of the center of mass.
            @return the linear velocity of the center of mass.
        </member>
        <member name="M:Alt.Box2D.Body.SetAngularVelocity(System.Double)">
            Set the angular velocity.
            @param omega the new angular velocity in radians/second.
        </member>
        <member name="M:Alt.Box2D.Body.GetAngularVelocity">
            Get the angular velocity.
            @return the angular velocity in radians/second.
        </member>
        <member name="M:Alt.Box2D.Body.ApplyForce(Alt.Sketch.Vector2,Alt.Sketch.Vector2)">
            Apply a force at a world point. If the force is not
            applied at the center of mass, it will generate a torque and
            affect the angular velocity. This wakes up the body.
            @param force the world force vector, usually in Newtons (N).
            @param point the world position of the point of application.
        </member>
        <member name="M:Alt.Box2D.Body.ApplyTorque(System.Double)">
            Apply a torque. This affects the angular velocity
            without affecting the linear velocity of the center of mass.
            This wakes up the body.
            @param torque about the z-axis (out of the screen), usually in N-m.
        </member>
        <member name="M:Alt.Box2D.Body.ApplyLinearImpulse(Alt.Sketch.Vector2,Alt.Sketch.Vector2)">
            Apply an impulse at a point. This immediately modifies the velocity.
            It also modifies the angular velocity if the point of application
            is not at the center of mass. This wakes up the body.
            @param impulse the world impulse vector, usually in N-seconds or kg-m/s.
            @param point the world position of the point of application.
        </member>
        <member name="M:Alt.Box2D.Body.ApplyAngularImpulse(System.Double)">
            Apply an angular impulse.  
            @param impulse the angular impulse in units of kg*m*m/s  
        </member>
        <member name="M:Alt.Box2D.Body.GetMass">
            Get the total mass of the body.
            @return the mass, usually in kilograms (kg).
        </member>
        <member name="M:Alt.Box2D.Body.GetInertia">
            Get the rotational inertia of the body about the local origin.
            @return the rotational inertia, usually in kg-m^2.
        </member>
        <member name="M:Alt.Box2D.Body.GetMassData(Alt.Box2D.MassData@)">
            Get the mass data of the body.
            @return a struct containing the mass, inertia and center of the body.
        </member>
        <member name="M:Alt.Box2D.Body.SetMassData(Alt.Box2D.MassData@)">
            Set the mass properties to override the mass properties of the fixtures.
            Note that this changes the center of mass position.
            Note that creating or destroying fixtures can also alter the mass.
            This function has no effect if the body isn't dynamic.
            @param massData the mass properties.
        </member>
        <member name="M:Alt.Box2D.Body.ResetMassData">
            This resets the mass properties to the sum of the mass properties of the fixtures.
            This normally does not need to be called unless you called SetMassData to override
            the mass and you later want to reset the mass.
        </member>
        <member name="M:Alt.Box2D.Body.GetWorldPoint(Alt.Sketch.Vector2)">
            Get the world coordinates of a point given the local coordinates.
            @param localPoint a point on the body measured relative the the body's origin.
            @return the same point expressed in world coordinates.
        </member>
        <member name="M:Alt.Box2D.Body.GetWorldVector(Alt.Sketch.Vector2)">
            Get the world coordinates of a vector given the local coordinates.
            @param localVector a vector fixed in the body.
            @return the same vector expressed in world coordinates.
        </member>
        <member name="M:Alt.Box2D.Body.GetLocalPoint(Alt.Sketch.Vector2)">
            Gets a local point relative to the body's origin given a world point.
            @param a point in world coordinates.
            @return the corresponding local point relative to the body's origin.
        </member>
        <member name="M:Alt.Box2D.Body.GetLocalVector(Alt.Sketch.Vector2)">
            Gets a local vector given a world vector.
            @param a vector in world coordinates.
            @return the corresponding local vector.
        </member>
        <member name="M:Alt.Box2D.Body.GetLinearVelocityFromWorldPoint(Alt.Sketch.Vector2)">
            Get the world linear velocity of a world point attached to this body.
            @param a point in world coordinates.
            @return the world velocity of a point.
        </member>
        <member name="M:Alt.Box2D.Body.GetLinearVelocityFromLocalPoint(Alt.Sketch.Vector2)">
            Get the world velocity of a local point.
            @param a point in local coordinates.
            @return the world velocity of a point.
        </member>
        <member name="M:Alt.Box2D.Body.GetLinearDamping">
            Get the linear damping of the body.
        </member>
        <member name="M:Alt.Box2D.Body.SetLinearDamping(System.Double)">
            Set the linear damping of the body.
        </member>
        <member name="M:Alt.Box2D.Body.GetAngularDamping">
            Get the angular damping of the body.
        </member>
        <member name="M:Alt.Box2D.Body.SetAngularDamping(System.Double)">
            Set the angular damping of the body.
        </member>
        <member name="M:Alt.Box2D.Body.SetBullet(System.Boolean)">
            Should this body be treated like a bullet for continuous collision detection?
        </member>
        <member name="M:Alt.Box2D.Body.SetSleepingAllowed(System.Boolean)">
            You can disable sleeping on this body. If you disable sleeping, the
            body will be woken.
        </member>
        <member name="M:Alt.Box2D.Body.AllowSleeping(System.Boolean)">
            You can disable sleeping on this body.
        </member>
        <member name="M:Alt.Box2D.Body.SetAwake(System.Boolean)">
            Set the sleep state of the body. A sleeping body has very
            low CPU cost.
            @param flag set to true to put body to sleep, false to wake it.
        </member>
        <member name="M:Alt.Box2D.Body.IsAwake">
            Get the sleeping state of this body.
            @return true if the body is sleeping.
        </member>
        <member name="M:Alt.Box2D.Body.SetActive(System.Boolean)">
            Set the active state of the body. An inactive body is not
            simulated and cannot be collided with or woken up.
            If you pass a flag of true, all fixtures will be added to the
            broad-phase.
            If you pass a flag of false, all fixtures will be removed from
            the broad-phase and all contacts will be destroyed.
            Fixtures and joints are otherwise unaffected. You may continue
            to create/destroy fixtures and joints on inactive bodies.
            Fixtures on an inactive body are implicitly inactive and will
            not participate in collisions, ray-casts, or queries.
            Joints connected to an inactive body are implicitly inactive.
            An inactive body is still owned by a b2World object and remains
            in the body list.
        </member>
        <member name="M:Alt.Box2D.Body.IsActive">
            Get the active state of the body.
        </member>
        <member name="M:Alt.Box2D.Body.SetFixedRotation(System.Boolean)">
            Set this body to have fixed rotation. This causes the mass
            to be reset.
        </member>
        <member name="M:Alt.Box2D.Body.IsFixedRotation">
            Does this body have fixed rotation?
        </member>
        <member name="M:Alt.Box2D.Body.GetJointList">
            Get the list of all joints attached to this body.
        </member>
        <member name="M:Alt.Box2D.Body.GetContactList">
            Get the list of all contacts attached to this body.
            @warning this list changes during the time step and you may
            miss some collisions if you don't use ContactListener.
        </member>
        <member name="M:Alt.Box2D.Body.GetNext">
            Get the next body in the world's body list.
        </member>
        <member name="M:Alt.Box2D.Body.GetUserData">
            Get the user data pointer that was provided in the body definition.
        </member>
        <member name="M:Alt.Box2D.Body.SetUserData(System.Object)">
            Set the user data. Use this to store your application specific data.
        </member>
        <member name="M:Alt.Box2D.Body.GetWorld">
            Get the parent world of this body.
        </member>
        <member name="P:Alt.Box2D.Body.IsBullet">
            Is this body treated like a bullet for continuous collision detection?
        </member>
        <member name="P:Alt.Box2D.Body.IsSleepingAllowed">
            Is this body allowed to sleep
        </member>
        <member name="P:Alt.Box2D.Body.Position">
            <summary>
            Get the world body origin position.
            </summary>
            <returns>Return the world position of the body's origin.</returns>
        </member>
        <member name="P:Alt.Box2D.Body.Rotation">
            <summary>
            Get the angle in radians.
            </summary>
            <returns>Return the current world rotation angle in radians.</returns>
        </member>
        <member name="T:Alt.Box2D.ContactEdge">
            A contact edge is used to connect bodies and contacts together
            in a contact graph where each body is a node and each contact
            is an edge. A contact edge belongs to a doubly linked list
            maintained in each attached body. Each contact has two contact
            nodes, one for each attached body.
        </member>
        <!-- Некорректный комментарий в формате XML для члена "F:Alt.Box2D.ContactEdge.Contact" проигнорирован -->
        <!-- Некорректный комментарий в формате XML для члена "F:Alt.Box2D.ContactEdge.Prev" проигнорирован -->
        <!-- Некорректный комментарий в формате XML для члена "F:Alt.Box2D.ContactEdge.Next" проигнорирован -->
        <member name="T:Alt.Box2D.Contact">
            The class manages contact between two shapes. A contact exists for each overlapping
            AABB in the broad-phase (except if filtered). Therefore a contact object may exist
            that has no contact points.
        </member>
        <member name="M:Alt.Box2D.Contact.GetManifold(Alt.Box2D.Manifold@)">
            Get the contact manifold. Do not modify the manifold unless you understand the
            internals of Box2D.
        </member>
        <member name="M:Alt.Box2D.Contact.GetWorldManifold(Alt.Box2D.WorldManifold@)">
            Get the world manifold.
        </member>
        <member name="M:Alt.Box2D.Contact.IsTouching">
            Is this contact touching?
        </member>
        <member name="M:Alt.Box2D.Contact.SetEnabled(System.Boolean)">
            Enable/disable this contact. This can be used inside the pre-solve
            contact listener. The contact is only disabled for the current
            time step (or sub-step in continuous collisions).
        </member>
        <member name="M:Alt.Box2D.Contact.IsEnabled">
            Has this contact been disabled?
        </member>
        <member name="M:Alt.Box2D.Contact.GetNext">
            Get the next contact in the world's contact list.
        </member>
        <member name="M:Alt.Box2D.Contact.GetFixtureA">
            Get fixture A in this contact.
        </member>
        <member name="M:Alt.Box2D.Contact.GetFixtureB">
            Get fixture B in this contact.
        </member>
        <member name="M:Alt.Box2D.Contact.GetChildIndexA">
            Get the child primitive index for fixture A.
        </member>
        <member name="M:Alt.Box2D.Contact.GetChildIndexB">
            Get the child primitive index for fixture B.
        </member>
        <member name="M:Alt.Box2D.Contact.FlagForFiltering">
            Flag this contact for filtering. Filtering will occur the next time step.
        </member>
        <member name="M:Alt.Box2D.Contact.Evaluate(Alt.Box2D.Manifold@,Alt.Box2D.Transform@,Alt.Box2D.Transform@)">
            Evaluate this contact with your own manifold and transforms.   
        </member>
        <member name="T:Alt.Box2D.Filter">
            This holds contact filtering data.
        </member>
        <member name="F:Alt.Box2D.Filter.categoryBits">
            The collision category bits. Normally you would just set one bit.
        </member>
        <member name="F:Alt.Box2D.Filter.maskBits">
            The collision mask bits. This states the categories that this
            Shape would accept for collision.
        </member>
        <member name="F:Alt.Box2D.Filter.groupIndex">
            Collision groups allow a certain group of objects to never collide (negative)
            or always collide (positive). Zero means no collision group. Non-zero group
            filtering always wins against the mask bits.
        </member>
        <member name="T:Alt.Box2D.FixtureDef">
            A fixture definition is used to create a fixture. This class defines an
            abstract fixture definition. You can reuse fixture definitions safely.
        </member>
        <member name="M:Alt.Box2D.FixtureDef.#ctor">
            The constructor sets the default fixture definition values.
        </member>
        <member name="F:Alt.Box2D.FixtureDef.shape">
            The Shape, this must be set. The Shape will be cloned, so you
            can create the Shape on the stack.
        </member>
        <member name="F:Alt.Box2D.FixtureDef.userData">
            Use this to store application specific fixture data.
        </member>
        <member name="F:Alt.Box2D.FixtureDef.friction">
            The friction coefficient, usually in the range [0,1].
        </member>
        <member name="F:Alt.Box2D.FixtureDef.restitution">
            The restitution (elasticity) usually in the range [0,1].
        </member>
        <member name="F:Alt.Box2D.FixtureDef.density">
            The density, usually in kg/m^2.
        </member>
        <member name="F:Alt.Box2D.FixtureDef.isSensor">
            A sensor Shape collects contact information but never generates a collision
            response.
        </member>
        <member name="F:Alt.Box2D.FixtureDef.filter">
            Contact filtering data.
        </member>
        <member name="T:Alt.Box2D.FixtureProxy">
            This proxy is used internally to connect fixtures to the broad-phase.
        </member>
        <member name="T:Alt.Box2D.Fixture">
            A fixture is used to attach a Shape to a body for collision detection. A fixture
            inherits its transform from its parent. Fixtures hold additional non-geometric data
            such as friction, collision filters, etc.
            Fixtures are created via Body.CreateFixture.
            @warning you cannot reuse fixtures.
        </member>
        <member name="M:Alt.Box2D.Fixture.GetShape">
            Get the child Shape. You can modify the child Shape, however you should not change the
            number of vertices because this will crash some collision caching mechanisms.
        </member>
        <member name="M:Alt.Box2D.Fixture.IsSensor">
            Is this fixture a sensor (non-solid)?
            @return the true if the Shape is a sensor.
        </member>
        <member name="M:Alt.Box2D.Fixture.SetSensor(System.Boolean)">
            Set if this fixture is a sensor.
        </member>
        <member name="M:Alt.Box2D.Fixture.SetFilterData(Alt.Box2D.Filter@)">
            Set the contact filtering data. This will not update contacts until the next time
            step when either parent body is active and awake.
        </member>
        <member name="M:Alt.Box2D.Fixture.GetFilterData(Alt.Box2D.Filter@)">
            Get the contact filtering data.
        </member>
        <member name="M:Alt.Box2D.Fixture.GetBody">
            Get the parent body of this fixture. This is null if the fixture is not attached.
            @return the parent body.
        </member>
        <member name="M:Alt.Box2D.Fixture.GetNext">
            Get the next fixture in the parent body's fixture list.
            @return the next Shape.
        </member>
        <member name="M:Alt.Box2D.Fixture.GetUserData">
            Get the user data that was assigned in the fixture definition. Use this to
            store your application specific data.
        </member>
        <member name="M:Alt.Box2D.Fixture.SetUserData(System.Object)">
            Set the user data. Use this to store your application specific data.
        </member>
        <member name="M:Alt.Box2D.Fixture.TestPoint(Alt.Sketch.Vector2)">
            Test a point for containment in this fixture.
            @param xf the Shape world transform.
            @param p a point in world coordinates.
        </member>
        <member name="M:Alt.Box2D.Fixture.RayCast(Alt.Box2D.RayCastOutput@,Alt.Box2D.RayCastInput@,System.Int32)">
            Cast a ray against this Shape.
            @param output the ray-cast results.
            @param input the ray-cast input parameters.
        </member>
        <member name="M:Alt.Box2D.Fixture.GetMassData(Alt.Box2D.MassData@)">
            Get the mass data for this fixture. The mass data is based on the density and
            the Shape. The rotational inertia is about the Shape's origin.
        </member>
        <member name="M:Alt.Box2D.Fixture.GetFriction">
            Get the coefficient of friction.
        </member>
        <member name="M:Alt.Box2D.Fixture.SetFriction(System.Double)">
            Set the coefficient of friction.
        </member>
        <member name="M:Alt.Box2D.Fixture.GetRestitution">
            Get the coefficient of restitution.
        </member>
        <member name="M:Alt.Box2D.Fixture.SetRestitution(System.Double)">
            Set the coefficient of restitution.
        </member>
        <member name="M:Alt.Box2D.Fixture.GetAABB(Alt.Box2D.AABB@,System.Int32)">
            Get the fixture's AABB. This AABB may be enlarge and/or stale.
            If you need a more accurate AABB, compute it using the Shape and
            the body transform.
        </member>
        <member name="P:Alt.Box2D.Fixture.ShapeType">
            Get the type of the child Shape. You can use this to down cast to the concrete Shape.
            @return the Shape type.
        </member>
        <member name="T:Alt.Box2D.Island">
            This is an internal class.
        </member>
        <member name="T:Alt.Box2D.DistanceJointDef">
            Distance joint definition. This requires defining an
            anchor point on both bodies and the non-zero length of the
            distance joint. The definition uses local anchor points
            so that the initial configuration can violate the constraint
            slightly. This helps when saving and loading a game.
            @warning Do not use a zero or short length.
        </member>
        <member name="F:Alt.Box2D.JointDef.type">
            The joint type is set automatically for concrete joint types.
        </member>
        <member name="F:Alt.Box2D.JointDef.userData">
            Use this to attach application specific data to your joints.
        </member>
        <member name="F:Alt.Box2D.JointDef.bodyA">
            The first attached body.
        </member>
        <member name="F:Alt.Box2D.JointDef.bodyB">
            The second attached body.
        </member>
        <member name="F:Alt.Box2D.JointDef.collideConnected">
            Set this flag to true if the attached bodies should collide.
        </member>
        <member name="M:Alt.Box2D.DistanceJointDef.Initialize(Alt.Box2D.Body,Alt.Box2D.Body,Alt.Sketch.Vector2,Alt.Sketch.Vector2)">
            Initialize the bodies, anchors, and length using the world
            anchors.
        </member>
        <member name="F:Alt.Box2D.DistanceJointDef.localAnchorA">
            The local anchor point relative to body1's origin.
        </member>
        <member name="F:Alt.Box2D.DistanceJointDef.localAnchorB">
            The local anchor point relative to body2's origin.
        </member>
        <member name="F:Alt.Box2D.DistanceJointDef.length">
            The natural length between the anchor points.
        </member>
        <member name="F:Alt.Box2D.DistanceJointDef.frequencyHz">
            The mass-spring-damper frequency in Hertz.
        </member>
        <member name="F:Alt.Box2D.DistanceJointDef.dampingRatio">
            The damping ratio. 0 = no damping, 1 = critical damping.
        </member>
        <member name="T:Alt.Box2D.DistanceJoint">
            A distance joint rains two points on two bodies
            to remain at a fixed distance from each other. You can view
            this as a massless, rigid rod.
        </member>
        <member name="M:Alt.Box2D.Joint.GetBodyA">
            Get the first body attached to this joint.
        </member>
        <member name="M:Alt.Box2D.Joint.GetBodyB">
            Get the second body attached to this joint.
        </member>
        <member name="M:Alt.Box2D.Joint.GetAnchorA">
            Get the anchor point on body1 in world coordinates.
        </member>
        <member name="M:Alt.Box2D.Joint.GetAnchorB">
            Get the anchor point on body2 in world coordinates.
        </member>
        <member name="M:Alt.Box2D.Joint.GetReactionForce(System.Double)">
            Get the reaction force on body2 at the joint anchor in Newtons.
        </member>
        <member name="M:Alt.Box2D.Joint.GetReactionTorque(System.Double)">
            Get the reaction torque on body2 in N*m.
        </member>
        <member name="M:Alt.Box2D.Joint.GetNext">
            Get the next joint the world joint list.
        </member>
        <member name="M:Alt.Box2D.Joint.GetUserData">
            Get the user data pointer.
        </member>
        <member name="M:Alt.Box2D.Joint.SetUserData(System.Object)">
            Set the user data pointer.
        </member>
        <member name="M:Alt.Box2D.Joint.IsActive">
            Short-cut function to determine if either body is inactive.
        </member>
        <member name="P:Alt.Box2D.Joint.JointType">
            Get the type of the concrete joint.
        </member>
        <member name="M:Alt.Box2D.DistanceJoint.SetLength(System.Double)">
            Set/get the natural length.
            Manipulating the length can lead to non-physical behavior when the frequency is zero.
        </member>
        <member name="T:Alt.Box2D.FrictionJointDef">
            Friction joint definition.
        </member>
        <member name="F:Alt.Box2D.FrictionJointDef.localAnchorA">
            The local anchor point relative to body1's origin.
        </member>
        <member name="F:Alt.Box2D.FrictionJointDef.localAnchorB">
            The local anchor point relative to body2's origin.
        </member>
        <member name="F:Alt.Box2D.FrictionJointDef.maxForce">
            The maximum friction force in N.
        </member>
        <member name="F:Alt.Box2D.FrictionJointDef.maxTorque">
            The maximum friction torque in N-m.
        </member>
        <member name="T:Alt.Box2D.FrictionJoint">
            Friction joint. This is used for top-down friction.
            It provides 2D translational friction and angular friction.
        </member>
        <member name="T:Alt.Box2D.GearJointDef">
            Gear joint definition. This definition requires two existing
            revolute or prismatic joints (any combination will work).
            The provided joints must attach a dynamic body to a static body.
        </member>
        <member name="F:Alt.Box2D.GearJointDef.joint1">
            The first revolute/prismatic joint attached to the gear joint.
        </member>
        <member name="F:Alt.Box2D.GearJointDef.joint2">
            The second revolute/prismatic joint attached to the gear joint.
        </member>
        <member name="F:Alt.Box2D.GearJointDef.ratio">
            The gear ratio.
            @see GearJoint for explanation.
        </member>
        <member name="T:Alt.Box2D.GearJoint">
            A gear joint is used to connect two joints together. Either joint
            can be a revolute or prismatic joint. You specify a gear ratio
            to bind the motions together:
            coordinate1 + ratio * coordinate2 = ant
            The ratio can be negative or positive. If one joint is a revolute joint
            and the other joint is a prismatic joint, then the ratio will have units
            of length or units of 1/length.
            @warning The revolute and prismatic joints must be attached to
            fixed bodies (which must be body1 on those joints).
        </member>
        <member name="M:Alt.Box2D.GearJoint.GetRatio">
            Get the gear ratio.
        </member>
        <member name="T:Alt.Box2D.JointEdge">
            A joint edge is used to connect bodies and joints together
            in a joint graph where each body is a node and each joint
            is an edge. A joint edge belongs to a doubly linked list
            maintained in each attached body. Each joint has two joint
            nodes, one for each attached body.
        </member>
        <member name="F:Alt.Box2D.JointEdge.Other">
            <summary>
            Provides quick access to the other body attached.
            </summary>
        </member>
        <member name="F:Alt.Box2D.JointEdge.Joint">
            <summary>
            The joint.
            </summary>
        </member>
        <member name="F:Alt.Box2D.JointEdge.Prev">
            <summary>
            The previous joint edge in the body's joint list.
            </summary>
        </member>
        <member name="F:Alt.Box2D.JointEdge.Next">
            <summary>
            The next joint edge in the body's joint list.
            </summary>
        </member>
        <member name="T:Alt.Box2D.LineJointDef">
            Line joint definition. This requires defining a line of
            motion using an axis and an anchor point. The definition uses local
            anchor points and a local axis so that the initial configuration
            can violate the constraint slightly. The joint translation is zero
            when the local anchor points coincide in world space. Using local
            anchors and a local axis helps when saving and loading a game.
        </member>
        <member name="M:Alt.Box2D.LineJointDef.Initialize(Alt.Box2D.Body,Alt.Box2D.Body,Alt.Sketch.Vector2,Alt.Sketch.Vector2)">
            Initialize the bodies, anchors, axis, and reference angle using the world
            anchor and world axis.
        </member>
        <member name="F:Alt.Box2D.LineJointDef.localAnchorA">
            The local anchor point relative to body1's origin.
        </member>
        <member name="F:Alt.Box2D.LineJointDef.localAnchorB">
            The local anchor point relative to body2's origin.
        </member>
        <member name="F:Alt.Box2D.LineJointDef.localAxisA">
            The local translation axis in body1.
        </member>
        <member name="F:Alt.Box2D.LineJointDef.enableLimit">
            Enable/disable the joint limit.
        </member>
        <member name="F:Alt.Box2D.LineJointDef.lowerTranslation">
            The lower translation limit, usually in meters.
        </member>
        <member name="F:Alt.Box2D.LineJointDef.upperTranslation">
            The upper translation limit, usually in meters.
        </member>
        <member name="F:Alt.Box2D.LineJointDef.enableMotor">
            Enable/disable the joint motor.
        </member>
        <member name="F:Alt.Box2D.LineJointDef.maxMotorForce">
            The maximum motor torque, usually in N-m.
        </member>
        <member name="F:Alt.Box2D.LineJointDef.motorSpeed">
            The desired motor speed in radians per second.
        </member>
        <member name="T:Alt.Box2D.LineJoint">
            A line joint. This joint provides two degrees of freedom: translation
            along an axis fixed in body1 and rotation in the plane. You can use a
            joint limit to restrict the range of motion and a joint motor to drive
            the motion or to model joint friction.
        </member>
        <member name="M:Alt.Box2D.LineJoint.GetJointTranslation">
            Get the current joint translation, usually in meters.
        </member>
        <member name="M:Alt.Box2D.LineJoint.GetJointSpeed">
            Get the current joint translation speed, usually in meters per second.
        </member>
        <member name="M:Alt.Box2D.LineJoint.IsLimitEnabled">
            Is the joint limit enabled?
        </member>
        <member name="M:Alt.Box2D.LineJoint.EnableLimit(System.Boolean)">
            Enable/disable the joint limit.
        </member>
        <member name="M:Alt.Box2D.LineJoint.GetLowerLimit">
            Get the lower joint limit, usually in meters.
        </member>
        <member name="M:Alt.Box2D.LineJoint.GetUpperLimit">
            Get the upper joint limit, usually in meters.
        </member>
        <member name="M:Alt.Box2D.LineJoint.SetLimits(System.Double,System.Double)">
            Set the joint limits, usually in meters.
        </member>
        <member name="M:Alt.Box2D.LineJoint.IsMotorEnabled">
            Is the joint motor enabled?
        </member>
        <member name="M:Alt.Box2D.LineJoint.EnableMotor(System.Boolean)">
            Enable/disable the joint motor.
        </member>
        <member name="M:Alt.Box2D.LineJoint.SetMotorSpeed(System.Double)">
            Set the motor speed, usually in meters per second.
        </member>
        <member name="M:Alt.Box2D.LineJoint.GetMotorSpeed">
            Get the motor speed, usually in meters per second.
        </member>
        <member name="M:Alt.Box2D.LineJoint.SetMaxMotorForce(System.Double)">
            Set the maximum motor force, usually in N.
        </member>
        <member name="M:Alt.Box2D.LineJoint.GetMotorForce">
            Get the current motor force, usually in N.
        </member>
        <member name="T:Alt.Box2D.MaxDistanceJointDef">
            Distance joint definition. This requires defining an
            anchor point on both bodies and the non-zero length of the
            distance joint. The definition uses local anchor points
            so that the initial configuration can violate the constraint
            slightly. This helps when saving and loading a game.
            @warning Do not use a zero or short length.
        </member>
        <member name="M:Alt.Box2D.MaxDistanceJointDef.Initialize(Alt.Box2D.Body,Alt.Box2D.Body,Alt.Sketch.Vector2,Alt.Sketch.Vector2,System.Double)">
            Initialize the bodies, anchors, and length using the world
            anchors.
        </member>
        <member name="F:Alt.Box2D.MaxDistanceJointDef.localAnchorA">
            The local anchor point relative to body1's origin.
        </member>
        <member name="F:Alt.Box2D.MaxDistanceJointDef.localAnchorB">
            The local anchor point relative to body2's origin.
        </member>
        <member name="F:Alt.Box2D.MaxDistanceJointDef.length">
            The natural length between the anchor points.
        </member>
        <member name="F:Alt.Box2D.MaxDistanceJointDef.frequencyHz">
            The mass-spring-damper frequency in Hertz.
        </member>
        <member name="F:Alt.Box2D.MaxDistanceJointDef.dampingRatio">
            The damping ratio. 0 = no damping, 1 = critical damping.
        </member>
        <member name="T:Alt.Box2D.MaxDistanceJoint">
            A distance joint rains two points on two bodies
            to remain at a fixed distance from each other. You can view
            this as a massless, rigid rod.
        </member>
        <member name="T:Alt.Box2D.MouseJointDef">
            Mouse joint definition. This requires a world target point,
            tuning parameters, and the time step.
        </member>
        <member name="F:Alt.Box2D.MouseJointDef.target">
            The initial world target point. This is assumed
            to coincide with the body anchor initially.
        </member>
        <member name="F:Alt.Box2D.MouseJointDef.maxForce">
            The maximum constraint force that can be exerted
            to move the candidate body. Usually you will express
            as some multiple of the weight (multiplier * mass * gravity).
        </member>
        <member name="F:Alt.Box2D.MouseJointDef.frequencyHz">
            The response speed.
        </member>
        <member name="F:Alt.Box2D.MouseJointDef.dampingRatio">
            The damping ratio. 0 = no damping, 1 = critical damping.
        </member>
        <member name="T:Alt.Box2D.MouseJoint">
            A mouse joint is used to make a point on a body track a
            specified world point. This a soft constraint with a maximum
            force. This allows the constraint to stretch and without
            applying huge forces.
            NOTE: this joint is not documented in the manual because it was
            developed to be used in the testbed. If you want to learn how to
            use the mouse joint, look at the testbed.
        </member>
        <member name="M:Alt.Box2D.MouseJoint.GetAnchorA">
            Implements Joint.
        </member>
        <member name="M:Alt.Box2D.MouseJoint.GetAnchorB">
            Implements Joint.
        </member>
        <member name="M:Alt.Box2D.MouseJoint.GetReactionForce(System.Double)">
            Implements Joint.
        </member>
        <member name="M:Alt.Box2D.MouseJoint.GetReactionTorque(System.Double)">
            Implements Joint.
        </member>
        <member name="M:Alt.Box2D.MouseJoint.SetTarget(Alt.Sketch.Vector2)">
            Use this to update the target point.
        </member>
        <member name="M:Alt.Box2D.MouseJoint.SetMaxForce(System.Double)">
            Set/get the maximum force in Newtons.
        </member>
        <member name="M:Alt.Box2D.MouseJoint.SetFrequency(System.Double)">
            Set/get the frequency in Hertz.
        </member>
        <member name="M:Alt.Box2D.MouseJoint.SetDampingRatio(System.Double)">
            Set/get the damping ratio (dimensionless).
        </member>
        <member name="T:Alt.Box2D.PrismaticJointDef">
            Prismatic joint definition. This requires defining a line of
            motion using an axis and an anchor point. The definition uses local
            anchor points and a local axis so that the initial configuration
            can violate the constraint slightly. The joint translation is zero
            when the local anchor points coincide in world space. Using local
            anchors and a local axis helps when saving and loading a game.
        </member>
        <member name="M:Alt.Box2D.PrismaticJointDef.Initialize(Alt.Box2D.Body,Alt.Box2D.Body,Alt.Sketch.Vector2,Alt.Sketch.Vector2)">
            Initialize the bodies, anchors, axis, and reference angle using the world
            anchor and world axis.
        </member>
        <member name="F:Alt.Box2D.PrismaticJointDef.localAnchorA">
            The local anchor point relative to body1's origin.
        </member>
        <member name="F:Alt.Box2D.PrismaticJointDef.localAnchorB">
            The local anchor point relative to body2's origin.
        </member>
        <member name="F:Alt.Box2D.PrismaticJointDef.localAxis1">
            The local translation axis in body1.
        </member>
        <member name="F:Alt.Box2D.PrismaticJointDef.referenceAngle">
            The rained angle between the bodies: body2_angle - body1_angle.
        </member>
        <member name="F:Alt.Box2D.PrismaticJointDef.enableLimit">
            Enable/disable the joint limit.
        </member>
        <member name="F:Alt.Box2D.PrismaticJointDef.lowerTranslation">
            The lower translation limit, usually in meters.
        </member>
        <member name="F:Alt.Box2D.PrismaticJointDef.upperTranslation">
            The upper translation limit, usually in meters.
        </member>
        <member name="F:Alt.Box2D.PrismaticJointDef.enableMotor">
            Enable/disable the joint motor.
        </member>
        <member name="F:Alt.Box2D.PrismaticJointDef.maxMotorForce">
            The maximum motor torque, usually in N-m.
        </member>
        <member name="F:Alt.Box2D.PrismaticJointDef.motorSpeed">
            The desired motor speed in radians per second.
        </member>
        <member name="T:Alt.Box2D.PrismaticJoint">
            A prismatic joint. This joint provides one degree of freedom: translation
            along an axis fixed in body1. Relative rotation is prevented. You can
            use a joint limit to restrict the range of motion and a joint motor to
            drive the motion or to model joint friction.
        </member>
        <member name="M:Alt.Box2D.PrismaticJoint.GetJointTranslation">
            Get the current joint translation, usually in meters.
        </member>
        <member name="M:Alt.Box2D.PrismaticJoint.GetJointSpeed">
            Get the current joint translation speed, usually in meters per second.
        </member>
        <member name="M:Alt.Box2D.PrismaticJoint.IsLimitEnabled">
            Is the joint limit enabled?
        </member>
        <member name="M:Alt.Box2D.PrismaticJoint.EnableLimit(System.Boolean)">
            Enable/disable the joint limit.
        </member>
        <member name="M:Alt.Box2D.PrismaticJoint.GetLowerLimit">
            Get the lower joint limit, usually in meters.
        </member>
        <member name="M:Alt.Box2D.PrismaticJoint.GetUpperLimit">
            Get the upper joint limit, usually in meters.
        </member>
        <member name="M:Alt.Box2D.PrismaticJoint.SetLimits(System.Double,System.Double)">
            Set the joint limits, usually in meters.
        </member>
        <member name="M:Alt.Box2D.PrismaticJoint.IsMotorEnabled">
            Is the joint motor enabled?
        </member>
        <member name="M:Alt.Box2D.PrismaticJoint.EnableMotor(System.Boolean)">
            Enable/disable the joint motor.
        </member>
        <member name="M:Alt.Box2D.PrismaticJoint.SetMotorSpeed(System.Double)">
            Set the motor speed, usually in meters per second.
        </member>
        <member name="M:Alt.Box2D.PrismaticJoint.GetMotorSpeed">
            Get the motor speed, usually in meters per second.
        </member>
        <member name="M:Alt.Box2D.PrismaticJoint.SetMaxMotorForce(System.Double)">
            Set the maximum motor force, usually in N.
        </member>
        <member name="M:Alt.Box2D.PrismaticJoint.GetMotorForce">
            Get the current motor force, usually in N.
        </member>
        <member name="T:Alt.Box2D.PulleyJointDef">
            Pulley joint definition. This requires two ground anchors,
            two dynamic body anchor points, max lengths for each side,
            and a pulley ratio.
        </member>
        <member name="M:Alt.Box2D.PulleyJointDef.Initialize(Alt.Box2D.Body,Alt.Box2D.Body,Alt.Sketch.Vector2,Alt.Sketch.Vector2,Alt.Sketch.Vector2,Alt.Sketch.Vector2,System.Double)">
            Initialize the bodies, anchors, lengths, max lengths, and ratio using the world anchors.
        </member>
        <member name="F:Alt.Box2D.PulleyJointDef.groundAnchorA">
            The first ground anchor in world coordinates. This point never moves.
        </member>
        <member name="F:Alt.Box2D.PulleyJointDef.groundAnchorB">
            The second ground anchor in world coordinates. This point never moves.
        </member>
        <member name="F:Alt.Box2D.PulleyJointDef.localAnchorA">
            The local anchor point relative to body1's origin.
        </member>
        <member name="F:Alt.Box2D.PulleyJointDef.localAnchorB">
            The local anchor point relative to body2's origin.
        </member>
        <member name="F:Alt.Box2D.PulleyJointDef.lengthA">
            The a reference length for the segment attached to body1.
        </member>
        <member name="F:Alt.Box2D.PulleyJointDef.maxLengthA">
            The maximum length of the segment attached to body1.
        </member>
        <member name="F:Alt.Box2D.PulleyJointDef.lengthB">
            The a reference length for the segment attached to body2.
        </member>
        <member name="F:Alt.Box2D.PulleyJointDef.maxLengthB">
            The maximum length of the segment attached to body2.
        </member>
        <member name="F:Alt.Box2D.PulleyJointDef.ratio">
            The pulley ratio, used to simulate a block-and-tackle.
        </member>
        <!-- Некорректный комментарий в формате XML для члена "T:Alt.Box2D.PulleyJoint" проигнорирован -->
        <member name="M:Alt.Box2D.PulleyJoint.GetGroundAnchorA">
            Get the first ground anchor.
        </member>
        <member name="M:Alt.Box2D.PulleyJoint.GetGroundAnchorB">
            Get the second ground anchor.
        </member>
        <member name="M:Alt.Box2D.PulleyJoint.GetLength1">
            Get the current length of the segment attached to body1.
        </member>
        <member name="M:Alt.Box2D.PulleyJoint.GetLength2">
            Get the current length of the segment attached to body2.
        </member>
        <member name="M:Alt.Box2D.PulleyJoint.GetRatio">
            Get the pulley ratio.
        </member>
        <member name="T:Alt.Box2D.RevoluteJointDef">
            Revolute joint definition. This requires defining an
            anchor point where the bodies are joined. The definition
            uses local anchor points so that the initial configuration
            can violate the constraint slightly. You also need to
            specify the initial relative angle for joint limits. This
            helps when saving and loading a game.
            The local anchor points are measured from the body's origin
            rather than the center of mass because:
            1. you might not know where the center of mass will be.
            2. if you add/remove shapes from a body and recompute the mass,
               the joints will be broken.
        </member>
        <member name="M:Alt.Box2D.RevoluteJointDef.Initialize(Alt.Box2D.Body,Alt.Box2D.Body,Alt.Sketch.Vector2)">
            Initialize the bodies, anchors, and reference angle using the world
            anchor.
        </member>
        <member name="F:Alt.Box2D.RevoluteJointDef.localAnchorA">
            The local anchor point relative to body1's origin.
        </member>
        <member name="F:Alt.Box2D.RevoluteJointDef.localAnchorB">
            The local anchor point relative to body2's origin.
        </member>
        <member name="F:Alt.Box2D.RevoluteJointDef.referenceAngle">
            The body2 angle minus body1 angle in the reference state (radians).
        </member>
        <member name="F:Alt.Box2D.RevoluteJointDef.enableLimit">
            A flag to enable joint limits.
        </member>
        <member name="F:Alt.Box2D.RevoluteJointDef.lowerAngle">
            The lower angle for the joint limit (radians).
        </member>
        <member name="F:Alt.Box2D.RevoluteJointDef.upperAngle">
            The upper angle for the joint limit (radians).
        </member>
        <member name="F:Alt.Box2D.RevoluteJointDef.enableMotor">
            A flag to enable the joint motor.
        </member>
        <member name="F:Alt.Box2D.RevoluteJointDef.motorSpeed">
            The desired motor speed. Usually in radians per second.
        </member>
        <member name="F:Alt.Box2D.RevoluteJointDef.maxMotorTorque">
            The maximum motor torque used to achieve the desired motor speed.
            Usually in N-m.
        </member>
        <member name="T:Alt.Box2D.RevoluteJoint">
            A revolute joint rains to bodies to share a common point while they
            are free to rotate about the point. The relative rotation about the shared
            point is the joint angle. You can limit the relative rotation with
            a joint limit that specifies a lower and upper angle. You can use a motor
            to drive the relative rotation about the shared point. A maximum motor torque
            is provided so that infinite forces are not generated.
        </member>
        <member name="M:Alt.Box2D.RevoluteJoint.GetJointAngle">
            Get the current joint angle in radians.
        </member>
        <member name="M:Alt.Box2D.RevoluteJoint.GetJointSpeed">
            Get the current joint angle speed in radians per second.
        </member>
        <member name="M:Alt.Box2D.RevoluteJoint.IsLimitEnabled">
            Is the joint limit enabled?
        </member>
        <member name="M:Alt.Box2D.RevoluteJoint.EnableLimit(System.Boolean)">
            Enable/disable the joint limit.
        </member>
        <member name="M:Alt.Box2D.RevoluteJoint.GetLowerLimit">
            Get the lower joint limit in radians.
        </member>
        <member name="M:Alt.Box2D.RevoluteJoint.GetUpperLimit">
            Get the upper joint limit in radians.
        </member>
        <member name="M:Alt.Box2D.RevoluteJoint.SetLimits(System.Double,System.Double)">
            Set the joint limits in radians.
        </member>
        <member name="M:Alt.Box2D.RevoluteJoint.IsMotorEnabled">
            Is the joint motor enabled?
        </member>
        <member name="M:Alt.Box2D.RevoluteJoint.EnableMotor(System.Boolean)">
            Enable/disable the joint motor.
        </member>
        <member name="M:Alt.Box2D.RevoluteJoint.SetMotorSpeed(System.Double)">
            Set the motor speed in radians per second.
        </member>
        <member name="M:Alt.Box2D.RevoluteJoint.GetMotorSpeed">
            Get the motor speed in radians per second.
        </member>
        <member name="M:Alt.Box2D.RevoluteJoint.SetMaxMotorTorque(System.Double)">
            Set the maximum motor torque, usually in N-m.
        </member>
        <member name="M:Alt.Box2D.RevoluteJoint.GetMotorTorque">
            Get the current motor torque, usually in N-m.
        </member>
        <member name="T:Alt.Box2D.WeldJointDef">
            Weld joint definition. You need to specify local anchor points
            where they are attached and the relative body angle. The position
            of the anchor points is important for computing the reaction torque.
        </member>
        <member name="F:Alt.Box2D.WeldJointDef.localAnchorA">
            The local anchor point relative to body1's origin.
        </member>
        <member name="F:Alt.Box2D.WeldJointDef.localAnchorB">
            The local anchor point relative to body2's origin.
        </member>
        <member name="F:Alt.Box2D.WeldJointDef.referenceAngle">
            The body2 angle minus body1 angle in the reference state (radians).
        </member>
        <member name="T:Alt.Box2D.WeldJoint">
            A weld joint essentially glues two bodies together. A weld joint may
            distort somewhat because the island constraint solver is approximate.
        </member>
        <member name="T:Alt.Box2D.TimeStep">
            This is an internal structure.
        </member>
        <member name="T:Alt.Box2D.World">
            The world class manages all physics entities, dynamic simulation,
            and asynchronous queries. The world also contains efficient memory
            management facilities.
        </member>
        <member name="M:Alt.Box2D.World.#ctor(Alt.Sketch.Vector2,System.Boolean)">
            ruct a world object.
            @param gravity the world gravity vector.
            @param doSleep improve performance by not simulating inactive bodies.
        </member>
        <member name="M:Alt.Box2D.World.CreateBody(Alt.Box2D.BodyDef)">
            Create a rigid body given a definition. No reference to the definition
            is retained.
            @warning This function is locked during callbacks.
        </member>
        <member name="M:Alt.Box2D.World.DestroyBody(Alt.Box2D.Body)">
            Destroy a rigid body given a definition. No reference to the definition
            is retained. This function is locked during callbacks.
            @warning This automatically deletes all associated shapes and joints.
            @warning This function is locked during callbacks.
        </member>
        <member name="M:Alt.Box2D.World.CreateJoint(Alt.Box2D.JointDef)">
            Create a joint to rain bodies together. No reference to the definition
            is retained. This may cause the connected bodies to cease colliding.
            @warning This function is locked during callbacks.
        </member>
        <member name="M:Alt.Box2D.World.DestroyJoint(Alt.Box2D.Joint)">
            Destroy a joint. This may cause the connected bodies to begin colliding.
            @warning This function is locked during callbacks.
        </member>
        <member name="M:Alt.Box2D.World.Step(System.Double,System.Int32,System.Int32)">
            Take a time step. This performs collision detection, integration,
            and raint solution.
            @param timeStep the amount of time to simulate, this should not vary.
            @param velocityIterations for the velocity raint solver.
            @param positionIterations for the position raint solver.
        </member>
        <member name="M:Alt.Box2D.World.ClearForces">
            Call this after you are done with time steps to clear the forces. You normally
            call this after each call to Step, unless you are performing sub-steps. By default,
            forces will be automatically cleared, so you don't need to call this function.
            @see SetAutoClearForces
        </member>
        <member name="M:Alt.Box2D.World.SetAutoClearForces(System.Boolean)">
            Set flag to control automatic clearing of forces after each time step.
        </member>
        <member name="M:Alt.Box2D.World.GetAutoClearForces">
            Get the flag that controls automatic clearing of forces after each time step.
        </member>
        <member name="M:Alt.Box2D.World.GetContactManager">
            Get the contact manager for testing.
        </member>
        <member name="M:Alt.Box2D.World.DrawDebugData">
            Call this to draw shapes and other debug draw data.
        </member>
        <member name="M:Alt.Box2D.World.QueryAABB(Alt.Func{Alt.Box2D.FixtureProxy,System.Boolean},Alt.Box2D.AABB@)">
            Query the world for all fixtures that potentially overlap the
            provided AABB.
            @param callback a user implemented callback class.
            @param aabb the query box.
        </member>
        <member name="M:Alt.Box2D.World.RayCast(Alt.Box2D.RayCastCallback,Alt.Sketch.Vector2,Alt.Sketch.Vector2)">
            Ray-cast the world for all fixtures in the path of the ray. Your callback
            controls whether you get the closest point, any point, or n-points.
            The ray-cast ignores shapes that contain the starting point.
            @param callback a user implemented callback class.
            @param point1 the ray starting point
            @param point2 the ray ending point
        </member>
        <member name="M:Alt.Box2D.World.GetBodyList">
            Get the world body list. With the returned body, use Body.GetNext to get
            the next body in the world list. A null body indicates the end of the list.
            @return the head of the world body list.
        </member>
        <member name="M:Alt.Box2D.World.GetJointList">
            Get the world joint list. With the returned joint, use Joint.GetNext to get
            the next joint in the world list. A null joint indicates the end of the list.
            @return the head of the world joint list.
        </member>
        <member name="M:Alt.Box2D.World.GetContactList">
            Get the world contact list. With the returned contact, use Contact.GetNext to get
            the next contact in the world list. A null contact indicates the end of the list.
            @return the head of the world contact list.
            @warning contacts are 
        </member>
        <member name="P:Alt.Box2D.World.DestructionListener">
            Register a destruction listener.
        </member>
        <member name="P:Alt.Box2D.World.ContactFilter">
            Register a contact filter to provide specific control over collision.
            Otherwise the default filter is used (Settings.b2_defaultFilter).
        </member>
        <member name="P:Alt.Box2D.World.ContactListener">
            Register a contact event listener
        </member>
        <member name="P:Alt.Box2D.World.DebugDraw">
            Register a routine for debug drawing. The debug draw functions are called
            inside the World.Step method, so make sure your renderer is ready to
            consume draw commands when you call Step().
        </member>
        <member name="P:Alt.Box2D.World.WarmStarting">
            Enable/disable warm starting. For testing.
        </member>
        <member name="P:Alt.Box2D.World.ContinuousPhysics">
            Enable/disable continuous physics. For testing.
        </member>
        <member name="P:Alt.Box2D.World.ProxyCount">
            Get the number of broad-phase proxies.
        </member>
        <member name="P:Alt.Box2D.World.BodyCount">
            Get the number of bodies.
        </member>
        <member name="P:Alt.Box2D.World.JointCount">
            Get the number of joints.
        </member>
        <member name="P:Alt.Box2D.World.ContactCount">
            Get the number of contacts (each may have 0 or more contact points).
        </member>
        <member name="P:Alt.Box2D.World.Gravity">
            Change the global gravity vector.
        </member>
        <member name="P:Alt.Box2D.World.IsLocked">
            Is the world locked (in the middle of a time step).
        </member>
        <member name="T:Alt.Box2D.RayCastCallback">
            Called for each fixture found in the query. You control how the ray cast
            proceeds by returning a double:
            return -1: ignore this fixture and continue
            return 0: terminate the ray cast
            return fraction: clip the ray to this point
            return 1: don't clip the ray and continue
            @param fixture the fixture hit by the ray
            @param point the point of initial intersection
            @param normal the normal vector at the point of intersection
            @return -1 to filter, 0 to terminate, fraction to clip the ray for
            closest hit, 1 to continue
        </member>
        <!-- Некорректный комментарий в формате XML для члена "F:Alt.Box2D.DebugDrawFlags.Joint" проигнорирован -->
        <!-- Некорректный комментарий в формате XML для члена "F:Alt.Box2D.DebugDrawFlags.AABB" проигнорирован -->
        <!-- Некорректный комментарий в формате XML для члена "F:Alt.Box2D.DebugDrawFlags.Pair" проигнорирован -->
        <!-- Некорректный комментарий в формате XML для члена "F:Alt.Box2D.DebugDrawFlags.CenterOfMass" проигнорирован -->
        <member name="T:Alt.FarseerPhysics.AltSketchDebugView">
            <summary>
            A debug view shows you what happens inside the physics engine. You can view
            bodies, joints, fixtures and more.
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.DebugViewBase">
            Implement and register this class with a World to provide debug drawing of physics
            entities in your game.
        </member>
        <member name="M:Alt.FarseerPhysics.DebugViewBase.AppendFlags(Alt.FarseerPhysics.DebugViewFlags)">
            <summary>
            Append flags to the current flags.
            </summary>
            <param name="flags">The flags.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.DebugViewBase.RemoveFlags(Alt.FarseerPhysics.DebugViewFlags)">
            <summary>
            Remove flags from the current flags.
            </summary>
            <param name="flags">The flags.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.DebugViewBase.DrawPolygon(Alt.Sketch.Vector2[],System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Draw a closed polygon provided in CCW order.
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="count">The vertex count.</param>
            <param name="red">The red value.</param>
            <param name="blue">The blue value.</param>
            <param name="green">The green value.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.DebugViewBase.DrawSolidPolygon(Alt.Sketch.Vector2[],System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Draw a solid closed polygon provided in CCW order.
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="count">The vertex count.</param>
            <param name="red">The red value.</param>
            <param name="blue">The blue value.</param>
            <param name="green">The green value.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.DebugViewBase.DrawCircle(Alt.Sketch.Vector2,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw a circle.
            </summary>
            <param name="center">The center.</param>
            <param name="radius">The radius.</param>
            <param name="red">The red value.</param>
            <param name="blue">The blue value.</param>
            <param name="green">The green value.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.DebugViewBase.DrawSolidCircle(Alt.Sketch.Vector2,System.Double,Alt.Sketch.Vector2,System.Double,System.Double,System.Double)">
            <summary>
            Draw a solid circle.
            </summary>
            <param name="center">The center.</param>
            <param name="radius">The radius.</param>
            <param name="axis">The axis.</param>
            <param name="red">The red value.</param>
            <param name="blue">The blue value.</param>
            <param name="green">The green value.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.DebugViewBase.DrawSegment(Alt.Sketch.Vector2,Alt.Sketch.Vector2,System.Double,System.Double,System.Double)">
            <summary>
            Draw a line segment.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="red">The red value.</param>
            <param name="blue">The blue value.</param>
            <param name="green">The green value.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.DebugViewBase.DrawTransform(Alt.FarseerPhysics.Common.Transform@)">
            <summary>
            Draw a transform. Choose your own length scale.
            </summary>
            <param name="transform">The transform.</param>
        </member>
        <member name="P:Alt.FarseerPhysics.DebugViewBase.Flags">
            <summary>
            Gets or sets the debug view flags.
            </summary>
            <value>The flags.</value>
        </member>
        <member name="M:Alt.FarseerPhysics.AltSketchDebugView.DrawDebugData">
            <summary>
            Call this to draw shapes and other debug draw data.
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.AltSketchDebugViewExt">
            <summary>
            A debug view shows you what happens inside the physics engine. You can view
            bodies, joints, fixtures and more.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.AltSketchDebugViewExt.DrawDebugData">
            <summary>
            Call this to draw shapes and other debug draw data.
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Collision.ContactFeature">
            <summary>
            The features that intersect to form the contact point
            This must be 4 bytes or less.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Collision.ContactFeature.IndexA">
            <summary>
            Feature index on ShapeA
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Collision.ContactFeature.IndexB">
            <summary>
            Feature index on ShapeB
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Collision.ContactFeature.TypeA">
            <summary>
            The feature type on ShapeA
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Collision.ContactFeature.TypeB">
            <summary>
            The feature type on ShapeB
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Collision.ContactID">
            <summary>
            Contact ids to facilitate warm starting.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Collision.ContactID.Features">
            <summary>
            The features that intersect to form the contact point
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Collision.ContactID.Key">
            <summary>
            Used to quickly compare contact ids.
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Collision.ManifoldPoint">
            <summary>
            A manifold point is a contact point belonging to a contact
            manifold. It holds details related to the geometry and dynamics
            of the contact points.
            The local point usage depends on the manifold type:
            -ShapeType.Circles: the local center of circleB
            -SeparationFunction.FaceA: the local center of cirlceB or the clip point of polygonB
            -SeparationFunction.FaceB: the clip point of polygonA
            This structure is stored across time steps, so we keep it small.
            Note: the impulses are used for internal caching and may not
            provide reliable contact forces, especially for high speed collisions.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Collision.ManifoldPoint.Id">
            <summary>
            Uniquely identifies a contact point between two Shapes
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Collision.ManifoldPoint.LocalPoint">
            <summary>
            Usage depends on manifold type
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Collision.ManifoldPoint.NormalImpulse">
            <summary>
            The non-penetration impulse
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Collision.ManifoldPoint.TangentImpulse">
            <summary>
            The friction impulse
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Collision.Manifold">
            <summary>
            A manifold for two touching convex Shapes.
            Box2D supports multiple types of contact:
            - Clip point versus plane with radius
            - Point versus point with radius (circles)
            The local point usage depends on the manifold type:
            - ShapeType.Circles: the local center of circleA
            - SeparationFunction.FaceA: the center of faceA
            - SeparationFunction.FaceB: the center of faceB
            Similarly the local normal usage:
            - ShapeType.Circles: not used
            - SeparationFunction.FaceA: the normal on polygonA
            - SeparationFunction.FaceB: the normal on polygonB
            We store contacts in this way so that position correction can
            account for movement, which is critical for continuous physics.
            All contact scenarios must be expressed in one of these types.
            This structure is stored across time steps, so we keep it small.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Collision.Manifold.LocalNormal">
            <summary>
            Not use for Type.SeparationFunction.Points
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Collision.Manifold.LocalPoint">
            <summary>
            Usage depends on manifold type
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Collision.Manifold.PointCount">
            <summary>
            The number of manifold points
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Collision.Manifold.Points">
            <summary>
            The points of contact
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Collision.PointState">
            <summary>
            This is used for determining the state of contact points.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Collision.PointState.Null">
            <summary>
            Point does not exist
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Collision.PointState.Add">
            <summary>
            Point was added in the update
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Collision.PointState.Persist">
            <summary>
            Point persisted across the update
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Collision.PointState.Remove">
            <summary>
            Point was removed in the update
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Collision.ClipVertex">
            <summary>
            Used for computing contact manifolds.
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Collision.RayCastInput">
            <summary>
            Ray-cast input data.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Collision.RayCastInput.MaxFraction">
            <summary>
            The ray extends from p1 to p1 + maxFraction * (p2 - p1).
            If you supply a max fraction of 1, the ray extends from p1 to p2.
            A max fraction of 0.5 makes the ray go from p1 and half way to p2.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Collision.RayCastInput.Point1">
            <summary>
            The starting point of the ray.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Collision.RayCastInput.Point2">
            <summary>
            The ending point of the ray.
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Collision.RayCastOutput">
            <summary>
            Ray-cast output data. 
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Collision.RayCastOutput.Fraction">
            <summary>
            The ray hits at p1 + fraction * (p2 - p1), where p1 and p2 come from RayCastInput.
            Contains the actual fraction of the ray where it has the intersection point.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Collision.RayCastOutput.Normal">
            <summary>
            The normal of the face of the shape the ray has hit.
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Collision.AABB">
            <summary>
            An axis aligned bounding box.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Collision.AABB.LowerBound">
            <summary>
            The lower vertex
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Collision.AABB.UpperBound">
            <summary>
            The upper vertex
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.AABB.IsValid">
            <summary>
            Verify that the bounds are sorted. And the bounds are valid numbers (not NaN).
            </summary>
            <returns>
            	<c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.AABB.Combine(Alt.FarseerPhysics.Collision.AABB@)">
            <summary>
            Combine an AABB into this one.
            </summary>
            <param name="aabb">The aabb.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.AABB.Combine(Alt.FarseerPhysics.Collision.AABB@,Alt.FarseerPhysics.Collision.AABB@)">
            <summary>
            Combine two AABBs into this one.
            </summary>
            <param name="aabb1">The aabb1.</param>
            <param name="aabb2">The aabb2.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.AABB.Contains(Alt.FarseerPhysics.Collision.AABB@)">
            <summary>
            Does this aabb contain the provided AABB.
            </summary>
            <param name="aabb">The aabb.</param>
            <returns>
            	<c>true</c> if it contains the specified aabb; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.AABB.Contains(Alt.Sketch.Vector2@)">
            <summary>
            Determines whether the AAABB contains the specified point.
            </summary>
            <param name="point">The point.</param>
            <returns>
            	<c>true</c> if it contains the specified point; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.AABB.TestOverlap(Alt.FarseerPhysics.Collision.AABB@,Alt.FarseerPhysics.Collision.AABB@)">
            <summary>
            Test if the two AABBs overlap.
            </summary>
            <param name="a">The first AABB.</param>
            <param name="b">The second AABB.</param>
            <returns>True if they are overlapping.</returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.AABB.RayCast(Alt.FarseerPhysics.Collision.RayCastOutput@,Alt.FarseerPhysics.Collision.RayCastInput@)">
            <summary>
            Raycast against this AABB using the specificed points and maxfraction (found in input)
            </summary>
            <param name="output">The results of the raycast.</param>
            <param name="input">The parameters for the raycast.</param>
            <returns>True if the ray intersects the AABB</returns>
        </member>
        <member name="P:Alt.FarseerPhysics.Collision.AABB.Center">
            <summary>
            Get the center of the AABB.
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Collision.AABB.Extents">
            <summary>
            Get the extents of the AABB (half-widths).
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Collision.AABB.Perimeter">
            <summary>
            Get the perimeter length
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Collision.AABB.Vertices">
            <summary>
            Gets the vertices of the AABB.
            </summary>
            <value>The corners of the AABB</value>
        </member>
        <member name="P:Alt.FarseerPhysics.Collision.AABB.Q1">
            <summary>
            First quadrant
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Collision.AABB.Q2">
            <summary>
            Second quadrant
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Collision.AABB.Q3">
            <summary>
            Third quadrant
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Collision.AABB.Q4">
            <summary>
            Forth quadrant
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Collision.TempPolygon">
            <summary>
            This holds polygon B expressed in frame A.
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Collision.EPAxis">
            <summary>
            This structure is used to keep track of the best separating axis.
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Collision.ReferenceFace">
            <summary>
            Reference face used for clipping
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Collision.Collision">
            <summary>
            Collision methods
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.Collision.TestOverlap(Alt.FarseerPhysics.Collision.Shapes.Shape,System.Int32,Alt.FarseerPhysics.Collision.Shapes.Shape,System.Int32,Alt.FarseerPhysics.Common.Transform@,Alt.FarseerPhysics.Common.Transform@)">
            <summary>
            Test overlap between the two shapes.
            </summary>
            <param name="shapeA">The first shape.</param>
            <param name="indexA">The index for the first shape.</param>
            <param name="shapeB">The second shape.</param>
            <param name="indexB">The index for the second shape.</param>
            <param name="xfA">The transform for the first shape.</param>
            <param name="xfB">The transform for the seconds shape.</param>
            <returns></returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.Collision.CollideCircles(Alt.FarseerPhysics.Collision.Manifold@,Alt.FarseerPhysics.Collision.Shapes.CircleShape,Alt.FarseerPhysics.Common.Transform@,Alt.FarseerPhysics.Collision.Shapes.CircleShape,Alt.FarseerPhysics.Common.Transform@)">
            <summary>
            Compute the collision manifold between two circles.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.Collision.CollidePolygonAndCircle(Alt.FarseerPhysics.Collision.Manifold@,Alt.FarseerPhysics.Collision.Shapes.PolygonShape,Alt.FarseerPhysics.Common.Transform@,Alt.FarseerPhysics.Collision.Shapes.CircleShape,Alt.FarseerPhysics.Common.Transform@)">
            <summary>
            Compute the collision manifold between a polygon and a circle.
            </summary>
            <param name="manifold">The manifold.</param>
            <param name="polygonA">The polygon A.</param>
            <param name="xfA">The transform of A.</param>
            <param name="circleB">The circle B.</param>
            <param name="xfB">The transform of B.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.Collision.CollidePolygons(Alt.FarseerPhysics.Collision.Manifold@,Alt.FarseerPhysics.Collision.Shapes.PolygonShape,Alt.FarseerPhysics.Common.Transform@,Alt.FarseerPhysics.Collision.Shapes.PolygonShape,Alt.FarseerPhysics.Common.Transform@)">
            <summary>
            Compute the collision manifold between two polygons.
            </summary>
            <param name="manifold">The manifold.</param>
            <param name="polyA">The poly A.</param>
            <param name="transformA">The transform A.</param>
            <param name="polyB">The poly B.</param>
            <param name="transformB">The transform B.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.Collision.CollideEdgeAndCircle(Alt.FarseerPhysics.Collision.Manifold@,Alt.FarseerPhysics.Collision.Shapes.EdgeShape,Alt.FarseerPhysics.Common.Transform@,Alt.FarseerPhysics.Collision.Shapes.CircleShape,Alt.FarseerPhysics.Common.Transform@)">
            <summary>
            Compute contact points for edge versus circle.
            This accounts for edge connectivity.
            </summary>
            <param name="manifold">The manifold.</param>
            <param name="edgeA">The edge A.</param>
            <param name="transformA">The transform A.</param>
            <param name="circleB">The circle B.</param>
            <param name="transformB">The transform B.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.Collision.CollideEdgeAndPolygon(Alt.FarseerPhysics.Collision.Manifold@,Alt.FarseerPhysics.Collision.Shapes.EdgeShape,Alt.FarseerPhysics.Common.Transform@,Alt.FarseerPhysics.Collision.Shapes.PolygonShape,Alt.FarseerPhysics.Common.Transform@)">
            <summary>
            Collides and edge and a polygon, taking into account edge adjacency.
            </summary>
            <param name="manifold">The manifold.</param>
            <param name="edgeA">The edge A.</param>
            <param name="xfA">The xf A.</param>
            <param name="polygonB">The polygon B.</param>
            <param name="xfB">The xf B.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.Collision.ClipSegmentToLine(Alt.FarseerPhysics.Common.FixedArray2{Alt.FarseerPhysics.Collision.ClipVertex}@,Alt.FarseerPhysics.Common.FixedArray2{Alt.FarseerPhysics.Collision.ClipVertex}@,Alt.Sketch.Vector2,System.Double,System.Int32)">
            <summary>
            Clipping for contact manifolds.
            </summary>
            <param name="vOut">The v out.</param>
            <param name="vIn">The v in.</param>
            <param name="normal">The normal.</param>
            <param name="offset">The offset.</param>
            <param name="vertexIndexA">The vertex index A.</param>
            <returns></returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.Collision.EdgeSeparation(Alt.FarseerPhysics.Collision.Shapes.PolygonShape,Alt.FarseerPhysics.Common.Transform@,System.Int32,Alt.FarseerPhysics.Collision.Shapes.PolygonShape,Alt.FarseerPhysics.Common.Transform@)">
            <summary>
            Find the separation between poly1 and poly2 for a give edge normal on poly1.
            </summary>
            <param name="poly1">The poly1.</param>
            <param name="xf1">The XF1.</param>
            <param name="edge1">The edge1.</param>
            <param name="poly2">The poly2.</param>
            <param name="xf2">The XF2.</param>
            <returns></returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.Collision.FindMaxSeparation(System.Int32@,Alt.FarseerPhysics.Collision.Shapes.PolygonShape,Alt.FarseerPhysics.Common.Transform@,Alt.FarseerPhysics.Collision.Shapes.PolygonShape,Alt.FarseerPhysics.Common.Transform@)">
            <summary>
            Find the max separation between poly1 and poly2 using edge normals from poly1.
            </summary>
            <param name="edgeIndex">Index of the edge.</param>
            <param name="poly1">The poly1.</param>
            <param name="xf1">The XF1.</param>
            <param name="poly2">The poly2.</param>
            <param name="xf2">The XF2.</param>
            <returns></returns>
        </member>
        <member name="T:Alt.FarseerPhysics.Collision.DistanceProxy">
            <summary>
            A distance proxy is used by the GJK algorithm.
            It encapsulates any shape.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.DistanceProxy.Set(Alt.FarseerPhysics.Collision.Shapes.Shape,System.Int32)">
            <summary>
            Initialize the proxy using the given shape. The shape
            must remain in scope while the proxy is in use.
            </summary>
            <param name="shape">The shape.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.DistanceProxy.GetSupport(Alt.Sketch.Vector2)">
            <summary>
            Get the supporting vertex index in the given direction.
            </summary>
            <param name="direction">The direction.</param>
            <returns></returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.DistanceProxy.GetSupportVertex(Alt.Sketch.Vector2)">
            <summary>
            Get the supporting vertex in the given direction.
            </summary>
            <param name="direction">The direction.</param>
            <returns></returns>
        </member>
        <member name="T:Alt.FarseerPhysics.Collision.SimplexCache">
            <summary>
            Used to warm start ComputeDistance.
            Set count to zero on first call.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Collision.SimplexCache.Count">
            <summary>
            Length or area
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Collision.SimplexCache.IndexA">
            <summary>
            Vertices on shape A
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Collision.SimplexCache.IndexB">
            <summary>
            Vertices on shape B
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Collision.DistanceInput">
            <summary>
            Input for Distance.ComputeDistance().
            You have to option to use the shape radii in the computation. 
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Collision.DistanceOutput">
            <summary>
            Output for Distance.ComputeDistance().
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Collision.DistanceOutput.Iterations">
            <summary>
            Number of GJK iterations used
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Collision.DistanceOutput.PointA">
            <summary>
            Closest point on shapeA
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Collision.DistanceOutput.PointB">
            <summary>
            Closest point on shapeB
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Collision.SimplexVertex.A">
            <summary>
            Barycentric coordinate for closest point 
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Collision.SimplexVertex.IndexA">
            <summary>
            wA index
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Collision.SimplexVertex.IndexB">
            <summary>
            wB index
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Collision.SimplexVertex.W">
            <summary>
            wB - wA
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Collision.SimplexVertex.WA">
            <summary>
            Support point in proxyA
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Collision.SimplexVertex.WB">
            <summary>
            Support point in proxyB
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Collision.Distance">
            <summary>
            The Gilbert–Johnson–Keerthi distance algorithm that provides the distance between shapes.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Collision.Distance.GJKCalls">
            <summary>
            The number of calls made to the ComputeDistance() function.
            Note: This is only activated when Settings.EnableDiagnostics = true
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Collision.Distance.GJKIters">
            <summary>
            The number of iterations that was made on the last call to ComputeDistance().
            Note: This is only activated when Settings.EnableDiagnostics = true
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Collision.Distance.GJKMaxIters">
            <summary>
            The maximum numer of iterations ever mae with calls to the CompteDistance() funtion.
            Note: This is only activated when Settings.EnableDiagnostics = true
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Collision.TreeNode`1">
            <summary>
            A node in the dynamic tree. The client does not interact with this directly.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Collision.TreeNode`1.AABB">
            <summary>
            Enlarged AABB
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Collision.DynamicTree`1">
             <summary>
             A dynamic tree arranges data in a binary tree to accelerate
             queries such as volume queries and ray casts. Leafs are proxies
             with an AABB. In the tree we expand the proxy AABB by Settings.b2_fatAABBFactor
             so that the proxy AABB is bigger than the client object. This allows the client
             object to move by small amounts without triggering a tree update.
            
             Nodes are pooled and relocatable, so we use node indices rather than pointers.
             </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.DynamicTree`1.#ctor">
            <summary>
            Constructing the tree initializes the node pool.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.DynamicTree`1.AddProxy(Alt.FarseerPhysics.Collision.AABB@,`0)">
            <summary>
            Create a proxy in the tree as a leaf node. We return the index
            of the node instead of a pointer so that we can grow
            the node pool.        
            /// </summary>
            <param name="aabb">The aabb.</param>
            <param name="userData">The user data.</param>
            <returns>Index of the created proxy</returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.DynamicTree`1.RemoveProxy(System.Int32)">
            <summary>
            Destroy a proxy. This asserts if the id is invalid.
            </summary>
            <param name="proxyId">The proxy id.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.DynamicTree`1.MoveProxy(System.Int32,Alt.FarseerPhysics.Collision.AABB@,Alt.Sketch.Vector2)">
            <summary>
            Move a proxy with a swepted AABB. If the proxy has moved outside of its fattened AABB,
            then the proxy is removed from the tree and re-inserted. Otherwise
            the function returns immediately.
            </summary>
            <param name="proxyId">The proxy id.</param>
            <param name="aabb">The aabb.</param>
            <param name="displacement">The displacement.</param>
            <returns>true if the proxy was re-inserted.</returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.DynamicTree`1.GetUserData(System.Int32)">
            <summary>
            Get proxy user data.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proxyId">The proxy id.</param>
            <returns>the proxy user data or 0 if the id is invalid.</returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.DynamicTree`1.GetFatAABB(System.Int32,Alt.FarseerPhysics.Collision.AABB@)">
            <summary>
            Get the fat AABB for a proxy.
            </summary>
            <param name="proxyId">The proxy id.</param>
            <param name="fatAABB">The fat AABB.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.DynamicTree`1.Query(Alt.Func{System.Int32,System.Boolean},Alt.FarseerPhysics.Collision.AABB@)">
            <summary>
            Query an AABB for overlapping proxies. The callback class
            is called for each proxy that overlaps the supplied AABB.
            </summary>
            <param name="callback">The callback.</param>
            <param name="aabb">The aabb.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.DynamicTree`1.RayCast(Alt.Func{Alt.FarseerPhysics.Collision.RayCastInput,System.Int32,System.Double},Alt.FarseerPhysics.Collision.RayCastInput@)">
            <summary>
            Ray-cast against the proxies in the tree. This relies on the callback
            to perform a exact ray-cast in the case were the proxy contains a Shape.
            The callback also performs the any collision filtering. This has performance
            roughly equal to k * log(n), where k is the number of collisions and n is the
            number of proxies in the tree.
            </summary>
            <param name="callback">A callback class that is called for each proxy that is hit by the ray.</param>
            <param name="input">The ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1).</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.DynamicTree`1.Balance(System.Int32)">
            <summary>
            Perform a left or right rotation if node A is imbalanced.
            </summary>
            <param name="iA"></param>
            <returns>the new root index.</returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.DynamicTree`1.ComputeHeight(System.Int32)">
            <summary>
            Compute the height of a sub-tree.
            </summary>
            <param name="nodeId">The node id to use as parent.</param>
            <returns>The height of the tree.</returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.DynamicTree`1.ComputeHeight">
            <summary>
            Compute the height of the entire tree.
            </summary>
            <returns>The height of the tree.</returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.DynamicTree`1.Validate">
            <summary>
            Validate this tree. For testing.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.DynamicTree`1.RebuildBottomUp">
            <summary>
            Build an optimal tree. Very expensive. For testing.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.DynamicTree`1.ShiftOrigin(Alt.Sketch.Vector2)">
            <summary>
            Shift the origin of the nodes
            </summary>
            <param name="newOrigin">The displacement to use.</param>
        </member>
        <member name="P:Alt.FarseerPhysics.Collision.DynamicTree`1.Height">
            <summary>
            Compute the height of the binary tree in O(N) time. Should not be called often.
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Collision.DynamicTree`1.AreaRatio">
            <summary>
            Get the ratio of the sum of the node areas to the root area.
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Collision.DynamicTree`1.MaxBalance">
            <summary>
            Get the maximum balance of an node in the tree. The balance is the difference
            in height of the two children of a node.
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Collision.DynamicTreeBroadPhase">
            <summary>
            The broad-phase is used for computing pairs and performing volume queries and ray casts.
            This broad-phase does not persist pairs. Instead, this reports potentially new pairs.
            It is up to the client to consume the new pairs and to track subsequent overlap.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.DynamicTreeBroadPhase.#ctor">
            <summary>
            Constructs a new broad phase based on the dynamic tree implementation
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.DynamicTreeBroadPhase.AddProxy(Alt.FarseerPhysics.Dynamics.FixtureProxy@)">
            <summary>
            Create a proxy with an initial AABB. Pairs are not reported until
            UpdatePairs is called.
            </summary>
            <param name="proxy">The user data.</param>
            <returns></returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.DynamicTreeBroadPhase.RemoveProxy(System.Int32)">
            <summary>
            Destroy a proxy. It is up to the client to remove any pairs.
            </summary>
            <param name="proxyId">The proxy id.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.DynamicTreeBroadPhase.QueryCallback(System.Int32)">
            <summary>
            This is called from DynamicTree.Query when we are gathering pairs.
            </summary>
            <param name="proxyId"></param>
            <returns></returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.DynamicTreeBroadPhase.GetFatAABB(System.Int32,Alt.FarseerPhysics.Collision.AABB@)">
            <summary>
            Get the AABB for a proxy.
            </summary>
            <param name="proxyId">The proxy id.</param>
            <param name="aabb">The aabb.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.DynamicTreeBroadPhase.GetProxy(System.Int32)">
            <summary>
            Get user data from a proxy. Returns null if the id is invalid.
            </summary>
            <param name="proxyId">The proxy id.</param>
            <returns></returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.DynamicTreeBroadPhase.TestOverlap(System.Int32,System.Int32)">
            <summary>
            Test overlap of fat AABBs.
            </summary>
            <param name="proxyIdA">The proxy id A.</param>
            <param name="proxyIdB">The proxy id B.</param>
            <returns></returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.DynamicTreeBroadPhase.UpdatePairs(Alt.FarseerPhysics.Dynamics.BroadphaseDelegate)">
            <summary>
            Update the pairs. This results in pair callbacks. This can only add pairs.
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.DynamicTreeBroadPhase.Query(Alt.Func{System.Int32,System.Boolean},Alt.FarseerPhysics.Collision.AABB@)">
            <summary>
            Query an AABB for overlapping proxies. The callback class
            is called for each proxy that overlaps the supplied AABB.
            </summary>
            <param name="callback">The callback.</param>
            <param name="aabb">The aabb.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.DynamicTreeBroadPhase.RayCast(Alt.Func{Alt.FarseerPhysics.Collision.RayCastInput,System.Int32,System.Double},Alt.FarseerPhysics.Collision.RayCastInput@)">
            <summary>
            Ray-cast against the proxies in the tree. This relies on the callback
            to perform a exact ray-cast in the case were the proxy contains a shape.
            The callback also performs the any collision filtering. This has performance
            roughly equal to k * log(n), where k is the number of collisions and n is the
            number of proxies in the tree.
            </summary>
            <param name="callback">A callback class that is called for each proxy that is hit by the ray.</param>
            <param name="input">The ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1).</param>
        </member>
        <member name="P:Alt.FarseerPhysics.Collision.DynamicTreeBroadPhase.ProxyCount">
            <summary>
            Get the number of proxies.
            </summary>
            <value>The proxy count.</value>
        </member>
        <member name="P:Alt.FarseerPhysics.Collision.DynamicTreeBroadPhase.TreeQuality">
            <summary>
            Get the tree quality based on the area of the tree.
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Collision.DynamicTreeBroadPhase.TreeBalance">
            <summary>
            Gets the balance of the tree.
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Collision.DynamicTreeBroadPhase.TreeHeight">
            <summary>
            Gets the height of the tree.
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Collision.Shapes.ChainShape">
            <summary>
            A chain shape is a free form sequence of line segments.
            The chain has two-sided collision, so you can use inside and outside collision.
            Therefore, you may use any winding order.
            Connectivity information is used to create smooth collisions.
            WARNING: The chain will not collide properly if there are self-intersections.
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Collision.Shapes.Shape">
            <summary>
            A shape is used for collision detection. You can create a shape however you like.
            Shapes used for simulation in World are created automatically when a Fixture
            is created. Shapes may encapsulate a one or more child shapes.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Collision.Shapes.Shape.MassData">
            <summary>
            Contains the properties of the shape such as:
            - Area of the shape
            - Centroid
            - Inertia
            - Mass
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.Shapes.Shape.Clone">
            <summary>
            Clone the concrete shape
            </summary>
            <returns>A clone of the shape</returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.Shapes.Shape.TestPoint(Alt.FarseerPhysics.Common.Transform@,Alt.Sketch.Vector2@)">
            <summary>
            Test a point for containment in this shape.
            Note: This only works for convex shapes.
            </summary>
            <param name="transform">The shape world transform.</param>
            <param name="point">A point in world coordinates.</param>
            <returns>True if the point is inside the shape</returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.Shapes.Shape.RayCast(Alt.FarseerPhysics.Collision.RayCastOutput@,Alt.FarseerPhysics.Collision.RayCastInput@,Alt.FarseerPhysics.Common.Transform@,System.Int32)">
            <summary>
            Cast a ray against a child shape.
            </summary>
            <param name="output">The ray-cast results.</param>
            <param name="input">The ray-cast input parameters.</param>
            <param name="transform">The transform to be applied to the shape.</param>
            <param name="childIndex">The child shape index.</param>
            <returns>True if the ray-cast hits the shape</returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.Shapes.Shape.ComputeAABB(Alt.FarseerPhysics.Collision.AABB@,Alt.FarseerPhysics.Common.Transform@,System.Int32)">
            <summary>
            Given a transform, compute the associated axis aligned bounding box for a child shape.
            </summary>
            <param name="aabb">The aabb results.</param>
            <param name="transform">The world transform of the shape.</param>
            <param name="childIndex">The child shape index.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.Shapes.Shape.ComputeProperties">
            <summary>
            Compute the mass properties of this shape using its dimensions and density.
            The inertia tensor is computed about the local origin, not the centroid.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.Shapes.Shape.CompareTo(Alt.FarseerPhysics.Collision.Shapes.Shape)">
            <summary>
            Compare this shape to another shape based on type and properties.
            </summary>
            <param name="shape">The other shape</param>
            <returns>True if the two shapes are the same.</returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.Shapes.Shape.ComputeSubmergedArea(Alt.Sketch.Vector2@,System.Double,Alt.FarseerPhysics.Common.Transform@,Alt.Sketch.Vector2@)">
            <summary>
            Used for the buoyancy controller
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Collision.Shapes.Shape.ShapeType">
            <summary>
            Get the type of this shape.
            </summary>
            <value>The type of the shape.</value>
        </member>
        <member name="P:Alt.FarseerPhysics.Collision.Shapes.Shape.ChildCount">
            <summary>
            Get the number of child primitives.
            </summary>
            <value></value>
        </member>
        <member name="P:Alt.FarseerPhysics.Collision.Shapes.Shape.Density">
            <summary>
            Gets or sets the density.
            Changing the density causes a recalculation of shape properties.
            </summary>
            <value>The density.</value>
        </member>
        <member name="P:Alt.FarseerPhysics.Collision.Shapes.Shape.Radius">
            <summary>
            Radius of the Shape
            Changing the radius causes a recalculation of shape properties.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Collision.Shapes.ChainShape.Vertices">
            <summary>
            The vertices. These are not owned/freed by the chain Shape.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.Shapes.ChainShape.#ctor">
            <summary>
            Constructor for ChainShape. By default have 0 in density.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.Shapes.ChainShape.#ctor(Alt.FarseerPhysics.Common.Vertices)">
            <summary>
            Create a new chainshape from the vertices.
            </summary>
            <param name="vertices">The vertices to use. Must contain 2 or more vertices.</param>
            <param name="createLoop">Set to true to create a closed loop. It connects the first vertice to the last, and automatically adjusts connectivity to create smooth collisions along the chain.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.Shapes.ChainShape.GetChildEdge(Alt.FarseerPhysics.Collision.Shapes.EdgeShape,System.Int32)">
            <summary>
            This method has been optimized to reduce garbage.
            </summary>
            <param name="edge">The cached edge to set properties on.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.Shapes.ChainShape.GetChildEdge(System.Int32)">
            <summary>
            Get a child edge.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.Shapes.ChainShape.CompareTo(Alt.FarseerPhysics.Collision.Shapes.ChainShape)">
            <summary>
            Compare the chain to another chain
            </summary>
            <param name="shape">The other chain</param>
            <returns>True if the two chain shapes are the same</returns>
        </member>
        <member name="P:Alt.FarseerPhysics.Collision.Shapes.ChainShape.PrevVertex">
            <summary>
            Establish connectivity to a vertex that precedes the first vertex.
            Don't call this for loops.
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Collision.Shapes.ChainShape.NextVertex">
            <summary>
            Establish connectivity to a vertex that follows the last vertex.
            Don't call this for loops.
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Collision.Shapes.CircleShape">
            <summary>
            A circle shape.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.Shapes.CircleShape.#ctor(System.Double,System.Double)">
            <summary>
            Create a new circle with the desired radius and density.
            </summary>
            <param name="radius">The radius of the circle.</param>
            <param name="density">The density of the circle.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.Shapes.CircleShape.CompareTo(Alt.FarseerPhysics.Collision.Shapes.CircleShape)">
            <summary>
            Compare the circle to another circle
            </summary>
            <param name="shape">The other circle</param>
            <returns>True if the two circles are the same size and have the same position</returns>
        </member>
        <member name="P:Alt.FarseerPhysics.Collision.Shapes.CircleShape.Position">
            <summary>
            Get or set the position of the circle
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Collision.Shapes.EdgeShape">
            <summary>
            A line segment (edge) shape. These can be connected in chains or loops
            to other edge shapes.
            The connectivity information is used to ensure correct contact normals.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Collision.Shapes.EdgeShape._vertex1">
            <summary>
            Edge start vertex
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Collision.Shapes.EdgeShape._vertex2">
            <summary>
            Edge end vertex
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.Shapes.EdgeShape.#ctor(Alt.Sketch.Vector2,Alt.Sketch.Vector2)">
            <summary>
            Create a new EdgeShape with the specified start and end.
            </summary>
            <param name="start">The start of the edge.</param>
            <param name="end">The end of the edge.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.Shapes.EdgeShape.Set(Alt.Sketch.Vector2,Alt.Sketch.Vector2)">
            <summary>
            Set this as an isolated edge.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="P:Alt.FarseerPhysics.Collision.Shapes.EdgeShape.HasVertex0">
            <summary>
            Is true if the edge is connected to an adjacent vertex before vertex 1.
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Collision.Shapes.EdgeShape.HasVertex3">
            <summary>
            Is true if the edge is connected to an adjacent vertex after vertex2.
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Collision.Shapes.EdgeShape.Vertex0">
            <summary>
            Optional adjacent vertices. These are used for smooth collision.
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Collision.Shapes.EdgeShape.Vertex3">
            <summary>
            Optional adjacent vertices. These are used for smooth collision.
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Collision.Shapes.EdgeShape.Vertex1">
            <summary>
            These are the edge vertices
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Collision.Shapes.EdgeShape.Vertex2">
            <summary>
            These are the edge vertices
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Collision.Shapes.PolygonShape">
            <summary>
            Represents a simple non-selfintersecting convex polygon.
            Create a convex hull from the given array of points.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.Shapes.PolygonShape.#ctor(Alt.FarseerPhysics.Common.Vertices,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.FarseerPhysics.Collision.Shapes.PolygonShape"/> class.
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="density">The density.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.Shapes.PolygonShape.#ctor(System.Double)">
            <summary>
            Create a new PolygonShape with the specified density.
            </summary>
            <param name="density">The density.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.Shapes.PolygonShape.ComputeAABB(Alt.FarseerPhysics.Collision.AABB@,Alt.FarseerPhysics.Common.Transform@,System.Int32)">
            <summary>
            Given a transform, compute the associated axis aligned bounding box for a child shape.
            </summary>
            <param name="aabb">The aabb results.</param>
            <param name="transform">The world transform of the shape.</param>
            <param name="childIndex">The child shape index.</param>
        </member>
        <member name="P:Alt.FarseerPhysics.Collision.Shapes.PolygonShape.Vertices">
            <summary>
            Create a convex hull from the given array of local points.
            The number of vertices must be in the range [3, Settings.MaxPolygonVertices].
            Warning: the points may be re-ordered, even if they form a convex polygon
            Warning: collinear points are handled but not removed. Collinear points may lead to poor stacking behavior.
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Collision.Shapes.MassData">
            <summary>
            This holds the mass data computed for a shape.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.Shapes.MassData.op_Equality(Alt.FarseerPhysics.Collision.Shapes.MassData,Alt.FarseerPhysics.Collision.Shapes.MassData)">
            <summary>
            The equal operator
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.Shapes.MassData.op_Inequality(Alt.FarseerPhysics.Collision.Shapes.MassData,Alt.FarseerPhysics.Collision.Shapes.MassData)">
            <summary>
            The not equal operator
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="P:Alt.FarseerPhysics.Collision.Shapes.MassData.Area">
            <summary>
            The area of the shape
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Collision.Shapes.MassData.Centroid">
            <summary>
            The position of the shape's centroid relative to the shape's origin.
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Collision.Shapes.MassData.Inertia">
            <summary>
            The rotational inertia of the shape about the local origin.
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Collision.Shapes.MassData.Mass">
            <summary>
            The mass of the shape, usually in kilograms.
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Collision.TOIInput">
            <summary>
            Input parameters for CalculateTimeOfImpact
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Collision.TimeOfImpact.CalculateTimeOfImpact(Alt.FarseerPhysics.Collision.TOIOutput@,Alt.FarseerPhysics.Collision.TOIInput)">
            <summary>
            Compute the upper bound on time before two shapes penetrate. Time is represented as
            a fraction between [0,tMax]. This uses a swept separating axis and may miss some intermediate,
            non-tunneling collision. If you change the time interval, you should call this function
            again.
            Note: use Distance() to compute the contact point and normal at the time of impact.
            </summary>
            <param name="output">The output.</param>
            <param name="input">The input.</param>
        </member>
        <member name="T:Alt.FarseerPhysics.Common.ConvexHull.ChainHull">
            <summary>
            Andrew's Monotone Chain Convex Hull algorithm.
            Used to get the convex hull of a point cloud.
            
            Source: http://www.softsurfer.com/Archive/algorithm_0109/algorithm_0109.htm
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.ConvexHull.ChainHull.GetConvexHull(Alt.FarseerPhysics.Common.Vertices)">
            <summary>
            Returns the convex hull from the given vertices..
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Common.ConvexHull.GiftWrap">
            <summary>
            Giftwrap convex hull algorithm.
            O(nh) time complexity, where n is the number of points and h is the number of points on the convex hull.
            
            See http://en.wikipedia.org/wiki/Gift_wrapping_algorithm for more details.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.ConvexHull.GiftWrap.GetConvexHull(Alt.FarseerPhysics.Common.Vertices)">
            <summary>
            Returns the convex hull from the given vertices.
            </summary>
            <param name="vertices">The vertices.</param>
        </member>
        <member name="T:Alt.FarseerPhysics.Common.ConvexHull.Melkman">
            <summary>
            Creates a convex hull.
            Note:
            1. Vertices must be of a simple polygon, i.e. edges do not overlap.
            2. Melkman does not work on point clouds
            </summary>
            <remarks>
            Implemented using Melkman's Convex Hull Algorithm - O(n) time complexity.
            Reference: http://www.ams.sunysb.edu/~jsbm/courses/345/melkman.pdf
            </remarks>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.ConvexHull.Melkman.GetConvexHull(Alt.FarseerPhysics.Common.Vertices)">
            <summary>
            Returns a convex hull from the given vertices.
            </summary>
            <returns>A convex hull in counter clockwise winding order.</returns>
        </member>
        <member name="T:Alt.FarseerPhysics.Common.Decomposition.BayazitDecomposer">
            <summary>
            Convex decomposition algorithm created by Mark Bayazit (http://mnbayazit.com/)
            
            Properties:
            - Tries to decompose using polygons instead of triangles.
            - Tends to produce optimal results with low processing time.
            - Running time is O(nr), n = number of vertices, r = reflex vertices.
            - Does not support holes.
            
            For more information about this algorithm, see http://mnbayazit.com/406/bayazit
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.BayazitDecomposer.ConvexPartition(Alt.FarseerPhysics.Common.Vertices)">
            <summary>
            Decompose the polygon into several smaller non-concave polygon.
            If the polygon is already convex, it will return the original polygon, unless it is over Settings.MaxPolygonVertices.
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Common.Decomposition.CDTDecomposer">
            <summary>
            2D constrained Delaunay triangulation algorithm.
            Based on the paper "Sweep-line algorithm for constrained Delaunay triangulation" by V. Domiter and and B. Zalik
            
            Properties:
            - Creates triangles with a large interior angle.
            - Supports holes
            - Generate a lot of garbage due to incapsulation of the Poly2Tri library.
            - Running time is O(n^2), n = number of vertices.
            - Does not care about winding order.
            
            Source: http://code.google.com/p/poly2tri/
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.CDTDecomposer.ConvexPartition(Alt.FarseerPhysics.Common.Vertices)">
            <summary>
            Decompose the polygon into several smaller non-concave polygon.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.DelaunayTriangle.EdgeIsConstrained">
            Flags to determine if an edge is a Delauney edge 
        </member>
        <member name="F:Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.DelaunayTriangle.EdgeIsDelaunay">
            Flags to determine if an edge is a Constrained edge 
        </member>
        <member name="F:Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.DelaunayTriangle.Points">
            Has this triangle been marked as an interior triangle? 
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.DelaunayTriangle.MarkNeighbor(Alt.FarseerPhysics.Common.Decomposition.CDT.TriangulationPoint,Alt.FarseerPhysics.Common.Decomposition.CDT.TriangulationPoint,Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.DelaunayTriangle)">
            <summary>
            Update neighbor pointers
            </summary>
            <param name="p1">Point 1 of the shared edge</param>
            <param name="p2">Point 2 of the shared edge</param>
            <param name="t">This triangle's new neighbor</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.DelaunayTriangle.MarkNeighbor(Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.DelaunayTriangle)">
            <summary>
            Exhaustive search to update neighbor pointers
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.DelaunayTriangle.Clear">
            Clears all references to all other triangles and points
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.DelaunayTriangle.OppositePoint(Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.DelaunayTriangle,Alt.FarseerPhysics.Common.Decomposition.CDT.TriangulationPoint)">
            <param name="t">Opposite triangle</param>
            <param name="p">The point in t that isn't shared between the triangles</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.DelaunayTriangle.Legalize(Alt.FarseerPhysics.Common.Decomposition.CDT.TriangulationPoint,Alt.FarseerPhysics.Common.Decomposition.CDT.TriangulationPoint)">
            <summary>
            Legalize triangle by rotating clockwise around oPoint
            </summary>
            <param name="oPoint">The origin point to rotate around</param>
            <param name="nPoint">???</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.DelaunayTriangle.MarkNeighborEdges">
            <summary>
            Finalize edge marking
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.DelaunayTriangle.MarkConstrainedEdge(Alt.FarseerPhysics.Common.Decomposition.CDT.TriangulationPoint,Alt.FarseerPhysics.Common.Decomposition.CDT.TriangulationPoint)">
            <summary>
            Mark edge as constrained
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.DelaunayTriangle.EdgeIndex(Alt.FarseerPhysics.Common.Decomposition.CDT.TriangulationPoint,Alt.FarseerPhysics.Common.Decomposition.CDT.TriangulationPoint)">
            <summary>
            Get the index of the neighbor that shares this edge (or -1 if it isn't shared)
            </summary>
            <returns>index of the shared edge or -1 if edge isn't shared</returns>
        </member>
        <member name="T:Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.Sweep.AdvancingFront">
            @author Thomas Åhlen (thahlen@gmail.com)
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.Sweep.AdvancingFront.FindSearchNode(System.Double)">
            <summary>
            MM:  This seems to be used by LocateNode to guess a position in the implicit linked list of AdvancingFrontNodes near x
                 Removed an overload that depended on this being exact
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.Sweep.AdvancingFront.LocateNode(Alt.FarseerPhysics.Common.Decomposition.CDT.TriangulationPoint)">
            <summary>
            We use a balancing tree to locate a node smaller or equal to given key value
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.Sweep.AdvancingFront.LocatePoint(Alt.FarseerPhysics.Common.Decomposition.CDT.TriangulationPoint)">
            <summary>
            This implementation will use simple node traversal algorithm to find a point on the front
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.Sweep.DTSweep.Triangulate(Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.Sweep.DTSweepContext)">
            <summary>
            Triangulate simple polygon with holes
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.Sweep.DTSweep.Sweep(Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.Sweep.DTSweepContext)">
            <summary>
            Start sweeping the Y-sorted point set from bottom to top
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.Sweep.DTSweep.FinalizationConvexHull(Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.Sweep.DTSweepContext)">
            <summary>
            If this is a Delaunay Triangulation of a pointset we need to fill so the triangle mesh gets a ConvexHull 
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.Sweep.DTSweep.TurnAdvancingFrontConvex(Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.Sweep.DTSweepContext,Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.Sweep.AdvancingFrontNode,Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.Sweep.AdvancingFrontNode)">
            <summary>
            We will traverse the entire advancing front and fill it to form a convex hull.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.Sweep.DTSweep.PointEvent(Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.Sweep.DTSweepContext,Alt.FarseerPhysics.Common.Decomposition.CDT.TriangulationPoint)">
            <summary>
            Find closes node to the left of the new point and
            create a new triangle. If needed new holes and basins
            will be filled to.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.Sweep.DTSweep.NewFrontTriangle(Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.Sweep.DTSweepContext,Alt.FarseerPhysics.Common.Decomposition.CDT.TriangulationPoint,Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.Sweep.AdvancingFrontNode)">
            <summary>
            Creates a new front triangle and legalize it
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.Sweep.DTSweep.NextFlipPoint(Alt.FarseerPhysics.Common.Decomposition.CDT.TriangulationPoint,Alt.FarseerPhysics.Common.Decomposition.CDT.TriangulationPoint,Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.DelaunayTriangle,Alt.FarseerPhysics.Common.Decomposition.CDT.TriangulationPoint)">
            <summary>
            When we need to traverse from one triangle to the next we need 
            the point in current triangle that is the opposite point to the next
            triangle. 
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.Sweep.DTSweep.NextFlipTriangle(Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.Sweep.DTSweepContext,Alt.FarseerPhysics.Common.Decomposition.CDT.Orientation,Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.DelaunayTriangle,Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.DelaunayTriangle,Alt.FarseerPhysics.Common.Decomposition.CDT.TriangulationPoint,Alt.FarseerPhysics.Common.Decomposition.CDT.TriangulationPoint)">
            <summary>
            After a flip we have two triangles and know that only one will still be
            intersecting the edge. So decide which to contiune with and legalize the other
            </summary>
            <param name="tcx"></param>
            <param name="o">should be the result of an TriangulationUtil.orient2d( eq, op, ep )</param>
            <param name="t">triangle 1</param>
            <param name="ot">triangle 2</param>
            <param name="p">a point shared by both triangles</param>
            <param name="op">another point shared by both triangles</param>
            <returns>returns the triangle still intersecting the edge</returns>
        </member>
        <!-- Некорректный комментарий в формате XML для члена "M:Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.Sweep.DTSweep.FlipScanEdgeEvent(Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.Sweep.DTSweepContext,Alt.FarseerPhysics.Common.Decomposition.CDT.TriangulationPoint,Alt.FarseerPhysics.Common.Decomposition.CDT.TriangulationPoint,Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.DelaunayTriangle,Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.DelaunayTriangle,Alt.FarseerPhysics.Common.Decomposition.CDT.TriangulationPoint)" проигнорирован -->
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.Sweep.DTSweep.FillAdvancingFront(Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.Sweep.DTSweepContext,Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.Sweep.AdvancingFrontNode)">
            <summary>
            Fills holes in the Advancing Front
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.Sweep.DTSweep.FillBasin(Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.Sweep.DTSweepContext,Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.Sweep.AdvancingFrontNode)">
            <summary>
            Fills a basin that has formed on the Advancing Front to the right
            of given node.
            First we decide a left,bottom and right node that forms the 
            boundaries of the basin. Then we do a reqursive fill.
            </summary>
            <param name="tcx"></param>
            <param name="node">starting node, this or next node will be left node</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.Sweep.DTSweep.FillBasinReq(Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.Sweep.DTSweepContext,Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.Sweep.AdvancingFrontNode)">
            <summary>
            Recursive algorithm to fill a Basin with triangles
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.Sweep.DTSweep.HoleAngle(Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.Sweep.AdvancingFrontNode)">
            <summary>
            ???
            </summary>
            <param name="node">middle node</param>
            <returns>the angle between 3 front nodes</returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.Sweep.DTSweep.BasinAngle(Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.Sweep.AdvancingFrontNode)">
            <summary>
            The basin angle is decided against the horizontal line [1,0]
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.Sweep.DTSweep.Fill(Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.Sweep.DTSweepContext,Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.Sweep.AdvancingFrontNode)">
            <summary>
            Adds a triangle to the advancing front to fill a hole.
            </summary>
            <param name="tcx"></param>
            <param name="node">middle node, that is the bottom of the hole</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.Sweep.DTSweep.Legalize(Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.Sweep.DTSweepContext,Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.DelaunayTriangle)">
            <summary>
            Returns true if triangle was legalized
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.Sweep.DTSweep.RotateTrianglePair(Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.DelaunayTriangle,Alt.FarseerPhysics.Common.Decomposition.CDT.TriangulationPoint,Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.DelaunayTriangle,Alt.FarseerPhysics.Common.Decomposition.CDT.TriangulationPoint)">
            <summary>
            Rotates a triangle pair one vertex CW
                  n2                    n2
             P +-----+             P +-----+
               | t  /|               |\  t |  
               |   / |               | \   |
             n1|  /  |n3           n1|  \  |n3
               | /   |    after CW   |   \ |
               |/ oT |               | oT \|
               +-----+ oP            +-----+
                  n4                    n4
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.Sweep.DTSweepConstraint.#ctor(Alt.FarseerPhysics.Common.Decomposition.CDT.TriangulationPoint,Alt.FarseerPhysics.Common.Decomposition.CDT.TriangulationPoint)">
            <summary>
            Give two points in any order. Will always be ordered so
            that q.y > p.y and q.x > p.x if same y value 
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.Sweep.DTSweepContext">
             
             @author Thomas Åhlén, thahlen@gmail.com
            
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.Sweep.DTSweepContext.MapTriangleToNodes(Alt.FarseerPhysics.Common.Decomposition.CDT.Delaunay.DelaunayTriangle)">
            <summary>
            Try to map a node to all sides of this triangle that don't have 
            a neighbor.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.CDT.Polygon.Polygon.#ctor(System.Collections.Generic.IList{Alt.FarseerPhysics.Common.Decomposition.CDT.Polygon.PolygonPoint})">
            <summary>
            Create a polygon from a list of at least 3 points with no duplicates.
            </summary>
            <param name="points">A list of unique points</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.CDT.Polygon.Polygon.PrepareTriangulation(Alt.FarseerPhysics.Common.Decomposition.CDT.TriangulationContext)">
            <summary>
            Creates constraints and populates the context with points
            </summary>
            <param name="tcx">The context</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.CDT.Polygon.Polygon.AddHole(Alt.FarseerPhysics.Common.Decomposition.CDT.Polygon.Polygon)">
            <summary>
            Add a hole to the polygon.
            </summary>
            <param name="poly">A subtraction polygon fully contained inside this polygon.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.CDT.Polygon.Polygon.InsertPointAfter(Alt.FarseerPhysics.Common.Decomposition.CDT.Polygon.PolygonPoint,Alt.FarseerPhysics.Common.Decomposition.CDT.Polygon.PolygonPoint)">
            <summary>
            Inserts newPoint after point.
            </summary>
            <param name="point">The point to insert after in the polygon</param>
            <param name="newPoint">The point to insert into the polygon</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.CDT.Polygon.Polygon.AddPoints(System.Collections.Generic.IEnumerable{Alt.FarseerPhysics.Common.Decomposition.CDT.Polygon.PolygonPoint})">
            <summary>
            Inserts list (after last point in polygon?)
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.CDT.Polygon.Polygon.AddPoint(Alt.FarseerPhysics.Common.Decomposition.CDT.Polygon.PolygonPoint)">
            <summary>
            Adds a point after the last in the polygon.
            </summary>
            <param name="p">The point to add</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.CDT.Polygon.Polygon.RemovePoint(Alt.FarseerPhysics.Common.Decomposition.CDT.Polygon.PolygonPoint)">
            <summary>
            Removes a point from the polygon.
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.CDT.Sets.ConstrainedPointSet.#ctor(System.Collections.Generic.List{Alt.FarseerPhysics.Common.Decomposition.CDT.TriangulationPoint},System.Collections.Generic.IEnumerable{Alt.FarseerPhysics.Common.Decomposition.CDT.TriangulationPoint})">
            
            @param points - A list of all points in PointSet
            @param constraints - Pairs of two points defining a constraint, all points <b>must</b> be part of given PointSet!
        </member>
        <!-- Некорректный комментарий в формате XML для члена "M:Alt.FarseerPhysics.Common.Decomposition.CDT.Sets.ConstrainedPointSet.isValid" проигнорирован -->
        <member name="T:Alt.FarseerPhysics.Common.Decomposition.CDT.TriangulationUtil">
            @author Thomas Åhlén, thahlen@gmail.com
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.CDT.TriangulationUtil.SmartIncircle(Alt.FarseerPhysics.Common.Decomposition.CDT.TriangulationPoint,Alt.FarseerPhysics.Common.Decomposition.CDT.TriangulationPoint,Alt.FarseerPhysics.Common.Decomposition.CDT.TriangulationPoint,Alt.FarseerPhysics.Common.Decomposition.CDT.TriangulationPoint)">
            <summary>
              Requirements:
            1. a,b and c form a triangle.
            2. a and d is know to be on opposite side of bc
            <code>
                           a
                           +
                          / \
                         /   \
                       b/     \c
                       +-------+ 
                      /    B    \  
                     /           \ 
            </code>
               Facts:
             d has to be in area B to have a chance to be inside the circle formed by a,b and c
             d is outside B if orient2d(a,b,d) or orient2d(c,a,d) is CW
             This preknowledge gives us a way to optimize the incircle test
            </summary>
            <param name="pa">triangle point, opposite d</param>
            <param name="pb">triangle point</param>
            <param name="pc">triangle point</param>
            <param name="pd">point opposite a</param>
            <returns>true if d is inside circle, false if on circle edge</returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.CDT.TriangulationUtil.Orient2d(Alt.FarseerPhysics.Common.Decomposition.CDT.TriangulationPoint,Alt.FarseerPhysics.Common.Decomposition.CDT.TriangulationPoint,Alt.FarseerPhysics.Common.Decomposition.CDT.TriangulationPoint)">
            Forumla to calculate signed area
            Positive if CCW
            Negative if CW
            0 if collinear
            A[P1,P2,P3]  =  (x1*y2 - y1*x2) + (x2*y3 - y2*x3) + (x3*y1 - y3*x1)
                         =  (x1-x3)*(y2-y3) - (y1-y3)*(x2-x3)
        </member>
        <member name="T:Alt.FarseerPhysics.Common.Decomposition.EarclipDecomposer">
            <summary>
            Convex decomposition algorithm using ear clipping
            
            Properties:
            - Only works on simple polygons.
            - Does not support holes.
            - Running time is O(n^2), n = number of vertices.
            
            Source: http://www.ewjordan.com/earClip/
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.EarclipDecomposer.ConvexPartition(Alt.FarseerPhysics.Common.Vertices)">
            <summary>
            Decompose the polygon into several smaller non-concave polygon.
            Each resulting polygon will have no more than Settings.MaxPolygonVertices vertices.
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="tolerance">The tolerance.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.EarclipDecomposer.TriangulatePolygon(Alt.FarseerPhysics.Common.Vertices,System.Double)">
             <summary>
             Triangulates a polygon using simple ear-clipping algorithm. Returns
             size of Triangle array unless the polygon can't be triangulated.
             This should only happen if the polygon self-intersects,
             though it will not _always_ return null for a bad polygon - it is the
             caller's responsibility to check for self-intersection, and if it
             doesn't, it should at least check that the return value is non-null
             before using. You're warned!
            
             Triangles may be degenerate, especially if you have identical points
             in the input to the algorithm.  Check this before you use them.
            
             This is totally unoptimized, so for large polygons it should not be part
             of the simulation loop.
             </summary>
             <remarks>
             Only works on simple polygons.
             </remarks>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.EarclipDecomposer.ResolvePinchPoint(Alt.FarseerPhysics.Common.Vertices,Alt.FarseerPhysics.Common.Vertices@,Alt.FarseerPhysics.Common.Vertices@,System.Double)">
            <summary>
            Finds and fixes "pinch points," points where two polygon
            vertices are at the same point.
            
            If a pinch point is found, pin is broken up into poutA and poutB
            and true is returned; otherwise, returns false.
            
            Mostly for internal use.
            
            O(N^2) time, which sucks...
            </summary>
            <param name="pin">The pin.</param>
            <param name="poutA">The pout A.</param>
            <param name="poutB">The pout B.</param>
            <param name="tolerance"></param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.EarclipDecomposer.Remainder(System.Int32,System.Int32)">
            <summary>
            Fix for obnoxious behavior for the % operator for negative numbers...
            </summary>
            <param name="x">The x.</param>
            <param name="modulus">The modulus.</param>
            <returns></returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.EarclipDecomposer.IsEar(System.Int32,System.Double[],System.Double[],System.Int32)">
            <summary>
            Checks if vertex i is the tip of an ear in polygon defined by xv[] and  yv[].
            </summary>
            <param name="i">The i.</param>
            <param name="xv">The xv.</param>
            <param name="yv">The yv.</param>
            <param name="xvLength">Length of the xv.</param>
            <remarks>
            Assumes clockwise orientation of polygon.
            </remarks>
            <returns>
            	<c>true</c> if the specified i is ear; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Vertices.NextIndex(System.Int32)">
            <summary>
            Gets the next index. Used for iterating all the edges with wrap-around.
            </summary>
            <param name="index">The current index</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Vertices.NextVertex(System.Int32)">
            <summary>
            Gets the next vertex. Used for iterating all the edges with wrap-around.
            </summary>
            <param name="index">The current index</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Vertices.PreviousIndex(System.Int32)">
            <summary>
            Gets the previous index. Used for iterating all the edges with wrap-around.
            </summary>
            <param name="index">The current index</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Vertices.PreviousVertex(System.Int32)">
            <summary>
            Gets the previous vertex. Used for iterating all the edges with wrap-around.
            </summary>
            <param name="index">The current index</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Vertices.GetSignedArea">
            <summary>
            Gets the signed area.
            If the area is less than 0, it indicates that the polygon is clockwise winded.
            </summary>
            <returns>The signed area</returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Vertices.GetArea">
            <summary>
            Gets the area.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Vertices.GetCentroid">
            <summary>
            Gets the centroid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Vertices.GetAABB">
            <summary>
            Returns an AABB that fully contains this polygon.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Vertices.Translate(Alt.Sketch.Vector2)">
            <summary>
            Translates the vertices with the specified vector.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Vertices.Translate(Alt.Sketch.Vector2@)">
            <summary>
            Translates the vertices with the specified vector.
            </summary>
            <param name="value">The vector.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Vertices.Scale(Alt.Sketch.Vector2)">
            <summary>
            Scales the vertices with the specified vector.
            </summary>
            <param name="value">The Value.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Vertices.Scale(Alt.Sketch.Vector2@)">
            <summary>
            Scales the vertices with the specified vector.
            </summary>
            <param name="value">The Value.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Vertices.Rotate(System.Double)">
            <summary>
            Rotate the vertices with the defined value in radians.
            
            Warning: Using this method on an active set of vertices of a Body,
            will cause problems with collisions. Use Body.Rotation instead.
            </summary>
            <param name="value">The amount to rotate by in radians.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Vertices.IsConvex">
            <summary>
            Determines whether the polygon is convex.
            O(n^2) running time.
            
            Assumptions:
            - The polygon is in counter clockwise order
            - The polygon has no overlapping edges
            </summary>
            <returns>
            	<c>true</c> if it is convex; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Vertices.IsCounterClockWise">
            <summary>
            Indicates if the vertices are in counter clockwise order.
            Warning: If the area of the polygon is 0, it is unable to determine the winding.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Vertices.ForceCounterClockWise">
            <summary>
            Forces the vertices to be counter clock wise order.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Vertices.IsSimple">
            <summary>
            Checks if the vertices forms an simple polygon by checking for edge crossings.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Vertices.CheckPolygon">
             <summary>
             Checks if the polygon is valid for use in the engine.
            
             Performs a full check, for simplicity, convexity,
             orientation, minimum angle, and volume.
             
             From Eric Jordan's convex decomposition library
             </summary>
             <returns>PolygonError.NoError if there were no error.</returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Vertices.ProjectToAxis(Alt.Sketch.Vector2@,System.Double@,System.Double@)">
            <summary>
            Projects to axis.
            </summary>
            <param name="axis">The axis.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Vertices.PointInPolygon(Alt.Sketch.Vector2@)">
            <summary>
            Winding number test for a point in a polygon.
            </summary>
            See more info about the algorithm here: http://softsurfer.com/Archive/algorithm_0103/algorithm_0103.htm
            <param name="point">The point to be tested.</param>
            <returns>-1 if the winding number is zero and the point is outside
            the polygon, 1 if the point is inside the polygon, and 0 if the point
            is on the polygons edge.</returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Vertices.PointInPolygonAngle(Alt.Sketch.Vector2@)">
            <summary>
            Compute the sum of the angles made between the test point and each pair of points making up the polygon. 
            If this sum is 2pi then the point is an interior point, if 0 then the point is an exterior point. 
            ref: http://ozviz.wasp.uwa.edu.au/~pbourke/geometry/insidepoly/  - Solution 2 
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Vertices.Transform(Alt.Sketch.Matrix4@)">
            <summary>
            Transforms the polygon using the defined matrix.
            </summary>
            <param name="transform">The matrix to use as transformation.</param>
        </member>
        <member name="P:Alt.FarseerPhysics.Common.Vertices.Holes">
            <summary>
            You can add holes to this collection.
            It will get respected by some of the triangulation algoithms, but otherwise not used.
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Common.Decomposition.FlipcodeDecomposer">
            <summary>
            Convex decomposition algorithm created by unknown
            
            Properties:
            - No support for holes
            - Very fast
            - Only works on simple polygons
            - Only works on counter clockwise polygons
            
            More information: http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.FlipcodeDecomposer.ConvexPartition(Alt.FarseerPhysics.Common.Vertices)">
            <summary>
            Decompose the polygon into triangles.
            
            Properties:
            - Only works on counter clockwise polygons
            
            </summary>
            <param name="vertices">The list of points describing the polygon</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.FlipcodeDecomposer.InsideTriangle(Alt.Sketch.Vector2@,Alt.Sketch.Vector2@,Alt.Sketch.Vector2@,Alt.Sketch.Vector2@)">
            <summary>
            Check if the point P is inside the triangle defined by
            the points A, B, C
            </summary>
            <param name="a">The A point.</param>
            <param name="b">The B point.</param>
            <param name="c">The C point.</param>
            <param name="p">The point to be tested.</param>
            <returns>True if the point is inside the triangle</returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.FlipcodeDecomposer.Snip(Alt.FarseerPhysics.Common.Vertices,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[])">
            <summary>
            Cut a the contour and add a triangle into V to describe the 
            location of the cut
            </summary>
            <param name="contour">The list of points defining the polygon</param>
            <param name="u">The index of the first point</param>
            <param name="v">The index of the second point</param>
            <param name="w">The index of the third point</param>
            <param name="n">The number of elements in the array.</param>
            <param name="V">The array to populate with indicies of triangles.</param>
            <returns>True if a triangle was found</returns>
        </member>
        <member name="T:Alt.FarseerPhysics.Common.Decomposition.SeidelDecomposer">
            <summary>
            Convex decomposition algorithm created by Raimund Seidel
            
            Properties:
            - Decompose the polygon into trapezoids, then triangulate.
            - To use the trapezoid data, use ConvexPartitionTrapezoid()
            - Generate a lot of garbage due to incapsulation of the Poly2Tri library.
            - Running time is O(n log n), n = number of vertices.
            - Running time is almost linear for most simple polygons.
            - Does not care about winding order. 
            
            For more information, see Raimund Seidel's paper "A simple and fast incremental randomized
            algorithm for computing trapezoidal decompositions and for triangulating polygons"
            
            See also: "Computational Geometry", 3rd edition, by Mark de Berg et al, Chapter 6.2
                      "Computational Geometry in C", 2nd edition, by Joseph O'Rourke
            
            Original code from the Poly2Tri project by Mason Green.
            http://code.google.com/p/poly2tri/source/browse?repo=archive#hg/scala/src/org/poly2tri/seidel
            
            This implementation is from Dec 14, 2010
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.SeidelDecomposer.ConvexPartition(Alt.FarseerPhysics.Common.Vertices)">
            <summary>
            Decompose the polygon into several smaller non-concave polygons.
            </summary>
            <param name="vertices">The polygon to decompose.</param>
            <param name="sheer">The sheer to use if you get bad results, try using a higher value.</param>
            <returns>A list of triangles</returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Decomposition.SeidelDecomposer.ConvexPartitionTrapezoid(Alt.FarseerPhysics.Common.Vertices)">
            <summary>
            Decompose the polygon into several smaller non-concave polygons.
            </summary>
            <param name="vertices">The polygon to decompose.</param>
            <param name="sheer">The sheer to use if you get bad results, try using a higher value.</param>
            <returns>A list of trapezoids</returns>
        </member>
        <member name="F:Alt.FarseerPhysics.Common.Decomposition.TriangulationAlgorithm.Earclip">
            <summary>
            Convex decomposition algorithm using ear clipping
            
            Properties:
            - Only works on simple polygons.
            - Does not support holes.
            - Running time is O(n^2), n = number of vertices.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Common.Decomposition.TriangulationAlgorithm.Bayazit">
            <summary>
            Convex decomposition algorithm created by Mark Bayazit (http://mnbayazit.com/)
            
            Properties:
            - Tries to decompose using polygons instead of triangles.
            - Tends to produce optimal results with low processing time.
            - Running time is O(nr), n = number of vertices, r = reflex vertices.
            - Does not support holes.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Common.Decomposition.TriangulationAlgorithm.Flipcode">
            <summary>
            Convex decomposition algorithm created by unknown
            
            Properties:
            - No support for holes
            - Very fast
            - Only works on simple polygons
            - Only works on counter clockwise polygons
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Common.Decomposition.TriangulationAlgorithm.Seidel">
            <summary>
            Convex decomposition algorithm created by Raimund Seidel
            
            Properties:
            - Decompose the polygon into trapezoids, then triangulate.
            - To use the trapezoid data, use ConvexPartitionTrapezoid()
            - Generate a lot of garbage due to incapsulation of the Poly2Tri library.
            - Running time is O(n log n), n = number of vertices.
            - Running time is almost linear for most simple polygons.
            - Does not care about winding order. 
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Common.Decomposition.TriangulationAlgorithm.Delauny">
            <summary>
            2D constrained Delaunay triangulation algorithm.
            Based on the paper "Sweep-line algorithm for constrained Delaunay triangulation" by V. Domiter and and B. Zalik
            
            Properties:
            - Creates triangles with a large interior angle.
            - Supports holes
            - Generate a lot of garbage due to incapsulation of the Poly2Tri library.
            - Running time is O(n^2), n = number of vertices.
            - Does not care about winding order.
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Common.LineTools">
            <summary>
            Collection of helper methods for misc collisions.
            Does double tolerance and line collisions with lines and AABBs.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.LineTools.LineIntersect2(Alt.Sketch.Vector2@,Alt.Sketch.Vector2@,Alt.Sketch.Vector2@,Alt.Sketch.Vector2@,Alt.Sketch.Vector2@)">
             <summary>
            Check if the lines a0->a1 and b0->b1 cross.
            If they do, intersectionPoint will be filled
            with the point of crossing.
            
            Grazing lines should not return true.
             
             </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.LineTools.LineIntersect(Alt.Sketch.Vector2@,Alt.Sketch.Vector2@,Alt.Sketch.Vector2@,Alt.Sketch.Vector2@,System.Boolean,System.Boolean,Alt.Sketch.Vector2@)">
            <summary>
            This method detects if two line segments (or lines) intersect,
            and, if so, the point of intersection. Use the <paramref name="firstIsSegment"/> and
            <paramref name="secondIsSegment"/> parameters to set whether the intersection point
            must be on the first and second line segments. Setting these
            both to true means you are doing a line-segment to line-segment
            intersection. Setting one of them to true means you are doing a
            line to line-segment intersection test, and so on.
            Note: If two line segments are coincident, then 
            no intersection is detected (there are actually
            infinite intersection points).
            Author: Jeremy Bell
            </summary>
            <param name="point1">The first point of the first line segment.</param>
            <param name="point2">The second point of the first line segment.</param>
            <param name="point3">The first point of the second line segment.</param>
            <param name="point4">The second point of the second line segment.</param>
            <param name="point">This is set to the intersection
            point if an intersection is detected.</param>
            <param name="firstIsSegment">Set this to true to require that the 
            intersection point be on the first line segment.</param>
            <param name="secondIsSegment">Set this to true to require that the
            intersection point be on the second line segment.</param>
            <returns>True if an intersection is detected, false otherwise.</returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.LineTools.LineIntersect(Alt.Sketch.Vector2,Alt.Sketch.Vector2,Alt.Sketch.Vector2,Alt.Sketch.Vector2,System.Boolean,System.Boolean,Alt.Sketch.Vector2@)">
            <summary>
            This method detects if two line segments (or lines) intersect,
            and, if so, the point of intersection. Use the <paramref name="firstIsSegment"/> and
            <paramref name="secondIsSegment"/> parameters to set whether the intersection point
            must be on the first and second line segments. Setting these
            both to true means you are doing a line-segment to line-segment
            intersection. Setting one of them to true means you are doing a
            line to line-segment intersection test, and so on.
            Note: If two line segments are coincident, then 
            no intersection is detected (there are actually
            infinite intersection points).
            Author: Jeremy Bell
            </summary>
            <param name="point1">The first point of the first line segment.</param>
            <param name="point2">The second point of the first line segment.</param>
            <param name="point3">The first point of the second line segment.</param>
            <param name="point4">The second point of the second line segment.</param>
            <param name="intersectionPoint">This is set to the intersection
            point if an intersection is detected.</param>
            <param name="firstIsSegment">Set this to true to require that the 
            intersection point be on the first line segment.</param>
            <param name="secondIsSegment">Set this to true to require that the
            intersection point be on the second line segment.</param>
            <returns>True if an intersection is detected, false otherwise.</returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.LineTools.LineIntersect(Alt.Sketch.Vector2@,Alt.Sketch.Vector2@,Alt.Sketch.Vector2@,Alt.Sketch.Vector2@,Alt.Sketch.Vector2@)">
            <summary>
            This method detects if two line segments intersect,
            and, if so, the point of intersection. 
            Note: If two line segments are coincident, then 
            no intersection is detected (there are actually
            infinite intersection points).
            </summary>
            <param name="point1">The first point of the first line segment.</param>
            <param name="point2">The second point of the first line segment.</param>
            <param name="point3">The first point of the second line segment.</param>
            <param name="point4">The second point of the second line segment.</param>
            <param name="intersectionPoint">This is set to the intersection
            point if an intersection is detected.</param>
            <returns>True if an intersection is detected, false otherwise.</returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.LineTools.LineIntersect(Alt.Sketch.Vector2,Alt.Sketch.Vector2,Alt.Sketch.Vector2,Alt.Sketch.Vector2,Alt.Sketch.Vector2@)">
            <summary>
            This method detects if two line segments intersect,
            and, if so, the point of intersection. 
            Note: If two line segments are coincident, then 
            no intersection is detected (there are actually
            infinite intersection points).
            </summary>
            <param name="point1">The first point of the first line segment.</param>
            <param name="point2">The second point of the first line segment.</param>
            <param name="point3">The first point of the second line segment.</param>
            <param name="point4">The second point of the second line segment.</param>
            <param name="intersectionPoint">This is set to the intersection
            point if an intersection is detected.</param>
            <returns>True if an intersection is detected, false otherwise.</returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.LineTools.LineSegmentVerticesIntersect(Alt.Sketch.Vector2@,Alt.Sketch.Vector2@,Alt.FarseerPhysics.Common.Vertices)">
            <summary>
            Get all intersections between a line segment and a list of vertices
            representing a polygon. The vertices reuse adjacent points, so for example
            edges one and two are between the first and second vertices and between the
            second and third vertices. The last edge is between vertex vertices.Count - 1
            and verts0. (ie, vertices from a Geometry or AABB)
            </summary>
            <param name="point1">The first point of the line segment to test</param>
            <param name="point2">The second point of the line segment to test.</param>
            <param name="vertices">The vertices, as described above</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.LineTools.LineSegmentAABBIntersect(Alt.Sketch.Vector2@,Alt.Sketch.Vector2@,Alt.FarseerPhysics.Collision.AABB)">
            <summary>
            Get all intersections between a line segment and an AABB. 
            </summary>
            <param name="point1">The first point of the line segment to test</param>
            <param name="point2">The second point of the line segment to test.</param>
            <param name="aabb">The AABB that is used for testing intersection.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.MathUtils.Cross(Alt.Sketch.Vector3,Alt.Sketch.Vector3)">
            Perform the cross product on two vectors.
        </member>
        <member name="M:Alt.FarseerPhysics.Common.MathUtils.Mul(Alt.FarseerPhysics.Common.Mat33,Alt.Sketch.Vector3)">
            Multiply a matrix times a vector.
        </member>
        <member name="M:Alt.FarseerPhysics.Common.MathUtils.Mul22(Alt.FarseerPhysics.Common.Mat33,Alt.Sketch.Vector2)">
            Multiply a matrix times a vector.
        </member>
        <member name="M:Alt.FarseerPhysics.Common.MathUtils.Mul(Alt.FarseerPhysics.Common.Rot,Alt.FarseerPhysics.Common.Rot)">
            Multiply two rotations: q * r
        </member>
        <member name="M:Alt.FarseerPhysics.Common.MathUtils.MulT(Alt.FarseerPhysics.Common.Rot,Alt.FarseerPhysics.Common.Rot)">
            Transpose multiply two rotations: qT * r
        </member>
        <member name="M:Alt.FarseerPhysics.Common.MathUtils.Mul(Alt.FarseerPhysics.Common.Rot,Alt.Sketch.Vector2)">
            Rotate a vector
        </member>
        <member name="M:Alt.FarseerPhysics.Common.MathUtils.MulT(Alt.FarseerPhysics.Common.Rot,Alt.Sketch.Vector2)">
            Inverse rotate a vector
        </member>
        <member name="M:Alt.FarseerPhysics.Common.MathUtils.Skew(Alt.Sketch.Vector2)">
            Get the skew vector such that dot(skew_vec, other) == cross(vec, other)
        </member>
        <member name="M:Alt.FarseerPhysics.Common.MathUtils.IsValid(System.Double)">
            <summary>
            This function is used to ensure that a floating point number is
            not a NaN or infinity.
            </summary>
            <param name="x">The x.</param>
            <returns>
            	<c>true</c> if the specified x is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.MathUtils.InvSqrt(System.Double)">
            <summary>
            This is a approximate yet fast inverse square-root.
            </summary>
            <param name="x">The x.</param>
            <returns></returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.MathUtils.VectorAngle(Alt.Sketch.Vector2@,Alt.Sketch.Vector2@)">
            <summary>
            Return the angle between two vectors on a plane
            The angle is from vector 1 to vector 2, positive anticlockwise
            The result is between -pi -> pi
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.MathUtils.Dot(Alt.Sketch.Vector3,Alt.Sketch.Vector3)">
            Perform the dot product on two vectors.
        </member>
        <member name="M:Alt.FarseerPhysics.Common.MathUtils.Area(Alt.Sketch.Vector2,Alt.Sketch.Vector2,Alt.Sketch.Vector2)">
            <summary>
            Returns a positive number if c is to the left of the line going from a to b.
            </summary>
            <returns>Positive number if point is left, negative if point is right, 
            and 0 if points are collinear.</returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.MathUtils.Area(Alt.Sketch.Vector2@,Alt.Sketch.Vector2@,Alt.Sketch.Vector2@)">
            <summary>
            Returns a positive number if c is to the left of the line going from a to b.
            </summary>
            <returns>Positive number if point is left, negative if point is right, 
            and 0 if points are collinear.</returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.MathUtils.IsCollinear(Alt.Sketch.Vector2@,Alt.Sketch.Vector2@,Alt.Sketch.Vector2@)">
            <summary>
            Determines if three vertices are collinear (ie. on a straight line)
            </summary>
            <param name="a">First vertex</param>
            <param name="b">Second vertex</param>
            <param name="c">Third vertex</param>
            <param name="tolerance">The tolerance</param>
            <returns></returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.MathUtils.FloatEquals(System.Double,System.Double,System.Double)">
            <summary>
            Checks if a floating point Value is equal to another,
            within a certain tolerance.
            </summary>
            <param name="value1">The first floating point Value.</param>
            <param name="value2">The second floating point Value.</param>
            <param name="delta">The floating point tolerance.</param>
            <returns>True if the values are "equal", false otherwise.</returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.MathUtils.FloatInRange(System.Double,System.Double,System.Double)">
            <summary>
            Checks if a floating point Value is within a specified
            range of values (inclusive).
            </summary>
            <param name="value">The Value to check.</param>
            <param name="min">The minimum Value.</param>
            <param name="max">The maximum Value.</param>
            <returns>True if the Value is within the range specified,
            false otherwise.</returns>
        </member>
        <member name="T:Alt.FarseerPhysics.Common.Mat22">
            <summary>
            A 2-by-2 matrix. Stored in column-major order.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Mat22.#ctor(Alt.Sketch.Vector2,Alt.Sketch.Vector2)">
            <summary>
            Construct this matrix using columns.
            </summary>
            <param name="c1">The c1.</param>
            <param name="c2">The c2.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Mat22.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Construct this matrix using scalars.
            </summary>
            <param name="a11">The a11.</param>
            <param name="a12">The a12.</param>
            <param name="a21">The a21.</param>
            <param name="a22">The a22.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Mat22.Set(Alt.Sketch.Vector2,Alt.Sketch.Vector2)">
            <summary>
            Initialize this matrix using columns.
            </summary>
            <param name="c1">The c1.</param>
            <param name="c2">The c2.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Mat22.SetIdentity">
            <summary>
            Set this to the identity matrix.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Mat22.SetZero">
            <summary>
            Set this matrix to all zeros.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Mat22.Solve(Alt.Sketch.Vector2)">
            <summary>
            Solve A * x = b, where b is a column vector. This is more efficient
            than computing the inverse in one-shot cases.
            </summary>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="T:Alt.FarseerPhysics.Common.Mat33">
            <summary>
            A 3-by-3 matrix. Stored in column-major order.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Mat33.#ctor(Alt.Sketch.Vector3,Alt.Sketch.Vector3,Alt.Sketch.Vector3)">
            <summary>
            Construct this matrix using columns.
            </summary>
            <param name="c1">The c1.</param>
            <param name="c2">The c2.</param>
            <param name="c3">The c3.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Mat33.SetZero">
            <summary>
            Set this matrix to all zeros.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Mat33.Solve33(Alt.Sketch.Vector3)">
            <summary>
            Solve A * x = b, where b is a column vector. This is more efficient
            than computing the inverse in one-shot cases.
            </summary>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Mat33.Solve22(Alt.Sketch.Vector2)">
            <summary>
            Solve A * x = b, where b is a column vector. This is more efficient
            than computing the inverse in one-shot cases. Solve only the upper
            2-by-2 matrix equation.
            </summary>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Mat33.GetInverse22(Alt.FarseerPhysics.Common.Mat33@)">
            Get the inverse of this matrix as a 2-by-2.
            Returns the zero matrix if singular.
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Mat33.GetSymInverse33(Alt.FarseerPhysics.Common.Mat33@)">
            Get the symmetric inverse of this matrix as a 3-by-3.
            Returns the zero matrix if singular.
        </member>
        <member name="T:Alt.FarseerPhysics.Common.Rot">
            <summary>
            Rotation
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Common.Rot.s">
            Sine and cosine
        </member>
        <member name="F:Alt.FarseerPhysics.Common.Rot.c">
            Sine and cosine
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Rot.#ctor(System.Double)">
            <summary>
            Initialize from an angle in radians
            </summary>
            <param name="angle">Angle in radians</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Rot.Set(System.Double)">
            <summary>
            Set using an angle in radians.
            </summary>
            <param name="angle"></param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Rot.SetIdentity">
            <summary>
            Set to the identity rotation
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Rot.GetAngle">
            <summary>
            Get the angle in radians
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Rot.GetXAxis">
            <summary>
            Get the x-axis
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Rot.GetYAxis">
            <summary>
            Get the y-axis
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Common.Transform">
            <summary>
            A transform contains translation and rotation. It is used to represent
            the position and orientation of rigid frames.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Transform.#ctor(Alt.Sketch.Vector2@,Alt.FarseerPhysics.Common.Rot@)">
            <summary>
            Initialize using a position vector and a rotation matrix.
            </summary>
            <param name="position">The position.</param>
            <param name="rotation">The r.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Transform.SetIdentity">
            <summary>
            Set this to the identity transform.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Transform.Set(Alt.Sketch.Vector2,System.Double)">
            <summary>
            Set this based on the position and angle.
            </summary>
            <param name="position">The position.</param>
            <param name="angle">The angle.</param>
        </member>
        <member name="T:Alt.FarseerPhysics.Common.Sweep">
            <summary>
            This describes the motion of a body/shape for TOI computation.
            Shapes are defined with respect to the body origin, which may
            no coincide with the center of mass. However, to support dynamics
            we must interpolate the center of mass position.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Common.Sweep.A">
            <summary>
            World angles
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Common.Sweep.Alpha0">
            <summary>
            Fraction of the current time step in the range [0,1]
            c0 and a0 are the positions at alpha0.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Common.Sweep.C">
            <summary>
            Center world positions
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Common.Sweep.LocalCenter">
            <summary>
            Local center of mass position
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Sweep.GetTransform(Alt.FarseerPhysics.Common.Transform@,System.Double)">
            <summary>
            Get the interpolated transform at a specific time.
            </summary>
            <param name="xfb">The transform.</param>
            <param name="beta">beta is a factor in [0,1], where 0 indicates alpha0.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Sweep.Advance(System.Double)">
            <summary>
            Advance the sweep forward, yielding a new initial state.
            </summary>
            <param name="alpha">new initial time..</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Sweep.Normalize">
            <summary>
            Normalize the angles.
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Common.Path">
            <summary>
            Path:
            Very similar to Vertices, but this
            class contains vectors describing
            control points on a Catmull-Rom
            curve.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Common.Path.ControlPoints">
            <summary>
            All the points that makes up the curve
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Path.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.FarseerPhysics.Common.Path"/> class.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Path.#ctor(Alt.Sketch.Vector2[])">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.FarseerPhysics.Common.Path"/> class.
            </summary>
            <param name="vertices">The vertices to created the path from.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Path.#ctor(System.Collections.Generic.IList{Alt.Sketch.Vector2})">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.FarseerPhysics.Common.Path"/> class.
            </summary>
            <param name="vertices">The vertices to created the path from.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Path.NextIndex(System.Int32)">
            <summary>
            Gets the next index of a controlpoint
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Path.PreviousIndex(System.Int32)">
            <summary>
            Gets the previous index of a controlpoint
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Path.Translate(Alt.Sketch.Vector2@)">
            <summary>
            Translates the control points by the specified vector.
            </summary>
            <param name="vector">The vector.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Path.Scale(Alt.Sketch.Vector2@)">
            <summary>
            Scales the control points by the specified vector.
            </summary>
            <param name="value">The Value.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Path.Rotate(System.Double)">
            <summary>
            Rotate the control points by the defined value in radians.
            </summary>
            <param name="value">The amount to rotate by in radians.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Path.GetVertices(System.Int32)">
            <summary>
            Returns a set of points defining the
            curve with the specifed number of divisions
            between each control point.
            </summary>
            <param name="divisions">Number of divisions between each control point.</param>
            <returns></returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.Path.GetPositionNormal(System.Double)">
            <summary>
            Gets the normal for the given time.
            </summary>
            <param name="time">The time</param>
            <returns>The normal.</returns>
        </member>
        <member name="P:Alt.FarseerPhysics.Common.Path.Closed">
            <summary>
            True if the curve is closed.
            </summary>
            <value><c>true</c> if closed; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Alt.FarseerPhysics.Common.PathManager">
            <summary>
            An easy to use manager for creating paths.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.PathManager.ConvertPathToEdges(Alt.FarseerPhysics.Common.Path,Alt.FarseerPhysics.Dynamics.Body,System.Int32)">
            <summary>
            Convert a path into a set of edges and attaches them to the specified body.
            Note: use only for static edges.
            </summary>
            <param name="path">The path.</param>
            <param name="body">The body.</param>
            <param name="subdivisions">The subdivisions.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.PathManager.ConvertPathToPolygon(Alt.FarseerPhysics.Common.Path,Alt.FarseerPhysics.Dynamics.Body,System.Double,System.Int32)">
            <summary>
            Convert a closed path into a polygon.
            Convex decomposition is automatically performed.
            </summary>
            <param name="path">The path.</param>
            <param name="body">The body.</param>
            <param name="density">The density.</param>
            <param name="subdivisions">The subdivisions.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.PathManager.EvenlyDistributeShapesAlongPath(Alt.FarseerPhysics.Dynamics.World,Alt.FarseerPhysics.Common.Path,System.Collections.Generic.IEnumerable{Alt.FarseerPhysics.Collision.Shapes.Shape},Alt.FarseerPhysics.Dynamics.BodyType,System.Int32)">
            <summary>
            Duplicates the given Body along the given path for approximatly the given copies.
            </summary>
            <param name="world">The world.</param>
            <param name="path">The path.</param>
            <param name="shapes">The shapes.</param>
            <param name="type">The type.</param>
            <param name="copies">The copies.</param>
            <param name="userData"></param>
            <returns></returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.PathManager.EvenlyDistributeShapesAlongPath(Alt.FarseerPhysics.Dynamics.World,Alt.FarseerPhysics.Common.Path,Alt.FarseerPhysics.Collision.Shapes.Shape,Alt.FarseerPhysics.Dynamics.BodyType,System.Int32,System.Object)">
            <summary>
            Duplicates the given Body along the given path for approximatly the given copies.
            </summary>
            <param name="world">The world.</param>
            <param name="path">The path.</param>
            <param name="shape">The shape.</param>
            <param name="type">The type.</param>
            <param name="copies">The copies.</param>
            <param name="userData">The user data.</param>
            <returns></returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.PathManager.MoveBodyOnPath(Alt.FarseerPhysics.Common.Path,Alt.FarseerPhysics.Dynamics.Body,System.Double,System.Double,System.Double)">
            <summary>
            Moves the given body along the defined path.
            </summary>
            <param name="path">The path.</param>
            <param name="body">The body.</param>
            <param name="time">The time.</param>
            <param name="strength">The strength.</param>
            <param name="timeStep">The time step.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.PathManager.AttachBodiesWithRevoluteJoint(Alt.FarseerPhysics.Dynamics.World,System.Collections.Generic.List{Alt.FarseerPhysics.Dynamics.Body},Alt.Sketch.Vector2,Alt.Sketch.Vector2,System.Boolean,System.Boolean)">
            <summary>
            Attaches the bodies with revolute joints.
            </summary>
            <param name="world">The world.</param>
            <param name="bodies">The bodies.</param>
            <param name="localAnchorA">The local anchor A.</param>
            <param name="localAnchorB">The local anchor B.</param>
            <param name="connectFirstAndLast">if set to <c>true</c> [connect first and last].</param>
            <param name="collideConnected">if set to <c>true</c> [collide connected].</param>
        </member>
        <member name="T:Alt.FarseerPhysics.Common.PhysicsLogic.FilterData">
            <summary>
            Contains filter data that can determine whether an object should be processed or not.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Common.PhysicsLogic.FilterData.DisabledOnCategories">
            <summary>
            Disable the logic on specific categories.
            Category.None by default.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Common.PhysicsLogic.FilterData.DisabledOnGroup">
            <summary>
            Disable the logic on specific groups
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Common.PhysicsLogic.FilterData.EnabledOnCategories">
            <summary>
            Enable the logic on specific categories
            Category.All by default.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Common.PhysicsLogic.FilterData.EnabledOnGroup">
            <summary>
            Enable the logic on specific groups.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.PhysicsLogic.FilterData.IsActiveOn(Alt.FarseerPhysics.Dynamics.Body)">
            <summary>
            
            </summary>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.PhysicsLogic.FilterData.AddDisabledCategory(Alt.FarseerPhysics.Dynamics.Category)">
            <summary>
            Adds the category.
            </summary>
            <param name="category">The category.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.PhysicsLogic.FilterData.RemoveDisabledCategory(Alt.FarseerPhysics.Dynamics.Category)">
            <summary>
            Removes the category.
            </summary>
            <param name="category">The category.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.PhysicsLogic.FilterData.IsInDisabledCategory(Alt.FarseerPhysics.Dynamics.Category)">
            <summary>
            Determines whether this body ignores the the specified controller.
            </summary>
            <param name="category">The category.</param>
            <returns>
            	<c>true</c> if the object has the specified category; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.PhysicsLogic.FilterData.AddEnabledCategory(Alt.FarseerPhysics.Dynamics.Category)">
            <summary>
            Adds the category.
            </summary>
            <param name="category">The category.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.PhysicsLogic.FilterData.RemoveEnabledCategory(Alt.FarseerPhysics.Dynamics.Category)">
            <summary>
            Removes the category.
            </summary>
            <param name="category">The category.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.PhysicsLogic.FilterData.IsInEnabledInCategory(Alt.FarseerPhysics.Dynamics.Category)">
            <summary>
            Determines whether this body ignores the the specified controller.
            </summary>
            <param name="category">The category.</param>
            <returns>
            	<c>true</c> if the object has the specified category; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.PhysicsLogic.PhysicsLogicFilter.IgnorePhysicsLogic(Alt.FarseerPhysics.Common.PhysicsLogic.PhysicsLogicType)">
            <summary>
            Ignores the controller. The controller has no effect on this body.
            </summary>
            <param name="type">The logic type.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.PhysicsLogic.PhysicsLogicFilter.RestorePhysicsLogic(Alt.FarseerPhysics.Common.PhysicsLogic.PhysicsLogicType)">
            <summary>
            Restore the controller. The controller affects this body.
            </summary>
            <param name="type">The logic type.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.PhysicsLogic.PhysicsLogicFilter.IsPhysicsLogicIgnored(Alt.FarseerPhysics.Common.PhysicsLogic.PhysicsLogicType)">
            <summary>
            Determines whether this body ignores the the specified controller.
            </summary>
            <param name="type">The logic type.</param>
            <returns>
            	<c>true</c> if the body has the specified flag; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Alt.FarseerPhysics.Common.PhysicsLogic.RayDataComparer">
            <summary>
            This is a comprarer used for 
            detecting angle difference between rays
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Common.PhysicsLogic.RealExplosion">
            <summary>
            Creates a realistic explosion based on raycasting. Objects in the open will be affected, but objects behind
            static bodies will not. A body that is half in cover, half in the open will get half the force applied to the end in
            the open.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Common.PhysicsLogic.RealExplosion.MaxEdgeOffset">
            <summary>
            Two degrees: maximum angle from edges to first ray tested
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Common.PhysicsLogic.RealExplosion.EdgeRatio">
            <summary>
            Ratio of arc length to angle from edges to first ray tested.
            Defaults to 1/40.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Common.PhysicsLogic.RealExplosion.IgnoreWhenInsideShape">
            <summary>
            Ignore Explosion if it happens inside a shape.
            Default value is false.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Common.PhysicsLogic.RealExplosion.MaxAngle">
            <summary>
            Max angle between rays (used when segment is large).
            Defaults to 15 degrees
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Common.PhysicsLogic.RealExplosion.MaxShapes">
            <summary>
            Maximum number of shapes involved in the explosion.
            Defaults to 100
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Common.PhysicsLogic.RealExplosion.MinRays">
            <summary>
            How many rays per shape/body/segment.
            Defaults to 5
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.PhysicsLogic.RealExplosion.Activate(Alt.Sketch.Vector2,System.Double,System.Double)">
            <summary>
            Activate the explosion at the specified position.
            </summary>
            <param name="pos">The position where the explosion happens </param>
            <param name="radius">The explosion radius </param>
            <param name="maxForce">The explosion force at the explosion point (then is inversely proportional to the square of the distance)</param>
            <returns>A list of bodies and the amount of force that was applied to them.</returns>
        </member>
        <member name="T:Alt.FarseerPhysics.Common.PhysicsLogic.SimpleExplosion">
            <summary>
            Creates a simple explosion that ignores other bodies hiding behind static bodies.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.PhysicsLogic.SimpleExplosion.Activate(Alt.Sketch.Vector2,System.Double,System.Double)">
            <summary>
            Activate the explosion at the specified position.
            </summary>
            <param name="pos">The position (center) of the explosion.</param>
            <param name="radius">The radius of the explosion.</param>
            <param name="force">The force applied</param>
            <param name="maxForce">A maximum amount of force. When force gets over this value, it will be equal to maxForce</param>
            <returns>A list of bodies and the amount of force that was applied to them.</returns>
        </member>
        <member name="P:Alt.FarseerPhysics.Common.PhysicsLogic.SimpleExplosion.Power">
            <summary>
            This is the power used in the power function. A value of 1 means the force
            applied to bodies in the explosion is linear. A value of 2 means it is exponential.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.PolygonManipulation.CuttingTools.SplitShape(Alt.FarseerPhysics.Dynamics.Fixture,Alt.Sketch.Vector2,Alt.Sketch.Vector2,Alt.FarseerPhysics.Common.Vertices@,Alt.FarseerPhysics.Common.Vertices@)">
            <summary>
            Split a fixture into 2 vertice collections using the given entry and exit-point.
            </summary>
            <param name="fixture">The Fixture to split</param>
            <param name="entryPoint">The entry point - The start point</param>
            <param name="exitPoint">The exit point - The end point</param>
            <param name="first">The first collection of vertexes</param>
            <param name="second">The second collection of vertexes</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.PolygonManipulation.CuttingTools.Cut(Alt.FarseerPhysics.Dynamics.World,Alt.Sketch.Vector2,Alt.Sketch.Vector2)">
            <summary>
            This is a high-level function to cuts fixtures inside the given world, using the start and end points.
            Note: We don't support cutting when the start or end is inside a shape.
            </summary>
            <param name="world">The world.</param>
            <param name="start">The startpoint.</param>
            <param name="end">The endpoint.</param>
            <returns>True if the cut was performed.</returns>
        </member>
        <member name="T:Alt.FarseerPhysics.Common.PolygonManipulation.SimplifyTools">
            <summary>
            Provides a set of tools to simplify polygons in various ways.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.PolygonManipulation.SimplifyTools.CollinearSimplify(Alt.FarseerPhysics.Common.Vertices)">
            <summary>
            Removes all collinear points on the polygon.
            </summary>
            <param name="vertices">The polygon that needs simplification.</param>
            <param name="collinearityTolerance">The collinearity tolerance.</param>
            <returns>A simplified polygon.</returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.PolygonManipulation.SimplifyTools.DouglasPeuckerSimplify(Alt.FarseerPhysics.Common.Vertices,System.Double)">
            <summary>
            Ramer-Douglas-Peucker polygon simplification algorithm. This is the general recursive version that does not use the
            speed-up technique by using the Melkman convex hull.
            
            If you pass in 0, it will remove all collinear points.
            </summary>
            <returns>The simplified polygon</returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.PolygonManipulation.SimplifyTools.MergeParallelEdges(Alt.FarseerPhysics.Common.Vertices,System.Double)">
            <summary>
            Merges all parallel edges in the list of vertices
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="tolerance">The tolerance.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.PolygonManipulation.SimplifyTools.MergeIdenticalPoints(Alt.FarseerPhysics.Common.Vertices)">
            <summary>
            Merges the identical points in the polygon.
            </summary>
            <param name="vertices">The vertices.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.PolygonManipulation.SimplifyTools.ReduceByDistance(Alt.FarseerPhysics.Common.Vertices,System.Double)">
            <summary>
            Reduces the polygon by distance.
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="distance">The distance between points. Points closer than this will be removed.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.PolygonManipulation.SimplifyTools.ReduceByNth(Alt.FarseerPhysics.Common.Vertices,System.Int32)">
            <summary>
            Reduces the polygon by removing the Nth vertex in the vertices list.
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="nth">The Nth point to remove. Example: 5.</param>
            <returns></returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.PolygonManipulation.SimplifyTools.ReduceByArea(Alt.FarseerPhysics.Common.Vertices,System.Double)">
            <summary>
            Simplify the polygon by removing all points that in pairs of 3 have an area less than the tolerance.
            
            Pass in 0 as tolerance, and it will only remove collinear points.
            </summary>
            <param name="vertices"></param>
            <param name="areaTolerance"></param>
            <returns></returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.PolygonManipulation.YuPengClipper.Execute(Alt.FarseerPhysics.Common.Vertices,Alt.FarseerPhysics.Common.Vertices,Alt.FarseerPhysics.Common.PolygonManipulation.PolyClipType,Alt.FarseerPhysics.Common.PolygonManipulation.PolyClipError@)">
            <summary>
            Implements "A new algorithm for Boolean operations on general polygons" 
            available here: http://liama.ia.ac.cn/wiki/_media/user:dong:dong_cg_05.pdf
            Merges two polygons, a subject and a clip with the specified operation. Polygons may not be 
            self-intersecting.
            
            Warning: May yield incorrect results or even crash if polygons contain collinear points.
            </summary>
            <param name="subject">The subject polygon.</param>
            <param name="clip">The clip polygon, which is added, 
            substracted or intersected with the subject</param>
            <param name="clipType">The operation to be performed. Either
            Union, Difference or Intersection.</param>
            <param name="error">The error generated (if any)</param>
            <returns>A list of closed polygons, which make up the result of the clipping operation.
            Outer contours are ordered counter clockwise, holes are ordered clockwise.</returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.PolygonManipulation.YuPengClipper.CalculateIntersections(Alt.FarseerPhysics.Common.Vertices,Alt.FarseerPhysics.Common.Vertices,Alt.FarseerPhysics.Common.Vertices@,Alt.FarseerPhysics.Common.Vertices@)">
            <summary>
            Calculates all intersections between two polygons.
            </summary>
            <param name="polygon1">The first polygon.</param>
            <param name="polygon2">The second polygon.</param>
            <param name="slicedPoly1">Returns the first polygon with added intersection points.</param>
            <param name="slicedPoly2">Returns the second polygon with added intersection points.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.PolygonManipulation.YuPengClipper.CalculateSimplicalChain(Alt.FarseerPhysics.Common.Vertices,System.Collections.Generic.List{System.Double}@,System.Collections.Generic.List{Alt.FarseerPhysics.Common.PolygonManipulation.YuPengClipper.Edge}@)">
            <summary>
            Calculates the simplical chain corresponding to the input polygon.
            </summary>
            <remarks>Used by method <c>Execute()</c>.</remarks>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.PolygonManipulation.YuPengClipper.CalculateResultChain(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{Alt.FarseerPhysics.Common.PolygonManipulation.YuPengClipper.Edge},System.Collections.Generic.List{System.Double},System.Collections.Generic.List{Alt.FarseerPhysics.Common.PolygonManipulation.YuPengClipper.Edge},Alt.FarseerPhysics.Common.PolygonManipulation.PolyClipType,System.Collections.Generic.List{Alt.FarseerPhysics.Common.PolygonManipulation.YuPengClipper.Edge}@)">
            <summary>
            Calculates the characteristics function for all edges of
            the given simplical chains and builds the result chain.
            </summary>
            <remarks>Used by method <c>Execute()</c>.</remarks>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.PolygonManipulation.YuPengClipper.BuildPolygonsFromChain(System.Collections.Generic.List{Alt.FarseerPhysics.Common.PolygonManipulation.YuPengClipper.Edge},System.Collections.Generic.List{Alt.FarseerPhysics.Common.Vertices}@)">
            <summary>
            Calculates the polygon(s) from the result simplical chain.
            </summary>
            <remarks>Used by method <c>Execute()</c>.</remarks>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.PolygonManipulation.YuPengClipper.CalculateBeta(Alt.Sketch.Vector2,Alt.FarseerPhysics.Common.PolygonManipulation.YuPengClipper.Edge,System.Double)">
            <summary>
            Needed to calculate the characteristics function of a simplex.
            </summary>
            <remarks>Used by method <c>CalculateEdgeCharacter()</c>.</remarks>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.PolygonManipulation.YuPengClipper.GetAlpha(Alt.Sketch.Vector2,Alt.Sketch.Vector2,Alt.Sketch.Vector2)">
            <summary>
            Needed for sorting multiple intersections points on the same edge.
            </summary>
            <remarks>Used by method <c>CalculateIntersections()</c>.</remarks>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.PolygonManipulation.YuPengClipper.CalculateSimplexCoefficient(Alt.Sketch.Vector2,Alt.Sketch.Vector2,Alt.Sketch.Vector2)">
            <summary>
            Returns the coefficient of a simplex.
            </summary>
            <remarks>Used by method <c>CalculateSimplicalChain()</c>.</remarks>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.PolygonManipulation.YuPengClipper.PointInSimplex(Alt.Sketch.Vector2,Alt.FarseerPhysics.Common.PolygonManipulation.YuPengClipper.Edge)">
            <summary>
            Winding number test for a point in a simplex.
            </summary>
            <param name="point">The point to be tested.</param>
            <param name="edge">The edge that the point is tested against.</param>
            <returns>False if the winding number is even and the point is outside
            the simplex and True otherwise.</returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.PolygonManipulation.YuPengClipper.PointOnLineSegment(Alt.Sketch.Vector2,Alt.Sketch.Vector2,Alt.Sketch.Vector2)">
            <summary>
            Tests if a point lies on a line segment.
            </summary>
            <remarks>Used by method <c>CalculateBeta()</c>.</remarks>
        </member>
        <member name="T:Alt.FarseerPhysics.Common.PolygonManipulation.YuPengClipper.Edge">
            <summary>Specifies an Edge. Edges are used to represent simplicies in simplical chains</summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.PolygonTools.CreateRectangle(System.Double,System.Double)">
            <summary>
            Build vertices to represent an axis-aligned box.
            </summary>
            <param name="hx">the half-width.</param>
            <param name="hy">the half-height.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.PolygonTools.CreateRectangle(System.Double,System.Double,Alt.Sketch.Vector2,System.Double)">
            <summary>
            Build vertices to represent an oriented box.
            </summary>
            <param name="hx">the half-width.</param>
            <param name="hy">the half-height.</param>
            <param name="center">the center of the box in local coordinates.</param>
            <param name="angle">the rotation of the box in local coordinates.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.PolygonTools.CreateRoundedRectangle(System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Creates a rounded rectangle with the specified width and height.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="xRadius">The rounding X radius.</param>
            <param name="yRadius">The rounding Y radius.</param>
            <param name="segments">The number of segments to subdivide the edges.</param>
            <returns></returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.PolygonTools.CreateLine(Alt.Sketch.Vector2,Alt.Sketch.Vector2)">
            <summary>
            Set this as a single edge.
            </summary>
            <param name="start">The first point.</param>
            <param name="end">The second point.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.PolygonTools.CreateCircle(System.Double,System.Int32)">
            <summary>
            Creates a circle with the specified radius and number of edges.
            </summary>
            <param name="radius">The radius.</param>
            <param name="numberOfEdges">The number of edges. The more edges, the more it resembles a circle</param>
            <returns></returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.PolygonTools.CreateEllipse(System.Double,System.Double,System.Int32)">
            <summary>
            Creates a ellipse with the specified width, height and number of edges.
            </summary>
            <param name="xRadius">Width of the ellipse.</param>
            <param name="yRadius">Height of the ellipse.</param>
            <param name="numberOfEdges">The number of edges. The more edges, the more it resembles an ellipse</param>
            <returns></returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.PolygonTools.CreateCapsule(System.Double,System.Double,System.Int32)">
            <summary>
            Creates an capsule with the specified height, radius and number of edges.
            A capsule has the same form as a pill capsule.
            </summary>
            <param name="height">Height (inner height + 2 * radius) of the capsule.</param>
            <param name="endRadius">Radius of the capsule ends.</param>
            <param name="edges">The number of edges of the capsule ends. The more edges, the more it resembles an capsule</param>
            <returns></returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.PolygonTools.CreateCapsule(System.Double,System.Double,System.Int32,System.Double,System.Int32)">
            <summary>
            Creates an capsule with the specified  height, radius and number of edges.
            A capsule has the same form as a pill capsule.
            </summary>
            <param name="height">Height (inner height + radii) of the capsule.</param>
            <param name="topRadius">Radius of the top.</param>
            <param name="topEdges">The number of edges of the top. The more edges, the more it resembles an capsule</param>
            <param name="bottomRadius">Radius of bottom.</param>
            <param name="bottomEdges">The number of edges of the bottom. The more edges, the more it resembles an capsule</param>
            <returns></returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.PolygonTools.CreateGear(System.Double,System.Int32,System.Double,System.Double)">
            <summary>
            Creates a gear shape with the specified radius and number of teeth.
            </summary>
            <param name="radius">The radius.</param>
            <param name="numberOfTeeth">The number of teeth.</param>
            <param name="tipPercentage">The tip percentage.</param>
            <param name="toothHeight">Height of the tooth.</param>
            <returns></returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.PolygonTools.CreatePolygon(System.UInt32[],System.Int32)">
            <summary>
            Detects the vertices by analyzing the texture data.
            </summary>
            <param name="data">The texture data.</param>
            <param name="width">The texture width.</param>
            <returns></returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.PolygonTools.CreatePolygon(System.UInt32[],System.Int32,System.Boolean)">
            <summary>
            Detects the vertices by analyzing the texture data.
            </summary>
            <param name="data">The texture data.</param>
            <param name="width">The texture width.</param>
            <param name="holeDetection">if set to <c>true</c> it will perform hole detection.</param>
            <returns></returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.PolygonTools.CreatePolygon(System.UInt32[],System.Int32,System.Double,System.Byte,System.Boolean,System.Boolean)">
            <summary>
            Detects the vertices by analyzing the texture data.
            </summary>
            <param name="data">The texture data.</param>
            <param name="width">The texture width.</param>
            <param name="hullTolerance">The hull tolerance.</param>
            <param name="alphaTolerance">The alpha tolerance.</param>
            <param name="multiPartDetection">if set to <c>true</c> it will perform multi part detection.</param>
            <param name="holeDetection">if set to <c>true</c> it will perform hole detection.</param>
            <returns></returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.TextureTools.MarchingSquares.DetectSquares(Alt.FarseerPhysics.Collision.AABB,System.Double,System.Double,System.SByte[0:,0:],System.Int32,System.Boolean)">
             <summary>
             Marching squares over the given domain using the mesh defined via the dimensions
                (wid,hei) to build a set of polygons such that f(x,y) less than 0, using the given number
                'bin' for recursive linear inteprolation along cell boundaries.
            
                if 'comb' is true, then the polygons will also be composited into larger possible concave
                polygons.
             </summary>
             <param name="domain"></param>
             <param name="cellWidth"></param>
             <param name="cellHeight"></param>
             <param name="f"></param>
             <param name="lerpCount"></param>
             <param name="combine"></param>
             <returns></returns>
        </member>
        <member name="F:Alt.FarseerPhysics.Common.TextureTools.MarchingSquares._lookMarch">
            Linearly interpolate between (x0 to x1) given a value at these coordinates (v0 and v1)
                        such as to approximate value(return) = 0
                    *
        </member>
        <member name="M:Alt.FarseerPhysics.Common.TextureTools.MarchingSquares.Xlerp(System.Double,System.Double,System.Double,System.Double,System.Double,System.SByte[0:,0:],System.Int32)">
            Recursive linear interpolation for use in marching squares *
        </member>
        <member name="M:Alt.FarseerPhysics.Common.TextureTools.MarchingSquares.Ylerp(System.Double,System.Double,System.Double,System.Double,System.Double,System.SByte[0:,0:],System.Int32)">
            Recursive linear interpolation for use in marching squares *
        </member>
        <member name="M:Alt.FarseerPhysics.Common.TextureTools.MarchingSquares.Square(System.Double)">
            Square value for use in marching squares *
        </member>
        <member name="M:Alt.FarseerPhysics.Common.TextureTools.MarchingSquares.MarchSquare(System.SByte[0:,0:],System.SByte[0:,0:],Alt.FarseerPhysics.Common.TextureTools.MarchingSquares.GeomPoly@,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            Perform a single celled marching square for for the given cell defined by (x0,y0) (x1,y1)
                        using the function f for recursive interpolation, given the look-up table 'fs' of
                        the values of 'f' at cell vertices with the result to be stored in 'poly' given the actual
                        coordinates of 'ax' 'ay' in the marching squares mesh.
                    *
        </member>
        <member name="M:Alt.FarseerPhysics.Common.TextureTools.MarchingSquares.combLeft(Alt.FarseerPhysics.Common.TextureTools.MarchingSquares.GeomPoly@,Alt.FarseerPhysics.Common.TextureTools.MarchingSquares.GeomPoly@)">
            Used in polygon composition to composit polygons into scan lines
                        Combining polya and polyb into one super-polygon stored in polya.
                    *
        </member>
        <member name="T:Alt.FarseerPhysics.Common.TextureTools.MarchingSquares.CxFastList`1">
            <summary>
            Designed as a complete port of CxFastList from CxStd.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.TextureTools.MarchingSquares.CxFastList`1.Begin">
            <summary>
            Iterator to start of list (O(1))
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.TextureTools.MarchingSquares.CxFastList`1.End">
            <summary>
            Iterator to end of list (O(1))
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.TextureTools.MarchingSquares.CxFastList`1.Front">
            <summary>
            Returns first element of list (O(1))
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.TextureTools.MarchingSquares.CxFastList`1.Add(`0)">
            <summary>
            add object to list (O(1))
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.TextureTools.MarchingSquares.CxFastList`1.Remove(`0)">
            <summary>
            remove object from list, returns true if an element was removed (O(n))
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.TextureTools.MarchingSquares.CxFastList`1.Pop">
            <summary>
            pop element from head of list (O(1)) Note: this does not return the object popped! 
            There is good reason to this, and it regards the Alloc list variants which guarantee 
            objects are released to the object pool. You do not want to retrieve an element 
            through pop or else that object may suddenly be used by another piece of code which 
            retrieves it from the object pool.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.TextureTools.MarchingSquares.CxFastList`1.Insert(Alt.FarseerPhysics.Common.TextureTools.MarchingSquares.CxFastListNode{`0},`0)">
            <summary>
            insert object after 'node' returning an iterator to the inserted object.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.TextureTools.MarchingSquares.CxFastList`1.Erase(Alt.FarseerPhysics.Common.TextureTools.MarchingSquares.CxFastListNode{`0},Alt.FarseerPhysics.Common.TextureTools.MarchingSquares.CxFastListNode{`0})">
            <summary>
            removes the element pointed to by 'node' with 'prev' being the previous iterator, 
            returning an iterator to the element following that of 'node' (O(1))
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.TextureTools.MarchingSquares.CxFastList`1.Empty">
            <summary>
            whether the list is empty (O(1))
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.TextureTools.MarchingSquares.CxFastList`1.Size">
            <summary>
            computes size of list (O(n))
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.TextureTools.MarchingSquares.CxFastList`1.Clear">
            <summary>
            empty the list (O(1) if CxMixList, O(n) otherwise)
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.TextureTools.MarchingSquares.CxFastList`1.Has(`0)">
            <summary>
            returns true if 'value' is an element of the list (O(n))
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Common.TextureTools.MarchingSquares.GeomPolyVal.Key">
            Associated polygon at coordinate *
            Key of original sub-polygon *
        </member>
        <member name="T:Alt.FarseerPhysics.Common.TextureTools.Terrain">
            <summary>
            Simple class to maintain a terrain. It can keep track
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Common.TextureTools.Terrain.World">
            <summary>
            World to manage terrain in.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Common.TextureTools.Terrain.Center">
            <summary>
            Center of terrain in world units.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Common.TextureTools.Terrain.Width">
            <summary>
            Width of terrain in world units.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Common.TextureTools.Terrain.Height">
            <summary>
            Height of terrain in world units.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Common.TextureTools.Terrain.PointsPerUnit">
            <summary>
            Points per each world unit used to define the terrain in the point cloud.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Common.TextureTools.Terrain.CellSize">
            <summary>
            Points per cell.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Common.TextureTools.Terrain.SubCellSize">
            <summary>
            Points per sub cell.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Common.TextureTools.Terrain.Iterations">
            <summary>
            Number of iterations to perform in the Marching Squares algorithm.
            Note: More then 3 has almost no effect on quality.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Common.TextureTools.Terrain.Decomposer">
            <summary>
            Decomposer to use when regenerating terrain. Can be changed on the fly without consequence.
            Note: Some decomposerers are unstable.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Common.TextureTools.Terrain._terrainMap">
            <summary>
            Point cloud defining the terrain.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Common.TextureTools.Terrain._bodyMap">
            <summary>
            Generated bodies.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.TextureTools.Terrain.#ctor(Alt.FarseerPhysics.Dynamics.World,Alt.FarseerPhysics.Collision.AABB)">
            <summary>
            Creates a new terrain.
            </summary>
            <param name="world">The World</param>
            <param name="area">The area of the terrain.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.TextureTools.Terrain.#ctor(Alt.FarseerPhysics.Dynamics.World,Alt.Sketch.Vector2,System.Double,System.Double)">
            <summary>
            Creates a new terrain
            </summary>
            <param name="world">The World</param>
            <param name="position">The position (center) of the terrain.</param>
            <param name="width">The width of the terrain.</param>
            <param name="height">The height of the terrain.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.TextureTools.Terrain.Initialize">
            <summary>
            Initialize the terrain for use.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.TextureTools.Terrain.ApplyData(System.SByte[0:,0:])">
            <summary>
            Apply the specified texture data to the terrain.
            </summary>
            <param name="data"></param>
            <param name="offset"></param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.TextureTools.Terrain.ModifyTerrain(Alt.Sketch.Vector2,System.SByte)">
            <summary>
            Modify a single point in the terrain.
            </summary>
            <param name="location">World location to modify. Automatically clipped.</param>
            <param name="value">-1 = inside terrain, 1 = outside terrain</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.TextureTools.Terrain.RegenerateTerrain">
            <summary>
            Regenerate the terrain.
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Common.TextureTools.VerticesDetectionType">
            <summary>
            The detection type affects the resulting polygon data.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Common.TextureTools.VerticesDetectionType.Integrated">
            <summary>
            Holes are integrated into the main polygon.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Common.TextureTools.VerticesDetectionType.Separated">
            <summary>
            The data of the main polygon and hole polygons is returned separately.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Common.TextureTools.TextureConverter._closePixels">
            <summary>
            This array is ment to be readonly.
            It's not because it is accessed very frequently.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.TextureTools.TextureConverter.DetectVertices(System.UInt32[],System.Int32)">
            <summary>
            Detects the vertices of the supplied texture data. (PolygonDetectionType.Integrated)
            </summary>
            <param name="data">The texture data.</param>
            <param name="width">The texture width.</param>
            <returns></returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.TextureTools.TextureConverter.DetectVertices(System.UInt32[],System.Int32,System.Boolean)">
            <summary>
            Detects the vertices of the supplied texture data.
            </summary>
            <param name="data">The texture data.</param>
            <param name="width">The texture width.</param>
            <param name="holeDetection">if set to <c>true</c> it will perform hole detection.</param>
            <returns></returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.TextureTools.TextureConverter.DetectVertices(System.UInt32[],System.Int32,System.Double,System.Byte,System.Boolean,System.Boolean)">
            <summary>
            Detects the vertices of the supplied texture data.
            </summary>
            <param name="data">The texture data.</param>
            <param name="width">The texture width.</param>
            <param name="holeDetection">if set to <c>true</c> it will perform hole detection.</param>
            <param name="hullTolerance">The hull tolerance.</param>
            <param name="alphaTolerance">The alpha tolerance.</param>
            <param name="multiPartDetection">if set to <c>true</c> it will perform multi part detection.</param>
            <returns></returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.TextureTools.TextureConverter.SearchHoleEntrance(Alt.FarseerPhysics.Common.Vertices,System.Nullable{Alt.Sketch.Vector2})">
            <summary>
            Function to search for an entrance point of a hole in a polygon. It searches the polygon from top to bottom between the polygon edges.
            </summary>
            <param name="polygon">The polygon to search in.</param>
            <param name="lastHoleEntrance">The last entrance point.</param>
            <returns>The next holes entrance point. Null if ther are no holes.</returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.TextureTools.TextureConverter.SearchCrossingEdges(Alt.FarseerPhysics.Common.Vertices,System.Int32)">
            <summary>
            Searches the polygon for the x coordinates of the edges that cross the specified y coordinate.
            </summary>
            <param name="polygon">Polygon to search in.</param>
            <param name="y">Y coordinate to check for edges.</param>
            <returns>Descending sorted list of x coordinates of edges that cross the specified y coordinate.</returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.TextureTools.TextureConverter.CreateSimplePolygon(Alt.Sketch.Vector2,Alt.Sketch.Vector2)">
            <summary>
            
            </summary>
            <param name="entrance"></param>
            <param name="last"></param>
            <returns></returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Common.TextureTools.TextureConverter.SearchNextHullEntrance(System.Collections.Generic.List{Alt.FarseerPhysics.Common.Vertices},Alt.Sketch.Vector2,System.Nullable{Alt.Sketch.Vector2}@)">
            <summary>
            Searches for the next shape.
            </summary>
            <param name="detectedPolygons">Already detected polygons.</param>
            <param name="start">Search start coordinate.</param>
            <param name="entrance">Returns the found entrance coordinate. Null if no other shapes found.</param>
            <returns>True if a new shape was found.</returns>
        </member>
        <member name="P:Alt.FarseerPhysics.Common.TextureTools.TextureConverter.PolygonDetectionType">
            <summary>
            Get or set the polygon detection type.
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Common.TextureTools.TextureConverter.HoleDetection">
            <summary>
            Will detect texture 'holes' if set to true. Slows down the detection. Default is false.
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Common.TextureTools.TextureConverter.MultipartDetection">
            <summary>
            Will detect texture multiple 'solid' isles if set to true. Slows down the detection. Default is false.
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Common.TextureTools.TextureConverter.PixelOffsetOptimization">
            <summary>
            Will optimize the vertex positions along the interpolated normal between two edges about a half pixel (post processing). Default is false.
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Common.TextureTools.TextureConverter.Transform">
            <summary>
            Can be used for scaling.
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Common.TextureTools.TextureConverter.AlphaTolerance">
            <summary>
            Alpha (coverage) tolerance. Default is 20: Every pixel with a coverage value equal or greater to 20 will be counts as solid.
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Common.TextureTools.TextureConverter.HullTolerance">
            <summary>
            Default is 1.5f.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Common.PolygonError.NoError">
            <summary>
            There were no errors in the polygon
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Common.PolygonError.InvalidAmountOfVertices">
            <summary>
            Polygon must have between 3 and Settings.MaxPolygonVertices vertices.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Common.PolygonError.NotSimple">
            <summary>
            Polygon must be simple. This means no overlapping edges.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Common.PolygonError.NotCounterClockWise">
            <summary>
            Polygon must have a counter clockwise winding.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Common.PolygonError.NotConvex">
            <summary>
            The polygon is concave, it needs to be convex.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Common.PolygonError.AreaTooSmall">
            <summary>
            Polygon area is too small.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Common.PolygonError.SideTooSmall">
            <summary>
            The polygon has a side that is too short.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Controllers.AbstractForceController.DecayCurve">
            <summary>
            Curve to be used for Decay in Curve mode
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Controllers.AbstractForceController.ForceType">
            <summary>
            The Forcetype of the instance
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Controllers.AbstractForceController.Randomize">
            <summary>
            Provided for reuse to provide Variation functionality in 
            inheriting classes
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Controllers.AbstractForceController.StrengthCurve">
            <summary>
            Curve used by Curve Mode as an animated multiplier for the force 
            strength.
            Only positions between 0 and 1 are considered as that range is 
            stretched to have ImpulseLength.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Controllers.AbstractForceController.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Controllers.AbstractForceController.#ctor(Alt.FarseerPhysics.Controllers.AbstractForceController.TimingModes)">
            <summary>
            Overloaded Contstructor with supplying Timing Mode
            </summary>
            <param name="mode"></param>
        </member>
        <member name="M:Alt.FarseerPhysics.Controllers.AbstractForceController.GetDecayMultiplier(Alt.FarseerPhysics.Dynamics.Body)">
            <summary>
            Calculate the Decay for a given body. Meant to ease force 
            development and stick to the DRY principle and provide unified and 
            predictable decay math.
            </summary>
            <param name="body">The body to calculate decay for</param>
            <returns>A multiplier to multiply the force with to add decay 
            support in inheriting classes</returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Controllers.AbstractForceController.Trigger">
            <summary>
            Triggers the trigger modes (Trigger and Curve)
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Controllers.AbstractForceController.Update(System.Double)">
            <summary>
            Inherited from Controller
            Depending on the TimingMode perform timing logic and call ApplyForce()
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:Alt.FarseerPhysics.Controllers.AbstractForceController.ApplyForce(System.Double,System.Double)">
            <summary>
            Apply the force supplying strength (wich is modified in Update() 
            according to the TimingMode
            </summary>
            <param name="dt"></param>
            <param name="strength">The strength</param>
        </member>
        <member name="P:Alt.FarseerPhysics.Controllers.AbstractForceController.Strength">
            <summary>
            Global Strength of the force to be applied
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Controllers.AbstractForceController.Position">
            <summary>
            Position of the Force. Can be ignored (left at (0,0) for forces
            that are not position-dependent
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Controllers.AbstractForceController.MaximumSpeed">
            <summary>
            Maximum speed of the bodies. Bodies that are travelling faster are
            supposed to be ignored
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Controllers.AbstractForceController.MaximumForce">
            <summary>
            Maximum Force to be applied. As opposed to Maximum Speed this is 
            independent of the velocity of
            the affected body
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Controllers.AbstractForceController.TimingMode">
            <summary>
            Timing Mode of the force instance
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Controllers.AbstractForceController.ImpulseTime">
            <summary>
            Time of the current impulse. Incremented in update till 
            ImpulseLength is reached
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Controllers.AbstractForceController.ImpulseLength">
            <summary>
            Length of a triggered impulse. Used in both Triggered and Curve Mode
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Controllers.AbstractForceController.Triggered">
            <summary>
            Indicating if we are currently during an Impulse 
            (Triggered and Curve Mode)
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Controllers.AbstractForceController.Variation">
            <summary>
            Variation of the force applied to each body affected
            !! Must be used in inheriting classes properly !!
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Controllers.AbstractForceController.DecayMode">
            <summary>
            See DecayModes
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Controllers.AbstractForceController.DecayStart">
            <summary>
            Start of the distance based Decay. To set a non decaying area
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Controllers.AbstractForceController.DecayEnd">
            <summary>
            Maximum distance a force should be applied
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Controllers.AbstractForceController.DecayModes">
            <summary>
            Modes for Decay. Actual Decay must be implemented in inheriting 
            classes
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Controllers.AbstractForceController.ForceTypes">
            <summary>
            Forcetypes are used in the decay math to properly get the distance.
            They are also used to draw a representation in DebugView
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Controllers.AbstractForceController.TimingModes">
            <summary>
            Timing Modes
            Switched: Standard on/off mode using the baseclass enabled property
            Triggered: When the Trigger() method is called the force is active 
            for a specified Impulse Length
            Curve: Still to be defined. The basic idea is having a Trigger 
            combined with a curve for the strength
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Controllers.BuoyancyController.AngularDragCoefficient">
            <summary>
            Controls the rotational drag that the fluid exerts on the bodies within it. Use higher values will simulate thick fluid, like honey, lower values to
            simulate water-like fluids. 
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Controllers.BuoyancyController.Density">
            <summary>
            Density of the fluid. Higher values will make things more buoyant, lower values will cause things to sink.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Controllers.BuoyancyController.LinearDragCoefficient">
            <summary>
            Controls the linear drag that the fluid exerts on the bodies within it.  Use higher values will simulate thick fluid, like honey, lower values to
            simulate water-like fluids.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Controllers.BuoyancyController.Velocity">
            <summary>
            Acts like waterflow. Defaults to 0,0.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Controllers.BuoyancyController.#ctor(Alt.FarseerPhysics.Collision.AABB,System.Double,System.Double,System.Double,Alt.Sketch.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.FarseerPhysics.Controllers.BuoyancyController"/> class.
            </summary>
            <param name="container">Only bodies inside this AABB will be influenced by the controller</param>
            <param name="density">Density of the fluid</param>
            <param name="linearDragCoefficient">Linear drag coefficient of the fluid</param>
            <param name="rotationalDragCoefficient">Rotational drag coefficient of the fluid</param>
            <param name="gravity">The direction gravity acts. Buoyancy force will act in opposite direction of gravity.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Controllers.ControllerFilter.IgnoreController(Alt.FarseerPhysics.Controllers.ControllerType)">
            <summary>
            Ignores the controller. The controller has no effect on this body.
            </summary>
            <param name="controller">The controller type.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Controllers.ControllerFilter.RestoreController(Alt.FarseerPhysics.Controllers.ControllerType)">
            <summary>
            Restore the controller. The controller affects this body.
            </summary>
            <param name="controller">The controller type.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Controllers.ControllerFilter.IsControllerIgnored(Alt.FarseerPhysics.Controllers.ControllerType)">
            <summary>
            Determines whether this body ignores the the specified controller.
            </summary>
            <param name="controller">The controller type.</param>
            <returns>
            	<c>true</c> if the body has the specified flag; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Alt.FarseerPhysics.Controllers.SimpleWindForce">
            <summary>
            Reference implementation for forces based on AbstractForceController
            It supports all features provided by the base class and illustrates proper
            usage as an easy to understand example.
            As a side-effect it is a nice and easy to use wind force for your projects
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Controllers.SimpleWindForce.Direction">
            <summary>
            Direction of the windforce
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Controllers.SimpleWindForce.Divergence">
            <summary>
            The amount of Direction randomization. Allowed range is 0-1.
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Controllers.SimpleWindForce.IgnorePosition">
            <summary>
            Ignore the position and apply the force. If off only in the "front" (relative to position and direction)
            will be affected
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Controllers.VelocityLimitController">
            <summary>
            Put a limit on the linear (translation - the movespeed) and angular (rotation) velocity
            of bodies added to this controller.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Controllers.VelocityLimitController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.FarseerPhysics.Controllers.VelocityLimitController"/> class.
            Sets the max linear velocity to Settings.MaxTranslation
            Sets the max angular velocity to Settings.MaxRotation
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Controllers.VelocityLimitController.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.FarseerPhysics.Controllers.VelocityLimitController"/> class.
            Pass in 0 or double.MaxValue to disable the limit.
            maxAngularVelocity = 0 will disable the angular velocity limit.
            </summary>
            <param name="maxLinearVelocity">The max linear velocity.</param>
            <param name="maxAngularVelocity">The max angular velocity.</param>
        </member>
        <member name="P:Alt.FarseerPhysics.Controllers.VelocityLimitController.MaxAngularVelocity">
            <summary>
            Gets or sets the max angular velocity.
            </summary>
            <value>The max angular velocity.</value>
        </member>
        <member name="P:Alt.FarseerPhysics.Controllers.VelocityLimitController.MaxLinearVelocity">
            <summary>
            Gets or sets the max linear velocity.
            </summary>
            <value>The max linear velocity.</value>
        </member>
        <member name="T:Alt.FarseerPhysics.ConvertUnits">
            <summary>
            Convert units between display and simulation units.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.DebugViewFlags.Shape">
            <summary>
            Draw shapes.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.DebugViewFlags.Joint">
            <summary>
            Draw joint connections.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.DebugViewFlags.AABB">
            <summary>
            Draw axis aligned bounding boxes.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.DebugViewFlags.CenterOfMass">
            <summary>
            Draw center of mass frame.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.DebugViewFlags.DebugPanel">
            <summary>
            Draw useful debug data such as timings and number of bodies, joints, contacts and more.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.DebugViewFlags.ContactPoints">
            <summary>
            Draw contact points between colliding bodies.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.DebugViewFlags.ContactNormals">
            <summary>
            Draw contact normals. Need ContactPoints to be enabled first.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.DebugViewFlags.PolygonPoints">
            <summary>
            Draws the vertices of polygons.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.DebugViewFlags.PerformanceGraph">
            <summary>
            Draws the performance graph.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.DebugViewFlags.Controllers">
            <summary>
            Draws controllers.
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Dynamics.BodyType">
            <summary>
            The body type.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Dynamics.BodyType.Static">
            <summary>
            Zero velocity, may be manually moved. Note: even static bodies have mass.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Dynamics.BodyType.Kinematic">
            <summary>
            Zero mass, non-zero velocity set by user, moved by solver
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Dynamics.BodyType.Dynamic">
            <summary>
            Positive mass, non-zero velocity determined by forces, moved by solver
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Body.ResetDynamics">
            <summary>
            Resets the dynamics of this body.
            Sets torque, force and linear/angular velocity to 0
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Body.CreateFixture(Alt.FarseerPhysics.Collision.Shapes.Shape)">
            <summary>
            Creates a fixture and attach it to this body.
            If the density is non-zero, this function automatically updates the mass of the body.
            Contacts are not created until the next time step.
            Warning: This function is locked during callbacks.
            </summary>
            <param name="shape">The shape.</param>
            <param name="userData">Application specific data</param>
            <returns></returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Body.DestroyFixture(Alt.FarseerPhysics.Dynamics.Fixture)">
            <summary>
            Destroy a fixture. This removes the fixture from the broad-phase and
            destroys all contacts associated with this fixture. This will
            automatically adjust the mass of the body if the body is dynamic and the
            fixture has positive density.
            All fixtures attached to a body are implicitly destroyed when the body is destroyed.
            Warning: This function is locked during callbacks.
            </summary>
            <param name="fixture">The fixture to be removed.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Body.SetTransform(Alt.Sketch.Vector2@,System.Double)">
            <summary>
            Set the position of the body's origin and rotation.
            This breaks any contacts and wakes the other bodies.
            Manipulating a body's transform may cause non-physical behavior.
            </summary>
            <param name="position">The world position of the body's local origin.</param>
            <param name="rotation">The world rotation in radians.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Body.SetTransform(Alt.Sketch.Vector2,System.Double)">
            <summary>
            Set the position of the body's origin and rotation.
            This breaks any contacts and wakes the other bodies.
            Manipulating a body's transform may cause non-physical behavior.
            </summary>
            <param name="position">The world position of the body's local origin.</param>
            <param name="rotation">The world rotation in radians.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Body.SetTransformIgnoreContacts(Alt.Sketch.Vector2@,System.Double)">
            <summary>
            For teleporting a body without considering new contacts immediately.
            </summary>
            <param name="position">The position.</param>
            <param name="angle">The angle.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Body.GetTransform(Alt.FarseerPhysics.Common.Transform@)">
            <summary>
            Get the body transform for the body's origin.
            </summary>
            <param name="transform">The transform of the body's origin.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Body.ApplyForce(Alt.Sketch.Vector2,Alt.Sketch.Vector2)">
            <summary>
            Apply a force at a world point. If the force is not
            applied at the center of mass, it will generate a torque and
            affect the angular velocity. This wakes up the body.
            </summary>
            <param name="force">The world force vector, usually in Newtons (N).</param>
            <param name="point">The world position of the point of application.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Body.ApplyForce(Alt.Sketch.Vector2@)">
            <summary>
            Applies a force at the center of mass.
            </summary>
            <param name="force">The force.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Body.ApplyForce(Alt.Sketch.Vector2)">
            <summary>
            Applies a force at the center of mass.
            </summary>
            <param name="force">The force.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Body.ApplyForce(Alt.Sketch.Vector2@,Alt.Sketch.Vector2@)">
            <summary>
            Apply a force at a world point. If the force is not
            applied at the center of mass, it will generate a torque and
            affect the angular velocity. This wakes up the body.
            </summary>
            <param name="force">The world force vector, usually in Newtons (N).</param>
            <param name="point">The world position of the point of application.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Body.ApplyTorque(System.Double)">
            <summary>
            Apply a torque. This affects the angular velocity
            without affecting the linear velocity of the center of mass.
            This wakes up the body.
            </summary>
            <param name="torque">The torque about the z-axis (out of the screen), usually in N-m.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Body.ApplyLinearImpulse(Alt.Sketch.Vector2)">
            <summary>
            Apply an impulse at a point. This immediately modifies the velocity.
            This wakes up the body.
            </summary>
            <param name="impulse">The world impulse vector, usually in N-seconds or kg-m/s.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Body.ApplyLinearImpulse(Alt.Sketch.Vector2,Alt.Sketch.Vector2)">
            <summary>
            Apply an impulse at a point. This immediately modifies the velocity.
            It also modifies the angular velocity if the point of application
            is not at the center of mass.
            This wakes up the body.
            </summary>
            <param name="impulse">The world impulse vector, usually in N-seconds or kg-m/s.</param>
            <param name="point">The world position of the point of application.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Body.ApplyLinearImpulse(Alt.Sketch.Vector2@)">
            <summary>
            Apply an impulse at a point. This immediately modifies the velocity.
            This wakes up the body.
            </summary>
            <param name="impulse">The world impulse vector, usually in N-seconds or kg-m/s.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Body.ApplyLinearImpulse(Alt.Sketch.Vector2@,Alt.Sketch.Vector2@)">
            <summary>
            Apply an impulse at a point. This immediately modifies the velocity.
            It also modifies the angular velocity if the point of application
            is not at the center of mass.
            This wakes up the body.
            </summary>
            <param name="impulse">The world impulse vector, usually in N-seconds or kg-m/s.</param>
            <param name="point">The world position of the point of application.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Body.ApplyAngularImpulse(System.Double)">
            <summary>
            Apply an angular impulse.
            </summary>
            <param name="impulse">The angular impulse in units of kg*m*m/s.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Body.ResetMassData">
            <summary>
            This resets the mass properties to the sum of the mass properties of the fixtures.
            This normally does not need to be called unless you called SetMassData to override
            the mass and you later want to reset the mass.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Body.GetWorldPoint(Alt.Sketch.Vector2@)">
            <summary>
            Get the world coordinates of a point given the local coordinates.
            </summary>
            <param name="localPoint">A point on the body measured relative the the body's origin.</param>
            <returns>The same point expressed in world coordinates.</returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Body.GetWorldPoint(Alt.Sketch.Vector2)">
            <summary>
            Get the world coordinates of a point given the local coordinates.
            </summary>
            <param name="localPoint">A point on the body measured relative the the body's origin.</param>
            <returns>The same point expressed in world coordinates.</returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Body.GetWorldVector(Alt.Sketch.Vector2@)">
            <summary>
            Get the world coordinates of a vector given the local coordinates.
            Note that the vector only takes the rotation into account, not the position.
            </summary>
            <param name="localVector">A vector fixed in the body.</param>
            <returns>The same vector expressed in world coordinates.</returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Body.GetWorldVector(Alt.Sketch.Vector2)">
            <summary>
            Get the world coordinates of a vector given the local coordinates.
            </summary>
            <param name="localVector">A vector fixed in the body.</param>
            <returns>The same vector expressed in world coordinates.</returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Body.GetLocalPoint(Alt.Sketch.Vector2@)">
            <summary>
            Gets a local point relative to the body's origin given a world point.
            Note that the vector only takes the rotation into account, not the position.
            </summary>
            <param name="worldPoint">A point in world coordinates.</param>
            <returns>The corresponding local point relative to the body's origin.</returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Body.GetLocalPoint(Alt.Sketch.Vector2)">
            <summary>
            Gets a local point relative to the body's origin given a world point.
            </summary>
            <param name="worldPoint">A point in world coordinates.</param>
            <returns>The corresponding local point relative to the body's origin.</returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Body.GetLocalVector(Alt.Sketch.Vector2@)">
            <summary>
            Gets a local vector given a world vector.
            Note that the vector only takes the rotation into account, not the position.
            </summary>
            <param name="worldVector">A vector in world coordinates.</param>
            <returns>The corresponding local vector.</returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Body.GetLocalVector(Alt.Sketch.Vector2)">
            <summary>
            Gets a local vector given a world vector.
            Note that the vector only takes the rotation into account, not the position.
            </summary>
            <param name="worldVector">A vector in world coordinates.</param>
            <returns>The corresponding local vector.</returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Body.GetLinearVelocityFromWorldPoint(Alt.Sketch.Vector2)">
            <summary>
            Get the world linear velocity of a world point attached to this body.
            </summary>
            <param name="worldPoint">A point in world coordinates.</param>
            <returns>The world velocity of a point.</returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Body.GetLinearVelocityFromWorldPoint(Alt.Sketch.Vector2@)">
            <summary>
            Get the world linear velocity of a world point attached to this body.
            </summary>
            <param name="worldPoint">A point in world coordinates.</param>
            <returns>The world velocity of a point.</returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Body.GetLinearVelocityFromLocalPoint(Alt.Sketch.Vector2)">
            <summary>
            Get the world velocity of a local point.
            </summary>
            <param name="localPoint">A point in local coordinates.</param>
            <returns>The world velocity of a point.</returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Body.GetLinearVelocityFromLocalPoint(Alt.Sketch.Vector2@)">
            <summary>
            Get the world velocity of a local point.
            </summary>
            <param name="localPoint">A point in local coordinates.</param>
            <returns>The world velocity of a point.</returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Body.ShouldCollide(Alt.FarseerPhysics.Dynamics.Body)">
            <summary>
            This is used to prevent connected bodies from colliding.
            It may lie, depending on the collideConnected flag.
            </summary>
            <param name="other">The other body.</param>
            <returns></returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Body.Clone">
            <summary>
            Makes a clone of the body. Fixtures and therefore shapes are not included.
            Use DeepClone() to clone the body, as well as fixtures and shapes.
            </summary>
            <param name="world"></param>
            <returns></returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Body.DeepClone">
            <summary>
            Clones the body and all attached fixtures and shapes. Simply said, it makes a complete copy of the body.
            </summary>
            <param name="world"></param>
            <returns></returns>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Body.BodyId">
            <summary>
            A unique id for this body.
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Body.GravityScale">
            <summary>
            Scale the gravity applied to this body.
            Defaults to 1. A value of 2 means double the gravity is applied to this body.
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Body.UserData">
            <summary>
            Set the user data. Use this to store your application specific data.
            </summary>
            <value>The user data.</value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Body.Revolutions">
            <summary>
            Gets the total number revolutions the body has made.
            </summary>
            <value>The revolutions.</value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Body.BodyType">
            <summary>
            Gets or sets the body type.
            Warning: Calling this mid-update might cause a crash.
            </summary>
            <value>The type of body.</value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Body.LinearVelocity">
            <summary>
            Get or sets the linear velocity of the center of mass.
            </summary>
            <value>The linear velocity.</value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Body.AngularVelocity">
            <summary>
            Gets or sets the angular velocity. Radians/second.
            </summary>
            <value>The angular velocity.</value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Body.LinearDamping">
            <summary>
            Gets or sets the linear damping.
            </summary>
            <value>The linear damping.</value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Body.AngularDamping">
            <summary>
            Gets or sets the angular damping.
            </summary>
            <value>The angular damping.</value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Body.IsBullet">
            <summary>
            Gets or sets a value indicating whether this body should be included in the CCD solver.
            </summary>
            <value><c>true</c> if this instance is included in CCD; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Body.SleepingAllowed">
            <summary>
            You can disable sleeping on this body. If you disable sleeping, the
            body will be woken.
            </summary>
            <value><c>true</c> if sleeping is allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Body.Awake">
            <summary>
            Set the sleep state of the body. A sleeping body has very
            low CPU cost.
            </summary>
            <value><c>true</c> if awake; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Body.Enabled">
            <summary>
            Set the active state of the body. An inactive body is not
            simulated and cannot be collided with or woken up.
            If you pass a flag of true, all fixtures will be added to the
            broad-phase.
            If you pass a flag of false, all fixtures will be removed from
            the broad-phase and all contacts will be destroyed.
            Fixtures and joints are otherwise unaffected. You may continue
            to create/destroy fixtures and joints on inactive bodies.
            Fixtures on an inactive body are implicitly inactive and will
            not participate in collisions, ray-casts, or queries.
            Joints connected to an inactive body are implicitly inactive.
            An inactive body is still owned by a b2World object and remains
            in the body list.
            </summary>
            <value><c>true</c> if active; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Body.FixedRotation">
            <summary>
            Set this body to have fixed rotation. This causes the mass
            to be reset.
            </summary>
            <value><c>true</c> if it has fixed rotation; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Body.FixtureList">
            <summary>
            Gets all the fixtures attached to this body.
            </summary>
            <value>The fixture list.</value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Body.JointList">
            <summary>
            Get the list of all joints attached to this body.
            </summary>
            <value>The joint list.</value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Body.ContactList">
            <summary>
            Get the list of all contacts attached to this body.
            Warning: this list changes during the time step and you may
            miss some collisions if you don't use ContactListener.
            </summary>
            <value>The contact list.</value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Body.Position">
            <summary>
            Get the world body origin position.
            </summary>
            <returns>Return the world position of the body's origin.</returns>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Body.Rotation">
            <summary>
            Get the angle in radians.
            </summary>
            <returns>Return the current world rotation angle in radians.</returns>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Body.IsStatic">
            <summary>
            Gets or sets a value indicating whether this body is static.
            </summary>
            <value><c>true</c> if this instance is static; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Body.IsKinematic">
            <summary>
            Gets or sets a value indicating whether this body is kinematic.
            </summary>
            <value><c>true</c> if this instance is kinematic; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Body.IgnoreGravity">
            <summary>
            Gets or sets a value indicating whether this body ignores gravity.
            </summary>
            <value><c>true</c> if  it ignores gravity; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Body.WorldCenter">
            <summary>
            Get the world position of the center of mass.
            </summary>
            <value>The world position.</value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Body.LocalCenter">
            <summary>
            Get the local position of the center of mass.
            </summary>
            <value>The local position.</value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Body.Mass">
            <summary>
            Gets or sets the mass. Usually in kilograms (kg).
            </summary>
            <value>The mass.</value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Body.Inertia">
            <summary>
            Get or set the rotational inertia of the body about the local origin. usually in kg-m^2.
            </summary>
            <value>The inertia.</value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Body.IgnoreCCDWith">
            <summary>
            Body objects can define which categories of bodies they wish to ignore CCD with. 
            This allows certain bodies to be configured to ignore CCD with objects that
            aren't a penetration problem due to the way content has been prepared.
            This is compared against the other Body's fixture CollisionCategories within World.SolveTOI().
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Dynamics.BreakableBody">
            <summary>
            A type of body that supports multiple fixtures that can break apart.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Dynamics.BreakableBody.Strength">
            <summary>
            The force needed to break the body apart.
            Default: 500
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Dynamics.ContactManager.BeginContact">
            <summary>
            Fires when a contact is created
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Dynamics.ContactManager.ContactFilter">
            <summary>
            The filter used by the contact manager.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Dynamics.ContactManager.EndContact">
            <summary>
            Fires when a contact is deleted
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Dynamics.ContactManager.OnBroadphaseCollision">
            <summary>
            Fires when the broadphase detects that two Fixtures are close to each other.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Dynamics.ContactManager.PostSolve">
            <summary>
            Fires after the solver has run
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Dynamics.ContactManager.PreSolve">
            <summary>
            Fires before the solver runs
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Dynamics.Contacts.ContactEdge">
            <summary>
            A contact edge is used to connect bodies and contacts together
            in a contact graph where each body is a node and each contact
            is an edge. A contact edge belongs to a doubly linked list
            maintained in each attached body. Each contact has two contact
            nodes, one for each attached body.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Dynamics.Contacts.ContactEdge.Contact">
            <summary>
            The contact
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Dynamics.Contacts.ContactEdge.Next">
            <summary>
            The next contact edge in the body's contact list
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Dynamics.Contacts.ContactEdge.Other">
            <summary>
            Provides quick access to the other body attached.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Dynamics.Contacts.ContactEdge.Prev">
            <summary>
            The previous contact edge in the body's contact list
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Dynamics.Contacts.Contact">
            <summary>
            The class manages contact between two shapes. A contact exists for each overlapping
            AABB in the broad-phase (except if filtered). Therefore a contact object may exist
            that has no contact points.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Dynamics.Contacts.Contact.Manifold">
            <summary>
            Get the contact manifold. Do not modify the manifold unless you understand the
            internals of Box2D.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Contacts.Contact.GetWorldManifold(Alt.Sketch.Vector2@,Alt.FarseerPhysics.Common.FixedArray2{Alt.Sketch.Vector2}@)">
            <summary>
            Gets the world manifold.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Contacts.Contact.Update(Alt.FarseerPhysics.Dynamics.ContactManager)">
            <summary>
            Update the contact manifold and touching status.
            Note: do not assume the fixture AABBs are overlapping or are valid.
            </summary>
            <param name="contactManager">The contact manager.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Contacts.Contact.Evaluate(Alt.FarseerPhysics.Collision.Manifold@,Alt.FarseerPhysics.Common.Transform@,Alt.FarseerPhysics.Common.Transform@)">
            <summary>
            Evaluate this contact with your own manifold and transforms.   
            </summary>
            <param name="manifold">The manifold.</param>
            <param name="transformA">The first transform.</param>
            <param name="transformB">The second transform.</param>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Contacts.Contact.TangentSpeed">
            Get or set the desired tangent speed for a conveyor belt behavior. In meters per second.
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Contacts.Contact.Enabled">
            Enable/disable this contact. This can be used inside the pre-solve
            contact listener. The contact is only disabled for the current
            time step (or sub-step in continuous collisions).
            NOTE: If you are setting Enabled to a constant true or false,
            use the explicit Enable() or Disable() functions instead to 
            save the CPU from doing a branch operation.
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Contacts.Contact.ChildIndexA">
            <summary>
            Get the child primitive index for fixture A.
            </summary>
            <value>The child index A.</value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Contacts.Contact.ChildIndexB">
            <summary>
            Get the child primitive index for fixture B.
            </summary>
            <value>The child index B.</value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Contacts.Contact.IsTouching">
            <summary>
            Determines whether this contact is touching.
            </summary>
            <returns>
            	<c>true</c> if this instance is touching; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Contacts.ContactSolver.WorldManifold.Initialize(Alt.FarseerPhysics.Collision.Manifold@,Alt.FarseerPhysics.Common.Transform@,System.Double,Alt.FarseerPhysics.Common.Transform@,System.Double,Alt.Sketch.Vector2@,Alt.FarseerPhysics.Common.FixedArray2{Alt.Sketch.Vector2}@)">
            <summary>
            Evaluate the manifold with supplied transforms. This assumes
            modest motion from the original state. This does not change the
            point count, impulses, etc. The radii must come from the Shapes
            that generated the manifold.
            </summary>
            <param name="manifold">The manifold.</param>
            <param name="xfA">The transform for A.</param>
            <param name="radiusA">The radius for A.</param>
            <param name="xfB">The transform for B.</param>
            <param name="radiusB">The radius for B.</param>
            <param name="normal">World vector pointing from A to B</param>
            <param name="points">Torld contact point (point of intersection).</param>
        </member>
        <member name="T:Alt.FarseerPhysics.Dynamics.FixtureProxy">
            <summary>
            This proxy is used internally to connect fixtures to the broad-phase.
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Dynamics.Fixture">
            <summary>
            A fixture is used to attach a Shape to a body for collision detection. A fixture
            inherits its transform from its parent. Fixtures hold additional non-geometric data
            such as friction, collision filters, etc.
            Fixtures are created via Body.CreateFixture.
            Warning: You cannot reuse fixtures.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Dynamics.Fixture.AfterCollision">
            <summary>
            Fires after two shapes has collided and are solved. This gives you a chance to get the impact force.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Dynamics.Fixture.BeforeCollision">
            <summary>
            Fires when two fixtures are close to each other.
            Due to how the broadphase works, this can be quite inaccurate as shapes are approximated using AABBs.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Dynamics.Fixture.OnCollision">
            <summary>
            Fires when two shapes collide and a contact is created between them.
            Note that the first fixture argument is always the fixture that the delegate is subscribed to.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Dynamics.Fixture.OnSeparation">
            <summary>
            Fires when two shapes separate and a contact is removed between them.
            Note: This can in some cases be called multiple times, as a fixture can have multiple contacts.
            Note The first fixture argument is always the fixture that the delegate is subscribed to.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Fixture.RestoreCollisionWith(Alt.FarseerPhysics.Dynamics.Fixture)">
            <summary>
            Restores collisions between this fixture and the provided fixture.
            </summary>
            <param name="fixture">The fixture.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Fixture.IgnoreCollisionWith(Alt.FarseerPhysics.Dynamics.Fixture)">
            <summary>
            Ignores collisions between this fixture and the provided fixture.
            </summary>
            <param name="fixture">The fixture.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Fixture.IsFixtureIgnored(Alt.FarseerPhysics.Dynamics.Fixture)">
            <summary>
            Determines whether collisions are ignored between this fixture and the provided fixture.
            </summary>
            <param name="fixture">The fixture.</param>
            <returns>
            	<c>true</c> if the fixture is ignored; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Fixture.Refilter">
            <summary>
            Contacts are persistant and will keep being persistant unless they are
            flagged for filtering.
            This methods flags all contacts associated with the body for filtering.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Fixture.TestPoint(Alt.Sketch.Vector2@)">
            <summary>
            Test a point for containment in this fixture.
            </summary>
            <param name="point">A point in world coordinates.</param>
            <returns></returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Fixture.RayCast(Alt.FarseerPhysics.Collision.RayCastOutput@,Alt.FarseerPhysics.Collision.RayCastInput@,System.Int32)">
            <summary>
            Cast a ray against this Shape.
            </summary>
            <param name="output">The ray-cast results.</param>
            <param name="input">The ray-cast input parameters.</param>
            <param name="childIndex">Index of the child.</param>
            <returns></returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Fixture.GetAABB(Alt.FarseerPhysics.Collision.AABB@,System.Int32)">
            <summary>
            Get the fixture's AABB. This AABB may be enlarge and/or stale.
            If you need a more accurate AABB, compute it using the Shape and
            the body transform.
            </summary>
            <param name="aabb">The aabb.</param>
            <param name="childIndex">Index of the child.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Fixture.CompareTo(Alt.FarseerPhysics.Dynamics.Fixture)">
            <summary>
            Only compares the values of this fixture, and not the attached shape or body.
            This is used for deduplication in serialization only.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Fixture.CloneOnto(Alt.FarseerPhysics.Dynamics.Body)">
            <summary>
            Clones the fixture and attached shape onto the specified body.
            </summary>
            <param name="body">The body you wish to clone the fixture onto.</param>
            <returns>The cloned fixture.</returns>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Fixture.CollisionGroup">
            <summary>
            Defaults to 0
            
            If Settings.UseFPECollisionCategories is set to false:
            Collision groups allow a certain group of objects to never collide (negative)
            or always collide (positive). Zero means no collision group. Non-zero group
            filtering always wins against the mask bits.
            
            If Settings.UseFPECollisionCategories is set to true:
            If 2 fixtures are in the same collision group, they will not collide.
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Fixture.CollidesWith">
            <summary>
            Defaults to Category.All
            
            The collision mask bits. This states the categories that this
            fixture would accept for collision.
            Use Settings.UseFPECollisionCategories to change the behavior.
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Fixture.CollisionCategories">
            <summary>
            The collision categories this fixture is a part of.
            
            If Settings.UseFPECollisionCategories is set to false:
            Defaults to Category.Cat1
            
            If Settings.UseFPECollisionCategories is set to true:
            Defaults to Category.All
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Fixture.Shape">
            <summary>
            Get the child Shape. You can modify the child Shape, however you should not change the
            number of vertices because this will crash some collision caching mechanisms.
            </summary>
            <value>The shape.</value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Fixture.IsSensor">
            <summary>
            Gets or sets a value indicating whether this fixture is a sensor.
            </summary>
            <value><c>true</c> if this instance is a sensor; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Fixture.Body">
            <summary>
            Get the parent body of this fixture. This is null if the fixture is not attached.
            </summary>
            <value>The body.</value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Fixture.UserData">
            <summary>
            Set the user data. Use this to store your application specific data.
            </summary>
            <value>The user data.</value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Fixture.Friction">
            <summary>
            Set the coefficient of friction. This will _not_ change the friction of
            existing contacts.
            </summary>
            <value>The friction.</value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Fixture.Restitution">
            <summary>
            Set the coefficient of restitution. This will not change the restitution of
            existing contacts.
            </summary>
            <value>The restitution.</value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Fixture.FixtureId">
            <summary>
            Gets a unique ID for this fixture.
            </summary>
            <value>The fixture id.</value>
        </member>
        <member name="T:Alt.FarseerPhysics.Dynamics.Island">
            <summary>
            This is an internal class.
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Dynamics.Joints.AngleJoint">
            <summary>
            Maintains a fixed angle between two bodies
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Dynamics.Joints.Joint.Enabled">
            <summary>
            Indicate if this join is enabled or not. Disabling a joint
            means it is still in the simulation, but inactive.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Joints.Joint.#ctor(Alt.FarseerPhysics.Dynamics.Body)">
            <summary>
            Constructor for fixed joint
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Joints.Joint.GetReactionForce(System.Double)">
            <summary>
            Get the reaction force on body at the joint anchor in Newtons.
            </summary>
            <param name="invDt">The inverse delta time.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Joints.Joint.GetReactionTorque(System.Double)">
            <summary>
            Get the reaction torque on the body at the joint anchor in N*m.
            </summary>
            <param name="invDt">The inverse delta time.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Joints.Joint.IsFixedType">
            <summary>
            Return true if the joint is a fixed type.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Joints.Joint.SolvePositionConstraints(Alt.FarseerPhysics.Dynamics.SolverData@)">
            <summary>
            Solves the position constraints.
            </summary>
            <param name="data"></param>
            <returns>returns true if the position errors are within tolerance.</returns>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.Joint.JointType">
            <summary>
            Gets or sets the type of the joint.
            </summary>
            <value>The type of the joint.</value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.Joint.BodyA">
            <summary>
            Get the first body attached to this joint.
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.Joint.BodyB">
            <summary>
            Get the second body attached to this joint.
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.Joint.WorldAnchorA">
            <summary>
            Get the anchor point on bodyA in world coordinates.
            On some joints, this value indicate the anchor point within the world.
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.Joint.WorldAnchorB">
            <summary>
            Get the anchor point on bodyB in world coordinates.
            On some joints, this value indicate the anchor point within the world.
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.Joint.UserData">
            <summary>
            Set the user data pointer.
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.Joint.CollideConnected">
            <summary>
            Set this flag to true if the attached bodies should collide.
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.Joint.Breakpoint">
            <summary>
            The Breakpoint simply indicates the maximum Value the JointError can be before it breaks.
            The default value is double.MaxValue, which means it never breaks.
            </summary>
        </member>
        <member name="E:Alt.FarseerPhysics.Dynamics.Joints.Joint.Broke">
            <summary>
            Fires when the joint is broken.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Joints.AngleJoint.#ctor(Alt.FarseerPhysics.Dynamics.Body,Alt.FarseerPhysics.Dynamics.Body)">
            <summary>
            Constructor for AngleJoint
            </summary>
            <param name="bodyA">The first body</param>
            <param name="bodyB">The second body</param>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.AngleJoint.TargetAngle">
            <summary>
            The desired angle between BodyA and BodyB
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.AngleJoint.BiasFactor">
            <summary>
            Gets or sets the bias factor.
            Defaults to 0.2
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.AngleJoint.MaxImpulse">
            <summary>
            Gets or sets the maximum impulse
            Defaults to double.MaxValue
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.AngleJoint.Softness">
            <summary>
            Gets or sets the softness of the joint
            Defaults to 0
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Dynamics.Joints.DistanceJoint">
            <summary>
            A distance joint rains two points on two bodies
            to remain at a fixed distance from each other. You can view
            this as a massless, rigid rod.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Joints.DistanceJoint.#ctor(Alt.FarseerPhysics.Dynamics.Body,Alt.FarseerPhysics.Dynamics.Body,Alt.Sketch.Vector2,Alt.Sketch.Vector2)">
            <summary>
            This requires defining an
            anchor point on both bodies and the non-zero length of the
            distance joint. If you don't supply a length, the local anchor points
            is used so that the initial configuration can violate the constraint
            slightly. This helps when saving and loading a game.
            Warning Do not use a zero or short length.
            </summary>
            <param name="bodyA">The first body</param>
            <param name="bodyB">The second body</param>
            <param name="anchorA">The first body anchor</param>
            <param name="anchorB">The second body anchor</param>
            <param name="useWorldCoordinates">Set to true if you are using world coordinates as anchors.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Joints.DistanceJoint.GetReactionForce(System.Double)">
            <summary>
            Get the reaction force given the inverse time step. Unit is N.
            </summary>
            <param name="invDt"></param>
            <returns></returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Joints.DistanceJoint.GetReactionTorque(System.Double)">
            <summary>
            Get the reaction torque given the inverse time step.
            Unit is N*m. This is always zero for a distance joint.
            </summary>
            <param name="invDt"></param>
            <returns></returns>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.DistanceJoint.LocalAnchorA">
            <summary>
            The local anchor point relative to bodyA's origin.
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.DistanceJoint.LocalAnchorB">
            <summary>
            The local anchor point relative to bodyB's origin.
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.DistanceJoint.Length">
            <summary>
            The natural length between the anchor points.
            Manipulating the length can lead to non-physical behavior when the frequency is zero.
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.DistanceJoint.Frequency">
            <summary>
            The mass-spring-damper frequency in Hertz. A value of 0
            disables softness.
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.DistanceJoint.DampingRatio">
            <summary>
            The damping ratio. 0 = no damping, 1 = critical damping.
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Dynamics.Joints.FixedMouseJoint">
            <summary>
            A mouse joint is used to make a point on a body track a
            specified world point. This a soft constraint with a maximum
            force. This allows the constraint to stretch and without
            applying huge forces.
            NOTE: this joint is not documented in the manual because it was
            developed to be used in the testbed. If you want to learn how to
            use the mouse joint, look at the testbed.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Joints.FixedMouseJoint.#ctor(Alt.FarseerPhysics.Dynamics.Body,Alt.Sketch.Vector2)">
            <summary>
            This requires a world target point,
            tuning parameters, and the time step.
            </summary>
            <param name="body">The body.</param>
            <param name="worldAnchor">The target.</param>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.FixedMouseJoint.LocalAnchorA">
            <summary>
            The local anchor point on BodyA
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.FixedMouseJoint.MaxForce">
            <summary>
            The maximum constraint force that can be exerted
            to move the candidate body. Usually you will express
            as some multiple of the weight (multiplier * mass * gravity).
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.FixedMouseJoint.Frequency">
            <summary>
            The response speed.
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.FixedMouseJoint.DampingRatio">
            <summary>
            The damping ratio. 0 = no damping, 1 = critical damping.
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Dynamics.Joints.FrictionJoint">
            <summary>
            Friction joint. This is used for top-down friction.
            It provides 2D translational friction and angular friction.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Joints.FrictionJoint.#ctor(Alt.FarseerPhysics.Dynamics.Body,Alt.FarseerPhysics.Dynamics.Body,Alt.Sketch.Vector2)">
            <summary>
            Constructor for FrictionJoint.
            </summary>
            <param name="bodyA"></param>
            <param name="bodyB"></param>
            <param name="anchor"></param>
            <param name="useWorldCoordinates">Set to true if you are using world coordinates as anchors.</param>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.FrictionJoint.LocalAnchorA">
            <summary>
            The local anchor point on BodyA
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.FrictionJoint.LocalAnchorB">
            <summary>
            The local anchor point on BodyB
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.FrictionJoint.MaxForce">
            <summary>
            The maximum friction force in N.
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.FrictionJoint.MaxTorque">
            <summary>
            The maximum friction torque in N-m.
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Dynamics.Joints.GearJoint">
             <summary>
             A gear joint is used to connect two joints together.
             Either joint can be a revolute or prismatic joint.
             You specify a gear ratio to bind the motions together:
             <![CDATA[coordinate1 + ratio * coordinate2 = ant]]>
             The ratio can be negative or positive. If one joint is a revolute joint
             and the other joint is a prismatic joint, then the ratio will have units
             of length or units of 1/length.
            
             Warning: You have to manually destroy the gear joint if jointA or jointB is destroyed.
             </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Joints.GearJoint.#ctor(Alt.FarseerPhysics.Dynamics.Body,Alt.FarseerPhysics.Dynamics.Body,Alt.FarseerPhysics.Dynamics.Joints.Joint,Alt.FarseerPhysics.Dynamics.Joints.Joint)">
            <summary>
            Requires two existing revolute or prismatic joints (any combination will work).
            The provided joints must attach a dynamic body to a static body.
            </summary>
            <param name="jointA">The first joint.</param>
            <param name="jointB">The second joint.</param>
            <param name="ratio">The ratio.</param>
            <param name="bodyA">The first body</param>
            <param name="bodyB">The second body</param>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.GearJoint.Ratio">
            <summary>
            The gear ratio.
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.GearJoint.JointA">
            <summary>
            The first revolute/prismatic joint attached to the gear joint.
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.GearJoint.JointB">
            <summary>
            The second revolute/prismatic joint attached to the gear joint.
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Dynamics.Joints.JointEdge">
            <summary>
            A joint edge is used to connect bodies and joints together
            in a joint graph where each body is a node and each joint
            is an edge. A joint edge belongs to a doubly linked list
            maintained in each attached body. Each joint has two joint
            nodes, one for each attached body.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Dynamics.Joints.JointEdge.Joint">
            <summary>
            The joint.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Dynamics.Joints.JointEdge.Next">
            <summary>
            The next joint edge in the body's joint list.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Dynamics.Joints.JointEdge.Other">
            <summary>
            Provides quick access to the other body attached.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Dynamics.Joints.JointEdge.Prev">
            <summary>
            The previous joint edge in the body's joint list.
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Dynamics.Joints.MotorJoint">
            <summary>
            A motor joint is used to control the relative motion
            between two bodies. A typical usage is to control the movement
            of a dynamic body with respect to the ground.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Joints.MotorJoint.#ctor(Alt.FarseerPhysics.Dynamics.Body,Alt.FarseerPhysics.Dynamics.Body)">
            <summary>
            Constructor for MotorJoint.
            </summary>
            <param name="bodyA">The first body</param>
            <param name="bodyB">The second body</param>
            <param name="useWorldCoordinates">Set to true if you are using world coordinates as anchors.</param>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.MotorJoint.MaxForce">
            <summary>
            The maximum amount of force that can be applied to BodyA
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.MotorJoint.MaxTorque">
            <summary>
            The maximum amount of torque that can be applied to BodyA
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.MotorJoint.LinearOffset">
            <summary>
            The linear (translation) offset.
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.MotorJoint.AngularOffset">
            <summary>
            Get or set the angular offset.
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Dynamics.Joints.PrismaticJoint">
            <summary>
            A prismatic joint. This joint provides one degree of freedom: translation
            along an axis fixed in bodyA. Relative rotation is prevented. You can
            use a joint limit to restrict the range of motion and a joint motor to
            drive the motion or to model joint friction.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Joints.PrismaticJoint.#ctor(Alt.FarseerPhysics.Dynamics.Body,Alt.FarseerPhysics.Dynamics.Body,Alt.Sketch.Vector2,Alt.Sketch.Vector2,Alt.Sketch.Vector2)">
            <summary>
            This requires defining a line of
            motion using an axis and an anchor point. The definition uses local
            anchor points and a local axis so that the initial configuration
            can violate the constraint slightly. The joint translation is zero
            when the local anchor points coincide in world space. Using local
            anchors and a local axis helps when saving and loading a game.
            </summary>
            <param name="bodyA">The first body.</param>
            <param name="bodyB">The second body.</param>
            <param name="anchorA">The first body anchor.</param>
            <param name="anchorB">The second body anchor.</param>
            <param name="axis">The axis.</param>
            <param name="useWorldCoordinates">Set to true if you are using world coordinates as anchors.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Joints.PrismaticJoint.SetLimits(System.Double,System.Double)">
            <summary>
            Set the joint limits, usually in meters.
            </summary>
            <param name="lower">The lower limit</param>
            <param name="upper">The upper limit</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Joints.PrismaticJoint.GetMotorForce(System.Double)">
            <summary>
            Gets the motor force.
            </summary>
            <param name="invDt">The inverse delta time</param>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.PrismaticJoint.LocalAnchorA">
            <summary>
            The local anchor point on BodyA
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.PrismaticJoint.LocalAnchorB">
            <summary>
            The local anchor point on BodyB
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.PrismaticJoint.JointTranslation">
            <summary>
            Get the current joint translation, usually in meters.
            </summary>
            <value></value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.PrismaticJoint.JointSpeed">
            <summary>
            Get the current joint translation speed, usually in meters per second.
            </summary>
            <value></value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.PrismaticJoint.LimitEnabled">
            <summary>
            Is the joint limit enabled?
            </summary>
            <value><c>true</c> if [limit enabled]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.PrismaticJoint.LowerLimit">
            <summary>
            Get the lower joint limit, usually in meters.
            </summary>
            <value></value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.PrismaticJoint.UpperLimit">
            <summary>
            Get the upper joint limit, usually in meters.
            </summary>
            <value></value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.PrismaticJoint.MotorEnabled">
            <summary>
            Is the joint motor enabled?
            </summary>
            <value><c>true</c> if [motor enabled]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.PrismaticJoint.MotorSpeed">
            <summary>
            Set the motor speed, usually in meters per second.
            </summary>
            <value>The speed.</value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.PrismaticJoint.MaxMotorForce">
            <summary>
            Set the maximum motor force, usually in N.
            </summary>
            <value>The force.</value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.PrismaticJoint.MotorImpulse">
            <summary>
            Get the current motor impulse, usually in N.
            </summary>
            <value></value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.PrismaticJoint.Axis">
            <summary>
            The axis at which the joint moves.
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.PrismaticJoint.LocalXAxis">
            <summary>
            The axis in local coordinates relative to BodyA
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.PrismaticJoint.ReferenceAngle">
            <summary>
            The reference angle.
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Dynamics.Joints.PulleyJoint">
            <summary>
            The pulley joint is connected to two bodies and two fixed world points.
            The pulley supports a ratio such that:
            <![CDATA[length1 + ratio * length2 <= constant]]>
            Yes, the force transmitted is scaled by the ratio.
            
            Warning: the pulley joint can get a bit squirrelly by itself. They often
            work better when combined with prismatic joints. You should also cover the
            the anchor points with static shapes to prevent one side from going to zero length.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Joints.PulleyJoint.#ctor(Alt.FarseerPhysics.Dynamics.Body,Alt.FarseerPhysics.Dynamics.Body,Alt.Sketch.Vector2,Alt.Sketch.Vector2,Alt.Sketch.Vector2,Alt.Sketch.Vector2,System.Double)">
            <summary>
            Constructor for PulleyJoint.
            </summary>
            <param name="bodyA">The first body.</param>
            <param name="bodyB">The second body.</param>
            <param name="anchorA">The anchor on the first body.</param>
            <param name="anchorB">The anchor on the second body.</param>
            <param name="worldAnchorA">The world anchor for the first body.</param>
            <param name="worldAnchorB">The world anchor for the second body.</param>
            <param name="ratio">The ratio.</param>
            <param name="useWorldCoordinates">Set to true if you are using world coordinates as anchors.</param>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.PulleyJoint.LocalAnchorA">
            <summary>
            The local anchor point on BodyA
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.PulleyJoint.LocalAnchorB">
            <summary>
            The local anchor point on BodyB
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.PulleyJoint.WorldAnchorA">
            <summary>
            Get the first world anchor.
            </summary>
            <value></value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.PulleyJoint.WorldAnchorB">
            <summary>
            Get the second world anchor.
            </summary>
            <value></value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.PulleyJoint.LengthA">
            <summary>
            Get the current length of the segment attached to body1.
            </summary>
            <value></value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.PulleyJoint.LengthB">
            <summary>
            Get the current length of the segment attached to body2.
            </summary>
            <value></value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.PulleyJoint.CurrentLengthA">
            <summary>
            The current length between the anchor point on BodyA and WorldAnchorA
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.PulleyJoint.CurrentLengthB">
            <summary>
            The current length between the anchor point on BodyB and WorldAnchorB
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.PulleyJoint.Ratio">
            <summary>
            Get the pulley ratio.
            </summary>
            <value></value>
        </member>
        <member name="T:Alt.FarseerPhysics.Dynamics.Joints.RevoluteJoint">
            <summary>
            A revolute joint constrains to bodies to share a common point while they
            are free to rotate about the point. The relative rotation about the shared
            point is the joint angle. You can limit the relative rotation with
            a joint limit that specifies a lower and upper angle. You can use a motor
            to drive the relative rotation about the shared point. A maximum motor torque
            is provided so that infinite forces are not generated.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Joints.RevoluteJoint.#ctor(Alt.FarseerPhysics.Dynamics.Body,Alt.FarseerPhysics.Dynamics.Body,Alt.Sketch.Vector2,Alt.Sketch.Vector2)">
            <summary>
            Constructor of RevoluteJoint. 
            </summary>
            <param name="bodyA">The first body.</param>
            <param name="bodyB">The second body.</param>
            <param name="anchorA">The first body anchor.</param>
            <param name="anchorB">The second anchor.</param>
            <param name="useWorldCoordinates">Set to true if you are using world coordinates as anchors.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Joints.RevoluteJoint.#ctor(Alt.FarseerPhysics.Dynamics.Body,Alt.FarseerPhysics.Dynamics.Body,Alt.Sketch.Vector2)">
            <summary>
            Constructor of RevoluteJoint. 
            </summary>
            <param name="bodyA">The first body.</param>
            <param name="bodyB">The second body.</param>
            <param name="anchor">The shared anchor.</param>
            <param name="useWorldCoordinates"></param>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Joints.RevoluteJoint.SetLimits(System.Double,System.Double)">
            <summary>
            Set the joint limits, usually in meters.
            </summary>
            <param name="lower">The lower limit</param>
            <param name="upper">The upper limit</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Joints.RevoluteJoint.GetMotorTorque(System.Double)">
            <summary>
            Gets the motor torque in N-m.
            </summary>
            <param name="invDt">The inverse delta time</param>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.RevoluteJoint.LocalAnchorA">
            <summary>
            The local anchor point on BodyA
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.RevoluteJoint.LocalAnchorB">
            <summary>
            The local anchor point on BodyB
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.RevoluteJoint.ReferenceAngle">
            <summary>
            The referance angle computed as BodyB angle minus BodyA angle.
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.RevoluteJoint.JointAngle">
            <summary>
            Get the current joint angle in radians.
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.RevoluteJoint.JointSpeed">
            <summary>
            Get the current joint angle speed in radians per second.
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.RevoluteJoint.LimitEnabled">
            <summary>
            Is the joint limit enabled?
            </summary>
            <value><c>true</c> if [limit enabled]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.RevoluteJoint.LowerLimit">
            <summary>
            Get the lower joint limit in radians.
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.RevoluteJoint.UpperLimit">
            <summary>
            Get the upper joint limit in radians.
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.RevoluteJoint.MotorEnabled">
            <summary>
            Is the joint motor enabled?
            </summary>
            <value><c>true</c> if [motor enabled]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.RevoluteJoint.MotorSpeed">
            <summary>
            Get or set the motor speed in radians per second.
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.RevoluteJoint.MaxMotorTorque">
            <summary>
            Get or set the maximum motor torque, usually in N-m.
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.RevoluteJoint.MotorImpulse">
            <summary>
            Get or set the current motor impulse, usually in N-m.
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Dynamics.Joints.RopeJoint">
            <summary>
            A rope joint enforces a maximum distance between two points on two bodies. It has no other effect.
            It can be used on ropes that are made up of several connected bodies, and if there is a need to support a heavy body.
            This joint is used for stabiliation of heavy objects on soft constraint joints.
            
            Warning: if you attempt to change the maximum length during the simulation you will get some non-physical behavior.
            Use the DistanceJoint instead if you want to dynamically control the length.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Joints.RopeJoint.#ctor(Alt.FarseerPhysics.Dynamics.Body,Alt.FarseerPhysics.Dynamics.Body,Alt.Sketch.Vector2,Alt.Sketch.Vector2)">
            <summary>
            Constructor for RopeJoint.
            </summary>
            <param name="bodyA">The first body</param>
            <param name="bodyB">The second body</param>
            <param name="anchorA">The anchor on the first body</param>
            <param name="anchorB">The anchor on the second body</param>
            <param name="useWorldCoordinates">Set to true if you are using world coordinates as anchors.</param>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.RopeJoint.LocalAnchorA">
            <summary>
            The local anchor point on BodyA
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.RopeJoint.LocalAnchorB">
            <summary>
            The local anchor point on BodyB
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.RopeJoint.MaxLength">
            <summary>
            Get or set the maximum length of the rope.
            By default, it is the distance between the two anchor points.
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.RopeJoint.State">
            <summary>
            Gets the state of the joint.
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Dynamics.Joints.WeldJoint">
            <summary>
            A weld joint essentially glues two bodies together. A weld joint may
            distort somewhat because the island constraint solver is approximate.
            
            The joint is soft constraint based, which means the two bodies will move
            relative to each other, when a force is applied. To combine two bodies
            in a rigid fashion, combine the fixtures to a single body instead.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Joints.WeldJoint.#ctor(Alt.FarseerPhysics.Dynamics.Body,Alt.FarseerPhysics.Dynamics.Body,Alt.Sketch.Vector2,Alt.Sketch.Vector2)">
            <summary>
            You need to specify an anchor point where they are attached.
            The position of the anchor point is important for computing the reaction torque.
            </summary>
            <param name="bodyA">The first body</param>
            <param name="bodyB">The second body</param>
            <param name="anchorA">The first body anchor.</param>
            <param name="anchorB">The second body anchor.</param>
            <param name="useWorldCoordinates">Set to true if you are using world coordinates as anchors.</param>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.WeldJoint.LocalAnchorA">
            <summary>
            The local anchor point on BodyA
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.WeldJoint.LocalAnchorB">
            <summary>
            The local anchor point on BodyB
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.WeldJoint.ReferenceAngle">
            <summary>
            The bodyB angle minus bodyA angle in the reference state (radians).
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.WeldJoint.FrequencyHz">
            <summary>
            The frequency of the joint. A higher frequency means a stiffer joint, but
            a too high value can cause the joint to oscillate.
            Default is 0, which means the joint does no spring calculations.
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.WeldJoint.DampingRatio">
            <summary>
            The damping on the joint. The damping is only used when
            the joint has a frequency (> 0). A higher value means more damping.
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Dynamics.Joints.WheelJoint">
            <summary>
            A wheel joint. This joint provides two degrees of freedom: translation
            along an axis fixed in bodyA and rotation in the plane. You can use a
            joint limit to restrict the range of motion and a joint motor to drive
            the rotation or to model rotational friction.
            This joint is designed for vehicle suspensions.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Joints.WheelJoint.#ctor(Alt.FarseerPhysics.Dynamics.Body,Alt.FarseerPhysics.Dynamics.Body,Alt.Sketch.Vector2,Alt.Sketch.Vector2)">
            <summary>
            Constructor for WheelJoint
            </summary>
            <param name="bodyA">The first body</param>
            <param name="bodyB">The second body</param>
            <param name="anchor">The anchor point</param>
            <param name="axis">The axis</param>
            <param name="useWorldCoordinates">Set to true if you are using world coordinates as anchors.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.Joints.WheelJoint.GetMotorTorque(System.Double)">
            <summary>
            Gets the torque of the motor
            </summary>
            <param name="invDt">inverse delta time</param>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.WheelJoint.LocalAnchorA">
            <summary>
            The local anchor point on BodyA
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.WheelJoint.LocalAnchorB">
            <summary>
            The local anchor point on BodyB
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.WheelJoint.Axis">
            <summary>
            The axis at which the suspension moves.
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.WheelJoint.LocalXAxis">
            <summary>
            The axis in local coordinates relative to BodyA
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.WheelJoint.MotorSpeed">
            <summary>
            The desired motor speed in radians per second.
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.WheelJoint.MaxMotorTorque">
            <summary>
            The maximum motor torque, usually in N-m.
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.WheelJoint.Frequency">
            <summary>
            Suspension frequency, zero indicates no suspension
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.WheelJoint.DampingRatio">
            <summary>
            Suspension damping ratio, one indicates critical damping
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.WheelJoint.JointTranslation">
            <summary>
            Gets the translation along the axis
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.WheelJoint.JointSpeed">
            <summary>
            Gets the angular velocity of the joint
            </summary>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.Joints.WheelJoint.MotorEnabled">
            <summary>
            Enable/disable the joint motor.
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Dynamics.TimeStep">
            <summary>
            This is an internal structure.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Dynamics.TimeStep.dt">
            <summary>
            Time step (Delta time)
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Dynamics.TimeStep.dtRatio">
            <summary>
            dt * inv_dt0
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Dynamics.TimeStep.inv_dt">
            <summary>
            Inverse time step (0 if dt == 0).
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Dynamics.Position">
            This is an internal structure.
        </member>
        <member name="T:Alt.FarseerPhysics.Dynamics.Velocity">
            This is an internal structure.
        </member>
        <member name="T:Alt.FarseerPhysics.Dynamics.SolverData">
            Solver Data
        </member>
        <member name="T:Alt.FarseerPhysics.Dynamics.World">
            <summary>
            The world class manages all physics entities, dynamic simulation,
            and asynchronous queries.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Dynamics.World.BodyAdded">
            <summary>
            Fires whenever a body has been added
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Dynamics.World.BodyRemoved">
            <summary>
            Fires whenever a body has been removed
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Dynamics.World.FixtureAdded">
            <summary>
            Fires whenever a fixture has been added
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Dynamics.World.FixtureRemoved">
            <summary>
            Fires whenever a fixture has been removed
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Dynamics.World.JointAdded">
            <summary>
            Fires whenever a joint has been added
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Dynamics.World.JointRemoved">
            <summary>
            Fires whenever a joint has been removed
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Dynamics.World.ControllerAdded">
            <summary>
            Fires every time a controller is added to the World.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Dynamics.World.ControllerRemoved">
            <summary>
            Fires every time a controlelr is removed form the World.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.World.#ctor(Alt.Sketch.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.FarseerPhysics.Dynamics.World"/> class.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Dynamics.World.Gravity">
            <summary>
            Change the global gravity vector.
            </summary>
            <value>The gravity.</value>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.World.AddBody(Alt.FarseerPhysics.Dynamics.Body)">
            <summary>
            Add a rigid body.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.World.RemoveBody(Alt.FarseerPhysics.Dynamics.Body)">
            <summary>
            Destroy a rigid body.
            Warning: This automatically deletes all associated shapes and joints.
            </summary>
            <param name="body">The body.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.World.AddJoint(Alt.FarseerPhysics.Dynamics.Joints.Joint)">
            <summary>
            Create a joint to constrain bodies together. This may cause the connected bodies to cease colliding.
            </summary>
            <param name="joint">The joint.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.World.RemoveJoint(Alt.FarseerPhysics.Dynamics.Joints.Joint)">
            <summary>
            Destroy a joint. This may cause the connected bodies to begin colliding.
            </summary>
            <param name="joint">The joint.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.World.ProcessChanges">
            <summary>
            All adds and removes are cached by the World duing a World step.
            To process the changes before the world updates again, call this method.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.World.Step(System.Double)">
            <summary>
            Take a time step. This performs collision detection, integration,
            and consraint solution.
            </summary>
            <param name="dt">The amount of time to simulate, this should not vary.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.World.ClearForces">
            <summary>
            Call this after you are done with time steps to clear the forces. You normally
            call this after each call to Step, unless you are performing sub-steps. By default,
            forces will be automatically cleared, so you don't need to call this function.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.World.QueryAABB(Alt.Func{Alt.FarseerPhysics.Dynamics.Fixture,System.Boolean},Alt.FarseerPhysics.Collision.AABB@)">
            <summary>
            Query the world for all fixtures that potentially overlap the provided AABB.
            
            Inside the callback:
            Return true: Continues the query
            Return false: Terminate the query
            </summary>
            <param name="callback">A user implemented callback class.</param>
            <param name="aabb">The aabb query box.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.World.QueryAABB(Alt.FarseerPhysics.Collision.AABB@)">
            <summary>
            Query the world for all fixtures that potentially overlap the provided AABB.
            Use the overload with a callback for filtering and better performance.
            </summary>
            <param name="aabb">The aabb query box.</param>
            <returns>A list of fixtures that were in the affected area.</returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.World.RayCast(Alt.Func{Alt.FarseerPhysics.Dynamics.Fixture,Alt.Sketch.Vector2,Alt.Sketch.Vector2,System.Double,System.Double},Alt.Sketch.Vector2,Alt.Sketch.Vector2)">
            <summary>
            Ray-cast the world for all fixtures in the path of the ray. Your callback
            controls whether you get the closest point, any point, or n-points.
            The ray-cast ignores shapes that contain the starting point.
            
            Inside the callback:
            return -1: ignore this fixture and continue
            return 0: terminate the ray cast
            return fraction: clip the ray to this point
            return 1: don't clip the ray and continue
            </summary>
            <param name="callback">A user implemented callback class.</param>
            <param name="point1">The ray starting point.</param>
            <param name="point2">The ray ending point.</param>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.World.TestPointAll(Alt.Sketch.Vector2)">
            <summary>
            Returns a list of fixtures that are at the specified point.
            </summary>
            <param name="point">The point.</param>
            <returns></returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Dynamics.World.ShiftOrigin(Alt.Sketch.Vector2)">
            Shift the world origin. Useful for large worlds.
            The body shift formula is: position -= newOrigin
            @param newOrigin the new origin with respect to the old origin
            Warning: Calling this method mid-update might cause a crash.
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.World.ProxyCount">
            <summary>
            Get the number of broad-phase proxies.
            </summary>
            <value>The proxy count.</value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.World.ContactManager">
            <summary>
            Get the contact manager for testing.
            </summary>
            <value>The contact manager.</value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.World.BodyList">
            <summary>
            Get the world body list.
            </summary>
            <value>Thehead of the world body list.</value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.World.JointList">
            <summary>
            Get the world joint list. 
            </summary>
            <value>The joint list.</value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.World.ContactList">
            <summary>
            Get the world contact list. With the returned contact, use Contact.GetNext to get
            the next contact in the world list. A null contact indicates the end of the list.
            </summary>
            <value>The head of the world contact list.</value>
        </member>
        <member name="P:Alt.FarseerPhysics.Dynamics.World.Enabled">
            <summary>
            If false, the whole simulation stops. It still processes added and removed geometries.
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Dynamics.EndContactDelegate">
            <summary>
            This delegate is called when a contact is deleted
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Dynamics.BeginContactDelegate">
            <summary>
            This delegate is called when a contact is created
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Factories.FixtureFactory">
            <summary>
            An easy to use factory for creating bodies
            </summary>
        </member>
        <member name="T:Alt.FarseerPhysics.Factories.JointFactory">
            <summary>
            An easy to use factory for using joints.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Factories.LinkFactory.CreateChain(Alt.FarseerPhysics.Dynamics.World,Alt.Sketch.Vector2,Alt.Sketch.Vector2,System.Double,System.Double,System.Int32,System.Double,System.Boolean)">
            <summary>
            Creates a chain.
            </summary>
            <param name="world">The world.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="linkWidth">The width.</param>
            <param name="linkHeight">The height.</param>
            <param name="numberOfLinks">The number of links.</param>
            <param name="linkDensity">The link density.</param>
            <param name="attachRopeJoint">Creates a rope joint between start and end. This enforces the length of the rope. Said in another way: it makes the rope less bouncy.</param>
            <returns></returns>
        </member>
        <member name="F:Alt.FarseerPhysics.Settings.AllCollisionCallbacksAgree">
            <summary>
            If true, all collision callbacks have to return the same value, and agree
            if there was a collision or not. Swtich this to false to revert to the 
            collision agreement used in FPE 3.3.x
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Settings.EnableDiagnostics">
            <summary>
            Enabling diagnistics causes the engine to gather timing information.
            You can see how much time it took to solve the contacts, solve CCD
            and update the controllers.
            NOTE: If you are using a debug view that shows performance counters,
            you might want to enable this.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Settings.SkipSanityChecks">
            <summary>
            Set this to true to skip sanity checks in the engine. This will speed up the
            tools by removing the overhead of the checks, but you will need to handle checks
            yourself where it is needed.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Settings.MaxSubSteps">
            <summary>
            Maximum number of sub-steps per contact in continuous physics simulation.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Settings.EnableWarmstarting">
            <summary>
            Enable/Disable warmstarting
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Settings.MaxManifoldPoints">
            <summary>
            The maximum number of contact points between two convex shapes.
            DO NOT CHANGE THIS VALUE!
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Settings.AABBExtension">
            <summary>
            This is used to fatten AABBs in the dynamic tree. This allows proxies
            to move by a small amount without triggering a tree adjustment.
            This is in meters.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Settings.AABBMultiplier">
            <summary>
            This is used to fatten AABBs in the dynamic tree. This is used to predict
            the future position based on the current displacement.
            This is a dimensionless multiplier.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Settings.LinearSlop">
            <summary>
            A small length used as a collision and constraint tolerance. Usually it is
            chosen to be numerically significant, but visually insignificant.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Settings.AngularSlop">
            <summary>
            A small angle used as a collision and constraint tolerance. Usually it is
            chosen to be numerically significant, but visually insignificant.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Settings.PolygonRadius">
            <summary>
            The radius of the polygon/edge shape skin. This should not be modified. Making
            this smaller means polygons will have an insufficient buffer for continuous collision.
            Making it larger may create artifacts for vertex collision.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Settings.MaxTOIContacts">
            <summary>
            Maximum number of contacts to be handled to solve a TOI impact.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Settings.VelocityThreshold">
            <summary>
            A velocity threshold for elastic collisions. Any collision with a relative linear
            velocity below this threshold will be treated as inelastic.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Settings.MaxLinearCorrection">
            <summary>
            The maximum linear position correction used when solving constraints. This helps to
            prevent overshoot.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Settings.MaxAngularCorrection">
            <summary>
            The maximum angular position correction used when solving constraints. This helps to
            prevent overshoot.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Settings.Baumgarte">
            <summary>
            This scale factor controls how fast overlap is resolved. Ideally this would be 1 so
            that overlap is removed in one time step. However using values close to 1 often lead
            to overshoot.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Settings.TimeToSleep">
            <summary>
            The time that a body must be still before it will go to sleep.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Settings.LinearSleepTolerance">
            <summary>
            A body cannot sleep if its linear velocity is above this tolerance.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Settings.AngularSleepTolerance">
            <summary>
            A body cannot sleep if its angular velocity is above this tolerance.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Settings.MaxTranslation">
            <summary>
            The maximum linear velocity of a body. This limit is very large and is used
            to prevent numerical problems. You shouldn't need to adjust this.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Settings.MaxRotation">
            <summary>
            The maximum angular velocity of a body. This limit is very large and is used
            to prevent numerical problems. You shouldn't need to adjust this.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Settings.MaxGJKIterations">
            <summary>
            Defines the maximum number of iterations made by the GJK algorithm.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Settings.EnableSubStepping">
            <summary>
            This is only for debugging the solver
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Settings.AutoClearForces">
            <summary>
            By default, forces are cleared automatically after each call to Step.
            The default behavior is modified with this setting.
            The purpose of this setting is to support sub-stepping. Sub-stepping is often used to maintain
            a fixed sized time step under a variable frame-rate.
            When you perform sub-stepping you should disable auto clearing of forces and instead call
            ClearForces after all sub-steps are complete in one pass of your game loop.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Settings.VelocityIterations">
            <summary>
            The number of velocity iterations used in the solver.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Settings.PositionIterations">
            <summary>
            The number of position iterations used in the solver.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Settings.ContinuousPhysics">
            <summary>
            Enable/Disable Continuous Collision Detection (CCD)
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Settings.UseConvexHullPolygons">
            <summary>
            If true, it will run a GiftWrap convex hull on all polygon inputs.
            This makes for a more stable engine when given random input,
            but if speed of the creation of polygons are more important,
            you might want to set this to false.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Settings.TOIVelocityIterations">
            <summary>
            The number of velocity iterations in the TOI solver
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Settings.TOIPositionIterations">
            <summary>
            The number of position iterations in the TOI solver
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Settings.AllowSleep">
            <summary>
            Enable/Disable sleeping
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Settings.MaxPolygonVertices">
            <summary>
            The maximum number of vertices on a convex polygon.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Settings.UseFPECollisionCategories">
            <summary>
            Farseer Physics Engine has a different way of filtering fixtures than Box2d.
            We have both FPE and Box2D filtering in the engine. If you are upgrading
            from earlier versions of FPE, set this to true and DefaultFixtureCollisionCategories
            to Category.All.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Settings.DefaultFixtureCollisionCategories">
            <summary>
            This is used by the Fixture constructor as the default value 
            for Fixture.CollisionCategories member. Note that you may need to change this depending
            on the setting of UseFPECollisionCategories, above.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Settings.DefaultFixtureCollidesWith">
            <summary>
            This is used by the Fixture constructor as the default value 
            for Fixture.CollidesWith member.
            </summary>
        </member>
        <member name="F:Alt.FarseerPhysics.Settings.DefaultFixtureIgnoreCCDWith">
            <summary>
            This is used by the Fixture constructor as the default value 
            for Fixture.IgnoreCCDWith member.
            </summary>
        </member>
        <member name="M:Alt.FarseerPhysics.Settings.MixFriction(System.Double,System.Double)">
            <summary>
            Friction mixing law. Feel free to customize this.
            </summary>
            <param name="friction1">The friction1.</param>
            <param name="friction2">The friction2.</param>
            <returns></returns>
        </member>
        <member name="M:Alt.FarseerPhysics.Settings.MixRestitution(System.Double,System.Double)">
            <summary>
            Restitution mixing law. Feel free to customize this.
            </summary>
            <param name="restitution1">The restitution1.</param>
            <param name="restitution2">The restitution2.</param>
            <returns></returns>
        </member>
        <member name="T:Alt.Sketch.GMap.NET.AltSketchImage">
            <summary>
            image abstraction
            </summary>
        </member>
        <member name="T:GMap.NET.PureImage">
            <summary>
            image abstraction
            </summary>
        </member>
        <member name="T:Alt.Sketch.GMap.NET.AltSketchImageProxy">
            <summary>
            image abstraction proxy
            </summary>
        </member>
        <member name="T:GMap.NET.PureImageProxy">
            <summary>
            image abstraction proxy
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.DoubleBufferedControl">
            <summary>
            DoubleBufferedControl control.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.Label">
            <summary>
            Static text label.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.Base">
            <summary>
            Base control class.
            </summary>
        </member>
        <member name="F:Alt.GUI.Temporary.Gwen.Control.Base.m_ActualParent">
            <summary>
            This is the panel's actual parent - most likely the logical 
            parent's InnerPanel (if it has one). You should rarely need this.
            </summary>
        </member>
        <member name="F:Alt.GUI.Temporary.Gwen.Control.Base.m_InnerPanel">
            <summary>
            If the innerpanel exists our children will automatically become children of that 
            instead of us - allowing us to move them all around by moving that panel (useful for scrolling etc).
            </summary>
        </member>
        <member name="F:Alt.GUI.Temporary.Gwen.Control.Base.m_Children">
            <summary>
            double list of children.
            </summary>
        </member>
        <member name="F:Alt.GUI.Temporary.Gwen.Control.Base.m_Accelerators">
            <summary>
            Accelerator map.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.Base"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.DelayedDelete">
            <summary>
            Detaches the control from canvas and adds to the deletion queue (processed in Canvas.DoThink).
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.GetCanvas">
            <summary>
            Gets the canvas (root parent) of the control.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.Enable">
            <summary>
            Enables the control.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.Disable">
            <summary>
            Disables the control.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.DefaultAcceleratorHandler(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Default accelerator handler.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.OnAccelerator">
            <summary>
            Default accelerator handler.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.Hide">
            <summary>
            Hides the control.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.Show">
            <summary>
            Shows the control.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.SetToolTipText(System.String)">
            <summary>
            Creates a tooltip for the control.
            </summary>
            <param name="text">Tooltip text.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.InvalidateChildren">
            <summary>
            Invalidates the control's children (relayout/repaint).
            </summary>
            <param name="recursive">Determines whether the operation should be carried recursively.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.Invalidate">
            <summary>
            Invalidates the control.
            </summary>
            <remarks>
            Causes layout, repaint, invalidates cached texture.
            </remarks>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.SendToBack">
            <summary>
            Sends the control to the bottom of paren't visibility stack.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.BringToFront">
            <summary>
            Brings the control to the top of paren't visibility stack.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.FindChildByName(System.String)">
            <summary>
            Finds a child by name.
            </summary>
            <param name="name">Child name.</param>
            <param name="recursive">Determines whether the search should be recursive.</param>
            <returns>Found control or null.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.AddChild(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Attaches specified control as a child of this one.
            </summary>
            <remarks>
            If InnerPanel is not null, it will become the parent.
            </remarks>
            <param name="child">Control to be added as a child.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.RemoveChild(Alt.GUI.Temporary.Gwen.Control.Base,System.Boolean)">
            <summary>
            Detaches specified control from this one.
            </summary>
            <param name="child">Child to be removed.</param>
            <param name="dispose">Determines whether the child should be disposed (added to delayed delete queue).</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.DeleteAllChildren">
            <summary>
            Removes all children (and disposes them).
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.OnChildAdded(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Handler invoked when a child is added.
            </summary>
            <param name="child">Child added.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.OnChildRemoved(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Handler invoked when a child is removed.
            </summary>
            <param name="child">Child removed.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.MoveBy(System.Int32,System.Int32)">
            <summary>
            Moves the control by a specific amount.
            </summary>
            <param name="x">X-axis movement.</param>
            <param name="y">Y-axis movement.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.MoveTo(System.Single,System.Single)">
            <summary>
            Moves the control to a specific point.
            </summary>
            <param name="x">Target x coordinate.</param>
            <param name="y">Target y coordinate.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.MoveTo(System.Int32,System.Int32)">
            <summary>
            Moves the control to a specific point, clamping on paren't bounds if RestrictToParent is set.
            </summary>
            <param name="x">Target x coordinate.</param>
            <param name="y">Target y coordinate.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.SetPosition(System.Single,System.Single)">
            <summary>
            Sets the control position.
            </summary>
            <param name="x">Target x coordinate.</param>
            <param name="y">Target y coordinate.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.SetPosition(System.Int32,System.Int32)">
            <summary>
            Sets the control position.
            </summary>
            <param name="x">Target x coordinate.</param>
            <param name="y">Target y coordinate.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.SetSize(System.Int32,System.Int32)">
            <summary>
            Sets the control size.
            </summary>
            <param name="width">New width.</param>
            <param name="height">New height.</param>
            <returns>True if bounds changed.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.SetBounds(Alt.Sketch.RectI)">
            <summary>
            Sets the control bounds.
            </summary>
            <param name="bounds">New bounds.</param>
            <returns>True if bounds changed.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.SetBounds(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the control bounds.
            </summary>
            <param name="x">X.</param>
            <param name="y">Y.</param>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
            <returns>
            True if bounds changed.
            </returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the control bounds.
            </summary>
            <param name="x">X position.</param>
            <param name="y">Y position.</param>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
            <returns>
            True if bounds changed.
            </returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.Position(Alt.GUI.Temporary.Gwen.Pos)">
            <summary>
            Positions the control inside its parent.
            </summary>
            <param name="pos">Target position.</param>
            <param name="xpadding">X padding.</param>
            <param name="ypadding">Y padding.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.OnBoundsChanged(Alt.Sketch.RectI)">
            <summary>
            Handler invoked when control's bounds change.
            </summary>
            <param name="oldBounds">Old bounds.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.OnScaleChanged">
            <summary>
            Handler invoked when control's scale changes.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.OnChildBoundsChanged(Alt.Sketch.RectI,Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Handler invoked when control children's bounds change.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.DoCacheRender(Alt.GUI.Temporary.Gwen.Skin.Base,Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Renders the control to a cache using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
            <param name="master">Root parent.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.DoRender(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Rendering logic implementation.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.RenderRecursive(Alt.GUI.Temporary.Gwen.Skin.Base,Alt.Sketch.RectI)">
            <summary>
            Recursive rendering logic.
            </summary>
            <param name="skin">Skin to use.</param>
            <param name="clipRect">Clipping rectangle.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.SetSkin(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Sets the control's skin.
            </summary>
            <param name="skin">New skin.</param>
            <param name="doChildren">Deterines whether to change children skin.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.OnSkinChanged(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Handler invoked when control's skin changes.
            </summary>
            <param name="newSkin">New skin.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.OnMouseWheeled(System.Int32)">
            <summary>
            Handler invoked on mouse wheel event.
            </summary>
            <param name="delta">Scroll delta.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.InputMouseWheeled(System.Int32)">
            <summary>
            Invokes mouse wheeled event (used by input system).
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.OnMouseMoved(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Handler invoked on mouse moved event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="dx">X change.</param>
            <param name="dy">Y change.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.InputMouseMoved(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Invokes mouse moved event (used by input system).
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.OnMouseClickedLeft(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Handler invoked on mouse click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="down">If set to <c>true</c> mouse button is down.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.InputMouseClickedLeft(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Invokes left mouse click event (used by input system).
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.OnMouseClickedRight(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Handler invoked on mouse click (right) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="down">If set to <c>true</c> mouse button is down.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.InputMouseClickedRight(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Invokes right mouse click event (used by input system).
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.OnMouseClickedMiddle(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Handler invoked on mouse click (middle) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="down">If set to <c>true</c> mouse button is down.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.InputMouseClickedMiddle(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Invokes middle mouse click event (used by input system).
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.OnMouseDoubleClickedLeft(System.Int32,System.Int32)">
            <summary>
            Handler invoked on mouse double click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.InputMouseDoubleClickedLeft(System.Int32,System.Int32)">
            <summary>
            Invokes left double mouse click event (used by input system).
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.OnMouseDoubleClickedRight(System.Int32,System.Int32)">
            <summary>
            Handler invoked on mouse double click (right) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.InputMouseDoubleClickedRight(System.Int32,System.Int32)">
            <summary>
            Invokes right double mouse click event (used by input system).
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.OnMouseDoubleClickedMiddle(System.Int32,System.Int32)">
            <summary>
            Handler invoked on mouse double click (middle) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.InputMouseDoubleClickedMiddle(System.Int32,System.Int32)">
            <summary>
            Invokes middle double mouse click event (used by input system).
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.OnMouseEntered">
            <summary>
            Handler invoked on mouse cursor entering control's bounds.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.InputMouseEntered">
            <summary>
            Invokes mouse enter event (used by input system).
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.OnMouseLeft">
            <summary>
            Handler invoked on mouse cursor leaving control's bounds.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.InputMouseLeft">
            <summary>
            Invokes mouse leave event (used by input system).
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.Focus">
            <summary>
            Focuses the control.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.Blur">
            <summary>
            Unfocuses the control.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.Touch">
            <summary>
            Control has been clicked - invoked by input system. Windows use it to propagate activation.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.GetControlAt(System.Int32,System.Int32)">
            <summary>
            Gets a child by its coordinates.
            </summary>
            <param name="x">Child X.</param>
            <param name="y">Child Y.</param>
            <returns>Control or null if not found.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.Layout(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.RecurseLayout(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Recursively lays out the control's interior according to alignment, margin, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.IsChild(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Checks if the given control is a child of this instance.
            </summary>
            <param name="child">Control to examine.</param>
            <returns>True if the control is out child.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.LocalPosToCanvas(Alt.Sketch.PointI)">
            <summary>
            Converts local coordinates to canvas coordinates.
            </summary>
            <param name="pnt">Local coordinates.</param>
            <returns>Canvas coordinates.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.CanvasPosToLocal(Alt.Sketch.PointI)">
            <summary>
            Converts canvas coordinates to local coordinates.
            </summary>
            <param name="pnt">Canvas coordinates.</param>
            <returns>Local coordinates.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.CloseMenus">
            <summary>
            Closes all menus recursively.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.UpdateRenderBounds">
            <summary>
            Copies Bounds to RenderBounds.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.UpdateCursor">
            <summary>
            Sets mouse cursor to current cursor.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.SizeToChildren">
            <summary>
            Resizes the control to fit its children.
            </summary>
            <param name="width">Determines whether to change control's width.</param>
            <param name="height">Determines whether to change control's height.</param>
            <returns>True if bounds changed.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.GetChildrenSize">
            <summary>
            Returns the total width and height of all children.
            </summary>
            <remarks>Default implementation returns maximum size of children since the layout is unknown.
            Implement this in derived compound controls to properly return their size.</remarks>
            <returns></returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.HandleAccelerator(System.String)">
            <summary>
            Handles keyboard accelerator.
            </summary>
            <param name="accelerator">Accelerator text.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.AddAccelerator(System.String,Alt.GUI.Temporary.Gwen.Control.Base.GwenEventHandler)">
            <summary>
            Adds keyboard accelerator.
            </summary>
            <param name="accelerator">Accelerator text.</param>
            <param name="handler">Handler.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.AddAccelerator(System.String)">
            <summary>
            Adds keyboard accelerator with a default handler.
            </summary>
            <param name="accelerator">Accelerator text.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.PostLayout(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Function invoked after layout.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.Redraw">
            <summary>
            Re-renders the control, invalidates cached texture.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.UpdateColors">
            <summary>
            Updates control colors.
            </summary>
            <remarks>
            Used in composite controls like lists to differentiate row colors etc.
            </remarks>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.InvalidateParent">
            <summary>
            Invalidates control's parent.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.OnKeyPressed(Alt.GUI.Keys)">
            <summary>
            Handler for keyboard events.
            </summary>
            <param name="key">Key pressed.</param>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.InputKeyPressed(Alt.GUI.Keys)">
            <summary>
            Invokes key press event (used by input system).
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.OnKeyReleaseed(Alt.GUI.Keys)">
            <summary>
            Handler for keyboard events.
            </summary>
            <param name="key">Key pressed.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.OnKeyTab(System.Boolean)">
            <summary>
            Handler for Tab keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.OnKeySpace(System.Boolean)">
            <summary>
            Handler for Space keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.OnKeyReturn(System.Boolean)">
            <summary>
            Handler for Return keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.OnKeyBackspace(System.Boolean)">
            <summary>
            Handler for Backspace keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.OnKeyDelete(System.Boolean)">
            <summary>
            Handler for Delete keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.OnKeyRight(System.Boolean)">
            <summary>
            Handler for Right Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.OnKeyLeft(System.Boolean)">
            <summary>
            Handler for Left Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.OnKeyHome(System.Boolean)">
            <summary>
            Handler for Home keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.OnKeyEnd(System.Boolean)">
            <summary>
            Handler for End keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.OnKeyUp(System.Boolean)">
            <summary>
            Handler for Up Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.OnKeyDown(System.Boolean)">
            <summary>
            Handler for Down Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.OnKeyEscape(System.Boolean)">
            <summary>
            Handler for Escape keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.OnPaste(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Handler for Paste event.
            </summary>
            <param name="from">Source control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.OnCopy(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Handler for Copy event.
            </summary>
            <param name="from">Source control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.OnCut(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Handler for Cut event.
            </summary>
            <param name="from">Source control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.OnSelectAll(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Handler for Select All event.
            </summary>
            <param name="from">Source control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.RenderFocus(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the focus overlay.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.RenderUnder(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders under the actual control (shadows etc).
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.RenderOver(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders over the actual control (overlays).
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.Think">
            <summary>
            Called during rendering.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.OnKeyboardFocus">
            <summary>
            Handler for gaining keyboard focus.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.OnLostKeyboardFocus">
            <summary>
            Handler for losing keyboard focus.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Base.OnChar(System.Char)">
            <summary>
            Handler for character input event.
            </summary>
            <param name="chr">Character typed.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.Base.HoverEnter">
            <summary>
            Invoked when mouse pointer enters the control.
            </summary>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.Base.HoverLeave">
            <summary>
            Invoked when mouse pointer leaves the control.
            </summary>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.Base.BoundsChanged">
            <summary>
            Invoked when control's bounds have been changed.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Base.Children">
            <summary>
            Logical list of children. If InnerPanel is not null, returns InnerPanel's children.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Base.Parent">
            <summary>
            The logical parent. It's usually what you expect, the control you've parented it to.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Base.Dock">
            <summary>
            Dock position.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Base.Skin">
            <summary>
            Current skin.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Base.ToolTip">
            <summary>
            Current tooltip.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Base.IsMenuComponent">
            <summary>
            Indicates whether this control is a menu component.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Base.ShouldClip">
            <summary>
            Determines whether the control should be clipped to its bounds while rendering.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Base.Padding">
            <summary>
            Current padding - inner spacing.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Base.Margin">
            <summary>
            Current margin - outer spacing.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Base.IsOnTop">
            <summary>
            Indicates whether the control is on top of its parent's children.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Base.UserData">
            <summary>
            User data associated with the control.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Base.IsHovered">
            <summary>
            Indicates whether the control is hovered by mouse pointer.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Base.HasFocus">
            <summary>
            Indicates whether the control has focus.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Base.IsDisabled">
            <summary>
            Indicates whether the control is disabled.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Base.IsHidden">
            <summary>
            Indicates whether the control is hidden.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Base.RestrictToParent">
            <summary>
            Determines whether the control's position should be restricted to parent's bounds.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Base.MouseInputEnabled">
            <summary>
            Determines whether the control receives mouse input events.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Base.KeyboardInputEnabled">
            <summary>
            Determines whether the control receives keyboard input events.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Base.Cursor">
            <summary>
            Gets or sets the mouse cursor when the cursor is hovering the control.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Base.IsTabable">
            <summary>
            Indicates whether the control is tabable (can be focused by pressing Tab).
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Base.ShouldDrawBackground">
            <summary>
            Indicates whether control's background should be drawn during rendering.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Base.ShouldCacheToTexture">
            <summary>
            Indicates whether the renderer should cache drawing to a texture to improve performance (at the cost of memory).
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Base.Name">
            <summary>
            Gets or sets the control's internal name.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Base.Bounds">
            <summary>
            Control's size and position relative to the parent.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Base.RenderBounds">
            <summary>
            Bounds for the renderer.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Base.InnerBounds">
            <summary>
            Bounds adjusted by padding.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Base.MinimumSize">
            <summary>
            Size restriction.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Base.MaximumSize">
            <summary>
            Size restriction.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Base.ShouldDrawHover">
            <summary>
            Determines whether hover should be drawn during rendering.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Base.IsVisible">
            <summary>
            Indicates whether the control and its parents are visible.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Base.X">
            <summary>
            Leftmost coordinate of the control.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Base.Y">
            <summary>
            Topmost coordinate of the control.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Base.DrawDebugOutlines">
            <summary>
            Determines whether margin, padding and bounds outlines for the control will be drawn. Applied recursively to all children.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.Base.GwenEventHandler">
            <summary>
            Delegate used for all control event handlers.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Label.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.Label"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Label.GetClosestCharacter(System.Int32,System.Int32)">
            <summary>
            Returns index of the character closest to specified point (in canvas coordinates).
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Label.SetTextPosition(System.Int32,System.Int32)">
            <summary>
            Sets the position of the internal text control.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Label.OnTextChanged">
            <summary>
            Handler for text changed event.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Label.Layout(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Label.SetText(System.String)">
            <summary>
            Sets the label text.
            </summary>
            <param name="str">Text to set.</param>
            <param name="doEvents">Determines whether to invoke "text changed" event.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Label.GetCharacterPosition(System.Int32)">
            <summary>
            Gets the coordinates of specified character.
            </summary>
            <param name="index">Character index.</param>
            <returns>Character coordinates (local).</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Label.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Label.Alignment">
            <summary>
            Text alignment.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Label.Text">
            <summary>
            Text.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Label.Font">
            <summary>
            Font.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Label.TextColor">
            <summary>
            Text color.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Label.TextColorOverride">
            <summary>
            Override text color (used by tooltips).
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Label.TextOverride">
            <summary>
            Text override - used to display different string.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Label.TextWidth">
            <summary>
            Width of the text (in pixels).
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Label.TextHeight">
            <summary>
            Height of the text (in pixels).
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Label.TextLength">
            <summary>
            Text length (in characters).
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Label.AutoSizeToContents">
            <summary>
            Determines if the control should autosize to its text.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Label.TextPadding">
            <summary>
            Text padding.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.DoubleBufferedControl.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            DoubleBufferedControl constructor.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="T:Alt.Sketch.GMap.NET.GMapControl">
            <summary>
            GMap.NET control for Windows Forms
            </summary>   
        </member>
        <member name="F:Alt.Sketch.GMap.NET.GMapControl.Overlays">
            <summary>
            list of overlays, should be thread safe
            </summary>
        </member>
        <member name="F:Alt.Sketch.GMap.NET.GMapControl.EmptyTileText">
            <summary>
            text on empty tiles
            </summary>
        </member>
        <member name="F:Alt.Sketch.GMap.NET.GMapControl.EmptyTileBorders">
            <summary>
            pen for empty tile borders
            </summary>
        </member>
        <member name="F:Alt.Sketch.GMap.NET.GMapControl.ScalePen">
            <summary>
            pen for scale info
            </summary>
        </member>
        <member name="F:Alt.Sketch.GMap.NET.GMapControl.SelectionPen">
            <summary>
            area selection pen
            </summary>
        </member>
        <member name="F:Alt.Sketch.GMap.NET.GMapControl.MapScaleInfoEnabled">
            <summary>
            show map scale info
            </summary>
        </member>
        <member name="F:Alt.Sketch.GMap.NET.GMapControl.FillEmptyTiles">
            <summary>
            enables filling empty tiles using lower level images
            </summary>
        </member>
        <member name="F:Alt.Sketch.GMap.NET.GMapControl.DisableAltForSelection">
            <summary>
            if true, selects area just by holding mouse and moving
            </summary>
        </member>
        <member name="F:Alt.Sketch.GMap.NET.GMapControl.DragButton">
            <summary>
            map dragg button
            </summary>
        </member>
        <member name="F:Alt.Sketch.GMap.NET.GMapControl.selectedArea">
            <summary>
            current selected area in map
            </summary>
        </member>
        <member name="F:Alt.Sketch.GMap.NET.GMapControl.BoundsOfMap">
            <summary>
            map boundaries
            </summary>
        </member>
        <member name="F:Alt.Sketch.GMap.NET.GMapControl.ForceDoubleBuffer">
            <summary>
            enables integrated DoubleBuffer for running on windows mobile
            </summary>
        </member>
        <member name="F:Alt.Sketch.GMap.NET.GMapControl.HoldInvalidation">
            <summary>
            stops immediate marker/route/polygon invalidations;
            call Refresh to perform single refresh and reset invalidation state
            </summary>
        </member>
        <member name="M:Alt.Sketch.GMap.NET.GMapControl.Refresh">
            <summary>
            call this to stop HoldInvalidation and perform single forced instant refresh 
            </summary>
        </member>
        <member name="M:Alt.Sketch.GMap.NET.GMapControl.Invalidate">
            <summary>
            enque built-in thread safe invalidation
            </summary>
        </member>
        <member name="M:Alt.Sketch.GMap.NET.GMapControl.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            construct
            </summary>
        </member>
        <member name="M:Alt.Sketch.GMap.NET.GMapControl.ForceUpdateOverlays">
            <summary>
            update objects when map is draged/zoomed
            </summary>
        </member>
        <member name="M:Alt.Sketch.GMap.NET.GMapControl.DrawMap(Alt.Sketch.Graphics)">
            <summary>
            render map in GDI+
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Alt.Sketch.GMap.NET.GMapControl.UpdateMarkerLocalPosition(Alt.Sketch.GMap.NET.GMapMarker)">
            <summary>
            updates markers local position
            </summary>
            <param name="marker"></param>
        </member>
        <member name="M:Alt.Sketch.GMap.NET.GMapControl.UpdateRouteLocalPosition(Alt.Sketch.GMap.NET.GMapRoute)">
            <summary>
            updates routes local position
            </summary>
            <param name="route"></param>
        </member>
        <member name="M:Alt.Sketch.GMap.NET.GMapControl.UpdatePolygonLocalPosition(Alt.Sketch.GMap.NET.GMapPolygon)">
            <summary>
            updates polygons local position
            </summary>
            <param name="polygon"></param>
        </member>
        <member name="M:Alt.Sketch.GMap.NET.GMapControl.SetZoomToFitRect(GMap.NET.RectLatLng)">
            <summary>
            sets zoom to max to fit rect
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:Alt.Sketch.GMap.NET.GMapControl.ZoomAndCenterMarkers(System.String)">
            <summary>
            sets to max zoom to fit all markers and centers them in map
            </summary>
            <param name="overlayId">overlay id or null to check all</param>
            <returns></returns>
        </member>
        <member name="M:Alt.Sketch.GMap.NET.GMapControl.ZoomAndCenterRoutes(System.String)">
            <summary>
            zooms and centers all route
            </summary>
            <param name="overlayId">overlay id or null to check all</param>
            <returns></returns>
        </member>
        <member name="M:Alt.Sketch.GMap.NET.GMapControl.ZoomAndCenterRoute(GMap.NET.MapRoute)">
            <summary>
            zooms and centers route 
            </summary>
            <param name="route"></param>
            <returns></returns>
        </member>
        <member name="M:Alt.Sketch.GMap.NET.GMapControl.GetRectOfAllMarkers(System.String)">
            <summary>
            gets rectangle with all objects inside
            </summary>
            <param name="overlayId">overlay id or null to check all</param>
            <returns></returns>
        </member>
        <member name="M:Alt.Sketch.GMap.NET.GMapControl.GetRectOfAllRoutes(System.String)">
            <summary>
            gets rectangle with all objects inside
            </summary>
            <param name="overlayId">overlay id or null to check all</param>
            <returns></returns>
        </member>
        <member name="M:Alt.Sketch.GMap.NET.GMapControl.GetRectOfRoute(GMap.NET.MapRoute)">
            <summary>
            gets rect of route
            </summary>
            <param name="route"></param>
            <returns></returns>
        </member>
        <member name="M:Alt.Sketch.GMap.NET.GMapControl.Offset(System.Int32,System.Int32)">
            <summary>
            offset position in pixels
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Alt.Sketch.GMap.NET.GMapControl.UpdateRotationMatrix">
            <summary>
            updates rotation matrix
            </summary>
        </member>
        <member name="M:Alt.Sketch.GMap.NET.GMapControl.OnPaintOverlays(Alt.Sketch.Graphics)">
            <summary>
            override, to render something more
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Alt.Sketch.GMap.NET.GMapControl.ApplyRotationInversion(System.Int32,System.Int32)">
            <summary>
            apply transformation if in rotation mode
            </summary>
        </member>
        <member name="M:Alt.Sketch.GMap.NET.GMapControl.ApplyRotation(System.Int32,System.Int32)">
            <summary>
            apply transformation if in rotation mode
            </summary>
        </member>
        <member name="F:Alt.Sketch.GMap.NET.GMapControl.DragSize">
            <summary>
            Gets the width and height of a rectangle centered on the point the mouse
            button was pressed, within which a drag operation will not begin.
            </summary>
        </member>
        <member name="F:Alt.Sketch.GMap.NET.GMapControl.DisableFocusOnMouseEnter">
            <summary>
            prevents focusing map if mouse enters it's area
            </summary>
        </member>
        <member name="F:Alt.Sketch.GMap.NET.GMapControl.InvertedMouseWheelZooming">
            <summary>
            reverses MouseWheel zooming direction
            </summary>
        </member>
        <member name="F:Alt.Sketch.GMap.NET.GMapControl.IgnoreMarkerOnMouseWheel">
            <summary>
            lets you zoom by MouseWheel even when pointer is in area of marker
            </summary>
        </member>
        <!-- Некорректный комментарий в формате XML для члена "M:Alt.Sketch.GMap.NET.GMapControl.ReloadMap" проигнорирован -->
        <member name="M:Alt.Sketch.GMap.NET.GMapControl.SetPositionByKeywords(System.String)">
            <summary>
            set current position using keywords
            </summary>
            <param name="keys"></param>
            <returns>true if successfull</returns>
        </member>
        <member name="M:Alt.Sketch.GMap.NET.GMapControl.FromLocalToLatLng(System.Int32,System.Int32)">
            <summary>
            gets world coordinate from local control coordinate 
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Alt.Sketch.GMap.NET.GMapControl.FromLatLngToLocal(GMap.NET.PointLatLng)">
            <summary>
            gets local coordinate from world coordinate
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="E:Alt.Sketch.GMap.NET.GMapControl.OnMarkerClick">
            <summary>
            occurs when clicked on marker
            </summary>
        </member>
        <member name="E:Alt.Sketch.GMap.NET.GMapControl.OnPolygonClick">
            <summary>
            occurs when clicked on polygon
            </summary>
        </member>
        <member name="E:Alt.Sketch.GMap.NET.GMapControl.OnRouteClick">
            <summary>
            occurs when clicked on route
            </summary>
        </member>
        <member name="E:Alt.Sketch.GMap.NET.GMapControl.OnRouteEnter">
            <summary>
            occurs on mouse enters route area
            </summary>
        </member>
        <member name="E:Alt.Sketch.GMap.NET.GMapControl.OnRouteLeave">
            <summary>
            occurs on mouse leaves route area
            </summary>
        </member>
        <member name="E:Alt.Sketch.GMap.NET.GMapControl.OnSelectionChange">
            <summary>
            occurs when mouse selection is changed
            </summary>        
        </member>
        <member name="E:Alt.Sketch.GMap.NET.GMapControl.OnMarkerEnter">
            <summary>
            occurs on mouse enters marker area
            </summary>
        </member>
        <member name="E:Alt.Sketch.GMap.NET.GMapControl.OnMarkerLeave">
            <summary>
            occurs on mouse leaves marker area
            </summary>
        </member>
        <member name="E:Alt.Sketch.GMap.NET.GMapControl.OnPolygonEnter">
            <summary>
            occurs on mouse enters Polygon area
            </summary>
        </member>
        <member name="E:Alt.Sketch.GMap.NET.GMapControl.OnPolygonLeave">
            <summary>
            occurs on mouse leaves Polygon area
            </summary>
        </member>
        <member name="P:Alt.Sketch.GMap.NET.GMapControl.MaxZoom">
            <summary>
            max zoom
            </summary>         
        </member>
        <member name="P:Alt.Sketch.GMap.NET.GMapControl.MinZoom">
            <summary>
            min zoom
            </summary>      
        </member>
        <member name="P:Alt.Sketch.GMap.NET.GMapControl.MouseWheelZoomType">
            <summary>
            map zooming type for mouse wheel
            </summary>
        </member>
        <member name="P:Alt.Sketch.GMap.NET.GMapControl.SelectedAreaFillColor">
            <summary>
            background of selected area
            </summary>
        </member>
        <member name="P:Alt.Sketch.GMap.NET.GMapControl.HelperLineOption">
            <summary>
            draw lines at the mouse pointer position
            </summary>
        </member>
        <member name="P:Alt.Sketch.GMap.NET.GMapControl.EmptyTileColor">
            <summary>
            color of empty tile background
            </summary>
        </member>
        <member name="P:Alt.Sketch.GMap.NET.GMapControl.RetryLoadTile">
            <summary>
            retry count to get tile 
            </summary>
        </member>
        <member name="P:Alt.Sketch.GMap.NET.GMapControl.LevelsKeepInMemmory">
            <summary>
            how many levels of tiles are staying decompresed in memory
            </summary>
        </member>
        <member name="P:Alt.Sketch.GMap.NET.GMapControl.ShowTileGridLines">
            <summary>
            shows tile gridlines
            </summary>
        </member>
        <member name="P:Alt.Sketch.GMap.NET.GMapControl.IsRotated">
            <summary>
            returs true if map bearing is not zero
            </summary>    
        </member>
        <member name="P:Alt.Sketch.GMap.NET.GMapControl.Bearing">
            <summary>
            bearing for rotation of the map
            </summary>
        </member>
        <member name="P:Alt.Sketch.GMap.NET.GMapControl.VirtualSizeEnabled">
            <summary>
            shrinks map area, useful just for testing
            </summary>
        </member>
        <member name="P:Alt.Sketch.GMap.NET.GMapControl.ZoomStep">
            <summary>
            map zoom level
            </summary>
        </member>
        <member name="P:Alt.Sketch.GMap.NET.GMapControl.Position">
            <summary>
            current map center position
            </summary>
        </member>
        <member name="P:Alt.Sketch.GMap.NET.GMapControl.PositionPixel">
            <summary>
            current position in pixel coordinates
            </summary>
        </member>
        <member name="P:Alt.Sketch.GMap.NET.GMapControl.CacheLocation">
            <summary>
            location of cache
            </summary>
        </member>
        <member name="P:Alt.Sketch.GMap.NET.GMapControl.IsDragging">
            <summary>
            is user dragging map
            </summary>
        </member>
        <member name="P:Alt.Sketch.GMap.NET.GMapControl.IsMouseOverMarker">
            <summary>
            is mouse over marker
            </summary>
        </member>
        <member name="P:Alt.Sketch.GMap.NET.GMapControl.IsMouseOverRoute">
            <summary>
            is mouse over route
            </summary>
        </member>
        <member name="P:Alt.Sketch.GMap.NET.GMapControl.IsMouseOverPolygon">
            <summary>
            is mouse over polygon
            </summary>
        </member>
        <member name="P:Alt.Sketch.GMap.NET.GMapControl.ViewArea">
            <summary>
            gets current map view top/left coordinate, width in Lng, height in Lat
            </summary>
        </member>
        <member name="P:Alt.Sketch.GMap.NET.GMapControl.RoutesEnabled">
            <summary>
            is routes enabled
            </summary>
        </member>
        <member name="P:Alt.Sketch.GMap.NET.GMapControl.PolygonsEnabled">
            <summary>
            is polygons enabled
            </summary>
        </member>
        <member name="P:Alt.Sketch.GMap.NET.GMapControl.MarkersEnabled">
            <summary>
            is markers enabled
            </summary>
        </member>
        <member name="P:Alt.Sketch.GMap.NET.GMapControl.CanDragMap">
            <summary>
            can user drag map
            </summary>
        </member>
        <member name="P:Alt.Sketch.GMap.NET.GMapControl.Manager">
            <summary>
            gets map manager
            </summary>
        </member>
        <member name="E:Alt.Sketch.GMap.NET.GMapControl.OnPositionChanged">
            <summary>
            occurs when current position is changed
            </summary>
        </member>
        <member name="E:Alt.Sketch.GMap.NET.GMapControl.OnTileLoadComplete">
            <summary>
            occurs when tile set load is complete
            </summary>
        </member>
        <member name="E:Alt.Sketch.GMap.NET.GMapControl.OnTileLoadStart">
            <summary>
            occurs when tile set is starting to load
            </summary>
        </member>
        <member name="E:Alt.Sketch.GMap.NET.GMapControl.OnMapDrag">
            <summary>
            occurs on map drag
            </summary>
        </member>
        <member name="E:Alt.Sketch.GMap.NET.GMapControl.OnMapZoomChanged">
            <summary>
            occurs on map zoom changed
            </summary>
        </member>
        <member name="E:Alt.Sketch.GMap.NET.GMapControl.OnMapTypeChanged">
            <summary>
            occures on map type changed
            </summary>
        </member>
        <member name="E:Alt.Sketch.GMap.NET.GMapControl.OnEmptyTileError">
            <summary>
            occurs on empty tile displayed
            </summary>
        </member>
        <member name="F:Alt.Sketch.GMap.NET.ScaleModes.Integer">
            <summary>
            no scaling
            </summary>
        </member>
        <member name="F:Alt.Sketch.GMap.NET.ScaleModes.Fractional">
            <summary>
            scales to fractional level, CURRENT VERSION DOESN'T HANDLE OBJECT POSITIONS CORRECLTY, 
            http://greatmaps.codeplex.com/workitem/16046
            </summary>
        </member>
        <member name="T:Alt.Sketch.GMap.NET.GMapMarker">
            <summary>
            GMap.NET marker
            </summary>
        </member>
        <member name="F:Alt.Sketch.GMap.NET.GMapMarker.DisableRegionCheck">
            <summary>
            if true, marker will be rendered even if it's outside current view
            </summary>
        </member>
        <member name="F:Alt.Sketch.GMap.NET.GMapMarker.IsHitTestVisible">
            <summary>
            can maker receive input
            </summary>
        </member>
        <member name="M:Alt.Sketch.GMap.NET.GMapMarker.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:Alt.Sketch.GMap.NET.GMapMarker.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.Sketch.GMap.NET.GMapMarker"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Alt.Sketch.GMap.NET.GMapMarker.LocalPosition">
            <summary>
            marker position in local coordinates, internal only, do not set it manualy
            </summary>
        </member>
        <member name="P:Alt.Sketch.GMap.NET.GMapMarker.ToolTipPosition">
            <summary>
            ToolTip position in local coordinates
            </summary>
        </member>
        <member name="P:Alt.Sketch.GMap.NET.GMapMarker.IsVisible">
            <summary>
            is marker visible
            </summary>
        </member>
        <member name="P:Alt.Sketch.GMap.NET.GMapMarker.IsMouseOver">
            <summary>
            is mouse over marker
            </summary>
        </member>
        <member name="T:Alt.Sketch.GMap.NET.MarkerTooltipMode">
            <summary>
            modeof tooltip
            </summary>
        </member>
        <member name="T:Alt.Sketch.GMap.NET.GMapOverlay">
            <summary>
            GMap.NET overlay
            </summary>
        </member>
        <member name="F:Alt.Sketch.GMap.NET.GMapOverlay.Id">
            <summary>
            overlay Id
            </summary>
        </member>
        <member name="F:Alt.Sketch.GMap.NET.GMapOverlay.Markers">
            <summary>
            list of markers, should be thread safe
            </summary>
        </member>
        <member name="F:Alt.Sketch.GMap.NET.GMapOverlay.Routes">
            <summary>
            list of routes, should be thread safe
            </summary>
        </member>
        <member name="F:Alt.Sketch.GMap.NET.GMapOverlay.Polygons">
            <summary>
            list of polygons, should be thread safe
            </summary>
        </member>
        <member name="M:Alt.Sketch.GMap.NET.GMapOverlay.ForceUpdate">
            <summary>
            updates local positions of objects
            </summary>
        </member>
        <member name="M:Alt.Sketch.GMap.NET.GMapOverlay.OnRender(Alt.Sketch.Graphics)">
            <summary>
            renders objects/routes/polygons
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Alt.Sketch.GMap.NET.GMapOverlay.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:Alt.Sketch.GMap.NET.GMapOverlay.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.Sketch.GMap.NET.GMapOverlay"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Alt.Sketch.GMap.NET.GMapOverlay.OnDeserialization(System.Object)">
            <summary>
            Runs when the entire object graph has been deserialized.
            </summary>
            <param name="sender">The object that initiated the callback. The functionality for this parameter is not currently implemented.</param>
        </member>
        <member name="P:Alt.Sketch.GMap.NET.GMapOverlay.IsVisibile">
            <summary>
            is overlay visible
            </summary>
        </member>
        <member name="T:Alt.Sketch.GMap.NET.GMapPolygon">
            <summary>
            GMap.NET polygon
            </summary>
        </member>
        <member name="T:GMap.NET.MapRoute">
            <summary>
            represents route of map
            </summary>
        </member>
        <member name="F:GMap.NET.MapRoute.Points">
            <summary>
            points of route
            </summary>
        </member>
        <member name="F:GMap.NET.MapRoute.Name">
            <summary>
            route info
            </summary>
        </member>
        <member name="F:GMap.NET.MapRoute.Tag">
            <summary>
            custom object
            </summary>
        </member>
        <member name="M:GMap.NET.MapRoute.Clear">
            <summary>
            clears points and sets tag and name to null
            </summary>
        </member>
        <member name="M:GMap.NET.MapRoute.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:GMap.NET.MapRoute.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:GMap.NET.MapRoute"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:GMap.NET.MapRoute.OnDeserialization(System.Object)">
            <summary>
            Runs when the entire object graph has been de-serialized.
            </summary>
            <param name="sender">The object that initiated the callback. The functionality for this parameter is not currently implemented.</param>
        </member>
        <member name="P:GMap.NET.MapRoute.From">
            <summary>
            route start point
            </summary>
        </member>
        <member name="P:GMap.NET.MapRoute.To">
            <summary>
            route end point
            </summary>
        </member>
        <member name="P:GMap.NET.MapRoute.Distance">
            <summary>
            route distance (in km)
            </summary>
        </member>
        <member name="F:Alt.Sketch.GMap.NET.GMapPolygon.IsHitTestVisible">
            <summary>
            can receive input
            </summary>
        </member>
        <member name="M:Alt.Sketch.GMap.NET.GMapPolygon.IsInsideLocal(System.Int32,System.Int32)">
            <summary>
            Indicates whether the specified point is contained within this System.Drawing.Drawing2D.GraphicsPath
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="F:Alt.Sketch.GMap.NET.GMapPolygon.Stroke">
            <summary>
            specifies how the outline is painted
            </summary>
        </member>
        <member name="F:Alt.Sketch.GMap.NET.GMapPolygon.Fill">
            <summary>
            background color
            </summary>
        </member>
        <member name="M:Alt.Sketch.GMap.NET.GMapPolygon.IsInside(GMap.NET.PointLatLng)">
            <summary>
            checks if point is inside the polygon,
            info.: http://greatmaps.codeplex.com/discussions/279437#post700449
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Alt.Sketch.GMap.NET.GMapPolygon.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:Alt.Sketch.GMap.NET.GMapPolygon.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:GMap.NET.MapRoute"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Alt.Sketch.GMap.NET.GMapPolygon.OnDeserialization(System.Object)">
            <summary>
            Runs when the entire object graph has been de-serialized.
            </summary>
            <param name="sender">The object that initiated the callback. The functionality for this parameter is not currently implemented.</param>
        </member>
        <member name="P:Alt.Sketch.GMap.NET.GMapPolygon.IsVisible">
            <summary>
            is polygon visible
            </summary>
        </member>
        <member name="P:Alt.Sketch.GMap.NET.GMapPolygon.IsMouseOver">
            <summary>
            is mouse over
            </summary>
        </member>
        <member name="T:Alt.Sketch.GMap.NET.GMapRoute">
            <summary>
            GMap.NET route
            </summary>
        </member>
        <member name="F:Alt.Sketch.GMap.NET.GMapRoute.IsHitTestVisible">
            <summary>
            can receive input
            </summary>
        </member>
        <member name="M:Alt.Sketch.GMap.NET.GMapRoute.IsInside(System.Int32,System.Int32)">
            <summary>
            Indicates whether the specified point is contained within this System.Drawing.Drawing2D.GraphicsPath
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="F:Alt.Sketch.GMap.NET.GMapRoute.Stroke">
            <summary>
            specifies how the outline is painted
            </summary>
        </member>
        <member name="M:Alt.Sketch.GMap.NET.GMapRoute.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:Alt.Sketch.GMap.NET.GMapRoute.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.Sketch.GMap.NET.GMapRoute"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Alt.Sketch.GMap.NET.GMapRoute.OnDeserialization(System.Object)">
            <summary>
            Runs when the entire object graph has been de-serialized.
            </summary>
            <param name="sender">The object that initiated the callback. The functionality for this parameter is not currently implemented.</param>
        </member>
        <member name="P:Alt.Sketch.GMap.NET.GMapRoute.IsVisible">
            <summary>
            is marker visible
            </summary>
        </member>
        <member name="P:Alt.Sketch.GMap.NET.GMapRoute.IsMouseOver">
            <summary>
            is mouse over
            </summary>
        </member>
        <member name="T:Alt.Sketch.GMap.NET.GMapToolTip">
            <summary>
            GMap.NET marker
            </summary>
        </member>
        <member name="F:Alt.Sketch.GMap.NET.GMapToolTip.Format">
            <summary>
            string format
            </summary>
        </member>
        <member name="F:Alt.Sketch.GMap.NET.GMapToolTip.Font">
            <summary>
            font
            </summary>
        </member>
        <member name="F:Alt.Sketch.GMap.NET.GMapToolTip.Stroke">
            <summary>
            specifies how the outline is painted
            </summary>
        </member>
        <member name="F:Alt.Sketch.GMap.NET.GMapToolTip.Fill">
            <summary>
            background color
            </summary>
        </member>
        <member name="F:Alt.Sketch.GMap.NET.GMapToolTip.Foreground">
            <summary>
            text foreground
            </summary>
        </member>
        <member name="F:Alt.Sketch.GMap.NET.GMapToolTip.TextPadding">
            <summary>
            text padding
            </summary>
        </member>
        <member name="M:Alt.Sketch.GMap.NET.GMapToolTip.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.Sketch.GMap.NET.GMapToolTip"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Alt.Sketch.GMap.NET.GMapToolTip.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:Alt.Sketch.GMap.NET.Markers.GMarkerGoogle.#ctor(GMap.NET.PointLatLng,Alt.Sketch.Bitmap)">
            <summary>
            marker using manual bitmap, NonSerialized
            </summary>
            <param name="p"></param>
            <param name="Bitmap"></param>
        </member>
        <member name="T:Alt.Sketch.GMap.NET.ToolTips.GMapBaloonToolTip">
            <summary>
            GMap.NET marker
            </summary>
        </member>
        <member name="T:Alt.Sketch.GMap.NET.ToolTips.GMapRoundedToolTip">
            <summary>
            GMap.NET marker
            </summary>
        </member>
        <member name="F:Alt.Sketch.Demo.GMap.NET.CustomMarkers.GMapMarkerCircle.Radius">
            <summary>
            In Meters
            </summary>
        </member>
        <member name="F:Alt.Sketch.Demo.GMap.NET.CustomMarkers.GMapMarkerCircle.Stroke">
            <summary>
            specifies how the outline is painted
            </summary>
        </member>
        <member name="F:Alt.Sketch.Demo.GMap.NET.CustomMarkers.GMapMarkerCircle.Fill">
            <summary>
            background color
            </summary>
        </member>
        <member name="F:Alt.Sketch.Demo.GMap.NET.CustomMarkers.GMapMarkerCircle.IsFilled">
            <summary>
            is filled
            </summary>
        </member>
        <member name="P:GMap.NET.CacheProviders.MemoryCache.Capacity">
            <summary>
            the amount of tiles in MB to keep in memmory, default: 22MB, if each ~100Kb it's ~222 tiles
            </summary>
        </member>
        <member name="P:GMap.NET.CacheProviders.MemoryCache.Size">
            <summary>
            current memmory cache size in MB
            </summary>
        </member>
        <member name="T:GMap.NET.Internals.Cache">
            <summary>
            cache system for tiles, geocoding, etc...
            </summary>
        </member>
        <member name="T:GMap.NET.Singleton`1">
            <summary>
            generic for singletons
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:GMap.NET.Internals.Cache.ImageCache">
            <summary>
            abstract image cache
            </summary>
        </member>
        <member name="F:GMap.NET.Internals.Cache.ImageCacheSecond">
            <summary>
            second level abstract image cache
            </summary>
        </member>
        <member name="P:GMap.NET.Internals.Cache.CacheLocation">
            <summary>
            local cache location
            </summary>
        </member>
        <member name="T:GMap.NET.Internals.CacheQueueItem">
            <summary>
            cache queue item
            </summary>
        </member>
        <member name="T:GMap.NET.Internals.Core">
            <summary>
            internal map control core
            </summary>
        </member>
        <member name="F:GMap.NET.Internals.Core.IsDragging">
            <summary>
            is user dragging map
            </summary>
        </member>
        <member name="M:GMap.NET.Internals.Core.SetZoomToFitRect(GMap.NET.RectLatLng)">
            <summary>
            sets zoom to max to fit rect
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="F:GMap.NET.Internals.Core.PolygonsEnabled">
            <summary>
            is polygons enabled
            </summary>
        </member>
        <member name="F:GMap.NET.Internals.Core.RoutesEnabled">
            <summary>
            is routes enabled
            </summary>
        </member>
        <member name="F:GMap.NET.Internals.Core.MarkersEnabled">
            <summary>
            is markers enabled
            </summary>
        </member>
        <member name="F:GMap.NET.Internals.Core.CanDragMap">
            <summary>
            can user drag map
            </summary>
        </member>
        <member name="F:GMap.NET.Internals.Core.RetryLoadTile">
            <summary>
            retry count to get tile 
            </summary>
        </member>
        <member name="F:GMap.NET.Internals.Core.LevelsKeepInMemmory">
            <summary>
            how many levels of tiles are staying decompresed in memory
            </summary>
        </member>
        <member name="M:GMap.NET.Internals.Core.FromLocalToLatLng(System.Int64,System.Int64)">
            <summary>
            gets lat/lng from local control coordinates
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:GMap.NET.Internals.Core.FromLatLngToLocal(GMap.NET.PointLatLng)">
            <summary>
            return local coordinates from lat/lng
            </summary>
            <param name="latlng"></param>
            <returns></returns>
        </member>
        <member name="M:GMap.NET.Internals.Core.GetMaxZoomToFitRect(GMap.NET.RectLatLng)">
            <summary>
            gets max zoom level to fit rectangle
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:GMap.NET.Internals.Core.BeginDrag(GMap.NET.GPoint)">
            <summary>
            initiates map dragging
            </summary>
            <param name="pt"></param>
        </member>
        <member name="M:GMap.NET.Internals.Core.EndDrag">
            <summary>
            ends map dragging
            </summary>
        </member>
        <member name="M:GMap.NET.Internals.Core.ReloadMap">
            <summary>
            reloads map
            </summary>
        </member>
        <member name="M:GMap.NET.Internals.Core.GoToCurrentPosition">
            <summary>
            moves current position into map center
            </summary>
        </member>
        <member name="M:GMap.NET.Internals.Core.GoToCurrentPositionOnZoom">
            <summary>
            moves current position into map center
            </summary>
        </member>
        <member name="M:GMap.NET.Internals.Core.DragOffset(GMap.NET.GPoint)">
            <summary>
            darg map by offset in pixels
            </summary>
            <param name="offset"></param>
        </member>
        <member name="M:GMap.NET.Internals.Core.Drag(GMap.NET.GPoint)">
            <summary>
            drag map
            </summary>
            <param name="pt"></param>
        </member>
        <member name="M:GMap.NET.Internals.Core.CancelAsyncTasks">
            <summary>
            cancels tile loaders and bounds checker
            </summary>
        </member>
        <member name="M:GMap.NET.Internals.Core.UpdateBounds">
            <summary>
            updates map bounds
            </summary>
        </member>
        <member name="M:GMap.NET.Internals.Core.UpdateGroundResolution">
            <summary>
            updates ground resolution info
            </summary>
        </member>
        <member name="P:GMap.NET.Internals.Core.Zoom">
            <summary>
            map zoom
            </summary>
        </member>
        <member name="P:GMap.NET.Internals.Core.PositionPixel">
            <summary>
            current marker position in pixel coordinates
            </summary>
        </member>
        <member name="P:GMap.NET.Internals.Core.Position">
            <summary>
            current marker position
            </summary>
        </member>
        <member name="E:GMap.NET.Internals.Core.OnCurrentPositionChanged">
            <summary>
            occurs when current position is changed
            </summary>
        </member>
        <member name="E:GMap.NET.Internals.Core.OnTileLoadComplete">
            <summary>
            occurs when tile set load is complete
            </summary>
        </member>
        <member name="E:GMap.NET.Internals.Core.OnTileLoadStart">
            <summary>
            occurs when tile set is starting to load
            </summary>
        </member>
        <member name="E:GMap.NET.Internals.Core.OnEmptyTileError">
            <summary>
            occurs on empty tile displayed
            </summary>
        </member>
        <member name="E:GMap.NET.Internals.Core.OnMapDrag">
            <summary>
            occurs on map drag
            </summary>
        </member>
        <member name="E:GMap.NET.Internals.Core.OnMapZoomChanged">
            <summary>
            occurs on map zoom changed
            </summary>
        </member>
        <member name="E:GMap.NET.Internals.Core.OnMapTypeChanged">
            <summary>
            occurs on map type changed
            </summary>
        </member>
        <member name="P:GMap.NET.Internals.Core.ViewArea">
            <summary>
            gets current map view top/left coordinate, width in Lng, height in Lat
            </summary>
            <returns></returns>
        </member>
        <member name="T:GMap.NET.Internals.DrawTile">
            <summary>
            struct for drawing tile
            </summary>
        </member>
        <member name="T:GMap.NET.Internals.FastReaderWriterLock">
            <summary>
            custom ReaderWriterLock
            in Vista and later uses integrated Slim Reader/Writer (SRW) Lock
            http://msdn.microsoft.com/en-us/library/aa904937(VS.85).aspx
            http://msdn.microsoft.com/en-us/magazine/cc163405.aspx#S2
            </summary>
        </member>
        <member name="T:GMap.NET.Internals.KiberTileCache">
            <summary>
            kiber speed memory cache for tiles with history support ;}
            </summary>
        </member>
        <member name="F:GMap.NET.Internals.KiberTileCache.MemoryCacheCapacity">
            <summary>
            the amount of tiles in MB to keep in memmory, default: 22MB, if each ~100Kb it's ~222 tiles
            </summary>
        </member>
        <member name="P:GMap.NET.Internals.KiberTileCache.MemoryCacheSize">
            <summary>
            current memmory cache size in MB
            </summary>
        </member>
        <member name="T:GMap.NET.Internals.LoadTask">
            <summary>
            tile load task
            </summary>
        </member>
        <member name="T:GMap.NET.Internals.RawTile">
            <summary>
            struct for raw tile
            </summary>
        </member>
        <member name="T:Org.Mentalis.Network.ProxySocket.Authentication.AuthMethod">
            <summary>
            Implements a SOCKS authentication scheme.
            </summary>
            <remarks>This is an abstract class; it must be inherited.</remarks>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Authentication.AuthMethod.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Initializes an AuthMethod instance.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Authentication.AuthMethod.Authenticate">
            <summary>
            Authenticates the user.
            </summary>
            <exception cref="T:Org.Mentalis.Network.ProxySocket.ProxyException">Authentication with the proxy server failed.</exception>
            <exception cref="T:System.Net.ProtocolViolationException">The proxy server uses an invalid protocol.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Authentication.AuthMethod.BeginAuthenticate(Org.Mentalis.Network.ProxySocket.HandShakeComplete)">
            <summary>
            Authenticates the user asynchronously.
            </summary>
            <param name="callback">The method to call when the authentication is complete.</param>
            <exception cref="T:Org.Mentalis.Network.ProxySocket.ProxyException">Authentication with the proxy server failed.</exception>
            <exception cref="T:System.Net.ProtocolViolationException">The proxy server uses an invalid protocol.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.Authentication.AuthMethod.m_Buffer">
            <summary>Holds the value of the Buffer property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.Authentication.AuthMethod.m_Server">
            <summary>Holds the value of the Server property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.Authentication.AuthMethod.CallBack">
            <summary>Holds the address of the method to call when the proxy has authenticated the client.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.Authentication.AuthMethod.m_Received">
            <summary>Holds the value of the Received property.</summary>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.Authentication.AuthMethod.Server">
            <summary>
            Gets or sets the socket connection with the proxy server.
            </summary>
            <value>The socket connection with the proxy server.</value>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.Authentication.AuthMethod.Buffer">
            <summary>
            Gets or sets a byt array that can be used to store data.
            </summary>
            <value>A byte array to store data.</value>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.Authentication.AuthMethod.Received">
            <summary>
            Gets or sets the number of bytes that have been received from the remote proxy server.
            </summary>
            <value>An integer that holds the number of bytes that have been received from the remote proxy server.</value>
        </member>
        <member name="T:Org.Mentalis.Network.ProxySocket.Authentication.AuthNone">
            <summary>
            This class implements the 'No Authentication' scheme.
            </summary>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Authentication.AuthNone.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Initializes an AuthNone instance.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Authentication.AuthNone.Authenticate">
            <summary>
            Authenticates the user.
            </summary>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Authentication.AuthNone.BeginAuthenticate(Org.Mentalis.Network.ProxySocket.HandShakeComplete)">
            <summary>
            Authenticates the user asynchronously.
            </summary>
            <param name="callback">The method to call when the authentication is complete.</param>
            <remarks>This method immediately calls the callback method.</remarks>
        </member>
        <member name="T:Org.Mentalis.Network.ProxySocket.Authentication.AuthUserPass">
            <summary>
            This class implements the 'username/password authentication' scheme.
            </summary>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Authentication.AuthUserPass.#ctor(System.Net.Sockets.Socket,System.String,System.String)">
            <summary>
            Initializes a new AuthUserPass instance.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
            <param name="user">The username to use.</param>
            <param name="pass">The password to use.</param>
            <exception cref="T:System.ArgumentNullException"><c>user</c> -or- <c>pass</c> is null.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Authentication.AuthUserPass.GetAuthenticationBytes">
            <summary>
            Creates an array of bytes that has to be sent if the user wants to authenticate with the username/password authentication scheme.
            </summary>
            <returns>An array of bytes that has to be sent if the user wants to authenticate with the username/password authentication scheme.</returns>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Authentication.AuthUserPass.Authenticate">
            <summary>
            Starts the authentication process.
            </summary>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Authentication.AuthUserPass.BeginAuthenticate(Org.Mentalis.Network.ProxySocket.HandShakeComplete)">
            <summary>
            Starts the asynchronous authentication process.
            </summary>
            <param name="callback">The method to call when the authentication is complete.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Authentication.AuthUserPass.OnSent(System.IAsyncResult)">
            <summary>
            Called when the authentication bytes have been sent.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Authentication.AuthUserPass.OnReceive(System.IAsyncResult)">
            <summary>
            Called when the socket received an authentication reply.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.Authentication.AuthUserPass.m_Username">
            <summary>Holds the value of the Username property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.Authentication.AuthUserPass.m_Password">
            <summary>Holds the value of the Password property.</summary>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.Authentication.AuthUserPass.Username">
            <summary>
            Gets or sets the username to use when authenticating with the proxy server.
            </summary>
            <value>The username to use when authenticating with the proxy server.</value>
            <exception cref="T:System.ArgumentNullException">The specified value is null.</exception>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.Authentication.AuthUserPass.Password">
            <summary>
            Gets or sets the password to use when authenticating with the proxy server.
            </summary>
            <value>The password to use when authenticating with the proxy server.</value>
            <exception cref="T:System.ArgumentNullException">The specified value is null.</exception>
        </member>
        <member name="T:Org.Mentalis.Network.ProxySocket.IAsyncProxyResult">
            <summary>
            A class that implements the IAsyncResult interface. Objects from this class are returned by the BeginConnect method of the ProxySocket class.
            </summary>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.IAsyncProxyResult.Init(System.Object)">
            <summary>Initializes the internal variables of this object</summary>
            <param name="stateObject">An object that contains state information for this request.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.IAsyncProxyResult.Reset">
            <summary>Initializes the internal variables of this object</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.IAsyncProxyResult.m_Completed">
            <summary>Used internally to represent the state of the asynchronous request</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.IAsyncProxyResult.m_StateObject">
            <summary>Holds the value of the StateObject property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.IAsyncProxyResult.m_WaitHandle">
            <summary>Holds the value of the WaitHandle property.</summary>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.IAsyncProxyResult.IsCompleted">
            <summary>Gets a value that indicates whether the server has completed processing the call. It is illegal for the server to use any client supplied resources outside of the agreed upon sharing semantics after it sets the IsCompleted property to "true". Thus, it is safe for the client to destroy the resources after IsCompleted property returns "true".</summary>
            <value>A boolean that indicates whether the server has completed processing the call.</value>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.IAsyncProxyResult.CompletedSynchronously">
            <summary>Gets a value that indicates whether the BeginXXXX call has been completed synchronously. If this is detected in the AsyncCallback delegate, it is probable that the thread that called BeginInvoke is the current thread.</summary>
            <value>Returns false.</value>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.IAsyncProxyResult.AsyncState">
            <summary>Gets an object that was passed as the state parameter of the BeginXXXX method call.</summary>
            <value>The object that was passed as the state parameter of the BeginXXXX method call.</value>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.IAsyncProxyResult.AsyncWaitHandle">
             <summary>
             The AsyncWaitHandle property returns the WaitHandle that can use to perform a WaitHandle.WaitOne or WaitAny or WaitAll. The object which implements IAsyncResult need not derive from the System.WaitHandle classes directly. The WaitHandle wraps its underlying synchronization primitive and should be signaled after the call is completed. This enables the client to wait for the call to complete instead polling. The Runtime supplies a number of waitable objects that mirror Win32 synchronization primitives e.g. ManualResetEvent, AutoResetEvent and Mutex.
             WaitHandle supplies methods that support waiting for such synchronization objects to become signaled with "any" or "all" semantics i.e. WaitHandle.WaitOne, WaitAny and WaitAll. Such methods are context aware to avoid deadlocks. The AsyncWaitHandle can be allocated eagerly or on demand. It is the choice of the IAsyncResult implementer.
            </summary>
             <value>The WaitHandle associated with this asynchronous result.</value>
        </member>
        <member name="T:Org.Mentalis.Network.ProxySocket.ProxyException">
            <summary>
            The exception that is thrown when a proxy error occurs.
            </summary>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.ProxyException.#ctor">
            <summary>
            Initializes a new instance of the ProxyException class.
            </summary>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.ProxyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ProxyException class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.ProxyException.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the ProxyException class.
            </summary>
            <param name="socks5Error">The error number returned by a SOCKS5 server.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.ProxyException.Socks5ToString(System.Int32)">
            <summary>
            Converts a SOCKS5 error number to a human readable string.
            </summary>
            <param name="socks5Error">The error number returned by a SOCKS5 server.</param>
            <returns>A string representation of the specified SOCKS5 error number.</returns>
        </member>
        <member name="T:Org.Mentalis.Network.ProxySocket.ProxyTypes">
            <summary>
            Specifies the type of proxy servers that an instance of the ProxySocket class can use.
            </summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.ProxyTypes.None">
            <summary>No proxy server; the ProxySocket object behaves exactly like an ordinary Socket object.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.ProxyTypes.Socks4">
            <summary>A SOCKS4[A] proxy server.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.ProxyTypes.Socks5">
            <summary>A SOCKS5 proxy server.</summary>
        </member>
        <member name="T:Org.Mentalis.Network.ProxySocket.ProxySocket">
            <summary>
            Implements a Socket class that can connect trough a SOCKS proxy server.
            </summary>
            <remarks>This class implements SOCKS4[A] and SOCKS5.<br>It does not, however, implement the BIND commands, so you cannot .</br></remarks>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.ProxySocket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)">
            <summary>
            Initializes a new instance of the ProxySocket class.
            </summary>
            <param name="addressFamily">One of the AddressFamily values.</param>
            <param name="socketType">One of the SocketType values.</param>
            <param name="protocolType">One of the ProtocolType values.</param>
            <exception cref="T:System.Net.Sockets.SocketException">The combination of addressFamily, socketType, and protocolType results in an invalid socket.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.ProxySocket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.String)">
            <summary>
            Initializes a new instance of the ProxySocket class.
            </summary>
            <param name="addressFamily">One of the AddressFamily values.</param>
            <param name="socketType">One of the SocketType values.</param>
            <param name="protocolType">One of the ProtocolType values.</param>
            <param name="proxyUsername">The username to use when authenticating with the proxy server.</param>
            <exception cref="T:System.Net.Sockets.SocketException">The combination of addressFamily, socketType, and protocolType results in an invalid socket.</exception>
            <exception cref="T:System.ArgumentNullException"><c>proxyUsername</c> is null.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.ProxySocket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.String,System.String)">
            <summary>
            Initializes a new instance of the ProxySocket class.
            </summary>
            <param name="addressFamily">One of the AddressFamily values.</param>
            <param name="socketType">One of the SocketType values.</param>
            <param name="protocolType">One of the ProtocolType values.</param>
            <param name="proxyUsername">The username to use when authenticating with the proxy server.</param>
            <param name="proxyPassword">The password to use when authenticating with the proxy server.</param>
            <exception cref="T:System.Net.Sockets.SocketException">The combination of addressFamily, socketType, and protocolType results in an invalid socket.</exception>
            <exception cref="T:System.ArgumentNullException"><c>proxyUsername</c> -or- <c>proxyPassword</c> is null.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.ProxySocket.Connect(System.Net.EndPoint)">
            <summary>
            Establishes a connection to a remote device.
            </summary>
            <param name="remoteEP">An EndPoint that represents the remote device.</param>
            <exception cref="T:System.ArgumentNullException">The remoteEP parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
            <exception cref="T:Org.Mentalis.Network.ProxySocket.ProxyException">An error occured while talking to the proxy server.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.ProxySocket.Connect(System.String,System.Int32)">
            <summary>
            Establishes a connection to a remote device.
            </summary>
            <param name="host">The remote host to connect to.</param>
            <param name="port">The remote port to connect to.</param>
            <exception cref="T:System.ArgumentNullException">The host parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The port parameter is invalid.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
            <exception cref="T:Org.Mentalis.Network.ProxySocket.ProxyException">An error occured while talking to the proxy server.</exception>
            <remarks>If you use this method with a SOCKS4 server, it will let the server resolve the hostname. Not all SOCKS4 servers support this 'remote DNS' though.</remarks>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.ProxySocket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a connection to a network device.
            </summary>
            <param name="remoteEP">An EndPoint that represents the remote device.</param>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
            <exception cref="T:System.ArgumentNullException">The remoteEP parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while creating the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.ProxySocket.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a connection to a network device.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port on the remote host to connect to.</param>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
            <exception cref="T:System.ArgumentNullException">The host parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The port parameter is invalid.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while creating the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.ProxySocket.EndConnect(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous connection request.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user-defined data.</param>
            <exception cref="T:System.ArgumentNullException">The asyncResult parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The asyncResult parameter was not returned by a call to the BeginConnect method.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
            <exception cref="T:System.InvalidOperationException">EndConnect was previously called for the asynchronous connection.</exception>
            <exception cref="T:Org.Mentalis.Network.ProxySocket.ProxyException">The proxy server refused the connection.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.ProxySocket.BeginDns(System.String,Org.Mentalis.Network.ProxySocket.HandShakeComplete)">
            <summary>
            Begins an asynchronous request to resolve a DNS host name or IP address in dotted-quad notation to an IPAddress instance.
            </summary>
            <param name="host">The host to resolve.</param>
            <param name="callback">The method to call when the hostname has been resolved.</param>
            <returns>An IAsyncResult instance that references the asynchronous request.</returns>
            <exception cref="T:System.Net.Sockets.SocketException">There was an error while trying to resolve the host.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.ProxySocket.OnResolved(System.IAsyncResult)">
            <summary>
            Called when the specified hostname has been resolved.
            </summary>
            <param name="asyncResult">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.ProxySocket.OnConnect(System.IAsyncResult)">
            <summary>
            Called when the Socket is connected to the remote host.
            </summary>
            <param name="asyncResult">The result of the asynchronous operation.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.ProxySocket.OnHandShakeComplete(System.Exception)">
            <summary>
            Called when the Socket has finished talking to the proxy server and is ready to relay data.
            </summary>
            <param name="error">The error to throw when the EndConnect method is called.</param>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.ProxySocket.m_State">
            <summary>Holds the value of the State property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.ProxySocket.m_ProxyEndPoint">
            <summary>Holds the value of the ProxyEndPoint property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.ProxySocket.m_ProxyType">
            <summary>Holds the value of the ProxyType property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.ProxySocket.m_ProxyUser">
            <summary>Holds the value of the ProxyUser property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.ProxySocket.m_ProxyPass">
            <summary>Holds the value of the ProxyPass property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.ProxySocket.CallBack">
            <summary>Holds a pointer to the method that should be called when the Socket is connected to the remote device.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.ProxySocket.m_AsyncResult">
            <summary>Holds the value of the AsyncResult property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.ProxySocket.m_ToThrow">
            <summary>Holds the value of the ToThrow property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.ProxySocket.m_RemotePort">
            <summary>Holds the value of the RemotePort property.</summary>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.ProxySocket.ProxyEndPoint">
            <summary>
            Gets or sets the EndPoint of the proxy server.
            </summary>
            <value>An IPEndPoint object that holds the IP address and the port of the proxy server.</value>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.ProxySocket.ProxyType">
            <summary>
            Gets or sets the type of proxy server to use.
            </summary>
            <value>One of the ProxyTypes values.</value>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.ProxySocket.State">
            <summary>
            Gets or sets a user-defined object.
            </summary>
            <value>The user-defined object.</value>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.ProxySocket.ProxyUser">
            <summary>
            Gets or sets the username to use when authenticating with the proxy.
            </summary>
            <value>A string that holds the username that's used when authenticating with the proxy.</value>
            <exception cref="T:System.ArgumentNullException">The specified value is null.</exception>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.ProxySocket.ProxyPass">
            <summary>
            Gets or sets the password to use when authenticating with the proxy.
            </summary>
            <value>A string that holds the password that's used when authenticating with the proxy.</value>
            <exception cref="T:System.ArgumentNullException">The specified value is null.</exception>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.ProxySocket.AsyncResult">
            <summary>
            Gets or sets the asynchronous result object.
            </summary>
            <value>An instance of the IAsyncProxyResult class.</value>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.ProxySocket.ToThrow">
            <summary>
            Gets or sets the exception to throw when the EndConnect method is called.
            </summary>
            <value>An instance of the Exception class (or subclasses of Exception).</value>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.ProxySocket.RemotePort">
            <summary>
            Gets or sets the remote port the user wants to connect to.
            </summary>
            <value>An integer that specifies the port the user wants to connect to.</value>
        </member>
        <member name="T:Org.Mentalis.Network.ProxySocket.Socks4Handler">
            <summary>
            Implements the SOCKS4[A] protocol.
            </summary>
        </member>
        <member name="T:Org.Mentalis.Network.ProxySocket.SocksHandler">
            <summary>
            Implements a specific version of the SOCKS protocol. This is an abstract class; it must be inherited.
            </summary>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.SocksHandler.#ctor(System.Net.Sockets.Socket,System.String)">
            <summary>
            Initilizes a new instance of the SocksHandler class.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
            <param name="user">The username to use when authenticating with the server.</param>
            <exception cref="T:System.ArgumentNullException"><c>server</c> -or- <c>user</c> is null.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.SocksHandler.PortToBytes(System.Int32)">
            <summary>
            Converts a port number to an array of bytes.
            </summary>
            <param name="port">The port to convert.</param>
            <returns>An array of two bytes that represents the specified port.</returns>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.SocksHandler.ReadBytes(System.Int32)">
            <summary>
            Reads a specified number of bytes from the Server socket.
            </summary>
            <param name="count">The number of bytes to return.</param>
            <returns>An array of bytes.</returns>
            <exception cref="T:System.ArgumentException">The number of bytes to read is invalid.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.SocksHandler.m_Server">
            <summary>Holds the value of the Server property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.SocksHandler.m_Username">
            <summary>Holds the value of the Username property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.SocksHandler.m_AsyncResult">
            <summary>Holds the value of the AsyncResult property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.SocksHandler.m_Buffer">
            <summary>Holds the value of the Buffer property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.SocksHandler.m_Received">
            <summary>Holds the value of the Received property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.SocksHandler.ProtocolComplete">
            <summary>Holds the address of the method to call when the SOCKS protocol has been completed.</summary>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.SocksHandler.Negotiate(System.String,System.Int32)">
            <summary>
            Starts negotiating with a SOCKS proxy server.
            </summary>
            <param name="host">The remote server to connect to.</param>
            <param name="port">The remote port to connect to.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.SocksHandler.Negotiate(System.Net.IPEndPoint)">
            <summary>
            Starts negotiating with a SOCKS proxy server.
            </summary>
            <param name="remoteEP">The remote endpoint to connect to.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.SocksHandler.BeginNegotiate(System.Net.IPEndPoint,Org.Mentalis.Network.ProxySocket.HandShakeComplete,System.Net.IPEndPoint)">
            <summary>
            Starts negotiating asynchronously with a SOCKS proxy server.
            </summary>
            <param name="remoteEP">An IPEndPoint that represents the remote device. </param>
            <param name="callback">The method to call when the connection has been established.</param>
            <param name="proxyEndPoint">The IPEndPoint of the SOCKS proxy server.</param>
            <returns>An IAsyncProxyResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.SocksHandler.BeginNegotiate(System.String,System.Int32,Org.Mentalis.Network.ProxySocket.HandShakeComplete,System.Net.IPEndPoint)">
            <summary>
            Starts negotiating asynchronously with a SOCKS proxy server.
            </summary>
            <param name="host">The remote server to connect to.</param>
            <param name="port">The remote port to connect to.</param>
            <param name="callback">The method to call when the connection has been established.</param>
            <param name="proxyEndPoint">The IPEndPoint of the SOCKS proxy server.</param>
            <returns>An IAsyncProxyResult that references the asynchronous connection.</returns>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.SocksHandler.Server">
            <summary>
            Gets or sets the socket connection with the proxy server.
            </summary>
            <value>A Socket object that represents the connection with the proxy server.</value>
            <exception cref="T:System.ArgumentNullException">The specified value is null.</exception>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.SocksHandler.Username">
            <summary>
            Gets or sets the username to use when authenticating with the proxy server.
            </summary>
            <value>A string that holds the username to use when authenticating with the proxy server.</value>
            <exception cref="T:System.ArgumentNullException">The specified value is null.</exception>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.SocksHandler.AsyncResult">
            <summary>
            Gets or sets the return value of the BeginConnect call.
            </summary>
            <value>An IAsyncProxyResult object that is the return value of the BeginConnect call.</value>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.SocksHandler.Buffer">
            <summary>
            Gets or sets a byte buffer.
            </summary>
            <value>An array of bytes.</value>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.SocksHandler.Received">
            <summary>
            Gets or sets the number of bytes that have been received from the remote proxy server.
            </summary>
            <value>An integer that holds the number of bytes that have been received from the remote proxy server.</value>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks4Handler.#ctor(System.Net.Sockets.Socket,System.String)">
            <summary>
            Initilizes a new instance of the SocksHandler class.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
            <param name="user">The username to use when authenticating with the server.</param>
            <exception cref="T:System.ArgumentNullException"><c>server</c> -or- <c>user</c> is null.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks4Handler.GetHostPortBytes(System.String,System.Int32)">
            <summary>
            Creates an array of bytes that has to be sent when the user wants to connect to a specific host/port combination.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <returns>An array of bytes that has to be sent when the user wants to connect to a specific host/port combination.</returns>
            <remarks>Resolving the host name will be done at server side. Do note that some SOCKS4 servers do not implement this functionality.</remarks>
            <exception cref="T:System.ArgumentNullException"><c>host</c> is null.</exception>
            <exception cref="T:System.ArgumentException"><c>port</c> is invalid.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks4Handler.GetEndPointBytes(System.Net.IPEndPoint)">
            <summary>
            Creates an array of bytes that has to be sent when the user wants to connect to a specific IPEndPoint.
            </summary>
            <param name="remoteEP">The IPEndPoint to connect to.</param>
            <returns>An array of bytes that has to be sent when the user wants to connect to a specific IPEndPoint.</returns>
            <exception cref="T:System.ArgumentNullException"><c>remoteEP</c> is null.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks4Handler.Negotiate(System.String,System.Int32)">
            <summary>
            Starts negotiating with the SOCKS server.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <exception cref="T:System.ArgumentNullException"><c>host</c> is null.</exception>
            <exception cref="T:System.ArgumentException"><c>port</c> is invalid.</exception>
            <exception cref="T:Org.Mentalis.Network.ProxySocket.ProxyException">The proxy rejected the request.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks4Handler.Negotiate(System.Net.IPEndPoint)">
            <summary>
            Starts negotiating with the SOCKS server.
            </summary>
            <param name="remoteEP">The IPEndPoint to connect to.</param>
            <exception cref="T:System.ArgumentNullException"><c>remoteEP</c> is null.</exception>
            <exception cref="T:Org.Mentalis.Network.ProxySocket.ProxyException">The proxy rejected the request.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks4Handler.Negotiate(System.Byte[])">
            <summary>
            Starts negotiating with the SOCKS server.
            </summary>
            <param name="connect">The bytes to send when trying to authenticate.</param>
            <exception cref="T:System.ArgumentNullException"><c>connect</c> is null.</exception>
            <exception cref="T:System.ArgumentException"><c>connect</c> is too small.</exception>
            <exception cref="T:Org.Mentalis.Network.ProxySocket.ProxyException">The proxy rejected the request.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks4Handler.BeginNegotiate(System.String,System.Int32,Org.Mentalis.Network.ProxySocket.HandShakeComplete,System.Net.IPEndPoint)">
            <summary>
            Starts negotiating asynchronously with a SOCKS proxy server.
            </summary>
            <param name="host">The remote server to connect to.</param>
            <param name="port">The remote port to connect to.</param>
            <param name="callback">The method to call when the connection has been established.</param>
            <param name="proxyEndPoint">The IPEndPoint of the SOCKS proxy server.</param>
            <returns>An IAsyncProxyResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks4Handler.BeginNegotiate(System.Net.IPEndPoint,Org.Mentalis.Network.ProxySocket.HandShakeComplete,System.Net.IPEndPoint)">
            <summary>
            Starts negotiating asynchronously with a SOCKS proxy server.
            </summary>
            <param name="remoteEP">An IPEndPoint that represents the remote device.</param>
            <param name="callback">The method to call when the connection has been established.</param>
            <param name="proxyEndPoint">The IPEndPoint of the SOCKS proxy server.</param>
            <returns>An IAsyncProxyResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks4Handler.OnConnect(System.IAsyncResult)">
            <summary>
            Called when the Socket is connected to the remote proxy server.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks4Handler.OnSent(System.IAsyncResult)">
            <summary>
            Called when the Socket has sent the handshake data.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks4Handler.OnReceive(System.IAsyncResult)">
            <summary>
            Called when the Socket has received a reply from the remote proxy server.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="T:Org.Mentalis.Network.ProxySocket.Socks5Handler">
            <summary>
            Implements the SOCKS5 protocol.
            </summary>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Initiliazes a new Socks5Handler instance.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
            <exception cref="T:System.ArgumentNullException"><c>server</c>  is null.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.#ctor(System.Net.Sockets.Socket,System.String)">
            <summary>
            Initiliazes a new Socks5Handler instance.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
            <param name="user">The username to use.</param>
            <exception cref="T:System.ArgumentNullException"><c>server</c> -or- <c>user</c> is null.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.#ctor(System.Net.Sockets.Socket,System.String,System.String)">
            <summary>
            Initiliazes a new Socks5Handler instance.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
            <param name="user">The username to use.</param>
            <param name="pass">The password to use.</param>
            <exception cref="T:System.ArgumentNullException"><c>server</c> -or- <c>user</c> -or- <c>pass</c> is null.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.Authenticate">
            <summary>
            Starts the synchronous authentication process.
            </summary>
            <exception cref="T:Org.Mentalis.Network.ProxySocket.ProxyException">Authentication with the proxy server failed.</exception>
            <exception cref="T:System.Net.ProtocolViolationException">The proxy server uses an invalid protocol.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.GetHostPortBytes(System.String,System.Int32)">
            <summary>
            Creates an array of bytes that has to be sent when the user wants to connect to a specific host/port combination.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <returns>An array of bytes that has to be sent when the user wants to connect to a specific host/port combination.</returns>
            <exception cref="T:System.ArgumentNullException"><c>host</c> is null.</exception>
            <exception cref="T:System.ArgumentException"><c>port</c> or <c>host</c> is invalid.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.GetEndPointBytes(System.Net.IPEndPoint)">
            <summary>
            Creates an array of bytes that has to be sent when the user wants to connect to a specific IPEndPoint.
            </summary>
            <param name="remoteEP">The IPEndPoint to connect to.</param>
            <returns>An array of bytes that has to be sent when the user wants to connect to a specific IPEndPoint.</returns>
            <exception cref="T:System.ArgumentNullException"><c>remoteEP</c> is null.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.Negotiate(System.String,System.Int32)">
            <summary>
            Starts negotiating with the SOCKS server.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <exception cref="T:System.ArgumentNullException"><c>host</c> is null.</exception>
            <exception cref="T:System.ArgumentException"><c>port</c> is invalid.</exception>
            <exception cref="T:Org.Mentalis.Network.ProxySocket.ProxyException">The proxy rejected the request.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
            <exception cref="T:System.Net.ProtocolViolationException">The proxy server uses an invalid protocol.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.Negotiate(System.Net.IPEndPoint)">
            <summary>
            Starts negotiating with the SOCKS server.
            </summary>
            <param name="remoteEP">The IPEndPoint to connect to.</param>
            <exception cref="T:System.ArgumentNullException"><c>remoteEP</c> is null.</exception>
            <exception cref="T:Org.Mentalis.Network.ProxySocket.ProxyException">The proxy rejected the request.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
            <exception cref="T:System.Net.ProtocolViolationException">The proxy server uses an invalid protocol.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.Negotiate(System.Byte[])">
            <summary>
            Starts negotiating with the SOCKS server.
            </summary>
            <param name="connect">The bytes to send when trying to authenticate.</param>
            <exception cref="T:System.ArgumentNullException"><c>connect</c> is null.</exception>
            <exception cref="T:System.ArgumentException"><c>connect</c> is too small.</exception>
            <exception cref="T:Org.Mentalis.Network.ProxySocket.ProxyException">The proxy rejected the request.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
            <exception cref="T:System.Net.ProtocolViolationException">The proxy server uses an invalid protocol.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.BeginNegotiate(System.String,System.Int32,Org.Mentalis.Network.ProxySocket.HandShakeComplete,System.Net.IPEndPoint)">
            <summary>
            Starts negotiating asynchronously with the SOCKS server. 
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <param name="callback">The method to call when the negotiation is complete.</param>
            <param name="proxyEndPoint">The IPEndPoint of the SOCKS proxy server.</param>
            <returns>An IAsyncProxyResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.BeginNegotiate(System.Net.IPEndPoint,Org.Mentalis.Network.ProxySocket.HandShakeComplete,System.Net.IPEndPoint)">
            <summary>
            Starts negotiating asynchronously with the SOCKS server. 
            </summary>
            <param name="remoteEP">An IPEndPoint that represents the remote device.</param>
            <param name="callback">The method to call when the negotiation is complete.</param>
            <param name="proxyEndPoint">The IPEndPoint of the SOCKS proxy server.</param>
            <returns>An IAsyncProxyResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.OnConnect(System.IAsyncResult)">
            <summary>
            Called when the socket is connected to the remote server.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.OnAuthSent(System.IAsyncResult)">
            <summary>
            Called when the authentication bytes have been sent.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.OnAuthReceive(System.IAsyncResult)">
            <summary>
            Called when an authentication reply has been received.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.OnAuthenticated(System.Exception)">
            <summary>
            Called when the socket has been successfully authenticated with the server.
            </summary>
            <param name="e">The exception that has occured while authenticating, or <em>null</em> if no error occured.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.OnSent(System.IAsyncResult)">
            <summary>
            Called when the connection request has been sent.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.OnReceive(System.IAsyncResult)">
            <summary>
            Called when a connection reply has been received.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.ProcessReply(System.Byte[])">
            <summary>
            Processes the received reply.
            </summary>
            <param name="buffer">The received reply</param>
            <exception cref="T:System.Net.ProtocolViolationException">The received reply is invalid.</exception>
        </member>
        <member name="M:Org.Mentalis.Network.ProxySocket.Socks5Handler.OnReadLast(System.IAsyncResult)">
            <summary>
            Called when the last bytes are read from the socket.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.Socks5Handler.m_Password">
            <summary>Holds the value of the Password property.</summary>
        </member>
        <member name="F:Org.Mentalis.Network.ProxySocket.Socks5Handler.m_HandShake">
            <summary>Holds the value of the HandShake property.</summary>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.Socks5Handler.Password">
            <summary>
            Gets or sets the password to use when authenticating with the SOCKS5 server.
            </summary>
            <value>The password to use when authenticating with the SOCKS5 server.</value>
        </member>
        <member name="P:Org.Mentalis.Network.ProxySocket.Socks5Handler.HandShake">
            <summary>
            Gets or sets the bytes to use when sending a connect request to the proxy server.
            </summary>
            <value>The array of bytes to use when sending a connect request to the proxy server.</value>
        </member>
        <member name="T:Org.Mentalis.Network.ProxySocket.HandShakeComplete">
            <summary>
            References the callback method to be called when the protocol negotiation is completed.
            </summary>
        </member>
        <member name="T:GMap.NET.Internals.SocksHttpWebRequest">
            <summary>
            http://ditrans.blogspot.com/2009/03/making-witty-work-with-socks-proxy.html
            </summary>
        </member>
        <member name="T:GMap.NET.Internals.Stuff">
            <summary>
            etc functions...
            </summary>
        </member>
        <member name="T:GMap.NET.Internals.Tile">
            <summary>
            represent tile
            </summary>
        </member>
        <member name="T:GMap.NET.Internals.TileMatrix">
            <summary>
            matrix for tiles
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.ArcGIS_DarbAE_Q2_2011_NAVTQ_Eng_V5_MapProvider">
            <summary>
            ArcGIS_DarbAE_Q2_2011_NAVTQ_Eng_V5_Map provider, 
            http://www.darb.ae/ArcGIS/rest/services/BaseMaps/Q2_2011_NAVTQ_Eng_V5/MapServer
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.GMapProvider">
            <summary>
            base class for each map provider
            </summary>
        </member>
        <member name="M:GMap.NET.MapProviders.GMapProvider.GetTileImage(GMap.NET.GPoint,System.Int32)">
            <summary>
            gets tile image using implmented provider
            </summary>
            <param name="pos"></param>
            <param name="zoom"></param>
            <returns></returns>
        </member>
        <member name="M:GMap.NET.MapProviders.GMapProvider.OnInitialized">
            <summary>
            called before first use
            </summary>
        </member>
        <member name="F:GMap.NET.MapProviders.GMapProvider.DbId">
            <summary>
            id for database, a hash of provider guid
            </summary>
        </member>
        <member name="F:GMap.NET.MapProviders.GMapProvider.Area">
            <summary>
            area of map
            </summary>
        </member>
        <member name="F:GMap.NET.MapProviders.GMapProvider.MinZoom">
            <summary>
            minimum level of zoom
            </summary>
        </member>
        <member name="F:GMap.NET.MapProviders.GMapProvider.MaxZoom">
            <summary>
            maximum level of zoom
            </summary>
        </member>
        <member name="F:GMap.NET.MapProviders.GMapProvider.WebProxy">
            <summary>
            proxy for net access
            </summary>
        </member>
        <member name="F:GMap.NET.MapProviders.GMapProvider.IsSocksProxy">
            <summary>
            Connect trough a SOCKS 4/5 proxy server
            </summary>
        </member>
        <member name="F:GMap.NET.MapProviders.GMapProvider.Credential">
            <summary>
            NetworkCredential for tile http access
            </summary>
        </member>
        <member name="F:GMap.NET.MapProviders.GMapProvider.UserAgent">
            <summary>
            Gets or sets the value of the User-agent HTTP header.
            It's pseudo-randomized to avoid blockages...
            </summary>                  
        </member>
        <member name="F:GMap.NET.MapProviders.GMapProvider.TimeoutMs">
            <summary>
            timeout for provider connections
            </summary>
        </member>
        <member name="F:GMap.NET.MapProviders.GMapProvider.RefererUrl">
            <summary>
            Gets or sets the value of the Referer HTTP header.
            </summary>
        </member>
        <member name="F:GMap.NET.MapProviders.GMapProvider.InvertedAxisY">
            <summary>
            true if tile origin at BottomLeft, WMS-C
            </summary>
        </member>
        <member name="F:GMap.NET.MapProviders.GMapProvider.BypassCache">
            <summary>
            to bypass the cache, set to true
            </summary>
        </member>
        <member name="F:GMap.NET.MapProviders.GMapProvider.TileImageProxy">
            <summary>
            internal proxy for image managment
            </summary>
        </member>
        <member name="P:GMap.NET.MapProviders.GMapProvider.Id">
            <summary>
            unique provider id
            </summary>
        </member>
        <member name="P:GMap.NET.MapProviders.GMapProvider.Name">
            <summary>
            provider name
            </summary>
        </member>
        <member name="P:GMap.NET.MapProviders.GMapProvider.Projection">
            <summary>
            provider projection
            </summary>
        </member>
        <member name="P:GMap.NET.MapProviders.GMapProvider.Overlays">
            <summary>
            provider overlays
            </summary>
        </member>
        <member name="P:GMap.NET.MapProviders.GMapProvider.IsInitialized">
            <summary>
            was provider initialized
            </summary>
        </member>
        <member name="P:GMap.NET.MapProviders.GMapProvider.Language">
            <summary>
            map language
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.ArcGIS_Imagery_World_2D_MapProvider">
            <summary>
            ArcGIS_Imagery_World_2D_Map provider, http://server.arcgisonline.com
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.ArcGIS_ShadedRelief_World_2D_MapProvider">
            <summary>
            ArcGIS_ShadedRelief_World_2D_Map provider, http://server.arcgisonline.com
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.ArcGIS_StreetMap_World_2D_MapProvider">
            <summary>
            ArcGIS_StreetMap_World_2D_Map provider, http://server.arcgisonline.com
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.ArcGIS_Topo_US_2D_MapProvider">
            <summary>
            ArcGIS_Topo_US_2D_Map provider, http://server.arcgisonline.com
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.ArcGIS_World_Physical_MapProvider">
            <summary>
            ArcGIS_World_Physical_Map provider, http://server.arcgisonline.com
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.ArcGIS_World_Shaded_Relief_MapProvider">
            <summary>
            ArcGIS_World_Shaded_Relief_Map provider, http://server.arcgisonline.com
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.ArcGIS_World_Street_MapProvider">
            <summary>
            ArcGIS_World_Street_Map provider, http://server.arcgisonline.com
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.ArcGIS_World_Terrain_Base_MapProvider">
            <summary>
            ArcGIS_World_Terrain_Base_Map provider, http://server.arcgisonline.com
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.ArcGIS_World_Topo_MapProvider">
            <summary>
            ArcGIS_World_Topo_Map provider, http://server.arcgisonline.com
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.BingHybridMapProvider">
            <summary>
            BingHybridMap provider
            </summary>
        </member>
        <member name="T:GMap.NET.RoutingProvider">
            <summary>
            routing interface
            </summary>
        </member>
        <member name="M:GMap.NET.RoutingProvider.GetRoute(GMap.NET.PointLatLng,GMap.NET.PointLatLng,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            get route between two points
            </summary>
        </member>
        <member name="M:GMap.NET.RoutingProvider.GetRoute(System.String,System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            get route between two points
            </summary>
        </member>
        <member name="T:GMap.NET.GeocodingProvider">
            <summary>
            geocoding interface
            </summary>
        </member>
        <member name="F:GMap.NET.MapProviders.BingMapProviderBase.ClientKey">
            <summary>
            Bing Maps Customer Identification, more info here
            http://msdn.microsoft.com/en-us/library/bb924353.aspx
            </summary>
        </member>
        <member name="M:GMap.NET.MapProviders.BingMapProviderBase.TileXYToQuadKey(System.Int64,System.Int64,System.Int32)">
            <summary>
            Converts tile XY coordinates into a QuadKey at a specified level of detail.
            </summary>
            <param name="tileX">Tile X coordinate.</param>
            <param name="tileY">Tile Y coordinate.</param>
            <param name="levelOfDetail">Level of detail, from 1 (lowest detail)
            to 23 (highest detail).</param>
            <returns>A string containing the QuadKey.</returns>
        </member>
        <member name="M:GMap.NET.MapProviders.BingMapProviderBase.QuadKeyToTileXY(System.String,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Converts a QuadKey into tile XY coordinates.
            </summary>
            <param name="quadKey">QuadKey of the tile.</param>
            <param name="tileX">Output parameter receiving the tile X coordinate.</param>
            <param name="tileY">Output parameter receiving the tile Y coordinate.</param>
            <param name="levelOfDetail">Output parameter receiving the level of detail.</param>
        </member>
        <member name="T:GMap.NET.MapProviders.BingMapProvider">
            <summary>
            BingMapProvider provider
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.BingSatelliteMapProvider">
            <summary>
            BingSatelliteMapProvider provider
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.CzechHistoryMapProvider">
            <summary>
            CzechHistoryMap provider, http://www.mapy.cz/
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.CzechHybridMapProvider">
            <summary>
            CzechHybridMap provider, http://www.mapy.cz/
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.CzechMapProvider">
            <summary>
            CzechMap provider, http://www.mapy.cz/
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.CzechSatelliteMapProvider">
            <summary>
            CzechSatelliteMap provider, http://www.mapy.cz/
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.CzechTuristMapProvider">
            <summary>
            CzechTuristMap provider, http://www.mapy.cz/
            </summary>
        </member>
        <member name="T:GMap.NET.DirectionsProvider">
            <summary>
            directions interface
            </summary>
        </member>
        <member name="M:GMap.NET.DirectionsProvider.GetDirections(GMap.NET.DirectionsStatusCode@,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            service may provide more than one route alternative in the response
            </summary>
            <param name="status"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="avoidHighways"></param>
            <param name="avoidTolls"></param>
            <param name="walkingMode"></param>
            <param name="sensor"></param>
            <param name="metric"></param>
            <returns></returns>
        </member>
        <member name="M:GMap.NET.DirectionsProvider.GetDirections(GMap.NET.DirectionsStatusCode@,GMap.NET.PointLatLng,GMap.NET.PointLatLng,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            service may provide more than one route alternative in the response
            </summary>
            <param name="status"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="avoidHighways"></param>
            <param name="avoidTolls"></param>
            <param name="walkingMode"></param>
            <param name="sensor"></param>
            <param name="metric"></param>
            <returns></returns>
        </member>
        <member name="M:GMap.NET.MapProviders.CloudMadeMapProviderBase.GetRoute(System.String,System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            NotImplemented
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="avoidHighways"></param>
            <param name="walkingMode"></param>
            <param name="Zoom"></param>
            <returns></returns>
        </member>
        <member name="M:GMap.NET.MapProviders.CloudMadeMapProviderBase.GetDirections(GMap.NET.GDirections@,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            NotImplemented
            </summary>
            <param name="direction"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="avoidHighways"></param>
            <param name="avoidTolls"></param>
            <param name="walkingMode"></param>
            <param name="sensor"></param>
            <param name="metric"></param>
            <returns></returns>
        </member>
        <member name="M:GMap.NET.MapProviders.CloudMadeMapProviderBase.GetDirections(GMap.NET.DirectionsStatusCode@,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            NotImplemented
            </summary>
            <param name="status"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="avoidHighways"></param>
            <param name="avoidTolls"></param>
            <param name="walkingMode"></param>
            <param name="sensor"></param>
            <param name="metric"></param>
            <returns></returns>
        </member>
        <member name="M:GMap.NET.MapProviders.CloudMadeMapProviderBase.GetDirections(GMap.NET.DirectionsStatusCode@,GMap.NET.PointLatLng,GMap.NET.PointLatLng,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            NotImplemented
            </summary>
            <param name="status"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="avoidHighways"></param>
            <param name="avoidTolls"></param>
            <param name="walkingMode"></param>
            <param name="sensor"></param>
            <param name="metric"></param>
            <returns></returns>
        </member>
        <member name="M:GMap.NET.MapProviders.CloudMadeMapProviderBase.GetDirections(GMap.NET.GDirections@,GMap.NET.PointLatLng,System.Collections.Generic.IEnumerable{GMap.NET.PointLatLng},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            NotImplemented
            </summary>
            <param name="direction"></param>
            <param name="start"></param>
            <param name="wayPoints"></param>
            <param name="avoidHighways"></param>
            <param name="avoidTolls"></param>
            <param name="walkingMode"></param>
            <param name="sensor"></param>
            <param name="metric"></param>
            <returns></returns>
        </member>
        <member name="M:GMap.NET.MapProviders.CloudMadeMapProviderBase.GetDirections(GMap.NET.GDirections@,System.String,System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            NotImplemented
            </summary>
            <param name="direction"></param>
            <param name="start"></param>
            <param name="wayPoints"></param>
            <param name="avoidHighways"></param>
            <param name="avoidTolls"></param>
            <param name="walkingMode"></param>
            <param name="sensor"></param>
            <param name="metric"></param>
            <returns></returns>
        </member>
        <member name="T:GMap.NET.MapProviders.CloudMadeMapProvider">
            <summary>
            CloudMadeMap demo provider, http://maps.cloudmade.com/
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.LatviaMapProvider">
            <summary>
            LatviaMap provider, http://www.ikarte.lv/
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.MapBenderWMSProvider">
            <summary>
            MapBender provider, WMS demo http://www.mapbender.org/
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.SpainMapProvider">
            <summary>
            SpainMap provider, http://sigpac.mapa.es/fega/visor/
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.TurkeyMapProvider">
            <summary>
            TurkeyMap provider, http://maps.pergo.com.tr/
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.WikiMapiaMapProvider">
            <summary>
            WikiMapiaMap provider, http://wikimapia.org/
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.GMapProviders">
            <summary>
            providers that are already build in
            </summary>
        </member>
        <member name="P:GMap.NET.MapProviders.GMapProviders.List">
            <summary>
            get all instances of the supported providers
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.EmptyProvider">
            <summary>
            represents empty provider
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.GoogleChinaHybridMapProvider">
            <summary>
            GoogleChinaHybridMap provider
            </summary>
        </member>
        <member name="M:GMap.NET.MapProviders.GoogleMapProviderBase.GetPoints(GMap.NET.Placemark,System.Collections.Generic.List{GMap.NET.PointLatLng}@)">
            <summary>
            NotImplemented
            </summary>
            <param name="placemark"></param>
            <param name="pointList"></param>
            <returns></returns>
        </member>
        <member name="M:GMap.NET.MapProviders.GoogleMapProviderBase.GetPoint(GMap.NET.Placemark,GMap.NET.GeoCoderStatusCode@)">
            <summary>
            NotImplemented
            </summary>
            <param name="placemark"></param>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="M:GMap.NET.MapProviders.GoogleMapProviderBase.GetDirections(GMap.NET.DirectionsStatusCode@,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            NotImplemented
            </summary>
            <param name="status"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="avoidHighways"></param>
            <param name="avoidTolls"></param>
            <param name="walkingMode"></param>
            <param name="sensor"></param>
            <param name="metric"></param>
            <returns></returns>
        </member>
        <member name="M:GMap.NET.MapProviders.GoogleMapProviderBase.GetDirections(GMap.NET.DirectionsStatusCode@,GMap.NET.PointLatLng,GMap.NET.PointLatLng,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            NotImplemented
            </summary>
            <param name="status"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="avoidHighways"></param>
            <param name="avoidTolls"></param>
            <param name="walkingMode"></param>
            <param name="sensor"></param>
            <param name="metric"></param>
            <returns></returns>
        </member>
        <member name="P:GMap.NET.MapProviders.GoogleMapProviderBase.Id">
            <summary>
            API generated using http://greatmaps.codeplex.com/
            from http://tinyurl.com/3q6zhcw
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.GoogleChinaMapProvider">
            <summary>
            GoogleChinaMap provider
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.GoogleChinaSatelliteMapProvider">
            <summary>
            GoogleChinaSatelliteMap provider
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.GoogleChinaTerrainMapProvider">
            <summary>
            GoogleChinaTerrainMap provider
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.GoogleHybridMapProvider">
            <summary>
            GoogleHybridMap provider
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.GoogleMapProvider">
            <summary>
            GoogleMap provider
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.GoogleSatelliteMapProvider">
            <summary>
            GoogleSatelliteMap provider
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.GoogleTerrainMapProvider">
            <summary>
            GoogleTerrainMap provider
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.GoogleKoreaHybridMapProvider">
            <summary>
            GoogleKoreaHybridMap provider
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.GoogleKoreaMapProvider">
            <summary>
            GoogleKoreaMap provider
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.GoogleKoreaSatelliteMapProvider">
            <summary>
            GoogleKoreaSatelliteMap provider
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.Lithuania3dMapProvider">
            <summary>
            Lithuania3dMap (2.5d) provider
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.LithuaniaHybridMapProvider">
            <summary>
            LithuaniaHybridMap provider
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.LithuaniaHybridOldMapProvider">
            <summary>
            LithuaniaHybridNewMap, from 2005 data, provider
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.LithuaniaMapProvider">
            <summary>
            LithuaniaMap provider, http://www.maps.lt/map/
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.LithuaniaOrtoFotoMapProvider">
            <summary>
            LithuaniaOrtoFotoMap provider
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.LithuaniaOrtoFotoOldMapProvider">
            <summary>
            LithuaniaOrtoFotoNewMap, from 2005 data, provider
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.NearHybridMapProvider">
            <summary>
            NearHybridMap provider - http://www.nearmap.com/
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.NearMapProvider">
            <summary>
            NearMap provider - http://www.nearmap.com/
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.NearSatelliteMapProvider">
            <summary>
            NearSatelliteMap provider - http://www.nearmap.com/
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.OpenCycleLandscapeMapProvider">
            <summary>
            OpenCycleMap Landscape provider - http://www.opencyclemap.org
            </summary>
        </member>
        <member name="M:GMap.NET.MapProviders.OpenStreetMapProviderBase.GetRoute(System.String,System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            NotImplemented
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="avoidHighways"></param>
            <param name="walkingMode"></param>
            <param name="Zoom"></param>
            <returns></returns>
        </member>
        <member name="T:GMap.NET.MapProviders.OpenCycleMapProvider">
            <summary>
            OpenCycleMap provider - http://www.opencyclemap.org
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.OpenCycleTransportMapProvider">
            <summary>
            OpenCycleMap Transport provider - http://www.opencyclemap.org
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.OpenSeaMapHybridProvider">
            <summary>
            OpenSeaMapHybrid provider - http://openseamap.org
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.OpenStreet4UMapProvider">
            <summary>
            OpenStreet4UMap provider
            http://www.4umaps.eu
            
            4UMaps are topographic outdoor maps based on OpenStreetmap data.
            The map contains everything you need for any kind of back country activity like hiking,
            mountain biking, cycling, climbing etc. 4UMaps has elevation lines, hill shading,
            peak height and name, streets, ways, tracks and trails, as well as springs, supermarkets,
            restaurants, hotels, shelters etc.
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.OpenStreetMapProvider">
            <summary>
            OpenStreetMap provider - http://www.openstreetmap.org/
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.OpenStreetMapQuestHybridProvider">
            <summary>
            OpenStreetMapQuestHybrid provider - http://wiki.openstreetmap.org/wiki/MapQuest
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.OpenStreetMapQuestProvider">
            <summary>
            OpenStreetMapQuest provider - http://wiki.openstreetmap.org/wiki/MapQuest
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.OpenStreetMapQuestSatteliteProvider">
            <summary>
            OpenStreetMapQuestSattelite provider - http://wiki.openstreetmap.org/wiki/MapQuest
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.OviHybridMapProvider">
            <summary>
            OviHybridMap provider
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.OviMapProvider">
            <summary>
            OviMap provider
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.OviSatelliteMapProvider">
            <summary>
            OviSatelliteMap provider
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.OviTerrainMapProvider">
            <summary>
            OviTerrainMap provider
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.YahooHybridMapProvider">
            <summary>
            YahooHybridMap provider
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.YahooMapProvider">
            <summary>
            YahooMap provider
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.YahooSatelliteMapProvider">
            <summary>
            YahooSatelliteMap provider
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.YandexHybridMapProvider">
            <summary>
            YandexHybridMap provider
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.YandexMapProvider">
            <summary>
            YandexMap provider
            </summary>
        </member>
        <member name="T:GMap.NET.MapProviders.YandexSatelliteMapProvider">
            <summary>
            YandexSatelliteMap provider
            </summary>
        </member>
        <member name="T:GMap.NET.Projections.LKS94Projection">
            <summary>
            GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.01745329251994328,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]]
            PROJCS["LKS94 / Lithuania TM",GEOGCS["LKS94",DATUM["Lithuania_1994_ETRS89",SPHEROID["GRS 1980",6378137,298.257222101,AUTHORITY["EPSG","7019"]],TOWGS84[0,0,0,0,0,0,0],AUTHORITY["EPSG","6126"]],PRIMEM["Greenwich",0,AUTHORITY["EPSG","8901"]],UNIT["degree",0.01745329251994328,AUTHORITY["EPSG","9122"]],AUTHORITY["EPSG","4669"]],UNIT["metre",1,AUTHORITY["EPSG","9001"]],PROJECTION["Transverse_Mercator"],PARAMETER["latitude_of_origin",0],PARAMETER["central_meridian",24],PARAMETER["scale_factor",0.9998],PARAMETER["false_easting",500000],PARAMETER["false_northing",0],AUTHORITY["EPSG","3346"],AXIS["Y",EAST],AXIS["X",NORTH]]
            </summary>
        </member>
        <member name="T:GMap.NET.PureProjection">
            <summary>
            defines projection
            </summary>
        </member>
        <member name="F:GMap.NET.PureProjection.MAX_VAL">
            <summary>
            MAX_VAL
            </summary>
        </member>
        <member name="M:GMap.NET.PureProjection.FromLatLngToPixel(System.Double,System.Double,System.Int32)">
            <summary>
            get pixel coordinates from lat/lng
            </summary>
            <param name="lat"></param>
            <param name="lng"></param>
            <param name="zoom"></param>
            <returns></returns>
        </member>
        <member name="M:GMap.NET.PureProjection.FromPixelToLatLng(System.Int64,System.Int64,System.Int32)">
            <summary>
            gets lat/lng coordinates from pixel coordinates
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="zoom"></param>
            <returns></returns>
        </member>
        <member name="M:GMap.NET.PureProjection.FromLatLngToPixel(GMap.NET.PointLatLng,System.Int32,System.Boolean)">
            <summary>
            get pixel coordinates from lat/lng
            </summary>
            <param name="p"></param>
            <param name="zoom"></param>
            <returns></returns>
        </member>
        <member name="M:GMap.NET.PureProjection.FromPixelToLatLng(GMap.NET.GPoint,System.Int32,System.Boolean)">
            <summary>
            gets lat/lng coordinates from pixel coordinates
            </summary>
            <param name="p"></param>
            <param name="zoom"></param>
            <returns></returns>
        </member>
        <member name="M:GMap.NET.PureProjection.FromPixelToTileXY(GMap.NET.GPoint)">
            <summary>
            gets tile coorddinate from pixel coordinates
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:GMap.NET.PureProjection.FromTileXYToPixel(GMap.NET.GPoint)">
            <summary>
            gets pixel coordinate from tile coordinate
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:GMap.NET.PureProjection.GetTileMatrixMinXY(System.Int32)">
            <summary>
            min. tile in tiles at custom zoom level
            </summary>
            <param name="zoom"></param>
            <returns></returns>
        </member>
        <member name="M:GMap.NET.PureProjection.GetTileMatrixMaxXY(System.Int32)">
            <summary>
            max. tile in tiles at custom zoom level
            </summary>
            <param name="zoom"></param>
            <returns></returns>
        </member>
        <member name="M:GMap.NET.PureProjection.GetTileMatrixSizeXY(System.Int32)">
            <summary>
            gets matrix size in tiles
            </summary>
            <param name="zoom"></param>
            <returns></returns>
        </member>
        <member name="M:GMap.NET.PureProjection.GetTileMatrixItemCount(System.Int32)">
            <summary>
            tile matrix size in pixels at custom zoom level
            </summary>
            <param name="zoom"></param>
            <returns></returns>
        </member>
        <member name="M:GMap.NET.PureProjection.GetTileMatrixSizePixel(System.Int32)">
            <summary>
            gets matrix size in pixels
            </summary>
            <param name="zoom"></param>
            <returns></returns>
        </member>
        <member name="M:GMap.NET.PureProjection.GetAreaTileList(GMap.NET.RectLatLng,System.Int32,System.Int32)">
            <summary>
            gets all tiles in rect at specific zoom
            </summary>
        </member>
        <member name="M:GMap.NET.PureProjection.GetGroundResolution(System.Int32,System.Double)">
            <summary>
            The ground resolution indicates the distance (in meters) on the ground that’s represented by a single pixel in the map.
            For example, at a ground resolution of 10 meters/pixel, each pixel represents a ground distance of 10 meters.
            </summary>
            <param name="zoom"></param>
            <param name="latitude"></param>
            <returns></returns>
        </member>
        <member name="F:GMap.NET.PureProjection.PI">
            <summary>
            PI
            </summary>
        </member>
        <member name="F:GMap.NET.PureProjection.HALF_PI">
            <summary>
            Half of PI
            </summary>
        </member>
        <member name="F:GMap.NET.PureProjection.TWO_PI">
            <summary>
            PI * 2
            </summary>
        </member>
        <member name="F:GMap.NET.PureProjection.EPSLoN">
            <summary>
            EPSLoN
            </summary>
        </member>
        <member name="F:GMap.NET.PureProjection.MAXLONG">
            <summary>
            MAXLONG
            </summary>
        </member>
        <member name="F:GMap.NET.PureProjection.DBLLONG">
            <summary>
            DBLLONG
            </summary>
        </member>
        <member name="M:GMap.NET.PureProjection.Sign(System.Double)">
            <summary>
             return the sign of an argument 
            </summary>
        </member>
        <member name="M:GMap.NET.PureProjection.SinCos(System.Double,System.Double@,System.Double@)">
            <summary>
            calculates the sine and cosine
            </summary>
        </member>
        <member name="M:GMap.NET.PureProjection.e0fn(System.Double)">
            <summary>
            computes the constants e0, e1, e2, and e3 which are used
            in a series for calculating the distance along a meridian.
            </summary>
            <param name="x">represents the eccentricity squared</param>
            <returns></returns>
        </member>
        <member name="M:GMap.NET.PureProjection.mlfn(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            computes the value of M which is the distance along a meridian
            from the Equator to latitude phi.
            </summary>
        </member>
        <member name="M:GMap.NET.PureProjection.GetUTMzone(System.Double)">
            <summary>
            calculates UTM zone number
            </summary>
            <param name="lon">Longitude in degrees</param>
            <returns></returns>
        </member>
        <member name="M:GMap.NET.PureProjection.Clip(System.Double,System.Double,System.Double)">
            <summary>
            Clips a number to the specified minimum and maximum values.
            </summary>
            <param name="n">The number to clip.</param>
            <param name="minValue">Minimum allowable value.</param>
            <param name="maxValue">Maximum allowable value.</param>
            <returns>The clipped value.</returns>
        </member>
        <member name="M:GMap.NET.PureProjection.GetDistance(GMap.NET.PointLatLng,GMap.NET.PointLatLng)">
            <summary>
            distance (in km) between two points specified by latitude/longitude
            The Haversine formula, http://www.movable-type.co.uk/scripts/latlong.html
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:GMap.NET.PureProjection.GetBearing(GMap.NET.PointLatLng,GMap.NET.PointLatLng)">
            <summary>
            Accepts two coordinates in degrees.
            </summary>
            <returns>A double value in degrees. From 0 to 360.</returns>
        </member>
        <member name="M:GMap.NET.PureProjection.FromGeodeticToCartesian(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Conversion from cartesian earth-sentered coordinates to geodetic coordinates in the given datum
            </summary>
            <param name="Lat"></param>
            <param name="Lon"></param>
            <param name="Height">Height above ellipsoid [m]</param>
            <param name="X"></param>
            <param name="Y"></param>
            <param name="Z"></param>
        </member>
        <member name="M:GMap.NET.PureProjection.FromCartesianTGeodetic(System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Conversion from cartesian earth-sentered coordinates to geodetic coordinates in the given datum
            </summary>
            <param name="X"></param>
            <param name="Y"></param>
            <param name="Z"></param>
            <param name="Lat"></param>
            <param name="Lon"></param>
        </member>
        <member name="P:GMap.NET.PureProjection.TileSize">
            <summary>
            size of tile
            </summary>
        </member>
        <member name="P:GMap.NET.PureProjection.Axis">
            <summary>
            Semi-major axis of ellipsoid, in meters
            </summary>
        </member>
        <member name="P:GMap.NET.PureProjection.Flattening">
            <summary>
            Flattening of ellipsoid
            </summary>
        </member>
        <member name="P:GMap.NET.PureProjection.Bounds">
            <summary>
            gets boundaries
            </summary>
        </member>
        <member name="T:GMap.NET.Projections.LKS92Projection">
            <summary>
            GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.01745329251994328,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]]
            PROJCS["LKS92 / Latvia TM",GEOGCS["LKS92",DATUM["D_Latvia_1992",SPHEROID["GRS_1980",6378137,298.257222101]],PRIMEM["Greenwich",0],UNIT["Degree",0.017453292519943295]],PROJECTION["Transverse_Mercator"],PARAMETER["latitude_of_origin",0],PARAMETER["central_meridian",24],PARAMETER["scale_factor",0.9996],PARAMETER["false_easting",500000],PARAMETER["false_northing",-6000000],UNIT["Meter",1]]
            </summary>
        </member>
        <member name="T:GMap.NET.Projections.MapyCZProjection">
            <summary>
            GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.01745329251994328,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]]
            PROJCS["Mapy.cz",GEOGCS["GCS_WGS_1984",DATUM["D_WGS_1984",SPHEROID["WGS_1984",6378137,298.257223563]],PRIMEM["Greenwich",0],UNIT["Degree",0.017453292519943295]],PROJECTION["Transverse_Mercator"],PARAMETER["latitude_of_origin",0],PARAMETER["central_meridian",15],PARAMETER["scale_factor",0.9996],PARAMETER["false_easting",134400000],PARAMETER["false_northing",-41600000],UNIT["1/32meter",0.03125]]
            </summary>
        </member>
        <member name="T:GMap.NET.Projections.MercatorProjection">
            <summary>
            The Mercator projection
            PROJCS["World_Mercator",GEOGCS["GCS_WGS_1984",DATUM["D_WGS_1984",SPHEROID["WGS_1984",6378137,298.257223563]],PRIMEM["Greenwich",0],UNIT["Degree",0.017453292519943295]],PROJECTION["Mercator"],PARAMETER["False_Easting",0],PARAMETER["False_Northing",0],PARAMETER["Central_Meridian",0],PARAMETER["standard_parallel_1",0],UNIT["Meter",1]]
            </summary>
        </member>
        <member name="T:GMap.NET.Projections.PlateCarreeProjection">
            <summary>
            Plate Carrée (literally, “plane square”) projection
            PROJCS["WGS 84 / World Equidistant Cylindrical",GEOGCS["GCS_WGS_1984",DATUM["D_WGS_1984",SPHEROID["WGS_1984",6378137,298.257223563]],PRIMEM["Greenwich",0],UNIT["Degree",0.017453292519943295]],UNIT["Meter",1]]
            </summary>
        </member>
        <member name="T:GMap.NET.Projections.PlateCarreeProjectionDarbAe">
             <summary>
             Plate Carrée (literally, “plane square”) projection
             PROJCS["WGS 84 / World Equidistant Cylindrical",GEOGCS["GCS_WGS_1984",DATUM["D_WGS_1984",SPHEROID["WGS_1984",6378137,298.257223563]],PRIMEM["Greenwich",0],UNIT["Degree",0.017453292519943295]],UNIT["Meter",1]]
             
            "spatialReference": 
            {"wkid":4326},"singleFusedMapCache":true,"tileInfo":  
            {"rows":256,"cols":256,"dpi":96,"format":"PNG8","compressionQuality":0,   
            "origin":{"x":-400,"y":400},"spatialReference":{"wkid":4326},"lods": 
            
            [{"level":0,"resolution":0.0118973050291514,"scale":5000000},
            {"level":1,"resolution":0.0059486525145757,"scale":2500000}, 
            {"level":2,"resolution":0.00297432625728785,"scale":1250000}, 
            {"level":3,"resolution":0.00118973050291514,"scale":500000}, 
            {"level":4,"resolution":0.00059486525145757,"scale":250000}, 
            {"level":5,"resolution":0.000356919150874542,"scale":150000},
            {"level":6,"resolution":0.000178459575437271,"scale":75000}, 
            {"level":7,"resolution":0.000118973050291514,"scale":50000}, 
            {"level":8,"resolution":5.9486525145757E-05,"scale":25000},
            {"level":9,"resolution":3.56919150874542E-05,"scale":15000},
            {"level":10,"resolution":1.90356880466422E-05,"scale":8000}, 
            {"level":11,"resolution":9.51784402332112E-06,"scale":4000}, 
            {"level":12,"resolution":4.75892201166056E-06,"scale":2000}]},
            
            "initialExtent":    
            {"xmin":42.1125196069871,"ymin":18.6650706214551,"xmax":65.698643558112 
            4,"ymax":29.4472987133981,"spatialReference":{"wkid":4326}},
            
            "fullExtent":   
            {"xmin":41.522866508209,"ymin":18.7071563263201,"xmax":66.2882966568906 
            ,"ymax":29.4052130085331,"spatialReference":{"wkid":4326}},
            
            "units":"esriDecimalDegrees"
             </summary>
        </member>
        <member name="T:GMap.NET.AccessMode">
            <summary>
            tile access mode
            </summary>
        </member>
        <member name="F:GMap.NET.AccessMode.ServerOnly">
            <summary>
            access only server
            </summary>
        </member>
        <member name="F:GMap.NET.AccessMode.ServerAndCache">
            <summary>
            access first server and caches localy
            </summary>
        </member>
        <member name="F:GMap.NET.AccessMode.CacheOnly">
            <summary>
            access only cache
            </summary>
        </member>
        <member name="M:GMap.NET.Extensions.GetValue``1(Alt.Runtime.Serialization.SerializationInfo,System.String)">
            <summary>
            Retrieves a value from the SerializationInfo of the given type.
            </summary>
            <typeparam name="T">The Type that we are attempting to de-serialize.</typeparam>
            <param name="info">The SerializationInfo.</param>
            <param name="key">The key of the value we wish to retrieve.</param>
            <returns>The value if found, otherwise null.</returns>
        </member>
        <member name="M:GMap.NET.Extensions.GetValue``1(Alt.Runtime.Serialization.SerializationInfo,System.String,``0)">
            <summary>
            Retrieves a value from the SerializationInfo of the given type.
            </summary>
            <typeparam name="T">The Type that we are attempting to de-serialize.</typeparam>
            <param name="info">The SerializationInfo.</param>
            <param name="key">The key of the value we wish to retrieve.</param>
            <param name="defaultValue">The default value if the de-serialized value was null.</param>
            <returns>The value if found, otherwise the default value.</returns>
        </member>
        <member name="M:GMap.NET.Extensions.GetStruct``1(Alt.Runtime.Serialization.SerializationInfo,System.String,``0)">
            <summary>
            Retrieves a value from the SerializationInfo of the given type for structs.
            </summary>
            <typeparam name="T">The Type that we are attempting to de-serialize.</typeparam>
            <param name="info">The SerializationInfo.</param>
            <param name="key">The key of the value we wish to retrieve.</param>
            <param name="defaultValue">The default value if the de-serialized value was null.</param>
            <returns>The value if found, otherwise the default value.</returns>
        </member>
        <member name="M:GMap.NET.Extensions.GetStruct``1(Alt.Runtime.Serialization.SerializationInfo,System.String,System.Nullable{``0})">
            <summary>
            Retrieves a value from the SerializationInfo of the given type for structs.
            </summary>
            <typeparam name="T">The Type that we are attempting to de-serialize.</typeparam>
            <param name="info">The SerializationInfo.</param>
            <param name="key">The key of the value we wish to retrieve.</param>
            <param name="defaultValue">The default value if the de-serialized value was null.</param>
            <returns>The value if found, otherwise the default value.</returns>
        </member>
        <member name="F:GMap.NET.GDirections.Summary">
            <summary>
            contains a short textual description for the route, suitable for naming and disambiguating the route from alternatives.
            </summary>
        </member>
        <member name="F:GMap.NET.GDirections.Duration">
            <summary>
            contains a human-readable representation of the duration.
            </summary>
        </member>
        <member name="F:GMap.NET.GDirections.DurationValue">
            <summary>
            contains a value of the duration.
            </summary>
        </member>
        <member name="F:GMap.NET.GDirections.Distance">
            <summary>
            contains a human-readable representation of the distance, displayed in units as used at the origin
            (or as overridden within the units parameter in the request), in the language specified in the request.
            (For example, miles and feet will be used for any origin within the United States.)
            </summary>
        </member>
        <member name="F:GMap.NET.GDirections.DistanceValue">
            <summary>
            contains a value of the distance.
            </summary>
        </member>
        <member name="F:GMap.NET.GDirections.StartLocation">
            <summary>
            contains the latitude/longitude coordinates of the origin of this leg. Because the Directions API
            calculates directions between locations by using the nearest transportation option (usually a road)
            at the start and end points, start_location may be different than the provided origin of this leg if,
            for example, a road is not near the origin.
            </summary>
        </member>
        <member name="F:GMap.NET.GDirections.EndLocation">
            <summary>
            contains the latitude/longitude coordinates of the given destination of this leg. Because the Directions
            API calculates directions between locations by using the nearest transportation option (usually a road)
            at the start and end points, end_location may be different than the provided destination of this leg if,
            for example, a road is not near the destination.
            </summary>
        </member>
        <member name="F:GMap.NET.GDirections.StartAddress">
            <summary>
            contains the human-readable address (typically a street address) reflecting the start_location of this leg.
            </summary>
        </member>
        <member name="F:GMap.NET.GDirections.EndAddress">
            <summary>
            contains the human-readable address (typically a street address) reflecting the end_location of this leg.
            </summary>
        </member>
        <member name="F:GMap.NET.GDirections.Copyrights">
            <summary>
            contains the copyrights text to be displayed for this route. You must handle and display this information yourself.
            </summary>
        </member>
        <member name="F:GMap.NET.GDirections.Steps">
            <summary>
            contains an array of steps denoting information about each separate step of the leg of the journey.
            </summary>
        </member>
        <member name="F:GMap.NET.GDirections.Route">
            <summary>
            contains all points of the route
            </summary>
        </member>
        <member name="F:GMap.NET.GDirectionStep.StartLocation">
            <summary>
            contains the location of the starting point of this step, as a single set of lat and lng fields.
            </summary>
        </member>
        <member name="F:GMap.NET.GDirectionStep.EndLocation">
            <summary>
            contains the location of the ending point of this step, as a single set of lat and lng fields.
            </summary>
        </member>
        <member name="F:GMap.NET.GDirectionStep.Duration">
            <summary>
             contains the typical time required to perform the step, until the next step. This field may be undefined if the duration is unknown.
            </summary>
        </member>
        <member name="F:GMap.NET.GDirectionStep.Distance">
            <summary>
            contains the distance covered by this step until the next step. This field may be undefined if the distance is unknown.
            </summary>
        </member>
        <member name="F:GMap.NET.GDirectionStep.HtmlInstructions">
            <summary>
            contains formatted instructions for this step, presented as an HTML text string.
            </summary>
        </member>
        <member name="F:GMap.NET.GDirectionStep.Points">
            <summary>
            points of the step
            </summary>
        </member>
        <member name="T:GMap.NET.GMaps">
            <summary>
            maps manager
            </summary>
        </member>
        <member name="F:GMap.NET.GMaps.Mode">
            <summary>
            tile access mode
            </summary>
        </member>
        <member name="F:GMap.NET.GMaps.UseRouteCache">
            <summary>
            is map ussing cache for routing
            </summary>
        </member>
        <member name="F:GMap.NET.GMaps.UseGeocoderCache">
            <summary>
            is map using cache for geocoder
            </summary>
        </member>
        <member name="F:GMap.NET.GMaps.UseDirectionsCache">
            <summary>
            is map using cache for directions
            </summary>
        </member>
        <member name="F:GMap.NET.GMaps.UsePlacemarkCache">
            <summary>
            is map using cache for placemarks
            </summary>
        </member>
        <member name="F:GMap.NET.GMaps.UseUrlCache">
            <summary>
            is map ussing cache for other url
            </summary>
        </member>
        <member name="F:GMap.NET.GMaps.UseMemoryCache">
            <summary>
            is map using memory cache for tiles
            </summary>
        </member>
        <member name="F:GMap.NET.GMaps.MemoryCache">
            <summary>
            MemoryCache provider
            </summary>
        </member>
        <member name="F:GMap.NET.GMaps.ShuffleTilesOnLoad">
            <summary>
            load tiles in random sequence
            </summary>
        </member>
        <member name="F:GMap.NET.GMaps.tileCacheQueue">
            <summary>
            tile queue to cache
            </summary>
        </member>
        <member name="F:GMap.NET.GMaps.CacheEngine">
            <summary>
            cache worker
            </summary>
        </member>
        <member name="M:GMap.NET.GMaps.SQLitePing">
            <summary>
            triggers dynamic sqlite loading, 
            call this before you use sqlite for other reasons than caching maps
            </summary>
        </member>
        <member name="M:GMap.NET.GMaps.ExportToGMDB(System.String)">
            <summary>
            exports current map cache to GMDB file
            if file exsist only new records will be added
            otherwise file will be created and all data exported
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:GMap.NET.GMaps.ImportFromGMDB(System.String)">
            <summary>
            imports GMDB file to current map cache
            only new records will be added
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:GMap.NET.GMaps.EnqueueCacheTask(GMap.NET.Internals.CacheQueueItem)">
            <summary>
            enqueueens tile to cache
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:GMap.NET.GMaps.CancelTileCaching">
            <summary>
            immediately stops background tile caching, call it if you want fast exit the process
            </summary>
        </member>
        <member name="M:GMap.NET.GMaps.CacheEngineLoop">
            <summary>
            live for cache ;}
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:GMap.NET.GMaps.ExportGPX(System.Collections.Generic.IEnumerable{System.Collections.Generic.List{GMap.NET.GpsLog}},System.String)">
            <summary>
            exports gps data to gpx file
            </summary>
            <param name="log">gps data</param>
            <param name="gpxFile">file to export</param>
            <returns>true if success</returns>
        </member>
        <member name="M:GMap.NET.GMaps.GetImageFrom(GMap.NET.MapProviders.GMapProvider,GMap.NET.GPoint,System.Int32,System.Exception@)">
            <summary>
            gets image from tile server
            </summary>
            <param name="provider"></param>
            <param name="pos"></param>
            <param name="zoom"></param>
            <returns></returns>
        </member>
        <member name="M:GMap.NET.GMaps.EnableTileHost(System.Int32)">
            <summary>
            turns on tile host
            </summary>
            <param name="port"></param>
        </member>
        <member name="M:GMap.NET.GMaps.DisableTileHost">
            <summary>
            turns off tile host
            </summary>
            <param name="port"></param>
        </member>
        <member name="P:GMap.NET.GMaps.PrimaryCache">
            <summary>
            primary cache provider, by default: ultra fast SQLite!
            </summary>
        </member>
        <member name="P:GMap.NET.GMaps.SecondaryCache">
            <summary>
            secondary cache provider, by default: none,
            use it if you have server in your local network
            </summary>
        </member>
        <member name="P:GMap.NET.GMaps.IsRunningOnMono">
            <summary>
            return true if running on mono
            </summary>
            <returns></returns>
        </member>
        <member name="P:GMap.NET.GMaps.CacheOnIdleRead">
            <summary>
            delays writing tiles to cache while performing reads
            </summary>
        </member>
        <member name="P:GMap.NET.GMaps.BoostCacheEngine">
            <summary>
            disables delay between saving tiles into database/cache
            </summary>
        </member>
        <member name="T:GMap.NET.GPoint">
            <summary>
            the point ;}
            </summary>
        </member>
        <member name="T:GMap.NET.gpxType">
            <remarks/>
        </member>
        <member name="P:GMap.NET.gpxType.metadata">
            <remarks/>
        </member>
        <member name="P:GMap.NET.gpxType.wpt">
            <remarks/>
        </member>
        <member name="P:GMap.NET.gpxType.rte">
            <remarks/>
        </member>
        <member name="P:GMap.NET.gpxType.trk">
            <remarks/>
        </member>
        <member name="P:GMap.NET.gpxType.extensions">
            <remarks/>
        </member>
        <member name="P:GMap.NET.gpxType.version">
            <remarks/>
        </member>
        <member name="P:GMap.NET.gpxType.creator">
            <remarks/>
        </member>
        <member name="T:GMap.NET.metadataType">
            <remarks/>
        </member>
        <member name="P:GMap.NET.metadataType.name">
            <remarks/>
        </member>
        <member name="P:GMap.NET.metadataType.desc">
            <remarks/>
        </member>
        <member name="P:GMap.NET.metadataType.author">
            <remarks/>
        </member>
        <member name="P:GMap.NET.metadataType.copyright">
            <remarks/>
        </member>
        <member name="P:GMap.NET.metadataType.link">
            <remarks/>
        </member>
        <member name="P:GMap.NET.metadataType.time">
            <remarks/>
        </member>
        <member name="P:GMap.NET.metadataType.timeSpecified">
            <remarks/>
        </member>
        <member name="P:GMap.NET.metadataType.keywords">
            <remarks/>
        </member>
        <member name="P:GMap.NET.metadataType.bounds">
            <remarks/>
        </member>
        <member name="P:GMap.NET.metadataType.extensions">
            <remarks/>
        </member>
        <member name="T:GMap.NET.personType">
            <remarks/>
        </member>
        <member name="P:GMap.NET.personType.name">
            <remarks/>
        </member>
        <member name="P:GMap.NET.personType.email">
            <remarks/>
        </member>
        <member name="P:GMap.NET.personType.link">
            <remarks/>
        </member>
        <member name="T:GMap.NET.emailType">
            <remarks/>
        </member>
        <member name="P:GMap.NET.emailType.id">
            <remarks/>
        </member>
        <member name="P:GMap.NET.emailType.domain">
            <remarks/>
        </member>
        <member name="T:GMap.NET.trksegType">
            <remarks/>
        </member>
        <member name="P:GMap.NET.trksegType.trkpt">
            <remarks/>
        </member>
        <member name="P:GMap.NET.trksegType.extensions">
            <remarks/>
        </member>
        <member name="T:GMap.NET.wptType">
            <remarks/>
        </member>
        <member name="P:GMap.NET.wptType.ele">
            <remarks/>
        </member>
        <member name="P:GMap.NET.wptType.eleSpecified">
            <remarks/>
        </member>
        <member name="P:GMap.NET.wptType.time">
            <remarks/>
        </member>
        <member name="P:GMap.NET.wptType.timeSpecified">
            <remarks/>
        </member>
        <member name="P:GMap.NET.wptType.magvar">
            <remarks/>
        </member>
        <member name="P:GMap.NET.wptType.magvarSpecified">
            <remarks/>
        </member>
        <member name="P:GMap.NET.wptType.geoidheight">
            <remarks/>
        </member>
        <member name="P:GMap.NET.wptType.geoidheightSpecified">
            <remarks/>
        </member>
        <member name="P:GMap.NET.wptType.name">
            <remarks/>
        </member>
        <member name="P:GMap.NET.wptType.cmt">
            <remarks/>
        </member>
        <member name="P:GMap.NET.wptType.desc">
            <remarks/>
        </member>
        <member name="P:GMap.NET.wptType.src">
            <remarks/>
        </member>
        <member name="P:GMap.NET.wptType.link">
            <remarks/>
        </member>
        <member name="P:GMap.NET.wptType.sym">
            <remarks/>
        </member>
        <member name="P:GMap.NET.wptType.type">
            <remarks/>
        </member>
        <member name="P:GMap.NET.wptType.fix">
            <remarks/>
        </member>
        <member name="P:GMap.NET.wptType.fixSpecified">
            <remarks/>
        </member>
        <member name="P:GMap.NET.wptType.sat">
            <remarks/>
        </member>
        <member name="P:GMap.NET.wptType.hdop">
            <remarks/>
        </member>
        <member name="P:GMap.NET.wptType.hdopSpecified">
            <remarks/>
        </member>
        <member name="P:GMap.NET.wptType.vdop">
            <remarks/>
        </member>
        <member name="P:GMap.NET.wptType.vdopSpecified">
            <remarks/>
        </member>
        <member name="P:GMap.NET.wptType.pdop">
            <remarks/>
        </member>
        <member name="P:GMap.NET.wptType.pdopSpecified">
            <remarks/>
        </member>
        <member name="P:GMap.NET.wptType.ageofdgpsdata">
            <remarks/>
        </member>
        <member name="P:GMap.NET.wptType.ageofdgpsdataSpecified">
            <remarks/>
        </member>
        <member name="P:GMap.NET.wptType.dgpsid">
            <remarks/>
        </member>
        <member name="P:GMap.NET.wptType.extensions">
            <remarks/>
        </member>
        <member name="P:GMap.NET.wptType.lat">
            <remarks/>
        </member>
        <member name="P:GMap.NET.wptType.lon">
            <remarks/>
        </member>
        <member name="T:GMap.NET.linkType">
            <remarks/>
        </member>
        <member name="P:GMap.NET.linkType.text">
            <remarks/>
        </member>
        <member name="P:GMap.NET.linkType.type">
            <remarks/>
        </member>
        <member name="P:GMap.NET.linkType.href">
            <remarks/>
        </member>
        <member name="T:GMap.NET.fixType">
            <remarks/>
        </member>
        <member name="F:GMap.NET.fixType.none">
            <remarks/>
        </member>
        <member name="F:GMap.NET.fixType.Item2d">
            <remarks/>
        </member>
        <member name="F:GMap.NET.fixType.Item3d">
            <remarks/>
        </member>
        <member name="F:GMap.NET.fixType.dgps">
            <remarks/>
        </member>
        <member name="F:GMap.NET.fixType.pps">
            <remarks/>
        </member>
        <member name="T:GMap.NET.extensionsType">
            <remarks/>
        </member>
        <member name="P:GMap.NET.extensionsType.Any">
            <remarks/>
        </member>
        <member name="T:GMap.NET.trkType">
            <remarks/>
        </member>
        <member name="P:GMap.NET.trkType.name">
            <remarks/>
        </member>
        <member name="P:GMap.NET.trkType.cmt">
            <remarks/>
        </member>
        <member name="P:GMap.NET.trkType.desc">
            <remarks/>
        </member>
        <member name="P:GMap.NET.trkType.src">
            <remarks/>
        </member>
        <member name="P:GMap.NET.trkType.link">
            <remarks/>
        </member>
        <member name="P:GMap.NET.trkType.number">
            <remarks/>
        </member>
        <member name="P:GMap.NET.trkType.type">
            <remarks/>
        </member>
        <member name="P:GMap.NET.trkType.extensions">
            <remarks/>
        </member>
        <member name="P:GMap.NET.trkType.trkseg">
            <remarks/>
        </member>
        <member name="T:GMap.NET.rteType">
            <remarks/>
        </member>
        <member name="P:GMap.NET.rteType.name">
            <remarks/>
        </member>
        <member name="P:GMap.NET.rteType.cmt">
            <remarks/>
        </member>
        <member name="P:GMap.NET.rteType.desc">
            <remarks/>
        </member>
        <member name="P:GMap.NET.rteType.src">
            <remarks/>
        </member>
        <member name="P:GMap.NET.rteType.link">
            <remarks/>
        </member>
        <member name="P:GMap.NET.rteType.number">
            <remarks/>
        </member>
        <member name="P:GMap.NET.rteType.type">
            <remarks/>
        </member>
        <member name="P:GMap.NET.rteType.extensions">
            <remarks/>
        </member>
        <member name="P:GMap.NET.rteType.rtept">
            <remarks/>
        </member>
        <member name="T:GMap.NET.boundsType">
            <remarks/>
        </member>
        <member name="P:GMap.NET.boundsType.minlat">
            <remarks/>
        </member>
        <member name="P:GMap.NET.boundsType.minlon">
            <remarks/>
        </member>
        <member name="P:GMap.NET.boundsType.maxlat">
            <remarks/>
        </member>
        <member name="P:GMap.NET.boundsType.maxlon">
            <remarks/>
        </member>
        <member name="T:GMap.NET.copyrightType">
            <remarks/>
        </member>
        <member name="P:GMap.NET.copyrightType.year">
            <remarks/>
        </member>
        <member name="P:GMap.NET.copyrightType.license">
            <remarks/>
        </member>
        <member name="P:GMap.NET.copyrightType.author">
            <remarks/>
        </member>
        <member name="T:GMap.NET.GRect">
            <summary>
            the rect
            </summary>
        </member>
        <member name="T:GMap.NET.GSize">
            <summary>
            the size
            </summary>
        </member>
        <!-- Некорректный комментарий в формате XML для члена "T:GMap.NET.LanguageType" проигнорирован -->
        <member name="T:GMap.NET.MouseWheelZoomType">
            <summary>
            map zooming type
            </summary>
        </member>
        <member name="F:GMap.NET.MouseWheelZoomType.MousePositionAndCenter">
            <summary>
            zooms map to current mouse position and makes it map center
            </summary>
        </member>
        <member name="F:GMap.NET.MouseWheelZoomType.MousePositionWithoutCenter">
            <summary>
            zooms to current mouse position, but doesn't make it map center,
            google/bing style ;}
            </summary>
        </member>
        <member name="F:GMap.NET.MouseWheelZoomType.ViewCenter">
            <summary>
            zooms map to current view center
            </summary>
        </member>
        <member name="T:GMap.NET.Placemark">
            <summary>
            represents place info
            </summary>
        </member>
        <member name="F:GMap.NET.Placemark.Accuracy">
            <summary>
            the accuracy of address
            </summary>
        </member>
        <member name="P:GMap.NET.Placemark.Address">
            <summary>
            the address
            </summary>
        </member>
        <member name="T:GMap.NET.PointLatLng">
            <summary>
            the point of coordinates
            </summary>
        </member>
        <member name="P:GMap.NET.PointLatLng.IsEmpty">
            <summary>
            returns true if coordinates wasn't assigned
            </summary>
        </member>
        <member name="T:GMap.NET.PureImageCache">
            <summary>
            pure abstraction for image cache
            </summary>
        </member>
        <member name="M:GMap.NET.PureImageCache.PutImageToCache(System.Byte[],System.Int32,GMap.NET.GPoint,System.Int32)">
            <summary>
            puts image to db
            </summary>
            <param name="tile"></param>
            <param name="type"></param>
            <param name="pos"></param>
            <param name="zoom"></param>
            <returns></returns>
        </member>
        <member name="M:GMap.NET.PureImageCache.GetImageFromCache(System.Int32,GMap.NET.GPoint,System.Int32)">
            <summary>
            gets image from db
            </summary>
            <param name="type"></param>
            <param name="pos"></param>
            <param name="zoom"></param>
            <returns></returns>
        </member>
        <member name="M:GMap.NET.PureImageCache.DeleteOlderThan(System.DateTime,System.Nullable{System.Int32})">
            <summary>
            delete old tiles beyond a supplied date
            </summary>
            <param name="date">Tiles older than this will be deleted.</param>
            <param name="type">provider dbid or null to use all providers</param>
            <returns>The number of deleted tiles.</returns>
        </member>
        <member name="T:GMap.NET.RectLatLng">
            <summary>
            the rect of coordinates
            </summary>
        </member>
        <member name="P:GMap.NET.RectLatLng.IsEmpty">
            <summary>
            returns true if coordinates wasn't assigned
            </summary>
        </member>
        <member name="T:GMap.NET.SizeLatLng">
            <summary>
            the size of coordinates
            </summary>
        </member>
        <member name="T:GMap.NET.GeoCoderStatusCode">
            <summary>
            GeoCoder StatusCode
            </summary>
        </member>
        <member name="F:GMap.NET.GeoCoderStatusCode.Unknow">
            <summary>
            unknow response
            </summary>
        </member>
        <member name="F:GMap.NET.GeoCoderStatusCode.G_GEO_SUCCESS">
            <summary>
            No errors occurred; the address was successfully parsed and its geocode has been returned.
            </summary>
        </member>
        <member name="F:GMap.NET.GeoCoderStatusCode.G_GEO_BAD_REQUEST">
            <summary>
            A directions request could not be successfully parsed.
            For example, the request may have been rejected if it contained more than the maximum number of waypoints allowed.
            </summary>  
        </member>
        <member name="F:GMap.NET.GeoCoderStatusCode.G_GEO_SERVER_ERROR">
            <summary>
            A geocoding or directions request could not be successfully processed, yet the exact reason for the failure is not known.
            </summary>
        </member>
        <member name="F:GMap.NET.GeoCoderStatusCode.G_GEO_MISSING_QUERY">
            <summary>
            The HTTP q parameter was either missing or had no value.
            For geocoding requests, this means that an empty address was specified as input. For directions requests, this means that no query was specified in the input.
            </summary>
        </member>
        <member name="F:GMap.NET.GeoCoderStatusCode.G_GEO_MISSING_ADDRESS">
            <summary>
            Synonym for G_GEO_MISSING_QUERY.
            </summary>
        </member>
        <member name="F:GMap.NET.GeoCoderStatusCode.G_GEO_UNKNOWN_ADDRESS">
            <summary>
             No corresponding geographic location could be found for the specified address.
             This may be due to the fact that the address is relatively new, or it may be incorrect.
            </summary>
        </member>
        <member name="F:GMap.NET.GeoCoderStatusCode.G_GEO_UNAVAILABLE_ADDRESS">
            <summary>
            The geocode for the given address or the route for the given directions query cannot be returned due to legal or contractual reasons.
            </summary>
        </member>
        <member name="F:GMap.NET.GeoCoderStatusCode.G_GEO_UNKNOWN_DIRECTIONS">
            <summary>
            The GDirections object could not compute directions between the points mentioned in the query.
            This is usually because there is no route available between the two points, or because we do not have data for routing in that region.
            </summary>
        </member>
        <member name="F:GMap.NET.GeoCoderStatusCode.G_GEO_BAD_KEY">
            <summary>
            The given key is either invalid or does not match the domain for which it was given.
            </summary>
        </member>
        <member name="F:GMap.NET.GeoCoderStatusCode.G_GEO_TOO_MANY_QUERIES">
            <summary>
            The given key has gone over the requests limit in the 24 hour period or has submitted too many requests in too short a period of time.
            If you're sending multiple requests in parallel or in a tight loop, use a timer or pause in your code to make sure you don't send the requests too quickly.
            </summary>
        </member>
        <member name="F:GMap.NET.GeoCoderStatusCode.ExceptionInCode">
            <summary>
            indicates that exception occured during execution
            </summary>
        </member>
        <member name="T:GMap.NET.DirectionsStatusCode">
            <summary>
            Direction StatusCode
            </summary>
        </member>
        <member name="F:GMap.NET.DirectionsStatusCode.OK">
            <summary>
            indicates the response contains a valid result.
            </summary>
        </member>
        <member name="F:GMap.NET.DirectionsStatusCode.NOT_FOUND">
            <summary>
            indicates at least one of the locations specified in the requests's origin, destination, or waypoints could not be geocoded.
            </summary>
        </member>
        <member name="F:GMap.NET.DirectionsStatusCode.ZERO_RESULTS">
            <summary>
            indicates no route could be found between the origin and destination.
            </summary>
        </member>
        <member name="F:GMap.NET.DirectionsStatusCode.MAX_WAYPOINTS_EXCEEDED">
            <summary>
             indicates that too many waypointss were provided in the request The maximum allowed waypoints is 8, plus the origin, and destination.
            </summary>
        </member>
        <member name="F:GMap.NET.DirectionsStatusCode.INVALID_REQUEST">
            <summary>
            indicates that the provided request was invalid.
            </summary>
        </member>
        <member name="F:GMap.NET.DirectionsStatusCode.OVER_QUERY_LIMIT">
            <summary>
            indicates the service has received too many requests from your application within the allowed time period.
            </summary>
        </member>
        <member name="F:GMap.NET.DirectionsStatusCode.REQUEST_DENIED">
            <summary>
            indicates that the service denied use of the directions service by your application.
            </summary>
        </member>
        <member name="F:GMap.NET.DirectionsStatusCode.UNKNOWN_ERROR">
            <summary>
            indicates a directions request could not be processed due to a server error. The request may succeed if you try again.
            </summary>
        </member>
        <member name="F:GMap.NET.DirectionsStatusCode.ExceptionInCode">
            <summary>
            indicates that exception occured during execution
            </summary>
        </member>
        <member name="M:Alt.Sketch.Demo.GMap.NET.Stuff.GetRoutesFromMobileLog(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Double})">
            <summary>
            gets routes from gpsd log file
            </summary>
            <param name="gpsdLogFile"></param>
            <param name="start">start time(UTC) of route, null to read from very start</param>
            <param name="end">end time(UTC) of route, null to read to the very end</param>
            <param name="maxPositionDilutionOfPrecision">max value of PositionDilutionOfPrecision, null to get all</param>
            <returns></returns>
        </member>
        <member name="M:Alt.Sketch.Demo.GMap.NET.Stuff.GetVilniusTransportData(Alt.Sketch.Demo.GMap.NET.TransportType,System.String,System.Collections.Generic.List{Alt.Sketch.Demo.GMap.NET.VehicleData})">
            <summary>
            gets realtime data from public transport in city vilnius of lithuania
            </summary>
            <param name="type">type of transport</param>
            <param name="line">linenum or null to get all</param>
            <param name="ret"></param>
        </member>
        <member name="T:Alt.Sketch.Demo.GMap.NET.Map">
            <summary>
            custom map of GMapControl
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Align">
            <summary>
            Utility class for manipulating control's position according to its parent. Rarely needed, use control.Dock.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Align.Center(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Centers the control inside its parent.
            </summary>
            <param name="control">Control to center.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Align.AlignLeft(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Moves the control to the left of its parent.
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Align.CenterHorizontally(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Centers the control horizontally inside its parent.
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Align.AlignRight(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Moves the control to the right of its parent.
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Align.AlignTop(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Moves the control to the top of its parent.
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Align.CenterVertically(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Centers the control vertically inside its parent.
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Align.AlignBottom(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Moves the control to the bottom of its parent.
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Align.PlaceDownLeft(Alt.GUI.Temporary.Gwen.Control.Base,Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Places the control below other control (left aligned), taking margins into account.
            </summary>
            <param name="control">Control to place.</param>
            <param name="anchor">Anchor control.</param>
            <param name="spacing">Optional spacing.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Align.PlaceRightBottom(Alt.GUI.Temporary.Gwen.Control.Base,Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Places the control to the right of other control (bottom aligned), taking margins into account.
            </summary>
            <param name="control">Control to place.</param>
            <param name="anchor">Anchor control.</param>
            <param name="spacing">Optional spacing.</param>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.ControlInternal.CategoryButton">
            <summary>
            Item in CollapsibleCategory.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.Button">
            <summary>
            Button control.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Button.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Control constructor.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Button.Toggle">
            <summary>
            Toggles the button.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Button.Press">
            <summary>
            "Clicks" the button.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Button.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Button.OnMouseClickedLeft(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Handler invoked on mouse click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="down">If set to <c>true</c> mouse button is down.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Button.OnClicked">
            <summary>
            Internal OnPressed implementation.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Button.SetImage(System.String)">
            <summary>
            Sets the button's image.
            </summary>
            <param name="textureName">Texture name. Null to remove.</param>
            <param name="center">Determines whether the image should be centered.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Button.SizeToContents">
            <summary>
            Sizes to contents.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Button.OnKeySpace(System.Boolean)">
            <summary>
            Handler for Space keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Button.OnAccelerator">
            <summary>
            Default accelerator handler.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Button.Layout(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Button.UpdateColors">
            <summary>
            Updates control colors.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Button.OnMouseDoubleClickedLeft(System.Int32,System.Int32)">
            <summary>
            Handler invoked on mouse double click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.Button.Clicked">
            <summary>
            Invoked when the button is released.
            </summary>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.Button.Pressed">
            <summary>
            Invoked when the button is pressed.
            </summary>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.Button.Released">
            <summary>
            Invoked when the button is released.
            </summary>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.Button.Toggled">
            <summary>
            Invoked when the button's toggle state has changed.
            </summary>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.Button.ToggledOn">
            <summary>
            Invoked when the button's toggle state has changed to On.
            </summary>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.Button.ToggledOff">
            <summary>
            Invoked when the button's toggle state has changed to Off.
            </summary>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.Button.DoubleClickedLeft">
            <summary>
            Invoked when the button has been double clicked.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Button.IsDepressed">
            <summary>
            Indicates whether the button is depressed.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Button.IsToggle">
            <summary>
            Indicates whether the button is toggleable.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Button.ToggleState">
            <summary>
            Determines the button's toggle state.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.CategoryButton.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.ControlInternal.CategoryButton"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.CategoryButton.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.CategoryButton.UpdateColors">
            <summary>
            Updates control colors.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.ControlInternal.CategoryHeaderButton">
            <summary>
            Header of CollapsibleCategory.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.CategoryHeaderButton.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.ControlInternal.CategoryHeaderButton"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.CategoryHeaderButton.UpdateColors">
            <summary>
            Updates control colors.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.ControlInternal.CloseButton">
            <summary>
            Window close button.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.CloseButton.#ctor(Alt.GUI.Temporary.Gwen.Control.Base,Alt.GUI.Temporary.Gwen.Control.WindowControl)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.ControlInternal.CloseButton"/> class.
            </summary>
            <param name="parent">Parent control.</param>
            <param name="owner">Window that owns this button.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.CloseButton.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.ControlInternal.ColorButton">
            <summary>
            Property button.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.ColorButton.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.ControlInternal.ColorButton"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.ColorButton.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.ControlInternal.ColorButton.Color">
            <summary>
            Current color value.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.ControlInternal.ColorDisplay">
            <summary>
            Color square.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.ColorDisplay.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.ControlInternal.ColorDisplay"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.ColorDisplay.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.ControlInternal.ColorDisplay.Color">
            <summary>
            Current color.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.ControlInternal.DownArrow">
            <summary>
            ComboBox arrow.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.DownArrow.#ctor(Alt.GUI.Temporary.Gwen.Control.ComboBox)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.ControlInternal.DownArrow"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.DownArrow.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.ControlInternal.Dragger">
            <summary>
            Base for controls that can be dragged by mouse.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.Dragger.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.ControlInternal.Dragger"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.Dragger.OnMouseClickedLeft(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Handler invoked on mouse click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="down">If set to <c>true</c> mouse button is down.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.Dragger.OnMouseMoved(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Handler invoked on mouse moved event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="dx">X change.</param>
            <param name="dy">Y change.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.Dragger.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.ControlInternal.Dragger.IsHeld">
            <summary>
            Indicates if the control is being dragged.
            </summary>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.ControlInternal.Dragger.Dragged">
            <summary>
            Event invoked when the control position has been changed.
            </summary>
        </member>
        <!-- Некорректный комментарий в формате XML для члена "T:Alt.GUI.Temporary.Gwen.ControlInternal.Highlight" проигнорирован -->
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.Highlight.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.ControlInternal.Highlight"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.Highlight.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.ControlInternal.MenuDivider">
            <summary>
            Divider menu item.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.MenuDivider.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.ControlInternal.MenuDivider"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.MenuDivider.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.ControlInternal.Modal">
            <summary>
            Modal control for windows.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.Modal.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.ControlInternal.Modal"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.Modal.Layout(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.Modal.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.ControlInternal.PropertyRowLabel">
            <summary>
            Label for PropertyRow.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.PropertyRowLabel.#ctor(Alt.GUI.Temporary.Gwen.Control.PropertyRow)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.ControlInternal.PropertyRowLabel"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.PropertyRowLabel.UpdateColors">
            <summary>
            Updates control colors.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.ControlInternal.PropertyTreeNode">
            <summary>
            Properties node.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.TreeNode">
            <summary>
            Tree control node.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TreeNode.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.TreeNode"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TreeNode.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TreeNode.Layout(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TreeNode.PostLayout(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Function invoked after layout.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TreeNode.AddNode(System.String)">
            <summary>
            Adds a new child node.
            </summary>
            <param name="label">Node's label.</param>
            <returns>Newly created control.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TreeNode.Open">
            <summary>
            Opens the node.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TreeNode.Close">
            <summary>
            Closes the node.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TreeNode.ExpandAll">
            <summary>
            Opens the node and all child nodes.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TreeNode.UnselectAll">
            <summary>
            Clears the selection on the node and all child nodes.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TreeNode.OnToggleButtonPress(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Handler for the toggle button.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TreeNode.OnDoubleClickName(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Handler for label double click.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TreeNode.OnClickName(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Handler for label click.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TreeNode.FindChildByText(System.String)">
            <summary>
            Finds a child by text.
            </summary>
            <param name="name">Child label text.</param>
            <param name="recursive">Determines whether the search should be recursive.</param>
            <returns>Found control or null.</returns>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.TreeNode.IsRoot">
            <summary>
            Indicates whether this is a root node.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.TreeNode.TreeControl">
            <summary>
            Parent tree control.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.TreeNode.IsSelectable">
            <summary>
            Determines whether the node is selectable.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.TreeNode.IsSelected">
            <summary>
            Indicates whether the node is selected.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.TreeNode.Text">
            <summary>
            Node's label.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.TreeNode.TextColor">
            <summary>
            Text color.
            </summary>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.TreeNode.LabelPressed">
            <summary>
            Invoked when the node label has been pressed.
            </summary>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.TreeNode.SelectionChanged">
            <summary>
            Invoked when the node's selected state has changed.
            </summary>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.TreeNode.Selected">
            <summary>
            Invoked when the node has been selected.
            </summary>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.TreeNode.Unselected">
            <summary>
            Invoked when the node has been unselected.
            </summary>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.TreeNode.Expanded">
            <summary>
            Invoked when the node has been expanded.
            </summary>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.TreeNode.Collapsed">
            <summary>
            Invoked when the node has been collapsed.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.PropertyTreeNode.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.ControlInternal.PropertyTreeNode"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.PropertyTreeNode.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.ControlInternal.Resizer">
            <summary>
            Grab point for resizing.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.Resizer.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.ControlInternal.Resizer"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.Resizer.OnMouseMoved(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Handler invoked on mouse moved event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="dx">X change.</param>
            <param name="dy">Y change.</param>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.ControlInternal.Resizer.Resized">
            <summary>
            Invoked when the control has been resized.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.ControlInternal.Resizer.ResizeDir">
            <summary>
            Gets or sets the sizing direction.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.ControlInternal.RightArrow">
            <summary>
            Submenu indicator.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.RightArrow.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.ControlInternal.RightArrow"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.RightArrow.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.ControlInternal.ScrollBarBar">
            <summary>
            Scrollbar bar.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.ScrollBarBar.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.ControlInternal.ScrollBarBar"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.ScrollBarBar.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.ScrollBarBar.OnMouseMoved(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Handler invoked on mouse moved event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="dx">X change.</param>
            <param name="dy">Y change.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.ScrollBarBar.OnMouseClickedLeft(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Handler invoked on mouse click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="down">If set to <c>true</c> mouse button is down.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.ScrollBarBar.Layout(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.ControlInternal.ScrollBarBar.IsHorizontal">
            <summary>
            Indicates whether the bar is horizontal.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.ControlInternal.ScrollBarBar.IsVertical">
            <summary>
            Indicates whether the bar is vertical.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.ControlInternal.ScrollBarButton">
            <summary>
            Scrollbar button.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.ScrollBarButton.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.ControlInternal.ScrollBarButton"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.ScrollBarButton.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.ControlInternal.SliderBar">
            <summary>
            Slider bar.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.SliderBar.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.ControlInternal.SliderBar"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.SliderBar.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.ControlInternal.SliderBar.IsHorizontal">
            <summary>
            Indicates whether the bar is horizontal.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.ControlInternal.SplitterBar">
            <summary>
            Splitter bar.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.SplitterBar.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.ControlInternal.SplitterBar"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.SplitterBar.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.SplitterBar.Layout(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.ControlInternal.TabControlInner">
            <summary>
            Inner panel of tab control.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.TabControlInner.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.ControlInternal.TabControlInner"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.TabControlInner.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.ControlInternal.Text">
            <summary>
            Displays text. Always sized to contents.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.Text.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.ControlInternal.Text"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.Text.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.Text.Layout(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.Text.OnScaleChanged">
            <summary>
            Handler invoked when control's scale changes.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.Text.SizeToContents">
            <summary>
            Sizes the control to its contents.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.Text.GetCharacterPosition(System.Int32)">
            <summary>
            Gets the coordinates of specified character in the text.
            </summary>
            <param name="index">Character index.</param>
            <returns>Character position in local coordinates.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.Text.GetClosestCharacter(Alt.Sketch.PointI)">
            <summary>
            Searches for a character closest to given point.
            </summary>
            <param name="p">PointI.</param>
            <returns>Character index.</returns>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.ControlInternal.Text.Font">
            <summary>
            Font used to display the text.
            </summary>
            <remarks>
            The font is not being disposed by this class.
            </remarks>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.ControlInternal.Text.String">
            <summary>
            Text to display.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.ControlInternal.Text.TextColor">
            <summary>
            Text color.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.ControlInternal.Text.Length">
            <summary>
            Text length in characters.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.ControlInternal.Text.TextColorOverride">
            <summary>
            Text color override - used by tooltips.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.ControlInternal.Text.TextOverride">
            <summary>
            Text override - used to display different string.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.ControlInternal.TreeNodeLabel">
            <summary>
            Tree node label.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.TreeNodeLabel.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.ControlInternal.TreeNodeLabel"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.TreeNodeLabel.UpdateColors">
            <summary>
            Updates control colors.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.ControlInternal.TreeToggleButton">
            <summary>
            Tree node toggle button (the little plus sign).
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.TreeToggleButton.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.ControlInternal.TreeToggleButton"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.TreeToggleButton.RenderFocus(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the focus overlay.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.TreeToggleButton.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.ControlInternal.UpDownButton_Down">
            <summary>
            Numeric down arrow.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.UpDownButton_Down.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.ControlInternal.UpDownButton_Down"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.UpDownButton_Down.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.ControlInternal.UpDownButton_Up">
            <summary>
            Numeric up arrow.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.UpDownButton_Up.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.ControlInternal.UpDownButton_Up"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ControlInternal.UpDownButton_Up.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.Canvas">
            <summary>
            Canvas control. It should be the root parent for all other controls.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Canvas.#ctor(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.Canvas"/> class.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Canvas.Redraw">
            <summary>
            Re-renders the control, invalidates cached texture.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Canvas.Initialize">
            <summary>
            Additional initialization (which is sometimes not appropriate in the constructor)
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Canvas.RenderCanvas">
            <summary>
            Renders the canvas. Call in your rendering loop.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Canvas.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Canvas.OnBoundsChanged(Alt.Sketch.RectI)">
            <summary>
            Handler invoked when control's bounds change.
            </summary>
            <param name="oldBounds">Old bounds.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Canvas.DoThink">
            <summary>
            Processes input and layout. Also purges delayed delete queue.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Canvas.AddDelayedDelete(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Adds given control to the delete queue and detaches it from canvas. Don't call from Dispose, it modifies child list.
            </summary>
            <param name="control">Control to delete.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Canvas.Input_MouseMoved(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Handles mouse movement events. Called from Input subsystems.
            </summary>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Canvas.Input_MouseButton(Alt.GUI.MouseButtons,System.Boolean)">
            <summary>
            Handles mouse button events. Called from Input subsystems.
            </summary>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Canvas.Input_Key(Alt.GUI.Keys,System.Boolean)">
            <summary>
            Handles keyboard events. Called from Input subsystems.
            </summary>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Canvas.TranslateChar(Alt.GUI.Keys)">
            <summary>
            Translates alphanumeric OpenTK key code to character value.
            </summary>
            <param name="key">OpenTK key code.</param>
            <returns>Translated character.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Canvas.Input_Character(System.Char)">
            <summary>
            Handles keyboard events. Called from Input subsystems.
            </summary>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Canvas.Input_MouseWheel(System.Int32)">
            <summary>
            Handles the mouse wheel events. Called from Input subsystems.
            </summary>
            <returns>True if handled.</returns>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Canvas.Scale">
            <summary>
            Scale for rendering.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Canvas.BackgroundColor">
            <summary>
            Background color.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Canvas.NeedsRedraw">
            <summary>
            In most situations you will be rendering the canvas every frame. 
            But in some situations you will only want to render when there have been changes. 
            You can do this by checking NeedsRedraw.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.CheckBox">
            <summary>
            CheckBox control.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.CheckBox.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.CheckBox"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.CheckBox.Toggle">
            <summary>
            Toggles the checkbox.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.CheckBox.OnCheckChanged">
            <summary>
            Handler for CheckChanged event.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.CheckBox.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.CheckBox.OnClicked">
            <summary>
            Internal OnPressed implementation.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.CheckBox.IsChecked">
            <summary>
            Indicates whether the checkbox is checked.
            </summary>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.CheckBox.Checked">
            <summary>
            Invoked when the checkbox has been checked.
            </summary>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.CheckBox.UnChecked">
            <summary>
            Invoked when the checkbox has been unchecked.
            </summary>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.CheckBox.CheckChanged">
            <summary>
            Invoked when the checkbox state has been changed.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.CheckBox.AllowUncheck">
            <summary>
            Determines whether unchecking is allowed.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.CollapsibleCategory">
            <summary>
            CollapsibleCategory control. Used in CollapsibleList.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.CollapsibleCategory.#ctor(Alt.GUI.Temporary.Gwen.Control.CollapsibleList)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.CollapsibleCategory"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.CollapsibleCategory.GetSelectedButton">
            <summary>
            Gets the selected entry.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.CollapsibleCategory.OnHeaderToggle(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Handler for header button toggle event.
            </summary>
            <param name="control">Source control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.CollapsibleCategory.OnSelected(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Handler for Selected event.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.CollapsibleCategory.Add(System.String)">
            <summary>
            Adds a new entry.
            </summary>
            <param name="name">Entry name (displayed).</param>
            <returns>Newly created control.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.CollapsibleCategory.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.CollapsibleCategory.UnselectAll">
            <summary>
            Unselects all entries.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.CollapsibleCategory.PostLayout(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Function invoked after layout.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.CollapsibleCategory.Text">
            <summary>
            Header text.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.CollapsibleCategory.TextColor">
            <summary>
            Text color.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.CollapsibleCategory.IsCollapsed">
            <summary>
            Determines whether the category is collapsed (closed).
            </summary>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.CollapsibleCategory.Selected">
            <summary>
            Invoked when an entry has been selected.
            </summary>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.CollapsibleCategory.Collapsed">
            <summary>
            Invoked when the category collapsed state has been changed (header button has been pressed).
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.CollapsibleList">
            <summary>
            CollapsibleList control. Groups CollapsibleCategory controls.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.ScrollControl">
            <summary>
            Base for controls whose interior can be scrolled.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ScrollControl.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.ScrollControl"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ScrollControl.EnableScroll(System.Boolean,System.Boolean)">
            <summary>
            Enables or disables inner scrollbars.
            </summary>
            <param name="horizontal">Determines whether the horizontal scrollbar should be enabled.</param>
            <param name="vertical">Determines whether the vertical scrollbar should be enabled.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ScrollControl.OnChildBoundsChanged(Alt.Sketch.RectI,Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Handler invoked when control children's bounds change.
            </summary>
            <param name="oldChildBounds"></param>
            <param name="child"></param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ScrollControl.Layout(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ScrollControl.OnMouseWheeled(System.Int32)">
            <summary>
            Handler invoked on mouse wheel event.
            </summary>
            <param name="delta">Scroll delta.</param>
            <returns></returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ScrollControl.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.ScrollControl.CanScrollH">
            <summary>
            Indicates whether the control can be scrolled horizontally.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.ScrollControl.CanScrollV">
            <summary>
            Indicates whether the control can be scrolled vertically.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.ScrollControl.AutoHideBars">
            <summary>
            Determines whether the scroll bars should be hidden if not needed.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.CollapsibleList.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.CollapsibleList"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.CollapsibleList.GetSelectedButton">
            <summary>
            Selected entry.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.CollapsibleList.Add(Alt.GUI.Temporary.Gwen.Control.CollapsibleCategory)">
            <summary>
            Adds a category to the list.
            </summary>
            <param name="category">Category control to add.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.CollapsibleList.Add(System.String)">
            <summary>
            Adds a new category to the list.
            </summary>
            <param name="categoryName">Name of the category.</param>
            <returns>Newly created control.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.CollapsibleList.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.CollapsibleList.UnselectAll">
            <summary>
            Unselects all entries.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.CollapsibleList.OnCategorySelected(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Handler for ItemSelected event.
            </summary>
            <param name="control">Event source: <see cref="T:Alt.GUI.Temporary.Gwen.Control.CollapsibleList"/>.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.CollapsibleList.OnCategoryCollapsed(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Handler for category collapsed event.
            </summary>
            <param name="control">Event source: <see cref="T:Alt.GUI.Temporary.Gwen.Control.CollapsibleCategory"/>.</param>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.CollapsibleList.ItemSelected">
            <summary>
            Invoked when an entry has been selected.
            </summary>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.CollapsibleList.CategoryCollapsed">
            <summary>
            Invoked when a category collapsed state has been changed (header button has been pressed).
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.ColorLerpBox">
            <summary>
            Linear-interpolated HSV color box.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ColorLerpBox.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.ColorLerpBox"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ColorLerpBox.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ColorLerpBox.Lerp(Alt.Sketch.Color,Alt.Sketch.Color,System.Single)">
            <summary>
            Linear color interpolation.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ColorLerpBox.SetColor(Alt.Sketch.Color)">
            <summary>
            Sets the selected color.
            </summary>
            <param name="value">Value to set.</param>
            <param name="onlyHue">Deetrmines whether to only set H value (not SV).</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ColorLerpBox.OnMouseMoved(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Handler invoked on mouse moved event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="dx">X change.</param>
            <param name="dy">Y change.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ColorLerpBox.OnMouseClickedLeft(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Handler invoked on mouse click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="down">If set to <c>true</c> mouse button is down.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ColorLerpBox.GetColorAt(System.Int32,System.Int32)">
            <summary>
            Gets the color from specified coordinates.
            </summary>
            <param name="x">X</param>
            <param name="y">Y</param>
            <returns>Color value.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ColorLerpBox.Invalidate">
            <summary>
            Invalidates the control.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ColorLerpBox.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.ColorLerpBox.ColorChanged">
            <summary>
            Invoked when the selected color has been changed.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.ColorLerpBox.SelectedColor">
            <summary>
            Selected color.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.ColorPicker">
            <summary>
            RGBA color picker.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ColorPicker.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.ColorPicker"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ColorPicker.Layout(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.ColorPicker.SelectedColor">
            <summary>
            Selected color.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.ColorPicker.R">
            <summary>
            Red value of the selected color.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.ColorPicker.G">
            <summary>
            Green value of the selected color.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.ColorPicker.B">
            <summary>
            Blue value of the selected color.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.ColorPicker.A">
            <summary>
            Alpha value of the selected color.
            </summary>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.ColorPicker.ColorChanged">
            <summary>
            Invoked when the selected color has been changed.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.ColorPicker.AlphaVisible">
            <summary>
            Determines whether the Alpha control is visible.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.ColorSlider">
            <summary>
            HSV hue selector.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ColorSlider.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.ColorSlider"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ColorSlider.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ColorSlider.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ColorSlider.OnMouseClickedLeft(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Handler invoked on mouse click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="down">If set to <c>true</c> mouse button is down.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ColorSlider.OnMouseMoved(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Handler invoked on mouse moved event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="dx">X change.</param>
            <param name="dy">Y change.</param>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.ColorSlider.ColorChanged">
            <summary>
            Invoked when the selected color has been changed.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.ColorSlider.SelectedColor">
            <summary>
            Selected color.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.ComboBox">
            <summary>
            ComboBox control.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ComboBox.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.ComboBox"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ComboBox.AddItem(System.String)">
            <summary>
            Adds a new item.
            </summary>
            <param name="label">Item label (displayed).</param>
            <param name="name">Item name.</param>
            <returns>Newly created control.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ComboBox.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ComboBox.OnClicked">
            <summary>
            Internal Pressed implementation.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ComboBox.DeleteAll">
            <summary>
            Removes all items.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ComboBox.OnItemSelected(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Internal handler for item selected event.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ComboBox.Layout(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ComboBox.OnLostKeyboardFocus">
            <summary>
            Handler for losing keyboard focus.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ComboBox.OnKeyboardFocus">
            <summary>
            Handler for gaining keyboard focus.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ComboBox.Open">
            <summary>
            Opens the combo.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ComboBox.Close">
            <summary>
            Closes the combo.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ComboBox.OnKeyDown(System.Boolean)">
            <summary>
            Handler for Down Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ComboBox.OnKeyUp(System.Boolean)">
            <summary>
            Handler for Up Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ComboBox.RenderFocus(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the focus overlay.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.ComboBox.ItemSelected">
            <summary>
            Invoked when the selected item has changed.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.ComboBox.IsOpen">
            <summary>
            Indicates whether the combo menu is open.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.ComboBox.SelectedItem">
            <summary>
            Selected item.
            </summary>
            <remarks>Not just String property, because items also have internal names.</remarks>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.CrossSplitter">
            <summary>
            Splitter control.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.CrossSplitter.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.CrossSplitter"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.CrossSplitter.CenterPanels">
            <summary>
            Centers the panels so that they take even amount of space.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.CrossSplitter.Layout(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.CrossSplitter.SetPanel(System.Int32,Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Assigns a control to the specific inner section.
            </summary>
            <param name="index">Section index (0-3).</param>
            <param name="panel">Control to assign.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.CrossSplitter.GetPanel(System.Int32)">
            <summary>
            Gets the specific inner section.
            </summary>
            <param name="index">Section index (0-3).</param>
            <returns>Specified section.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.CrossSplitter.OnZoomChanged">
            <summary>
            Internal handler for the zoom changed event.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.CrossSplitter.Zoom(System.Int32)">
            <summary>
            Maximizes the specified panel so it fills the entire control.
            </summary>
            <param name="section">Panel index (0-3).</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.CrossSplitter.UnZoom">
            <summary>
            Restores the control so all panels are visible.
            </summary>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.CrossSplitter.PanelZoomed">
            <summary>
            Invoked when one of the panels has been zoomed (maximized).
            </summary>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.CrossSplitter.PanelUnZoomed">
            <summary>
            Invoked when one of the panels has been unzoomed (restored).
            </summary>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.CrossSplitter.ZoomChanged">
            <summary>
            Invoked when the zoomed panel has been changed.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.CrossSplitter.IsZoomed">
            <summary>
            Indicates whether any of the panels is zoomed.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.CrossSplitter.SplittersVisible">
            <summary>
            Gets or sets a value indicating whether splitters should be visible.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.CrossSplitter.SplitterSize">
            <summary>
            Gets or sets the size of the splitter.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.DockBase">
            <summary>
            Base for dockable containers.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.DockBase.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.DockBase"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.DockBase.OnKeySpace(System.Boolean)">
            <summary>
            Handler for Space keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.DockBase.SetupChildDock(Alt.GUI.Temporary.Gwen.Pos)">
            <summary>
            Initializes an inner docked control for the specified position.
            </summary>
            <param name="pos">Dock position.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.DockBase.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.DockBase.GetChildDock(Alt.GUI.Temporary.Gwen.Pos)">
            <summary>
            Gets an inner docked control for the specified position.
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.DockBase.GetDroppedTabDirection(System.Int32,System.Int32)">
            <summary>
            Calculates dock direction from dragdrop coordinates.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <returns>Dock direction.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.DockBase.RenderOver(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders over the actual control (overlays).
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.DockBase.LeftDock">
            <summary>
            Control docked on the left side.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.DockBase.RightDock">
            <summary>
            Control docked on the right side.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.DockBase.TopDock">
            <summary>
            Control docked on the top side.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.DockBase.BottomDock">
            <summary>
            Control docked on the bottom side.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.DockBase.IsEmpty">
            <summary>
            Indicates whether the control contains any docked children.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.DockedTabControl">
            <summary>
            Docked tab control.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.TabControl">
            <summary>
            Control with multiple tabs that can be reordered and dragged.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TabControl.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.TabControl"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TabControl.AddPage(System.String)">
            <summary>
            Adds a new page/tab.
            </summary>
            <param name="label">Tab label.</param>
            <param name="page">Page contents.</param>
            <returns>Newly created control.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TabControl.AddPage(Alt.GUI.Temporary.Gwen.Control.TabButton)">
            <summary>
            Adds a page/tab.
            </summary>
            <param name="button">Page to add. (well, it's a TabButton which is a parent to the page).</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TabControl.OnTabPressed(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Handler for tab selection.
            </summary>
            <param name="control">Event source (TabButton).</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TabControl.PostLayout(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Function invoked after layout.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TabControl.OnLoseTab(Alt.GUI.Temporary.Gwen.Control.TabButton)">
            <summary>
            Handler for tab removing.
            </summary>
            <param name="button"></param>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.TabControl.TabAdded">
            <summary>
            Invoked when a tab has been added.
            </summary>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.TabControl.TabRemoved">
            <summary>
            Invoked when a tab has been removed.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.TabControl.AllowReorder">
            <summary>
            Determines if tabs can be reordered by dragging.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.TabControl.CurrentButton">
            <summary>
            Currently active tab button.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.TabControl.TabStripPosition">
            <summary>
            Current tab strip position.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.TabControl.TabStrip">
            <summary>
            Tab strip.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.TabControl.TabCount">
            <summary>
            Number of tabs in the control.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.DockedTabControl.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.DockedTabControl"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.DockedTabControl.Layout(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.DockedTabControl.TitleBarVisible">
            <summary>
            Determines whether the title bar is visible.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.GroupBox">
            <summary>
            Group box (container).
            </summary>
            <remarks>Don't use autosize with docking.</remarks>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.GroupBox.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.GroupBox"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.GroupBox.Layout(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.GroupBox.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.GroupBox.SizeToContents">
            <summary>
            Sizes to contents.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.HorizontalScrollBar">
            <summary>
            Horizontal scrollbar.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.ScrollBar">
            <summary>
            Base class for scrollbars.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ScrollBar.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.ScrollBar"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ScrollBar.SetScrollAmount(System.Single)">
            <summary>
            Sets the scroll amount (0-1).
            </summary>
            <param name="value">Scroll amount.</param>
            <param name="forceUpdate">Determines whether the control should be updated.</param>
            <returns>True if control state changed.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ScrollBar.OnMouseClickedLeft(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Handler invoked on mouse click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="down">If set to <c>true</c> mouse button is down.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ScrollBar.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ScrollBar.OnBarMoved(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Handler for the BarMoved event.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.ScrollBar.BarMoved">
            <summary>
            Invoked when the bar is moved.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.ScrollBar.BarSize">
            <summary>
            Bar size (in pixels).
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.ScrollBar.BarPos">
            <summary>
            Bar position (in pixels).
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.ScrollBar.ButtonSize">
            <summary>
            Button size (in pixels).
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.ScrollBar.IsHorizontal">
            <summary>
            Indicates whether the bar is horizontal.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.HorizontalScrollBar.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.HorizontalScrollBar"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.HorizontalScrollBar.Layout(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.HorizontalScrollBar.OnMouseClickedLeft(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Handler invoked on mouse click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="down">If set to <c>true</c> mouse button is down.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.HorizontalScrollBar.SetScrollAmount(System.Single,System.Boolean)">
            <summary>
            Sets the scroll amount (0-1).
            </summary>
            <param name="value">Scroll amount.</param>
            <param name="forceUpdate">Determines whether the control should be updated.</param>
            <returns>
            True if control state changed.
            </returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.HorizontalScrollBar.OnBarMoved(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Handler for the BarMoved event.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.HorizontalScrollBar.BarSize">
            <summary>
            Bar size (in pixels).
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.HorizontalScrollBar.BarPos">
            <summary>
            Bar position (in pixels).
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.HorizontalScrollBar.IsHorizontal">
            <summary>
            Indicates whether the bar is horizontal.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.HorizontalScrollBar.ButtonSize">
            <summary>
            Button size (in pixels).
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.HorizontalSlider">
            <summary>
            Horizontal slider.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.Slider">
            <summary>
            Base slider.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Slider.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.Slider"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Slider.OnKeyRight(System.Boolean)">
            <summary>
            Handler for Right Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Slider.OnKeyUp(System.Boolean)">
            <summary>
            Handler for Up Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Slider.OnKeyLeft(System.Boolean)">
            <summary>
            Handler for Left Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Slider.OnKeyDown(System.Boolean)">
            <summary>
            Handler for Down Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Slider.OnKeyHome(System.Boolean)">
            <summary>
            Handler for Home keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Slider.OnKeyEnd(System.Boolean)">
            <summary>
            Handler for End keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Slider.OnMouseClickedLeft(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Handler invoked on mouse click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="down">If set to <c>true</c> mouse button is down.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Slider.SetRange(System.Single,System.Single)">
            <summary>
            Sets the value range.
            </summary>
            <param name="min">Minimum value.</param>
            <param name="max">Maximum value.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Slider.RenderFocus(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the focus overlay.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Slider.NotchCount">
            <summary>
            Number of notches on the slider axis.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Slider.SnapToNotches">
            <summary>
            Determines whether the slider should snap to notches.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Slider.Min">
            <summary>
            Minimum value.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Slider.Max">
            <summary>
            Maximum value.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Slider.Value">
            <summary>
            Current value.
            </summary>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.Slider.ValueChanged">
            <summary>
            Invoked when the value has been changed.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.HorizontalSlider.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.HorizontalSlider"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.HorizontalSlider.OnMouseClickedLeft(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Handler invoked on mouse click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="down">If set to <c>true</c> mouse button is down.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.HorizontalSlider.Layout(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.HorizontalSlider.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.HorizontalSplitter.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.CrossSplitter"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.HorizontalSplitter.CenterPanels">
            <summary>
            Centers the panels so that they take even amount of space.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.HorizontalSplitter.Layout(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.HorizontalSplitter.SetPanel(System.Int32,Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Assigns a control to the specific inner section.
            </summary>
            <param name="index">Section index (0-3).</param>
            <param name="panel">Control to assign.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.HorizontalSplitter.GetPanel(System.Int32)">
            <summary>
            Gets the specific inner section.
            </summary>
            <param name="index">Section index (0-3).</param>
            <returns>Specified section.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.HorizontalSplitter.OnZoomChanged">
            <summary>
            Internal handler for the zoom changed event.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.HorizontalSplitter.Zoom(System.Int32)">
            <summary>
            Maximizes the specified panel so it fills the entire control.
            </summary>
            <param name="section">Panel index (0-3).</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.HorizontalSplitter.UnZoom">
            <summary>
            Restores the control so all panels are visible.
            </summary>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.HorizontalSplitter.PanelZoomed">
            <summary>
            Invoked when one of the panels has been zoomed (maximized).
            </summary>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.HorizontalSplitter.PanelUnZoomed">
            <summary>
            Invoked when one of the panels has been unzoomed (restored).
            </summary>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.HorizontalSplitter.ZoomChanged">
            <summary>
            Invoked when the zoomed panel has been changed.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.HorizontalSplitter.IsZoomed">
            <summary>
            Indicates whether any of the panels is zoomed.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.HorizontalSplitter.SplittersVisible">
            <summary>
            Gets or sets a value indicating whether splitters should be visible.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.HorizontalSplitter.SplitterSize">
            <summary>
            Gets or sets the size of the splitter.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.HSVColorPicker">
            <summary>
            HSV color picker with "before" and "after" color boxes.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.HSVColorPicker.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.HSVColorPicker"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.HSVColorPicker.SetColor(Alt.Sketch.Color)">
            <summary>
            Sets the selected color.
            </summary>
            <param name="color">Color to set.</param>
            <param name="onlyHue">Determines whether only the hue should be set.</param>
            <param name="reset">Determines whether the "before" color should be set as well.</param>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.HSVColorPicker.ColorChanged">
            <summary>
            Invoked when the selected color has changed.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.HSVColorPicker.DefaultColor">
            <summary>
            The "before" color.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.HSVColorPicker.SelectedColor">
            <summary>
            Selected color.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.ImagePanel">
            <summary>
            Image container.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ImagePanel.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.ImagePanel"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ImagePanel.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ImagePanel.SetUV(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the texture coordinates of the image.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ImagePanel.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ImagePanel.SizeToContents">
            <summary>
            Sizes the control to its contents.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.ImagePanel.ImageName">
            <summary>
            Texture name.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.LabelClickable">
            <summary>
            Clickable label (for checkboxes etc).
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.LabelClickable.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.LabelClickable"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.LabelClickable.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.LabeledCheckBox">
            <summary>
            CheckBox with label.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.LabeledCheckBox.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.LabeledCheckBox"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.LabeledCheckBox.OnCheckChanged(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Handler for CheckChanged event.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.LabeledCheckBox.OnKeySpace(System.Boolean)">
            <summary>
            Handler for Space keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.LabeledCheckBox.Checked">
            <summary>
            Invoked when the control has been checked.
            </summary>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.LabeledCheckBox.UnChecked">
            <summary>
            Invoked when the control has been unchecked.
            </summary>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.LabeledCheckBox.CheckChanged">
            <summary>
            Invoked when the control's check has been changed.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.LabeledCheckBox.IsChecked">
            <summary>
            Indicates whether the control is checked.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.LabeledCheckBox.Text">
            <summary>
            Label text.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.LabeledRadioButton">
            <summary>
            RadioButton with label.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.LabeledRadioButton.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.LabeledRadioButton"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.LabeledRadioButton.RenderFocus(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the focus overlay.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.LabeledRadioButton.OnKeySpace(System.Boolean)">
            <summary>
            Handler for Space keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.LabeledRadioButton.Select">
            <summary>
            Selects the radio button.
            </summary>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.LabeledRadioButton.CheckedChanged">
            <summary>
            Invoked when the item's check value is changed.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.LabeledRadioButton.Text">
            <summary>
            Label text.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.LabeledRadioButton.TextColor">
            <summary>
            Text color.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.Layout.Positioner">
            <summary>
            Helper control that positions its children in a specific way.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Layout.Positioner.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.Layout.Positioner"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Layout.Positioner.PostLayout(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Function invoked after layout.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Layout.Positioner.Pos">
            <summary>
            Children position.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.Layout.Center">
            <summary>
            Helper class that centers all its children.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Layout.Center.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.Layout.Center"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.Layout.Splitter">
            <summary>
            Base splitter class.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Layout.Splitter.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.Layout.Splitter"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Layout.Splitter.SetPanel(System.Int32,Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Sets the contents of a splitter panel.
            </summary>
            <param name="panelIndex">Panel index (0-1).</param>
            <param name="panel">Panel contents.</param>
            <param name="noScale">Determines whether the content is to be scaled.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Layout.Splitter.GetPanel(System.Int32)">
            <summary>
            Gets the contents of a secific panel.
            </summary>
            <param name="panelIndex">Panel index (0-1).</param>
            <returns></returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Layout.Splitter.Layout(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.Layout.Table">
            <summary>
            Base class for multi-column tables.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Layout.Table.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.Layout.Table"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Layout.Table.SetColumnCount(System.Int32)">
            <summary>
            Sets the number of columns.
            </summary>
            <param name="count">Number of columns.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Layout.Table.SetColumnWidth(System.Int32,System.Int32)">
            <summary>
            Sets the column width (in pixels).
            </summary>
            <param name="column">Column index.</param>
            <param name="width">Column width.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Layout.Table.GetColumnWidth(System.Int32)">
            <summary>
            Gets the column width (in pixels).
            </summary>
            <param name="column">Column index.</param>
            <returns>Column width.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Layout.Table.AddRow">
            <summary>
            Adds a new empty row.
            </summary>
            <returns>Newly created row.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Layout.Table.AddRow(Alt.GUI.Temporary.Gwen.Control.Layout.TableRow)">
            <summary>
            Adds a new row.
            </summary>
            <param name="row">Row to add.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Layout.Table.AddRow(System.String)">
            <summary>
            Adds a new row with specified text in first column.
            </summary>
            <param name="text">Text to add.</param>
            <returns>New row.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Layout.Table.RemoveRow(Alt.GUI.Temporary.Gwen.Control.Layout.TableRow)">
            <summary>
            Removes a row by reference.
            </summary>
            <param name="row">Row to remove.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Layout.Table.RemoveRow(System.Int32)">
            <summary>
            Removes a row by index.
            </summary>
            <param name="idx">Row index.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Layout.Table.RemoveAll">
            <summary>
            Removes all rows.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Layout.Table.GetRowIndex(Alt.GUI.Temporary.Gwen.Control.Layout.TableRow)">
            <summary>
            Gets the index of a specified row.
            </summary>
            <param name="row">Row to search for.</param>
            <returns>Row index if found, -1 otherwise.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Layout.Table.Layout(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Layout.Table.SizeToContents(System.Int32)">
            <summary>
            Sizes to fit contents.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Layout.Table.ColumnCount">
            <summary>
            Column count (default 1).
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Layout.Table.RowCount">
            <summary>
            Row count.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Layout.Table.DefaultRowHeight">
            <summary>
            Gets or sets default height for new table rows.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Layout.Table.Item(System.Int32)">
            <summary>
            Returns specific row of the table.
            </summary>
            <param name="index">Row index.</param>
            <returns>Row at the specified index.</returns>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.Layout.TableRow">
            <summary>
            Single table row.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Layout.TableRow.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.Layout.TableRow"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Layout.TableRow.SetColumnCount(System.Int32)">
            <summary>
            Sets the number of columns.
            </summary>
            <param name="columnCount">Number of columns.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Layout.TableRow.SetColumnWidth(System.Int32,System.Int32)">
            <summary>
            Sets the column width (in pixels).
            </summary>
            <param name="column">Column index.</param>
            <param name="width">Column width.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Layout.TableRow.SetCellText(System.Int32,System.String)">
            <summary>
            Sets the text of a specified cell.
            </summary>
            <param name="column">Column number.</param>
            <param name="text">Text to set.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Layout.TableRow.SetCellContents(System.Int32,Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Sets the contents of a specified cell.
            </summary>
            <param name="column">Column number.</param>
            <param name="control">Cell contents.</param>
            <param name="enableMouseInput">Determines whether mouse input should be enabled for the cell.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Layout.TableRow.GetCellContents(System.Int32)">
            <summary>
            Gets the contents of a specified cell.
            </summary>
            <param name="column">Column number.</param>
            <returns>Control embedded in the cell.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Layout.TableRow.SizeToContents">
            <summary>
            Sizes all cells to fit contents.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Layout.TableRow.SetTextColor(Alt.Sketch.Color)">
            <summary>
            Sets the text color for all cells.
            </summary>
            <param name="color">Text color.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Layout.TableRow.GetText">
            <summary>
            Returns text of a specified row cell (default first).
            </summary>
            <param name="column">Column index.</param>
            <returns>Column cell text.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Layout.TableRow.OnCopy(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Handler for Copy event.
            </summary>
            <param name="from">Source control.</param>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.Layout.TableRow.Selected">
            <summary>
            Invoked when the row has been selected.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Layout.TableRow.ColumnCount">
            <summary>
            Column count.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Layout.TableRow.EvenRow">
            <summary>
            Indicates whether the row is even or odd (used for alternate coloring).
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Layout.TableRow.Text">
            <summary>
            Text of the first column.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.ListBox">
            <summary>
            ListBox control.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ListBox.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.ListBox"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ListBox.SelectRow(System.Int32)">
            <summary>
            Selects the specified row by index.
            </summary>
            <param name="index">Row to select.</param>
            <param name="clearOthers">Determines whether to deselect previously selected rows.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ListBox.SelectRows(System.String)">
            <summary>
            Selects the specified row(s) by text.
            </summary>
            <param name="rowText">Text to search for (exact match).</param>
            <param name="clearOthers">Determines whether to deselect previously selected rows.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ListBox.SelectRowsByRegex(System.String)">
            <summary>
            Selects the specified row(s) by regex text search.
            </summary>
            <param name="pattern">Regex pattern to search for.</param>
            <param name="regexOptions">Regex options.</param>
            <param name="clearOthers">Determines whether to deselect previously selected rows.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ListBox.SelectRow(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Slelects the specified row.
            </summary>
            <param name="control">Row to select.</param>
            <param name="clearOthers">Determines whether to deselect previously selected rows.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ListBox.RemoveRow(System.Int32)">
            <summary>
            Removes the specified row by index.
            </summary>
            <param name="idx">Row index.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ListBox.AddRow(System.String)">
            <summary>
            Adds a new row.
            </summary>
            <param name="label">Row text.</param>
            <returns>Newly created control.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ListBox.AddRow(System.String,System.String)">
            <summary>
            Adds a new row.
            </summary>
            <param name="label">Row text.</param>
            <param name="name">Internal control name.</param>
            <returns>Newly created control.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ListBox.SetColumnWidth(System.Int32,System.Int32)">
            <summary>
            Sets the column width (in pixels).
            </summary>
            <param name="column">Column index.</param>
            <param name="width">Column width.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ListBox.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ListBox.UnselectAll">
            <summary>
            Deselects all rows.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ListBox.UnselectRow(Alt.GUI.Temporary.Gwen.Control.ListBoxRow)">
            <summary>
            Unselects the specified row.
            </summary>
            <param name="row">Row to unselect.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ListBox.OnRowSelected(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Handler for the row selection event.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ListBox.Clear">
            <summary>
            Removes all rows.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.ListBox.AllowMultiSelect">
            <summary>
            Determines whether multiple rows can be selected at once.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.ListBox.IsToggle">
            <summary>
            Determines whether rows can be unselected by clicking on them again.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.ListBox.RowCount">
            <summary>
            Number of rows in the list box.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.ListBox.Item(System.Int32)">
            <summary>
            Returns specific row of the ListBox.
            </summary>
            <param name="index">Row index.</param>
            <returns>Row at the specified index.</returns>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.ListBox.SelectedRows">
            <summary>
            List of selected rows.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.ListBox.SelectedRow">
            <summary>
            First selected row (and only if list is not multiselectable).
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.ListBox.SelectedRowIndex">
            <summary>
            Gets the selected row number.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.ListBox.ColumnCount">
            <summary>
            Column count of table rows.
            </summary>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.ListBox.RowSelected">
            <summary>
            Invoked when a row has been selected.
            </summary>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.ListBox.RowUnselected">
            <summary>
            Invoked whan a row has beed unselected.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.ListBoxRow">
            <summary>
            List box row (selectable).
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ListBoxRow.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.ListBoxRow"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ListBoxRow.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ListBoxRow.OnMouseClickedLeft(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Handler invoked on mouse click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="down">If set to <c>true</c> mouse button is down.</param>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.ListBoxRow.IsSelected">
            <summary>
            Indicates whether the control is selected.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.Menu">
            <summary>
            Popup menu.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Menu.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.Menu"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Menu.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Menu.RenderUnder(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders under the actual control (shadows etc).
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Menu.Open(Alt.GUI.Temporary.Gwen.Pos)">
            <summary>
             Opens the menu.
            </summary>
            <param name="pos">Unused.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Menu.Layout(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Menu.AddItem">
            <summary>
            Adds a new menu item.
            </summary>
            <returns>Newly created control.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Menu.AddItem(System.String)">
            <summary>
            Adds a new menu item.
            </summary>
            <param name="text">Item text.</param>
            <returns>Newly created control.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Menu.AddItem(System.String,System.String)">
            <summary>
            Adds a new menu item.
            </summary>
            <param name="text">Item text.</param>
            <param name="iconName">Icon texture name.</param>
            <param name="accelerator">Accelerator for this item.</param>
            <returns>Newly created control.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Menu.OnAddItem(Alt.GUI.Temporary.Gwen.Control.MenuItem)">
            <summary>
            Add item handler.
            </summary>
            <param name="item">Item added.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Menu.CloseAll">
            <summary>
            Closes all submenus.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Menu.IsMenuOpen">
            <summary>
            Indicates whether any (sub)menu is open.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Menu.OnHoverItem(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Mouse hover handler.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Menu.Close">
            <summary>
            Closes the current menu.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Menu.CloseMenus">
            <summary>
            Closes all submenus and the current menu.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Menu.AddDivider">
            <summary>
            Adds a divider menu item.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Menu.DeleteOnClose">
            <summary>
            Determines whether the menu should be disposed on close.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Menu.ShouldHoverOpenMenu">
            <summary>
            Determines whether the menu should open on mouse hover.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.MenuItem">
            <summary>
            Menu item.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.MenuItem.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.MenuItem"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.MenuItem.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.MenuItem.Layout(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.MenuItem.OnClicked">
            <summary>
            Internal OnPressed implementation.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.MenuItem.ToggleMenu">
            <summary>
            Toggles the menu open state.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.MenuItem.OpenMenu">
            <summary>
            Opens the menu.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.MenuItem.CloseMenu">
            <summary>
            Closes the menu.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.MenuItem.IsOnStrip">
            <summary>
            Indicates whether the item is on a menu strip.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.MenuItem.IsCheckable">
            <summary>
            Determines if the menu item is checkable.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.MenuItem.IsMenuOpen">
            <summary>
            Indicates if the parent menu is open.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.MenuItem.IsChecked">
            <summary>
            Gets or sets the check value.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.MenuItem.Menu">
            <summary>
            Gets the parent menu.
            </summary>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.MenuItem.Selected">
            <summary>
            Invoked when the item is selected.
            </summary>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.MenuItem.Checked">
            <summary>
            Invoked when the item is checked.
            </summary>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.MenuItem.UnChecked">
            <summary>
            Invoked when the item is unchecked.
            </summary>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.MenuItem.CheckChanged">
            <summary>
            Invoked when the item's check value is changed.
            </summary>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.MenuItem.CheckedChanged">
            <summary>
            Invoked when the item's check value is changed.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.MenuStrip">
            <summary>
            Menu strip.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.MenuStrip.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.MenuStrip"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.MenuStrip.Close">
            <summary>
            Closes the current menu.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.MenuStrip.RenderUnder(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders under the actual control (shadows etc).
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.MenuStrip.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.MenuStrip.Layout(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.MenuStrip.OnAddItem(Alt.GUI.Temporary.Gwen.Control.MenuItem)">
            <summary>
            Add item handler.
            </summary>
            <param name="item">Item added.</param>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.MenuStrip.ShouldHoverOpenMenu">
            <summary>
            Determines whether the menu should open on mouse hover.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.MessageBox">
            <summary>
            Simple message box.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.WindowControl">
            <summary>
            Movable window with title bar.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.ResizableControl">
            <summary>
            Base resizable control.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ResizableControl.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.ResizableControl"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ResizableControl.OnResized(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Handler for the resized event.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ResizableControl.DisableResizing">
            <summary>
            Disables resizing.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ResizableControl.EnableResizing">
            <summary>
            Enables resizing.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ResizableControl.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the control bounds.
            </summary>
            <param name="x">X position.</param>
            <param name="y">Y position.</param>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
            <returns>
            True if bounds changed.
            </returns>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.ResizableControl.ClampMovement">
            <summary>
            Determines whether control's position should be restricted to its parent bounds.
            </summary>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.ResizableControl.Resized">
            <summary>
            Invoked when the control has been resized.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.WindowControl.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.WindowControl"/> class.
            </summary>
            <param name="parent">Parent control.</param>
            <param name="caption">Window caption.</param>
            <param name="modal">Determines whether the window should be modal.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.WindowControl.MakeModal">
            <summary>
            Makes the window modal: covers the whole canvas and gets all input.
            </summary>
            <param name="dim">Determines whether all the background should be dimmed.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.WindowControl.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.WindowControl.RenderUnder(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders under the actual control (shadows etc).
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.WindowControl.RenderFocus(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the focus overlay.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.WindowControl.Caption">
            <summary>
            Window caption.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.WindowControl.IsClosable">
            <summary>
            Determines whether the window has close button.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.WindowControl.DeleteOnClose">
            <summary>
            Determines whether the control should be disposed on close.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.WindowControl.IsHidden">
            <summary>
            Indicates whether the control is hidden.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.WindowControl.IsOnTop">
            <summary>
            Indicates whether the control is on top of its parent's children.
            </summary>
        </member>
        <member name="F:Alt.GUI.Temporary.Gwen.Control.MessageBox.Dismissed">
            <summary>
            Invoked when the message box has been dismissed.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.MessageBox.#ctor(Alt.GUI.Temporary.Gwen.Control.Base,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.MessageBox"/> class.
            </summary>
            <param name="parent">Parent control.</param>
            <param name="text">Message to display.</param>
            <param name="caption">Window caption.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.MessageBox.Layout(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.NumericUpDown">
            <summary>
            Numeric up/down.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.TextBoxNumeric">
            <summary>
            Numeric text box - accepts only float numbers.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.TextBox">
            <summary>
            Text box (editable).
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TextBox.IsTextAllowed(System.String,System.Int32)">
            <summary>
            Determines whether the control can insert text at a given cursor position.
            </summary>
            <param name="text">Text to check.</param>
            <param name="position">Cursor position.</param>
            <returns>True if allowed.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TextBox.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.TextBox"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TextBox.RenderFocus(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the focus overlay.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TextBox.OnTextChanged">
            <summary>
            Handler for text changed event.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TextBox.OnChar(System.Char)">
            <summary>
            Handler for character input event.
            </summary>
            <param name="chr">Character typed.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TextBox.InsertText(System.String)">
            <summary>
            Inserts text at current cursor position, erasing selection if any.
            </summary>
            <param name="text">Text to insert.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TextBox.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TextBox.OnPaste(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Handler for Paste event.
            </summary>
            <param name="from">Source control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TextBox.OnCopy(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Handler for Copy event.
            </summary>
            <param name="from">Source control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TextBox.OnCut(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Handler for Cut event.
            </summary>
            <param name="from">Source control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TextBox.OnSelectAll(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Handler for Select All event.
            </summary>
            <param name="from">Source control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TextBox.OnMouseDoubleClickedLeft(System.Int32,System.Int32)">
            <summary>
            Handler invoked on mouse double click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TextBox.OnKeyReturn(System.Boolean)">
            <summary>
            Handler for Return keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TextBox.OnKeyBackspace(System.Boolean)">
            <summary>
            Handler for Backspace keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TextBox.OnKeyDelete(System.Boolean)">
            <summary>
            Handler for Delete keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TextBox.OnKeyLeft(System.Boolean)">
            <summary>
            Handler for Left Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TextBox.OnKeyRight(System.Boolean)">
            <summary>
            Handler for Right Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TextBox.OnKeyHome(System.Boolean)">
            <summary>
            Handler for Home keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TextBox.OnKeyEnd(System.Boolean)">
            <summary>
            Handler for End keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TextBox.GetSelection">
            <summary>
            Returns currently selected text.
            </summary>
            <returns>Current selection.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TextBox.DeleteText(System.Int32,System.Int32)">
            <summary>
            Deletes text.
            </summary>
            <param name="startPos">Starting cursor position.</param>
            <param name="length">Length in characters.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TextBox.EraseSelection">
            <summary>
            Deletes selected text.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TextBox.OnMouseClickedLeft(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Handler invoked on mouse click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="down">If set to <c>true</c> mouse button is down.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TextBox.OnMouseMoved(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Handler invoked on mouse moved event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="dx">X change.</param>
            <param name="dy">Y change.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TextBox.Layout(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TextBox.OnReturn">
            <summary>
            Handler for the return key.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.TextBox.SelectAllOnFocus">
            <summary>
            Determines whether text should be selected when the control is focused.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.TextBox.HasSelection">
            <summary>
            Indicates whether the text has active selection.
            </summary>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.TextBox.TextChanged">
            <summary>
            Invoked when the text has changed.
            </summary>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.TextBox.SubmitPressed">
            <summary>
            Invoked when the submit key has been pressed.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.TextBox.CursorPos">
            <summary>
            Current cursor position (character index).
            </summary>
        </member>
        <member name="F:Alt.GUI.Temporary.Gwen.Control.TextBoxNumeric.m_Value">
            <summary>
            Current numeric value.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TextBoxNumeric.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.TextBoxNumeric"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TextBoxNumeric.IsTextAllowed(System.String,System.Int32)">
            <summary>
            Determines whether the control can insert text at a given cursor position.
            </summary>
            <param name="text">Text to check.</param>
            <param name="position">Cursor position.</param>
            <returns>True if allowed.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TextBoxNumeric.OnTextChanged">
            <summary>
            Handler for text changed event.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TextBoxNumeric.SetText(System.String,System.Boolean)">
            <summary>
            Sets the control text.
            </summary>
            <param name="str">Text to set.</param>
            <param name="doEvents">Determines whether to invoke "text changed" event.</param>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.TextBoxNumeric.Value">
            <summary>
            Current numerical value.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.NumericUpDown.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.NumericUpDown"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.NumericUpDown.OnKeyUp(System.Boolean)">
            <summary>
            Handler for Up Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.NumericUpDown.OnKeyDown(System.Boolean)">
            <summary>
            Handler for Down Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.NumericUpDown.OnButtonUp(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Handler for the button up event.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.NumericUpDown.OnButtonDown(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Handler for the button down event.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.NumericUpDown.IsTextAllowed(System.String)">
            <summary>
            Determines whether the text can be assighed to the control.
            </summary>
            <param name="str">Text to evaluate.</param>
            <returns>True if the text is allowed.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.NumericUpDown.OnTextChanged">
            <summary>
            Handler for the text changed event.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.NumericUpDown.Min">
            <summary>
            Minimum value.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.NumericUpDown.Max">
            <summary>
            Maximum value.
            </summary>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.NumericUpDown.ValueChanged">
            <summary>
            Invoked when the value has been changed.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.NumericUpDown.Value">
            <summary>
            Numeric value of the control.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.ProgressBar">
            <summary>
            Progress bar.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ProgressBar.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.ProgressBar"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.ProgressBar.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.ProgressBar.IsHorizontal">
            <summary>
            Determines whether the control is horizontal.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.ProgressBar.Value">
            <summary>
            Progress value (0-1).
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.ProgressBar.AutoLabel">
            <summary>
            Determines whether the label text is autogenerated from value.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.Properties">
            <summary>
            Properties table.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Properties.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.Properties"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Properties.PostLayout(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Function invoked after layout.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Properties.OnSplitterMoved(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Handles the splitter moved event.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Properties.Add(System.String)">
            <summary>
            Adds a new text property row.
            </summary>
            <param name="label">Property name.</param>
            <param name="value">Initial value.</param>
            <returns>Newly created row.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Properties.Add(System.String,Alt.GUI.Temporary.Gwen.Control.Property.Base)">
            <summary>
            Adds a new property row.
            </summary>
            <param name="label">Property name.</param>
            <param name="prop">Property control.</param>
            <param name="value">Initial value.</param>
            <returns>Newly created row.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Properties.DeleteAll">
            <summary>
            Deletes all rows.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Properties.SplitWidth">
            <summary>
            Returns the width of the first column (property names).
            </summary>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.Properties.ValueChanged">
            <summary>
            Invoked when a property value has been changed.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.PropertyRow">
            <summary>
            Single property row.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.PropertyRow.#ctor(Alt.GUI.Temporary.Gwen.Control.Base,Alt.GUI.Temporary.Gwen.Control.Property.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.PropertyRow"/> class.
            </summary>
            <param name="parent">Parent control.</param>
            <param name="prop">Property control associated with this row.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.PropertyRow.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.PropertyRow.Layout(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.PropertyRow.ValueChanged">
            <summary>
            Invoked when the property value has changed.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.PropertyRow.IsEditing">
            <summary>
            Indicates whether the property value is being edited.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.PropertyRow.Value">
            <summary>
            Property value.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.PropertyRow.IsHovered">
            <summary>
            Indicates whether the control is hovered by mouse pointer.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.PropertyRow.Label">
            <summary>
            Property name.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.PropertyTree">
            <summary>
            Property table/tree.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.TreeControl">
            <summary>
            Tree control.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TreeControl.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.TreeControl"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TreeControl.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TreeControl.OnChildBoundsChanged(Alt.Sketch.RectI,Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Handler invoked when control children's bounds change.
            </summary>
            <param name="oldChildBounds"></param>
            <param name="child"></param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TreeControl.RemoveAll">
            <summary>
            Removes all child nodes.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TreeControl.OnNodeAdded(Alt.GUI.Temporary.Gwen.Control.TreeNode)">
            <summary>
            Handler for node added event.
            </summary>
            <param name="node">Node added.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TreeControl.OnNodeSelected(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Handler for node selected event.
            </summary>
            <param name="Control">Node selected.</param>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.TreeControl.AllowMultiSelect">
            <summary>
            Determines if multiple nodes can be selected at the same time.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.PropertyTree.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.PropertyTree"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.PropertyTree.Add(System.String)">
            <summary>
            Adds a new properties node.
            </summary>
            <param name="label">Node label.</param>
            <returns>Newly created control</returns>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.Property.Base">
            <summary>
            Base control for property entry.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Property.Base.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.Property.Base"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Property.Base.SetValue(System.String)">
            <summary>
            Sets the property value.
            </summary>
            <param name="value">Value to set.</param>
            <param name="fireEvents">Determines whether to fire "value changed" event.</param>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.Property.Base.ValueChanged">
            <summary>
            Invoked when the property value has been changed.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Property.Base.Value">
            <summary>
            Property value (todo: always string, which is ugly. do something about it).
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Property.Base.IsEditing">
            <summary>
            Indicates whether the property value is being edited.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.Property.Check">
            <summary>
            Checkable property.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Property.Check.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.Property.Check"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Property.Check.SetValue(System.String,System.Boolean)">
            <summary>
            Sets the property value.
            </summary>
            <param name="value">Value to set.</param>
            <param name="fireEvents">Determines whether to fire "value changed" event.</param>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Property.Check.Value">
            <summary>
            Property value.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Property.Check.IsEditing">
            <summary>
            Indicates whether the property value is being edited.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Property.Check.IsHovered">
            <summary>
            Indicates whether the control is hovered by mouse pointer.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.Property.Color">
            <summary>
            Color property.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.Property.Text">
            <summary>
            Text property.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Property.Text.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.Property.Text"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Property.Text.SetValue(System.String,System.Boolean)">
            <summary>
            Sets the property value.
            </summary>
            <param name="value">Value to set.</param>
            <param name="fireEvents">Determines whether to fire "value changed" event.</param>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Property.Text.Value">
            <summary>
            Property value.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Property.Text.IsEditing">
            <summary>
            Indicates whether the property value is being edited.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Property.Text.IsHovered">
            <summary>
            Indicates whether the control is hovered by mouse pointer.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Property.Color.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.Property.Color"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Property.Color.OnButtonPressed(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Color-select button press handler.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Property.Color.OnColorChanged(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Color changed handler.
            </summary>
            <param name="control">Event source.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.Property.Color.SetValue(System.String,System.Boolean)">
            <summary>
            Sets the property value.
            </summary>
            <param name="value">Value to set.</param>
            <param name="fireEvents">Determines whether to fire "value changed" event.</param>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Property.Color.Value">
            <summary>
            Property value.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.Property.Color.IsEditing">
            <summary>
            Indicates whether the property value is being edited.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.RadioButton">
            <summary>
            Radio button.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.RadioButton.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.RadioButton"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.RadioButton.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.RadioButton.AllowUncheck">
            <summary>
            Determines whether unchecking is allowed.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.RadioButtonGroup">
            <summary>
            Radio button group.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.RadioButtonGroup.#ctor(Alt.GUI.Temporary.Gwen.Control.Base,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.RadioButtonGroup"/> class.
            </summary>
            <param name="parent">Parent control.</param>
            <param name="label">Label for the outlining GroupBox.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.RadioButtonGroup.AddOption(System.String)">
            <summary>
            Adds a new option.
            </summary>
            <param name="text">Option text.</param>
            <returns>Newly created control.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.RadioButtonGroup.AddOption(System.String,System.String)">
            <summary>
            Adds a new option.
            </summary>
            <param name="text">Option text.</param>
            <param name="optionName">Internal name.</param>
            <returns>Newly created control.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.RadioButtonGroup.OnRadioClicked(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Handler for the option change.
            </summary>
            <param name="fromPanel">Event source.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.RadioButtonGroup.SetSelection(System.Int32)">
            <summary>
            Selects the specified option.
            </summary>
            <param name="index">Option to select.</param>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.RadioButtonGroup.Selected">
            <summary>
            Selected radio button.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.RadioButtonGroup.SelectedName">
            <summary>
            Internal name of the selected radio button.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.RadioButtonGroup.SelectedLabel">
            <summary>
            Text of the selected radio button.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.RadioButtonGroup.SelectedIndex">
            <summary>
            Index of the selected radio button.
            </summary>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.RadioButtonGroup.SelectionChanged">
            <summary>
            Invoked when the selected option has changed.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.RichLabel">
            <summary>
            Multiline label with text chunks having different color/font.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.RichLabel.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.RichLabel"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.RichLabel.AddLineBreak">
            <summary>
            Adds a line break to the control.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.RichLabel.AddText(System.String,Alt.Sketch.Color)">
            <summary>
            Adds text to the control.
            </summary>
            <param name="text">Text to add.</param>
            <param name="color">Text color.</param>
            <param name="font">Font to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.RichLabel.SizeToChildren(System.Boolean,System.Boolean)">
            <summary>
            Resizes the control to fit its children.
            </summary>
            <param name="width">Determines whether to change control's width.</param>
            <param name="height">Determines whether to change control's height.</param>
            <returns>
            True if bounds changed.
            </returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.RichLabel.OnBoundsChanged(Alt.Sketch.RectI)">
            <summary>
            Handler invoked when control's bounds change.
            </summary>
            <param name="oldBounds">Old bounds.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.RichLabel.Layout(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.StatusBar">
            <summary>
            Status bar.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.StatusBar.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.StatusBar"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.StatusBar.AddControl(Alt.GUI.Temporary.Gwen.Control.Base,System.Boolean)">
            <summary>
            Adds a control to the bar.
            </summary>
            <param name="control">Control to add.</param>
            <param name="right">Determines whether the control should be added to the right side of the bar.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.StatusBar.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.TabButton">
            <summary>
            Tab header.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TabButton.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.TabButton"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TabButton.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TabButton.OnKeyDown(System.Boolean)">
            <summary>
            Handler for Down Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TabButton.OnKeyUp(System.Boolean)">
            <summary>
            Handler for Up Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TabButton.OnKeyRight(System.Boolean)">
            <summary>
            Handler for Right Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TabButton.OnKeyLeft(System.Boolean)">
            <summary>
            Handler for Left Arrow keyboard event.
            </summary>
            <param name="down">Indicates whether the key was pressed or released.</param>
            <returns>
            True if handled.
            </returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TabButton.UpdateColors">
            <summary>
            Updates control colors.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.TabButton.IsActive">
            <summary>
            Indicates whether the tab is active.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.TabButton.Page">
            <summary>
            Interior of the tab.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.TabButton.ShouldClip">
            <summary>
            Determines whether the control should be clipped to its bounds while rendering.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.TabStrip">
            <summary>
            Tab strip - groups TabButtons and allows reordering.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TabStrip.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.TabStrip"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TabStrip.Layout(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.TabStrip.AllowReorder">
            <summary>
            Determines whether it is possible to reorder tabs by mouse dragging.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.TabStrip.ShouldClip">
            <summary>
            Determines whether the control should be clipped to its bounds while rendering.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.TabStrip.StripPosition">
            <summary>
            Strip position (top/left/right/bottom).
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.TabTitleBar">
            <summary>
            Titlebar for DockedTabControl.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TabTitleBar.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.TextBoxPassword">
            <summary>
            Text box with masked text.
            </summary>
            <remarks>
            This class doesn't prevent programatic access to the text in any way.
            </remarks>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TextBoxPassword.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.TextBoxPassword"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.TextBoxPassword.OnTextChanged">
            <summary>
            Handler for text changed event.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.TextBoxPassword.MaskCharacter">
            <summary>
            Character used in place of actual characters for display.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.VerticalScrollBar">
            <summary>
            Vertical scrollbar.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.VerticalScrollBar.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.VerticalScrollBar"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.VerticalScrollBar.Layout(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.VerticalScrollBar.OnMouseClickedLeft(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Handler invoked on mouse click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="down">If set to <c>true</c> mouse button is down.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.VerticalScrollBar.SetScrollAmount(System.Single,System.Boolean)">
            <summary>
            Sets the scroll amount (0-1).
            </summary>
            <param name="value">Scroll amount.</param>
            <param name="forceUpdate">Determines whether the control should be updated.</param>
            <returns>True if control state changed.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.VerticalScrollBar.OnBarMoved(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Handler for the BarMoved event.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.VerticalScrollBar.BarSize">
            <summary>
            Bar size (in pixels).
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.VerticalScrollBar.BarPos">
            <summary>
            Bar position (in pixels).
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.VerticalScrollBar.ButtonSize">
            <summary>
            Button size (in pixels).
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Control.VerticalSlider">
            <summary>
            Vertical slider.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.VerticalSlider.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.VerticalSlider"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.VerticalSlider.OnMouseClickedLeft(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Handler invoked on mouse click (left) event.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="down">If set to <c>true</c> mouse button is down.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.VerticalSlider.Layout(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.VerticalSlider.Render(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the control using specified skin.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.VerticalSplitter.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Control.VerticalSplitter"/> class.
            </summary>
            <param name="parent">Parent control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.VerticalSplitter.CenterPanels">
            <summary>
            Centers the panels so that they take even amount of space.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.VerticalSplitter.Layout(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Lays out the control's interior according to alignment, padding, dock etc.
            </summary>
            <param name="skin">Skin to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.VerticalSplitter.SetPanel(System.Int32,Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Assigns a control to the specific inner section.
            </summary>
            <param name="index">Section index (0-3).</param>
            <param name="panel">Control to assign.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.VerticalSplitter.GetPanel(System.Int32)">
            <summary>
            Gets the specific inner section.
            </summary>
            <param name="index">Section index (0-3).</param>
            <returns>Specified section.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.VerticalSplitter.OnZoomChanged">
            <summary>
            Internal handler for the zoom changed event.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.VerticalSplitter.Zoom(System.Int32)">
            <summary>
            Maximizes the specified panel so it fills the entire control.
            </summary>
            <param name="section">Panel index (0-3).</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Control.VerticalSplitter.UnZoom">
            <summary>
            Restores the control so all panels are visible.
            </summary>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.VerticalSplitter.PanelZoomed">
            <summary>
            Invoked when one of the panels has been zoomed (maximized).
            </summary>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.VerticalSplitter.PanelUnZoomed">
            <summary>
            Invoked when one of the panels has been unzoomed (restored).
            </summary>
        </member>
        <member name="E:Alt.GUI.Temporary.Gwen.Control.VerticalSplitter.ZoomChanged">
            <summary>
            Invoked when the zoomed panel has been changed.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.VerticalSplitter.IsZoomed">
            <summary>
            Indicates whether any of the panels is zoomed.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.VerticalSplitter.SplittersVisible">
            <summary>
            Gets or sets a value indicating whether splitters should be visible.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Control.VerticalSplitter.SplitterSize">
            <summary>
            Gets or sets the size of the splitter.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.DragDrop.DragAndDrop">
            <summary>
            Drag and drop handling.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Input.InputHandler">
            <summary>
            Input handling.
            </summary>
        </member>
        <member name="F:Alt.GUI.Temporary.Gwen.Input.InputHandler.HoveredControl">
            <summary>
            Control currently hovered by mouse.
            </summary>
        </member>
        <member name="F:Alt.GUI.Temporary.Gwen.Input.InputHandler.m_KeyboardFocus">
            <summary>
            Control that corrently has keyboard focus.
            </summary>
        </member>
        <member name="F:Alt.GUI.Temporary.Gwen.Input.InputHandler.MouseFocus">
            <summary>
            Control that currently has mouse focus.
            </summary>
        </member>
        <member name="F:Alt.GUI.Temporary.Gwen.Input.InputHandler.MousePosition">
            <summary>
            Current mouse position.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Input.InputHandler.IsKeyDown(Alt.GUI.Keys)">
            <summary>
            Checks if the given key is pressed.
            </summary>
            <param name="key">Key to check.</param>
            <returns>True if the key is down.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Input.InputHandler.DoSpecialKeys(Alt.GUI.Temporary.Gwen.Control.Base,System.Char)">
            <summary>
            Handles copy, paste etc.
            </summary>
            <param name="canvas">Canvas.</param>
            <param name="chr">Input character.</param>
            <returns>True if the key was handled.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Input.InputHandler.HandleAccelerator(Alt.GUI.Temporary.Gwen.Control.Base,System.Char)">
            <summary>
            Handles accelerator input.
            </summary>
            <param name="canvas">Canvas.</param>
            <param name="chr">Input character.</param>
            <returns>True if the key was handled.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Input.InputHandler.OnMouseMoved(Alt.GUI.Temporary.Gwen.Control.Base,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Mouse moved handler.
            </summary>
            <param name="canvas">Canvas.</param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="dx"></param>
            <param name="dy"></param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Input.InputHandler.OnCanvasThink(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Handles focus updating and key autorepeats.
            </summary>
            <param name="control">Unused.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Input.InputHandler.OnMouseClicked(Alt.GUI.Temporary.Gwen.Control.Base,Alt.GUI.MouseButtons,System.Boolean)">
            <summary>
            Mouse click handler.
            </summary>
            <param name="canvas">Canvas.</param>
            <param name="mouseButton">Mouse button number.</param>
            <param name="down">Specifies if the button is down.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Input.InputHandler.OnKeyEvent(Alt.GUI.Temporary.Gwen.Control.Base,Alt.GUI.Keys,System.Boolean)">
            <summary>
            Key handler.
            </summary>
            <param name="canvas">Canvas.</param>
            <param name="key">Key.</param>
            <param name="down">True if the key is down.</param>
            <returns>True if handled.</returns>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Input.InputHandler.DoubleClickSpeed">
            <summary>
            Maximum time in seconds between mouse clicks to be recognized as double click.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Input.InputHandler.KeyRepeatRate">
            <summary>
            Time in seconds between autorepeating of keys.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Input.InputHandler.KeyRepeatDelay">
            <summary>
            Time in seconds before key starts to autorepeat.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Input.InputHandler.IsLeftMouseDown">
            <summary>
            Indicates whether the left mouse button is down.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Input.InputHandler.IsRightMouseDown">
            <summary>
            Indicates whether the right mouse button is down.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Input.InputHandler.IsMiddleMouseDown">
            <summary>
            Indicates whether the right mouse button is down.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Input.InputHandler.IsShiftDown">
            <summary>
            Indicates whether the shift key is down.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Input.InputHandler.IsControlDown">
            <summary>
            Indicates whether the control key is down.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Input.InputHandler.IsAltDown">
            <summary>
            Indicates whether the Alt key is down.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Input.KeyData">
            <summary>
            Keyboard state.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Margin">
            <summary>
            Represents outer spacing.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Padding">
            <summary>
            Represents inner spacing.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Pos">
            <summary>
            Represents relative position.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Renderer.Base">
            <summary>
            Base renderer.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Renderer.Base.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Renderer.Base"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Renderer.Base.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Renderer.Base.Begin">
            <summary>
            Starts rendering.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Renderer.Base.End">
            <summary>
            Stops rendering.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Renderer.Base.DrawLine(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a line.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Renderer.Base.DrawFilledRect(Alt.Sketch.RectI)">
            <summary>
            Draws a solid filled rectangle.
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Renderer.Base.StartClip">
            <summary>
            Starts clipping to the current clipping rectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Renderer.Base.EndClip">
            <summary>
            Stops clipping.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Renderer.Base.LoadTexture(Alt.GUI.Temporary.Gwen.Texture)">
            <summary>
            Loads the specified texture.
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Renderer.Base.LoadTextureRaw(Alt.GUI.Temporary.Gwen.Texture,System.Byte[])">
            <summary>
            Initializes texture from raw pixel data.
            </summary>
            <param name="t">Texture to initialize. Dimensions need to be set.</param>
            <param name="pixelData">Pixel data in RGBA format.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Renderer.Base.LoadTextureStream(Alt.GUI.Temporary.Gwen.Texture,System.IO.Stream)">
            <summary>
            Initializes texture from image file data.
            </summary>
            <param name="t">Texture to initialize.</param>
            <param name="data">Image file as stream.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Renderer.Base.FreeTexture(Alt.GUI.Temporary.Gwen.Texture)">
            <summary>
            Frees the specified texture.
            </summary>
            <param name="t">Texture to free.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Renderer.Base.DrawTexturedRect(Alt.GUI.Temporary.Gwen.Texture,Alt.Sketch.RectI)">
            <summary>
            Draws textured rectangle.
            </summary>
            <param name="t">Texture to use.</param>
            <param name="targetRect">Rectangle bounds.</param>
            <param name="u1">Texture coordinate u1.</param>
            <param name="v1">Texture coordinate v1.</param>
            <param name="u2">Texture coordinate u2.</param>
            <param name="v2">Texture coordinate v2.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Renderer.Base.DrawMissingImage(Alt.Sketch.RectI)">
            <summary>
            Draws "missing image" default texture.
            </summary>
            <param name="rect">Target rectangle.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Renderer.Base.MeasureText(Alt.Sketch.Font,System.String)">
            <summary>
            Returns dimensions of the text using specified font.
            </summary>
            <param name="font">Font to use.</param>
            <param name="text">Text to measure.</param>
            <returns>Width and height of the rendered text.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Renderer.Base.RenderText(Alt.Sketch.Font,Alt.Sketch.PointI,System.String)">
            <summary>
            Renders text using specified font.
            </summary>
            <param name="font">Font to use.</param>
            <param name="position">Top-left corner of the text.</param>
            <param name="text">Text to render.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Renderer.Base.DrawLinedRect(Alt.Sketch.RectI)">
            <summary>
            Draws a lined rectangle. Used for keyboard focus overlay.
            </summary>
            <param name="rect">Target rectangle.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Renderer.Base.DrawPixel(System.Int32,System.Int32)">
            <summary>
            Draws a single pixel. Very slow, do not use. :P
            </summary>
            <param name="x">X.</param>
            <param name="y">Y.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Renderer.Base.PixelColor(Alt.GUI.Temporary.Gwen.Texture,System.Int32,System.Int32)">
            <summary>
            Gets pixel color of a specified texture. Slow.
            </summary>
            <param name="texture">Texture.</param>
            <param name="x">X.</param>
            <param name="y">Y.</param>
            <returns>Pixel color.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Renderer.Base.PixelColor(Alt.GUI.Temporary.Gwen.Texture,System.Int32,System.Int32,Alt.Sketch.Color)">
            <summary>
            Gets pixel color of a specified texture, returning default if otherwise failed. Slow.
            </summary>
            <param name="texture">Texture.</param>
            <param name="x">X.</param>
            <param name="y">Y.</param>
            <param name="defaultColor">Color to return on failure.</param>
            <returns>Pixel color.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Renderer.Base.DrawShavedCornerRect(Alt.Sketch.RectI)">
            <summary>
            Draws a round-corner rectangle.
            </summary>
            <param name="rect">Target rectangle.</param>
            <param name="slight"></param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Renderer.Base.Translate(System.Int32@,System.Int32@)">
            <summary>
            Translates a panel's local drawing coordinate into view space, taking offsets into account.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Renderer.Base.Translate(Alt.Sketch.PointI)">
            <summary>
            Translates a panel's local drawing coordinate into view space, taking offsets into account.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Renderer.Base.Translate(Alt.Sketch.RectI)">
            <summary>
            Translates a panel's local drawing coordinate into view space, taking offsets into account.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Renderer.Base.AddRenderOffset(Alt.Sketch.PointI)">
            <summary>
            Adds a point to the render offset.
            </summary>
            <param name="offset">PointI to add.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Renderer.Base.AddClipRegion(Alt.Sketch.RectI)">
            <summary>
            Adds a rectangle to the clipping region.
            </summary>
            <param name="rect">Rectangle to add.</param>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Renderer.Base.DrawColor">
            <summary>
            Gets or sets the current drawing color.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Renderer.Base.RenderOffset">
            <summary>
            Rendering offset. No need to touch it usually.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Renderer.Base.ClipRegion">
            <summary>
            Clipping rectangle.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Renderer.Base.ClipRegionVisible">
            <summary>
            Indicates whether the clip region is visible.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Renderer.Base.CTT">
            <summary>
            Cache to texture provider.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Renderer.ICacheToTexture.SetupCacheTexture(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Called to set the target up for rendering.
            </summary>
            <param name="control">Control to be rendered.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Renderer.ICacheToTexture.FinishCacheTexture(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Called when cached rendering is done.
            </summary>
            <param name="control">Control to be rendered.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Renderer.ICacheToTexture.DrawCachedControlTexture(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Called when gwen wants to draw the cached version of the control. 
            </summary>
            <param name="control">Control to be rendered.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Renderer.ICacheToTexture.CreateControlCacheTexture(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Called to actually create a cached texture. 
            </summary>
            <param name="control">Control to be rendered.</param>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Skin.Base">
            <summary>
            Base skin.
            </summary>
        </member>
        <member name="F:Alt.GUI.Temporary.Gwen.Skin.Base.Colors">
            <summary>
            Colors of various UI elements.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Skin.Base.#ctor(Alt.GUI.Temporary.Gwen.Renderer.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Skin.Base"/> class.
            </summary>
            <param name="renderer">Renderer to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Skin.Base.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Skin.Base.SetDefaultFont(System.String)">
            <summary>
            Sets the default text font.
            </summary>
            <param name="faceName">Font name. Meaning can vary depending on the renderer.</param>
            <param name="size">Font size.</param>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Skin.Base.DefaultFont">
            <summary>
            Default font to use when rendering text if none specified.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Skin.Base.Renderer">
            <summary>
            Renderer used.
            </summary>
        </member>
        <!-- Некорректный комментарий в формате XML для члена "T:Alt.GUI.Temporary.Gwen.Skin.Simple" проигнорирован -->
        <member name="T:Alt.GUI.Temporary.Gwen.Skin.SkinColors">
            <summary>
            UI colors used by skins.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Skin.TexturedBase">
            <summary>
            Base textured skin.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Skin.TexturedBase.#ctor(Alt.GUI.Temporary.Gwen.Renderer.Base,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Skin.TexturedBase"/> class.
            </summary>
            <param name="renderer">Renderer to use.</param>
            <param name="textureName">Name of the skin texture map.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Skin.TexturedBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Skin.Texturing.Bordered">
            <summary>
            3x3 texture grid.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Skin.Texturing.Single">
            <summary>
            Single textured element.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Texture">
            <summary>
            Represents a texture.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Texture.#ctor(Alt.GUI.Temporary.Gwen.Renderer.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.Temporary.Gwen.Texture"/> class.
            </summary>
            <param name="renderer">Renderer to use.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Texture.Load(System.String)">
            <summary>
            Loads the specified texture.
            </summary>
            <param name="name">Texture name.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Texture.LoadRaw(System.Int32,System.Int32,System.Byte[])">
            <summary>
            Initializes the texture from raw pixel data.
            </summary>
            <param name="width">Texture width.</param>
            <param name="height">Texture height.</param>
            <param name="pixelData">Color array in RGBA format.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Texture.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Texture.Name">
            <summary>
            Texture name. Usually file name, but exact meaning depends on renderer.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Texture.RendererData">
            <summary>
            Renderer data.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Texture.Failed">
            <summary>
            Indicates that the texture failed to load.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Texture.Width">
            <summary>
            Texture width.
            </summary>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Texture.Height">
            <summary>
            Texture height.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.ToolTipHandler">
            <summary>
            Tooltip handling.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ToolTipHandler.Enable(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Enables tooltip display for the specified control.
            </summary>
            <param name="control">Target control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ToolTipHandler.Disable(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Disables tooltip display for the specified control.
            </summary>
            <param name="control">Target control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ToolTipHandler.ControlDeleted(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Disables tooltip display for the specified control.
            </summary>
            <param name="control">Target control.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.ToolTipHandler.RenderToolTip(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            Renders the currently visible tooltip.
            </summary>
            <param name="skin"></param>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Util">
            <summary>
            Misc utility functions.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Util.SplitAndKeep(System.String,System.String)">
            <summary>
            Splits a string but keeps the separators intact (at the end of split parts).
            </summary>
            <param name="text">String to split.</param>
            <param name="separators">Separator characters.</param>
            <returns>Split strings.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Util.GetTimeInSeconds">
            <summary>
            Gets time since last measurement.
            </summary>
            <returns>Time interval in seconds.</returns>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Renderer.AltSketchRenderer.FlushTextCache">
            <summary>
            Clears the text rendering cache. Make sure to call this if cached strings size becomes too big (check TextCacheSize).
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Renderer.AltSketchRenderer.SetupCacheTexture(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Called to set the target up for rendering.
            </summary>
            <param name="control">Control to be rendered.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Renderer.AltSketchRenderer.FinishCacheTexture(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Called when cached rendering is done.
            </summary>
            <param name="control">Control to be rendered.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Renderer.AltSketchRenderer.DrawCachedControlTexture(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Called when gwen wants to draw the cached version of the control. 
            </summary>
            <param name="control">Control to be rendered.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Renderer.AltSketchRenderer.CreateControlCacheTexture(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Called to actually create a cached texture. 
            </summary>
            <param name="control">Control to be rendered.</param>
        </member>
        <member name="P:Alt.GUI.Temporary.Gwen.Renderer.AltSketchRenderer.CTT">
            <summary>
            Cache to texture provider.
            </summary>
        </member>
        <member name="T:Alt.GUI.Temporary.Gwen.Renderer.AltSketchRenderer.TextRenderer">
            <summary>
            Uses System.Drawing for 2d text rendering.
            </summary>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Renderer.AltSketchRenderer.TextRenderer.#ctor(System.Int32,System.Int32,Alt.GUI.Temporary.Gwen.Renderer.AltSketchRenderer)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="width">The width of the backing store in pixels.</param>
            <param name="height">The height of the backing store in pixels.</param>
            <param name="renderer">GWEN renderer.</param>
        </member>
        <member name="M:Alt.GUI.Temporary.Gwen.Renderer.AltSketchRenderer.TextRenderer.DrawString(System.String,Alt.Sketch.Font,Alt.Sketch.Brush,Alt.Sketch.PointI,Alt.Sketch.StringFormat)">
            <summary>
            Draws the specified string to the backing store.
            </summary>
            <param name="text">The <see cref="T:System.String"/> to draw.</param>
            <param name="font">The <see cref="T:Alt.Sketch.Font"/> that will be used.</param>
            <param name="brush">The <see cref="T:Alt.Sketch.Brush"/> that will be used.</param>
            <param name="point">The location of the text on the backing store, in 2d pixel coordinates.
            The origin (0, 0) lies at the top-left corner of the backing store.</param>
        </member>
        <member name="T:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlLabel">
            <summary>
            Provides HTML rendering using the text property.<br/>
            AltGUI control that will render html content in it's client rectangle.<br/>
            Using <see cref="P:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlLabel.AutoSize"/> and <see cref="P:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlLabel.AutoSizeHeightOnly"/> client can control how the html content effects the
            size of the label. Either case scrollbars are never shown and html content outside of client bounds will be clipped.
            <see cref="P:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlLabel.MaximumSize"/> and <see cref="P:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlLabel.MinimumSize"/> with AutoSize can limit the max/min size of the control<br/>
            The control will handle mouse and keyboard events on it to support html text selection, copy-paste and mouse clicks.<br/>
            <para>
            The major differential to use HtmlPanel or HtmlLabel is size and scrollbars.<br/>
            If the size of the control depends on the html content the HtmlLabel should be used.<br/>
            If the size is set by some kind of layout then HtmlPanel is more suitable, also shows scrollbars if the html contents is larger than the control client rectangle.<br/>
            </para>
            <para>
            <h4>AutoSize:</h4>
            <u>AutoSize = AutoSizeHeightOnly = false</u><br/>
            The label size will not change by the html content. MaximumSize and MinimumSize are ignored.<br/>
            <br/>
            <u>AutoSize = true</u><br/>
            The width and height is adjustable by the html content, the width will be longest line in the html, MaximumSize.Width will restrict it but it can be lower than that.<br/>
            <br/>
            <u>AutoSizeHeightOnly = true</u><br/>
            The width of the label is set and will not change by the content, the height is adjustable by the html content with restrictions to the MaximumSize.Height and MinimumSize.Height values.<br/>
            </para>
            <para>
            <h4>LinkClicked event</h4>
            Raised when the user clicks on a link in the html.<br/>
            Allows canceling the execution of the link.
            </para>
            <para>
            <h4>StylesheetLoad event:</h4>
            Raised when aa stylesheet is about to be loaded by file path or URI by link element.<br/>
            This event allows to provide the stylesheet manually or provide new source (file or uri) to load from.<br/>
            If no alternative data is provided the original source will be used.<br/>
            </para>
            <para>
            <h4>ImageLoad event:</h4>
            Raised when an image is about to be loaded by file path or URI.<br/>
            This event allows to provide the image manually, if not handled the image will be loaded from file or download from URI.
            </para>
            <para>
            <h4>RenderError event:</h4>
            Raised when an error occurred during html rendering.<br/>
            </para>
            </summary>
        </member>
        <member name="F:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlLabel._htmlContainer">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlLabel._baseRawCssData">
            <summary>
            the raw base stylesheet data used in the control
            </summary>
        </member>
        <member name="F:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlLabel._baseCssData">
            <summary>
            the base stylesheet data used in the panel
            </summary>
        </member>
        <member name="F:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlLabel._autoSizeHight">
            <summary>
            is to handle auto size of the control height only
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlLabel.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Creates a new HTML Label
            </summary>
        </member>
        <member name="F:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlLabel.m_AutoSize">
            <summary>
            Automatically sets the size of the label by content size
            </summary>
        </member>
        <member name="F:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlLabel.m_Text">
            <summary>
            Gets or sets the html of this control.
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlLabel.GetHtml">
            <summary>
            Get html from the current DOM tree with inline style.
            </summary>
            <returns>generated html</returns>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlLabel.PerformLayout">
            <summary>
            Perform the layout of the html in the control.
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlLabel.OnPaint(Alt.GUI.PaintEventArgs)">
            <summary>
            Perform paint of the html in the control.
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlLabel.OnMouseMove(Alt.GUI.MouseEventArgs)">
            <summary>
            Handle mouse move to handle hover cursor and text selection. 
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlLabel.OnMouseDown(Alt.GUI.MouseEventArgs)">
            <summary>
            Handle mouse down to handle selection. 
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlLabel.OnMouseLeave(System.EventArgs)">
            <summary>
            Handle mouse leave to handle cursor change.
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlLabel.OnMouseUp(Alt.GUI.MouseEventArgs)">
            <summary>
            Handle mouse up to handle selection and link click. 
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlLabel.OnMouseDoubleClick(Alt.GUI.MouseEventArgs)">
            <summary>
            Handle mouse double click to select word under the mouse. 
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlLabel.OnLinkClicked(System.Object,Alt.GUI.HtmlLinkClickedEventArgs)">
            <summary>
            Propogate the LinkClicked event from root container.
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlLabel.OnRenderError(System.Object,Alt.GUI.HtmlRenderErrorEventArgs)">
            <summary>
            Propagate the Render Error event from root container.
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlLabel.OnStylesheetLoad(System.Object,Alt.GUI.HtmlStylesheetLoadEventArgs)">
            <summary>
            Propagate the stylesheet load event from root container.
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlLabel.OnImageLoad(System.Object,Alt.GUI.HtmlImageLoadEventArgs)">
            <summary>
            Propagate the image load event from root container.
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlLabel.OnRefresh(System.Object,Alt.GUI.HtmlRenderer.Core.Entities.HtmlRefreshEventArgs)">
            <summary>
            Handle html renderer invalidate and re-layout as requested.
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlLabel.Dispose">
            <summary>
            Release the html container resources.
            </summary>
        </member>
        <member name="E:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlLabel.LinkClicked">
            <summary>
            Raised when the user clicks on a link in the html.<br/>
            Allows canceling the execution of the link.
            </summary>
        </member>
        <member name="E:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlLabel.RenderError">
            <summary>
            Raised when an error occured during html rendering.<br/>
            </summary>
        </member>
        <member name="E:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlLabel.StylesheetLoad">
            <summary>
            Raised when aa stylesheet is about to be loaded by file path or URI by link element.<br/>
            This event allows to provide the stylesheet manually or provide new source (file or uri) to load from.<br/>
            If no alternative data is provided the original source will be used.<br/>
            </summary>
        </member>
        <member name="E:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlLabel.ImageLoad">
            <summary>
            Raised when an image is about to be loaded by file path or URI.<br/>
            This event allows to provide the image manually, if not handled the image will be loaded from file or download from URI.
            </summary>
        </member>
        <member name="P:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlLabel.IsSelectionEnabled">
            <summary>
            Is content selection is enabled for the rendered html (default - true).<br/>
            If set to 'false' the rendered html will be static only with ability to click on links.
            </summary>
        </member>
        <member name="P:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlLabel.IsContextMenuEnabled">
            <summary>
            Is the build-in context menu enabled and will be shown on mouse right click (default - true)
            </summary>
        </member>
        <member name="P:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlLabel.BaseStylesheet">
            <summary>
            Set base stylesheet to be used by html rendered in the panel.
            </summary>
        </member>
        <member name="P:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlLabel.AutoSizeHeightOnly">
            <summary>
            Automatically sets the height of the label by content height (width is not effected).
            </summary>
        </member>
        <member name="P:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlLabel.MaximumSize">
            <summary>
            Gets or sets the max size the control get be set by <see cref="P:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlLabel.AutoSize"/> or <see cref="P:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlLabel.AutoSizeHeightOnly"/>.
            </summary>
            <returns>An ordered pair of type <see cref="T:SizeI"/> representing the width and height of a rectangle.</returns>
        </member>
        <member name="P:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlLabel.MinimumSize">
            <summary>
            Gets or sets the min size the control get be set by <see cref="P:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlLabel.AutoSize"/> or <see cref="P:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlLabel.AutoSizeHeightOnly"/>.
            </summary>
            <returns>An ordered pair of type <see cref="T:SizeI"/> representing the width and height of a rectangle.</returns>
        </member>
        <member name="T:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlPanel">
            <summary>
            Provides HTML rendering using the text property.<br/>
            WindowsForms control that will render html content in it's client rectangle.<br/>
            If <see cref="P:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlPanel.AutoScroll"/> is true and the layout of the html resulted in its content beyond the client bounds 
            of the panel it will show scrollbars (horizontal/verticle) allowing to scroll the content.<br/>
            If <see cref="P:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlPanel.AutoScroll"/> is false html content outside the client bounds will be cliped.<br/>
            The control will handle mouse and keyboard events on it to support html text selection, copy-paste and mouse clicks.<br/>
            <para>
            The major differential to use HtmlPanel or HtmlLabel is size and scrollbars.<br/>
            If the size of the control depends on the html content the HtmlLabel should be used.<br/>
            If the size is set by some kind of layout then HtmlPanel is more suitable, also shows scrollbars if the html contents is larger than the control client rectangle.<br/>
            </para>
            <para>
            <h4>AutoScroll:</h4>
            Allows showing scrollbars if html content is placed outside the visible boundaries of the panel.
            </para>
            <para>
            <h4>LinkClicked event:</h4>
            Raised when the user clicks on a link in the html.<br/>
            Allows canceling the execution of the link.
            </para>
            <para>
            <h4>StylesheetLoad event:</h4>
            Raised when aa stylesheet is about to be loaded by file path or URI by link element.<br/>
            This event allows to provide the stylesheet manually or provide new source (file or uri) to load from.<br/>
            If no alternative data is provided the original source will be used.<br/>
            </para>
            <para>
            <h4>ImageLoad event:</h4>
            Raised when an image is about to be loaded by file path or URI.<br/>
            This event allows to provide the image manually, if not handled the image will be loaded from file or download from URI.
            </para>
            <para>
            <h4>RenderError event:</h4>
            Raised when an error occured during html rendering.<br/>
            </para>
            </summary>
        </member>
        <member name="F:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlPanel._htmlContainer">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlPanel._baseRawCssData">
            <summary>
            the raw base stylesheet data used in the control
            </summary>
        </member>
        <member name="F:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlPanel._baseCssData">
            <summary>
            the base stylesheet data used in the control
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlPanel.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Creates a new HtmlPanel and sets a basic css for it's styling.
            </summary>
        </member>
        <member name="F:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlPanel.m_Text">
            <summary>
            Gets or sets the text of this panel
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlPanel.GetHtml">
            <summary>
            Get html from the current DOM tree with inline style.
            </summary>
            <returns>generated html</returns>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlPanel.PerformLayout">
            <summary>
            Perform the layout of the html in the control.
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlPanel.PerformHtmlLayout">
            <summary>
            Perform html container layout by the current panel client size.
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlPanel.OnLinkClicked(System.Object,Alt.GUI.HtmlLinkClickedEventArgs)">
            <summary>
            Propagate the LinkClicked event from root container.
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlPanel.OnRenderError(System.Object,Alt.GUI.HtmlRenderErrorEventArgs)">
            <summary>
            Propagate the Render Error event from root container.
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlPanel.OnStylesheetLoad(System.Object,Alt.GUI.HtmlStylesheetLoadEventArgs)">
            <summary>
            Propagate the stylesheet load event from root container.
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlPanel.OnImageLoad(System.Object,Alt.GUI.HtmlImageLoadEventArgs)">
            <summary>
            Propagate the image load event from root container.
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlPanel.OnRefresh(System.Object,Alt.GUI.HtmlRenderer.Core.Entities.HtmlRefreshEventArgs)">
            <summary>
            Handle html renderer invalidate and re-layout as requested.
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlPanel.IsInputKey(Alt.GUI.Keys)">
            <summary>
            Used to add arrow keys to the handled keys in <see cref="!:OnKeyDown"/>.
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlPanel.Dispose">
            <summary>
            Release the html container resources.
            </summary>
        </member>
        <member name="E:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlPanel.LinkClicked">
            <summary>
            Raised when the user clicks on a link in the html.<br/>
            Allows canceling the execution of the link.
            </summary>
        </member>
        <member name="E:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlPanel.RenderError">
            <summary>
            Raised when an error occured during html rendering.<br/>
            </summary>
        </member>
        <member name="E:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlPanel.StylesheetLoad">
            <summary>
            Raised when aa stylesheet is about to be loaded by file path or URI by link element.<br/>
            This event allows to provide the stylesheet manually or provide new source (file or uri) to load from.<br/>
            If no alternative data is provided the original source will be used.<br/>
            </summary>
        </member>
        <member name="E:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlPanel.ImageLoad">
            <summary>
            Raised when an image is about to be loaded by file path or URI.<br/>
            This event allows to provide the image manually, if not handled the image will be loaded from file or download from URI.
            </summary>
        </member>
        <member name="P:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlPanel.IsSelectionEnabled">
            <summary>
            Is content selection is enabled for the rendered html (default - true).<br/>
            If set to 'false' the rendered html will be static only with ability to click on links.
            </summary>
        </member>
        <member name="P:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlPanel.IsContextMenuEnabled">
            <summary>
            Is the build-in context menu enabled and will be shown on mouse right click (default - true)
            </summary>
        </member>
        <member name="P:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlPanel.BaseStylesheet">
            <summary>
            Set base stylesheet to be used by html rendered in the panel.
            </summary>
        </member>
        <member name="P:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlPanel.AutoScroll">
            <summary>
            Gets or sets a value indicating whether the container enables the user to scroll to any controls placed outside of its visible boundaries. 
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlPanel.HtmlDrawingPanel.OnPaint(Alt.GUI.PaintEventArgs)">
            <summary>
            Perform paint of the html in the control.
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlPanel.HtmlDrawingPanel.OnClick(System.EventArgs)">
            <summary>
            Set focus on the control for keyboard scrrollbars handling.
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlPanel.HtmlDrawingPanel.OnMouseMove(Alt.GUI.MouseEventArgs)">
            <summary>
            Handle mouse move to handle hover cursor and text selection. 
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlPanel.HtmlDrawingPanel.OnMouseLeave(System.EventArgs)">
            <summary>
            Handle mouse leave to handle cursor change.
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlPanel.HtmlDrawingPanel.OnMouseDown(Alt.GUI.MouseEventArgs)">
            <summary>
            Handle mouse down to handle selection. 
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlPanel.HtmlDrawingPanel.OnMouseUp(Alt.GUI.MouseEventArgs)">
            <summary>
            Handle mouse up to handle selection and link click. 
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlPanel.HtmlDrawingPanel.OnMouseDoubleClick(Alt.GUI.MouseEventArgs)">
            <summary>
            Handle mouse double click to select word under the mouse. 
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlPanel.HtmlDrawingPanel.OnKeyDown(Alt.GUI.KeyEventArgs)">
            <summary>
            Handle key down event for selection, copy and scrollbars handling.
            </summary>
        </member>
        <member name="T:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlToolTip">
            <summary>
            Provides HTML rendering on the tooltips
            </summary>
        </member>
        <member name="F:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlToolTip._htmlContainer">
            <summary>
            the container to render and handle the html shown in the tooltip
            </summary>
        </member>
        <member name="F:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlToolTip._baseRawCssData">
            <summary>
            the raw base stylesheet data used in the control
            </summary>
        </member>
        <member name="F:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlToolTip._baseCssData">
            <summary>
            the base stylesheet data used in the panel
            </summary>
        </member>
        <member name="F:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlToolTip._linkHandlingTimer">
            <summary>
            timer used to handle mouse move events when mouse is over the tooltip.<br/>
            Used for link handling.
            </summary>
        </member>
        <member name="F:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlToolTip._associatedControl">
            <summary>
            the control that the tooltip is currently showing on.<br/>
            Used for link handling.
            </summary>
        </member>
        <member name="F:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlToolTip._allowLinksHandling">
            <summary>
            If to handle links in the tooltip (default: false).<br/>
            When set to true the mouse pointer will change to hand when hovering over a tooltip and
            if clicked the <see cref="E:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlToolTip.LinkClicked"/> event will be raised although the tooltip will be closed.
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlToolTip.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Init.
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlToolTip.OnPopupAsToolTip(System.Object,Alt.ComponentModel.CancelEventArgs)">
            <summary>
            On tooltip appear set the html by the associated control, layout and set the tooltip size by the html size.
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlToolTip.OnPaint(Alt.GUI.PaintEventArgs)">
            <summary>
            Draw the html using the tooltip graphics.
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlToolTip.OnLinkClicked(System.Object,Alt.GUI.HtmlLinkClickedEventArgs)">
            <summary>
            Propagate the LinkClicked event from root container.
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlToolTip.OnRenderError(System.Object,Alt.GUI.HtmlRenderErrorEventArgs)">
            <summary>
            Propagate the Render Error event from root container.
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlToolTip.OnStylesheetLoad(System.Object,Alt.GUI.HtmlStylesheetLoadEventArgs)">
            <summary>
            Propagate the stylesheet load event from root container.
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlToolTip.OnImageLoad(System.Object,Alt.GUI.HtmlImageLoadEventArgs)">
            <summary>
            Propagate the image load event from root container.
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlToolTip.OnRefresh(System.Object,Alt.GUI.HtmlRenderer.Core.Entities.HtmlRefreshEventArgs)">
            <summary>
            Handle html renderer invalidate and re-layout as requested.
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlToolTip.OnLinkHandlingTimerTick(System.Object,System.EventArgs)">
            <summary>
            Raised on link handling timer tick, used for:
            1. Know when the tooltip is hidden by checking the visibility of the tooltip window.
            2. Call HandleMouseMove so the mouse cursor will react if over a link element.
            3. Call HandleMouseDown and HandleMouseUp to simulate click on a link if one was clicked.
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlToolTip.Dispose">
            <summary>
            Unsubscribe from events and dispose of <see cref="F:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlToolTip._htmlContainer"/>.
            </summary>
        </member>
        <member name="E:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlToolTip.LinkClicked">
            <summary>
            Raised when the user clicks on a link in the html.<br/>
            Allows canceling the execution of the link.
            </summary>
        </member>
        <member name="E:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlToolTip.RenderError">
            <summary>
            Raised when an error occurred during html rendering.<br/>
            </summary>
        </member>
        <member name="E:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlToolTip.StylesheetLoad">
            <summary>
            Raised when aa stylesheet is about to be loaded by file path or URI by link element.<br/>
            This event allows to provide the stylesheet manually or provide new source (file or uri) to load from.<br/>
            If no alternative data is provided the original source will be used.<br/>
            </summary>
        </member>
        <member name="E:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlToolTip.ImageLoad">
            <summary>
            Raised when an image is about to be loaded by file path or URI.<br/>
            This event allows to provide the image manually, if not handled the image will be loaded from file or download from URI.
            </summary>
        </member>
        <member name="P:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlToolTip.BaseStylesheet">
            <summary>
            Set base stylesheet to be used by html rendered in the panel.
            </summary>
        </member>
        <member name="P:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlToolTip.AllowLinksHandling">
            <summary>
            If to handle links in the tooltip (default: false).<br/>
            When set to true the mouse pointer will change to hand when hovering over a tooltip and
            if clicked the <see cref="E:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlToolTip.LinkClicked"/> event will be raised although the tooltip will be closed.
            </summary>
        </member>
        <member name="P:Alt.GUI.HtmlRenderer.Temporary.Gwen.HtmlToolTip.MaximumSize">
            <summary>
            Gets or sets the max size the tooltip.
            </summary>
            <returns>An ordered pair of type <see cref="T:System.Drawing.Size"/> representing the width and height of a rectangle.</returns>
        </member>
        <member name="T:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl">
            <summary>
            A Gwen PlotSurface2D control.
            </summary>
            <remarks>
            Unfortunately it's not possible to derive from both Control and NPlot.PlotSurface2D.
            </remarks>
        </member>
        <member name="T:Alt.GUI.NPlot.IPlotSurface2D">
            <summary>
            Defines the PlotSurface2D interface - All specific PlotSurface2D classes
            that use PlotSurface2D for their underlying operations should implement
            this class.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.IPlotSurface2D.Add(Alt.GUI.NPlot.IDrawable,System.Int32)">
            <summary>
            Adds a drawable object to the plot surface. If the object is an IPlot, 
            the PlotSurface2D axes will also be updated.
            </summary>
            <param name="p">The IDrawable object to add to the plot surface.</param>
            <param name="zOrder">The z-ordering when drawing (objects with lower numbers are drawn first)</param>
        </member>
        <member name="M:Alt.GUI.NPlot.IPlotSurface2D.Add(Alt.GUI.NPlot.IDrawable,Alt.GUI.NPlot.PlotSurface2D.XAxisPosition,Alt.GUI.NPlot.PlotSurface2D.YAxisPosition,System.Int32)">
            <summary>
            Adds a drawable object to the plot surface against the specified axes. If
            the object is an IPlot, the PlotSurface2D axes will also be updated.
            </summary>
            <param name="p">the IDrawable object to add to the plot surface</param>
            <param name="xp">the x-axis to add the plot against.</param>
            <param name="yp">the y-axis to add the plot against.</param>
            <param name="zOrder">The z-ordering when drawing (objects with lower numbers are drawn first)</param>
        </member>
        <member name="M:Alt.GUI.NPlot.IPlotSurface2D.Add(Alt.GUI.NPlot.IDrawable)">
            <summary>
            Adds a drawable object to the plot surface. If the object is an IPlot, 
            the PlotSurface2D axes will also be updated.
            </summary>
            <param name="p">The IDrawable object to add to the plot surface.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.IPlotSurface2D.Add(Alt.GUI.NPlot.IDrawable,Alt.GUI.NPlot.PlotSurface2D.XAxisPosition,Alt.GUI.NPlot.PlotSurface2D.YAxisPosition)">
            <summary>
            Adds a drawable object to the plot surface against the specified axes. If
            the object is an IPlot, the PlotSurface2D axes will also be updated.
            </summary>
            <param name="p">the IDrawable object to add to the plot surface</param>
            <param name="xax">the x-axis to add the plot against.</param>
            <param name="yax">the y-axis to add the plot against.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.IPlotSurface2D.Clear">
            <summary>
            Clears the PlotSurface2D.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.IPlotSurface2D.AddAxesConstraint(Alt.GUI.NPlot.AxesConstraint)">
            <summary>
            Add an axis constraint to the plot surface. Axis constraints can
            specify relative world-pixel scalings, absolute axis positions etc.
            </summary>
            <param name="c">The axis constraint to add.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.IPlotSurface2D.Remove(Alt.GUI.NPlot.IDrawable,System.Boolean)">
            <summary>
            Remove a drawable object from the plot surface.
            </summary>
            <param name="p">the object to remove</param>
            <param name="updateAxes">whether or not to update the axes after removal.</param>
        </member>
        <member name="P:Alt.GUI.NPlot.IPlotSurface2D.Legend">
            <summary>
            Gets or Sets the legend to use with this plot surface.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.IPlotSurface2D.LegendZOrder">
            <summary>
            Setting this value determines the order (relative to IDrawables added to the plot surface)
            that the legend is drawn.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.IPlotSurface2D.SurfacePadding">
            <summary>
            The distance in pixels to leave between of the edge of the bounding rectangle
            supplied to the Draw method, and the markings that make up the plot.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.IPlotSurface2D.PlotBackColor">
            <summary>
            A color used to paint the plot background. Mutually exclusive with PlotBackImage and PlotBackBrush
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.IPlotSurface2D.PlotBackImage">
            <summary>
            An imaged used to paint the plot background. Mutually exclusive with PlotBackColor and PlotBackBrush
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.IPlotSurface2D.PlotBackBrush">
            <summary>
            A Rectangle brush used to paint the plot background. Mutually exclusive with PlotBackColor and PlotBackBrush
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.IPlotSurface2D.Title">
            <summary>
            The plot surface title.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.IPlotSurface2D.AutoScaleTitle">
            <summary>
            Whether or not the title will be scaled according to size of the plot 
            surface.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.IPlotSurface2D.AutoScaleAutoGeneratedAxes">
            <summary>
            When plots are added to the plot surface, the axes they are attached to
            are immediately modified to reflect data of the plot. If 
            AutoScaleAutoGeneratedAxes is true when a plot is added, the axes will
            be turned in to auto scaling ones if they are not already [tick marks,
            tick text and label size scaled to size of plot surface]. If false,
            axes will not be autoscaling.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.IPlotSurface2D.TitleColor">
            <summary>
            Sets the title to be drawn using a solid brush of this color.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.IPlotSurface2D.TitleBrush">
            <summary>
            The brush used for drawing the title.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.IPlotSurface2D.TitleFont">
            <summary>
            The plot title font.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.IPlotSurface2D.SmoothingMode">
            <summary>
            Smoothing mode to use when drawing plots.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.IPlotSurface2D.XAxis1">
            <summary>
            The bottom abscissa axis.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.IPlotSurface2D.XAxis2">
            <summary>
            The top abscissa axis.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.IPlotSurface2D.YAxis1">
            <summary>
            The left ordinate axis.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.IPlotSurface2D.YAxis2">
            <summary>
            The right ordinate axis.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.IPlotSurface2D.Drawables">
            <summary>
            Gets an array list containing all drawables currently added to the PlotSurface2D.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.OnKeyDown(Alt.GUI.KeyEventArgs)">
            <summary>
            the key down callback
            </summary>
            <param name="e">information pertaining to the event</param>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.OnKeyUp(Alt.GUI.KeyEventArgs)">
            <summary>
            The key up callback.
            </summary>
            <param name="e">information pertaining to the event</param>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.OnPaint(Alt.GUI.PaintEventArgs)">
            <summary>
            the paint event callback.
            </summary>
            <param name="pe">the PaintEventArgs</param>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.DoPaint(Alt.GUI.PaintEventArgs,System.Int32,System.Int32)">
            <summary>
            All functionality of the OnPaint method is provided by this function.
            This allows use of the all encompasing PlotSurface.
            </summary>
            <param name="pe">the PaintEventArgs from paint event.</param>
            <param name="width">width of the control</param>
            <param name="height">height of the control</param>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Draw(Alt.Sketch.Graphics,Alt.Sketch.RectI)">
            <summary>
            Draws the plot surface on the supplied graphics surface [not the control surface].
            </summary>
            <param name="g">The graphics surface on which to draw</param>
            <param name="bounds">A bounding box on this surface that denotes the area on the
            surface to confine drawing to.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.drawDesignMode(Alt.Sketch.Graphics,Alt.Sketch.RectI)">
            <summary>
            Draw a lightweight representation of us for design mode.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Clear">
            <summary>
            Clears the plot and resets to default values.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Add(Alt.GUI.NPlot.IDrawable)">
            <summary>
            Adds a drawable object to the plot surface. If the object is an IPlot, 
            the PlotSurface2D axes will also be updated.
            </summary>
            <param name="p">The IDrawable object to add to the plot surface.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Add(Alt.GUI.NPlot.IDrawable,Alt.GUI.NPlot.PlotSurface2D.XAxisPosition,Alt.GUI.NPlot.PlotSurface2D.YAxisPosition)">
            <summary>
            Adds a drawable object to the plot surface against the specified axes. If
            the object is an IPlot, the PlotSurface2D axes will also be updated.
            </summary>
            <param name="p">the IDrawable object to add to the plot surface</param>
            <param name="xp">the x-axis to add the plot against.</param>
            <param name="yp">the y-axis to add the plot against.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Add(Alt.GUI.NPlot.IDrawable,System.Int32)">
            <summary>
            Adds a drawable object to the plot surface. If the object is an IPlot, 
            the PlotSurface2D axes will also be updated.
            </summary>
            <param name="p">The IDrawable object to add to the plot surface.</param>
            <param name="zOrder">The z-ordering when drawing (objects with lower numbers are drawn first)</param>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Add(Alt.GUI.NPlot.IDrawable,Alt.GUI.NPlot.PlotSurface2D.XAxisPosition,Alt.GUI.NPlot.PlotSurface2D.YAxisPosition,System.Int32)">
            <summary>
            Adds a drawable object to the plot surface against the specified axes. If
            the object is an IPlot, the PlotSurface2D axes will also be updated.
            </summary>
            <param name="p">the IDrawable object to add to the plot surface</param>
            <param name="xp">the x-axis to add the plot against.</param>
            <param name="yp">the y-axis to add the plot against.</param>
            <param name="zOrder">The z-ordering when drawing (objects with lower numbers are drawn first)</param>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.OnMouseDown(Alt.GUI.MouseEventArgs)">
            <summary>
            Mouse down event handler.
            </summary>
            <param name="e">the event args.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.DoMouseDown(Alt.GUI.MouseEventArgs)">
            <summary>
            All functionality of the OnMouseDown function is contained here.
            This allows use of the all encompasing PlotSurface.
            </summary>
            <param name="e">The mouse event args from the window we are drawing to.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.OnMouseWheel(Alt.GUI.MouseEventArgs)">
            <summary>
            Mouse Wheel event handler.
            </summary>
            <param name="e">the event args</param>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.DoMouseWheel(Alt.GUI.MouseEventArgs)">
            <summary>
            All functionality of the OnMouseWheel function is containd here.
            This allows use of the all encompasing PlotSurface.
            </summary>
            <param name="e">the event args.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.DoMouseMove(Alt.GUI.MouseEventArgs,Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            All functionality of the OnMouseMove function is contained here.
            This allows use of the all encompasing PlotSurface.
            </summary>
            <param name="e">The mouse event args from the window we are drawing to.</param>
            <param name="ctr">The control that the mouse event happened in.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.OnMouseMove(Alt.GUI.MouseEventArgs)">
            <summary>
            MouseMove event handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.OnMouseLeave(System.EventArgs)">
            <summary>
            MouseLeave event handler. It has to invalidate the control to get rid of
            any remnant of vertical and horizontal guides.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.DoMouseLeave(System.EventArgs,Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.DoMouseUp(Alt.GUI.MouseEventArgs,Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            All functionality of the OnMouseUp function is contained here.
            This allows use of the all encompasing PlotSurface.
            </summary>
            <param name="e">The mouse event args from the window we are drawing to.</param>
            <param name="ctr">The control that the mouse event happened in.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.OnMouseUp(Alt.GUI.MouseEventArgs)">
            <summary>
            mouse up event handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.OriginalDimensions">
            <summary>
            sets axes to be those saved in the cache.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.AddAxesConstraint(Alt.GUI.NPlot.AxesConstraint)">
            <summary>
            Add an axis constraint to the plot surface. Axis constraints can
            specify relative world-pixel scalings, absolute axis positions etc.
            </summary>
            <param name="c">The axis constraint to add.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.CopyToClipboard">
            <summary>
            Coppies the chart currently shown in the control to the clipboard as an image.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.CopyDataToClipboard">
            <summary>
            Coppies data in the current plot surface view window to the clipboard
            as text.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Remove(Alt.GUI.NPlot.IDrawable,System.Boolean)">
            <summary>
            Remove a drawable object from the plot surface.
            </summary>
            <param name="p">the drawable to remove</param>
            <param name="updateAxes">whether or not to update the axes after removing the idrawable.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.CacheAxes">
            <summary>
            Remembers the current axes - useful in interactions.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.AddInteraction(Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.Interaction)">
            <summary>
            Adds and interaction to the plotsurface that adds functionality that responds 
            to a set of mouse / keyboard events. 
            </summary>
            <param name="i">the interaction to add.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.RemoveInteraction(Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.Interaction)">
            <summary>
            Remove a previously added interaction
            </summary>
            <param name="i">interaction to remove</param>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.OnInteractionOccured(System.Object)">
            <summary>
            Default function called when plotsurface modifying interaction occured. 
            
            Override this, or add method to InteractionOccured event.
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.OnPreRefresh(System.Object)">
            <summary>
            Default function called just before a refresh happens.
            </summary>
            <param name="sender"></param>
        </member>
        <member name="P:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.ShowCoordinates">
            <summary>
            Flag to display a coordinates in a tooltip.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Legend">
            <summary>
            Gets or Sets the legend to use with this plot surface.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.LegendZOrder">
            <summary>
            Gets or Sets the legend z-order.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.AutoScaleTitle">
            <summary>
            Whether or not the title will be scaled according to size of the plot 
            surface.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.AutoScaleAutoGeneratedAxes">
            <summary>
            When plots are added to the plot surface, the axes they are attached to
            are immediately modified to reflect data of the plot. If 
            AutoScaleAutoGeneratedAxes is true when a plot is added, the axes will
            be turned in to auto scaling ones if they are not already [tick marks,
            tick text and label size scaled to size of plot surface]. If false,
            axes will not be autoscaling.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Title">
            <summary>
            The plot surface title.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.TitleFont">
            <summary>
            The font used to draw the title.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.SurfacePadding">
            <summary>
            Padding of this width will be left between what is drawn and the control border.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.XAxis1">
            <summary>
            The first abscissa axis.
            </summary>
            
        </member>
        <member name="P:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.YAxis1">
            <summary>
            The first ordinate axis.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.XAxis2">
            <summary>
            The second abscissa axis.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.YAxis2">
            <summary>
            The second ordinate axis.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.PhysicalXAxis1Cache">
            <summary>
            The physical XAxis1 that was last drawn.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.PhysicalYAxis1Cache">
            <summary>
            The physical YAxis1 that was last drawn.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.PhysicalXAxis2Cache">
            <summary>
            The physical XAxis2 that was last drawn.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.PhysicalYAxis2Cache">
            <summary>
            The physical YAxis2 that was last drawn.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.PlotBackColor">
            <summary>
            A color used to paint the plot background. Mutually exclusive with PlotBackImage and PlotBackBrush
            </summary>
            <remarks>not browsable or bindable because only set method.</remarks>
        </member>
        <member name="P:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.PlotBackImage">
            <summary>
            An imaged used to paint the plot background. Mutually exclusive with PlotBackColor and PlotBackBrush
            </summary>
            <remarks>not browsable or bindable because only set method.</remarks>
        </member>
        <member name="P:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.PlotBackBrush">
            <summary>
            A Rectangle brush used to paint the plot background. Mutually exclusive with PlotBackColor and PlotBackBrush
            </summary>
            <remarks>not browsable or bindable because only set method.</remarks>
        </member>
        <member name="P:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.TitleColor">
            <summary>
            Sets the title to be drawn using a solid brush of this color.
            </summary>
            <remarks>not browsable or bindable because only set method.</remarks>
        </member>
        <member name="P:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.TitleBrush">
            <summary>
            The brush used for drawing the title.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.SmoothingMode">
            <summary>
            Set smoothing mode for drawing plot objects.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.DateTimeToolTip">
            <summary>
            When true, tool tip will display x value as a DateTime. Quick hack - this will probably be 
            changed at some point.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Drawables">
            <summary>
            Gets an array list containing all drawables currently added to the PlotSurface2D.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.RightMenu">
            <summary>
            Sets the right context menu. Custom menus can be designed by overriding
            NPlot.PlotSurface2D.ContextMenu.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.DefaultContextMenu">
            <summary>
            Gets an instance of a NPlot.PlotSurface2D.ContextMenu that
            is useful in typical situations.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Inner">
            <summary>
            Allows access to the PlotSurface2D.
            </summary>
        </member>
        <member name="E:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.InteractionOccured">
            <summary>
            Event is fired when an interaction happens with the plot that causes it to be modified.
            </summary>
        </member>
        <member name="E:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.PreRefresh">
            <summary>
            Event fired when we are about to paint.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions">
            <summary>
            Encapsulates a number of separate "Interactions". An interaction is basically 
            a set of handlers for mouse and keyboard events that work together in a 
            specific way. 
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.Interaction">
            <summary>
            Base class for an interaction. All methods are virtual. Not abstract as not all interactions
            need to use all methods. Default functionality for each method is to do nothing. 
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.Interaction.DoMouseDown(Alt.GUI.MouseEventArgs,Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Handler for this interaction if a mouse down event is received.
            </summary>
            <param name="e">event args</param>
            <param name="ctr">reference to the control</param>
            <returns>true if plot surface needs refreshing.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.Interaction.DoMouseUp(Alt.GUI.MouseEventArgs,Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Handler for this interaction if a mouse up event is received.
            </summary>
            <param name="e">event args</param>
            <param name="ctr">reference to the control</param>
            <returns>true if plot surface needs refreshing.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.Interaction.DoMouseMove(Alt.GUI.MouseEventArgs,Alt.GUI.Temporary.Gwen.Control.Base,Alt.GUI.KeyEventArgs)">
            <summary>
            Handler for this interaction if a mouse move event is received.
            </summary>
            <param name="e">event args</param>
            <param name="ctr">reference to the control</param>
            <param name="lastKeyEventArgs"></param>
            <returns>true if plot surface needs refreshing.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.Interaction.DoMouseWheel(Alt.GUI.MouseEventArgs,Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Handler for this interaction if a mouse move event is received.
            </summary>
            <param name="e">event args</param>
            <param name="ctr">reference to the control</param>
            <returns>true if plot surface needs refreshing.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.Interaction.DoMouseLeave(System.EventArgs,Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Handler for this interaction if a mouse Leave event is received.
            </summary>
            <param name="e">event args</param>
            <param name="ctr">reference to the control</param>
            <returns>true if the plot surface needs refreshing.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.Interaction.DoPaint(Alt.GUI.PaintEventArgs,Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Handler for this interaction if a paint event is received.
            </summary>
            <param name="pe">paint event args</param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="T:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.RubberBandSelection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.RubberBandSelection.DoMouseDown(Alt.GUI.MouseEventArgs,Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.RubberBandSelection.DoMouseMove(Alt.GUI.MouseEventArgs,Alt.GUI.Temporary.Gwen.Control.Base,Alt.GUI.KeyEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
            <param name="lastKeyEventArgs"></param>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.RubberBandSelection.DoMouseUp(Alt.GUI.MouseEventArgs,Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.RubberBandSelection.DoPaint(Alt.GUI.PaintEventArgs,Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Draws a rectangle representing selection area. 
            </summary>
            <param name="start">a corner of the rectangle.</param>
            <param name="end">a corner of the rectangle diagonally opposite the first.</param>
            <param name="ctr">The control to draw to - this may not be us, if we have
            been contained by a PlotSurface.</param>
        </member>
        <member name="T:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.HorizontalGuideline">
            <summary>
            Horizontal line interaction
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.HorizontalGuideline.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.HorizontalGuideline.#ctor(Alt.Sketch.Color)">
            <summary>
            Constructor
            </summary>
            <param name="lineColor"></param>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.HorizontalGuideline.DoPaint(Alt.GUI.PaintEventArgs,Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            
            </summary>
            <param name="pe"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.HorizontalGuideline.DoMouseMove(Alt.GUI.MouseEventArgs,Alt.GUI.Temporary.Gwen.Control.Base,Alt.GUI.KeyEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
            <param name="lastKeyEventArgs"></param>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.HorizontalGuideline.DoMouseLeave(System.EventArgs,Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
            <returns></returns>
        </member>
        <member name="T:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.VerticalGuideline">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.VerticalGuideline.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.VerticalGuideline.#ctor(Alt.Sketch.Color)">
            <summary>
            
            </summary>
            <param name="lineColor"></param>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.VerticalGuideline.DoPaint(Alt.GUI.PaintEventArgs,Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            
            </summary>
            <param name="pe"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.VerticalGuideline.DoMouseMove(Alt.GUI.MouseEventArgs,Alt.GUI.Temporary.Gwen.Control.Base,Alt.GUI.KeyEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
            <param name="lastKeyEventArgs"></param>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.VerticalGuideline.DoMouseLeave(System.EventArgs,Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Handler for mouse leave event
            </summary>
            <param name="e">event args</param>
            <param name="ctr"></param>
            <returns></returns>
        </member>
        <member name="T:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.HorizontalDrag">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.HorizontalDrag.DoMouseDown(Alt.GUI.MouseEventArgs,Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.HorizontalDrag.DoMouseMove(Alt.GUI.MouseEventArgs,Alt.GUI.Temporary.Gwen.Control.Base,Alt.GUI.KeyEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
            <param name="lastKeyEventArgs"></param>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.HorizontalDrag.DoMouseUp(Alt.GUI.MouseEventArgs,Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
        </member>
        <member name="T:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.VerticalDrag">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.VerticalDrag.DoMouseDown(Alt.GUI.MouseEventArgs,Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.VerticalDrag.DoMouseMove(Alt.GUI.MouseEventArgs,Alt.GUI.Temporary.Gwen.Control.Base,Alt.GUI.KeyEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
            <param name="lastKeyEventArgs"></param>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.VerticalDrag.DoMouseUp(Alt.GUI.MouseEventArgs,Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
        </member>
        <member name="T:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.HorizontalRangeSelection">
            <summary>
            This plot intraction allows the user to select horizontal regions.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.HorizontalRangeSelection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.HorizontalRangeSelection.#ctor(System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="smallestAllowedRange">the smallest distance between the selected xmin and xmax for the selection to be performed.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.HorizontalRangeSelection.DoMouseDown(Alt.GUI.MouseEventArgs,Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Handler for mouse down event for this interaction
            </summary>
            <param name="e">the mouse event args</param>
            <param name="ctr">the plot surface this event applies to</param>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.HorizontalRangeSelection.DoMouseMove(Alt.GUI.MouseEventArgs,Alt.GUI.Temporary.Gwen.Control.Base,Alt.GUI.KeyEventArgs)">
            <summary>
            Handler for mouse move event for this interaction
            </summary>
            <param name="e">the mouse event args</param>
            <param name="ctr">the plot surface this event applies to</param>
            <param name="lastKeyEventArgs"></param>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.HorizontalRangeSelection.DoMouseUp(Alt.GUI.MouseEventArgs,Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Handler for mouse up event for this interaction
            </summary>
            <param name="e">the mouse event args</param>
            <param name="ctr">the plot surface this event applies to</param>
        </member>
        <member name="P:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.HorizontalRangeSelection.MinimumPixelDistanceForSelect">
            <summary>
            The minimum width of the selected region (in pixels) for the interaction to zoom.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.HorizontalRangeSelection.SmallestAllowedRange">
            <summary>
            The smallest range (distance between world min and world max) selectable.
            If a smaller region is selected, the selection will do nothing.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.AxisDrag">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.AxisDrag.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="enableDragWithCtr"></param>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.AxisDrag.DoMouseDown(Alt.GUI.MouseEventArgs,Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.AxisDrag.DoMouseMove(Alt.GUI.MouseEventArgs,Alt.GUI.Temporary.Gwen.Control.Base,Alt.GUI.KeyEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
            <param name="lastKeyEventArgs"></param>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.AxisDrag.DoMouseUp(Alt.GUI.MouseEventArgs,Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
        </member>
        <member name="P:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.AxisDrag.Sensitivity">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="T:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.MouseWheelZoom">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.MouseWheelZoom.DoMouseUp(Alt.GUI.MouseEventArgs,Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.MouseWheelZoom.DoMouseDown(Alt.GUI.MouseEventArgs,Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.MouseWheelZoom.DoMouseWheel(Alt.GUI.MouseEventArgs,Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
        </member>
        <member name="P:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.MouseWheelZoom.Sensitivity">
            <summary>
            Number of screen pixels equivalent to one wheel step.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.InteractionHandler">
            <summary>
            This is the signature of the function used for InteractionOccurred events.
            
            TODO: expand this to include information about the event. 
            </summary>
            <param name="sender"></param>
        </member>
        <member name="T:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.PreRefreshHandler">
            <summary>
            This is the signature of the function used for PreRefresh events.
            </summary>
            <param name="sender"></param>
        </member>
        <member name="T:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.PlotContextMenu">
            <summary>
            Summary description for ContextMenu.
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.PlotContextMenu.m_PlotSurface2D">
            <summary>
            The PlotSurface2D associated with the context menu. Classes inherited
            from PlotContextMenu will likely use this to implement their functionality.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.PlotContextMenu.SetMenuItems(Alt.Collections.ArrayList)">
            <summary>
            Sets the context menu according to the IPlotMenuItem's in the provided
            ArrayList. The current menu items can be obtained using the MenuItems
            property and extended if desired.
            </summary>
            <param name="menuItems"></param>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.PlotContextMenu.#ctor(Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl)">
            <summary>
            Constructor creates
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.PlotContextMenu.MenuItems">
            <summary>
            Gets an arraylist of all PlotMenuItems that comprise the
            menu. If this list is changed, this class must be told to
            update using the Update method.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.PlotContextMenu.PlotSurface2D">
            <summary>
            The PlotSurface2D associated with the context menu. Generally, the user
            should not set this. It is used internally by PlotSurface2D.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.PlotContextMenu.Menu">
            <summary>
            Gets the Gwen context menu managed by this object.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.PlotContextMenu.IPlotMenuItem">
            <summary>
            elements of the MenuItems array list must implement this interface.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.PlotContextMenu.IPlotMenuItem.OnPopup(Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.PlotContextMenu)">
            <summary>
            This method is called for each menu item before the menu is 
            displayed. It is useful for implementing check marks, disabling
            etc.
            </summary>
            <param name="plotContextMenu"></param>
        </member>
        <member name="P:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.PlotContextMenu.IPlotMenuItem.MenuItem">
            <summary>
            Gets the Gwen.MenuItem associated with the PlotMenuItem
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.PlotContextMenu.PlotMenuSeparator">
            <summary>
            A plot menu item for separators.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.PlotContextMenu.PlotMenuSeparator.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.PlotContextMenu.PlotMenuSeparator.OnPopup(Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.PlotContextMenu)">
            <summary>
            
            </summary>
            <param name="plotContextMenu"></param>
        </member>
        <member name="P:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.PlotContextMenu.PlotMenuSeparator.Index">
            <summary>
            Index of this menu item in the menu.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.PlotContextMenu.PlotMenuSeparator.MenuItem">
            <summary>
            The Gwen.MenuItem associated with this IPlotMenuItem
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.PlotContextMenu.PlotMenuItem">
            <summary>
            A Plot menu item suitable for specifying basic menu items
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.PlotContextMenu.PlotMenuItem.#ctor(System.String,System.Int32,System.EventHandler)">
            <summary>
            Constructor
            </summary>
            <param name="text">Menu item text</param>
            <param name="index">Index in the manu</param>
            <param name="callback">EventHandler to call if menu selected.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.PlotContextMenu.PlotMenuItem.OnPopup(Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.PlotContextMenu)">
            <summary>
            Called before menu drawn.
            </summary>
            <param name="plotContextMenu">The plot menu this item is a member of.</param>
        </member>
        <member name="P:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.PlotContextMenu.PlotMenuItem.Text">
            <summary>
            The text to put in the menu for this menu item.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.PlotContextMenu.PlotMenuItem.Index">
            <summary>
            Index of this menu item in the menu.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.PlotContextMenu.PlotMenuItem.Callback">
            <summary>
            EventHandler to call if menu selected.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.PlotContextMenu.PlotMenuItem.MenuItem">
            <summary>
            The Gwen.MenuItem associated with this IPlotMenuItem
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.PlotContextMenu.PlotZoomBackMenuItem">
            <summary>
            A Plot Menu Item that provides necessary functionality for the
            zoom back menu item (graying out if zoomed right out in addition
            to basic functionality).
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.PlotContextMenu.PlotZoomBackMenuItem.#ctor(System.String,System.Int32,System.EventHandler)">
            <summary>
            Constructor
            </summary>
            <param name="text">Text associated with this item in the menu.</param>
            <param name="index">Index of this item in the menu.</param>
            <param name="callback">EventHandler to call when menu item is selected.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.PlotContextMenu.PlotZoomBackMenuItem.OnPopup(Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.PlotContextMenu)">
            <summary>
            Called before menu drawn.
            </summary>
            <param name="plotContextMenu">The plot menu this item is a member of.</param>
        </member>
        <member name="T:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.PlotContextMenu.PlotShowCoordinatesMenuItem">
            <summary>
            A Plot Menu Item that provides necessary functionality for the
            show coordinates menu item (tick mark toggle in addition to basic
            functionality).
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.PlotContextMenu.PlotShowCoordinatesMenuItem.#ctor(System.String,System.Int32,System.EventHandler)">
            <summary>
            Constructor
            </summary>
            <param name="text">Text associated with this item in the menu.</param>
            <param name="index">Index of this item in the menu.</param>
            <param name="callback">EventHandler to call when menu item is selected.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.PlotContextMenu.PlotShowCoordinatesMenuItem.OnPopup(Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.PlotContextMenu)">
            <summary>
            Called before menu drawn.
            </summary>
            <param name="plotContextMenu">The plot menu this item is a member of.</param>
        </member>
        <member name="T:OxyPlot.Annotations.Annotation">
            <summary>
            Provides an abstract base class for annotations.
            </summary>
        </member>
        <member name="T:OxyPlot.UIPlotElement">
            <summary>
            Provides an abstract base class for plot elements that handle mouse events.
            </summary>
        </member>
        <member name="T:OxyPlot.SelectablePlotElement">
            <summary>
            Provides an abstract base class for plot elements that support selection.
            </summary>
        </member>
        <member name="T:OxyPlot.PlotElement">
            <summary>
            Provides an abstract base class for elements contained in a <see cref="P:OxyPlot.PlotElement.PlotModel"/>.
            </summary>
        </member>
        <member name="M:OxyPlot.PlotElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.PlotElement"/> class.
            </summary>
        </member>
        <member name="P:OxyPlot.PlotElement.Font">
            <summary>
            Gets or sets the font.
            </summary>
            <value> The font. </value>
            <remarks>
            If the value is null, the parent PlotModel's DefaultFont will be used.
            </remarks>
        </member>
        <member name="P:OxyPlot.PlotElement.FontSize">
            <summary>
            Gets or sets the size of the font.
            </summary>
            <value> The size of the font. </value>
            <remarks>
            If the value is NaN, the parent PlotModel's DefaultFontSize will be used.
            </remarks>
        </member>
        <member name="P:OxyPlot.PlotElement.FontWeight">
            <summary>
            Gets or sets the font weight.
            </summary>
            <value> The font weight. </value>
        </member>
        <member name="P:OxyPlot.PlotElement.PlotModel">
            <summary>
            Gets the parent plot model.
            </summary>
        </member>
        <member name="P:OxyPlot.PlotElement.Tag">
            <summary>
            Gets or sets an arbitrary object value that can be used to store custom information about this plot element.
            </summary>
            <value> The intended value. This property has no default value. </value>
            <remarks>
            This property is analogous to Tag properties in other Microsoft programming models. Tag is intended to provide a pre-existing property location where you can store some basic custom information about any PlotElement without requiring you to subclass an element.
            </remarks>
        </member>
        <member name="P:OxyPlot.PlotElement.TextColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
            <value> The color of the text. </value>
            <remarks>
            If the value is null, the TextColor of the parent PlotModel will be used.
            </remarks>
        </member>
        <member name="P:OxyPlot.PlotElement.ActualFont">
            <summary>
            Gets the actual font.
            </summary>
        </member>
        <member name="P:OxyPlot.PlotElement.ActualFontSize">
            <summary>
            Gets the actual size of the font.
            </summary>
            <value> The actual size of the font. </value>
        </member>
        <member name="P:OxyPlot.PlotElement.ActualFontWeight">
            <summary>
            Gets the actual font weight.
            </summary>
        </member>
        <member name="P:OxyPlot.PlotElement.ActualTextColor">
            <summary>
            Gets the actual color of the text.
            </summary>
            <value> The actual color of the text. </value>
        </member>
        <member name="F:OxyPlot.SelectablePlotElement.isSelected">
            <summary>
            The is selected.
            </summary>
        </member>
        <member name="M:OxyPlot.SelectablePlotElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.SelectablePlotElement"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.SelectablePlotElement.GetSelectableColor(OxyPlot.OxyColor)">
            <summary>
            Gets the selection color it the element is selected, or the specified color if it is not.
            </summary>
            <param name="originalColor">The unselected color of the element.</param>
            <param name="index">The index of the item to check (use -1 for all items).</param>
            <returns>
            A color.
            </returns>
        </member>
        <member name="M:OxyPlot.SelectablePlotElement.GetSelectableFillColor(OxyPlot.OxyColor)">
            <summary>
            Gets the selection fill color it the element is selected, or the specified fill color if it is not.
            </summary>
            <param name="originalColor">The unselected fill color of the element.</param>
            <param name="index">The index of the item to check (use -1 for all items).</param>
            <returns>
            A fill color.
            </returns>
        </member>
        <member name="M:OxyPlot.SelectablePlotElement.OnIsSelectedChanged">
            <summary>
            Raises the Selected event.
            </summary>
        </member>
        <member name="E:OxyPlot.SelectablePlotElement.Selected">
            <summary>
            Occurs when the IsSelected property is changed.
            </summary>
        </member>
        <member name="P:OxyPlot.SelectablePlotElement.SelectedIndex">
            <summary>
            Gets or sets the index of the selected item (or -1 if all items are selected).
            </summary>
            <value>
            The index of the selected.
            </value>
        </member>
        <member name="P:OxyPlot.SelectablePlotElement.IsSelected">
            <summary>
            Gets or sets a value indicating whether this plot element is selected.
            </summary>
        </member>
        <member name="P:OxyPlot.SelectablePlotElement.Selectable">
            <summary>
            Gets or sets a value indicating whether this plot element can be selected.
            </summary>
        </member>
        <member name="P:OxyPlot.SelectablePlotElement.ActualSelectedColor">
            <summary>
            Gets the actual selection color.
            </summary>
            <value> The actual selection color. </value>
        </member>
        <member name="M:OxyPlot.UIPlotElement.OnMouseDown(System.Object,OxyPlot.OxyMouseEventArgs)">
            <summary>
            Raises the <see cref="E:OxyPlot.UIPlotElement.MouseDown"/> event.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The <see cref="T:OxyPlot.OxyMouseEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:OxyPlot.UIPlotElement.OnMouseMove(System.Object,OxyPlot.OxyMouseEventArgs)">
            <summary>
            Raises the <see cref="E:OxyPlot.UIPlotElement.MouseMove"/> event.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The <see cref="T:OxyPlot.OxyMouseEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:OxyPlot.UIPlotElement.OnMouseUp(System.Object,OxyPlot.OxyMouseEventArgs)">
            <summary>
            Raises the <see cref="E:OxyPlot.UIPlotElement.MouseUp"/> event.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The <see cref="T:OxyPlot.OxyMouseEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:OxyPlot.UIPlotElement.HitTest(OxyPlot.ScreenPoint,System.Double)">
            <summary>
            Tests if the plot element is hit by the specified point.
            </summary>
            <param name="point">The point.</param>
            <param name="tolerance">The tolerance.</param>
            <returns>
            A hit test result.
            </returns>
        </member>
        <member name="E:OxyPlot.UIPlotElement.MouseDown">
            <summary>
            Occurs when a mouse button is pressed down on the model.
            </summary>
        </member>
        <member name="E:OxyPlot.UIPlotElement.MouseMove">
            <summary>
            Occurs when the mouse is moved on the plot element (only occurs after MouseDown).
            </summary>
        </member>
        <member name="E:OxyPlot.UIPlotElement.MouseUp">
            <summary>
            Occurs when the mouse button is released on the plot element.
            </summary>
        </member>
        <member name="M:OxyPlot.Annotations.Annotation.EnsureAxes">
            <summary>
            Ensures that the annotation axes are set.
            </summary>
        </member>
        <member name="M:OxyPlot.Annotations.Annotation.Render(OxyPlot.IRenderContext,OxyPlot.PlotModel)">
            <summary>
            Renders the annotation on the specified context.
            </summary>
            <param name="rc">
            The render context.
            </param>
            <param name="model">
            The model.
            </param>
        </member>
        <member name="M:OxyPlot.Annotations.Annotation.HitTest(OxyPlot.ScreenPoint,System.Double)">
            <summary>
            Tests if the plot element is hit by the specified point.
            </summary>
            <param name="point">The point.</param>
            <param name="tolerance">The tolerance.</param>
            <returns>
            A hit test result.
            </returns>
        </member>
        <member name="M:OxyPlot.Annotations.Annotation.Transform(System.Double,System.Double)">
            <summary>
            Transforms the specified coordinates to a screen point.
            </summary>
            <param name="x">
            The x coordinate.
            </param>
            <param name="y">
            The y coordinate.
            </param>
            <returns>
            A screen point.
            </returns>
        </member>
        <member name="M:OxyPlot.Annotations.Annotation.Transform(OxyPlot.IDataPoint)">
            <summary>
            Transforms the specified data point to a screen point.
            </summary>
            <param name="p">
            The point.
            </param>
            <returns>
            A screen point.
            </returns>
        </member>
        <member name="M:OxyPlot.Annotations.Annotation.InverseTransform(OxyPlot.ScreenPoint)">
            <summary>
            Transforms the specified screen position to a data point.
            </summary>
            <param name="position">
            The position.
            </param>
            <returns>
            A data point
            </returns>
        </member>
        <member name="M:OxyPlot.Annotations.Annotation.GetClippingRect">
            <summary>
            Gets the clipping rectangle.
            </summary>
            <returns>
            The clipping rectangle.
            </returns>
        </member>
        <member name="P:OxyPlot.Annotations.Annotation.ActualCulture">
            <summary>
            Gets the actual culture.
            </summary>
            <remarks>
            The culture is defined in the parent PlotModel.
            </remarks>
        </member>
        <member name="P:OxyPlot.Annotations.Annotation.Layer">
            <summary>
            Gets or sets the layer.
            </summary>
        </member>
        <member name="P:OxyPlot.Annotations.Annotation.XAxis">
            <summary>
            Gets or sets the X axis.
            </summary>
            <value>The X axis.</value>
        </member>
        <member name="P:OxyPlot.Annotations.Annotation.XAxisKey">
            <summary>
            Gets or sets the X axis key.
            </summary>
            <value>The X axis key.</value>
        </member>
        <member name="P:OxyPlot.Annotations.Annotation.YAxis">
            <summary>
            Gets or sets the Y axis.
            </summary>
            <value>The Y axis.</value>
        </member>
        <member name="P:OxyPlot.Annotations.Annotation.YAxisKey">
            <summary>
            Gets or sets the Y axis key.
            </summary>
            <value>The Y axis key.</value>
        </member>
        <member name="T:OxyPlot.Annotations.AnnotationLayer">
            <summary>
            Specifies the layer for an <see cref="T:OxyPlot.Annotations.Annotation"/>.
            </summary>
        </member>
        <member name="F:OxyPlot.Annotations.AnnotationLayer.BelowAxes">
            <summary>
            Render the annotation below the gridlines of the axes.
            </summary>
        </member>
        <member name="F:OxyPlot.Annotations.AnnotationLayer.BelowSeries">
            <summary>
            Render the annotation below the series.
            </summary>
        </member>
        <member name="F:OxyPlot.Annotations.AnnotationLayer.AboveSeries">
            <summary>
            Render the annotation above the series.
            </summary>
        </member>
        <member name="T:OxyPlot.Annotations.ArrowAnnotation">
            <summary>
            Represents an arrow annotation.
            </summary>
        </member>
        <member name="T:OxyPlot.Annotations.TextualAnnotation">
            <summary>
            Provides an abstract base class for annotations that contains text.
            </summary>
        </member>
        <member name="P:OxyPlot.Annotations.TextualAnnotation.Text">
            <summary>
            Gets or sets the annotation text.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="F:OxyPlot.Annotations.ArrowAnnotation.screenEndPoint">
            <summary>
            The end point in screen coordinates.
            </summary>
        </member>
        <member name="F:OxyPlot.Annotations.ArrowAnnotation.screenStartPoint">
            <summary>
            The start point in screen coordinates.
            </summary>
        </member>
        <member name="M:OxyPlot.Annotations.ArrowAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Annotations.ArrowAnnotation"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Annotations.ArrowAnnotation.Render(OxyPlot.IRenderContext,OxyPlot.PlotModel)">
            <summary>
            Renders the arrow annotation.
            </summary>
            <param name="rc">
            The render context.
            </param>
            <param name="model">
            The plot model.
            </param>
        </member>
        <member name="M:OxyPlot.Annotations.ArrowAnnotation.HitTest(OxyPlot.ScreenPoint,System.Double)">
            <summary>
            Tests if the plot element is hit by the specified point.
            </summary>
            <param name="point">
            The point.
            </param>
            <param name="tolerance">
            The tolerance.
            </param>
            <returns>
            A hit test result.
            </returns>
        </member>
        <member name="P:OxyPlot.Annotations.ArrowAnnotation.ArrowDirection">
            <summary>
            Gets or sets the arrow direction.
            </summary>
            <remarks>
            Setting this property overrides the StartPoint property.
            </remarks>
        </member>
        <member name="P:OxyPlot.Annotations.ArrowAnnotation.Color">
            <summary>
            Gets or sets the color of the arrow.
            </summary>
        </member>
        <member name="P:OxyPlot.Annotations.ArrowAnnotation.EndPoint">
            <summary>
            Gets or sets the end point.
            </summary>
        </member>
        <member name="P:OxyPlot.Annotations.ArrowAnnotation.HeadLength">
            <summary>
            Gets or sets the length of the head (relative to the stroke thickness) (the default value is 10).
            </summary>
            <value> The length of the head. </value>
        </member>
        <member name="P:OxyPlot.Annotations.ArrowAnnotation.HeadWidth">
            <summary>
            Gets or sets the width of the head (relative to the stroke thickness) (the default value is 3).
            </summary>
            <value> The width of the head. </value>
        </member>
        <member name="P:OxyPlot.Annotations.ArrowAnnotation.LineJoin">
            <summary>
            Gets or sets the line join type.
            </summary>
            <value> The line join type. </value>
        </member>
        <member name="P:OxyPlot.Annotations.ArrowAnnotation.LineStyle">
            <summary>
            Gets or sets the line style.
            </summary>
            <value> The line style. </value>
        </member>
        <member name="P:OxyPlot.Annotations.ArrowAnnotation.StartPoint">
            <summary>
            Gets or sets the start point.
            </summary>
            <remarks>
            This property is overridden by the ArrowDirection property, if set.
            </remarks>
        </member>
        <member name="P:OxyPlot.Annotations.ArrowAnnotation.StrokeThickness">
            <summary>
            Gets or sets the stroke thickness (the default value is 2).
            </summary>
            <value> The stroke thickness. </value>
        </member>
        <member name="P:OxyPlot.Annotations.ArrowAnnotation.Veeness">
            <summary>
            Gets or sets the 'veeness' of the arrow head (relative to thickness) (the default value is 0).
            </summary>
            <value> The 'veeness'. </value>
        </member>
        <member name="T:OxyPlot.Annotations.EllipseAnnotation">
            <summary>
            Represents an ellipse annotation.
            </summary>
        </member>
        <member name="F:OxyPlot.Annotations.EllipseAnnotation.screenRectangle">
            <summary>
            The rectangle transformed to screen coordinates.
            </summary>
        </member>
        <member name="M:OxyPlot.Annotations.EllipseAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Annotations.EllipseAnnotation"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Annotations.EllipseAnnotation.Render(OxyPlot.IRenderContext,OxyPlot.PlotModel)">
            <summary>
            Renders the polygon annotation.
            </summary>
            <param name="rc">
            The render context.
            </param>
            <param name="model">
            The plot model.
            </param>
        </member>
        <member name="M:OxyPlot.Annotations.EllipseAnnotation.HitTest(OxyPlot.ScreenPoint,System.Double)">
            <summary>
            Tests if the plot element is hit by the specified point.
            </summary>
            <param name="point">
            The point.
            </param>
            <param name="tolerance">
            The tolerance.
            </param>
            <returns>
            A hit test result.
            </returns>
        </member>
        <member name="P:OxyPlot.Annotations.EllipseAnnotation.Fill">
            <summary>
            Gets or sets the fill color.
            </summary>
            <value> The fill. </value>
        </member>
        <member name="P:OxyPlot.Annotations.EllipseAnnotation.Stroke">
            <summary>
            Gets or sets the stroke color.
            </summary>
        </member>
        <member name="P:OxyPlot.Annotations.EllipseAnnotation.StrokeThickness">
            <summary>
            Gets or sets the stroke thickness.
            </summary>
        </member>
        <member name="P:OxyPlot.Annotations.EllipseAnnotation.X">
            <summary>
            Gets or sets the x-coordinate of the center.
            </summary>
        </member>
        <member name="P:OxyPlot.Annotations.EllipseAnnotation.Y">
            <summary>
            Gets or sets the y-coordinate of the center.
            </summary>
        </member>
        <member name="P:OxyPlot.Annotations.EllipseAnnotation.Width">
            <summary>
            Gets or sets the width of the ellipse.
            </summary>
        </member>
        <member name="P:OxyPlot.Annotations.EllipseAnnotation.Height">
            <summary>
            Gets or sets the height of the ellipse.
            </summary>
        </member>
        <member name="P:OxyPlot.Annotations.EllipseAnnotation.TextRotation">
            <summary>
            Gets or sets the text rotation (degrees).
            </summary>
            <value>The text rotation in degrees.</value>
        </member>
        <member name="T:OxyPlot.Annotations.ImageAnnotation">
            <summary>
            Represents a text annotation.
            </summary>
        </member>
        <member name="F:OxyPlot.Annotations.ImageAnnotation.actualBounds">
            <summary>
            The actual bounds of the rendered image.
            </summary>
        </member>
        <member name="M:OxyPlot.Annotations.ImageAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Annotations.ImageAnnotation"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Annotations.ImageAnnotation.#ctor(OxyPlot.OxyImage,OxyPlot.ScreenPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Annotations.ImageAnnotation"/> class.
            </summary>
            <param name="image">
            The image.
            </param>
            <param name="position">
            The position in screen coordinates.
            </param>
            <param name="horizontalAlignment">
            The horizontal alignment.
            </param>
            <param name="verticalAlignment">
            The vertical alignment.
            </param>
        </member>
        <member name="M:OxyPlot.Annotations.ImageAnnotation.#ctor(OxyPlot.OxyImage,OxyPlot.IDataPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Annotations.ImageAnnotation"/> class.
            </summary>
            <param name="image">
            The image.
            </param>
            <param name="position">
            The position in data coordinates.
            </param>
            <param name="horizontalAlignment">
            The horizontal alignment.
            </param>
            <param name="verticalAlignment">
            The vertical alignment.
            </param>
        </member>
        <member name="M:OxyPlot.Annotations.ImageAnnotation.#ctor(OxyPlot.OxyImage,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Annotations.ImageAnnotation"/> class.
            </summary>
            <param name="image">
            The image.
            </param>
            <param name="relativeX">
            The x-coordinate relative to the plot area (0-1).
            </param>
            <param name="relativeY">
            The y-coordinate relative to the plot area (0-1).
            </param>
            <param name="horizontalAlignment">
            The horizontal alignment.
            </param>
            <param name="verticalAlignment">
            The vertical alignment.
            </param>
        </member>
        <member name="M:OxyPlot.Annotations.ImageAnnotation.Render(OxyPlot.IRenderContext,OxyPlot.PlotModel)">
            <summary>
            Renders the image annotation.
            </summary>
            <param name="rc">
            The render context.
            </param>
            <param name="model">
            The plot model.
            </param>
        </member>
        <member name="M:OxyPlot.Annotations.ImageAnnotation.HitTest(OxyPlot.ScreenPoint,System.Double)">
            <summary>
            Tests if the plot element is hit by the specified point.
            </summary>
            <param name="point">
            The point.
            </param>
            <param name="tolerance">
            The tolerance.
            </param>
            <returns>
            A hit test result.
            </returns>
        </member>
        <member name="M:OxyPlot.Annotations.ImageAnnotation.GetPoint(OxyPlot.PlotLength,OxyPlot.PlotLength,OxyPlot.IRenderContext,OxyPlot.PlotModel)">
            <summary>
            Gets the point.
            </summary>
            <param name="x">
            The x.
            </param>
            <param name="y">
            The y.
            </param>
            <param name="rc">
            The render context.
            </param>
            <param name="model">
            The model.
            </param>
            <returns>
            The point in screen coordinates.
            </returns>
        </member>
        <member name="M:OxyPlot.Annotations.ImageAnnotation.GetVector(OxyPlot.PlotLength,OxyPlot.PlotLength,OxyPlot.IRenderContext,OxyPlot.PlotModel)">
            <summary>
            Gets the vector.
            </summary>
            <param name="x">
            The x component.
            </param>
            <param name="y">
            The y component.
            </param>
            <param name="rc">
            The render context.
            </param>
            <param name="model">
            The model.
            </param>
            <returns>
            The vector in screen coordinates.
            </returns>
        </member>
        <member name="P:OxyPlot.Annotations.ImageAnnotation.ImageSource">
            <summary>
            Gets or sets the image source.
            </summary>
            <value>
            The image source.
            </value>
        </member>
        <member name="P:OxyPlot.Annotations.ImageAnnotation.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment.
            </summary>
            <value> The horizontal alignment. </value>
        </member>
        <member name="P:OxyPlot.Annotations.ImageAnnotation.X">
            <summary>
            Gets or sets the X position of the image.
            </summary>
            <value>
            The X.
            </value>
        </member>
        <member name="P:OxyPlot.Annotations.ImageAnnotation.Y">
            <summary>
            Gets or sets the Y position of the image.
            </summary>
            <value>
            The Y.
            </value>
        </member>
        <member name="P:OxyPlot.Annotations.ImageAnnotation.OffsetX">
            <summary>
            Gets or sets the X offset.
            </summary>
            <value>
            The offset X.
            </value>
        </member>
        <member name="P:OxyPlot.Annotations.ImageAnnotation.OffsetY">
            <summary>
            Gets or sets the Y offset.
            </summary>
            <value>
            The offset Y.
            </value>
        </member>
        <member name="P:OxyPlot.Annotations.ImageAnnotation.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:OxyPlot.Annotations.ImageAnnotation.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:OxyPlot.Annotations.ImageAnnotation.Opacity">
            <summary>
            Gets or sets the opacity (0-1).
            </summary>
            <value>
            The opacity value.
            </value>
        </member>
        <member name="P:OxyPlot.Annotations.ImageAnnotation.Interpolate">
            <summary>
            Gets or sets a value indicating whether to apply smooth interpolation to the image.
            </summary>
            <value>
              <c>true</c> if the image should be interpolated (using a high-quality bi-cubic interpolation); <c>false</c> if the nearest neighbor should be used.
            </value>
        </member>
        <member name="P:OxyPlot.Annotations.ImageAnnotation.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment.
            </summary>
            <value> The vertical alignment. </value>
        </member>
        <member name="T:OxyPlot.Annotations.AnnotationTextOrientation">
            <summary>
            Specifes the orientation of the annotation text
            </summary>
        </member>
        <member name="F:OxyPlot.Annotations.AnnotationTextOrientation.Horizontal">
            <summary>
            Horizontal text.
            </summary>
        </member>
        <member name="F:OxyPlot.Annotations.AnnotationTextOrientation.Vertical">
            <summary>
            Vertical text.
            </summary>
        </member>
        <member name="F:OxyPlot.Annotations.AnnotationTextOrientation.AlongLine">
            <summary>
            Oriented along the line.
            </summary>
        </member>
        <member name="T:OxyPlot.Annotations.LineAnnotation">
            <summary>
            Represents a line annotation.
            </summary>
        </member>
        <member name="F:OxyPlot.Annotations.LineAnnotation.screenPoints">
            <summary>
            The points of the line, transformed to screen coordinates.
            </summary>
        </member>
        <member name="M:OxyPlot.Annotations.LineAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Annotations.LineAnnotation"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Annotations.LineAnnotation.Render(OxyPlot.IRenderContext,OxyPlot.PlotModel)">
            <summary>
            Renders the line annotation.
            </summary>
            <param name="rc">
            The render context.
            </param>
            <param name="model">
            The plot model.
            </param>
        </member>
        <member name="M:OxyPlot.Annotations.LineAnnotation.HitTest(OxyPlot.ScreenPoint,System.Double)">
            <summary>
            Tests if the plot element is hit by the specified point.
            </summary>
            <param name="point">The point.</param>
            <param name="tolerance">The tolerance.</param>
            <returns>
            A hit test result.
            </returns>
        </member>
        <member name="M:OxyPlot.Annotations.LineAnnotation.GetPointAtRelativeDistance(System.Collections.Generic.IList{OxyPlot.ScreenPoint},System.Double,System.Double,OxyPlot.ScreenPoint@,System.Double@)">
            <summary>
            Gets the point on a curve at the specified relative distance along the curve.
            </summary>
            <param name="pts">
            The curve points.
            </param>
            <param name="p">
            The relative distance along the curve.
            </param>
            <param name="margin">
            The margins.
            </param>
            <param name="position">
            The position.
            </param>
            <param name="angle">
            The angle.
            </param>
            <returns>
            True if a position was found.
            </returns>
        </member>
        <member name="P:OxyPlot.Annotations.LineAnnotation.Color">
            <summary>
            Gets or sets the color of the line.
            </summary>
        </member>
        <member name="P:OxyPlot.Annotations.LineAnnotation.Equation">
            <summary>
            Gets or sets the y=f(x) equation when Type is Equation.
            </summary>
        </member>
        <member name="P:OxyPlot.Annotations.LineAnnotation.Intercept">
            <summary>
            Gets or sets the y-intercept when Type is LinearEquation.
            </summary>
            <value>The intercept value.</value>
            <remarks>
            Linear equation y-intercept (the b in y=mx+b).
            http://en.wikipedia.org/wiki/Linear_equation
            </remarks>
        </member>
        <member name="P:OxyPlot.Annotations.LineAnnotation.LineJoin">
            <summary>
            Gets or sets the line join.
            </summary>
            <value>The line join.</value>
        </member>
        <member name="P:OxyPlot.Annotations.LineAnnotation.LineStyle">
            <summary>
            Gets or sets the line style.
            </summary>
            <value>The line style.</value>
        </member>
        <member name="P:OxyPlot.Annotations.LineAnnotation.MaximumX">
            <summary>
            Gets or sets the maximum X coordinate for the line.
            </summary>
        </member>
        <member name="P:OxyPlot.Annotations.LineAnnotation.MaximumY">
            <summary>
            Gets or sets the maximum Y coordinate for the line.
            </summary>
        </member>
        <member name="P:OxyPlot.Annotations.LineAnnotation.MinimumX">
            <summary>
            Gets or sets the minimum X coordinate for the line.
            </summary>
        </member>
        <member name="P:OxyPlot.Annotations.LineAnnotation.MinimumY">
            <summary>
            Gets or sets the minimum Y coordinate for the line.
            </summary>
        </member>
        <member name="P:OxyPlot.Annotations.LineAnnotation.Slope">
            <summary>
            Gets or sets the slope when Type is LinearEquation.
            </summary>
            <value>The slope value.</value>
            <remarks>
            Linear equation slope (the m in y=mx+b)
            http://en.wikipedia.org/wiki/Linear_equation
            </remarks>
        </member>
        <member name="P:OxyPlot.Annotations.LineAnnotation.StrokeThickness">
            <summary>
            Gets or sets the stroke thickness.
            </summary>
            <value>The stroke thickness.</value>
        </member>
        <member name="P:OxyPlot.Annotations.LineAnnotation.TextHorizontalAlignment">
            <summary>
            Gets or sets the text horizontal alignment.
            </summary>
            <value>The text horizontal alignment.</value>
        </member>
        <member name="P:OxyPlot.Annotations.LineAnnotation.TextMargin">
            <summary>
            Gets or sets the text margin (along the line).
            </summary>
            <value>The text margin.</value>
        </member>
        <member name="P:OxyPlot.Annotations.LineAnnotation.TextPadding">
            <summary>
            Gets or sets the text padding (in the direction of the text).
            </summary>
            <value>The text padding.</value>
        </member>
        <member name="P:OxyPlot.Annotations.LineAnnotation.TextOrientation">
            <summary>
            Gets or sets the text orientation.
            </summary>
            <value>The text orientation.</value>
        </member>
        <member name="P:OxyPlot.Annotations.LineAnnotation.TextPosition">
            <summary>
            Gets or sets the text position fraction.
            </summary>
            <value>The text position in the interval [0,1].</value>
            <remarks>
            Positions smaller than 0.25 are left aligned at the start of the line
            Positions larger than 0.75 are right aligned at the end of the line
            Other positions are center aligned at the specified position
            </remarks>
        </member>
        <member name="P:OxyPlot.Annotations.LineAnnotation.TextVerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of text (above or below the line).
            </summary>
        </member>
        <member name="P:OxyPlot.Annotations.LineAnnotation.Type">
            <summary>
            Gets or sets the type of line equation.
            </summary>
        </member>
        <member name="P:OxyPlot.Annotations.LineAnnotation.X">
            <summary>
            Gets or sets the X position for vertical lines (only for Type==Vertical).
            </summary>
        </member>
        <member name="P:OxyPlot.Annotations.LineAnnotation.Y">
            <summary>
            Gets or sets the Y position for horizontal lines (only for Type==Horizontal)
            </summary>
        </member>
        <member name="P:OxyPlot.Annotations.LineAnnotation.ClipByXAxis">
            <summary>
            Gets or sets a value indicating whether to clip the annotation line by the X axis range.
            </summary>
            <value><c>true</c> if clipping by the X axis is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:OxyPlot.Annotations.LineAnnotation.ClipByYAxis">
            <summary>
            Gets or sets a value indicating whether to clip the annotation line by the Y axis range.
            </summary>
            <value><c>true</c> if clipping by the Y axis is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:OxyPlot.Annotations.LineAnnotationType">
            <summary>
            Specifies the definition of the line in a <see cref="T:OxyPlot.Annotations.LineAnnotation"/>.
            </summary>
        </member>
        <member name="F:OxyPlot.Annotations.LineAnnotationType.Horizontal">
            <summary>
            Horizontal line given by the Y property
            </summary>
        </member>
        <member name="F:OxyPlot.Annotations.LineAnnotationType.Vertical">
            <summary>
            Vertical line given by the X property
            </summary>
        </member>
        <member name="F:OxyPlot.Annotations.LineAnnotationType.LinearEquation">
            <summary>
            Linear equation y=mx+b given by the Slope and Intercept properties
            </summary>
        </member>
        <member name="F:OxyPlot.Annotations.LineAnnotationType.EquationX">
            <summary>
            Curve equation x=f(y) given by the Equation property
            </summary>
        </member>
        <member name="F:OxyPlot.Annotations.LineAnnotationType.EquationY">
            <summary>
            Curve equation y=f(x) given by the Equation property
            </summary>
        </member>
        <member name="T:OxyPlot.Annotations.PolygonAnnotation">
            <summary>
            Represents a polygon annotation.
            </summary>
        </member>
        <member name="F:OxyPlot.Annotations.PolygonAnnotation.screenPoints">
            <summary>
            The polygon points transformed to screen coordinates.
            </summary>
        </member>
        <member name="M:OxyPlot.Annotations.PolygonAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Annotations.PolygonAnnotation"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Annotations.PolygonAnnotation.Render(OxyPlot.IRenderContext,OxyPlot.PlotModel)">
            <summary>
            Renders the polygon annotation.
            </summary>
            <param name="rc">
            The render context.
            </param>
            <param name="model">
            The plot model.
            </param>
        </member>
        <member name="M:OxyPlot.Annotations.PolygonAnnotation.HitTest(OxyPlot.ScreenPoint,System.Double)">
            <summary>
            Tests if the plot element is hit by the specified point.
            </summary>
            <param name="point">
            The point.
            </param>
            <param name="tolerance">
            The tolerance.
            </param>
            <returns>
            A hit test result.
            </returns>
        </member>
        <member name="P:OxyPlot.Annotations.PolygonAnnotation.Color">
            <summary>
            Gets or sets the color of the line.
            </summary>
        </member>
        <member name="P:OxyPlot.Annotations.PolygonAnnotation.Fill">
            <summary>
            Gets or sets the fill color.
            </summary>
            <value> The fill. </value>
        </member>
        <member name="P:OxyPlot.Annotations.PolygonAnnotation.LineJoin">
            <summary>
            Gets or sets the line join.
            </summary>
            <value> The line join. </value>
        </member>
        <member name="P:OxyPlot.Annotations.PolygonAnnotation.LineStyle">
            <summary>
            Gets or sets the line style.
            </summary>
            <value> The line style. </value>
        </member>
        <member name="P:OxyPlot.Annotations.PolygonAnnotation.Points">
            <summary>
            Gets or sets the points.
            </summary>
            <value> The points. </value>
        </member>
        <member name="P:OxyPlot.Annotations.PolygonAnnotation.StrokeThickness">
            <summary>
            Gets or sets the stroke thickness.
            </summary>
            <value> The stroke thickness. </value>
        </member>
        <member name="T:OxyPlot.Annotations.RectangleAnnotation">
            <summary>
            Represents a rectangle annotation.
            </summary>
        </member>
        <member name="F:OxyPlot.Annotations.RectangleAnnotation.screenRectangle">
            <summary>
            The rectangle transformed to screen coordinates.
            </summary>
        </member>
        <member name="M:OxyPlot.Annotations.RectangleAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Annotations.RectangleAnnotation"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Annotations.RectangleAnnotation.Render(OxyPlot.IRenderContext,OxyPlot.PlotModel)">
            <summary>
            Renders the polygon annotation.
            </summary>
            <param name="rc">
            The render context.
            </param>
            <param name="model">
            The plot model.
            </param>
        </member>
        <member name="M:OxyPlot.Annotations.RectangleAnnotation.HitTest(OxyPlot.ScreenPoint,System.Double)">
            <summary>
            Tests if the plot element is hit by the specified point.
            </summary>
            <param name="point">
            The point.
            </param>
            <param name="tolerance">
            The tolerance.
            </param>
            <returns>
            A hit test result.
            </returns>
        </member>
        <member name="P:OxyPlot.Annotations.RectangleAnnotation.Fill">
            <summary>
            Gets or sets the fill color.
            </summary>
            <value> The fill. </value>
        </member>
        <member name="P:OxyPlot.Annotations.RectangleAnnotation.Stroke">
            <summary>
            Gets or sets the stroke color.
            </summary>
        </member>
        <member name="P:OxyPlot.Annotations.RectangleAnnotation.StrokeThickness">
            <summary>
            Gets or sets the stroke thickness.
            </summary>
        </member>
        <member name="P:OxyPlot.Annotations.RectangleAnnotation.MinimumX">
            <summary>
            Gets or sets the minimum X.
            </summary>
            <value>The minimum X.</value>
        </member>
        <member name="P:OxyPlot.Annotations.RectangleAnnotation.MaximumX">
            <summary>
            Gets or sets the maximum X.
            </summary>
            <value>The maximum X.</value>
        </member>
        <member name="P:OxyPlot.Annotations.RectangleAnnotation.MinimumY">
            <summary>
            Gets or sets the minimum Y.
            </summary>
            <value>The minimum Y.</value>
        </member>
        <member name="P:OxyPlot.Annotations.RectangleAnnotation.MaximumY">
            <summary>
            Gets or sets the maximum Y.
            </summary>
            <value>The maximum Y.</value>
        </member>
        <member name="P:OxyPlot.Annotations.RectangleAnnotation.TextRotation">
            <summary>
            Gets or sets the text rotation (degrees).
            </summary>
            <value>The text rotation in degrees.</value>
        </member>
        <member name="T:OxyPlot.Annotations.TextAnnotation">
            <summary>
            Represents a text annotation.
            </summary>
        </member>
        <member name="F:OxyPlot.Annotations.TextAnnotation.actualBounds">
            <summary>
            The actual bounds of the text.
            </summary>
        </member>
        <member name="M:OxyPlot.Annotations.TextAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Annotations.TextAnnotation"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Annotations.TextAnnotation.Render(OxyPlot.IRenderContext,OxyPlot.PlotModel)">
            <summary>
            Renders the text annotation.
            </summary>
            <param name="rc">
            The render context.
            </param>
            <param name="model">
            The plot model.
            </param>
        </member>
        <member name="M:OxyPlot.Annotations.TextAnnotation.HitTest(OxyPlot.ScreenPoint,System.Double)">
            <summary>
            Tests if the plot element is hit by the specified point.
            </summary>
            <param name="point">
            The point.
            </param>
            <param name="tolerance">
            The tolerance.
            </param>
            <returns>
            A hit test result.
            </returns>
        </member>
        <member name="M:OxyPlot.Annotations.TextAnnotation.GetTextBounds(OxyPlot.ScreenPoint,OxyPlot.OxySize,OxyPlot.OxyThickness,System.Double,OxyPlot.HorizontalAlignment,OxyPlot.VerticalAlignment)">
            <summary>
            Gets the coordinates of the (rotated) background rectangle.
            </summary>
            <param name="position">
            The position.
            </param>
            <param name="size">
            The size.
            </param>
            <param name="padding">
            The padding.
            </param>
            <param name="rotation">
            The rotation.
            </param>
            <param name="horizontalAlignment">
            The horizontal alignment.
            </param>
            <param name="verticalAlignment">
            The vertical alignment.
            </param>
            <returns>
            The background rectangle coordinates.
            </returns>
        </member>
        <member name="P:OxyPlot.Annotations.TextAnnotation.Background">
            <summary>
            Gets or sets the fill color of the background rectangle.
            </summary>
            <value> The background. </value>
        </member>
        <member name="P:OxyPlot.Annotations.TextAnnotation.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment.
            </summary>
            <value> The horizontal alignment. </value>
        </member>
        <member name="P:OxyPlot.Annotations.TextAnnotation.Offset">
            <summary>
            Gets or sets the position offset (screen coordinates).
            </summary>
            <value> The offset. </value>
        </member>
        <member name="P:OxyPlot.Annotations.TextAnnotation.Padding">
            <summary>
            Gets or sets the padding of the background rectangle.
            </summary>
            <value> The padding. </value>
        </member>
        <member name="P:OxyPlot.Annotations.TextAnnotation.Position">
            <summary>
            Gets or sets the position of the text.
            </summary>
        </member>
        <member name="P:OxyPlot.Annotations.TextAnnotation.Rotation">
            <summary>
            Gets or sets the rotation angle (degrees).
            </summary>
            <value> The rotation. </value>
        </member>
        <member name="P:OxyPlot.Annotations.TextAnnotation.Stroke">
            <summary>
            Gets or sets the stroke color of the background rectangle.
            </summary>
            <value> The stroke color. </value>
        </member>
        <member name="P:OxyPlot.Annotations.TextAnnotation.StrokeThickness">
            <summary>
            Gets or sets the stroke thickness of the background rectangle.
            </summary>
            <value> The stroke thickness. </value>
        </member>
        <member name="P:OxyPlot.Annotations.TextAnnotation.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment.
            </summary>
            <value> The vertical alignment. </value>
        </member>
        <member name="T:OxyPlot.Annotations.TileMapAnnotation">
            <summary>
            Provides a tile map annotation.
            </summary>
            <remarks>
            The longitude and latitude range of the map is defined by the range of the x and y axis, respectively.
            </remarks>
        </member>
        <member name="F:OxyPlot.Annotations.TileMapAnnotation.images">
            <summary>
            The image cache.
            </summary>
        </member>
        <member name="F:OxyPlot.Annotations.TileMapAnnotation.queue">
            <summary>
            The download queue.
            </summary>
        </member>
        <member name="F:OxyPlot.Annotations.TileMapAnnotation.numberOfDownloads">
            <summary>
            The current number of downloads
            </summary>
        </member>
        <member name="M:OxyPlot.Annotations.TileMapAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Annotations.TileMapAnnotation"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Annotations.TileMapAnnotation.Render(OxyPlot.IRenderContext,OxyPlot.PlotModel)">
            <summary>
            Renders the annotation on the specified context.
            </summary>
            <param name="rc">
            The render context.
            </param>
            <param name="model">
            The model.
            </param>
        </member>
        <member name="M:OxyPlot.Annotations.TileMapAnnotation.HitTest(OxyPlot.ScreenPoint,System.Double)">
            <summary>
            Tests if the plot element is hit by the specified point.
            </summary>
            <param name="point">
            The point.
            </param>
            <param name="tolerance">
            The tolerance.
            </param>
            <returns>
            A hit test result.
            </returns>
        </member>
        <member name="M:OxyPlot.Annotations.TileMapAnnotation.LatLonToTile(System.Double,System.Double,System.Int32,System.Double@,System.Double@)">
            <summary>
            Transforms a position to a tile coordinate.
            </summary>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
            <param name="zoom">The zoom.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:OxyPlot.Annotations.TileMapAnnotation.TileToLatLon(System.Double,System.Double,System.Int32,System.Double@,System.Double@)">
            <summary>
            Transforms a tile coordinate (x,y) to a position.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="zoom">The zoom.</param>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
        </member>
        <member name="M:OxyPlot.Annotations.TileMapAnnotation.GetImage(System.String,System.Boolean)">
            <summary>
            Gets the image from the specified uri.
            </summary>
            <param name="uri">The URI.</param>
            <param name="async">Get the image asynchronously if set to <c>true</c>. The plot model will be invalidated when the image has been downloaded.</param>
            <returns>
            The image.
            </returns>
            <remarks>
            This method gets the image from cache, or starts an async download.
            </remarks>
        </member>
        <member name="M:OxyPlot.Annotations.TileMapAnnotation.Download(System.String)">
            <summary>
            Downloads the image from the specified URI.
            </summary>
            <param name="uri">The URI.</param>
            <returns>The image</returns>
        </member>
        <member name="M:OxyPlot.Annotations.TileMapAnnotation.BeginDownload">
            <summary>
            Starts the next download in the queue.
            </summary>
        </member>
        <member name="M:OxyPlot.Annotations.TileMapAnnotation.DownloadCompleted(System.String,System.IO.Stream)">
            <summary>
            The download completed, set the image.
            </summary>
            <param name="uri">The URI.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:OxyPlot.Annotations.TileMapAnnotation.GetTileUri(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the tile URI.
            </summary>
            <param name="x">
            The tile x.
            </param>
            <param name="y">
            The tile y.
            </param>
            <param name="zoom">
            The zoom.
            </param>
            <returns>
            The uri.
            </returns>
        </member>
        <member name="P:OxyPlot.Annotations.TileMapAnnotation.MaxNumberOfDownloads">
            <summary>
            Gets or sets the max number of simultaneous downloads.
            </summary>
            <value>
            The max number of downloads.
            </value>
        </member>
        <member name="P:OxyPlot.Annotations.TileMapAnnotation.Url">
            <summary>
            Gets or sets the URL.
            </summary>
            <value>
            The URL.
            </value>
        </member>
        <member name="P:OxyPlot.Annotations.TileMapAnnotation.CopyrightNotice">
            <summary>
            Gets or sets the copyright notice.
            </summary>
            <value>
            The copyright notice.
            </value>
        </member>
        <member name="P:OxyPlot.Annotations.TileMapAnnotation.TileSize">
            <summary>
            Gets or sets the size of the tiles.
            </summary>
            <value>
            The size of the tiles.
            </value>
        </member>
        <member name="P:OxyPlot.Annotations.TileMapAnnotation.MinZoomLevel">
            <summary>
            Gets or sets the min zoom level.
            </summary>
            <value>
            The min zoom level.
            </value>
        </member>
        <member name="P:OxyPlot.Annotations.TileMapAnnotation.MaxZoomLevel">
            <summary>
            Gets or sets the max zoom level.
            </summary>
            <value>
            The max zoom level.
            </value>
        </member>
        <member name="P:OxyPlot.Annotations.TileMapAnnotation.Opacity">
            <summary>
            Gets or sets the opacity.
            </summary>
            <value>
            The opacity.
            </value>
        </member>
        <member name="T:OxyPlot.Axes.AngleAxis">
            <summary>
            Represents an angular axis for polar plots.
            </summary>
        </member>
        <member name="T:OxyPlot.Axes.LinearAxis">
            <summary>
            Represents an axis with linear scale.
            </summary>
        </member>
        <member name="T:OxyPlot.Axes.Axis">
            <summary>
            Provides an abstract base class for axes.
            </summary>
        </member>
        <member name="F:OxyPlot.Axes.Axis.Exponent">
            <summary>
            Exponent function.
            </summary>
        </member>
        <member name="F:OxyPlot.Axes.Axis.Mantissa">
            <summary>
            Mantissa function. http://en.wikipedia.org/wiki/Mantissa
            </summary>
        </member>
        <member name="F:OxyPlot.Axes.Axis.offset">
            <summary>
            The offset.
            </summary>
        </member>
        <member name="F:OxyPlot.Axes.Axis.scale">
            <summary>
            The scale.
            </summary>
        </member>
        <member name="F:OxyPlot.Axes.Axis.position">
            <summary>
            The position.
            </summary>
        </member>
        <member name="M:OxyPlot.Axes.Axis.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Axes.Axis"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Axes.Axis.#ctor(OxyPlot.Axes.AxisPosition,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Axes.Axis"/> class.
            </summary>
            <param name="pos">
            The position of the axis.
            </param>
            <param name="minimum">
            The minimum value.
            </param>
            <param name="maximum">
            The maximum value.
            </param>
            <param name="title">
            The axis title.
            </param>
        </member>
        <member name="M:OxyPlot.Axes.Axis.Transform(OxyPlot.DataPoint,OxyPlot.Axes.Axis,OxyPlot.Axes.Axis)">
            <summary>
            Transforms the specified point to screen coordinates.
            </summary>
            <param name="p">
            The point.
            </param>
            <param name="xaxis">
            The x axis.
            </param>
            <param name="yaxis">
            The y axis.
            </param>
            <returns>
            The transformed point.
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.Axis.InverseTransform(OxyPlot.ScreenPoint,OxyPlot.Axes.Axis,OxyPlot.Axes.Axis)">
            <summary>
            Transform the specified screen point to data coordinates.
            </summary>
            <param name="p">The point.</param>
            <param name="xaxis">The x axis.</param>
            <param name="yaxis">The y axis.</param>
            <returns>The data point.</returns>
        </member>
        <member name="M:OxyPlot.Axes.Axis.Transform(OxyPlot.IDataPoint,OxyPlot.Axes.Axis,OxyPlot.Axes.Axis)">
            <summary>
            Transforms the specified point to screen coordinates.
            </summary>
            <param name="p">
            The point.
            </param>
            <param name="xaxis">
            The x axis.
            </param>
            <param name="yaxis">
            The y axis.
            </param>
            <returns>
            The transformed point.
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.Axis.CoerceActualMaxMin">
            <summary>
            Coerces the actual maximum and minimum values.
            </summary>
        </member>
        <member name="M:OxyPlot.Axes.Axis.FormatValue(System.Double)">
            <summary>
            Formats the value to be used on the axis.
            </summary>
            <param name="x">
            The value.
            </param>
            <returns>
            The formatted value.
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.Axis.FormatValueForTracker(System.Double)">
            <summary>
            Formats the value to be used by the tracker.
            </summary>
            <param name="x">
            The value.
            </param>
            <returns>
            The formatted value.
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.Axis.GetTickValues(System.Collections.Generic.IList{System.Double}@,System.Collections.Generic.IList{System.Double}@,System.Collections.Generic.IList{System.Double}@)">
            <summary>
            Gets the coordinates used to draw ticks and tick labels (numbers or category names).
            </summary>
            <param name="majorLabelValues">
            The major label values.
            </param>
            <param name="majorTickValues">
            The major tick values.
            </param>
            <param name="minorTickValues">
            The minor tick values.
            </param>
        </member>
        <member name="M:OxyPlot.Axes.Axis.GetValue(System.Double)">
            <summary>
            Gets the value from an axis coordinate, converts from double to the correct data type if necessary. e.g. DateTimeAxis returns the DateTime and CategoryAxis returns category strings.
            </summary>
            <param name="x">
            The coordinate.
            </param>
            <returns>
            The value.
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.Axis.InverseTransform(System.Double,System.Double,OxyPlot.Axes.Axis)">
            <summary>
            Inverse transform the specified screen point.
            </summary>
            <param name="x">
            The x coordinate.
            </param>
            <param name="y">
            The y coordinate.
            </param>
            <param name="yaxis">
            The y-axis.
            </param>
            <returns>
            The data point.
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.Axis.InverseTransform(System.Double)">
            <summary>
            Inverse transform the specified screen coordinate. This method can only be used with non-polar coordinate systems.
            </summary>
            <param name="sx">
            The screen coordinate.
            </param>
            <returns>
            The value.
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.Axis.IsHorizontal">
            <summary>
            Determines whether this axis is horizontal.
            </summary>
            <returns>
            <c>true</c> if this axis is horizontal; otherwise, <c>false</c> .
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.Axis.IsValidValue(System.Double)">
            <summary>
            Determines whether the specified value is valid.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            <c>true</c> if the specified value is valid; otherwise, <c>false</c> .
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.Axis.IsVertical">
            <summary>
            Determines whether this axis is vertical.
            </summary>
            <returns>
            <c>true</c> if this axis is vertical; otherwise, <c>false</c> .
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.Axis.IsXyAxis">
            <summary>
            Determines whether the axis is used for X/Y values.
            </summary>
            <returns>
            <c>true</c> if it is an XY axis; otherwise, <c>false</c> .
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.Axis.Measure(OxyPlot.IRenderContext)">
            <summary>
            Measures the size of the axis (maximum axis label width/height).
            </summary>
            <param name="rc">
            The render context.
            </param>
            <returns>
            The size of the axis.
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.Axis.Pan(OxyPlot.ScreenPoint,OxyPlot.ScreenPoint)">
            <summary>
            Pans the specified axis.
            </summary>
            <param name="ppt">
            The previous point (screen coordinates).
            </param>
            <param name="cpt">
            The current point (screen coordinates).
            </param>
        </member>
        <member name="M:OxyPlot.Axes.Axis.Pan(System.Double)">
            <summary>
            Pans the specified axis.
            </summary>
            <param name="delta">
            The delta.
            </param>
        </member>
        <member name="M:OxyPlot.Axes.Axis.Render(OxyPlot.IRenderContext,OxyPlot.PlotModel,OxyPlot.Axes.AxisLayer,System.Int32)">
            <summary>
            Renders the axis on the specified render context.
            </summary>
            <param name="rc">The render context.</param>
            <param name="model">The model.</param>
            <param name="axisLayer">The rendering order.</param>
            <param name="pass">The pass.</param>
        </member>
        <member name="M:OxyPlot.Axes.Axis.Reset">
            <summary>
            Resets the user's modification (zooming/panning) to minimum and maximum of this axis.
            </summary>
        </member>
        <member name="M:OxyPlot.Axes.Axis.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.Axis.Transform(System.Double,System.Double,OxyPlot.Axes.Axis)">
            <summary>
            Transforms the specified point to screen coordinates.
            </summary>
            <param name="x">
            The x value (for the current axis).
            </param>
            <param name="y">
            The y value.
            </param>
            <param name="yaxis">
            The y axis.
            </param>
            <returns>
            The transformed point.
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.Axis.Transform(System.Double)">
            <summary>
            Transforms the specified coordinate to screen coordinates. This method can only be used with non-polar coordinate systems.
            </summary>
            <param name="x">
            The value.
            </param>
            <returns>
            The transformed value (screen coordinate).
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.Axis.Zoom(System.Double)">
            <summary>
            Zoom to the specified scale.
            </summary>
            <param name="newScale">
            The new scale.
            </param>
        </member>
        <member name="M:OxyPlot.Axes.Axis.Zoom(System.Double,System.Double)">
            <summary>
            Zooms the axis to the range [x0,x1].
            </summary>
            <param name="x0">
            The new minimum.
            </param>
            <param name="x1">
            The new maximum.
            </param>
        </member>
        <member name="M:OxyPlot.Axes.Axis.ZoomAt(System.Double,System.Double)">
            <summary>
            Zooms the axis at the specified coordinate.
            </summary>
            <param name="factor">
            The zoom factor.
            </param>
            <param name="x">
            The coordinate to zoom at.
            </param>
        </member>
        <member name="M:OxyPlot.Axes.Axis.Include(System.Double)">
            <summary>
            Modifies the data range of the axis [DataMinimum,DataMaximum] to includes the specified value.
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:OxyPlot.Axes.Axis.PostInverseTransform(System.Double)">
            <summary>
            Applies a transformation after the inverse transform of the value. This is used in logarithmic axis.
            </summary>
            <param name="x">
            The value to transform.
            </param>
            <returns>
            The transformed value.
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.Axis.PreTransform(System.Double)">
            <summary>
            Applies a transformation before the transform the value. This is used in logarithmic axis.
            </summary>
            <param name="x">
            The value to transform.
            </param>
            <returns>
            The transformed value.
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.Axis.ResetDataMaxMin">
            <summary>
            Resets the data maximum and minimum.
            </summary>
        </member>
        <member name="M:OxyPlot.Axes.Axis.UpdateActualMaxMin">
            <summary>
            Updates the actual maximum and minimum values. If the user has zoomed/panned the axis, the internal ViewMaximum/ViewMinimum values will be used. If Maximum or Minimum have been set, these values will be used. Otherwise the maximum and minimum values of the series will be used, including the 'padding'.
            </summary>
        </member>
        <member name="M:OxyPlot.Axes.Axis.UpdateFromSeries(System.Collections.Generic.IEnumerable{OxyPlot.Series.Series})">
            <summary>
            Updates the axis with information from the plot series.
            </summary>
            <param name="series">
            The series collection.
            </param>
            <remarks>
            This is used by the category axis that need to know the number of series using the axis.
            </remarks>
        </member>
        <member name="M:OxyPlot.Axes.Axis.UpdateIntervals(OxyPlot.OxyRect)">
            <summary>
            Updates the actual minor and major step intervals.
            </summary>
            <param name="plotArea">
            The plot area rectangle.
            </param>
        </member>
        <member name="M:OxyPlot.Axes.Axis.UpdateTransform(OxyPlot.OxyRect)">
            <summary>
            Updates the scale and offset properties of the transform from the specified boundary rectangle.
            </summary>
            <param name="bounds">
            The bounds.
            </param>
        </member>
        <member name="M:OxyPlot.Axes.Axis.CreateTickValues(System.Double,System.Double,System.Double)">
            <summary>
            Creates tick values at the specified interval.
            </summary>
            <param name="min">
            The minimum coordinate.
            </param>
            <param name="max">
            The maximum coordinate.
            </param>
            <param name="step">
            The interval.
            </param>
            <returns>
            A list of tick values.
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.Axis.CalculateActualInterval(System.Double,System.Double)">
            <summary>
            Calculates the actual interval.
            </summary>
            <param name="availableSize">
            Size of the available area.
            </param>
            <param name="maxIntervalSize">
            Maximum length of the intervals.
            </param>
            <returns>
            The calculate actual interval.
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.Axis.CalculateActualInterval(System.Double,System.Double,System.Double)">
            <summary>
            Returns the actual interval to use to determine which values are displayed in the axis.
            </summary>
            <param name="availableSize">
            The available size.
            </param>
            <param name="maxIntervalSize">
            The maximum interval size.
            </param>
            <param name="range">
            The range.
            </param>
            <returns>
            Actual interval to use to determine which values are displayed in the axis.
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.Axis.CalculateMinorInterval(System.Double)">
            <summary>
            The calculate minor interval.
            </summary>
            <param name="majorInterval">
            The major interval.
            </param>
            <returns>
            The minor interval.
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.Axis.OnAxisChanged(OxyPlot.Axes.AxisChangedEventArgs)">
            <summary>
            Raises the AxisChanged event.
            </summary>
            <param name="args">
            The <see cref="T:OxyPlot.Axes.AxisChangedEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="E:OxyPlot.Axes.Axis.AxisChanged">
            <summary>
            Occurs when the axis has been changed (by zooming, panning or resetting).
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.AbsoluteMaximum">
            <summary>
            Gets or sets the absolute maximum. This is only used for the UI control. It will not be possible to zoom/pan beyond this limit.
            </summary>
            <value> The absolute maximum. </value>
        </member>
        <member name="P:OxyPlot.Axes.Axis.AbsoluteMinimum">
            <summary>
            Gets or sets the absolute minimum. This is only used for the UI control. It will not be possible to zoom/pan beyond this limit.
            </summary>
            <value> The absolute minimum. </value>
        </member>
        <member name="P:OxyPlot.Axes.Axis.ActualCulture">
            <summary>
            Gets the actual culture.
            </summary>
            <remarks>
            The culture is defined in the parent PlotModel.
            </remarks>
        </member>
        <member name="P:OxyPlot.Axes.Axis.ActualMajorStep">
            <summary>
            Gets or sets the actual major step.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.ActualMaximum">
            <summary>
            Gets or sets the actual maximum value of the axis.
            </summary>
            <remarks>
            If ViewMaximum is not NaN, this value will be defined by ViewMaximum.
            Otherwise, if Maximum is not NaN, this value will be defined by Maximum.
            Otherwise, this value will be defined by the maximum (+padding) of the data.
            </remarks>
        </member>
        <member name="P:OxyPlot.Axes.Axis.ActualMinimum">
            <summary>
            Gets or sets the actual minimum value of the axis.
            </summary>
            <remarks>
            If ViewMinimum is not NaN, this value will be defined by ViewMinimum.
            Otherwise, if Minimum is not NaN, this value will be defined by Minimum.
            Otherwise this value will be defined by the minimum (+padding) of the data.
            </remarks>
        </member>
        <member name="P:OxyPlot.Axes.Axis.DataMaximum">
            <summary>
            Gets or sets the maximum value of the data displayed on this axis.
            </summary>
            <value>The data maximum.</value>
        </member>
        <member name="P:OxyPlot.Axes.Axis.DataMinimum">
            <summary>
            Gets or sets the minimum value of the data displayed on this axis.
            </summary>
            <value>The data minimum.</value>
        </member>
        <member name="P:OxyPlot.Axes.Axis.ActualMinorStep">
            <summary>
            Gets or sets the actual minor step.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.ActualStringFormat">
            <summary>
            Gets or sets the actual string format being used.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.ActualTitle">
            <summary>
            Gets the actual title (including Unit if Unit is set).
            </summary>
            <value> The actual title. </value>
        </member>
        <member name="P:OxyPlot.Axes.Axis.Angle">
            <summary>
            Gets or sets the angle for the axis values.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.AxisTickToLabelDistance">
            <summary>
            Gets or sets the distance from axis tick to number label.
            </summary>
            <value> The axis tick to label distance. </value>
        </member>
        <member name="P:OxyPlot.Axes.Axis.AxisTitleDistance">
            <summary>
            Gets or sets the distance from axis number to axis title.
            </summary>
            <value> The axis title distance. </value>
        </member>
        <member name="P:OxyPlot.Axes.Axis.AxislineColor">
            <summary>
            Gets or sets the color of the axis line.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.AxislineStyle">
            <summary>
            Gets or sets the axis line.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.AxislineThickness">
            <summary>
            Gets or sets the axis line.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.ClipTitle">
            <summary>
            Gets or sets a value indicating whether to clip the axis title.
            </summary>
            <remarks>
            The default value is true.
            </remarks>
        </member>
        <member name="P:OxyPlot.Axes.Axis.EndPosition">
            <summary>
            Gets or sets the end position of the axis on the plot area. This is a fraction from 0(bottom/left) to 1(top/right).
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.ExtraGridlineColor">
            <summary>
            Gets or sets the color of the extra gridlines.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.ExtraGridlineStyle">
            <summary>
            Gets or sets the extra gridlines line style.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.ExtraGridlineThickness">
            <summary>
            Gets or sets the extra gridline thickness.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.ExtraGridlines">
            <summary>
            Gets or sets the values for extra gridlines.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.FilterFunction">
            <summary>
            Gets or sets the filter function.
            </summary>
            <value> The filter function. </value>
        </member>
        <member name="P:OxyPlot.Axes.Axis.FilterMaxValue">
            <summary>
            Gets or sets the maximum value that can be shown using this axis. Values greater or equal to this value will not be shown.
            </summary>
            <value> The filter max value. </value>
        </member>
        <member name="P:OxyPlot.Axes.Axis.FilterMinValue">
            <summary>
            Gets or sets the minimum value that can be shown using this axis. Values smaller or equal to this value will not be shown.
            </summary>
            <value> The filter min value. </value>
        </member>
        <member name="P:OxyPlot.Axes.Axis.IntervalLength">
            <summary>
            Gets or sets the length of the interval (screen length). The available length of the axis will be divided by this length to get the approximate number of major intervals on the axis. The default value is 60.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.IsAxisVisible">
            <summary>
            Gets or sets a value indicating whether this axis is visible.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.IsPanEnabled">
            <summary>
            Gets or sets a value indicating whether pan is enabled.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.IsReversed">
            <summary>
            Gets a value indicating whether this axis is reversed. It is reversed if StartPosition>EndPosition.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.IsZoomEnabled">
            <summary>
            Gets or sets a value indicating whether zoom is enabled.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.Key">
            <summary>
            Gets or sets the key of the axis. This can be used to find an axis if you have defined multiple axes in a plot.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.Layer">
            <summary>
            Gets or sets the layer.
            </summary>
            <value> The layer. </value>
        </member>
        <member name="P:OxyPlot.Axes.Axis.MajorGridlineColor">
            <summary>
            Gets or sets the color of the major gridline.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.MajorGridlineStyle">
            <summary>
            Gets or sets the major gridline style.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.MajorGridlineThickness">
            <summary>
            Gets or sets the major gridline thickness.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.MajorStep">
            <summary>
            Gets or sets the major step. (the interval between large ticks with numbers).
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.MajorTickSize">
            <summary>
            Gets or sets the size of the major tick.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.Maximum">
            <summary>
            Gets or sets the maximum value of the axis.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.MaximumPadding">
            <summary>
            Gets or sets the 'padding' fraction of the maximum value. A value of 0.01 gives 1% more space on the maximum end of the axis. This property is not used if the Maximum property is set.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.Minimum">
            <summary>
            Gets or sets the minimum value of the axis.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.MinimumPadding">
            <summary>
            Gets or sets the 'padding' fraction of the minimum value. A value of 0.01 gives 1% more space on the minimum end of the axis. This property is not used if the Minimum property is set.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.MinimumRange">
            <summary>
            Gets or sets the minimum range of the axis. Setting this property ensures that ActualMaximum-ActualMinimum > MinimumRange.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.MinorGridlineColor">
            <summary>
            Gets or sets the color of the minor gridline.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.MinorGridlineStyle">
            <summary>
            Gets or sets the minor gridline style.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.MinorGridlineThickness">
            <summary>
            Gets or sets the minor gridline thickness.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.MinorStep">
            <summary>
            Gets or sets the minor step (the interval between small ticks without number).
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.MinorTickSize">
            <summary>
            Gets or sets the size of the minor tick.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.Offset">
            <summary>
            Gets or sets the offset. This is used to transform between data and screen coordinates.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.Position">
            <summary>
            Gets or sets the position of the axis.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.PositionAtZeroCrossing">
            <summary>
            Gets or sets a value indicating whether the axis should be positioned on the zero-crossing of the related axis.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.PositionTier">
            <summary>
            Gets or sets the position tier which defines in which tier the axis is displayed.
            </summary>
            <remarks>
            The bigger the value the the further afar is the axis from the graph.
            </remarks>
        </member>
        <member name="P:OxyPlot.Axes.Axis.RelatedAxis">
            <summary>
            Gets or sets the related axis. This is used for polar coordinate systems where the angle and magnitude axes are related.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.Scale">
            <summary>
            Gets or sets the scaling factor of the axis. This is used to transform between data and screen coordinates.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.ScreenMax">
            <summary>
            Gets or sets the screen coordinate of the Maximum point on the axis.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.ScreenMin">
            <summary>
            Gets or sets the screen coordinate of the Minimum point on the axis.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.ShowMinorTicks">
            <summary>
            Gets or sets a value indicating whether minor ticks should be shown.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.StartPosition">
            <summary>
            Gets or sets the start position of the axis on the plot area. This is a fraction from 0(bottom/left) to 1(top/right).
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.StringFormat">
            <summary>
            Gets or sets the string format used for formatting the axis values.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.TickStyle">
            <summary>
            Gets or sets the tick style (both for major and minor ticks).
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.TicklineColor">
            <summary>
            Gets or sets the color of the ticks (both major and minor ticks).
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.Title">
            <summary>
            Gets or sets the title of the axis.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.TitleClippingLength">
            <summary>
            Gets or sets the length of the title clipping rectangle (fraction of the available length of the axis).
            </summary>
            <remarks>
            The default value is 0.9
            </remarks>
        </member>
        <member name="P:OxyPlot.Axes.Axis.TitleColor">
            <summary>
            Gets or sets the color of the title.
            </summary>
            <value> The color of the title. </value>
            <remarks>
            If TitleColor is null, the parent PlotModel's TextColor will be used.
            </remarks>
        </member>
        <member name="P:OxyPlot.Axes.Axis.TitleFont">
            <summary>
            Gets or sets the title font.
            </summary>
            <value> The title font. </value>
        </member>
        <member name="P:OxyPlot.Axes.Axis.TitleFontSize">
            <summary>
            Gets or sets the size of the title font.
            </summary>
            <value> The size of the title font. </value>
        </member>
        <member name="P:OxyPlot.Axes.Axis.TitleFontWeight">
            <summary>
            Gets or sets the title font weight.
            </summary>
            <value> The title font weight. </value>
        </member>
        <member name="P:OxyPlot.Axes.Axis.TitleFormatString">
            <summary>
            Gets or sets the format string used for formatting the title and unit when unit is defined. If unit is null, only Title is used. The default value is "{0} [{1}]", where {0} uses the Title and {1} uses the Unit.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.TitlePosition">
            <summary>
            Gets or sets the position of the title (0.5 is in the middle).
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.ToolTip">
            <summary>
            Gets or sets the tool tip.
            </summary>
            <value> The tool tip. </value>
        </member>
        <member name="P:OxyPlot.Axes.Axis.Unit">
            <summary>
            Gets or sets the unit of the axis.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.UseSuperExponentialFormat">
            <summary>
            Gets or sets a value indicating whether to use superscript exponential format. This format will convert 1.5E+03 to 1.5·10^{3} and render the superscript properly If StringFormat is null, 1.0E+03 will be converted to 10^{3}
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.PositionTierMaxShift">
            <summary>
            Gets or sets the position tier max shift.
            </summary>
            <value> The position tier max shift. </value>
        </member>
        <member name="P:OxyPlot.Axes.Axis.PositionTierMinShift">
            <summary>
            Gets or sets the position tier min shift.
            </summary>
            <value> The position tier min shift. </value>
        </member>
        <member name="P:OxyPlot.Axes.Axis.PositionTierSize">
            <summary>
            Gets or sets the size of the position tier.
            </summary>
            <value> The size of the position tier. </value>
        </member>
        <member name="P:OxyPlot.Axes.Axis.ActualTitleColor">
            <summary>
            Gets the actual color of the title.
            </summary>
            <value> The actual color of the title. </value>
        </member>
        <member name="P:OxyPlot.Axes.Axis.ActualTitleFont">
            <summary>
            Gets the actual title font.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.ActualTitleFontSize">
            <summary>
            Gets the actual size of the title font.
            </summary>
            <value> The actual size of the title font. </value>
        </member>
        <member name="P:OxyPlot.Axes.Axis.ActualTitleFontWeight">
            <summary>
            Gets the actual title font weight.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.Axis.ViewMaximum">
            <summary>
            Gets or sets the current view's maximum. This value is used when the user zooms or pans.
            </summary>
            <value> The view maximum. </value>
        </member>
        <member name="P:OxyPlot.Axes.Axis.ViewMinimum">
            <summary>
            Gets or sets the current view's minimum. This value is used when the user zooms or pans.
            </summary>
            <value> The view minimum. </value>
        </member>
        <member name="M:OxyPlot.Axes.LinearAxis.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Axes.LinearAxis"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Axes.LinearAxis.#ctor(OxyPlot.Axes.AxisPosition,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Axes.LinearAxis"/> class.
            </summary>
            <param name="pos">
            The pos.
            </param>
            <param name="title">
            The title.
            </param>
        </member>
        <member name="M:OxyPlot.Axes.LinearAxis.#ctor(OxyPlot.Axes.AxisPosition)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Axes.LinearAxis"/> class.
            </summary>
            <param name="pos">
            The pos.
            </param>
            <param name="minimum">
            The minimum.
            </param>
            <param name="maximum">
            The maximum.
            </param>
            <param name="title">
            The title.
            </param>
        </member>
        <member name="M:OxyPlot.Axes.LinearAxis.#ctor(OxyPlot.Axes.AxisPosition,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Axes.LinearAxis"/> class.
            </summary>
            <param name="pos">
            The pos.
            </param>
            <param name="minimum">
            The minimum.
            </param>
            <param name="maximum">
            The maximum.
            </param>
            <param name="majorStep">
            The major step.
            </param>
            <param name="minorStep">
            The minor step.
            </param>
            <param name="title">
            The title.
            </param>
        </member>
        <member name="M:OxyPlot.Axes.LinearAxis.FormatValue(System.Double)">
            <summary>
            Formats the value to be used on the axis.
            </summary>
            <param name="x">
            The value.
            </param>
            <returns>
            The formatted value.
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.LinearAxis.IsXyAxis">
            <summary>
            Determines whether the axis is used for X/Y values.
            </summary>
            <returns>
            <c>true</c> if it is an XY axis; otherwise, <c>false</c> .
            </returns>
        </member>
        <member name="P:OxyPlot.Axes.LinearAxis.FormatAsFractions">
            <summary>
            Gets or sets a value indicating whether to format numbers as fractions.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.LinearAxis.FractionUnit">
            <summary>
            Gets or sets the fraction unit. Remember to set FormatAsFractions to true.
            </summary>
            <value> The fraction unit. </value>
        </member>
        <member name="P:OxyPlot.Axes.LinearAxis.FractionUnitSymbol">
            <summary>
            Gets or sets the fraction unit symbol. Use FractionUnit = Math.PI and FractionUnitSymbol = "π" if you want the axis to show "π/2,π,3π/2,2π" etc. Use FractionUnit = 1 and FractionUnitSymbol = "L" if you want the axis to show "0,L/2,L" etc. Remember to set FormatAsFractions to true.
            </summary>
            <value> The fraction unit symbol. </value>
        </member>
        <member name="M:OxyPlot.Axes.AngleAxis.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Axes.AngleAxis"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Axes.AngleAxis.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Axes.AngleAxis"/> class.
            </summary>
            <param name="minimum">
            The minimum.
            </param>
            <param name="maximum">
            The maximum.
            </param>
            <param name="majorStep">
            The major step.
            </param>
            <param name="minorStep">
            The minor step.
            </param>
            <param name="title">
            The title.
            </param>
        </member>
        <member name="M:OxyPlot.Axes.AngleAxis.InverseTransform(System.Double,System.Double,OxyPlot.Axes.Axis)">
            <summary>
            Inverse transform the specified screen point.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="yaxis">The y-axis.</param>
            <returns>
            The data point.
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.AngleAxis.IsXyAxis">
            <summary>
            Determines whether the axis is used for X/Y values.
            </summary>
            <returns>
            <c>true</c> if it is an XY axis; otherwise, <c>false</c> .
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.AngleAxis.Render(OxyPlot.IRenderContext,OxyPlot.PlotModel,OxyPlot.Axes.AxisLayer,System.Int32)">
            <summary>
            Renders the axis on the specified render context.
            </summary>
            <param name="rc">The render context.</param>
            <param name="model">The model.</param>
            <param name="axisLayer">The rendering order.</param>
            <param name="pass"></param>
        </member>
        <member name="M:OxyPlot.Axes.AngleAxis.Transform(System.Double,System.Double,OxyPlot.Axes.Axis)">
            <summary>
            Transforms the specified point to screen coordinates.
            </summary>
            <param name="x">
            The x value (for the current axis).
            </param>
            <param name="y">
            The y value.
            </param>
            <param name="yaxis">
            The y axis.
            </param>
            <returns>
            The transformed point.
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.AngleAxis.UpdateTransform(OxyPlot.OxyRect)">
            <summary>
            The update transform.
            </summary>
            <param name="bounds">
            The bounds.
            </param>
        </member>
        <member name="P:OxyPlot.Axes.AngleAxis.StartAngle">
            <summary>
            Gets or sets the start angle (degrees).
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.AngleAxis.EndAngle">
            <summary>
            Gets or sets the end angle (degrees).
            </summary>
        </member>
        <member name="T:OxyPlot.Axes.AxisChangedEventArgs">
            <summary>
            Provides additional data for the <see cref="E:OxyPlot.Axes.Axis.AxisChanged"/> event.
            </summary>
        </member>
        <member name="M:OxyPlot.Axes.AxisChangedEventArgs.#ctor(OxyPlot.Axes.AxisChangeTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Axes.AxisChangedEventArgs"/> class.
            </summary>
            <param name="changeType">
            Type of the change.
            </param>
        </member>
        <member name="P:OxyPlot.Axes.AxisChangedEventArgs.ChangeType">
            <summary>
            Gets or sets the type of the change.
            </summary>
            <value>The type of the change.</value>
        </member>
        <member name="T:OxyPlot.Axes.AxisChangeTypes">
            <summary>
            Specifies change types for the <see cref="E:OxyPlot.Axes.Axis.AxisChanged"/> event.
            </summary>
        </member>
        <member name="F:OxyPlot.Axes.AxisChangeTypes.Zoom">
            <summary>
            The axis was zoomed by the user.
            </summary>
        </member>
        <member name="F:OxyPlot.Axes.AxisChangeTypes.Pan">
            <summary>
            The axis was panned by the user.
            </summary>
        </member>
        <member name="F:OxyPlot.Axes.AxisChangeTypes.Reset">
            <summary>
            The axis zoom/pan was reset by the user.
            </summary>
        </member>
        <member name="T:OxyPlot.Axes.AxisLayer">
            <summary>
            Specifies the layer position of an <see cref="T:OxyPlot.Axes.Axis"/>.
            </summary>
        </member>
        <member name="F:OxyPlot.Axes.AxisLayer.BelowSeries">
            <summary>
            Below all series.
            </summary>
        </member>
        <member name="F:OxyPlot.Axes.AxisLayer.AboveSeries">
            <summary>
            Above all series.
            </summary>
        </member>
        <member name="T:OxyPlot.Axes.AxisPosition">
            <summary>
            Specifies the position of an <see cref="T:OxyPlot.Axes.Axis"/>.
            </summary>
        </member>
        <member name="F:OxyPlot.Axes.AxisPosition.None">
            <summary>
            No position.
            </summary>
        </member>
        <member name="F:OxyPlot.Axes.AxisPosition.Left">
            <summary>
            Left of the plot area.
            </summary>
        </member>
        <member name="F:OxyPlot.Axes.AxisPosition.Right">
            <summary>
            Right of the plot area.
            </summary>
        </member>
        <member name="F:OxyPlot.Axes.AxisPosition.Top">
            <summary>
            Top of the plot area.
            </summary>
        </member>
        <member name="F:OxyPlot.Axes.AxisPosition.Bottom">
            <summary>
            Bottom of the plot area.
            </summary>
        </member>
        <member name="T:OxyPlot.Axes.CategoryAxis">
            <summary>
            Represents a category axis.
            </summary>
            <remarks>
            The category axis is using the label collection indices as the coordinate. If you have 5 categories in the Labels collection, the categories will be placed at coordinates 0 to 4. The range of the axis will be from -0.5 to 4.5 (excl. padding).
            </remarks>
        </member>
        <member name="M:OxyPlot.Axes.CategoryAxis.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Axes.CategoryAxis"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Axes.CategoryAxis.#ctor(OxyPlot.Axes.AxisPosition)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Axes.CategoryAxis"/> class.
            </summary>
            <param name="position">The position.</param>
            <param name="title">The title.</param>
            <param name="categories">The categories.</param>
        </member>
        <member name="M:OxyPlot.Axes.CategoryAxis.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Axes.CategoryAxis"/> class.
            </summary>
            <param name="title">
            The title.
            </param>
            <param name="categories">
            The categories.
            </param>
        </member>
        <member name="M:OxyPlot.Axes.CategoryAxis.Fill(System.Double[],System.Double)">
            <summary>
            Fills the specified array.
            </summary>
            <param name="array">
            The array.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:OxyPlot.Axes.CategoryAxis.Fill(System.Double[0:,0:],System.Double)">
            <summary>
            Fills the specified array.
            </summary>
            <param name="array">
            The array.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:OxyPlot.Axes.CategoryAxis.FormatValue(System.Double)">
            <summary>
            Formats the value to be used on the axis.
            </summary>
            <param name="x">
            The value.
            </param>
            <returns>
            The formatted value.
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.CategoryAxis.FormatValueForTracker(System.Double)">
            <summary>
            Formats the value to be used by the tracker.
            </summary>
            <param name="x">
            The value.
            </param>
            <returns>
            The formatted value.
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.CategoryAxis.GetCategoryValue(System.Int32,System.Int32,System.Double)">
            <summary>
            Gets the category value.
            </summary>
            <param name="categoryIndex">
            Index of the category.
            </param>
            <param name="stackIndex">
            Index of the stack.
            </param>
            <param name="actualBarWidth">
            Actual width of the bar.
            </param>
            <returns>
            The get category value.
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.CategoryAxis.GetCategoryValue(System.Int32)">
            <summary>
            Gets the category value.
            </summary>
            <param name="categoryIndex">
            Index of the category.
            </param>
            <returns>
            The get category value.
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.CategoryAxis.GetTickValues(System.Collections.Generic.IList{System.Double}@,System.Collections.Generic.IList{System.Double}@,System.Collections.Generic.IList{System.Double}@)">
            <summary>
            Gets the coordinates used to draw ticks and tick labels (numbers or category names).
            </summary>
            <param name="majorLabelValues">
            The major label values.
            </param>
            <param name="majorTickValues">
            The major tick values.
            </param>
            <param name="minorTickValues">
            The minor tick values.
            </param>
        </member>
        <member name="M:OxyPlot.Axes.CategoryAxis.GetValue(System.Double)">
            <summary>
            Gets the value from an axis coordinate, converts from double to the correct data type if necessary. e.g. DateTimeAxis returns the DateTime and CategoryAxis returns category strings.
            </summary>
            <param name="x">
            The coordinate.
            </param>
            <returns>
            The value.
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.CategoryAxis.UpdateActualMaxMin">
            <summary>
            Updates the actual maximum and minimum values. If the user has zoomed/panned the axis, the internal ViewMaximum/ViewMinimum values will be used. If Maximum or Minimum have been set, these values will be used. Otherwise the maximum and minimum values of the series will be used, including the 'padding'.
            </summary>
        </member>
        <member name="M:OxyPlot.Axes.CategoryAxis.UpdateFromSeries(System.Collections.Generic.IEnumerable{OxyPlot.Series.Series})">
            <summary>
            Updates the axis with information from the plot series.
            </summary>
            <param name="series">
            The series collection.
            </param>
            <remarks>
            This is used by the category axis that need to know the number of series using the axis.
            </remarks>
        </member>
        <member name="M:OxyPlot.Axes.CategoryAxis.UpdateLabels(System.Collections.Generic.IEnumerable{OxyPlot.Series.Series})">
            <summary>
            Creates Labels list if no labels were set
            </summary>
            <param name="series">
            The list of series which are rendered
            </param>
        </member>
        <member name="P:OxyPlot.Axes.CategoryAxis.GapWidth">
            <summary>
            Gets or sets the gap width.
            </summary>
            <remarks>
            The default value is 1.0 (100%). The gap width is given as a fraction of the total width/height of the items in a category.
            </remarks>
        </member>
        <member name="P:OxyPlot.Axes.CategoryAxis.IsTickCentered">
            <summary>
            Gets or sets a value indicating whether the ticks are centered. If this is false, ticks will be drawn between each category. If this is true, ticks will be drawn in the middle of each category.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.CategoryAxis.ItemsSource">
            <summary>
            Gets or sets the items source (used to update the Labels collection).
            </summary>
            <value>
            The items source.
            </value>
        </member>
        <member name="P:OxyPlot.Axes.CategoryAxis.LabelField">
            <summary>
            Gets or sets the data field for the labels.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.CategoryAxis.Labels">
            <summary>
            Gets or sets the labels collection.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.CategoryAxis.BarOffset">
            <summary>
            Gets or sets the current offset of the bars (not used for stacked bar series).
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.CategoryAxis.MaxValue">
            <summary>
            Gets or sets the max value per StackIndex and Label (only used for stacked bar series).
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.CategoryAxis.MaxWidth">
            <summary>
            Gets or sets the maximal width of all labels
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.CategoryAxis.MinValue">
            <summary>
            Gets or sets the min value per StackIndex and Label (only used for stacked bar series).
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.CategoryAxis.NegativeBaseValues">
            <summary>
            Gets or sets per StackIndex and Label the base value for negative values of stacked bar series.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.CategoryAxis.PositiveBaseValues">
            <summary>
            Gets or sets per StackIndex and Label the base value for positive values of stacked bar series.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.CategoryAxis.StackIndexMapping">
            <summary>
            Gets or sets the StackIndexMapping. The mapping indicates to which rank a specific stack index belongs.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.CategoryAxis.StackedBarOffset">
            <summary>
            Gets or sets the offset of the bars per StackIndex and Label (only used for stacked bar series).
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.CategoryAxis.TotalWidthPerCategory">
            <summary>
            Gets or sets sum of the widths of the single bars per label. This is used to find the bar width of BarSeries
            </summary>
        </member>
        <member name="T:OxyPlot.Axes.ColorAxis">
            <summary>
            Represents a color axis.
            </summary>
        </member>
        <member name="M:OxyPlot.Axes.ColorAxis.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Axes.ColorAxis"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Axes.ColorAxis.GetColor(System.Int32)">
            <summary>
            Gets the color.
            </summary>
            <param name="paletteIndex">
            The color map index (less than NumberOfEntries).
            </param>
            <returns>
            The color.
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.ColorAxis.GetColor(System.Double)">
            <summary>
            Gets the color for the specified value.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The color.
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.ColorAxis.GetColors">
            <summary>
            Gets the colors.
            </summary>
            <returns>The colors.</returns>
        </member>
        <member name="M:OxyPlot.Axes.ColorAxis.GetPaletteIndex(System.Double)">
            <summary>
            Gets the palette index of the specified value.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The palette index.
            </returns>
            <remarks>
            If the value is less than minimum, 0 is returned. If the value is greater than maximum, Palette.Colors.Count+1 is returned.
            </remarks>
        </member>
        <member name="M:OxyPlot.Axes.ColorAxis.IsXyAxis">
            <summary>
            Determines whether the axis is used for X/Y values.
            </summary>
            <returns>
            <c>true</c> if it is an XY axis; otherwise, <c>false</c> .
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.ColorAxis.Render(OxyPlot.IRenderContext,OxyPlot.PlotModel,OxyPlot.Axes.AxisLayer,System.Int32)">
            <summary>
            Renders the axis on the specified render context.
            </summary>
            <param name="rc">The render context.</param>
            <param name="model">The model.</param>
            <param name="axisLayer">The rendering order.</param>
            <param name="pass">The render pass.</param>
        </member>
        <member name="M:OxyPlot.Axes.ColorAxis.GetHighValue(System.Int32)">
            <summary>
            Gets the high value of the specified palette index.
            </summary>
            <param name="paletteIndex">
            Index of the palette.
            </param>
            <returns>
            The value.
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.ColorAxis.GetLowValue(System.Int32)">
            <summary>
            Gets the low value of the specified palette index.
            </summary>
            <param name="paletteIndex">
            Index of the palette.
            </param>
            <returns>
            The value.
            </returns>
        </member>
        <member name="P:OxyPlot.Axes.ColorAxis.HighColor">
            <summary>
            Gets or sets the color of values above the maximum value.
            </summary>
            <value> The color of the high values. </value>
        </member>
        <member name="P:OxyPlot.Axes.ColorAxis.LowColor">
            <summary>
            Gets or sets the color of values below the minimum value.
            </summary>
            <value> The color of the low values. </value>
        </member>
        <member name="P:OxyPlot.Axes.ColorAxis.Palette">
            <summary>
            Gets or sets the palette.
            </summary>
            <value> The palette. </value>
        </member>
        <member name="T:OxyPlot.Axes.DateTimeAxis">
            <summary>
            Represents a axis presenting <see cref="T:System.DateTime"/> values.
            </summary>
            <remarks>
            The actual numeric values on the axis are days since 1900/01/01.
            Use the static ToDouble and ToDateTime to convert numeric values to DateTimes.
            The StringFormat value can be used to force formatting of the axis values
            "yyyy-MM-dd" shows date
            "w" or "ww" shows week number
            "h:mm" shows hours and minutes
            </remarks>
        </member>
        <member name="F:OxyPlot.Axes.DateTimeAxis.timeOrigin">
            <summary>
            The time origin.
            </summary>
            <remarks>
            Same date values as Excel
            </remarks>
        </member>
        <member name="F:OxyPlot.Axes.DateTimeAxis.actualIntervalType">
            <summary>
            The actual interval type.
            </summary>
        </member>
        <member name="F:OxyPlot.Axes.DateTimeAxis.actualMinorIntervalType">
            <summary>
            The actual minor interval type.
            </summary>
        </member>
        <member name="M:OxyPlot.Axes.DateTimeAxis.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Axes.DateTimeAxis"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Axes.DateTimeAxis.#ctor(OxyPlot.Axes.AxisPosition)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Axes.DateTimeAxis"/> class.
            </summary>
            <param name="pos">
            The position.
            </param>
            <param name="title">
            The axis title.
            </param>
            <param name="format">
            The string format for the axis values.
            </param>
            <param name="intervalType">
            The interval type.
            </param>
        </member>
        <member name="M:OxyPlot.Axes.DateTimeAxis.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Axes.DateTimeAxis"/> class.
            </summary>
            <param name="firstDateTime">
            The first date/time on the axis.
            </param>
            <param name="lastDateTime">
            The last date/time on the axis.
            </param>
            <param name="pos">
            The position of the axis.
            </param>
            <param name="title">
            The axis title.
            </param>
            <param name="format">
            The string format for the axis values.
            </param>
            <param name="intervalType">
            The interval type.
            </param>
        </member>
        <member name="M:OxyPlot.Axes.DateTimeAxis.#ctor(OxyPlot.Axes.AxisPosition,System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Axes.DateTimeAxis"/> class.
            </summary>
            <param name="pos">The position of the axis.</param>
            <param name="firstDateTime">The first date/time on the axis.</param>
            <param name="lastDateTime">The last date/time on the axis.</param>
            <param name="title">The axis title.</param>
            <param name="format">The string format for the axis values.</param>
            <param name="intervalType">The interval type.</param>
        </member>
        <member name="M:OxyPlot.Axes.DateTimeAxis.CreateDataPoint(System.DateTime,System.Double)">
            <summary>
            Creates a data point.
            </summary>
            <param name="x">
            The x value.
            </param>
            <param name="y">
            The y value.
            </param>
            <returns>
            A data point.
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.DateTimeAxis.CreateDataPoint(System.DateTime,System.DateTime)">
            <summary>
            Creates a data point.
            </summary>
            <param name="x">
            The x value.
            </param>
            <param name="y">
            The y value. 
            </param>
            <returns>
            A data point.
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.DateTimeAxis.CreateDataPoint(System.Double,System.DateTime)">
            <summary>
            Creates a data point.
            </summary>
            <param name="x">
            The x value.
            </param>
            <param name="y">
            The y value.
            </param>
            <returns>
            A data point.
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.DateTimeAxis.ToDateTime(System.Double)">
            <summary>
            Converts a numeric representation of the date (number of days after the time origin) to a DateTime structure.
            </summary>
            <param name="value">
            The number of days after the time origin.
            </param>
            <returns>
            A date/time structure.
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.DateTimeAxis.ToDouble(System.DateTime)">
            <summary>
            Converts a DateTime to days after the time origin.
            </summary>
            <param name="value">
            The date/time structure.
            </param>
            <returns>
            The number of days after the time origin.
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.DateTimeAxis.FormatValue(System.Double)">
            <summary>
            Formats the specified value by the axis' ActualStringFormat.
            </summary>
            <param name="x">
            The x.
            </param>
            <returns>
            The formatted DateTime value
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.DateTimeAxis.GetTickValues(System.Collections.Generic.IList{System.Double}@,System.Collections.Generic.IList{System.Double}@,System.Collections.Generic.IList{System.Double}@)">
            <summary>
            Gets the tick values.
            </summary>
            <param name="majorLabelValues">
            The major label values.
            </param>
            <param name="majorTickValues">
            The major tick values.
            </param>
            <param name="minorTickValues">
            The minor tick values.
            </param>
        </member>
        <member name="M:OxyPlot.Axes.DateTimeAxis.GetValue(System.Double)">
            <summary>
            Gets the value from an axis coordinate, converts from double to the correct data type if necessary.
            e.g. DateTimeAxis returns the DateTime and CategoryAxis returns category strings.
            </summary>
            <param name="x">
            The coordinate.
            </param>
            <returns>
            The value.
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.DateTimeAxis.UpdateIntervals(OxyPlot.OxyRect)">
            <summary>
            Updates the intervals.
            </summary>
            <param name="plotArea">
            The plot area.
            </param>
        </member>
        <member name="M:OxyPlot.Axes.DateTimeAxis.CalculateActualInterval(System.Double,System.Double)">
            <summary>
            Calculates the actual interval.
            </summary>
            <param name="availableSize">
            Size of the available area.
            </param>
            <param name="maxIntervalSize">
            Maximum length of the intervals.
            </param>
            <returns>
            The calculate actual interval.
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.DateTimeAxis.CreateDateTickValues(System.Double,System.Double,System.Double,OxyPlot.Axes.DateTimeIntervalType)">
            <summary>
            Creates the date tick values.
            </summary>
            <param name="min">
            The min.
            </param>
            <param name="max">
            The max.
            </param>
            <param name="step">
            The step.
            </param>
            <param name="intervalType">
            Type of the interval.
            </param>
            <returns>
            Date tick values.
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.DateTimeAxis.CreateDateTimeTickValues(System.Double,System.Double,System.Double,OxyPlot.Axes.DateTimeIntervalType)">
            <summary>
            Creates date/time tick values.
            </summary>
            <param name="min">
            The min.
            </param>
            <param name="max">
            The max.
            </param>
            <param name="interval">
            The interval.
            </param>
            <param name="intervalType">
            The interval type.
            </param>
            DateTime tick values.
            <returns>
            DateTime tick values.
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.DateTimeAxis.GetWeek(System.DateTime)">
            <summary>
            Gets the week number for the specified date.
            </summary>
            <param name="date">
            The date.
            </param>
            <returns>
            The week number for the current culture.
            </returns>
        </member>
        <member name="P:OxyPlot.Axes.DateTimeAxis.CalendarWeekRule">
            <summary>
            Gets or sets CalendarWeekRule.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.DateTimeAxis.FirstDayOfWeek">
            <summary>
            Gets or sets FirstDayOfWeek.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.DateTimeAxis.IntervalType">
            <summary>
            Gets or sets IntervalType.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.DateTimeAxis.MinorIntervalType">
            <summary>
            Gets or sets MinorIntervalType.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.DateTimeAxis.TimeZone">
            <summary>
            Gets or sets the time zone (used when formatting date/time values).
            </summary>
            <remarks>
            No date/time conversion will be performed if this property is null.
            </remarks>
            <value>
            The time zone info.
            </value>
        </member>
        <member name="T:OxyPlot.Axes.DateTimeIntervalType">
            <summary>
            Specifies the date time interval for <see cref="T:OxyPlot.Axes.DateTimeAxis"/>.
            </summary>
        </member>
        <member name="F:OxyPlot.Axes.DateTimeIntervalType.Auto">
            <summary>
            Automatically determine interval.
            </summary>
        </member>
        <member name="F:OxyPlot.Axes.DateTimeIntervalType.Manual">
            <summary>
            Manual definition of intervals.
            </summary>
        </member>
        <member name="F:OxyPlot.Axes.DateTimeIntervalType.Milliseconds">
            <summary>
            Interval type is milliseconds.
            </summary>
        </member>
        <member name="F:OxyPlot.Axes.DateTimeIntervalType.Seconds">
            <summary>
            Interval type is seconds.
            </summary>
        </member>
        <member name="F:OxyPlot.Axes.DateTimeIntervalType.Minutes">
            <summary>
            Interval type is minutes.
            </summary>
        </member>
        <member name="F:OxyPlot.Axes.DateTimeIntervalType.Hours">
            <summary>
            Interval type is hours.
            </summary>
        </member>
        <member name="F:OxyPlot.Axes.DateTimeIntervalType.Days">
            <summary>
            Interval type is days.
            </summary>
        </member>
        <member name="F:OxyPlot.Axes.DateTimeIntervalType.Weeks">
            <summary>
            Interval type is weeks.
            </summary>
        </member>
        <member name="F:OxyPlot.Axes.DateTimeIntervalType.Months">
            <summary>
            Interval type is months.
            </summary>
        </member>
        <member name="F:OxyPlot.Axes.DateTimeIntervalType.Years">
            <summary>
            Interval type is years.
            </summary>
        </member>
        <member name="T:OxyPlot.Axes.LogarithmicAxis">
            <summary>
            Represents an axis with logarithmic scale.
            </summary>
            <remarks>
            See http://en.wikipedia.org/wiki/Logarithmic_scale.
            </remarks>
        </member>
        <member name="M:OxyPlot.Axes.LogarithmicAxis.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Axes.LogarithmicAxis"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Axes.LogarithmicAxis.#ctor(OxyPlot.Axes.AxisPosition,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Axes.LogarithmicAxis"/> class.
            </summary>
            <param name="pos">
            The position.
            </param>
            <param name="title">
            The title.
            </param>
        </member>
        <member name="M:OxyPlot.Axes.LogarithmicAxis.#ctor(OxyPlot.Axes.AxisPosition)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Axes.LogarithmicAxis"/> class.
            </summary>
            <param name="position">
            The position.
            </param>
            <param name="minimum">
            The minimum.
            </param>
            <param name="maximum">
            The maximum.
            </param>
            <param name="title">
            The title.
            </param>
        </member>
        <member name="M:OxyPlot.Axes.LogarithmicAxis.CoerceActualMaxMin">
            <summary>
            Coerces the actual maximum and minimum values.
            </summary>
        </member>
        <member name="M:OxyPlot.Axes.LogarithmicAxis.GetTickValues(System.Collections.Generic.IList{System.Double}@,System.Collections.Generic.IList{System.Double}@,System.Collections.Generic.IList{System.Double}@)">
            <summary>
            Gets the coordinates used to draw ticks and tick labels (numbers or category names).
            </summary>
            <param name="majorLabelValues">
            The major label values.
            </param>
            <param name="majorTickValues">
            The major tick values.
            </param>
            <param name="minorTickValues">
            The minor tick values.
            </param>
        </member>
        <member name="M:OxyPlot.Axes.LogarithmicAxis.IsValidValue(System.Double)">
            <summary>
            Determines whether the specified value is valid.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            <c>true</c> if the specified value is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.LogarithmicAxis.IsXyAxis">
            <summary>
            Determines whether the axis is used for X/Y values.
            </summary>
            <returns>
            <c>true</c> if it is an XY axis; otherwise, <c>false</c> .
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.LogarithmicAxis.Pan(OxyPlot.ScreenPoint,OxyPlot.ScreenPoint)">
            <summary>
            Pans the specified axis.
            </summary>
            <param name="ppt">
            The previous point (screen coordinates).
            </param>
            <param name="cpt">
            The current point (screen coordinates).
            </param>
        </member>
        <member name="M:OxyPlot.Axes.LogarithmicAxis.Transform(System.Double)">
            <summary>
            Transforms the specified coordinate to screen coordinates.
            </summary>
            <param name="x">
            The value.
            </param>
            <returns>
            The transformed value (screen coordinate).
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.LogarithmicAxis.ZoomAt(System.Double,System.Double)">
            <summary>
            Zooms the axis at the specified coordinate.
            </summary>
            <param name="factor">
            The zoom factor.
            </param>
            <param name="x">
            The coordinate to zoom at.
            </param>
        </member>
        <member name="M:OxyPlot.Axes.LogarithmicAxis.PostInverseTransform(System.Double)">
            <summary>
            Applies a transformation after the inverse transform of the value. This is used in logarithmic axis.
            </summary>
            <param name="x">The value to transform.</param>
            <returns>
            The transformed value.
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.LogarithmicAxis.PreTransform(System.Double)">
            <summary>
            Applies a transformation before the transform the value. This is used in logarithmic axis.
            </summary>
            <param name="x">The value to transform.</param>
            <returns>
            The transformed value.
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.LogarithmicAxis.UpdateActualMaxMin">
            <summary>
            Updates the actual maximum and minimum values.
            If the user has zoomed/panned the axis, the internal ViewMaximum/ViewMinimum values will be used.
            If Maximum or Minimum have been set, these values will be used.
            Otherwise the maximum and minimum values of the series will be used, including the 'padding'.
            </summary>
        </member>
        <member name="P:OxyPlot.Axes.LogarithmicAxis.Base">
            <summary>
            Gets or sets the logarithmic base (normally 10).
            </summary>
            <remarks>
            See http://en.wikipedia.org/wiki/Logarithm.
            </remarks>
            <value>The logarithmic base.</value>
        </member>
        <member name="P:OxyPlot.Axes.LogarithmicAxis.PowerPadding">
            <summary>
            Gets or sets a value indicating whether the ActualMaximum and ActualMinimum values should be padded to the nearest power of the Base.
            </summary>
        </member>
        <member name="T:OxyPlot.Axes.MagnitudeAxis">
            <summary>
            Represents a magnitude axis for polar plots.
            </summary>
        </member>
        <member name="M:OxyPlot.Axes.MagnitudeAxis.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Axes.MagnitudeAxis"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Axes.MagnitudeAxis.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Axes.MagnitudeAxis"/> class.
            </summary>
            <param name="minimum">
            The minimum.
            </param>
            <param name="maximum">
            The maximum.
            </param>
            <param name="majorStep">
            The major step.
            </param>
            <param name="minorStep">
            The minor step.
            </param>
            <param name="title">
            The title.
            </param>
        </member>
        <member name="M:OxyPlot.Axes.MagnitudeAxis.InverseTransform(System.Double,System.Double,OxyPlot.Axes.Axis)">
            <summary>
            Inverse transform the specified screen point.
            </summary>
            <param name="x">
            The x coordinate.
            </param>
            <param name="y">
            The y coordinate.
            </param>
            <param name="yaxis">
            The y-axis.
            </param>
            <returns>
            The data point.
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.MagnitudeAxis.IsXyAxis">
            <summary>
            Determines whether the axis is used for X/Y values.
            </summary>
            <returns>
            <c>true</c> if it is an XY axis; otherwise, <c>false</c> .
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.MagnitudeAxis.Render(OxyPlot.IRenderContext,OxyPlot.PlotModel,OxyPlot.Axes.AxisLayer,System.Int32)">
            <summary>
            Renders the axis on the specified render context.
            </summary>
            <param name="rc">The render context.</param>
            <param name="model">The model.</param>
            <param name="axisLayer">The rendering order.</param>
            <param name="pass"></param>
        </member>
        <member name="M:OxyPlot.Axes.MagnitudeAxis.Transform(System.Double,System.Double,OxyPlot.Axes.Axis)">
            <summary>
            Transforms the specified point to screen coordinates.
            </summary>
            <param name="x">
            The x value (for the current axis).
            </param>
            <param name="y">
            The y value.
            </param>
            <param name="yaxis">
            The y axis.
            </param>
            <returns>
            The transformed point.
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.MagnitudeAxis.UpdateTransform(OxyPlot.OxyRect)">
            <summary>
            Updates the scale and offset properties of the transform from the specified boundary rectangle.
            </summary>
            <param name="bounds">
            The bounds.
            </param>
        </member>
        <member name="P:OxyPlot.Axes.MagnitudeAxis.MidPoint">
            <summary>
            Gets or sets the midpoint (screen coordinates) of the plot area. This is used by polar coordinate systems.
            </summary>
        </member>
        <member name="T:OxyPlot.Axes.TickStyle">
            <summary>
            Specifies the style of axis ticks.
            </summary>
        </member>
        <member name="F:OxyPlot.Axes.TickStyle.Crossing">
            <summary>
            The ticks are rendered crossing the axis line.
            </summary>
        </member>
        <member name="F:OxyPlot.Axes.TickStyle.Inside">
            <summary>
            The ticks are rendered inside of the plot area.
            </summary>
        </member>
        <member name="F:OxyPlot.Axes.TickStyle.Outside">
            <summary>
            The ticks are rendered Outside the plot area.
            </summary>
        </member>
        <member name="F:OxyPlot.Axes.TickStyle.None">
            <summary>
            The ticks are not rendered.
            </summary>
        </member>
        <member name="T:OxyPlot.Axes.TimeSpanAxis">
            <summary>
            Represents an axis presenting <see cref="T:System.TimeSpan"/> values.
            </summary>
            <remarks>
            The values should be in seconds.
            The StringFormat value can be used to force formatting of the axis values
            "h:mm" shows hours and minutes
            "m:ss" shows minutes and seconds
            </remarks>
        </member>
        <member name="M:OxyPlot.Axes.TimeSpanAxis.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Axes.TimeSpanAxis"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Axes.TimeSpanAxis.#ctor(OxyPlot.Axes.AxisPosition)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Axes.TimeSpanAxis"/> class.
            </summary>
            <param name="pos">
            The position.
            </param>
            <param name="title">
            The axis title.
            </param>
            <param name="format">
            The string format for the axis values.
            </param>
        </member>
        <member name="M:OxyPlot.Axes.TimeSpanAxis.#ctor(OxyPlot.Axes.AxisPosition,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Axes.TimeSpanAxis"/> class.
            </summary>
            <param name="pos">
            The position.
            </param>
            <param name="min">
            The min.
            </param>
            <param name="max">
            The max.
            </param>
            <param name="title">
            The axis title.
            </param>
            <param name="format">
            The string format for the axis values.
            </param>
        </member>
        <member name="M:OxyPlot.Axes.TimeSpanAxis.ToDouble(System.TimeSpan)">
            <summary>
            Converts a time span to a double.
            </summary>
            <param name="s">
            The time span.
            </param>
            <returns>
            A double value.
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.TimeSpanAxis.ToTimeSpan(System.Double)">
            <summary>
            Converts a double to a time span.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            A time span.
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.TimeSpanAxis.FormatValue(System.Double)">
            <summary>
            Formats the value.
            </summary>
            <param name="x">
            The x.
            </param>
            <returns>
            The format value.
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.TimeSpanAxis.GetValue(System.Double)">
            <summary>
            Gets the value from an axis coordinate, converts from double to the correct data type if necessary. e.g. DateTimeAxis returns the DateTime and CategoryAxis returns category strings.
            </summary>
            <param name="x">The coordinate.</param>
            <returns>
            The value.
            </returns>
        </member>
        <member name="M:OxyPlot.Axes.TimeSpanAxis.CalculateActualInterval(System.Double,System.Double)">
            <summary>
            Calculates the actual interval.
            </summary>
            <param name="availableSize">Size of the available area.</param>
            <param name="maxIntervalSize">Maximum length of the intervals.</param>
            <returns>
            The calculate actual interval.
            </returns>
        </member>
        <member name="T:OxyPlot.ArrayHelper">
            <summary>
            Provides utility methods for vector generation.
            </summary>
        </member>
        <member name="M:OxyPlot.ArrayHelper.CreateVector(System.Double,System.Double,System.Int32)">
            <summary>
            Creates a vector.
            </summary>
            <param name="x0">
            The first value.
            </param>
            <param name="x1">
            The last value.
            </param>
            <param name="n">
            The number of steps.
            </param>
            <returns>
            A vector.
            </returns>
        </member>
        <member name="M:OxyPlot.ArrayHelper.CreateVector(System.Double,System.Double,System.Double)">
            <summary>
            Creates a vector.
            </summary>
            <param name="x0">
            The first value.
            </param>
            <param name="x1">
            The last value.
            </param>
            <param name="dx">
            The step size.
            </param>
            <returns>
            A vector.
            </returns>
        </member>
        <member name="M:OxyPlot.ArrayHelper.Evaluate(Alt.Func{System.Double,System.Double,System.Double},System.Double[],System.Double[])">
            <summary>
            Evaluates the specified function.
            </summary>
            <param name="f">
            The function.
            </param>
            <param name="x">
            The x values.
            </param>
            <param name="y">
            The y values.
            </param>
            <returns>
            Array of evaluations. The value of f(x_i,y_j) will be placed at index [i, j].
            </returns>
        </member>
        <member name="T:OxyPlot.CanonicalSplineHelper">
            <summary>
            Provides functionality to interpolate a list of points by a canonical spline.
            </summary>
        </member>
        <member name="M:OxyPlot.CanonicalSplineHelper.CreateSpline(System.Collections.Generic.IList{OxyPlot.IDataPoint},System.Double,System.Collections.Generic.IList{System.Double},System.Boolean,System.Double)">
            <summary>
            Creates a spline of data points.
            </summary>
            <param name="points">
            The points.
            </param>
            <param name="tension">
            The tension.
            </param>
            <param name="tensions">
            The tensions.
            </param>
            <param name="isClosed">
            True if the spline is closed.
            </param>
            <param name="tolerance">
            The tolerance.
            </param>
            <returns>
            A list of data points.
            </returns>
        </member>
        <member name="M:OxyPlot.CanonicalSplineHelper.CreateSpline(System.Collections.Generic.IList{OxyPlot.ScreenPoint},System.Double,System.Collections.Generic.IList{System.Double},System.Boolean,System.Double)">
            <summary>
            Creates a spline of screen points.
            </summary>
            <param name="points">
            The points.
            </param>
            <param name="tension">
            The tension.
            </param>
            <param name="tensions">
            The tensions.
            </param>
            <param name="isClosed">
            True if the spline is closed.
            </param>
            <param name="tolerance">
            The tolerance.
            </param>
            <returns>
            A list of screen points.
            </returns>
        </member>
        <member name="M:OxyPlot.CanonicalSplineHelper.Segment(System.Collections.Generic.IList{OxyPlot.ScreenPoint},OxyPlot.ScreenPoint,OxyPlot.ScreenPoint,OxyPlot.ScreenPoint,OxyPlot.ScreenPoint,System.Double,System.Double,System.Double)">
            <summary>
            The segment.
            </summary>
            <param name="points">
            The points.
            </param>
            <param name="pt0">
            The pt 0.
            </param>
            <param name="pt1">
            The pt 1.
            </param>
            <param name="pt2">
            The pt 2.
            </param>
            <param name="pt3">
            The pt 3.
            </param>
            <param name="t1">
            The t 1.
            </param>
            <param name="t2">
            The t 2.
            </param>
            <param name="tolerance">
            The tolerance.
            </param>
        </member>
        <member name="T:OxyPlot.CodeGenerationAttribute">
            <summary>
            Specifies whether code should be generated for the property.
            </summary>
        </member>
        <member name="M:OxyPlot.CodeGenerationAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.CodeGenerationAttribute"/> class.
            </summary>
            <param name="generateCode">
            The generate code.
            </param>
        </member>
        <member name="P:OxyPlot.CodeGenerationAttribute.GenerateCode">
            <summary>
            Gets or sets a value indicating whether GenerateCode.
            </summary>
        </member>
        <member name="T:OxyPlot.CodeGenerator">
            <summary>
            Provides functionality to generate C# code for the specified <see cref="T:OxyPlot.PlotModel"/>.
            </summary>
            <remarks>
            This is useful for creating examples or unit tests. Press Ctrl+Alt+C in a plot to copy code to the clipboard.
            Usage:
            var cg = new CodeGenerator(myPlotModel);
            Clipboard.SetText(cg.ToCode());
            </remarks>
        </member>
        <member name="F:OxyPlot.CodeGenerator.sb">
            <summary>
            The sb.
            </summary>
        </member>
        <member name="F:OxyPlot.CodeGenerator.variables">
            <summary>
            The variables.
            </summary>
        </member>
        <member name="F:OxyPlot.CodeGenerator.indentString">
            <summary>
            The indent string.
            </summary>
        </member>
        <member name="F:OxyPlot.CodeGenerator.indents">
            <summary>
            The indents.
            </summary>
        </member>
        <member name="M:OxyPlot.CodeGenerator.#ctor(OxyPlot.PlotModel)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.CodeGenerator"/> class.
            </summary>
            <param name="model">
            The model.
            </param>
        </member>
        <member name="M:OxyPlot.CodeGenerator.FormatCode(System.String,System.Object[])">
            <summary>
            Formats the code.
            </summary>
            <param name="format">
            The format.
            </param>
            <param name="values">
            The values.
            </param>
            <returns>
            The format code.
            </returns>
        </member>
        <member name="M:OxyPlot.CodeGenerator.FormatConstructor(System.Type,System.String,System.Object[])">
            <summary>
            Formats a constructor.
            </summary>
            <param name="type">
            The type.
            </param>
            <param name="format">
            The format of the constructor arguments.
            </param>
            <param name="values">
            The argument values.
            </param>
            <returns>
            The format constructor.
            </returns>
        </member>
        <member name="M:OxyPlot.CodeGenerator.ToCode">
            <summary>
            Returns the c# code for this model.
            </summary>
            <returns>
            C# code.
            </returns>
        </member>
        <member name="M:OxyPlot.CodeGenerator.Add(System.Object)">
            <summary>
            Adds the specified object to the generated code.
            </summary>
            <param name="obj">
            The object.
            </param>
            <returns>
            The variable name.
            </returns>
        </member>
        <member name="M:OxyPlot.CodeGenerator.AddChildren(System.String,System.String,System.Collections.IEnumerable)">
            <summary>
            Adds the children.
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="collectionName">
            Name of the collection.
            </param>
            <param name="children">
            The children.
            </param>
        </member>
        <member name="M:OxyPlot.CodeGenerator.AddItems(System.String,System.Collections.IList)">
            <summary>
            Adds the items.
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="list">
            The list.
            </param>
        </member>
        <member name="M:OxyPlot.CodeGenerator.AppendLine(System.String,System.Object[])">
            <summary>
            Appends the line.
            </summary>
            <param name="format">
            The format string.
            </param>
            <param name="args">
            The args.
            </param>
        </member>
        <member name="M:OxyPlot.CodeGenerator.AreListsEqual(System.Collections.IList,System.Collections.IList)">
            <summary>
            Determines if the two specifed lists are equal.
            </summary>
            <param name="list1">
            The first list.
            </param>
            <param name="list2">
            The second list.
            </param>
            <returns>
            True if all items are equal.
            </returns>
        </member>
        <member name="M:OxyPlot.CodeGenerator.GetFirstAttribute``1(System.Reflection.PropertyInfo)">
            <summary>
            Get the first attribute of the specified type.
            </summary>
            <param name="pi">
            The property info.
            </param>
            <typeparam name="T">
            The type.
            </typeparam>
            <returns>
            The attribute, or null if no attribute was found.
            </returns>
        </member>
        <member name="M:OxyPlot.CodeGenerator.GetNewVariableName(System.Type)">
            <summary>
            Gets a new variable name of the specified type.
            </summary>
            <param name="type">
            The type.
            </param>
            <returns>
            The variable name.
            </returns>
        </member>
        <member name="M:OxyPlot.CodeGenerator.MakeValidVariableName(System.String)">
            <summary>
            Makes a valid variable name of a string. Invalid characters will simply be removed.
            </summary>
            <param name="title">
            The title.
            </param>
            <returns>
            A valid variable name.
            </returns>
        </member>
        <member name="M:OxyPlot.CodeGenerator.SetProperties(System.Object,System.String,System.Object)">
            <summary>
            The set properties.
            </summary>
            <param name="instance">
            The instance.
            </param>
            <param name="varName">
            The var name.
            </param>
            <param name="defaultValues">
            The default values.
            </param>
        </member>
        <member name="M:OxyPlot.CodeGenerator.SetProperty(System.String,System.Object)">
            <summary>
            Sets the property.
            </summary>
            <param name="name">
            The property name.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="P:OxyPlot.CodeGenerator.Indents">
            <summary>
            Gets or sets Indents.
            </summary>
        </member>
        <member name="T:OxyPlot.CodeGeneratorStringExtensions">
            <summary>
            Provides extension methods for code generation.
            </summary>
        </member>
        <member name="M:OxyPlot.CodeGeneratorStringExtensions.ToCode(System.String)">
            <summary>
            Converts the value of this instance to c# code.
            </summary>
            <param name="value">
            The instance.
            </param>
            <returns>
            C# code.
            </returns>
        </member>
        <member name="M:OxyPlot.CodeGeneratorStringExtensions.ToCode(System.Boolean)">
            <summary>
            Converts the value of this instance to c# code.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            C# code.
            </returns>
        </member>
        <member name="M:OxyPlot.CodeGeneratorStringExtensions.ToCode(System.Int32)">
            <summary>
            Converts the value of this instance to c# code.
            </summary>
            <param name="value">
            The instance.
            </param>
            <returns>
            C# code.
            </returns>
        </member>
        <member name="M:OxyPlot.CodeGeneratorStringExtensions.ToCode(System.Enum)">
            <summary>
            Converts the value of this instance to c# code.
            </summary>
            <param name="value">
            The instance.
            </param>
            <returns>
            C# code.
            </returns>
        </member>
        <member name="M:OxyPlot.CodeGeneratorStringExtensions.ToCode(System.Double)">
            <summary>
            Converts the value of this instance to c# code.
            </summary>
            <param name="value">
            The instance.
            </param>
            <returns>
            C# code.
            </returns>
        </member>
        <member name="M:OxyPlot.CodeGeneratorStringExtensions.ToCode(System.Object)">
            <summary>
            Converts the value of this instance to c# code.
            </summary>
            <param name="value">
            The instance.
            </param>
            <returns>
            C# code.
            </returns>
        </member>
        <member name="T:OxyPlot.ICodeGenerating">
            <summary>
            Provides functionality to generate C# code of an object.
            </summary>
        </member>
        <member name="M:OxyPlot.ICodeGenerating.ToCode">
            <summary>
            Returns c# code that generates this instance.
            </summary>
            <returns>
            C# code.
            </returns>
        </member>
        <member name="T:OxyPlot.CohenSutherlandClipping">
            <summary>
            Provides a line clipping algorithm.
            </summary>
            <remarks>
            See http://en.wikipedia.org/wiki/Cohen%E2%80%93Sutherland
            </remarks>
        </member>
        <member name="F:OxyPlot.CohenSutherlandClipping.Bottom">
            <summary>
            The bottom code.
            </summary>
        </member>
        <member name="F:OxyPlot.CohenSutherlandClipping.Inside">
            <summary>
            The inside code.
            </summary>
        </member>
        <member name="F:OxyPlot.CohenSutherlandClipping.Left">
            <summary>
            The left code.
            </summary>
        </member>
        <member name="F:OxyPlot.CohenSutherlandClipping.Right">
            <summary>
            The right code.
            </summary>
        </member>
        <member name="F:OxyPlot.CohenSutherlandClipping.Top">
            <summary>
            The top code.
            </summary>
        </member>
        <member name="F:OxyPlot.CohenSutherlandClipping.xmax">
            <summary>
            The x maximum.
            </summary>
        </member>
        <member name="F:OxyPlot.CohenSutherlandClipping.xmin">
            <summary>
            The x minimum.
            </summary>
        </member>
        <member name="F:OxyPlot.CohenSutherlandClipping.ymax">
            <summary>
            The y maximum.
            </summary>
        </member>
        <member name="F:OxyPlot.CohenSutherlandClipping.ymin">
            <summary>
            The y minimum.
            </summary>
        </member>
        <member name="M:OxyPlot.CohenSutherlandClipping.#ctor(OxyPlot.OxyRect)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.CohenSutherlandClipping"/> class.
            </summary>
            <param name="rect">
            The clipping rectangle.
            </param>
        </member>
        <member name="M:OxyPlot.CohenSutherlandClipping.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.CohenSutherlandClipping"/> class.
            </summary>
            <param name="xmin">
            The xmin.
            </param>
            <param name="xmax">
            The xmax.
            </param>
            <param name="ymin">
            The ymin.
            </param>
            <param name="ymax">
            The ymax.
            </param>
        </member>
        <member name="M:OxyPlot.CohenSutherlandClipping.ClipLine(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Cohen–Sutherland clipping algorithm clips a line from
            P0 = (x0, y0) to P1 = (x1, y1) against a rectangle with
            diagonal from (xmin, ymin) to (xmax, ymax).
            </summary>
            <param name="x0">X coordinate of the first point.</param>
            <param name="y0">Y coordinate of the first point.</param>
            <param name="x1">X coordinate of the second point.</param>
            <param name="y1">Y coordinate of the second point.</param>
            <returns>
            true if the line is inside.
            </returns>
        </member>
        <member name="M:OxyPlot.CohenSutherlandClipping.ClipLine(OxyPlot.ScreenPoint@,OxyPlot.ScreenPoint@)">
            <summary>
            Cohen–Sutherland clipping algorithm clips a line from
            P0 = (x0, y0) to P1 = (x1, y1) against a rectangle with
            diagonal from (xmin, ymin) to (xmax, ymax).
            </summary>
            <param name="s0">
            The s 0.
            </param>
            <param name="s1">
            The s 1.
            </param>
            <returns>
            true if the line is inside
            </returns>
        </member>
        <member name="M:OxyPlot.CohenSutherlandClipping.IsInside(System.Double,System.Double)">
            <summary>
            Determines whether the specified point is inside the rectangle.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <returns>
             <c>true</c> if the specified point is inside; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:OxyPlot.CohenSutherlandClipping.IsInside(OxyPlot.ScreenPoint)">
            <summary>
            Determines whether the specified point is inside the rectangle.
            </summary>
            <param name="s">The point.</param>
            <returns>
             <c>true</c> if the specified point is inside; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:OxyPlot.CohenSutherlandClipping.ComputeOutCode(System.Double,System.Double)">
            <summary>
            Computes the out code.
            </summary>
            <param name="x">
            The x.
            </param>
            <param name="y">
            The y.
            </param>
            <returns>
            The out code.
            </returns>
            <remarks>
            Compute the bit code for a point (x, y) using the clip rectangle
            bounded diagonally by (xmin, ymin), and (xmax, ymax)
            </remarks>
        </member>
        <member name="T:OxyPlot.Conrec">
            <summary>
            Provides functionality to create contours from a triangular mesh.
            </summary>
            <remarks>
            <para>
            Ported from C / Fortran code by Paul Bourke.
            See <a href="http://paulbourke.net/papers/conrec/">Conrec</a> for
            full description of code and the original source.
             </para>
            <para>
            Contouring aids in visualizing three dimensional surfaces on a two dimensional
            medium (on paper or in this case a computer graphics screen). Two most common
            applications are displaying topological features of an area on a map or the air
            pressure on a weather map. In all cases some parameter is plotted as a function
            of two variables, the longitude and latitude or x and y axis. One problem with
            computer contouring is the process is usually CPU intensive and the algorithms
            often use advanced mathematical techniques making them susceptible to error.
             </para>
            </remarks>
        </member>
        <member name="M:OxyPlot.Conrec.Contour(System.Double[0:,0:],System.Double[],System.Double[],System.Double[],OxyPlot.Conrec.RendererDelegate)">
            <summary>
            Contour is a contouring subroutine for rectangularily spaced data
            It emits calls to a line drawing subroutine supplied by the user
            which draws a contour map corresponding to data on a randomly
            spaced rectangular grid. The coordinates emitted are in the same
            units given in the x() and y() arrays.
            Any number of contour levels may be specified but they must be
            in order of increasing value.
            </summary>
            <param name="d">
            Matrix of data to contour.
            </param>
            <param name="x">
            Data matrix column coordinates.
            </param>
            <param name="y">
            Data matrix row coordinates.
            </param>
            <param name="z">
            Contour levels in increasing order.
            </param>
            <param name="renderer">
            The renderer.
            </param>
        </member>
        <member name="T:OxyPlot.Conrec.RendererDelegate">
            <summary>
            Renderer delegate
            </summary>
            <param name="x1">
            Start point x-coordinate
            </param>
            <param name="y1">
            Start point y-coordinate
            </param>
            <param name="x2">
            End point x-coordinate
            </param>
            <param name="y2">
            End point y-coordinate
            </param>
            <param name="z">
            Contour level
            </param>
        </member>
        <member name="T:OxyPlot.DataPoint">
            <summary>
            Represents a point in the data coordinate system.
            </summary>
            <remarks>
            <see cref="T:OxyPlot.DataPoint"/>s are transformed to <see cref="T:OxyPlot.ScreenPoint"/>s.
            </remarks>
        </member>
        <member name="T:OxyPlot.IDataPoint">
            <summary>
            Defines a point.
            </summary>
        </member>
        <member name="P:OxyPlot.IDataPoint.X">
            <summary>
            Gets or sets the x-coordinate.
            </summary>
            <value>The x-coordinate.</value>
        </member>
        <member name="P:OxyPlot.IDataPoint.Y">
            <summary>
            Gets or sets the y-coordinate.
            </summary>
            <value>The y-coordinate.</value>
        </member>
        <member name="F:OxyPlot.DataPoint.Undefined">
            <summary>
            The undefined.
            </summary>
        </member>
        <member name="F:OxyPlot.DataPoint.x">
            <summary>
            The x-coordinate.
            </summary>
        </member>
        <member name="F:OxyPlot.DataPoint.y">
            <summary>
            The y-coordinate.
            </summary>
        </member>
        <member name="M:OxyPlot.DataPoint.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.DataPoint"/> struct.
            </summary>
            <param name="x">
            The x.
            </param>
            <param name="y">
            The y.
            </param>
        </member>
        <member name="M:OxyPlot.DataPoint.ToCode">
            <summary>
            Returns C# code that generates this instance.
            </summary>
            <returns>
            The to code.
            </returns>
        </member>
        <member name="M:OxyPlot.DataPoint.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:OxyPlot.DataPoint.X">
            <summary>
            Gets or sets the X.
            </summary>
            <value>
            The X.
            </value>
        </member>
        <member name="P:OxyPlot.DataPoint.Y">
            <summary>
            Gets or sets the Y.
            </summary>
            <value>
            The Y.
            </value>
        </member>
        <member name="T:OxyPlot.DoubleExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Double"/> type.
            </summary>
        </member>
        <member name="M:OxyPlot.DoubleExtensions.Squared(System.Double)">
            <summary>
            Squares the specified value.
            </summary>
            <param name="x">
            The value.
            </param>
            <returns>
            Squared value.
            </returns>
        </member>
        <member name="M:OxyPlot.DoubleExtensions.GetExponent(System.Double)">
            <summary>
            Exponent function.
            </summary>
            <param name="x">
            The value.
            </param>
            <returns>
            The exponent.
            </returns>
        </member>
        <member name="M:OxyPlot.DoubleExtensions.GetMantissa(System.Double)">
            <summary>
            Mantissa function.
            http://en.wikipedia.org/wiki/Mantissa
            </summary>
            <param name="x">
            The value.
            </param>
            <returns>
            The mantissa.
            </returns>
        </member>
        <member name="M:OxyPlot.DoubleExtensions.RemoveNoise2(System.Double)">
            <summary>
            Removes the floating point noise.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            A double without noise.
            </returns>
        </member>
        <member name="M:OxyPlot.DoubleExtensions.RemoveNoise(System.Double)">
            <summary>
            Removes the floating point noise.
            </summary>
            <param name="value">
            The value.
            </param>
            <param name="maxDigits">
            The maximum number of digits.
            </param>
            <returns>
            A double without noise.
            </returns>
        </member>
        <member name="M:OxyPlot.DoubleExtensions.RemoveNoiseFromDoubleMath(System.Double)">
            <summary>
            Removes the noise from double math.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            A double without noise.
            </returns>
        </member>
        <member name="M:OxyPlot.DoubleExtensions.IsZero(System.Double)">
            <summary>
            Determines whether the specified value is zero.
            </summary>
            <param name="value">The value.</param>
            <returns>
            <c>true</c> if the specified value is zero; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:OxyPlot.DoubleExtensions.ToUpperMultiple(System.Double,System.Double)">
            <summary>
            Calculates the nearest larger multiple of the specified value.
            </summary>
            <param name="value">
            The value.
            </param>
            <param name="step">
            The multiplier.
            </param>
            <returns>
            The multiple value.
            </returns>
        </member>
        <member name="M:OxyPlot.DoubleExtensions.ToLowerMultiple(System.Double,System.Double)">
            <summary>
            Calculates the nearest smaller multiple of the specified value.
            </summary>
            <param name="value">
            The value.
            </param>
            <param name="step">
            The multiplier.
            </param>
            <returns>
            The multiple value.
            </returns>
        </member>
        <member name="T:OxyPlot.FontWeights">
            <summary>
            Provides a set of static predefined font weight values.
            </summary>
        </member>
        <member name="F:OxyPlot.FontWeights.Bold">
            <summary>
            Specifies a bold font weight.
            </summary>
        </member>
        <member name="F:OxyPlot.FontWeights.Normal">
            <summary>
            Specifies a normal font weight.
            </summary>
        </member>
        <member name="T:OxyPlot.FractionHelper">
            <summary>
            Provides functionality to generate fraction strings from double values.
            </summary>
            <remarks>
            Examples: "3/4", "PI/2"
            </remarks>
        </member>
        <member name="M:OxyPlot.FractionHelper.ConvertToFractionString(System.Double)">
            <summary>
            Converts a double to a fraction string.
            </summary>
            <param name="value">
            The value.
            </param>
            <param name="unit">
            The unit.
            </param>
            <param name="unitSymbol">
            The unit symbol.
            </param>
            <param name="eps">
            The tolerance.
            </param>
            <param name="formatProvider">
            The format Provider.
            </param>
            <returns>
            The convert to fraction string.
            </returns>
        </member>
        <member name="M:OxyPlot.FractionHelper.gcd(System.Int32,System.Int32)">
            <summary>
            Finds the greates common divisor.
            </summary>
            <param name="a">
            The a.
            </param>
            <param name="b">
            The b.
            </param>
            <returns>
            The gcd.
            </returns>
        </member>
        <member name="M:OxyPlot.FractionHelper.GCF(System.Int32,System.Int32)">
            <summary>
            Finds the greatest common factor.
            </summary>
            <param name="x">
            The x.
            </param>
            <param name="y">
            The y.
            </param>
            <returns>
            The gcf.
            </returns>
        </member>
        <member name="T:OxyPlot.HorizontalAlignment">
            <summary>
            Specifies the horizontal alignment.
            </summary>
        </member>
        <member name="F:OxyPlot.HorizontalAlignment.Left">
            <summary>
            Aligned to the left.
            </summary>
        </member>
        <member name="F:OxyPlot.HorizontalAlignment.Center">
            <summary>
            Aligned in the center.
            </summary>
        </member>
        <member name="F:OxyPlot.HorizontalAlignment.Right">
            <summary>
            Aligned to the right.
            </summary>
        </member>
        <member name="T:OxyPlot.IDataPointProvider">
            <summary>
            Provides functionality to create data points.
            </summary>
        </member>
        <member name="M:OxyPlot.IDataPointProvider.GetDataPoint">
            <summary>
            Gets the data point.
            </summary>
            <returns>
            The data point.
            </returns>
        </member>
        <member name="T:OxyPlot.LineStyle">
            <summary>
            Specifies the style of a line.
            </summary>
        </member>
        <member name="F:OxyPlot.LineStyle.Solid">
            <summary>
            The solid line style.
            </summary>
        </member>
        <member name="F:OxyPlot.LineStyle.Dash">
            <summary>
            The dash line style.
            </summary>
        </member>
        <member name="F:OxyPlot.LineStyle.Dot">
            <summary>
            The dot line style.
            </summary>
        </member>
        <member name="F:OxyPlot.LineStyle.DashDot">
            <summary>
            The dash dot line style.
            </summary>
        </member>
        <member name="F:OxyPlot.LineStyle.DashDashDot">
            <summary>
            The dash dash dot line style.
            </summary>
        </member>
        <member name="F:OxyPlot.LineStyle.DashDotDot">
            <summary>
            The dash dot dot line style.
            </summary>
        </member>
        <member name="F:OxyPlot.LineStyle.DashDashDotDot">
            <summary>
            The dash dash dot dot line style.
            </summary>
        </member>
        <member name="F:OxyPlot.LineStyle.LongDash">
            <summary>
            The long dash line style.
            </summary>
        </member>
        <member name="F:OxyPlot.LineStyle.LongDashDot">
            <summary>
            The long dash dot line style.
            </summary>
        </member>
        <member name="F:OxyPlot.LineStyle.LongDashDotDot">
            <summary>
            The long dash dot dot line style.
            </summary>
        </member>
        <member name="F:OxyPlot.LineStyle.None">
            <summary>
            The hidden line style.
            </summary>
        </member>
        <member name="F:OxyPlot.LineStyle.Undefined">
            <summary>
            The undefined line style.
            </summary>
        </member>
        <member name="T:OxyPlot.LineStyleHelper">
            <summary>
            Provides functionality to convert from LineStyle to a stroke dash array.
            </summary>
        </member>
        <member name="M:OxyPlot.LineStyleHelper.GetDashArray(OxyPlot.LineStyle)">
            <summary>
            Gets the stroke dash array for a given <see cref="T:OxyPlot.LineStyle"/>.
            </summary>
            <param name="style">
            The line style.
            </param>
            <returns>
            A dash array.
            </returns>
        </member>
        <member name="T:OxyPlot.ListFiller`1">
            <summary>
                Provides functionality to fill a list by specified properties of another list.
            </summary>
            <remarks>
                This class uses reflection.
            </remarks>
            <typeparam name="T">
                The target list item type.
            </typeparam>
        </member>
        <member name="F:OxyPlot.ListFiller`1.properties">
            <summary>
                The properties.
            </summary>
        </member>
        <member name="M:OxyPlot.ListFiller`1.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:OxyPlot.ListFiller`1"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.ListFiller`1.Add(System.String,Alt.Action{`0,System.Object})">
            <summary>
                Adds a setter for the specified property.
            </summary>
            <param name="propertyName">
                Name of the property.
            </param>
            <param name="setter">
                The setter.
            </param>
        </member>
        <member name="M:OxyPlot.ListFiller`1.FillT(System.Collections.Generic.IList{`0},System.Collections.IEnumerable)">
            <summary>
                Fills the specified target list.
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:OxyPlot.ListFiller`1.Fill(System.Collections.IList,System.Collections.IEnumerable)">
            <summary>
                Fills the specified target list.
            </summary>
            <param name="target">
                The target.
            </param>
            <param name="source">
                The source list.
            </param>
        </member>
        <member name="T:OxyPlot.MarkerType">
            <summary>
            Specifies the marker type.
            </summary>
        </member>
        <member name="F:OxyPlot.MarkerType.None">
            <summary>
            Do not render markers.
            </summary>
        </member>
        <member name="F:OxyPlot.MarkerType.Circle">
            <summary>
            Render markers as circles.
            </summary>
        </member>
        <member name="F:OxyPlot.MarkerType.Square">
            <summary>
            Render markers as squares.
            </summary>
        </member>
        <member name="F:OxyPlot.MarkerType.Diamond">
            <summary>
            Render markers as diamonds.
            </summary>
        </member>
        <member name="F:OxyPlot.MarkerType.Triangle">
            <summary>
            Render markers as triangles.
            </summary>
        </member>
        <member name="F:OxyPlot.MarkerType.Cross">
            <summary>
            Render markers as crosses (note: this marker type requires the stroke color to be set).
            </summary>
            <remarks>
            This marker type requires the stroke color to be set.
            </remarks>
        </member>
        <member name="F:OxyPlot.MarkerType.Plus">
            <summary>
            Renders markers as plus signs (note: this marker type requires the stroke color to be set).
            </summary>
            <remarks>
            This marker type requires the stroke color to be set.
            </remarks>
        </member>
        <member name="F:OxyPlot.MarkerType.Star">
            <summary>
            Renders markers as stars (note: this marker type requires the stroke color to be set).
            </summary>
            <remarks>
            This marker type requires the stroke color to be set.
            </remarks>
        </member>
        <member name="F:OxyPlot.MarkerType.Custom">
            <summary>
            Render markers by a custom shape (defined by outline).
            </summary>
        </member>
        <member name="T:OxyPlot.OxyColor">
            <summary>
            Describes a color in terms of alpha, red, green, and blue channels.
            </summary>
        </member>
        <member name="M:OxyPlot.OxyColor.Parse(System.String)">
            <summary>
            Parse a string.
            </summary>
            <param name="value">
            The string in the format "#FFFFFF00" or "255,200,180,50".
            </param>
            <returns>
            The OxyColor.
            </returns>
            <exception cref="T:System.FormatException">
            Invalid format.
            </exception>
        </member>
        <member name="M:OxyPlot.OxyColor.ColorDifference(OxyPlot.OxyColor,OxyPlot.OxyColor)">
            <summary>
            Calculates the difference between two <see cref="T:OxyPlot.OxyColor"/>s
            </summary>
            <param name="c1">
            The first color.
            </param>
            <param name="c2">
            The second color.
            </param>
            <returns>
            L2-norm in RGBA space
            </returns>
        </member>
        <member name="M:OxyPlot.OxyColor.FromUInt32(System.UInt32)">
            <summary>
            Convert an <see cref="T:System.UInt32"/> to a <see cref="T:OxyPlot.OxyColor"/>.
            </summary>
            <param name="color">
            The unsigned integer color value.
            </param>
            <returns>
            The <see cref="T:OxyPlot.OxyColor"/>.
            </returns>
        </member>
        <member name="M:OxyPlot.OxyColor.FromHsv(System.Double[])">
            <summary>
            Creates a OxyColor from the specified HSV array.
            </summary>
            <param name="hsv">
            The HSV value array.
            </param>
            <returns>
            A OxyColor.
            </returns>
        </member>
        <member name="M:OxyPlot.OxyColor.FromHsv(System.Double,System.Double,System.Double)">
            <summary>
            Convert from HSV to <see cref="T:OxyPlot.OxyColor"/>
            http://en.wikipedia.org/wiki/HSL_Color_space
            </summary>
            <param name="hue">
            The hue value [0,1]
            </param>
            <param name="sat">
            The saturation value [0,1]
            </param>
            <param name="val">
            The intensity value [0,1]
            </param>
            <returns>
            The <see cref="T:OxyPlot.OxyColor"/>.
            </returns>
        </member>
        <member name="M:OxyPlot.OxyColor.HueDifference(OxyPlot.OxyColor,OxyPlot.OxyColor)">
            <summary>
            Calculate the difference in hue between two <see cref="T:OxyPlot.OxyColor"/>s.
            </summary>
            <param name="c1">
            The first color.
            </param>
            <param name="c2">
            The second color.
            </param>
            <returns>
            The hue difference.
            </returns>
        </member>
        <member name="M:OxyPlot.OxyColor.FromAColor(System.Byte,OxyPlot.OxyColor)">
            <summary>
            Creates a color defined by an alpha value and another color.
            </summary>
            <param name="a">
            Alpha value.
            </param>
            <param name="color">
            The original color.
            </param>
            <returns>
            A color.
            </returns>
        </member>
        <member name="M:OxyPlot.OxyColor.FromArgb(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a color from the specified ARGB values.
            </summary>
            <param name="a">
            The alpha value.
            </param>
            <param name="r">
            The red value.
            </param>
            <param name="g">
            The green value.
            </param>
            <param name="b">
            The blue value.
            </param>
            <returns>
            A color.
            </returns>
        </member>
        <member name="M:OxyPlot.OxyColor.FromRgb(System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a new <see cref="T:OxyPlot.OxyColor"/> structure from the specified RGB values.
            </summary>
            <param name="r">
            The red value.
            </param>
            <param name="g">
            The green value.
            </param>
            <param name="b">
            The blue value.
            </param>
            <returns>
            A <see cref="T:OxyPlot.OxyColor"/> structure with the specified values and an alpha channel value of 1.
            </returns>
        </member>
        <member name="M:OxyPlot.OxyColor.Interpolate(OxyPlot.OxyColor,OxyPlot.OxyColor,System.Double)">
            <summary>
            Interpolates the specified colors.
            </summary>
            <param name="color1">
            The color1.
            </param>
            <param name="color2">
            The color2.
            </param>
            <param name="t">
            The t.
            </param>
            <returns>
            The interpolated color
            </returns>
        </member>
        <member name="M:OxyPlot.OxyColor.ToByteString">
            <summary>
            Convert OxyColor to double string.
            </summary>
            <returns>
            A OxyColor string, e.g. "255,200,180,50".
            </returns>
        </member>
        <member name="M:OxyPlot.OxyColor.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to compare with this instance.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c> .
            </returns>
        </member>
        <member name="M:OxyPlot.OxyColor.Equals(OxyPlot.OxyColor)">
            <summary>
            Determines whether the specified <see cref="T:OxyPlot.OxyColor"/> is equal to this instance.
            </summary>
            <param name="other">
            The <see cref="T:OxyPlot.OxyColor"/> to compare with this instance.
            </param>
            <returns>
            <c>true</c> if the specified <see cref="T:OxyPlot.OxyColor"/> is equal to this instance; otherwise, <c>false</c> .
            </returns>
        </member>
        <member name="M:OxyPlot.OxyColor.GetColorName">
            <summary>
            Gets the color name.
            </summary>
            <returns>
            The color name.
            </returns>
        </member>
        <member name="M:OxyPlot.OxyColor.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:OxyPlot.OxyColor.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:OxyPlot.OxyColor.ChangeAlpha(System.Byte)">
            <summary>
            Changes the opacity value.
            </summary>
            <param name="newAlpha">
            The new alpha.
            </param>
            <returns>
            The new color.
            </returns>
        </member>
        <member name="M:OxyPlot.OxyColor.Complementary">
            <summary>
            Calculates the complementary OxyColor.
            </summary>
            <returns>
            The complementary OxyColor.
            </returns>
        </member>
        <member name="M:OxyPlot.OxyColor.ToHsv">
            <summary>
            Converts from a <see cref="T:OxyPlot.OxyColor"/> to HSV values (double)
            </summary>
            <returns>
            Array of [Hue,Saturation,Value] in the range [0,1]
            </returns>
        </member>
        <member name="M:OxyPlot.OxyColor.ChangeIntensity(System.Double)">
            <summary>
            Changes the intensity.
            </summary>
            <param name="factor">
            The factor.
            </param>
            <returns>
            The new OxyColor.
            </returns>
        </member>
        <member name="M:OxyPlot.OxyColor.ToUint">
            <summary>
            Converts to an unsigned integer.
            </summary>
            <returns>
            The <see cref="T:System.UInt32"/>.
            </returns>
        </member>
        <member name="M:OxyPlot.OxyColor.ToCode">
            <summary>
            Returns C# code that generates this instance.
            </summary>
            <returns>
            The to code.
            </returns>
        </member>
        <member name="P:OxyPlot.OxyColor.A">
            <summary>
            Gets or sets the alpha value.
            </summary>
            <value> The alpha value. </value>
        </member>
        <member name="P:OxyPlot.OxyColor.B">
            <summary>
            Gets or sets the blue value.
            </summary>
            <value> The blue value. </value>
        </member>
        <member name="P:OxyPlot.OxyColor.G">
            <summary>
            Gets or sets the green value.
            </summary>
            <value> The green value. </value>
        </member>
        <member name="P:OxyPlot.OxyColor.R">
            <summary>
            Gets or sets the red value.
            </summary>
            <value> The red value. </value>
        </member>
        <member name="T:OxyPlot.OxyColors">
            <summary>
            Implements a set of predefined colors.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.AliceBlue">
            <summary>
            The alice blue.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.AntiqueWhite">
            <summary>
            The antique white.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Aqua">
            <summary>
            The aqua.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Aquamarine">
            <summary>
            The aquamarine.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Azure">
            <summary>
            The azure.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Beige">
            <summary>
            The beige.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Bisque">
            <summary>
            The bisque.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Black">
            <summary>
            The black.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.BlanchedAlmond">
            <summary>
            The blanched almond.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Blue">
            <summary>
            The blue.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.BlueViolet">
            <summary>
            The blue violet.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Brown">
            <summary>
            The brown.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.BurlyWood">
            <summary>
            The burly wood.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.CadetBlue">
            <summary>
            The cadet blue.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Chartreuse">
            <summary>
            The chartreuse.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Chocolate">
            <summary>
            The chocolate.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Coral">
            <summary>
            The coral.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.CornflowerBlue">
            <summary>
            The cornflower blue.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Cornsilk">
            <summary>
            The cornsilk.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Crimson">
            <summary>
            The crimson.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Cyan">
            <summary>
            The cyan.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.DarkBlue">
            <summary>
            The dark blue.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.DarkCyan">
            <summary>
            The dark cyan.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.DarkGoldenrod">
            <summary>
            The dark goldenrod.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.DarkGray">
            <summary>
            The dark gray.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.DarkGreen">
            <summary>
            The dark green.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.DarkKhaki">
            <summary>
            The dark khaki.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.DarkMagenta">
            <summary>
            The dark magenta.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.DarkOliveGreen">
            <summary>
            The dark olive green.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.DarkOrange">
            <summary>
            The dark orange.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.DarkOrchid">
            <summary>
            The dark orchid.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.DarkRed">
            <summary>
            The dark red.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.DarkSalmon">
            <summary>
            The dark salmon.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.DarkSeaGreen">
            <summary>
            The dark sea green.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.DarkSlateBlue">
            <summary>
            The dark slate blue.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.DarkSlateGray">
            <summary>
            The dark slate gray.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.DarkTurquoise">
            <summary>
            The dark turquoise.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.DarkViolet">
            <summary>
            The dark violet.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.DeepPink">
            <summary>
            The deep pink.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.DeepSkyBlue">
            <summary>
            The deep sky blue.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.DimGray">
            <summary>
            The dim gray.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.DodgerBlue">
            <summary>
            The dodger blue.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Firebrick">
            <summary>
            The firebrick.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.FloralWhite">
            <summary>
            The floral white.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.ForestGreen">
            <summary>
            The forest green.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Fuchsia">
            <summary>
            The fuchsia.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Gainsboro">
            <summary>
            The gainsboro.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.GhostWhite">
            <summary>
            The ghost white.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Gold">
            <summary>
            The gold.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Goldenrod">
            <summary>
            The goldenrod.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Gray">
            <summary>
            The gray.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Green">
            <summary>
            The green.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.GreenYellow">
            <summary>
            The green yellow.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Honeydew">
            <summary>
            The honeydew.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.HotPink">
            <summary>
            The hot pink.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.IndianRed">
            <summary>
            The indian red.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Indigo">
            <summary>
            The indigo.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Ivory">
            <summary>
            The ivory.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Khaki">
            <summary>
            The khaki.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Lavender">
            <summary>
            The lavender.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.LavenderBlush">
            <summary>
            The lavender blush.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.LawnGreen">
            <summary>
            The lawn green.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.LemonChiffon">
            <summary>
            The lemon chiffon.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.LightBlue">
            <summary>
            The light blue.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.LightCoral">
            <summary>
            The light coral.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.LightCyan">
            <summary>
            The light cyan.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.LightGoldenrodYellow">
            <summary>
            The light goldenrod yellow.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.LightGray">
            <summary>
            The light gray.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.LightGreen">
            <summary>
            The light green.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.LightPink">
            <summary>
            The light pink.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.LightSalmon">
            <summary>
            The light salmon.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.LightSeaGreen">
            <summary>
            The light sea green.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.LightSkyBlue">
            <summary>
            The light sky blue.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.LightSlateGray">
            <summary>
            The light slate gray.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.LightSteelBlue">
            <summary>
            The light steel blue.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.LightYellow">
            <summary>
            The light yellow.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Lime">
            <summary>
            The lime.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.LimeGreen">
            <summary>
            The lime green.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Linen">
            <summary>
            The linen.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Magenta">
            <summary>
            The magenta.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Maroon">
            <summary>
            The maroon.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.MediumAquamarine">
            <summary>
            The medium aquamarine.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.MediumBlue">
            <summary>
            The medium blue.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.MediumOrchid">
            <summary>
            The medium orchid.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.MediumPurple">
            <summary>
            The medium purple.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.MediumSeaGreen">
            <summary>
            The medium sea green.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.MediumSlateBlue">
            <summary>
            The medium slate blue.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.MediumSpringGreen">
            <summary>
            The medium spring green.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.MediumTurquoise">
            <summary>
            The medium turquoise.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.MediumVioletRed">
            <summary>
            The medium violet red.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.MidnightBlue">
            <summary>
            The midnight blue.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.MintCream">
            <summary>
            The mint cream.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.MistyRose">
            <summary>
            The misty rose.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Moccasin">
            <summary>
            The moccasin.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.NavajoWhite">
            <summary>
            The navajo white.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Navy">
            <summary>
            The navy.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.OldLace">
            <summary>
            The old lace.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Olive">
            <summary>
            The olive.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.OliveDrab">
            <summary>
            The olive drab.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Orange">
            <summary>
            The orange.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.OrangeRed">
            <summary>
            The orange red.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Orchid">
            <summary>
            The orchid.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.PaleGoldenrod">
            <summary>
            The pale goldenrod.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.PaleGreen">
            <summary>
            The pale green.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.PaleTurquoise">
            <summary>
            The pale turquoise.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.PaleVioletRed">
            <summary>
            The pale violet red.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.PapayaWhip">
            <summary>
            The papaya whip.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.PeachPuff">
            <summary>
            The peach puff.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Peru">
            <summary>
            The peru.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Pink">
            <summary>
            The pink.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Plum">
            <summary>
            The plum.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.PowderBlue">
            <summary>
            The powder blue.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Purple">
            <summary>
            The purple.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Red">
            <summary>
            The red.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.RosyBrown">
            <summary>
            The rosy brown.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.RoyalBlue">
            <summary>
            The royal blue.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.SaddleBrown">
            <summary>
            The saddle brown.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Salmon">
            <summary>
            The salmon.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.SandyBrown">
            <summary>
            The sandy brown.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.SeaGreen">
            <summary>
            The sea green.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.SeaShell">
            <summary>
            The sea shell.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Sienna">
            <summary>
            The sienna.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Silver">
            <summary>
            The silver.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.SkyBlue">
            <summary>
            The sky blue.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.SlateBlue">
            <summary>
            The slate blue.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.SlateGray">
            <summary>
            The slate gray.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Snow">
            <summary>
            The snow.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.SpringGreen">
            <summary>
            The spring green.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.SteelBlue">
            <summary>
            The steel blue.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Tan">
            <summary>
            The tan.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Teal">
            <summary>
            The teal.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Thistle">
            <summary>
            The thistle.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Tomato">
            <summary>
            The tomato.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Transparent">
            <summary>
            The transparent.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Turquoise">
            <summary>
            The turquoise.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Violet">
            <summary>
            The violet.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Wheat">
            <summary>
            The wheat.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.White">
            <summary>
            The white.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.WhiteSmoke">
            <summary>
            The white smoke.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.Yellow">
            <summary>
            The yellow.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyColors.YellowGreen">
            <summary>
            The yellow green.
            </summary>
        </member>
        <member name="T:OxyPlot.OxyImage">
            <summary>
            Represents an image, encoded as DIB, JPEG or PNG.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyImage.data">
            <summary>
            The image data.
            </summary>
        </member>
        <member name="M:OxyPlot.OxyImage.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.OxyImage"/> class from the specified stream.
            </summary>
            <param name="s">
            A stream that provides the image data.
            </param>
        </member>
        <member name="M:OxyPlot.OxyImage.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.OxyImage"/> class from a byte array.
            </summary>
            <param name="bytes">
            The image bytes.
            </param>
        </member>
        <member name="M:OxyPlot.OxyImage.FromArgbX(OxyPlot.OxyColor[0:,0:])">
            <summary>
            Creates an <see cref="T:OxyPlot.OxyImage"/> from the specified <see cref="T:OxyPlot.OxyColor"/> array.
            </summary>
            <param name="data">
            The pixel data, indexed as [row,column] (from bottom-left).
            </param>
            <param name="dpi">
            The resolution.
            </param>
            <returns>
            An <see cref="T:OxyPlot.OxyImage"/>.
            </returns>
            <remarks>
            This method is creating a simple BitmapInfoHeader.
            </remarks>
        </member>
        <member name="M:OxyPlot.OxyImage.FromArgb(OxyPlot.OxyColor[0:,0:])">
            <summary>
            Creates an <see cref="T:OxyPlot.OxyImage"/> from the specified <see cref="T:OxyPlot.OxyColor"/> array.
            </summary>
            <param name="data">
            The pixel data, indexed as [row,column] (from bottom-left).
            </param>
            <param name="dpi">
            The resolution.
            </param>
            <returns>
            An <see cref="T:OxyPlot.OxyImage"/>.
            </returns>
            <remarks>
            This method is creating a Bitmap V4 info header, including channel bit masks and color space information.
            </remarks>
        </member>
        <member name="M:OxyPlot.OxyImage.FromArgb(System.Int32,System.Int32,System.Byte[])">
            <summary>
            Creates an <see cref="T:OxyPlot.OxyImage"/> from the specified pixel data.
            </summary>
            <param name="width">
            The width.
            </param>
            <param name="height">
            The height.
            </param>
            <param name="pixelData">
            The pixel data (BGRA from bottom-left).
            </param>
            <param name="dpi">
            The resolution.
            </param>
            <returns>
            An <see cref="T:OxyPlot.OxyImage"/>.
            </returns>
            <remarks>
            This method is creating a Bitmap V4 info header, including channel bit masks and color space information.
            </remarks>
        </member>
        <member name="M:OxyPlot.OxyImage.FromIndexed8(System.Byte[0:,0:],OxyPlot.OxyColor[])">
            <summary>
            Creates an <see cref="T:OxyPlot.OxyImage"/> from the specified 8-bit indexed pixel data.
            </summary>
            <param name="indexedData">
            The indexed pixel data (from bottom-left).
            </param>
            <param name="palette">
            The palette.
            </param>
            <param name="dpi">
            The resolution.
            </param>
            <returns>
            An <see cref="T:OxyPlot.OxyImage"/>.
            </returns>
        </member>
        <member name="M:OxyPlot.OxyImage.FromIndexed8(System.Int32,System.Int32,System.Byte[],OxyPlot.OxyColor[])">
            <summary>
            Creates an <see cref="T:OxyPlot.OxyImage"/> from the specified 8-bit indexed pixel data.
            </summary>
            <param name="width">
            The width.
            </param>
            <param name="height">
            The height.
            </param>
            <param name="indexedPixelData">
            The indexed pixel data (from bottom-left).
            </param>
            <param name="palette">
            The palette.
            </param>
            <param name="dpi">
            The resolution.
            </param>
            <returns>
            An <see cref="T:OxyPlot.OxyImage"/>.
            </returns>
        </member>
        <member name="M:OxyPlot.OxyImage.FromArgbX(System.Int32,System.Int32,System.Byte[])">
            <summary>
            Creates an <see cref="T:OxyPlot.OxyImage"/> from the specified pixel data.
            </summary>
            <param name="width">
            The width.
            </param>
            <param name="height">
            The height.
            </param>
            <param name="pixelData">
            The pixel data (BGRA from bottom-left).
            </param>
            <param name="dpi">
            The resolution.
            </param>
            <returns>
            An <see cref="T:OxyPlot.OxyImage"/>.
            </returns>
            <remarks>
            This method is creating a simple BitmapInfoHeader.
            </remarks>
        </member>
        <member name="M:OxyPlot.OxyImage.GetData">
            <summary>
            Gets the image data.
            </summary>
            <returns>
            The image data as a byte array.
            </returns>
        </member>
        <member name="M:OxyPlot.OxyImage.WriteBitmapInfoHeader(System.IO.BinaryWriter,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes the bitmap info header.
            </summary>
            <param name="w">
            The writer.
            </param>
            <param name="width">
            The width.
            </param>
            <param name="height">
            The height.
            </param>
            <param name="bitsPerPixel">
            The number of bits per pixel.
            </param>
            <param name="length">
            The length of the pixel data.
            </param>
            <param name="dpi">
            The dpi.
            </param>
            <param name="colors">
            The number of colors.
            </param>
        </member>
        <member name="M:OxyPlot.OxyImage.WriteBitmapV4Header(System.IO.BinaryWriter,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes the bitmap V4 header.
            </summary>
            <param name="w">
            The writer.
            </param>
            <param name="width">
            The width.
            </param>
            <param name="height">
            The height.
            </param>
            <param name="bitsPerPixel">
            The number of bits per pixel.
            </param>
            <param name="length">
            The length.
            </param>
            <param name="dpi">
            The resolution.
            </param>
            <param name="colors">
            The number of colors.
            </param>
        </member>
        <member name="M:OxyPlot.OxyImage.PngFromArgb(OxyPlot.OxyColor[0:,0:])">
            <summary>
            Creates a PNG image from the specified pixels.
            </summary>
            <param name="pixels">The pixels (bottom line first).</param>
            <returns>An OxyImage.</returns>
        </member>
        <member name="T:OxyPlot.OxyPalette">
            <summary>
            Represents a palette of colors.
            </summary>
        </member>
        <member name="M:OxyPlot.OxyPalette.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.OxyPalette"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.OxyPalette.#ctor(OxyPlot.OxyColor[])">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.OxyPalette"/> class.
            </summary>
            <param name="colors">
            The colors.
            </param>
        </member>
        <member name="M:OxyPlot.OxyPalette.#ctor(System.Collections.Generic.IEnumerable{OxyPlot.OxyColor})">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.OxyPalette"/> class.
            </summary>
            <param name="colors">
            The colors.
            </param>
        </member>
        <member name="M:OxyPlot.OxyPalette.Interpolate(System.Int32,OxyPlot.OxyColor[])">
            <summary>
            Interpolates the specified colors to a palette of the specified size.
            </summary>
            <param name="paletteSize">
            The size of the palette.
            </param>
            <param name="colors">
            The colors.
            </param>
            <returns>
            A palette.
            </returns>
        </member>
        <member name="P:OxyPlot.OxyPalette.Colors">
            <summary>
            Gets or sets the colors.
            </summary>
            <value> The colors. </value>
        </member>
        <member name="T:OxyPlot.OxyPalettes">
            <summary>
            Provides predefined palettes.
            </summary>
        </member>
        <member name="M:OxyPlot.OxyPalettes.#cctor">
            <summary>
            Initializes static members of the <see cref="T:OxyPlot.OxyPalettes"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.OxyPalettes.BlackWhiteRed(System.Int32)">
            <summary>
            Creates a black/white/red palette with the specified number of colors.
            </summary>
            <param name="numberOfColors">
            The number of colors to create for the palette.
            </param>
            <returns>
            A palette.
            </returns>
        </member>
        <member name="M:OxyPlot.OxyPalettes.BlueWhiteRed(System.Int32)">
            <summary>
            Creates a blue/white/red palette with the specified number of colors.
            </summary>
            <param name="numberOfColors">
            The number of colors to create for the palette.
            </param>
            <returns>
            A palette.
            </returns>
        </member>
        <member name="M:OxyPlot.OxyPalettes.Cool(System.Int32)">
            <summary>
            Creates a 'cool' palette with the specified number of colors.
            </summary>
            <param name="numberOfColors">
            The number of colors to create for the palette.
            </param>
            <returns>
            A palette.
            </returns>
        </member>
        <member name="M:OxyPlot.OxyPalettes.Gray(System.Int32)">
            <summary>
            Creates a gray-scale palette with the specified number of colors.
            </summary>
            <param name="numberOfColors">
            The number of colors to create for the palette.
            </param>
            <returns>
            A palette.
            </returns>
        </member>
        <member name="M:OxyPlot.OxyPalettes.Hot(System.Int32)">
            <summary>
            Creates a 'hot' palette with the specified number of colors.
            </summary>
            <param name="numberOfColors">
            The number of colors to create for the palette.
            </param>
            <returns>
            A palette.
            </returns>
        </member>
        <member name="M:OxyPlot.OxyPalettes.Hue(System.Int32)">
            <summary>
            Creates a palette from the hue component of the HSV color model.
            </summary>
            <param name="numberOfColors">
            The number of colors.
            </param>
            <returns>
            The palette.
            </returns>
            <remarks>
            This palette is particularly appropriate for displaying periodic functions.
            </remarks>
        </member>
        <member name="M:OxyPlot.OxyPalettes.Jet(System.Int32)">
            <summary>
            Creates a 'jet' palette with the specified number of colors.
            </summary>
            <param name="numberOfColors">
            The number of colors to create for the palette.
            </param>
            <returns>
            A palette.
            </returns>
            <remarks>
            See http://www.mathworks.se/help/techdoc/ref/colormap.html.
            </remarks>
        </member>
        <member name="M:OxyPlot.OxyPalettes.Rainbow(System.Int32)">
            <summary>
            Creates a rainbow palette with the specified number of colors.
            </summary>
            <param name="numberOfColors">
            The number of colors to create for the palette.
            </param>
            <returns>
            A palette.
            </returns>
        </member>
        <member name="P:OxyPlot.OxyPalettes.BlueWhiteRed31">
            <summary>
            Gets the blue white red (31) palette.
            </summary>
        </member>
        <member name="P:OxyPlot.OxyPalettes.Hot64">
            <summary>
            Gets the hot (64) palette.
            </summary>
        </member>
        <member name="P:OxyPlot.OxyPalettes.Hue64">
            <summary>
            Gets the hue64 palette.
            </summary>
        </member>
        <member name="T:OxyPlot.OxyPen">
            <summary>
            Describes a pen in terms of color, thickness, line style and line join type.
            </summary>
        </member>
        <member name="M:OxyPlot.OxyPen.#ctor(OxyPlot.OxyColor)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.OxyPen"/> class.
            </summary>
            <param name="color">
            The color.
            </param>
            <param name="thickness">
            The thickness.
            </param>
            <param name="lineStyle">
            The line style.
            </param>
            <param name="lineJoin">
            The line join.
            </param>
        </member>
        <member name="M:OxyPlot.OxyPen.Create(OxyPlot.OxyColor,System.Double)">
            <summary>
            Creates the specified pen.
            </summary>
            <param name="color">The color.</param>
            <param name="thickness">The thickness.</param>
            <param name="lineStyle">The line style.</param>
            <param name="lineJoin">The line join.</param>
            <returns>A pen.</returns>
        </member>
        <member name="M:OxyPlot.OxyPen.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="P:OxyPlot.OxyPen.Color">
            <summary>
            Gets or sets the color.
            </summary>
            <value>The color.</value>
        </member>
        <member name="P:OxyPlot.OxyPen.DashArray">
            <summary>
            Gets or sets the dash array.
            </summary>
            <value>The dash array.</value>
        </member>
        <member name="P:OxyPlot.OxyPen.LineJoin">
            <summary>
            Gets or sets the line join.
            </summary>
            <value>The line join.</value>
        </member>
        <member name="P:OxyPlot.OxyPen.LineStyle">
            <summary>
            Gets or sets the line style.
            </summary>
            <value>The line style.</value>
        </member>
        <member name="P:OxyPlot.OxyPen.Thickness">
            <summary>
            Gets or sets the thickness.
            </summary>
            <value>The thickness.</value>
        </member>
        <member name="T:OxyPlot.OxyPenLineJoin">
            <summary>
            Specifies how to join line segments.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyPenLineJoin.Miter">
            <summary>
            Line joins use regular angular vertices.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyPenLineJoin.Round">
            <summary>
            Line joins use rounded vertices.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyPenLineJoin.Bevel">
            <summary>
            Line joins use beveled vertices.
            </summary>
        </member>
        <member name="T:OxyPlot.OxyRect">
            <summary>
            Describes the width, height, and point origin of a rectangle.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyRect.height">
            <summary>
            The height of the rectangle.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyRect.left">
            <summary>
            The x-coordinate location of the left side of the rectangle.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyRect.top">
            <summary>
            The y-coordinate location of the top side of the rectangle.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyRect.width">
            <summary>
            The width of the rectangle.
            </summary>
        </member>
        <member name="M:OxyPlot.OxyRect.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.OxyRect"/> structure that has the specified x-coordinate, y-coordinate, width, and height.
            </summary>
            <param name="left">
            The x-coordinate location of the left side of the rectangle.
            </param>
            <param name="top">
            The y-coordinate location of the top side of the rectangle.
            </param>
            <param name="width">
            The width of the rectangle.
            </param>
            <param name="height">
            The height of the rectangle.
            </param>
        </member>
        <member name="M:OxyPlot.OxyRect.Create(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a rectangle from the specified corner coordinates.
            </summary>
            <param name="x0">
            The x0.
            </param>
            <param name="y0">
            The y0.
            </param>
            <param name="x1">
            The x1.
            </param>
            <param name="y1">
            The y1.
            </param>
            <returns>
            A rectangle.
            </returns>
        </member>
        <member name="M:OxyPlot.OxyRect.Create(OxyPlot.ScreenPoint,OxyPlot.ScreenPoint)">
            <summary>
            Creates a rectangle from the specified corner coordinates.
            </summary>
            <param name="p0">The first corner.</param>
            <param name="p1">The second corner.</param>
            <returns>A rectangle.</returns>
        </member>
        <member name="M:OxyPlot.OxyRect.Contains(System.Double,System.Double)">
            <summary>
            Determines whether the specified point is inside the rectangle.
            </summary>
            <param name="x">
            The x coordinate.
            </param>
            <param name="y">
            The y coordinate.
            </param>
            <returns>
            <c>true</c> if the rectangle contains the specified point; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:OxyPlot.OxyRect.Contains(OxyPlot.ScreenPoint)">
            <summary>
            Determines whether the specified point is inside the rectangle.
            </summary>
            <param name="p">The point.</param>
            <returns>
            <c>true</c> if the rectangle contains the specified point; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:OxyPlot.OxyRect.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:OxyPlot.OxyRect.Bottom">
            <summary>
            Gets or sets the y-axis value of the bottom of the rectangle.
            </summary>
            <value>
            The bottom.
            </value>
        </member>
        <member name="P:OxyPlot.OxyRect.Height">
            <summary>
            Gets or sets the height of the rectangle.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:OxyPlot.OxyRect.Left">
            <summary>
            Gets or sets the x-axis value of the left side of the rectangle.
            </summary>
            <value>
            The left.
            </value>
        </member>
        <member name="P:OxyPlot.OxyRect.Right">
            <summary>
            Gets or sets the x-axis value of the right side of the rectangle.
            </summary>
            <value>
            The right.
            </value>
        </member>
        <member name="P:OxyPlot.OxyRect.Top">
            <summary>
            Gets or sets the y-axis position of the top of the rectangle.
            </summary>
            <value>
            The top.
            </value>
        </member>
        <member name="P:OxyPlot.OxyRect.Width">
            <summary>
            Gets or sets the width of the rectangle.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:OxyPlot.OxyRect.Center">
            <summary>
            Gets the center point of the rectangle.
            </summary>
            <value>The center.</value>
        </member>
        <member name="T:OxyPlot.OxySize">
            <summary>
            Implements a structure that is used to describe the size of an object.
            </summary>
        </member>
        <member name="F:OxyPlot.OxySize.Empty">
            <summary>
            Empty Size.
            </summary>
        </member>
        <member name="M:OxyPlot.OxySize.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.OxySize"/> struct.
            </summary>
            <param name="width">
            The width.
            </param>
            <param name="height">
            The height.
            </param>
        </member>
        <member name="M:OxyPlot.OxySize.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:OxyPlot.OxySize.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:OxyPlot.OxySize.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="T:OxyPlot.OxyThickness">
            <summary>
            Describes the thickness of a frame around a rectangle. Four <see cref="T:System.Double"/> values describe the left, top, right, and bottom sides of the rectangle, respectively.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyThickness.bottom">
            <summary>
            The bottom.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyThickness.left">
            <summary>
            The left.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyThickness.right">
            <summary>
            The right.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyThickness.top">
            <summary>
            The top.
            </summary>
        </member>
        <member name="M:OxyPlot.OxyThickness.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.OxyThickness"/> struct.
            </summary>
            <param name="thickness">
            The thickness.
            </param>
        </member>
        <member name="M:OxyPlot.OxyThickness.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.OxyThickness"/> struct.
            </summary>
            <param name="left">
            The left.
            </param>
            <param name="top">
            The top.
            </param>
            <param name="right">
            The right.
            </param>
            <param name="bottom">
            The bottom.
            </param>
        </member>
        <member name="M:OxyPlot.OxyThickness.ToCode">
            <summary>
            Returns C# code that generates this instance.
            </summary>
            <returns>
            The to code.
            </returns>
        </member>
        <member name="M:OxyPlot.OxyThickness.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:OxyPlot.OxyThickness.Bottom">
            <summary>
            Gets or sets the bottom thickness.
            </summary>
            <value>
            The bottom thickness.
            </value>
        </member>
        <member name="P:OxyPlot.OxyThickness.Height">
            <summary>
            Gets the height.
            </summary>
        </member>
        <member name="P:OxyPlot.OxyThickness.Left">
            <summary>
            Gets or sets the left thickness.
            </summary>
            <value>
            The left thickness.
            </value>
        </member>
        <member name="P:OxyPlot.OxyThickness.Right">
            <summary>
            Gets or sets the right thickness.
            </summary>
            <value>
            The right thickness.
            </value>
        </member>
        <member name="P:OxyPlot.OxyThickness.Top">
            <summary>
            Gets or sets the top thickness.
            </summary>
            <value>
            The top thickness.
            </value>
        </member>
        <member name="P:OxyPlot.OxyThickness.Width">
            <summary>
            Gets the width.
            </summary>
        </member>
        <member name="T:OxyPlot.PlotLength">
            <summary>
            Represents lengths in the plot. 
            </summary>
        </member>
        <member name="F:OxyPlot.PlotLength.unit">
            <summary>
            The unit type
            </summary>
        </member>
        <member name="F:OxyPlot.PlotLength.value">
            <summary>
            The value
            </summary>
        </member>
        <member name="M:OxyPlot.PlotLength.#ctor(System.Double,OxyPlot.PlotLengthUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.PlotLength"/> struct.
            </summary>
            <param name="value">
            The value.
            </param>
            <param name="unit">
            The unit.
            </param>
        </member>
        <member name="P:OxyPlot.PlotLength.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:OxyPlot.PlotLength.Unit">
            <summary>
            Gets the type of the unit.
            </summary>
            <value>
            The type of the unit.
            </value>
        </member>
        <member name="T:OxyPlot.PlotLengthUnit">
            <summary>
            Describes the kind of value that a <see cref="T:OxyPlot.PlotLength"/> object is holding.
            </summary>
        </member>
        <member name="F:OxyPlot.PlotLengthUnit.Data">
            <summary>
            The value is in data space (transformed by x/y axis)
            </summary>
        </member>
        <member name="F:OxyPlot.PlotLengthUnit.ScreenUnits">
            <summary>
            The value is in screen units
            </summary>
        </member>
        <member name="F:OxyPlot.PlotLengthUnit.RelativeToViewport">
            <summary>
            The value is relative to the plot viewport (0-1)
            </summary>
        </member>
        <member name="F:OxyPlot.PlotLengthUnit.RelativeToPlotArea">
            <summary>
            The value is relative to the plot area (0-1)
            </summary>
        </member>
        <member name="T:OxyPlot.PngEncoder">
            <summary>
            Provides encoding of uncompressed png images.
            </summary>
        </member>
        <member name="F:OxyPlot.PngEncoder.CrcTable">
            <summary>
            The CRC table
            </summary>
        </member>
        <member name="M:OxyPlot.PngEncoder.#cctor">
            <summary>
            Initializes static members of the <see cref="T:OxyPlot.PngEncoder"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.PngEncoder.Encode(OxyPlot.OxyColor[0:,0:])">
            <summary>
            Encodes the specified image data to png.
            </summary>
            <param name="pixels">
            The pixel data (bottom line first).
            </param>
            <param name="dpi">
            The image resolution in dots per inch.
            </param>
            <returns>
            The png image data.
            </returns>
        </member>
        <member name="M:OxyPlot.PngEncoder.Adler32(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Calculates the Adler-32 check sum.
            </summary>
            <param name="data">
            The data.
            </param>
            <returns>
            The check sum.
            </returns>
        </member>
        <member name="M:OxyPlot.PngEncoder.CreateHeaderData(System.Int32,System.Int32)">
            <summary>
            Creates the header data.
            </summary>
            <param name="width">
            The width.
            </param>
            <param name="height">
            The height.
            </param>
            <returns>
            The header.
            </returns>
        </member>
        <member name="M:OxyPlot.PngEncoder.CreatePhysicalDimensionsData(System.Int32,System.Int32)">
            <summary>
            Creates the physical dimensions data.
            </summary>
            <param name="dpix">
            The horizontal resolution.
            </param>
            <param name="dpiy">
            The vertical resolution.
            </param>
            <returns>
            The data.
            </returns>
        </member>
        <member name="M:OxyPlot.PngEncoder.CreateUncompressedBlocks(System.Byte[])">
            <summary>
            Creates the uncompressed blocks.
            </summary>
            <param name="bytes">
            The data.
            </param>
            <returns>
            The output data.
            </returns>
        </member>
        <member name="M:OxyPlot.PngEncoder.UpdateCrc(System.UInt64,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Updates the CRC check sum.
            </summary>
            <param name="crc">
            The input CRC.
            </param>
            <param name="data">
            The data.
            </param>
            <returns>
            The updated CRC.
            </returns>
        </member>
        <member name="M:OxyPlot.PngEncoder.WriteBigEndian(System.IO.BinaryWriter,System.Int32)">
            <summary>
            Writes the integer value with big endian byte order.
            </summary>
            <param name="w">
            The writer.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:OxyPlot.PngEncoder.WriteBigEndian(System.IO.BinaryWriter,System.UInt32)">
            <summary>
            Writes the unsigned integer value with big endian byte order.
            </summary>
            <param name="w">
            The writer.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:OxyPlot.PngEncoder.WriteChunk(System.IO.BinaryWriter,System.String,System.Byte[])">
            <summary>
            Writes a png chunk.
            </summary>
            <param name="w">
            The writer.
            </param>
            <param name="type">
            The chunk type.
            </param>
            <param name="data">
            The chunk data.
            </param>
        </member>
        <member name="T:OxyPlot.PngEncoder.MemoryWriter">
            <summary>
            Provides a binary writer that writes to memory.
            </summary>
        </member>
        <member name="M:OxyPlot.PngEncoder.MemoryWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.PngEncoder.MemoryWriter"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.PngEncoder.MemoryWriter.ToArray">
            <summary>
            Gets the content as a byte array.
            </summary>
            <returns>The byte array.</returns>
        </member>
        <member name="T:OxyPlot.ReflectionHelper">
            <summary>
            Provides utility methods reflection based support methods.
            </summary>
        </member>
        <member name="M:OxyPlot.ReflectionHelper.FillList``1(System.Collections.IEnumerable,System.String,System.Collections.Generic.IList{``0})">
            <summary>
            Fills a list by the specified property of a source list/enumerable.
            </summary>
            <param name="source">
            The source list.
            </param>
            <param name="propertyName">
            The property name.
            </param>
            <param name="list">
            The list to be filled.
            </param>
            <typeparam name="T">
            The type of the destination list items (and the source property).
            </typeparam>
        </member>
        <member name="T:OxyPlot.ScreenPoint">
            <summary>
            Represents a point defined in the screen coordinate system.
            </summary>
            <remarks>
            The rendering methods transforms <see cref="T:OxyPlot.DataPoint"/>s to <see cref="T:OxyPlot.ScreenPoint"/>s.
            </remarks>
        </member>
        <member name="F:OxyPlot.ScreenPoint.Undefined">
            <summary>
            The undefined point.
            </summary>
        </member>
        <member name="F:OxyPlot.ScreenPoint.x">
            <summary>
            The x-coordinate.
            </summary>
        </member>
        <member name="F:OxyPlot.ScreenPoint.y">
            <summary>
            The y-coordinate.
            </summary>
        </member>
        <member name="M:OxyPlot.ScreenPoint.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.ScreenPoint"/> struct.
            </summary>
            <param name="x">
            The x-coordinate.
            </param>
            <param name="y">
            The y-coordinate.
            </param>
        </member>
        <member name="M:OxyPlot.ScreenPoint.IsUndefined(OxyPlot.ScreenPoint)">
            <summary>
            Determines whether the specified point is undefined.
            </summary>
            <param name="point">
            The point.
            </param>
            <returns>
            <c>true</c> if the specified point is undefined; otherwise, <c>false</c> .
            </returns>
        </member>
        <member name="M:OxyPlot.ScreenPoint.DistanceTo(OxyPlot.ScreenPoint)">
            <summary>
            Gets the distance to the specified point.
            </summary>
            <param name="point">
            The point.
            </param>
            <returns>
            The distance.
            </returns>
        </member>
        <member name="M:OxyPlot.ScreenPoint.DistanceToSquared(OxyPlot.ScreenPoint)">
            <summary>
            Gets the squared distance to the specified point.
            </summary>
            <param name="point">
            The point.
            </param>
            <returns>
            The squared distance.
            </returns>
        </member>
        <member name="M:OxyPlot.ScreenPoint.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:OxyPlot.ScreenPoint.op_Addition(OxyPlot.ScreenPoint,OxyPlot.ScreenVector)">
            <summary>
            Translates a <see cref="T:OxyPlot.ScreenPoint"/> by a <see cref="T:OxyPlot.ScreenVector"/>.
            </summary>
            <param name="p1"> The point. </param>
            <param name="p2"> The vector. </param>
            <returns> The translated point. </returns>
        </member>
        <member name="M:OxyPlot.ScreenPoint.op_Subtraction(OxyPlot.ScreenPoint,OxyPlot.ScreenPoint)">
            <summary>
            Subtracts a <see cref="T:OxyPlot.ScreenPoint"/> from a <see cref="T:OxyPlot.ScreenPoint"/>
            and returns the result as a <see cref="T:OxyPlot.ScreenVector"/>.
            </summary>
            <param name="p1"> The point on which to perform the subtraction. </param>
            <param name="p2"> The point to subtract from p1. </param>
            <returns> A <see cref="T:OxyPlot.ScreenVector"/> structure that represents the difference between p1 and p2. </returns>
        </member>
        <member name="M:OxyPlot.ScreenPoint.op_Subtraction(OxyPlot.ScreenPoint,OxyPlot.ScreenVector)">
            <summary>
            Subtracts a <see cref="T:OxyPlot.ScreenVector"/> from a <see cref="T:OxyPlot.ScreenPoint"/> 
            and returns the result as a <see cref="T:OxyPlot.ScreenPoint"/>.
            </summary>
            <param name="point"> The point on which to perform the subtraction. </param>
            <param name="vector"> The vector to subtract from p1. </param>
            <returns> A <see cref="T:OxyPlot.ScreenPoint"/> that represents point translated by the negative vector. </returns>
        </member>
        <member name="P:OxyPlot.ScreenPoint.X">
            <summary>
            Gets or sets the x-coordinate.
            </summary>
            <value> The x-coordinate. </value>
        </member>
        <member name="P:OxyPlot.ScreenPoint.Y">
            <summary>
            Gets or sets the y-coordinate.
            </summary>
            <value> The y-coordinate. </value>
        </member>
        <member name="T:OxyPlot.ScreenPointHelper">
            <summary>
            Provides algorithms for polygons and lines of <see cref="T:OxyPlot.ScreenPoint"/>.
            </summary>
        </member>
        <member name="M:OxyPlot.ScreenPointHelper.FindNearestPointOnPolyline(OxyPlot.ScreenPoint,System.Collections.Generic.IList{OxyPlot.ScreenPoint})">
            <summary>
            Finds the nearest point on the specified polyline.
            </summary>
            <param name="point">
            The point.
            </param>
            <param name="points">
            The points.
            </param>
            <returns>
            The nearest point.
            </returns>
        </member>
        <member name="M:OxyPlot.ScreenPointHelper.FindPointOnLine(OxyPlot.ScreenPoint,OxyPlot.ScreenPoint,OxyPlot.ScreenPoint)">
            <summary>
            Finds the point on line.
            </summary>
            <param name="p">
            The point.
            </param>
            <param name="p1">
            The first point on the line.
            </param>
            <param name="p2">
            The second point on the line.
            </param>
            <returns>
            The nearest point on the line.
            </returns>
            <remarks>
            See <a href="http://paulbourke.net/geometry/pointlineplane/">Bourke</a>.
            </remarks>
        </member>
        <member name="M:OxyPlot.ScreenPointHelper.FindPositionOnLine(OxyPlot.ScreenPoint,OxyPlot.ScreenPoint,OxyPlot.ScreenPoint)">
            <summary>
            Finds the nearest point on line.
            </summary>
            <param name="p">
            The point.
            </param>
            <param name="p1">
            The start point on the line.
            </param>
            <param name="p2">
            The end point on the line.
            </param>
            <returns>
            The relative position of the nearest point.
            </returns>
            <remarks>
            See <a href="http://paulbourke.net/geometry/pointlineplane/">Bourke</a>.
            </remarks>
        </member>
        <member name="M:OxyPlot.ScreenPointHelper.IsPointInPolygon(OxyPlot.ScreenPoint,System.Collections.Generic.IList{OxyPlot.ScreenPoint})">
            <summary>
            Determines whether the specified point is in the specified polygon.
            </summary>
            <param name="p">
            The point.
            </param>
            <param name="pts">
            The polygon points.
            </param>
            <returns>
            <c>true</c> if the point is in the polygon; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:OxyPlot.ScreenPointHelper.ResamplePoints(System.Collections.Generic.IList{OxyPlot.ScreenPoint},System.Double)">
            <summary>
            Resamples the points with the specified point distance limit.
            </summary>
            <param name="allPoints">
            All points.
            </param>
            <param name="minimumDistance">
            The minimum squared distance.
            </param>
            <returns>
            List of resampled points.
            </returns>
        </member>
        <member name="M:OxyPlot.ScreenPointHelper.GetCentroid(System.Collections.Generic.IList{OxyPlot.ScreenPoint})">
            <summary>
            Gets the centroid of the specified polygon.
            </summary>
            <param name="points">
            The points.
            </param>
            <returns>
            The centroid.
            </returns>
        </member>
        <member name="T:OxyPlot.ScreenVector">
            <summary>
            Represents a vector defined in the screen coordinate system.
            </summary>
        </member>
        <member name="F:OxyPlot.ScreenVector.x">
            <summary>
            The x-coordinate.
            </summary>
        </member>
        <member name="F:OxyPlot.ScreenVector.y">
            <summary>
            The y-coordinate.
            </summary>
        </member>
        <member name="M:OxyPlot.ScreenVector.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.ScreenVector"/> structure.
            </summary>
            <param name="x">
            The x-coordinate.
            </param>
            <param name="y">
            The y-coordinate.
            </param>
        </member>
        <member name="M:OxyPlot.ScreenVector.Normalize">
            <summary>
            Normalizes this vector.
            </summary>
        </member>
        <member name="M:OxyPlot.ScreenVector.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:OxyPlot.ScreenVector.op_Multiply(OxyPlot.ScreenVector,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="v"> The vector. </param>
            <param name="d"> The multiplication factor. </param>
            <returns> The result of the operator. </returns>
        </member>
        <member name="P:OxyPlot.ScreenVector.Length">
            <summary>
            Gets the length.
            </summary>
        </member>
        <member name="P:OxyPlot.ScreenVector.LengthSquared">
            <summary>
            Gets the length squared.
            </summary>
        </member>
        <member name="P:OxyPlot.ScreenVector.X">
            <summary>
            Gets or sets the x-coordinate.
            </summary>
            <value> The x-coordinate. </value>
        </member>
        <member name="P:OxyPlot.ScreenVector.Y">
            <summary>
            Gets or sets the y-coordinate.
            </summary>
            <value> The y-coordinate. </value>
        </member>
        <member name="T:OxyPlot.StreamExtensions">
            <summary>
            Implements <see cref="!:Stream"/> extension methods.
            </summary>
        </member>
        <member name="M:OxyPlot.StreamExtensions.CopyTo(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies to the specified stream.
            </summary>
            <param name="input">The input stream.</param>
            <param name="output">The output stream.</param>
        </member>
        <member name="T:OxyPlot.StringHelper">
            <summary>
            Provides extended string formatting functionality.
            </summary>
        </member>
        <member name="F:OxyPlot.StringHelper.FormattingExpression">
            <summary>
            The formatting expression.
            </summary>
        </member>
        <member name="M:OxyPlot.StringHelper.Format(System.IFormatProvider,System.String,System.Object,System.Object[])">
            <summary>
            Replaces the format items in the specified string.
            </summary>
            <param name="provider">
            The culture specific format provider.
            </param>
            <param name="formatString">
            The format string.
            </param>
            <param name="item">
            The item.
            </param>
            <param name="values">
            The values.
            </param>
            <remarks>
            The formatString and values works as in string.Format. In addition, you can format properties of the item object by using the syntax {PropertyName:Formatstring}. E.g. if you have a "Value" property in your item's class, use "{Value:0.00}" to output the value with two digits. Note that this formatting is using reflection and does not have the same performance as string.Format.
            </remarks>
            <returns>
            The formatted string.
            </returns>
        </member>
        <member name="M:OxyPlot.StringHelper.CreateValidFileName(System.String,System.String)">
            <summary>
            Creates a valid file name.
            </summary>
            <param name="title">
            The title.
            </param>
            <param name="extension">
            The extension.
            </param>
            <returns>
            A file name.
            </returns>
        </member>
        <member name="M:OxyPlot.StringHelper.CreateList(System.IFormatProvider,System.Collections.IEnumerable,System.String)">
            <summary>
            Creates a string from a collection of items.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="items">
            The items.
            </param>
            <param name="formatstring">
            The format string to apply to each item.
            </param>
            <param name="separator">
            The separator.
            </param>
            <returns>
            The collection as a string.
            </returns>
        </member>
        <member name="T:OxyPlot.SutherlandHodgmanClipping">
            <summary>
            Provides polygon clipping by the Sutherland-Hodgman algortihm.
            </summary>
        </member>
        <member name="M:OxyPlot.SutherlandHodgmanClipping.ClipPolygon(OxyPlot.OxyRect,System.Collections.Generic.IList{OxyPlot.ScreenPoint})">
            <summary>
            The Sutherland-Hodgman polygon clipping algorithm.
            </summary>
            <remarks>
            See http://ezekiel.vancouver.wsu.edu/~cs442/lectures/clip/clip/index.html
            </remarks>
            <param name="bounds">
            The bounds.
            </param>
            <param name="v">
            The polygon points.
            </param>
            <returns>
            The clipped points.
            </returns>
        </member>
        <member name="M:OxyPlot.SutherlandHodgmanClipping.ClipOneAxis(OxyPlot.OxyRect,OxyPlot.SutherlandHodgmanClipping.RectangleEdge,System.Collections.Generic.IList{OxyPlot.ScreenPoint})">
            <summary>
            Clips to one axis.
            </summary>
            <param name="bounds">
            The bounds.
            </param>
            <param name="edge">
            The edge.
            </param>
            <param name="v">
            The points of the polygon.
            </param>
            <returns>
            The clipped points.
            </returns>
        </member>
        <member name="M:OxyPlot.SutherlandHodgmanClipping.IsInside(OxyPlot.OxyRect,OxyPlot.SutherlandHodgmanClipping.RectangleEdge,OxyPlot.ScreenPoint)">
            <summary>
            Determines whether the specified point is inside the edge/bounds.
            </summary>
            <param name="bounds">The bounds.</param>
            <param name="edge">The edge to test.</param>
            <param name="p">The point.</param>
            <returns>
             <c>true</c> if the specified point is inside; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:OxyPlot.SutherlandHodgmanClipping.LineIntercept(OxyPlot.OxyRect,OxyPlot.SutherlandHodgmanClipping.RectangleEdge,OxyPlot.ScreenPoint,OxyPlot.ScreenPoint)">
            <summary>
            Fines the edge interception.
            </summary>
            <param name="bounds">The bounds.</param>
            <param name="edge">The edge.</param>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>The interception.</returns>
        </member>
        <member name="T:OxyPlot.SutherlandHodgmanClipping.RectangleEdge">
            <summary>
            The rectangle edge.
            </summary>
        </member>
        <member name="F:OxyPlot.SutherlandHodgmanClipping.RectangleEdge.Left">
            <summary>
            The left.
            </summary>
        </member>
        <member name="F:OxyPlot.SutherlandHodgmanClipping.RectangleEdge.Right">
            <summary>
            The right.
            </summary>
        </member>
        <member name="F:OxyPlot.SutherlandHodgmanClipping.RectangleEdge.Top">
            <summary>
            The top.
            </summary>
        </member>
        <member name="F:OxyPlot.SutherlandHodgmanClipping.RectangleEdge.Bottom">
            <summary>
            The bottom.
            </summary>
        </member>
        <member name="T:OxyPlot.VerticalAlignment">
            <summary>
            Specifies the vertical alignment.
            </summary>
        </member>
        <member name="F:OxyPlot.VerticalAlignment.Top">
            <summary>
            Aligned at the top.
            </summary>
        </member>
        <member name="F:OxyPlot.VerticalAlignment.Middle">
            <summary>
            Aligned in the middle.
            </summary>
        </member>
        <member name="F:OxyPlot.VerticalAlignment.Bottom">
            <summary>
            Aligned at the bottom.
            </summary>
        </member>
        <member name="T:OxyPlot.XmlWriterBase">
            <summary>
            Provides an abstract base class for exporters that write xml.
            </summary>
        </member>
        <member name="F:OxyPlot.XmlWriterBase.w">
            <summary>
            The xml writer.
            </summary>
        </member>
        <member name="F:OxyPlot.XmlWriterBase.disposed">
            <summary>
            The disposed flag.
            </summary>
        </member>
        <member name="M:OxyPlot.XmlWriterBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.XmlWriterBase"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.XmlWriterBase.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.XmlWriterBase"/> class.
            </summary>
            <param name="stream">
            The stream.
            </param>
        </member>
        <member name="M:OxyPlot.XmlWriterBase.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:OxyPlot.XmlWriterBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:OxyPlot.XmlWriterBase.Flush">
            <summary>
            Flushes this instance.
            </summary>
        </member>
        <member name="M:OxyPlot.XmlWriterBase.WriteAttributeString(System.String,System.String)">
            <summary>
            The write attribute string.
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:OxyPlot.XmlWriterBase.WriteDocType(System.String,System.String,System.String,System.String)">
            <summary>
            The write doc type.
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="pubid">
            The pubid.
            </param>
            <param name="sysid">
            The sysid.
            </param>
            <param name="subset">
            The subset.
            </param>
        </member>
        <member name="M:OxyPlot.XmlWriterBase.WriteElementString(System.String,System.String)">
            <summary>
            The write element string.
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="text">
            The text.
            </param>
        </member>
        <member name="M:OxyPlot.XmlWriterBase.WriteEndDocument">
            <summary>
            The write end document.
            </summary>
        </member>
        <member name="M:OxyPlot.XmlWriterBase.WriteEndElement">
            <summary>
            The write end element.
            </summary>
        </member>
        <member name="M:OxyPlot.XmlWriterBase.WriteRaw(System.String)">
            <summary>
            The write raw.
            </summary>
            <param name="text">
            The text.
            </param>
        </member>
        <member name="M:OxyPlot.XmlWriterBase.WriteStartDocument(System.Boolean)">
            <summary>
            The write start document.
            </summary>
            <param name="standalone">
            The standalone.
            </param>
        </member>
        <member name="M:OxyPlot.XmlWriterBase.WriteStartElement(System.String)">
            <summary>
            The write start element.
            </summary>
            <param name="name">
            The name.
            </param>
        </member>
        <member name="M:OxyPlot.XmlWriterBase.WriteStartElement(System.String,System.String)">
            <summary>
            The write start element.
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="ns">
            The ns.
            </param>
        </member>
        <member name="M:OxyPlot.XmlWriterBase.WriteString(System.String)">
            <summary>
            The write string.
            </summary>
            <param name="text">
            The text.
            </param>
        </member>
        <member name="M:OxyPlot.XmlWriterBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:OxyPlot.LibraryDoc">
            <summary>
            The OxyPlot solution provides plotting functionality on many platforms.
            </summary>
        </member>
        <member name="T:OxyPlot.CursorType">
            <summary>
            Specifies the cursor type.
            </summary>
        </member>
        <member name="F:OxyPlot.CursorType.Default">
            <summary>
            The default cursor
            </summary>
        </member>
        <member name="F:OxyPlot.CursorType.Pan">
            <summary>
            The pan cursor
            </summary>
        </member>
        <member name="F:OxyPlot.CursorType.ZoomRectangle">
            <summary>
            The zoom rectangle cursor
            </summary>
        </member>
        <member name="F:OxyPlot.CursorType.ZoomHorizontal">
            <summary>
            The horizontal zoom cursor
            </summary>
        </member>
        <member name="F:OxyPlot.CursorType.ZoomVertical">
            <summary>
            The vertical zoom cursor
            </summary>
        </member>
        <member name="T:OxyPlot.IPlotControl">
            <summary>
            Defines functionality in the Plot controls.
            </summary>
        </member>
        <member name="M:OxyPlot.IPlotControl.GetAxesFromPoint(OxyPlot.ScreenPoint,OxyPlot.Axes.Axis@,OxyPlot.Axes.Axis@)">
            <summary>
            Gets the axes from a point.
            </summary>
            <param name="pt">
            The point.
            </param>
            <param name="xaxis">
            The x-axis.
            </param>
            <param name="yaxis">
            The y-axis.
            </param>
        </member>
        <member name="M:OxyPlot.IPlotControl.GetSeriesFromPoint(OxyPlot.ScreenPoint,System.Double)">
            <summary>
            Gets the series from point.
            </summary>
            <param name="pt">
            The point (screen coordinates).
            </param>
            <param name="limit">
            The maximum allowed distance.
            </param>
            <returns>
            The series.
            </returns>
        </member>
        <member name="M:OxyPlot.IPlotControl.HideTracker">
            <summary>
            Hides the tracker.
            </summary>
        </member>
        <member name="M:OxyPlot.IPlotControl.HideZoomRectangle">
            <summary>
            Hides the zoom rectangle.
            </summary>
        </member>
        <member name="M:OxyPlot.IPlotControl.InvalidatePlot(System.Boolean)">
            <summary>
            Invalidate the plot (not blocking the UI thread)
            </summary>
            <param name="updateData">
            if set to <c>true</c>, all data collections will be updated.
            </param>
        </member>
        <member name="M:OxyPlot.IPlotControl.Pan(OxyPlot.Axes.Axis,OxyPlot.ScreenPoint,OxyPlot.ScreenPoint)">
            <summary>
            Pans the specified axis.
            </summary>
            <param name="axis">
            The axis.
            </param>
            <param name="ppt">
            The previous point (screen coordinates).
            </param>
            <param name="cpt">
            The current point (screen coordinates).
            </param>
        </member>
        <member name="M:OxyPlot.IPlotControl.RefreshPlot(System.Boolean)">
            <summary>
            Refresh the plot immediately (blocking UI thread)
            </summary>
            <param name="updateData">
            if set to <c>true</c>, all data collections will be updated.
            </param>
        </member>
        <member name="M:OxyPlot.IPlotControl.Reset(OxyPlot.Axes.Axis)">
            <summary>
            Resets the specified axis.
            </summary>
            <param name="axis">
            The axis.
            </param>
        </member>
        <member name="M:OxyPlot.IPlotControl.SetCursorType(OxyPlot.CursorType)">
            <summary>
            Sets the cursor type.
            </summary>
            <param name="cursorType">
            The cursor type.
            </param>
        </member>
        <member name="M:OxyPlot.IPlotControl.ShowTracker(OxyPlot.TrackerHitResult)">
            <summary>
            Shows the tracker.
            </summary>
            <param name="trackerHitResult">
            The tracker data.
            </param>
        </member>
        <member name="M:OxyPlot.IPlotControl.ShowZoomRectangle(OxyPlot.OxyRect)">
            <summary>
            Shows the zoom rectangle.
            </summary>
            <param name="r">
            The rectangle.
            </param>
        </member>
        <member name="M:OxyPlot.IPlotControl.Zoom(OxyPlot.Axes.Axis,System.Double,System.Double)">
            <summary>
            Zooms the specified axis to the specified values.
            </summary>
            <param name="axis">
            The axis.
            </param>
            <param name="p1">
            The new minimum value.
            </param>
            <param name="p2">
            The new maximum value.
            </param>
        </member>
        <member name="M:OxyPlot.IPlotControl.ZoomAt(OxyPlot.Axes.Axis,System.Double,System.Double)">
            <summary>
            Zooms at the specified position.
            </summary>
            <param name="axis">
            The axis.
            </param>
            <param name="factor">
            The zoom factor.
            </param>
            <param name="x">
            The position to zoom at.
            </param>
        </member>
        <member name="P:OxyPlot.IPlotControl.ActualModel">
            <summary>
            Gets the actual model.
            </summary>
            <value>The actual model.</value>
        </member>
        <member name="T:OxyPlot.ManipulationEventArgs">
            <summary>
            Provides data for the manipulation events.
            </summary>
        </member>
        <member name="M:OxyPlot.ManipulationEventArgs.#ctor(OxyPlot.ScreenPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.ManipulationEventArgs"/> class.
            </summary>
            <param name="currentPosition">
            The current position.
            </param>
        </member>
        <member name="P:OxyPlot.ManipulationEventArgs.CurrentPosition">
            <summary>
            Gets the current position.
            </summary>
            <value>The current position.</value>
        </member>
        <member name="P:OxyPlot.ManipulationEventArgs.ScaleX">
            <summary>
            Gets or sets the X scaling factor.
            </summary>
            <value>The scale value.</value>
        </member>
        <member name="P:OxyPlot.ManipulationEventArgs.ScaleY">
            <summary>
            Gets or sets the Y scaling factor.
            </summary>
            <value>The scale value.</value>
        </member>
        <member name="T:OxyPlot.ManipulatorBase">
            <summary>
            Provides an absract base class for plot control manipulators.
            </summary>
        </member>
        <member name="M:OxyPlot.ManipulatorBase.#ctor(OxyPlot.IPlotControl)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.ManipulatorBase"/> class.
            </summary>
            <param name="plotControl">
            The plot control.
            </param>
        </member>
        <member name="M:OxyPlot.ManipulatorBase.Completed(OxyPlot.ManipulationEventArgs)">
            <summary>
            Occurs when a manipulation is complete.
            </summary>
            <param name="e">
            The <see cref="T:OxyPlot.ManipulationEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:OxyPlot.ManipulatorBase.Delta(OxyPlot.ManipulationEventArgs)">
            <summary>
            Occurs when the input device changes position during a manipulation.
            </summary>
            <param name="e">
            The <see cref="T:OxyPlot.ManipulationEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:OxyPlot.ManipulatorBase.GetCursorType">
            <summary>
            Gets the cursor for the manipulation.
            </summary>
            <returns>
            The cursor.
            </returns>
        </member>
        <member name="M:OxyPlot.ManipulatorBase.Started(OxyPlot.ManipulationEventArgs)">
            <summary>
            Occurs when an input device begins a manipulation on the plot.
            </summary>
            <param name="e">
            The <see cref="T:OxyPlot.ManipulationEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:OxyPlot.ManipulatorBase.InverseTransform(System.Double,System.Double)">
            <summary>
            Transforms a point from screen coordinates to data coordinates.
            </summary>
            <param name="x">
            The x coordinate.
            </param>
            <param name="y">
            The y coordinate.
            </param>
            <returns>
            A data point.
            </returns>
        </member>
        <member name="P:OxyPlot.ManipulatorBase.StartPosition">
            <summary>
            Gets the first position of the manipulation.
            </summary>
        </member>
        <member name="P:OxyPlot.ManipulatorBase.PlotControl">
            <summary>
            Gets the plot control.
            </summary>
        </member>
        <member name="P:OxyPlot.ManipulatorBase.XAxis">
            <summary>
            Gets or sets the X axis.
            </summary>
            <value>The X axis.</value>
        </member>
        <member name="P:OxyPlot.ManipulatorBase.YAxis">
            <summary>
            Gets or sets the Y axis.
            </summary>
            <value>The Y axis.</value>
        </member>
        <member name="T:OxyPlot.PanManipulator">
            <summary>
            Provides a plot control manipulator for panning functionality.
            </summary>
        </member>
        <member name="M:OxyPlot.PanManipulator.#ctor(OxyPlot.IPlotControl)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.PanManipulator"/> class.
            </summary>
            <param name="plotControl">
            The plot control.
            </param>
        </member>
        <member name="M:OxyPlot.PanManipulator.Delta(OxyPlot.ManipulationEventArgs)">
            <summary>
            Occurs when the input device changes position during a manipulation.
            </summary>
            <param name="e">
            The <see cref="T:OxyPlot.ManipulationEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:OxyPlot.PanManipulator.GetCursorType">
            <summary>
            Gets the cursor for the manipulation.
            </summary>
            <returns>
            The cursor.
            </returns>
        </member>
        <member name="M:OxyPlot.PanManipulator.Started(OxyPlot.ManipulationEventArgs)">
            <summary>
            Occurs when an input device begins a manipulation on the plot.
            </summary>
            <param name="e">
            The <see cref="T:OxyPlot.ManipulationEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="P:OxyPlot.PanManipulator.PreviousPosition">
            <summary>
            Gets or sets the previous position.
            </summary>
        </member>
        <member name="T:OxyPlot.ResetManipulator">
            <summary>
            Provides a plot control manipulator for reset functionality.
            </summary>
        </member>
        <member name="M:OxyPlot.ResetManipulator.#ctor(OxyPlot.IPlotControl)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.ResetManipulator"/> class.
            </summary>
            <param name="plotControl">
            The plot control.
            </param>
        </member>
        <member name="M:OxyPlot.ResetManipulator.Started(OxyPlot.ManipulationEventArgs)">
            <summary>
            Occurs when an input device begins a manipulation on the plot.
            </summary>
            <param name="e">
            The <see cref="T:OxyPlot.ManipulationEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="T:OxyPlot.TrackerHitResult">
            <summary>
            Provides a data container for a tracker hit result.
            </summary>
            <remarks>
            This is used as DataContext for the TrackerControl.
            The TrackerControl is visible when the user use the left mouse button to "track" points on the series.
            </remarks>
        </member>
        <member name="F:OxyPlot.TrackerHitResult.DefaultFormatString">
            <summary>
            The default format string.
            </summary>
        </member>
        <member name="M:OxyPlot.TrackerHitResult.#ctor(OxyPlot.Series.Series,OxyPlot.IDataPoint,OxyPlot.ScreenPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.TrackerHitResult"/> class.
            </summary>
            <param name="series">The series.</param>
            <param name="dp">The data point.</param>
            <param name="sp">The screen point.</param>
            <param name="item">The item.</param>
            <param name="index">The index.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:OxyPlot.TrackerHitResult.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:OxyPlot.TrackerHitResult.DataPoint">
            <summary>
            Gets or sets the nearest or interpolated data point.
            </summary>
        </member>
        <member name="P:OxyPlot.TrackerHitResult.Item">
            <summary>
            Gets or sets the source item of the point.
            If the current point is from an ItemsSource and is not interpolated, this property will contain the item.
            </summary>
        </member>
        <member name="P:OxyPlot.TrackerHitResult.Index">
            <summary>
            Gets or sets the index for the Item.
            </summary>
        </member>
        <member name="P:OxyPlot.TrackerHitResult.LineExtents">
            <summary>
            Gets or sets the horizontal/vertical line extents.
            </summary>
        </member>
        <member name="P:OxyPlot.TrackerHitResult.PlotModel">
            <summary>
            Gets or sets the plot model.
            </summary>
        </member>
        <member name="P:OxyPlot.TrackerHitResult.Position">
            <summary>
            Gets or sets the position in screen coordinates.
            </summary>
        </member>
        <member name="P:OxyPlot.TrackerHitResult.Series">
            <summary>
            Gets or sets the series that is being tracked.
            </summary>
        </member>
        <member name="P:OxyPlot.TrackerHitResult.Text">
            <summary>
            Gets or sets the text shown in the tracker.
            </summary>
        </member>
        <member name="P:OxyPlot.TrackerHitResult.XAxis">
            <summary>
            Gets or sets the X axis.
            </summary>
        </member>
        <member name="P:OxyPlot.TrackerHitResult.YAxis">
            <summary>
            Gets or sets the Y axis.
            </summary>
        </member>
        <member name="T:OxyPlot.TrackerManipulator">
            <summary>
            Provides a plot control manipulator for tracker functionality.
            </summary>
        </member>
        <member name="F:OxyPlot.TrackerManipulator.currentSeries">
            <summary>
            The current series.
            </summary>
        </member>
        <member name="M:OxyPlot.TrackerManipulator.#ctor(OxyPlot.IPlotControl)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.TrackerManipulator"/> class.
            </summary>
            <param name="plotControl">
            The plot control.
            </param>
        </member>
        <member name="M:OxyPlot.TrackerManipulator.Completed(OxyPlot.ManipulationEventArgs)">
            <summary>
            Occurs when a manipulation is complete.
            </summary>
            <param name="e">
            The <see cref="T:OxyPlot.ManipulationEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:OxyPlot.TrackerManipulator.Delta(OxyPlot.ManipulationEventArgs)">
            <summary>
            Occurs when the input device changes position during a manipulation.
            </summary>
            <param name="e">
            The <see cref="T:OxyPlot.ManipulationEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:OxyPlot.TrackerManipulator.GetCursorType">
            <summary>
            Gets the cursor for the manipulation.
            </summary>
            <returns>
            The cursor.
            </returns>
        </member>
        <member name="M:OxyPlot.TrackerManipulator.Started(OxyPlot.ManipulationEventArgs)">
            <summary>
            Occurs when an input device begins a manipulation on the plot.
            </summary>
            <param name="e">
            The <see cref="T:OxyPlot.ManipulationEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:OxyPlot.TrackerManipulator.GetNearestHit(OxyPlot.Series.ITrackableSeries,OxyPlot.ScreenPoint,System.Boolean,System.Boolean)">
            <summary>
            Gets the nearest tracker hit.
            </summary>
            <param name="s">
            The series.
            </param>
            <param name="point">
            The point.
            </param>
            <param name="snap">
            Snap to points.
            </param>
            <param name="pointsOnly">
            Check points only (no interpolation).
            </param>
            <returns>
            A tracker hit result.
            </returns>
        </member>
        <member name="P:OxyPlot.TrackerManipulator.PointsOnly">
            <summary>
            Gets or sets a value indicating whether to show tracker on points only (not interpolating).
            </summary>
        </member>
        <member name="P:OxyPlot.TrackerManipulator.Snap">
            <summary>
            Gets or sets a value indicating whether to snap to the nearest point.
            </summary>
        </member>
        <member name="T:OxyPlot.ZoomManipulator">
            <summary>
            Provides a plot control manipulator for zoom functionality.
            </summary>
        </member>
        <member name="M:OxyPlot.ZoomManipulator.#ctor(OxyPlot.IPlotControl)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.ZoomManipulator"/> class.
            </summary>
            <param name="plotControl">
            The plot control.
            </param>
        </member>
        <member name="M:OxyPlot.ZoomManipulator.Delta(OxyPlot.ManipulationEventArgs)">
            <summary>
            Occurs when the input device changes position during a manipulation.
            </summary>
            <param name="e">The <see cref="T:OxyPlot.ManipulationEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:OxyPlot.ZoomRectangleManipulator">
            <summary>
            Provides a plot control manipulator for zoom by rectangle functionality.
            </summary>
        </member>
        <member name="M:OxyPlot.ZoomRectangleManipulator.#ctor(OxyPlot.IPlotControl)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.ZoomRectangleManipulator"/> class.
            </summary>
            <param name="plotControl">
            The plot control.
            </param>
        </member>
        <member name="M:OxyPlot.ZoomRectangleManipulator.Completed(OxyPlot.ManipulationEventArgs)">
            <summary>
            Occurs when a manipulation is complete.
            </summary>
            <param name="e">
            The <see cref="T:OxyPlot.ManipulationEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:OxyPlot.ZoomRectangleManipulator.Delta(OxyPlot.ManipulationEventArgs)">
            <summary>
            Occurs when the input device changes position during a manipulation.
            </summary>
            <param name="e">
            The <see cref="T:OxyPlot.ManipulationEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:OxyPlot.ZoomRectangleManipulator.GetCursorType">
            <summary>
            Gets the cursor for the manipulation.
            </summary>
            <returns>
            The cursor.
            </returns>
        </member>
        <member name="M:OxyPlot.ZoomRectangleManipulator.Started(OxyPlot.ManipulationEventArgs)">
            <summary>
            Occurs when an input device begins a manipulation on the plot.
            </summary>
            <param name="e">
            The <see cref="T:OxyPlot.ManipulationEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="P:OxyPlot.ZoomRectangleManipulator.ZoomRectangle">
            <summary>
            Gets or sets the zoom rectangle.
            </summary>
        </member>
        <member name="T:OxyPlot.ZoomStepManipulator">
            <summary>
            Provides a plot control manipulator for stepwise zoom functionality.
            </summary>
        </member>
        <member name="M:OxyPlot.ZoomStepManipulator.#ctor(OxyPlot.IPlotControl,System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.ZoomStepManipulator"/> class.
            </summary>
            <param name="plotControl">
            The plot control.
            </param>
            <param name="step">
            The step.
            </param>
            <param name="fineControl">
            The fine Control.
            </param>
        </member>
        <member name="M:OxyPlot.ZoomStepManipulator.Started(OxyPlot.ManipulationEventArgs)">
            <summary>
            The started.
            </summary>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="P:OxyPlot.ZoomStepManipulator.FineControl">
            <summary>
            Gets or sets a value indicating whether FineControl.
            </summary>
        </member>
        <member name="P:OxyPlot.ZoomStepManipulator.Step">
            <summary>
            Gets or sets Step.
            </summary>
        </member>
        <member name="T:OxyPlot.NamespaceDoc">
            <summary>
            The OxyPlot namespace contains the platform independent classes of the library.
            </summary>
        </member>
        <member name="T:OxyPlot.HitTestResult">
            <summary>
            Represents a hit test result.
            </summary>
        </member>
        <member name="M:OxyPlot.HitTestResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.HitTestResult"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.HitTestResult.#ctor(OxyPlot.ScreenPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.HitTestResult"/> class.
            </summary>
            <param name="nhp">The nearest hit point.</param>
            <param name="item">The item.</param>
            <param name="index">The index.</param>
        </member>
        <member name="P:OxyPlot.HitTestResult.Index">
            <summary>
            Gets or sets the index of the hit (if available).
            </summary>
            <value> The index. </value>
            <remarks>
            If the hit was in the middle between point 1 and 2, index = 1.5.
            </remarks>
        </member>
        <member name="P:OxyPlot.HitTestResult.Item">
            <summary>
            Gets or sets the item of the hit.
            </summary>
            <value> The item. </value>
        </member>
        <member name="P:OxyPlot.HitTestResult.NearestHitPoint">
            <summary>
            Gets or sets the position of the nearest hit point.
            </summary>
            <value> The nearest hit point. </value>
        </member>
        <member name="T:OxyPlot.OxyMouseButton">
            <summary>
            Specifies constants that define which mouse button was pressed.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyMouseButton.None">
            <summary>
            No mouse button.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyMouseButton.Left">
            <summary>
            The left mouse button.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyMouseButton.Middle">
            <summary>
            The middle mouse button.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyMouseButton.Right">
            <summary>
            The right mouse button.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyMouseButton.XButton1">
            <summary>
            The first extended mouse button.
            </summary>
        </member>
        <member name="F:OxyPlot.OxyMouseButton.XButton2">
            <summary>
            The second extended mouse button.
            </summary>
        </member>
        <member name="T:OxyPlot.OxyMouseEventArgs">
            <summary>
            Provides data for the mouse events.
            </summary>
        </member>
        <member name="P:OxyPlot.OxyMouseEventArgs.ChangedButton">
            <summary>
            Gets or sets the mouse button that has changed.
            </summary>
        </member>
        <member name="P:OxyPlot.OxyMouseEventArgs.ClickCount">
            <summary>
            Gets or sets the click count.
            </summary>
            <value> The click count. </value>
        </member>
        <member name="P:OxyPlot.OxyMouseEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether Handled.
            </summary>
        </member>
        <member name="P:OxyPlot.OxyMouseEventArgs.IsAltDown">
            <summary>
            Gets or sets a value indicating whether the alt key was pressed when the event was raised.
            </summary>
        </member>
        <member name="P:OxyPlot.OxyMouseEventArgs.IsControlDown">
            <summary>
            Gets or sets a value indicating whether the control key was pressed when the event was raised.
            </summary>
        </member>
        <member name="P:OxyPlot.OxyMouseEventArgs.IsShiftDown">
            <summary>
            Gets or sets a value indicating whether the shift key was pressed when the event was raised.
            </summary>
        </member>
        <member name="P:OxyPlot.OxyMouseEventArgs.HitTestResult">
            <summary>
            Gets or sets the hit test result.
            </summary>
        </member>
        <member name="P:OxyPlot.OxyMouseEventArgs.PlotControl">
            <summary>
            Gets or sets the plot control.
            </summary>
            <value> The plot control. </value>
        </member>
        <member name="P:OxyPlot.OxyMouseEventArgs.Position">
            <summary>
            Gets or sets the position.
            </summary>
        </member>
        <member name="T:OxyPlot.PlotType">
            <summary>
            Specifies the coordinate system type.
            </summary>
        </member>
        <member name="F:OxyPlot.PlotType.XY">
            <summary>
            XY coordinate system - two perpendicular axes
            </summary>
        </member>
        <member name="F:OxyPlot.PlotType.Cartesian">
            <summary>
            Cartesian coordinate system - perpendicular axes with the same scaling.
            </summary>
            <remarks>
            See http://en.wikipedia.org/wiki/Cartesian_coordinate_system
            </remarks>
        </member>
        <member name="F:OxyPlot.PlotType.Polar">
            <summary>
            Polar coordinate system - with radial and angular axes 
            </summary>
            <remarks>
            See http://en.wikipedia.org/wiki/Polar_coordinate_system
            </remarks>
        </member>
        <member name="T:OxyPlot.LegendPlacement">
            <summary>
            Specifies the placement of the legend box.
            </summary>
        </member>
        <member name="F:OxyPlot.LegendPlacement.Inside">
            <summary>
            Place the legends inside the plot area.
            </summary>
        </member>
        <member name="F:OxyPlot.LegendPlacement.Outside">
            <summary>
            Place the legends outside the plot area.
            </summary>
        </member>
        <member name="T:OxyPlot.LegendPosition">
            <summary>
            Specifies the position of the legend box.
            </summary>
        </member>
        <member name="F:OxyPlot.LegendPosition.TopLeft">
            <summary>
            Place the legend box in the top-left corner.
            </summary>
        </member>
        <member name="F:OxyPlot.LegendPosition.TopCenter">
            <summary>
            Place the legend box centered at the top.
            </summary>
        </member>
        <member name="F:OxyPlot.LegendPosition.TopRight">
            <summary>
             Place the legend box in the top-right corner.
            </summary>
        </member>
        <member name="F:OxyPlot.LegendPosition.BottomLeft">
            <summary>
             Place the legend box in the bottom-left corner.
            </summary>
        </member>
        <member name="F:OxyPlot.LegendPosition.BottomCenter">
            <summary>
            Place the legend box centered at the bottom.
            </summary>
        </member>
        <member name="F:OxyPlot.LegendPosition.BottomRight">
            <summary>
             Place the legend box in the bottom-right corner.
            </summary>
        </member>
        <member name="F:OxyPlot.LegendPosition.LeftTop">
            <summary>
            Place the legend box in the left-top corner.
            </summary>
        </member>
        <member name="F:OxyPlot.LegendPosition.LeftMiddle">
            <summary>
            Place the legend box centered at the left.
            </summary>
        </member>
        <member name="F:OxyPlot.LegendPosition.LeftBottom">
            <summary>
            Place the legend box in the left-bottom corner.
            </summary>
        </member>
        <member name="F:OxyPlot.LegendPosition.RightTop">
            <summary>
            Place the legend box in the right-top corner.
            </summary>
        </member>
        <member name="F:OxyPlot.LegendPosition.RightMiddle">
            <summary>
            Place the legend box centered at the right.
            </summary>
        </member>
        <member name="F:OxyPlot.LegendPosition.RightBottom">
            <summary>
            Place the legend box in the right-bottom corner.
            </summary>
        </member>
        <member name="T:OxyPlot.LegendOrientation">
            <summary>
            Specifies the orientation of the items in the legend box.
            </summary>
        </member>
        <member name="F:OxyPlot.LegendOrientation.Horizontal">
            <summary>
            Orient the items horizontally.
            </summary>
        </member>
        <member name="F:OxyPlot.LegendOrientation.Vertical">
            <summary>
            Orient the items vertically.
            </summary>
        </member>
        <member name="T:OxyPlot.LegendItemOrder">
            <summary>
            Specifies the item order of the legends.
            </summary>
        </member>
        <member name="F:OxyPlot.LegendItemOrder.Normal">
            <summary>
            Render the items in the normal order.
            </summary>
        </member>
        <member name="F:OxyPlot.LegendItemOrder.Reverse">
            <summary>
            Render the items in the reverse order.
            </summary>
        </member>
        <member name="T:OxyPlot.LegendSymbolPlacement">
            <summary>
            Specifies the placement of the legend symbols.
            </summary>
        </member>
        <member name="F:OxyPlot.LegendSymbolPlacement.Left">
            <summary>
            Render symbols to the left of the labels.
            </summary>
        </member>
        <member name="F:OxyPlot.LegendSymbolPlacement.Right">
            <summary>
            Render symbols to the right of the labels.
            </summary>
        </member>
        <member name="T:OxyPlot.PlotModel">
            <summary>
            Represents a plot (including axes, series and annotations).
            </summary>
        </member>
        <member name="F:OxyPlot.PlotModel.PrivateDefaultFont">
            <summary>
            The default font.
            </summary>
        </member>
        <member name="F:OxyPlot.PlotModel.MouseHitTolerance">
            <summary>
            The mouse hit tolerance.
            </summary>
        </member>
        <member name="F:OxyPlot.PlotModel.DefaultSelectionColor">
            <summary>
            The default selection color.
            </summary>
        </member>
        <member name="F:OxyPlot.PlotModel.currentColorIndex">
            <summary>
            The current color index.
            </summary>
        </member>
        <member name="M:OxyPlot.PlotModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.PlotModel"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.PlotModel.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.PlotModel"/> class.
            </summary>
            <param name="title">
            The title.
            </param>
            <param name="subtitle">
            The subtitle.
            </param>
        </member>
        <member name="F:OxyPlot.PlotModel.syncRoot">
            <summary>
            The synchronization root object.
            </summary>
        </member>
        <member name="M:OxyPlot.PlotModel.AttachPlotControl(OxyPlot.IPlotControl)">
            <summary>
            Attaches this model to the specified plot control.
            </summary>
            <param name="plotControl">The plot control.</param>
            <remarks>
            Only one plot control can be attached to the plot model.
            The plot model contains data (e.g. axis scaling) that is only relevant to the current plot control.
            </remarks>
        </member>
        <member name="M:OxyPlot.PlotModel.CreateReport">
            <summary>
            Creates a report for the plot.
            </summary>
            <returns>
            A report.
            </returns>
        </member>
        <member name="M:OxyPlot.PlotModel.CreateTextReport">
            <summary>
            Creates a text report for the plot.
            </summary>
            <returns>
            The create text report.
            </returns>
        </member>
        <member name="M:OxyPlot.PlotModel.RefreshPlot(System.Boolean)">
            <summary>
            Refreshes the plot.
            </summary>
            <param name="updateData">Updates all data sources if set to <c>true</c>.</param>
        </member>
        <member name="M:OxyPlot.PlotModel.InvalidatePlot(System.Boolean)">
            <summary>
            Invalidates the plot.
            </summary>
            <param name="updateData">Updates all data sources if set to <c>true</c>.</param>
        </member>
        <member name="M:OxyPlot.PlotModel.GetAxesFromPoint(OxyPlot.ScreenPoint,OxyPlot.Axes.Axis@,OxyPlot.Axes.Axis@)">
            <summary>
            Gets the first axes that covers the area of the specified point.
            </summary>
            <param name="pt">
            The point.
            </param>
            <param name="xaxis">
            The xaxis.
            </param>
            <param name="yaxis">
            The yaxis.
            </param>
        </member>
        <member name="M:OxyPlot.PlotModel.GetDefaultColor">
            <summary>
            Gets the default color from the DefaultColors palette.
            </summary>
            <returns>
            The next default color.
            </returns>
        </member>
        <member name="M:OxyPlot.PlotModel.GetDefaultLineStyle">
            <summary>
            Gets the default line style.
            </summary>
            <returns>
            The next default line style.
            </returns>
        </member>
        <member name="M:OxyPlot.PlotModel.GetSeriesFromPoint(OxyPlot.ScreenPoint,System.Double)">
            <summary>
            Gets a series from the specified point.
            </summary>
            <param name="point">
            The point.
            </param>
            <param name="limit">
            The limit.
            </param>
            <returns>
            The nearest series.
            </returns>
        </member>
        <member name="M:OxyPlot.PlotModel.ToCode">
            <summary>
            Generates C# code of the model.
            </summary>
            <returns>
            C# code.
            </returns>
        </member>
        <member name="M:OxyPlot.PlotModel.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:OxyPlot.PlotModel.ToSvg(System.Double,System.Double,System.Boolean,OxyPlot.IRenderContext)">
            <summary>
            Create an svg model and return it as a string.
            </summary>
            <param name="width">The width (points).</param>
            <param name="height">The height (points).</param>
            <param name="isDocument">if set to <c>true</c>, the xml headers will be included (?xml and !DOCTYPE).</param>
            <param name="textMeasurer">The text measurer.</param>
            <returns>The svg string.</returns>
        </member>
        <member name="M:OxyPlot.PlotModel.GetElements">
            <summary>
            Gets all elements of the plot model.
            </summary>
            <returns>An enumerator of the plot elements.</returns>
        </member>
        <member name="M:OxyPlot.PlotModel.Update">
            <summary>
            Updates all axes and series. 0. Updates the owner PlotModel of all plot items (axes, series and annotations)
            1. Updates the data of each Series (only if updateData==true).
            2. Ensure that all series have axes assigned.
            3. Updates the max and min of the axes.
            </summary>
            <param name="updateData">
            if set to <c>true</c> , all data collections will be updated.
            </param>
        </member>
        <member name="M:OxyPlot.PlotModel.UpdateAxisTransforms">
            <summary>
            Updates the axis transforms.
            </summary>
        </member>
        <member name="M:OxyPlot.PlotModel.GetAxisOrDefault(System.String,OxyPlot.Axes.Axis)">
            <summary>
            Gets the axis for the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="defaultAxis">The default axis.</param>
            <returns>The axis, or the defaultAxis if the key is not found.</returns>
        </member>
        <member name="M:OxyPlot.PlotModel.OnUpdated">
            <summary>
            Raises the Updated event.
            </summary>
        </member>
        <member name="M:OxyPlot.PlotModel.OnUpdating">
            <summary>
            Raises the Updating event.
            </summary>
        </member>
        <member name="M:OxyPlot.PlotModel.EnforceCartesianTransforms">
            <summary>
            Enforces the same scale on all axes.
            </summary>
        </member>
        <member name="M:OxyPlot.PlotModel.UpdateIntervals">
            <summary>
            Updates the intervals (major and minor step values).
            </summary>
        </member>
        <member name="M:OxyPlot.PlotModel.EnsureDefaultAxes">
            <summary>
            Finds and sets the default horizontal and vertical axes (the first horizontal/vertical axes in the Axes collection).
            </summary>
        </member>
        <member name="M:OxyPlot.PlotModel.ResetDefaultColor">
            <summary>
            Resets the default color index.
            </summary>
        </member>
        <member name="M:OxyPlot.PlotModel.UpdateMaxMin(System.Boolean)">
            <summary>
            Updates maximum and minimum values of the axes from values of all data series.
            </summary>
            <param name="isDataUpdated">
            if set to <c>true</c> , the data has been updated.
            </param>
        </member>
        <member name="M:OxyPlot.PlotModel.EnsureLegendProperties">
            <summary>
            Makes the LegendOrientation property safe.
            </summary>
            <remarks>
            If Legend is positioned left or right, force it to vertical orientation
            </remarks>
        </member>
        <member name="M:OxyPlot.PlotModel.GetLegendRectangle(OxyPlot.OxySize)">
            <summary>
            Gets the rectangle of the legend box.
            </summary>
            <param name="legendSize">Size of the legend box.</param>
            <returns>A rectangle.</returns>
        </member>
        <member name="M:OxyPlot.PlotModel.RenderLegend(OxyPlot.IRenderContext,OxyPlot.Series.Series,OxyPlot.OxyRect)">
            <summary>
            Renders the legend for the specified series.
            </summary>
            <param name="rc">
            The render context.
            </param>
            <param name="s">
            The series.
            </param>
            <param name="rect">
            The position and size of the legend.
            </param>
        </member>
        <member name="M:OxyPlot.PlotModel.MeasureLegends(OxyPlot.IRenderContext,OxyPlot.OxySize)">
            <summary>
            Measures the legends.
            </summary>
            <param name="rc">
            The render context.
            </param>
            <param name="availableSize">
            The available size for the legend box.
            </param>
            <returns>
            The size of the legend box.
            </returns>
        </member>
        <member name="M:OxyPlot.PlotModel.RenderLegends(OxyPlot.IRenderContext,OxyPlot.OxyRect)">
            <summary>
            Renders or measures the legends.
            </summary>
            <param name="rc">
            The render context.
            </param>
            <param name="rect">
            The rectangle.
            </param>
        </member>
        <member name="M:OxyPlot.PlotModel.RenderOrMeasureLegends(OxyPlot.IRenderContext,OxyPlot.OxyRect)">
            <summary>
            Renders or measures the legends.
            </summary>
            <param name="rc">
            The render context.
            </param>
            <param name="rect">
            Provides the available size if measuring, otherwise it provides the position and size of the legend.
            </param>
            <param name="measureOnly">
            Specify if the size of the legend box should be measured only (not rendered).
            </param>
            <returns>
            The size of the legend box.
            </returns>
        </member>
        <member name="F:OxyPlot.PlotModel.currentMouseEventElement">
            <summary>
            The current mouse events element.
            </summary>
        </member>
        <member name="M:OxyPlot.PlotModel.HandleMouseDown(System.Object,OxyPlot.OxyMouseEventArgs)">
            <summary>
            Handles the mouse down event.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The <see cref="T:OxyPlot.OxyMouseEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:OxyPlot.PlotModel.HandleMouseMove(System.Object,OxyPlot.OxyMouseEventArgs)">
            <summary>
            Handles the mouse move event.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The <see cref="T:OxyPlot.OxyMouseEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:OxyPlot.PlotModel.HandleMouseUp(System.Object,OxyPlot.OxyMouseEventArgs)">
            <summary>
            Handles the mouse up event.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The <see cref="T:OxyPlot.OxyMouseEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:OxyPlot.PlotModel.OnMouseDown(System.Object,OxyPlot.OxyMouseEventArgs)">
            <summary>
            Raises the <see cref="E:OxyPlot.PlotModel.MouseDown"/> event.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The <see cref="T:OxyPlot.OxyMouseEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:OxyPlot.PlotModel.OnMouseMove(System.Object,OxyPlot.OxyMouseEventArgs)">
            <summary>
            Raises the <see cref="E:OxyPlot.PlotModel.MouseMove"/> event.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The <see cref="T:OxyPlot.OxyMouseEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:OxyPlot.PlotModel.OnMouseUp(System.Object,OxyPlot.OxyMouseEventArgs)">
            <summary>
            Raises the <see cref="E:OxyPlot.PlotModel.MouseUp"/> event.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The <see cref="T:OxyPlot.OxyMouseEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:OxyPlot.PlotModel.Render(OxyPlot.IRenderContext,System.Double,System.Double)">
            <summary>
            Renders the plot with the specified rendering context.
            </summary>
            <param name="rc">The rendering context.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:OxyPlot.PlotModel.MaxSizeOfPositionTier(OxyPlot.IRenderContext,System.Collections.Generic.IEnumerable{OxyPlot.Axes.Axis})">
            <summary>
            Calculates the maximum size of the specified axes.
            </summary>
            <param name="rc">
            The render context.
            </param>
            <param name="axesOfPositionTier">
            The axes of position tier.
            </param>
            <returns>
            The maximum size.
            </returns>
        </member>
        <member name="M:OxyPlot.PlotModel.AdjustPlotMargins(OxyPlot.IRenderContext)">
            <summary>
            Adjust the plot margins.
            </summary>
            <param name="rc">
            The render context.
            </param>
            <returns>
            The adjust plot margins.
            </returns>
        </member>
        <member name="M:OxyPlot.PlotModel.MeasureTitles(OxyPlot.IRenderContext)">
            <summary>
            Measures the size of the title and subtitle.
            </summary>
            <param name="rc">
            The rendering context.
            </param>
            <returns>
            Size of the titles.
            </returns>
        </member>
        <member name="M:OxyPlot.PlotModel.RenderAnnotations(OxyPlot.IRenderContext,OxyPlot.Annotations.AnnotationLayer)">
            <summary>
            Renders the annotations.
            </summary>
            <param name="rc">
            The render context.
            </param>
            <param name="layer">
            The layer.
            </param>
        </member>
        <member name="M:OxyPlot.PlotModel.RenderAxes(OxyPlot.IRenderContext,OxyPlot.Axes.AxisLayer)">
            <summary>
            Renders the axes.
            </summary>
            <param name="rc">
            The render context.
            </param>
            <param name="layer">
            The layer.
            </param>
        </member>
        <member name="M:OxyPlot.PlotModel.RenderBackgrounds(OxyPlot.IRenderContext)">
            <summary>
            Renders the series backgrounds.
            </summary>
            <param name="rc">
            The render context.
            </param>
        </member>
        <member name="M:OxyPlot.PlotModel.RenderBox(OxyPlot.IRenderContext)">
            <summary>
            Renders the border around the plot area.
            </summary>
            <remarks>
            The border will only by rendered if there are axes in the plot.
            </remarks>
            <param name="rc">
            The render context.
            </param>
        </member>
        <member name="M:OxyPlot.PlotModel.RenderSeries(OxyPlot.IRenderContext)">
            <summary>
            Renders the series.
            </summary>
            <param name="rc">
            The render context.
            </param>
        </member>
        <member name="M:OxyPlot.PlotModel.RenderTitle(OxyPlot.IRenderContext)">
            <summary>
            Renders the title and subtitle.
            </summary>
            <param name="rc">
            The render context.
            </param>
        </member>
        <member name="M:OxyPlot.PlotModel.UpdatePlotArea(OxyPlot.IRenderContext)">
            <summary>
            Calculates the plot area (subtract padding, title size and outside legends)
            </summary>
            <param name="rc">
            The rendering context.
            </param>
        </member>
        <member name="P:OxyPlot.PlotModel.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the PlotModel.
            </summary>
            <value>The sync root.</value>
        </member>
        <member name="E:OxyPlot.PlotModel.Updated">
            <summary>
            Occurs when the plot has been updated.
            </summary>
        </member>
        <member name="E:OxyPlot.PlotModel.Updating">
            <summary>
            Occurs when the plot is about to be updated.
            </summary>
        </member>
        <member name="P:OxyPlot.PlotModel.DefaultFont">
            <summary>
            Gets or sets the default font.
            </summary>
            <value> The default font. </value>
            <remarks>
            This font is used for text on axes, series, legends and plot titles unless other fonts are specified.
            </remarks>
        </member>
        <member name="P:OxyPlot.PlotModel.DefaultFontSize">
            <summary>
            Gets or sets the default size of the fonts.
            </summary>
            <value>
            The default size of the font.
            </value>
        </member>
        <member name="P:OxyPlot.PlotModel.ActualCulture">
            <summary>
            Gets the actual culture.
            </summary>
        </member>
        <member name="P:OxyPlot.PlotModel.ActualPlotMargins">
            <summary>
            Gets the actual plot margins.
            </summary>
            <value> The actual plot margins. </value>
        </member>
        <member name="P:OxyPlot.PlotModel.PlotControl">
            <summary>
            Gets the plot control that renders this plot.
            </summary>
            <remarks>
            Only one PlotControl can render the plot at the same time.
            </remarks>
            <value>The plot control.</value>
        </member>
        <member name="P:OxyPlot.PlotModel.Annotations">
            <summary>
            Gets or sets the annotations.
            </summary>
            <value> The annotations. </value>
        </member>
        <member name="P:OxyPlot.PlotModel.AutoAdjustPlotMargins">
            <summary>
            Gets or sets a value indicating whether to auto adjust plot margins.
            </summary>
        </member>
        <member name="P:OxyPlot.PlotModel.Axes">
            <summary>
            Gets or sets the axes.
            </summary>
            <value> The axes. </value>
        </member>
        <member name="P:OxyPlot.PlotModel.Background">
            <summary>
            Gets or sets the color of the background of the plot.
            </summary>
        </member>
        <member name="P:OxyPlot.PlotModel.Culture">
            <summary>
            Gets or sets the culture.
            </summary>
            <value> The culture. </value>
        </member>
        <member name="P:OxyPlot.PlotModel.DefaultColors">
            <summary>
            Gets or sets the default colors.
            </summary>
            <value> The default colors. </value>
        </member>
        <member name="P:OxyPlot.PlotModel.IsLegendVisible">
            <summary>
            Gets or sets a value indicating whether the legend is visible. The titles of the series must be set to use the legend.
            </summary>
        </member>
        <member name="P:OxyPlot.PlotModel.LegendArea">
            <summary>
            Gets the legend area.
            </summary>
            <value> The legend area. </value>
        </member>
        <member name="P:OxyPlot.PlotModel.LegendBackground">
            <summary>
            Gets or sets the background color of the legend. Use null for no background.
            </summary>
            <value> The legend background. </value>
        </member>
        <member name="P:OxyPlot.PlotModel.LegendBorder">
            <summary>
            Gets or sets the border color of the legend.
            </summary>
            <value> The legend border. </value>
        </member>
        <member name="P:OxyPlot.PlotModel.LegendBorderThickness">
            <summary>
            Gets or sets the thickness of the legend border. Use 0 for no border.
            </summary>
            <value> The legend border thickness. </value>
        </member>
        <member name="P:OxyPlot.PlotModel.LegendColumnSpacing">
            <summary>
            Gets or sets the legend column spacing.
            </summary>
            <value> The legend column spacing. </value>
        </member>
        <member name="P:OxyPlot.PlotModel.LegendFont">
            <summary>
            Gets or sets the legend font.
            </summary>
            <value> The legend font. </value>
        </member>
        <member name="P:OxyPlot.PlotModel.LegendFontSize">
            <summary>
            Gets or sets the size of the legend font.
            </summary>
            <value> The size of the legend font. </value>
        </member>
        <member name="P:OxyPlot.PlotModel.LegendTextColor">
            <summary>
            Gets or sets the color of the legend text.
            </summary>
            <value>
            The color of the legend text.
            </value>
            <remarks>
            If this value is null, the TextColor will be used.
            </remarks>
        </member>
        <member name="P:OxyPlot.PlotModel.LegendFontWeight">
            <summary>
            Gets or sets the legend font weight.
            </summary>
            <value> The legend font weight. </value>
        </member>
        <member name="P:OxyPlot.PlotModel.LegendItemAlignment">
            <summary>
            Gets or sets the legend item alignment.
            </summary>
            <value> The legend item alignment. </value>
        </member>
        <member name="P:OxyPlot.PlotModel.LegendItemOrder">
            <summary>
            Gets or sets the legend item order.
            </summary>
            <value> The legend item order. </value>
        </member>
        <member name="P:OxyPlot.PlotModel.LegendItemSpacing">
            <summary>
            Gets or sets the legend spacing.
            </summary>
            <value> The legend spacing. </value>
        </member>
        <member name="P:OxyPlot.PlotModel.LegendMargin">
            <summary>
            Gets or sets the legend margin.
            </summary>
            <value> The legend margin. </value>
        </member>
        <member name="P:OxyPlot.PlotModel.LegendMaxWidth">
            <summary>
            Gets or sets the max width of the legend.
            </summary>
            <value>The max width of the legend.</value>
        </member>
        <member name="P:OxyPlot.PlotModel.LegendOrientation">
            <summary>
            Gets or sets the legend orientation.
            </summary>
            <value> The legend orientation. </value>
        </member>
        <member name="P:OxyPlot.PlotModel.LegendPadding">
            <summary>
            Gets or sets the legend padding.
            </summary>
            <value> The legend padding. </value>
        </member>
        <member name="P:OxyPlot.PlotModel.LegendPlacement">
            <summary>
            Gets or sets the legend placement.
            </summary>
            <value> The legend placement. </value>
        </member>
        <member name="P:OxyPlot.PlotModel.LegendPosition">
            <summary>
            Gets or sets the legend position.
            </summary>
            <value> The legend position. </value>
        </member>
        <member name="P:OxyPlot.PlotModel.LegendSymbolLength">
            <summary>
            Gets or sets the length of the legend symbols (the default value is 16).
            </summary>
        </member>
        <member name="P:OxyPlot.PlotModel.LegendSymbolMargin">
            <summary>
            Gets or sets the legend symbol margins (distance between the symbol and the text).
            </summary>
            <value> The legend symbol margin. </value>
        </member>
        <member name="P:OxyPlot.PlotModel.LegendSymbolPlacement">
            <summary>
            Gets or sets the legend symbol placement.
            </summary>
            <value> The legend symbol placement. </value>
        </member>
        <member name="P:OxyPlot.PlotModel.LegendTitle">
            <summary>
            Gets or sets the legend title.
            </summary>
            <value> The legend title. </value>
        </member>
        <member name="P:OxyPlot.PlotModel.LegendTitleColor">
            <summary>
            Gets or sets the color of the legend title.
            </summary>
            <value>
            The color of the legend title.
            </value>
            <remarks>
            If this value is null, the TextColor will be used.
            </remarks>
        </member>
        <member name="P:OxyPlot.PlotModel.LegendTitleFont">
            <summary>
            Gets or sets the legend title font.
            </summary>
            <value> The legend title font. </value>
        </member>
        <member name="P:OxyPlot.PlotModel.LegendTitleFontSize">
            <summary>
            Gets or sets the size of the legend title font.
            </summary>
            <value> The size of the legend title font. </value>
        </member>
        <member name="P:OxyPlot.PlotModel.LegendTitleFontWeight">
            <summary>
            Gets or sets the legend title font weight.
            </summary>
            <value> The legend title font weight. </value>
        </member>
        <member name="P:OxyPlot.PlotModel.Padding">
            <summary>
            Gets or sets the padding around the plot.
            </summary>
            <value> The padding. </value>
        </member>
        <member name="P:OxyPlot.PlotModel.Width">
            <summary>
            Gets the total width of the plot (in device units).
            </summary>
        </member>
        <member name="P:OxyPlot.PlotModel.Height">
            <summary>
            Gets the total height of the plot (in device units).
            </summary>
        </member>
        <member name="P:OxyPlot.PlotModel.PlotAndAxisArea">
            <summary>
            Gets the area including both the plot and the axes. Outside legends are rendered outside this rectangle.
            </summary>
            <value> The plot and axis area. </value>
        </member>
        <member name="P:OxyPlot.PlotModel.PlotArea">
            <summary>
            Gets the plot area. This area is used to draw the series (not including axes or legends).
            </summary>
            <value> The plot area. </value>
        </member>
        <member name="P:OxyPlot.PlotModel.AxisTierDistance">
            <summary>
            Gets or sets the distance between two neighbourhood tiers of the same AxisPosition.
            </summary>
        </member>
        <member name="P:OxyPlot.PlotModel.PlotAreaBackground">
            <summary>
            Gets or sets the color of the background of the plot area.
            </summary>
        </member>
        <member name="P:OxyPlot.PlotModel.PlotAreaBorderColor">
            <summary>
            Gets or sets the color of the border around the plot area.
            </summary>
            <value> The color of the box. </value>
        </member>
        <member name="P:OxyPlot.PlotModel.PlotAreaBorderThickness">
            <summary>
            Gets or sets the thickness of the border around the plot area.
            </summary>
            <value> The box thickness. </value>
        </member>
        <member name="P:OxyPlot.PlotModel.PlotMargins">
            <summary>
            Gets or sets the minimum margins around the plot (this should be large enough to fit the axes). The default value is (60, 4, 4, 40). Set AutoAdjustPlotMargins if you want the margins to be adjusted when the axes require more space.
            </summary>
        </member>
        <member name="P:OxyPlot.PlotModel.PlotType">
            <summary>
            Gets or sets the type of the coordinate system.
            </summary>
            <value> The type of the plot. </value>
        </member>
        <member name="P:OxyPlot.PlotModel.SelectionColor">
            <summary>
            Gets or sets the color of the selection.
            </summary>
            <value>
            The color of the selection.
            </value>
        </member>
        <member name="P:OxyPlot.PlotModel.Series">
            <summary>
            Gets or sets the series.
            </summary>
            <value> The series. </value>
        </member>
        <member name="P:OxyPlot.PlotModel.Subtitle">
            <summary>
            Gets or sets the subtitle.
            </summary>
            <value> The subtitle. </value>
        </member>
        <member name="P:OxyPlot.PlotModel.SubtitleFont">
            <summary>
            Gets or sets the subtitle font. If this property is null, the Title font will be used.
            </summary>
            <value> The subtitle font. </value>
        </member>
        <member name="P:OxyPlot.PlotModel.SubtitleFontSize">
            <summary>
            Gets or sets the size of the subtitle font.
            </summary>
            <value> The size of the subtitle font. </value>
        </member>
        <member name="P:OxyPlot.PlotModel.SubtitleFontWeight">
            <summary>
            Gets or sets the subtitle font weight.
            </summary>
            <value> The subtitle font weight. </value>
        </member>
        <member name="P:OxyPlot.PlotModel.TextColor">
            <summary>
            Gets or sets the default color of the text in the plot (titles, legends, annotations, axes).
            </summary>
            <value> The color of the text. </value>
        </member>
        <member name="P:OxyPlot.PlotModel.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value> The title. </value>
        </member>
        <member name="P:OxyPlot.PlotModel.TitleColor">
            <summary>
            Gets or sets the color of the title.
            </summary>
            <value>
            The color of the title.
            </value>
            <remarks>
            If the value is null, the TextColor will be used.
            </remarks>
        </member>
        <member name="P:OxyPlot.PlotModel.SubtitleColor">
            <summary>
            Gets or sets the color of the subtitle.
            </summary>
            <value>
            The color of the subtitle.
            </value>
        </member>
        <member name="P:OxyPlot.PlotModel.TitleArea">
            <summary>
            Gets the title area.
            </summary>
            <value> The title area. </value>
        </member>
        <member name="P:OxyPlot.PlotModel.TitleFont">
            <summary>
            Gets or sets the title font.
            </summary>
            <value> The title font. </value>
        </member>
        <member name="P:OxyPlot.PlotModel.TitleFontSize">
            <summary>
            Gets or sets the size of the title font.
            </summary>
            <value> The size of the title font. </value>
        </member>
        <member name="P:OxyPlot.PlotModel.TitleFontWeight">
            <summary>
            Gets or sets the title font weight.
            </summary>
            <value> The title font weight. </value>
        </member>
        <member name="P:OxyPlot.PlotModel.TitlePadding">
            <summary>
            Gets or sets the padding around the title.
            </summary>
            <value> The title padding. </value>
        </member>
        <member name="P:OxyPlot.PlotModel.DefaultAngleAxis">
            <summary>
            Gets the default angle axis.
            </summary>
            <value> The default angle axis. </value>
        </member>
        <member name="P:OxyPlot.PlotModel.DefaultMagnitudeAxis">
            <summary>
            Gets the default magnitude axis.
            </summary>
            <value> The default magnitude axis. </value>
        </member>
        <member name="P:OxyPlot.PlotModel.DefaultXAxis">
            <summary>
            Gets the default X axis.
            </summary>
            <value> The default X axis. </value>
        </member>
        <member name="P:OxyPlot.PlotModel.DefaultYAxis">
            <summary>
            Gets the default Y axis.
            </summary>
            <value> The default Y axis. </value>
        </member>
        <member name="P:OxyPlot.PlotModel.DefaultColorAxis">
            <summary>
            Gets the default color axis.
            </summary>
            <value> The default color axis. </value>
        </member>
        <member name="P:OxyPlot.PlotModel.ActualTitleFont">
            <summary>
            Gets the actual title font.
            </summary>
        </member>
        <member name="P:OxyPlot.PlotModel.ActualSubtitleFont">
            <summary>
            Gets the actual subtitle font.
            </summary>
        </member>
        <member name="P:OxyPlot.PlotModel.VisibleSeries">
            <summary>
            Gets the visible series.
            </summary>
            <value> The visible series. </value>
        </member>
        <member name="E:OxyPlot.PlotModel.MouseDown">
            <summary>
            Occurs when a mouse button is pressed down on the model.
            </summary>
        </member>
        <member name="E:OxyPlot.PlotModel.MouseMove">
            <summary>
            Occurs when the mouse is moved on the plot element (only occurs after MouseDown).
            </summary>
        </member>
        <member name="E:OxyPlot.PlotModel.MouseUp">
            <summary>
            Occurs when the mouse button is released on the plot element.
            </summary>
        </member>
        <member name="T:OxyPlot.AngleAxisRenderer">
            <summary>
            Provides functionality to render <see cref="T:OxyPlot.Axes.AngleAxis"/>.
            </summary>
        </member>
        <member name="T:OxyPlot.AxisRendererBase">
            <summary>
            Provides an abstract base class for axis renderers.
            </summary>
        </member>
        <member name="F:OxyPlot.AxisRendererBase.Plot">
            <summary>
            The plot.
            </summary>
        </member>
        <member name="F:OxyPlot.AxisRendererBase.rc">
            <summary>
            The render context.
            </summary>
        </member>
        <member name="F:OxyPlot.AxisRendererBase.AxislinePen">
            <summary>
            The axis lines pen.
            </summary>
        </member>
        <member name="F:OxyPlot.AxisRendererBase.ExtraPen">
            <summary>
            The extra grid lines pen.
            </summary>
        </member>
        <member name="F:OxyPlot.AxisRendererBase.MajorLabelValues">
            <summary>
            The major label values.
            </summary>
        </member>
        <member name="F:OxyPlot.AxisRendererBase.MajorPen">
            <summary>
            The major grid lines pen.
            </summary>
        </member>
        <member name="F:OxyPlot.AxisRendererBase.MajorTickPen">
            <summary>
            The major tick pen.
            </summary>
        </member>
        <member name="F:OxyPlot.AxisRendererBase.MajorTickValues">
            <summary>
            The major tick values.
            </summary>
        </member>
        <member name="F:OxyPlot.AxisRendererBase.MinorPen">
            <summary>
            The minor grid lines pen.
            </summary>
        </member>
        <member name="F:OxyPlot.AxisRendererBase.MinorTickPen">
            <summary>
            The minor tick pen.
            </summary>
        </member>
        <member name="F:OxyPlot.AxisRendererBase.MinorTickValues">
            <summary>
            The minor tick values.
            </summary>
        </member>
        <member name="F:OxyPlot.AxisRendererBase.ZeroPen">
            <summary>
            The zero grid line pen.
            </summary>
        </member>
        <member name="M:OxyPlot.AxisRendererBase.#ctor(OxyPlot.IRenderContext,OxyPlot.PlotModel)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.AxisRendererBase"/> class.
            </summary>
            <param name="rc">
            The render context.
            </param>
            <param name="plot">
            The plot.
            </param>
        </member>
        <member name="M:OxyPlot.AxisRendererBase.Render(OxyPlot.Axes.Axis,System.Int32)">
            <summary>
            Renders the specified axis.
            </summary>
            <param name="axis">The axis.</param>
            <param name="pass">The pass.</param>
        </member>
        <member name="M:OxyPlot.AxisRendererBase.CreatePens(OxyPlot.Axes.Axis)">
            <summary>
            The create pens.
            </summary>
            <param name="axis">
            The axis.
            </param>
        </member>
        <member name="M:OxyPlot.AxisRendererBase.GetTickPositions(OxyPlot.Axes.Axis,OxyPlot.Axes.TickStyle,System.Double,OxyPlot.Axes.AxisPosition,System.Double@,System.Double@)">
            <summary>
            The get tick positions.
            </summary>
            <param name="axis">
            The axis.
            </param>
            <param name="glt">
            The glt.
            </param>
            <param name="ticksize">
            The ticksize.
            </param>
            <param name="position">
            The position.
            </param>
            <param name="x0">
            The x 0.
            </param>
            <param name="x1">
            The x 1.
            </param>
        </member>
        <member name="M:OxyPlot.AxisRendererBase.IsWithin(System.Double,System.Double,System.Double)">
            <summary>
            Determines whether the specified value is within the specified range.
            </summary>
            <param name="d">The value to check.</param>
            <param name="min">The minium value of the range.</param>
            <param name="max">The maximum value of the range.</param>
            <returns>
             <c>true</c> if the specified value is within the range; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:OxyPlot.AngleAxisRenderer.#ctor(OxyPlot.IRenderContext,OxyPlot.PlotModel)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.AngleAxisRenderer"/> class.
            </summary>
            <param name="rc">
            The render context.
            </param>
            <param name="plot">
            The plot.
            </param>
        </member>
        <member name="M:OxyPlot.AngleAxisRenderer.Render(OxyPlot.Axes.Axis,System.Int32)">
            <summary>
            Renders the specified axis.
            </summary>
            <param name="axis">The axis.</param>
            <param name="pass">The render pass.</param>
            <exception cref="T:System.InvalidOperationException">Magnitude axis not defined.</exception>
        </member>
        <member name="T:OxyPlot.HorizontalAndVerticalAxisRenderer">
            <summary>
            Preovides functionality to render horizontal and vertical axes.
            </summary>
        </member>
        <member name="M:OxyPlot.HorizontalAndVerticalAxisRenderer.#ctor(OxyPlot.IRenderContext,OxyPlot.PlotModel)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.HorizontalAndVerticalAxisRenderer"/> class.
            </summary>
            <param name="rc">
            The render context.
            </param>
            <param name="plot">
            The plot.
            </param>
        </member>
        <member name="M:OxyPlot.HorizontalAndVerticalAxisRenderer.Render(OxyPlot.Axes.Axis,System.Int32)">
            <summary>
            Renders the specified axis.
            </summary>
            <param name="axis">The axis.</param>
            <param name="pass">The pass.</param>
        </member>
        <member name="M:OxyPlot.HorizontalAndVerticalAxisRenderer.GetAxisTitlePositionAndAlignment(OxyPlot.Axes.Axis,System.Double,System.Double@,OxyPlot.HorizontalAlignment@,OxyPlot.VerticalAlignment@)">
            <summary>
            Gets the axis title position, rotation and alignment.
            </summary>
            <param name="axis">
            The axis.
            </param>
            <param name="titlePosition">
            The title position.
            </param>
            <param name="angle">
            The angle.
            </param>
            <param name="halign">
            The horizontal alignment.
            </param>
            <param name="valign">
            The vertical alignment.
            </param>
            <returns>
            The <see cref="T:OxyPlot.ScreenPoint"/>.
            </returns>
        </member>
        <member name="M:OxyPlot.HorizontalAndVerticalAxisRenderer.GetRotatedAlignments(System.Double,OxyPlot.HorizontalAlignment,OxyPlot.VerticalAlignment,OxyPlot.HorizontalAlignment@,OxyPlot.VerticalAlignment@)">
            <summary>
            Gets the alignments given the specified rotation angle.
            </summary>
            <param name="angle">
            The angle.
            </param>
            <param name="defaultHorizontalAlignment">
            The default horizontal alignment.
            </param>
            <param name="defaultVerticalAlignment">
            The default vertical alignment.
            </param>
            <param name="ha">
            The rotated horizontal alignment.
            </param>
            <param name="va">
            The rotated vertical alignment.
            </param>
        </member>
        <member name="M:OxyPlot.HorizontalAndVerticalAxisRenderer.Lerp(System.Double,System.Double,System.Double)">
            <summary>
            Linear interpolation
            http://en.wikipedia.org/wiki/Linear_interpolation
            </summary>
            <param name="x0">
            The x0.
            </param>
            <param name="x1">
            The x1.
            </param>
            <param name="f">
            The interpolation factor.
            </param>
            <returns>
            The interpolated value.
            </returns>
        </member>
        <member name="M:OxyPlot.HorizontalAndVerticalAxisRenderer.SnapTo(System.Double,System.Double@)">
            <summary>
            Snaps v to value if it is within the the specified distance.
            </summary>
            <param name="target">
            The target value.
            </param>
            <param name="v">
            The value to snap.
            </param>
            <param name="eps">
            The distance tolerance.
            </param>
        </member>
        <member name="M:OxyPlot.HorizontalAndVerticalAxisRenderer.RenderAxisTitle(OxyPlot.Axes.Axis,System.Double)">
            <summary>
            Renders the axis title.
            </summary>
            <param name="axis">
            The axis.
            </param>
            <param name="titlePosition">
            The title position.
            </param>
        </member>
        <member name="M:OxyPlot.HorizontalAndVerticalAxisRenderer.RenderMajorItems(OxyPlot.Axes.Axis,System.Double,System.Double)">
            <summary>
            Renders the major items.
            </summary>
            <param name="axis">
            The axis.
            </param>
            <param name="axisPosition">
            The axis position.
            </param>
            <param name="titlePosition">
            The title position.
            </param>
        </member>
        <member name="M:OxyPlot.HorizontalAndVerticalAxisRenderer.RenderMinorItems(OxyPlot.Axes.Axis,System.Double)">
            <summary>
            Renders the minor items.
            </summary>
            <param name="axis">
            The axis.
            </param>
            <param name="axisPosition">
            The axis position.
            </param>
        </member>
        <member name="T:OxyPlot.IRenderContext">
            <summary>
            Defines rendering functionality.
            </summary>
        </member>
        <member name="M:OxyPlot.IRenderContext.DrawEllipse(OxyPlot.OxyRect,OxyPlot.OxyColor,OxyPlot.OxyColor,System.Double)">
            <summary>
            Draws an ellipse.
            </summary>
            <param name="rect">
            The rectangle.
            </param>
            <param name="fill">
            The fill color.
            </param>
            <param name="stroke">
            The stroke color.
            </param>
            <param name="thickness">
            The thickness.
            </param>
        </member>
        <member name="M:OxyPlot.IRenderContext.DrawEllipses(System.Collections.Generic.IList{OxyPlot.OxyRect},OxyPlot.OxyColor,OxyPlot.OxyColor,System.Double)">
            <summary>
            Draws the collection of ellipses, where all have the same stroke and fill.
            This performs better than calling DrawEllipse multiple times.
            </summary>
            <param name="rectangles">
            The rectangles.
            </param>
            <param name="fill">
            The fill color.
            </param>
            <param name="stroke">
            The stroke color.
            </param>
            <param name="thickness">
            The stroke thickness.
            </param>
        </member>
        <member name="M:OxyPlot.IRenderContext.DrawLine(System.Collections.Generic.IList{OxyPlot.ScreenPoint},OxyPlot.OxyColor,System.Double,System.Double[],OxyPlot.OxyPenLineJoin,System.Boolean)">
            <summary>
            Draws the polyline from the specified points.
            </summary>
            <param name="points">
            The points.
            </param>
            <param name="stroke">
            The stroke color.
            </param>
            <param name="thickness">
            The stroke thickness.
            </param>
            <param name="dashArray">
            The dash array.
            </param>
            <param name="lineJoin">
            The line join type.
            </param>
            <param name="aliased">
            if set to <c>true</c> the shape will be aliased.
            </param>
        </member>
        <member name="M:OxyPlot.IRenderContext.DrawLineSegments(System.Collections.Generic.IList{OxyPlot.ScreenPoint},OxyPlot.OxyColor,System.Double,System.Double[],OxyPlot.OxyPenLineJoin,System.Boolean)">
            <summary>
            Draws the multiple line segments defined by points (0,1) (2,3) (4,5) etc.
            This should have better performance than calling DrawLine for each segment.
            </summary>
            <param name="points">
            The points.
            </param>
            <param name="stroke">
            The stroke color.
            </param>
            <param name="thickness">
            The stroke thickness.
            </param>
            <param name="dashArray">
            The dash array.
            </param>
            <param name="lineJoin">
            The line join type.
            </param>
            <param name="aliased">
            if set to <c>true</c> the shape will be aliased.
            </param>
        </member>
        <member name="M:OxyPlot.IRenderContext.DrawPolygon(System.Collections.Generic.IList{OxyPlot.ScreenPoint},OxyPlot.OxyColor,OxyPlot.OxyColor,System.Double,System.Double[],OxyPlot.OxyPenLineJoin,System.Boolean)">
            <summary>
            Draws the polygon from the specified points. The polygon can have stroke and/or fill.
            </summary>
            <param name="points">
            The points.
            </param>
            <param name="fill">
            The fill color.
            </param>
            <param name="stroke">
            The stroke color.
            </param>
            <param name="thickness">
            The stroke thickness.
            </param>
            <param name="dashArray">
            The dash array.
            </param>
            <param name="lineJoin">
            The line join type.
            </param>
            <param name="aliased">
            if set to <c>true</c> the shape will be aliased.
            </param>
        </member>
        <member name="M:OxyPlot.IRenderContext.DrawPolygons(System.Collections.Generic.IList{System.Collections.Generic.IList{OxyPlot.ScreenPoint}},OxyPlot.OxyColor,OxyPlot.OxyColor,System.Double,System.Double[],OxyPlot.OxyPenLineJoin,System.Boolean)">
            <summary>
            Draws a collection of polygons, where all polygons have the same stroke and fill.
            This performs better than calling DrawPolygon multiple times.
            </summary>
            <param name="polygons">
            The polygons.
            </param>
            <param name="fill">
            The fill color.
            </param>
            <param name="stroke">
            The stroke color.
            </param>
            <param name="thickness">
            The stroke thickness.
            </param>
            <param name="dashArray">
            The dash array.
            </param>
            <param name="lineJoin">
            The line join type.
            </param>
            <param name="aliased">
            if set to <c>true</c> the shape will be aliased.
            </param>
        </member>
        <member name="M:OxyPlot.IRenderContext.DrawRectangle(OxyPlot.OxyRect,OxyPlot.OxyColor,OxyPlot.OxyColor,System.Double)">
            <summary>
            Draws the rectangle.
            </summary>
            <param name="rect">
            The rectangle.
            </param>
            <param name="fill">
            The fill color.
            </param>
            <param name="stroke">
            The stroke color.
            </param>
            <param name="thickness">
            The stroke thickness.
            </param>
        </member>
        <member name="M:OxyPlot.IRenderContext.DrawRectangles(System.Collections.Generic.IList{OxyPlot.OxyRect},OxyPlot.OxyColor,OxyPlot.OxyColor,System.Double)">
            <summary>
            Draws a collection of rectangles, where all have the same stroke and fill.
            This performs better than calling DrawRectangle multiple times.
            </summary>
            <param name="rectangles">
            The rectangles.
            </param>
            <param name="fill">
            The fill color.
            </param>
            <param name="stroke">
            The stroke color.
            </param>
            <param name="thickness">
            The stroke thickness.
            </param>
        </member>
        <member name="M:OxyPlot.IRenderContext.DrawText(OxyPlot.ScreenPoint,System.String,OxyPlot.OxyColor,System.String,System.Double,System.Double,System.Double,OxyPlot.HorizontalAlignment,OxyPlot.VerticalAlignment,System.Nullable{OxyPlot.OxySize})">
            <summary>
            Draws the text.
            </summary>
            <param name="p">
            The position.
            </param>
            <param name="text">
            The text.
            </param>
            <param name="fill">
            The fill color.
            </param>
            <param name="fontFamily">
            The font family.
            </param>
            <param name="fontSize">
            Size of the font.
            </param>
            <param name="fontWeight">
            The font weight.
            </param>
            <param name="rotate">
            The rotation angle.
            </param>
            <param name="halign">
            The horizontal alignment.
            </param>
            <param name="valign">
            The vertical alignment.
            </param>
            <param name="maxSize">
            The maximum size of the text.
            </param>
        </member>
        <member name="M:OxyPlot.IRenderContext.MeasureText(System.String,System.String,System.Double,System.Double)">
            <summary>
            Measures the text.
            </summary>
            <param name="text">
            The text.
            </param>
            <param name="fontFamily">
            The font family.
            </param>
            <param name="fontSize">
            Size of the font.
            </param>
            <param name="fontWeight">
            The font weight.
            </param>
            <returns>
            The text size.
            </returns>
        </member>
        <member name="M:OxyPlot.IRenderContext.SetToolTip(System.String)">
            <summary>
            Sets the tool tip for the following items.
            </summary>
            <params>
            This is only used in the plot controls.
            </params>
            <param name="text">
            The text in the tooltip.
            </param>
        </member>
        <member name="M:OxyPlot.IRenderContext.CleanUp">
            <summary>
            Cleans up resources not in use.
            </summary>
            <remarks>
            This method is called at the end of each rendering.
            </remarks>
        </member>
        <member name="M:OxyPlot.IRenderContext.GetImageInfo(OxyPlot.OxyImage)">
            <summary>
            Gets the size of the specified image.
            </summary>
            <param name="source">The image source.</param>
            <returns>The image info.</returns>
        </member>
        <member name="M:OxyPlot.IRenderContext.DrawImage(OxyPlot.OxyImage,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Draws the specified portion of the specified <see cref="T:OxyPlot.OxyImage"/> at the specified location and with the specified size.
            </summary>
            <param name="source">The source.</param>
            <param name="srcX">The x-coordinate of the upper-left corner of the portion of the source image to draw.</param>
            <param name="srcY">The y-coordinate of the upper-left corner of the portion of the source image to draw.</param>
            <param name="srcWidth">Width of the portion of the source image to draw.</param>
            <param name="srcHeight">Height of the portion of the source image to draw.</param>
            <param name="destX">The x-coordinate of the upper-left corner of drawn image.</param>
            <param name="destY">The y-coordinate of the upper-left corner of drawn image.</param>
            <param name="destWidth">The width of the drawn image.</param>
            <param name="destHeight">The height of the drawn image.</param>
            <param name="opacity">The opacity.</param>
            <param name="interpolate">interpolate if set to <c>true</c>.</param>
        </member>
        <member name="M:OxyPlot.IRenderContext.SetClip(OxyPlot.OxyRect)">
            <summary>
            Sets the clip rectangle.
            </summary>
            <param name="rect">The clip rectangle.</param>
            <returns>True if the clip rectangle was set.</returns>
        </member>
        <member name="M:OxyPlot.IRenderContext.ResetClip">
            <summary>
            Resets the clip rectangle.
            </summary>
        </member>
        <member name="P:OxyPlot.IRenderContext.RendersToScreen">
            <summary>
            Gets a value indicating whether the context renders to screen.
            </summary>
            <value>
              <c>true</c> if the context renders to screen; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:OxyPlot.OxyImageInfo">
            <summary>
            Provides information about the size of an image.
            </summary>
        </member>
        <member name="P:OxyPlot.OxyImageInfo.Width">
            <summary>
            Gets or sets the width in pixels.
            </summary>
            <value>
            The width.
            </value>
        </member>
        <member name="P:OxyPlot.OxyImageInfo.Height">
            <summary>
            Gets or sets the height in pixels.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:OxyPlot.OxyImageInfo.DpiX">
            <summary>
            Gets or sets the horizontal resolution in dpi.
            </summary>
            <value>
            The dpi X.
            </value>
        </member>
        <member name="P:OxyPlot.OxyImageInfo.DpiY">
            <summary>
            Gets or sets the vertical resolution in dpi.
            </summary>
            <value>
            The dpi Y.
            </value>
        </member>
        <member name="T:OxyPlot.MagnitudeAxisRenderer">
            <summary>
            Provides functionality to render <see cref="T:OxyPlot.Axes.MagnitudeAxis"/>.
            </summary>
        </member>
        <member name="M:OxyPlot.MagnitudeAxisRenderer.#ctor(OxyPlot.IRenderContext,OxyPlot.PlotModel)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.MagnitudeAxisRenderer"/> class.
            </summary>
            <param name="rc">
            The render context.
            </param>
            <param name="plot">
            The plot.
            </param>
        </member>
        <member name="M:OxyPlot.MagnitudeAxisRenderer.Render(OxyPlot.Axes.Axis,System.Int32)">
            <summary>
            Renders the specified axis.
            </summary>
            <param name="axis">The axis.</param>
            <param name="pass">The pass.</param>
            <exception cref="T:System.NullReferenceException">Angle axis should not be null.</exception>
        </member>
        <member name="T:OxyPlot.MathRenderingExtensions">
            <summary>
            Provides functionality to render mathematic expressions (TeX syntax).
            </summary>
        </member>
        <member name="M:OxyPlot.MathRenderingExtensions.#cctor">
            <summary>
            Initializes static members of the <see cref="T:OxyPlot.MathRenderingExtensions"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.MathRenderingExtensions.DrawMathText(OxyPlot.IRenderContext,OxyPlot.ScreenPoint,System.String,OxyPlot.OxyColor,System.String,System.Double,System.Double,System.Double,OxyPlot.HorizontalAlignment,OxyPlot.VerticalAlignment,System.Nullable{OxyPlot.OxySize},System.Boolean)">
            <summary>
            Draws or measures text containing sub- and superscript.
            </summary>
            <param name="rc">The render context.</param>
            <param name="pt">The point.</param>
            <param name="text">The text.</param>
            <param name="textColor">Color of the text.</param>
            <param name="fontFamily">The font family.</param>
            <param name="fontSize">The font size.</param>
            <param name="fontWeight">The font weight.</param>
            <param name="angle">The angle.</param>
            <param name="ha">The horizontal alignment.</param>
            <param name="va">The vertical alignment.</param>
            <param name="maxsize">The maximum size of the text.</param>
            <param name="measure">Measure the size of the text if set to <c>true</c>.</param>
            <returns>The size of the text.</returns>
            <example>
            Subscript: H_{2}O
            Superscript: E=mc^{2}
            Both: A^{2}_{i,j}
            </example>
        </member>
        <member name="M:OxyPlot.MathRenderingExtensions.DrawMathText(OxyPlot.IRenderContext,OxyPlot.ScreenPoint,System.String,OxyPlot.OxyColor,System.String,System.Double,System.Double,System.Double,OxyPlot.HorizontalAlignment,OxyPlot.VerticalAlignment)">
            <summary>
            Draws text containing sub- and superscript.
            </summary>
            <param name="rc">The render context.</param>
            <param name="pt">The point.</param>
            <param name="text">The text.</param>
            <param name="textColor">Color of the text.</param>
            <param name="fontFamily">The font family.</param>
            <param name="fontSize">The font size.</param>
            <param name="fontWeight">The font weight.</param>
            <param name="angle">The angle.</param>
            <param name="ha">The horizontal alignment.</param>
            <param name="va">The vertical alignment.</param>
            <param name="maxsize">The maximum size of the text.</param>
            <example>
            Subscript: H_{2}O
            Superscript: E=mc^{2}
            Both: A^{2}_{i,j}
            </example>
        </member>
        <member name="M:OxyPlot.MathRenderingExtensions.MeasureMathText(OxyPlot.IRenderContext,System.String,System.String,System.Double,System.Double)">
            <summary>
            The measure math text.
            </summary>
            <param name="rc">
            The render context.
            </param>
            <param name="text">
            The text.
            </param>
            <param name="fontFamily">
            The font family.
            </param>
            <param name="fontSize">
            The font size.
            </param>
            <param name="fontWeight">
            The font weight.
            </param>
            <returns>
            The size of the text.
            </returns>
        </member>
        <member name="M:OxyPlot.MathRenderingExtensions.InternalDrawMathText(OxyPlot.IRenderContext,System.Double,System.Double,System.String,OxyPlot.OxyColor,System.String,System.Double,System.Double,System.Boolean)">
            <summary>
            The internal draw math text.
            </summary>
            <param name="rc">
            The render context.
            </param>
            <param name="x">
            The x.
            </param>
            <param name="y">
            The y.
            </param>
            <param name="s">
            The s.
            </param>
            <param name="textColor">
            The text color.
            </param>
            <param name="fontFamily">
            The font family.
            </param>
            <param name="fontSize">
            The font size.
            </param>
            <param name="fontWeight">
            The font weight.
            </param>
            <param name="measureOnly">
            The measure only.
            </param>
            <returns>
            The size of the text.
            </returns>
        </member>
        <member name="P:OxyPlot.MathRenderingExtensions.SubAlignment">
            <summary>
            Gets or sets the subscript alignment.
            </summary>
        </member>
        <member name="P:OxyPlot.MathRenderingExtensions.SubSize">
            <summary>
            Gets or sets the subscript size.
            </summary>
        </member>
        <member name="P:OxyPlot.MathRenderingExtensions.SuperAlignment">
            <summary>
            Gets or sets the superscript alignment.
            </summary>
        </member>
        <member name="P:OxyPlot.MathRenderingExtensions.SuperSize">
            <summary>
            Gets or sets the superscript size.
            </summary>
        </member>
        <member name="T:OxyPlot.RenderContextBase">
            <summary>
            Provides an abstract base class for rendering contexts.
            </summary>
        </member>
        <member name="M:OxyPlot.RenderContextBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.RenderContextBase"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.RenderContextBase.DrawEllipse(OxyPlot.OxyRect,OxyPlot.OxyColor,OxyPlot.OxyColor,System.Double)">
            <summary>
            Draws an ellipse.
            </summary>
            <param name="rect">
            The rectangle.
            </param>
            <param name="fill">
            The fill color.
            </param>
            <param name="stroke">
            The stroke color.
            </param>
            <param name="thickness">
            The thickness.
            </param>
        </member>
        <member name="M:OxyPlot.RenderContextBase.DrawEllipses(System.Collections.Generic.IList{OxyPlot.OxyRect},OxyPlot.OxyColor,OxyPlot.OxyColor,System.Double)">
            <summary>
            Draws the collection of ellipses, where all have the same stroke and fill.
            This performs better than calling DrawEllipse multiple times.
            </summary>
            <param name="rectangles">
            The rectangles.
            </param>
            <param name="fill">
            The fill color.
            </param>
            <param name="stroke">
            The stroke color.
            </param>
            <param name="thickness">
            The stroke thickness.
            </param>
        </member>
        <member name="M:OxyPlot.RenderContextBase.DrawLine(System.Collections.Generic.IList{OxyPlot.ScreenPoint},OxyPlot.OxyColor,System.Double,System.Double[],OxyPlot.OxyPenLineJoin,System.Boolean)">
            <summary>
            Draws the polyline from the specified points.
            </summary>
            <param name="points">
            The points.
            </param>
            <param name="stroke">
            The stroke color.
            </param>
            <param name="thickness">
            The stroke thickness.
            </param>
            <param name="dashArray">
            The dash array.
            </param>
            <param name="lineJoin">
            The line join type.
            </param>
            <param name="aliased">
            if set to <c>true</c> the shape will be aliased.
            </param>
        </member>
        <member name="M:OxyPlot.RenderContextBase.DrawLineSegments(System.Collections.Generic.IList{OxyPlot.ScreenPoint},OxyPlot.OxyColor,System.Double,System.Double[],OxyPlot.OxyPenLineJoin,System.Boolean)">
            <summary>
            Draws the multiple line segments defined by points (0,1) (2,3) (4,5) etc.
            This should have better performance than calling DrawLine for each segment.
            </summary>
            <param name="points">
            The points.
            </param>
            <param name="stroke">
            The stroke color.
            </param>
            <param name="thickness">
            The stroke thickness.
            </param>
            <param name="dashArray">
            The dash array.
            </param>
            <param name="lineJoin">
            The line join type.
            </param>
            <param name="aliased">
            if set to <c>true</c> the shape will be aliased.
            </param>
        </member>
        <member name="M:OxyPlot.RenderContextBase.DrawPolygon(System.Collections.Generic.IList{OxyPlot.ScreenPoint},OxyPlot.OxyColor,OxyPlot.OxyColor,System.Double,System.Double[],OxyPlot.OxyPenLineJoin,System.Boolean)">
            <summary>
            Draws the polygon from the specified points. The polygon can have stroke and/or fill.
            </summary>
            <param name="points">
            The points.
            </param>
            <param name="fill">
            The fill color.
            </param>
            <param name="stroke">
            The stroke color.
            </param>
            <param name="thickness">
            The stroke thickness.
            </param>
            <param name="dashArray">
            The dash array.
            </param>
            <param name="lineJoin">
            The line join type.
            </param>
            <param name="aliased">
            if set to <c>true</c> the shape will be aliased.
            </param>
        </member>
        <member name="M:OxyPlot.RenderContextBase.DrawPolygons(System.Collections.Generic.IList{System.Collections.Generic.IList{OxyPlot.ScreenPoint}},OxyPlot.OxyColor,OxyPlot.OxyColor,System.Double,System.Double[],OxyPlot.OxyPenLineJoin,System.Boolean)">
            <summary>
            Draws a collection of polygons, where all polygons have the same stroke and fill.
            This performs better than calling DrawPolygon multiple times.
            </summary>
            <param name="polygons">
            The polygons.
            </param>
            <param name="fill">
            The fill color.
            </param>
            <param name="stroke">
            The stroke color.
            </param>
            <param name="thickness">
            The stroke thickness.
            </param>
            <param name="dashArray">
            The dash array.
            </param>
            <param name="lineJoin">
            The line join type.
            </param>
            <param name="aliased">
            if set to <c>true</c> the shape will be aliased.
            </param>
        </member>
        <member name="M:OxyPlot.RenderContextBase.DrawRectangle(OxyPlot.OxyRect,OxyPlot.OxyColor,OxyPlot.OxyColor,System.Double)">
            <summary>
            Draws the rectangle.
            </summary>
            <param name="rect">
            The rectangle.
            </param>
            <param name="fill">
            The fill color.
            </param>
            <param name="stroke">
            The stroke color.
            </param>
            <param name="thickness">
            The stroke thickness.
            </param>
        </member>
        <member name="M:OxyPlot.RenderContextBase.DrawRectangles(System.Collections.Generic.IList{OxyPlot.OxyRect},OxyPlot.OxyColor,OxyPlot.OxyColor,System.Double)">
            <summary>
            Draws a collection of rectangles, where all have the same stroke and fill.
            This performs better than calling DrawRectangle multiple times.
            </summary>
            <param name="rectangles">
            The rectangles.
            </param>
            <param name="fill">
            The fill color.
            </param>
            <param name="stroke">
            The stroke color.
            </param>
            <param name="thickness">
            The stroke thickness.
            </param>
        </member>
        <member name="M:OxyPlot.RenderContextBase.DrawText(OxyPlot.ScreenPoint,System.String,OxyPlot.OxyColor,System.String,System.Double,System.Double,System.Double,OxyPlot.HorizontalAlignment,OxyPlot.VerticalAlignment,System.Nullable{OxyPlot.OxySize})">
            <summary>
            Draws the text.
            </summary>
            <param name="p">
            The p.
            </param>
            <param name="text">
            The text.
            </param>
            <param name="fill">
            The fill color.
            </param>
            <param name="fontFamily">
            The font family.
            </param>
            <param name="fontSize">
            Size of the font.
            </param>
            <param name="fontWeight">
            The font weight.
            </param>
            <param name="rotate">
            The rotation angle.
            </param>
            <param name="halign">
            The horizontal alignment.
            </param>
            <param name="valign">
            The vertical alignment.
            </param>
            <param name="maxSize">
            The maximum size of the text.
            </param>
        </member>
        <member name="M:OxyPlot.RenderContextBase.MeasureText(System.String,System.String,System.Double,System.Double)">
            <summary>
            Measures the text.
            </summary>
            <param name="text">
            The text.
            </param>
            <param name="fontFamily">
            The font family.
            </param>
            <param name="fontSize">
            Size of the font.
            </param>
            <param name="fontWeight">
            The font weight.
            </param>
            <returns>
            The text size.
            </returns>
        </member>
        <member name="M:OxyPlot.RenderContextBase.SetToolTip(System.String)">
            <summary>
            Sets the tool tip for the following items.
            </summary>
            <param name="text">
            The text in the tooltip.
            </param>
            <params>
            This is only used in the plot controls.
            </params>
        </member>
        <member name="M:OxyPlot.RenderContextBase.CleanUp">
            <summary>
            Cleans up resources not in use.
            </summary>
            <remarks>
            This method is called at the end of each rendering.
            </remarks>
        </member>
        <member name="M:OxyPlot.RenderContextBase.GetImageInfo(OxyPlot.OxyImage)">
            <summary>
            Gets the size of the specified image.
            </summary>
            <param name="source">The image source.</param>
            <returns>
            The image info.
            </returns>
        </member>
        <member name="M:OxyPlot.RenderContextBase.DrawImage(OxyPlot.OxyImage,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Draws the image.
            </summary>
            <param name="source">The source.</param>
            <param name="srcX">The SRC X.</param>
            <param name="srcY">The SRC Y.</param>
            <param name="srcWidth">Width of the SRC.</param>
            <param name="srcHeight">Height of the SRC.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="w">The w.</param>
            <param name="h">The h.</param>
            <param name="opacity">The opacity.</param>
            <param name="interpolate">interpolate if set to <c>true</c>.</param>
        </member>
        <member name="M:OxyPlot.RenderContextBase.SetClip(OxyPlot.OxyRect)">
            <summary>
            Sets the clip rectangle.
            </summary>
            <param name="rect">The clip rectangle.</param>
            <returns>
            True if the clip rectangle was set.
            </returns>
        </member>
        <member name="M:OxyPlot.RenderContextBase.ResetClip">
            <summary>
            Resets the clip rectangle.
            </summary>
        </member>
        <member name="P:OxyPlot.RenderContextBase.RendersToScreen">
            <summary>
            Gets or sets a value indicating whether the context renders to screen.
            </summary>
            <value>
            <c>true</c> if the context renders to screen; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:OxyPlot.RenderingExtensions">
            <summary>
            Provides extension methods for <see cref="T:OxyPlot.IRenderContext"/>.
            </summary>
        </member>
        <member name="F:OxyPlot.RenderingExtensions.M1">
            <summary>
            The vertical distance to the bottom points of the triangles.
            </summary>
        </member>
        <member name="F:OxyPlot.RenderingExtensions.M2">
            <summary>
            The vertical distance to the top points of the triangles .
            </summary>
        </member>
        <member name="F:OxyPlot.RenderingExtensions.M3">
            <summary>
            The horizontal/vertical distance to the end points of the stars.
            </summary>
        </member>
        <member name="M:OxyPlot.RenderingExtensions.DrawClippedLine(OxyPlot.IRenderContext,System.Collections.Generic.IList{OxyPlot.ScreenPoint},OxyPlot.OxyRect,System.Double,OxyPlot.OxyColor,System.Double,OxyPlot.LineStyle,OxyPlot.OxyPenLineJoin,System.Boolean)">
            <summary>
            Draws the clipped line.
            </summary>
            <param name="rc">The render context.</param>
            <param name="points">The points.</param>
            <param name="clippingRectangle">The clipping rectangle.</param>
            <param name="minDistSquared">The squared minimum distance.</param>
            <param name="stroke">The stroke.</param>
            <param name="strokeThickness">The stroke thickness.</param>
            <param name="lineStyle">The line style.</param>
            <param name="lineJoin">The line join.</param>
            <param name="aliased">if set to <c>true</c> [aliased].</param>
            <param name="pointsRendered">The points rendered callback.</param>
        </member>
        <member name="M:OxyPlot.RenderingExtensions.DrawClippedLineSegments(OxyPlot.IRenderContext,System.Collections.Generic.IList{OxyPlot.ScreenPoint},OxyPlot.OxyRect,OxyPlot.OxyColor,System.Double,OxyPlot.LineStyle,OxyPlot.OxyPenLineJoin,System.Boolean)">
            <summary>
            Draws the clipped line segments.
            </summary>
            <param name="rc">The render context.</param>
            <param name="points">The points.</param>
            <param name="clippingRectangle">The clipping rectangle.</param>
            <param name="stroke">The stroke.</param>
            <param name="strokeThickness">The stroke thickness.</param>
            <param name="lineStyle">The line style.</param>
            <param name="lineJoin">The line join.</param>
            <param name="aliased">if set to <c>true</c> [aliased].</param>
        </member>
        <member name="M:OxyPlot.RenderingExtensions.DrawImage(OxyPlot.IRenderContext,OxyPlot.OxyImage,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Draws the specified image.
            </summary>
            <param name="rc">The render context.</param>
            <param name="image">The image.</param>
            <param name="x">The destination X position.</param>
            <param name="y">The destination Y position.</param>
            <param name="w">The width.</param>
            <param name="h">The height.</param>
            <param name="opacity">The opacity.</param>
            <param name="interpolate">Interpolate the image if set to <c>true</c>.</param>
        </member>
        <member name="M:OxyPlot.RenderingExtensions.DrawClippedImage(OxyPlot.IRenderContext,OxyPlot.OxyRect,OxyPlot.OxyImage,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Draws the clipped image.
            </summary>
            <param name="rc">The render context.</param>
            <param name="clippingRect">The clipping rectangle.</param>
            <param name="source">The source.</param>
            <param name="x">The destination X position.</param>
            <param name="y">The destination Y position.</param>
            <param name="w">The width.</param>
            <param name="h">The height.</param>
            <param name="opacity">The opacity.</param>
            <param name="interpolate">interpolate if set to <c>true</c>.</param>
        </member>
        <member name="M:OxyPlot.RenderingExtensions.DrawClippedPolygon(OxyPlot.IRenderContext,System.Collections.Generic.IList{OxyPlot.ScreenPoint},OxyPlot.OxyRect,System.Double,OxyPlot.OxyColor,OxyPlot.OxyColor)">
            <summary>
            Draws the polygon within the specified clipping rectangle.
            </summary>
            <param name="rc">
            The render context.
            </param>
            <param name="points">
            The points.
            </param>
            <param name="clippingRectangle">
            The clipping rectangle.
            </param>
            <param name="minDistSquared">
            The squared minimum distance between points.
            </param>
            <param name="fill">
            The fill.
            </param>
            <param name="stroke">
            The stroke.
            </param>
            <param name="strokeThickness">
            The stroke thickness.
            </param>
            <param name="lineStyle">
            The line style.
            </param>
            <param name="lineJoin">
            The line join.
            </param>
            <param name="aliased">
            The aliased.
            </param>
        </member>
        <member name="M:OxyPlot.RenderingExtensions.DrawClippedRectangle(OxyPlot.IRenderContext,OxyPlot.OxyRect,OxyPlot.OxyRect,OxyPlot.OxyColor,OxyPlot.OxyColor,System.Double)">
            <summary>
            Draws the clipped rectangle.
            </summary>
            <param name="rc">
            The render context.
            </param>
            <param name="rect">
            The rectangle to draw.
            </param>
            <param name="clippingRectangle">
            The clipping rectangle.
            </param>
            <param name="fill">
            The fill color.
            </param>
            <param name="stroke">
            The stroke color.
            </param>
            <param name="thickness">
            The stroke thickness.
            </param>
        </member>
        <member name="M:OxyPlot.RenderingExtensions.DrawClippedRectangleAsPolygon(OxyPlot.IRenderContext,OxyPlot.OxyRect,OxyPlot.OxyRect,OxyPlot.OxyColor,OxyPlot.OxyColor,System.Double)">
            <summary>
            Draws the clipped rectangle as a polygon.
            </summary>
            <param name="rc">
            The render context.
            </param>
            <param name="rect">
            The rectangle to draw.
            </param>
            <param name="clippingRectangle">
            The clipping rectangle.
            </param>
            <param name="fill">
            The fill color.
            </param>
            <param name="stroke">
            The stroke color.
            </param>
            <param name="thickness">
            The stroke thickness.
            </param>
        </member>
        <member name="M:OxyPlot.RenderingExtensions.DrawClippedEllipse(OxyPlot.IRenderContext,OxyPlot.OxyRect,OxyPlot.OxyRect,OxyPlot.OxyColor,OxyPlot.OxyColor,System.Double)">
            <summary>
            Draws a clipped ellipse.
            </summary>
            <param name="rc">The render context.</param>
            <param name="clippingRectangle">The clipping rectangle.</param>
            <param name="rect">The rectangle.</param>
            <param name="fill">The fill color.</param>
            <param name="stroke">The stroke color.</param>
            <param name="thickness">The stroke thickness.</param>
            <param name="n">The number of points around the ellipse.</param>
        </member>
        <member name="M:OxyPlot.RenderingExtensions.DrawClippedText(OxyPlot.IRenderContext,OxyPlot.OxyRect,OxyPlot.ScreenPoint,System.String,OxyPlot.OxyColor,System.String)">
            <summary>
            Draws the clipped text.
            </summary>
            <param name="rc">The rendering context.</param>
            <param name="clippingRectangle">The clipping rectangle.</param>
            <param name="p">The position.</param>
            <param name="text">The text.</param>
            <param name="fill">The fill color.</param>
            <param name="fontFamily">The font family.</param>
            <param name="fontSize">Size of the font.</param>
            <param name="fontWeight">The font weight.</param>
            <param name="rotate">The rotation angle.</param>
            <param name="horizontalAlignment">The horizontal align.</param>
            <param name="verticalAlignment">The vertical align.</param>
            <param name="maxSize">Size of the max.</param>
        </member>
        <member name="M:OxyPlot.RenderingExtensions.DrawLine(OxyPlot.IRenderContext,System.Double,System.Double,System.Double,System.Double,OxyPlot.OxyPen)">
            <summary>
            Draws a line specified by coordinates.
            </summary>
            <param name="rc">
            The render context.
            </param>
            <param name="x0">
            The x0.
            </param>
            <param name="y0">
            The y0.
            </param>
            <param name="x1">
            The x1.
            </param>
            <param name="y1">
            The y1.
            </param>
            <param name="pen">
            The pen.
            </param>
            <param name="aliased">
            Aliased line if set to <c>true</c>.
            </param>
        </member>
        <member name="M:OxyPlot.RenderingExtensions.DrawLineSegments(OxyPlot.IRenderContext,System.Collections.Generic.IList{OxyPlot.ScreenPoint},OxyPlot.OxyPen)">
            <summary>
            Draws the line segments.
            </summary>
            <param name="rc">
            The render context.
            </param>
            <param name="points">
            The points.
            </param>
            <param name="pen">
            The pen.
            </param>
            <param name="aliased">
            if set to <c>true</c> [aliased].
            </param>
        </member>
        <member name="M:OxyPlot.RenderingExtensions.DrawMarker(OxyPlot.IRenderContext,OxyPlot.ScreenPoint,OxyPlot.OxyRect,OxyPlot.MarkerType,System.Collections.Generic.IList{OxyPlot.ScreenPoint},System.Double,OxyPlot.OxyColor,OxyPlot.OxyColor,System.Double)">
            <summary>
            Renders the marker.
            </summary>
            <param name="rc">The render context.</param>
            <param name="p">The center point of the marker.</param>
            <param name="clippingRect">The clipping rectangle.</param>
            <param name="type">The marker type.</param>
            <param name="outline">The outline.</param>
            <param name="size">The size of the marker.</param>
            <param name="fill">The fill color.</param>
            <param name="stroke">The stroke color.</param>
            <param name="strokeThickness">The stroke thickness.</param>
        </member>
        <member name="M:OxyPlot.RenderingExtensions.DrawMarkers(OxyPlot.IRenderContext,System.Collections.Generic.IList{OxyPlot.ScreenPoint},OxyPlot.OxyRect,OxyPlot.MarkerType,System.Collections.Generic.IList{OxyPlot.ScreenPoint},System.Double,OxyPlot.OxyColor,OxyPlot.OxyColor,System.Double)">
            <summary>
            Draws a list of markers.
            </summary>
            <param name="rc">
            The render context.
            </param>
            <param name="markerPoints">
            The marker points.
            </param>
            <param name="clippingRect">
            The clipping rectangle.
            </param>
            <param name="markerType">
            Type of the marker.
            </param>
            <param name="markerOutline">
            The marker outline.
            </param>
            <param name="markerSize">
            Size of the marker.
            </param>
            <param name="markerFill">
            The marker fill.
            </param>
            <param name="markerStroke">
            The marker stroke.
            </param>
            <param name="markerStrokeThickness">
            The marker stroke thickness.
            </param>
            <param name="resolution">
            The resolution.
            </param>
            <param name="binOffset">
            The bin Offset.
            </param>
        </member>
        <member name="M:OxyPlot.RenderingExtensions.DrawMarkers(OxyPlot.IRenderContext,System.Collections.Generic.IList{OxyPlot.ScreenPoint},OxyPlot.OxyRect,OxyPlot.MarkerType,System.Collections.Generic.IList{OxyPlot.ScreenPoint},System.Collections.Generic.IList{System.Double},OxyPlot.OxyColor,OxyPlot.OxyColor,System.Double)">
            <summary>
            Draws a list of markers.
            </summary>
            <param name="rc">
            The render context.
            </param>
            <param name="markerPoints">
            The marker points.
            </param>
            <param name="clippingRect">
            The clipping rectangle.
            </param>
            <param name="markerType">
            Type of the marker.
            </param>
            <param name="markerOutline">
            The marker outline.
            </param>
            <param name="markerSize">
            Size of the markers.
            </param>
            <param name="markerFill">
            The marker fill.
            </param>
            <param name="markerStroke">
            The marker stroke.
            </param>
            <param name="markerStrokeThickness">
            The marker stroke thickness.
            </param>
            <param name="resolution">
            The resolution.
            </param>
            <param name="binOffset">
            The bin Offset.
            </param>
        </member>
        <member name="M:OxyPlot.RenderingExtensions.DrawRectangleAsPolygon(OxyPlot.IRenderContext,OxyPlot.OxyRect,OxyPlot.OxyColor,OxyPlot.OxyColor,System.Double)">
            <summary>
            Draws the rectangle as an aliased polygon.
            (makes sure pixel alignment is the same as for lines)
            </summary>
            <param name="rc">
            The render context.
            </param>
            <param name="rect">
            The rectangle.
            </param>
            <param name="fill">
            The fill.
            </param>
            <param name="stroke">
            The stroke.
            </param>
            <param name="thickness">
            The thickness.
            </param>
        </member>
        <member name="M:OxyPlot.RenderingExtensions.DrawRectangleAsPolygon(OxyPlot.IRenderContext,OxyPlot.OxyRect,OxyPlot.OxyColor,OxyPlot.OxyColor,OxyPlot.OxyThickness)">
            <summary>
            Draws the rectangle as an aliased polygon.
            (makes sure pixel alignment is the same as for lines)
            </summary>
            <param name="rc">
            The render context.
            </param>
            <param name="rect">
            The rectangle.
            </param>
            <param name="fill">
            The fill.
            </param>
            <param name="stroke">
            The stroke.
            </param>
            <param name="thickness">
            The thickness.
            </param>
        </member>
        <member name="M:OxyPlot.RenderingExtensions.AddMarkerGeometry(OxyPlot.ScreenPoint,OxyPlot.MarkerType,System.Collections.Generic.IEnumerable{OxyPlot.ScreenPoint},System.Double,System.Collections.Generic.IList{OxyPlot.OxyRect},System.Collections.Generic.IList{OxyPlot.OxyRect},System.Collections.Generic.IList{System.Collections.Generic.IList{OxyPlot.ScreenPoint}},System.Collections.Generic.IList{OxyPlot.ScreenPoint})">
            <summary>
            Adds a marker geometry.
            </summary>
            <param name="p">
            The position of the marker.
            </param>
            <param name="type">
            The type.
            </param>
            <param name="outline">
            The outline.
            </param>
            <param name="size">
            The size.
            </param>
            <param name="ellipses">
            The ellipse collection.
            </param>
            <param name="rects">
            The rectangle collection.
            </param>
            <param name="polygons">
            The polygon collection.
            </param>
            <param name="lines">
            The line collection.
            </param>
        </member>
        <member name="M:OxyPlot.RenderingExtensions.ClipRect(OxyPlot.OxyRect,OxyPlot.OxyRect)">
            <summary>
            Calculates the clipped version of a rectangle.
            </summary>
            <param name="rect">
            The rectangle to clip.
            </param>
            <param name="clippingRectangle">
            The clipping rectangle.
            </param>
            <returns>
            The clipped rectangle, or null if the rectangle is outside the clipping area.
            </returns>
        </member>
        <member name="M:OxyPlot.RenderingExtensions.EnsureNonEmptyLineIsVisible(System.Collections.Generic.IList{OxyPlot.ScreenPoint})">
            <summary>
            Makes sure that a non empty line is visible.
            </summary>
            <param name="pts">The points (screen coordinates).</param>
            <remarks>
            If the line contains one point, another point is added.
            If the line contains two points at the same position, the points are moved 2 pixels apart.
            </remarks>
        </member>
        <member name="T:OxyPlot.Reporting.NamespaceDoc">
            <summary>
                The OxyPlot.Reporting namespace contains a simple report model.
            </summary>
        </member>
        <member name="T:OxyPlot.Reporting.HtmlPlotElementType">
            <summary>
            Specifies the html element type to use when writing plots.
            </summary>
        </member>
        <member name="F:OxyPlot.Reporting.HtmlPlotElementType.Embed">
            <summary>
            Use the embed tag and reference an external svg file.
            </summary>
        </member>
        <member name="F:OxyPlot.Reporting.HtmlPlotElementType.Object">
            <summary>
            Use the object tag and reference an external svg file.
            </summary>
        </member>
        <member name="F:OxyPlot.Reporting.HtmlPlotElementType.Svg">
            <summary>
            Use the svg tag and include the plot inline.
            </summary>
        </member>
        <member name="T:OxyPlot.Reporting.HtmlReportWriter">
            <summary>
            HTML5 report writer.
            </summary>
        </member>
        <member name="T:OxyPlot.Reporting.IReportWriter">
            <summary>
            Interface for Report writers.
            </summary>
        </member>
        <member name="M:OxyPlot.Reporting.IReportWriter.WriteDrawing(OxyPlot.Reporting.DrawingFigure)">
            <summary>
            Writes the drawing.
            </summary>
            <param name="drawing">The drawing.</param>
        </member>
        <member name="M:OxyPlot.Reporting.IReportWriter.WriteEquation(OxyPlot.Reporting.Equation)">
            <summary>
            Writes the equation.
            </summary>
            <param name="equation">The equation.</param>
        </member>
        <member name="M:OxyPlot.Reporting.IReportWriter.WriteHeader(OxyPlot.Reporting.Header)">
            <summary>
            Writes the header.
            </summary>
            <param name="header">The header.</param>
        </member>
        <member name="M:OxyPlot.Reporting.IReportWriter.WriteImage(OxyPlot.Reporting.Image)">
            <summary>
            Writes the image.
            </summary>
            <param name="image">The image.</param>
        </member>
        <member name="M:OxyPlot.Reporting.IReportWriter.WriteParagraph(OxyPlot.Reporting.Paragraph)">
            <summary>
            Writes the paragraph.
            </summary>
            <param name="paragraph">The paragraph.</param>
        </member>
        <member name="M:OxyPlot.Reporting.IReportWriter.WritePlot(OxyPlot.Reporting.PlotFigure)">
            <summary>
            Writes the plot.
            </summary>
            <param name="plot">The plot.</param>
        </member>
        <member name="M:OxyPlot.Reporting.IReportWriter.WriteReport(OxyPlot.Reporting.Report,OxyPlot.Reporting.ReportStyle)">
            <summary>
            Writes the report.
            </summary>
            <param name="report">The report.</param>
            <param name="reportStyle">The style.</param>
        </member>
        <member name="M:OxyPlot.Reporting.IReportWriter.WriteTable(OxyPlot.Reporting.Table)">
            <summary>
            Writes the table.
            </summary>
            <param name="table">The table.</param>
        </member>
        <member name="F:OxyPlot.Reporting.HtmlReportWriter.textMeasurer">
            <summary>
            The text measurer.
            </summary>
        </member>
        <member name="F:OxyPlot.Reporting.HtmlReportWriter.figureCounter">
            <summary>
            The figure counter.
            </summary>
        </member>
        <member name="F:OxyPlot.Reporting.HtmlReportWriter.style">
            <summary>
            The style.
            </summary>
        </member>
        <member name="M:OxyPlot.Reporting.HtmlReportWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Reporting.HtmlReportWriter"/> class.
            </summary>
            <param name="stream">
            The stream.
            </param>
            <param name="textMeasurer">
            The text measurer.
            </param>
        </member>
        <member name="M:OxyPlot.Reporting.HtmlReportWriter.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:OxyPlot.Reporting.HtmlReportWriter.WriteClassId(System.String)">
            <summary>
            Writes the class ID.
            </summary>
            <param name="className">
            The class.
            </param>
            <param name="id">
            The id.
            </param>
        </member>
        <member name="M:OxyPlot.Reporting.HtmlReportWriter.WriteDrawing(OxyPlot.Reporting.DrawingFigure)">
            <summary>
            Writes the drawing.
            </summary>
            <param name="d">
            The drawing.
            </param>
        </member>
        <member name="M:OxyPlot.Reporting.HtmlReportWriter.WriteEquation(OxyPlot.Reporting.Equation)">
            <summary>
            Writes the equation.
            </summary>
            <param name="equation">
            The equation.
            </param>
        </member>
        <member name="M:OxyPlot.Reporting.HtmlReportWriter.WriteHeader(OxyPlot.Reporting.Header)">
            <summary>
            Writes the header.
            </summary>
            <param name="h">
            The header.
            </param>
        </member>
        <member name="M:OxyPlot.Reporting.HtmlReportWriter.WriteImage(OxyPlot.Reporting.Image)">
            <summary>
            Writes the image.
            </summary>
            <param name="i">
            The image.
            </param>
        </member>
        <member name="M:OxyPlot.Reporting.HtmlReportWriter.WriteParagraph(OxyPlot.Reporting.Paragraph)">
            <summary>
            Writes the paragraph.
            </summary>
            <param name="p">
            The paragraph.
            </param>
        </member>
        <member name="M:OxyPlot.Reporting.HtmlReportWriter.WritePlot(OxyPlot.Reporting.PlotFigure)">
            <summary>
            Writes the plot.
            </summary>
            <param name="plot">
            The plot.
            </param>
        </member>
        <member name="M:OxyPlot.Reporting.HtmlReportWriter.WriteReport(OxyPlot.Reporting.Report,OxyPlot.Reporting.ReportStyle)">
            <summary>
            The write report.
            </summary>
            <param name="report">
            The report.
            </param>
            <param name="reportStyle">
            The style.
            </param>
        </member>
        <member name="M:OxyPlot.Reporting.HtmlReportWriter.WriteRows(OxyPlot.Reporting.Table)">
            <summary>
            Writes the items.
            </summary>
            <param name="t">
            The table.
            </param>
        </member>
        <member name="M:OxyPlot.Reporting.HtmlReportWriter.WriteTable(OxyPlot.Reporting.Table)">
            <summary>
            Writes the table.
            </summary>
            <param name="t">
            The t.
            </param>
        </member>
        <member name="M:OxyPlot.Reporting.HtmlReportWriter.CreateCss(OxyPlot.Reporting.ReportStyle)">
            <summary>
            Creates the css section.
            </summary>
            <param name="style">
            The style.
            </param>
            <returns>
            The css.
            </returns>
        </member>
        <member name="M:OxyPlot.Reporting.HtmlReportWriter.GetAlignmentString(OxyPlot.Reporting.Alignment)">
            <summary>
            Gets the alignment string.
            </summary>
            <param name="a">
            The alignment type.
            </param>
            <returns>
            An alignment string.
            </returns>
        </member>
        <member name="M:OxyPlot.Reporting.HtmlReportWriter.ParagraphStyleToCss(OxyPlot.Reporting.ParagraphStyle)">
            <summary>
            Converts a paragraphes style to css.
            </summary>
            <param name="s">
            The style.
            </param>
            <returns>
            A css string.
            </returns>
        </member>
        <member name="M:OxyPlot.Reporting.HtmlReportWriter.WriteHtmlElement">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:OxyPlot.Reporting.HtmlReportWriter.WriteDiv(System.String,System.String)">
            <summary>
            Writes the div.
            </summary>
            <param name="divstyle">
            The style of the div.
            </param>
            <param name="content">
            The content.
            </param>
        </member>
        <member name="M:OxyPlot.Reporting.HtmlReportWriter.WriteEndFigure(System.String)">
            <summary>
            Writes the end figure.
            </summary>
            <param name="text">
            The figure text.
            </param>
        </member>
        <member name="M:OxyPlot.Reporting.HtmlReportWriter.WriteHtmlHeader(System.String,System.String,System.String)">
            <summary>
            Writes the HTML header.
            </summary>
            <param name="title">
            The title.
            </param>
            <param name="cssPath">
            The CSS path.
            </param>
            <param name="cssStyle">
            The style.
            </param>
        </member>
        <member name="M:OxyPlot.Reporting.HtmlReportWriter.WriteStartFigure">
            <summary>
            Writes the start figure element.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.HtmlReportWriter.PlotElementType">
            <summary>
            Gets or sets the type of the plot element.
            </summary>
            <value>
            The type of the plot element.
            </value>
        </member>
        <member name="T:OxyPlot.Reporting.StringExtensions">
            <summary>
            The string extensions.
            </summary>
        </member>
        <member name="M:OxyPlot.Reporting.StringExtensions.Repeat(System.String,System.Int32)">
            <summary>
            The repeat.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="n">
            The n.
            </param>
            <returns>
            The repeat.
            </returns>
        </member>
        <member name="M:OxyPlot.Reporting.StringExtensions.SplitLines(System.String)">
            <summary>
            The split lines.
            </summary>
            <param name="s">
            The s.
            </param>
            <param name="lineLength">
            The line length.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:OxyPlot.Reporting.StringExtensions.FindLineLength(System.String,System.Int32,System.Int32)">
            <summary>
            The find line length.
            </summary>
            <param name="text">
            The text.
            </param>
            <param name="i">
            The i.
            </param>
            <param name="maxLineLength">
            The max line length.
            </param>
            <returns>
            The find line length.
            </returns>
        </member>
        <member name="T:OxyPlot.Reporting.TextReportWriter">
            <summary>
            ANSI text report writer.
            </summary>
            <remarks>
            This will not write figures/images.
            </remarks>
        </member>
        <member name="F:OxyPlot.Reporting.TextReportWriter.TableCellSeparator">
            <summary>
            The table cell separator.
            </summary>
        </member>
        <member name="F:OxyPlot.Reporting.TextReportWriter.TableRowEnd">
            <summary>
            The table row end.
            </summary>
        </member>
        <member name="F:OxyPlot.Reporting.TextReportWriter.TableRowStart">
            <summary>
            The table row start.
            </summary>
        </member>
        <member name="F:OxyPlot.Reporting.TextReportWriter.tableCounter">
            <summary>
            The table counter.
            </summary>
        </member>
        <member name="M:OxyPlot.Reporting.TextReportWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Reporting.TextReportWriter"/> class.
            </summary>
            <param name="stream">
            The stream.
            </param>
        </member>
        <member name="M:OxyPlot.Reporting.TextReportWriter.WriteDrawing(OxyPlot.Reporting.DrawingFigure)">
            <summary>
            The write drawing.
            </summary>
            <param name="d">
            The d.
            </param>
        </member>
        <member name="M:OxyPlot.Reporting.TextReportWriter.WriteEquation(OxyPlot.Reporting.Equation)">
            <summary>
            The write equation.
            </summary>
            <param name="equation">
            The equation.
            </param>
        </member>
        <member name="M:OxyPlot.Reporting.TextReportWriter.WriteHeader(OxyPlot.Reporting.Header)">
            <summary>
            The write header.
            </summary>
            <param name="h">
            The h.
            </param>
        </member>
        <member name="M:OxyPlot.Reporting.TextReportWriter.WriteImage(OxyPlot.Reporting.Image)">
            <summary>
            The write image.
            </summary>
            <param name="i">
            The i.
            </param>
        </member>
        <member name="M:OxyPlot.Reporting.TextReportWriter.WriteParagraph(OxyPlot.Reporting.Paragraph)">
            <summary>
            The write paragraph.
            </summary>
            <param name="p">
            The p.
            </param>
        </member>
        <member name="M:OxyPlot.Reporting.TextReportWriter.WritePlot(OxyPlot.Reporting.PlotFigure)">
            <summary>
            The write plot.
            </summary>
            <param name="plot">
            The plot.
            </param>
        </member>
        <member name="M:OxyPlot.Reporting.TextReportWriter.WriteReport(OxyPlot.Reporting.Report,OxyPlot.Reporting.ReportStyle)">
            <summary>
            The write report.
            </summary>
            <param name="report">
            The report.
            </param>
            <param name="reportStyle">
            The style.
            </param>
        </member>
        <member name="M:OxyPlot.Reporting.TextReportWriter.WriteTable(OxyPlot.Reporting.Table)">
            <summary>
            The write table.
            </summary>
            <param name="t">
            The t.
            </param>
        </member>
        <member name="M:OxyPlot.Reporting.TextReportWriter.GetCellText(System.Int32,System.Int32,System.String)">
            <summary>
            The get cell text.
            </summary>
            <param name="i">
            The i.
            </param>
            <param name="count">
            The count.
            </param>
            <param name="p">
            The p.
            </param>
            <returns>
            The get cell text.
            </returns>
        </member>
        <member name="M:OxyPlot.Reporting.TextReportWriter.PadString(System.String,OxyPlot.Reporting.Alignment,System.Int32)">
            <summary>
            The pad string.
            </summary>
            <param name="text">
            The text.
            </param>
            <param name="alignment">
            The alignment.
            </param>
            <param name="width">
            The width.
            </param>
            <returns>
            The pad string.
            </returns>
        </member>
        <member name="P:OxyPlot.Reporting.TextReportWriter.MaxLineLength">
            <summary>
            Gets or sets MaxLineLength.
            </summary>
        </member>
        <member name="T:OxyPlot.Reporting.WikiReportWriter">
            <summary>
            Wiki formatting report writer.
            </summary>
            <remarks>
            This will not write figures/images.
            </remarks>
        </member>
        <member name="F:OxyPlot.Reporting.WikiReportWriter.TableCellSeparator">
            <summary>
            The table cell separator.
            </summary>
        </member>
        <member name="F:OxyPlot.Reporting.WikiReportWriter.TableHeaderCellSeparator">
            <summary>
            The table header cell separator.
            </summary>
        </member>
        <member name="F:OxyPlot.Reporting.WikiReportWriter.TableHeaderRowEnd">
            <summary>
            The table header row end.
            </summary>
        </member>
        <member name="F:OxyPlot.Reporting.WikiReportWriter.TableHeaderRowStart">
            <summary>
            The table header row start.
            </summary>
        </member>
        <member name="F:OxyPlot.Reporting.WikiReportWriter.TableRowEnd">
            <summary>
            The table row end.
            </summary>
        </member>
        <member name="F:OxyPlot.Reporting.WikiReportWriter.TableRowStart">
            <summary>
            The table row start.
            </summary>
        </member>
        <member name="F:OxyPlot.Reporting.WikiReportWriter.tableCounter">
            <summary>
            The table counter.
            </summary>
        </member>
        <member name="M:OxyPlot.Reporting.WikiReportWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Reporting.WikiReportWriter"/> class.
            </summary>
            <param name="s">
            The s.
            </param>
        </member>
        <member name="M:OxyPlot.Reporting.WikiReportWriter.WriteDrawing(OxyPlot.Reporting.DrawingFigure)">
            <summary>
            The write drawing.
            </summary>
            <param name="d">
            The d.
            </param>
        </member>
        <member name="M:OxyPlot.Reporting.WikiReportWriter.WriteEquation(OxyPlot.Reporting.Equation)">
            <summary>
            The write equation.
            </summary>
            <param name="equation">
            The equation.
            </param>
        </member>
        <member name="M:OxyPlot.Reporting.WikiReportWriter.WriteHeader(OxyPlot.Reporting.Header)">
            <summary>
            The write header.
            </summary>
            <param name="h">
            The h.
            </param>
        </member>
        <member name="M:OxyPlot.Reporting.WikiReportWriter.WriteImage(OxyPlot.Reporting.Image)">
            <summary>
            The write image.
            </summary>
            <param name="i">
            The i.
            </param>
        </member>
        <member name="M:OxyPlot.Reporting.WikiReportWriter.WriteParagraph(OxyPlot.Reporting.Paragraph)">
            <summary>
            The write paragraph.
            </summary>
            <param name="p">
            The p.
            </param>
        </member>
        <member name="M:OxyPlot.Reporting.WikiReportWriter.WritePlot(OxyPlot.Reporting.PlotFigure)">
            <summary>
            The write plot.
            </summary>
            <param name="plot">
            The plot.
            </param>
        </member>
        <member name="M:OxyPlot.Reporting.WikiReportWriter.WriteReport(OxyPlot.Reporting.Report,OxyPlot.Reporting.ReportStyle)">
            <summary>
            The write report.
            </summary>
            <param name="report">
            The report.
            </param>
            <param name="reportStyle">
            The style.
            </param>
        </member>
        <member name="M:OxyPlot.Reporting.WikiReportWriter.WriteTable(OxyPlot.Reporting.Table)">
            <summary>
            The write table.
            </summary>
            <param name="t">
            The t.
            </param>
        </member>
        <member name="M:OxyPlot.Reporting.WikiReportWriter.GetCellText(System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            The get cell text.
            </summary>
            <param name="i">
            The i.
            </param>
            <param name="count">
            The count.
            </param>
            <param name="p">
            The p.
            </param>
            <param name="isHeader">
            The is header.
            </param>
            <returns>
            The get cell text.
            </returns>
        </member>
        <member name="M:OxyPlot.Reporting.WikiReportWriter.PadString(System.String,OxyPlot.Reporting.Alignment,System.Int32)">
            <summary>
            The pad string.
            </summary>
            <param name="text">
            The text.
            </param>
            <param name="alignment">
            The alignment.
            </param>
            <param name="width">
            The width.
            </param>
            <returns>
            The pad string.
            </returns>
        </member>
        <member name="P:OxyPlot.Reporting.WikiReportWriter.MaxLineLength">
            <summary>
            Gets or sets MaxLineLength.
            </summary>
        </member>
        <member name="T:OxyPlot.Reporting.DrawingFigure">
            <summary>
            Represents a drawing report item.
            </summary>
            <remarks>
            Drawing currently only supports SVG format.
            </remarks>
        </member>
        <member name="T:OxyPlot.Reporting.Figure">
            <summary>
            Represents a figure (abstract base class for DrawingFigure, Image and PlotFigure).
            </summary>
        </member>
        <member name="T:OxyPlot.Reporting.ReportItem">
            <summary>
            Represents a report item (abstract base class).
            </summary>
        </member>
        <member name="M:OxyPlot.Reporting.ReportItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Reporting.ReportItem"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Reporting.ReportItem.Add(OxyPlot.Reporting.ReportItem)">
            <summary>
            Adds a report item to the report.
            </summary>
            <param name="child">
            The child.
            </param>
        </member>
        <member name="M:OxyPlot.Reporting.ReportItem.AddDrawing(System.String,System.String)">
            <summary>
            Adds a drawing to the report.
            </summary>
            <param name="content">
            The content.
            </param>
            <param name="text">
            The text.
            </param>
        </member>
        <member name="M:OxyPlot.Reporting.ReportItem.AddPlot(OxyPlot.PlotModel,System.String,System.Double,System.Double)">
            <summary>
            Adds a plot to the report.
            </summary>
            <param name="plot">The plot model.</param>
            <param name="text">The text.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:OxyPlot.Reporting.ReportItem.AddEquation(System.String)">
            <summary>
            Adds an equation to the report.
            </summary>
            <param name="equation">
            The equation.
            </param>
            <param name="caption">
            The caption.
            </param>
        </member>
        <member name="M:OxyPlot.Reporting.ReportItem.AddHeader(System.Int32,System.String)">
            <summary>
            Adds a header to the report.
            </summary>
            <param name="level">
            The level.
            </param>
            <param name="header">
            The header.
            </param>
        </member>
        <member name="M:OxyPlot.Reporting.ReportItem.AddImage(System.String,System.String)">
            <summary>
            Adds an image to the report.
            </summary>
            <param name="src">
            The src.
            </param>
            <param name="text">
            The text.
            </param>
        </member>
        <member name="M:OxyPlot.Reporting.ReportItem.AddItemsTable(System.String,System.Collections.IEnumerable,System.Collections.Generic.IList{OxyPlot.Reporting.ItemsTableField})">
            <summary>
            Adds an items table to the report.
            </summary>
            <param name="title">
            The title.
            </param>
            <param name="items">
            The items.
            </param>
            <param name="fields">
            The fields.
            </param>
        </member>
        <member name="M:OxyPlot.Reporting.ReportItem.AddParagraph(System.String)">
            <summary>
            Adds a paragraph to the report.
            </summary>
            <param name="content">
            The content.
            </param>
        </member>
        <member name="M:OxyPlot.Reporting.ReportItem.AddPropertyTable(System.String,System.Object)">
            <summary>
            Adds a property table to the report.
            </summary>
            <param name="title">
            The title.
            </param>
            <param name="obj">
            The object.
            </param>
            <returns>
            A PropertyTable.
            </returns>
        </member>
        <member name="M:OxyPlot.Reporting.ReportItem.AddTableOfContents(OxyPlot.Reporting.ReportItem)">
            <summary>
            The add table of contents.
            </summary>
            <param name="b">
            The b.
            </param>
        </member>
        <member name="M:OxyPlot.Reporting.ReportItem.Update">
            <summary>
            The update.
            </summary>
        </member>
        <member name="M:OxyPlot.Reporting.ReportItem.Write(OxyPlot.Reporting.IReportWriter)">
            <summary>
            The write.
            </summary>
            <param name="w">
            The w.
            </param>
        </member>
        <member name="M:OxyPlot.Reporting.ReportItem.WriteContent(OxyPlot.Reporting.IReportWriter)">
            <summary>
            Writes the content of the item.
            </summary>
            <param name="w">
            The writer.
            </param>
        </member>
        <member name="M:OxyPlot.Reporting.ReportItem.UpdateFigureNumbers">
            <summary>
            The update figure numbers.
            </summary>
        </member>
        <member name="M:OxyPlot.Reporting.ReportItem.UpdateParent(OxyPlot.Reporting.Report)">
            <summary>
            Updates the Report property.
            </summary>
            <param name="report">
            The report.
            </param>
        </member>
        <member name="M:OxyPlot.Reporting.ReportItem.UpdateFigureNumbers(OxyPlot.Reporting.ReportItem.FigureCounter)">
            <summary>
            The update figure numbers.
            </summary>
            <param name="fc">
            The fc.
            </param>
        </member>
        <member name="P:OxyPlot.Reporting.ReportItem.Children">
            <summary>
            Gets the children.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.ReportItem.Report">
            <summary>
            Gets the report.
            </summary>
        </member>
        <member name="T:OxyPlot.Reporting.ReportItem.FigureCounter">
            <summary>
            The figure counter.
            </summary>
        </member>
        <member name="M:OxyPlot.Reporting.ReportItem.FigureCounter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Reporting.ReportItem.FigureCounter"/> class.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.ReportItem.FigureCounter.FigureNumber">
            <summary>
            Gets or sets FigureNumber.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.ReportItem.FigureCounter.TableNumber">
            <summary>
            Gets or sets TableNumber.
            </summary>
        </member>
        <member name="M:OxyPlot.Reporting.Figure.GetFullCaption(OxyPlot.Reporting.ReportStyle)">
            <summary>
            The get full caption.
            </summary>
            <param name="style">
            The style.
            </param>
            <returns>
            The get full caption.
            </returns>
        </member>
        <member name="P:OxyPlot.Reporting.Figure.FigureNumber">
            <summary>
            Gets or sets FigureNumber.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.Figure.FigureText">
            <summary>
            Gets or sets FigureText.
            </summary>
        </member>
        <member name="M:OxyPlot.Reporting.DrawingFigure.WriteContent(OxyPlot.Reporting.IReportWriter)">
            <summary>
            The write content.
            </summary>
            <param name="w">
            The w.
            </param>
        </member>
        <member name="P:OxyPlot.Reporting.DrawingFigure.Content">
            <summary>
            Gets or sets Content.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.DrawingFigure.Format">
            <summary>
            Gets or sets Format.
            </summary>
        </member>
        <member name="T:OxyPlot.Reporting.DrawingFigure.DrawingFormat">
            <summary>
            The drawing format.
            </summary>
        </member>
        <member name="F:OxyPlot.Reporting.DrawingFigure.DrawingFormat.Svg">
            <summary>
            The svg.
            </summary>
        </member>
        <member name="T:OxyPlot.Reporting.Equation">
            <summary>
            Represents an equation.
            </summary>
        </member>
        <member name="M:OxyPlot.Reporting.Equation.WriteContent(OxyPlot.Reporting.IReportWriter)">
            <summary>
            The write content.
            </summary>
            <param name="w">
            The w.
            </param>
        </member>
        <member name="P:OxyPlot.Reporting.Equation.Caption">
            <summary>
            Gets or sets Caption.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.Equation.Content">
            <summary>
            Gets or sets Content.
            </summary>
        </member>
        <member name="T:OxyPlot.Reporting.Header">
            <summary>
            Represents a header.
            </summary>
        </member>
        <member name="M:OxyPlot.Reporting.Header.ToString">
            <summary>
            The to string.
            </summary>
            <returns>
            The to string.
            </returns>
        </member>
        <member name="M:OxyPlot.Reporting.Header.WriteContent(OxyPlot.Reporting.IReportWriter)">
            <summary>
            The write content.
            </summary>
            <param name="w">
            The w.
            </param>
        </member>
        <member name="P:OxyPlot.Reporting.Header.Chapter">
            <summary>
            Gets or sets the chapter number(s).
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.Header.Level">
            <summary>
            Gets or sets the level of the header (1-5).
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.Header.Text">
            <summary>
            Gets or sets the header text.
            </summary>
        </member>
        <member name="T:OxyPlot.Reporting.HeaderHelper">
            <summary>
            The header helper.
            </summary>
        </member>
        <member name="F:OxyPlot.Reporting.HeaderHelper.headerLevel">
            <summary>
            The header level.
            </summary>
        </member>
        <member name="M:OxyPlot.Reporting.HeaderHelper.GetHeader(System.Int32)">
            <summary>
            The get header.
            </summary>
            <param name="level">
            The level.
            </param>
            <returns>
            The get header.
            </returns>
        </member>
        <member name="T:OxyPlot.Reporting.Image">
            <summary>
            Represents an image report item.
            </summary>
        </member>
        <member name="M:OxyPlot.Reporting.Image.WriteContent(OxyPlot.Reporting.IReportWriter)">
            <summary>
            The write content.
            </summary>
            <param name="w">
            The w.
            </param>
        </member>
        <member name="P:OxyPlot.Reporting.Image.Source">
            <summary>
            Gets or sets Source.
            </summary>
        </member>
        <member name="T:OxyPlot.Reporting.ItemsTable">
            <summary>
            Represents a table of items.
            </summary>
        </member>
        <member name="T:OxyPlot.Reporting.Table">
            <summary>
            Represents a table.
            </summary>
        </member>
        <member name="M:OxyPlot.Reporting.Table.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Reporting.Table"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Reporting.Table.GetFullCaption(OxyPlot.Reporting.ReportStyle)">
            <summary>
            The get full caption.
            </summary>
            <param name="style">
            The style.
            </param>
            <returns>
            The get full caption.
            </returns>
        </member>
        <member name="M:OxyPlot.Reporting.Table.Update">
            <summary>
            The update.
            </summary>
        </member>
        <member name="M:OxyPlot.Reporting.Table.WriteContent(OxyPlot.Reporting.IReportWriter)">
            <summary>
            The write content.
            </summary>
            <param name="w">
            The w.
            </param>
        </member>
        <member name="M:OxyPlot.Reporting.Table.UpdateWidths">
            <summary>
            The update widths.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.Table.ActualWidth">
            <summary>
            Gets or sets the actual width of the table (mm).
            </summary>
            <value>The actual width.</value>
        </member>
        <member name="P:OxyPlot.Reporting.Table.Caption">
            <summary>
            Gets or sets Caption.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.Table.Columns">
            <summary>
            Gets Columns.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.Table.Rows">
            <summary>
            Gets Rows.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.Table.TableNumber">
            <summary>
            Gets or sets TableNumber.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.Table.Width">
            <summary>
            Gets or sets the width of the table (mm).
            NaN: auto width.
            0..-1: fraction of page width.
            </summary>
        </member>
        <member name="M:OxyPlot.Reporting.ItemsTable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Reporting.ItemsTable"/> class.
            </summary>
            <param name="itemsInRows">
            The items in rows.
            </param>
        </member>
        <member name="M:OxyPlot.Reporting.ItemsTable.HasHeader">
            <summary>
            The has header.
            </summary>
            <returns>
            The has header.
            </returns>
        </member>
        <member name="M:OxyPlot.Reporting.ItemsTable.ToArray">
            <summary>
            The to array.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:OxyPlot.Reporting.ItemsTable.Update">
            <summary>
            The update.
            </summary>
        </member>
        <member name="M:OxyPlot.Reporting.ItemsTable.UpdateItems">
            <summary>
            The update items.
            </summary>
        </member>
        <member name="M:OxyPlot.Reporting.ItemsTable.WriteContent(OxyPlot.Reporting.IReportWriter)">
            <summary>
            Writes the content of the item.
            </summary>
            <param name="w">
            The writer.
            </param>
        </member>
        <member name="M:OxyPlot.Reporting.ItemsTable.Transpose(System.String[0:,0:])">
            <summary>
            The transpose.
            </summary>
            <param name="input">
            The input.
            </param>
            <returns>
            </returns>
        </member>
        <member name="P:OxyPlot.Reporting.ItemsTable.Alignment">
            <summary>
            Gets or sets Alignment.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.ItemsTable.Fields">
            <summary>
            Gets or sets Fields.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.ItemsTable.Items">
            <summary>
            Gets or sets the items.
            The table will be filled when this property is set.
            </summary>
            <value>The items.</value>
        </member>
        <member name="P:OxyPlot.Reporting.ItemsTable.ItemsInRows">
            <summary>
            Gets a value indicating whether ItemsInRows.
            </summary>
        </member>
        <member name="T:OxyPlot.Reporting.Alignment">
            <summary>
            The alignment.
            </summary>
        </member>
        <member name="F:OxyPlot.Reporting.Alignment.Left">
            <summary>
            The left.
            </summary>
        </member>
        <member name="F:OxyPlot.Reporting.Alignment.Right">
            <summary>
            The right.
            </summary>
        </member>
        <member name="F:OxyPlot.Reporting.Alignment.Center">
            <summary>
            The center.
            </summary>
        </member>
        <member name="T:OxyPlot.Reporting.ItemsTableField">
            <summary>
            Represents a field in an items table.
            </summary>
        </member>
        <member name="M:OxyPlot.Reporting.ItemsTableField.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Reporting.ItemsTableField"/> class.
            </summary>
            <param name="header">
            The header.
            </param>
            <param name="path">
            The path.
            </param>
            <param name="stringFormat">
            The string format.
            </param>
            <param name="alignment">
            The alignment.
            </param>
        </member>
        <member name="M:OxyPlot.Reporting.ItemsTableField.GetText(System.Object,System.IFormatProvider)">
            <summary>
            Gets the text.
            </summary>
            <param name="item">
            The item.
            </param>
            <param name="formatProvider">
            The format provider.
            </param>
            <returns>
            The text.
            </returns>
        </member>
        <member name="P:OxyPlot.Reporting.ItemsTableField.Alignment">
            <summary>
            Gets or sets Alignment.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.ItemsTableField.Header">
            <summary>
            Gets or sets Header.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.ItemsTableField.Path">
            <summary>
            Gets or sets Path.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.ItemsTableField.StringFormat">
            <summary>
            Gets or sets StringFormat.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.ItemsTableField.Width">
            <summary>
            Gets or sets Width.
            </summary>
        </member>
        <member name="T:OxyPlot.Reporting.Paragraph">
            <summary>
            Represents a paragraph.
            </summary>
        </member>
        <member name="M:OxyPlot.Reporting.Paragraph.WriteContent(OxyPlot.Reporting.IReportWriter)">
            <summary>
            The write content.
            </summary>
            <param name="w">
            The w.
            </param>
        </member>
        <member name="P:OxyPlot.Reporting.Paragraph.Text">
            <summary>
            Gets or sets Text.
            </summary>
        </member>
        <member name="T:OxyPlot.Reporting.ParagraphStyle">
            <summary>
            The paragraph style.
            </summary>
        </member>
        <member name="F:OxyPlot.Reporting.ParagraphStyle.DefaultFont">
            <summary>
            The default font.
            </summary>
        </member>
        <member name="F:OxyPlot.Reporting.ParagraphStyle.DefaultFontSize">
            <summary>
            The default font size.
            </summary>
        </member>
        <member name="F:OxyPlot.Reporting.ParagraphStyle.bold">
            <summary>
            The bold.
            </summary>
        </member>
        <member name="F:OxyPlot.Reporting.ParagraphStyle.fontFamily">
            <summary>
            The font family.
            </summary>
        </member>
        <member name="F:OxyPlot.Reporting.ParagraphStyle.fontSize">
            <summary>
            The font size.
            </summary>
        </member>
        <member name="F:OxyPlot.Reporting.ParagraphStyle.italic">
            <summary>
            The italic.
            </summary>
        </member>
        <member name="F:OxyPlot.Reporting.ParagraphStyle.leftIndentation">
            <summary>
            The left indentation.
            </summary>
        </member>
        <member name="F:OxyPlot.Reporting.ParagraphStyle.lineSpacing">
            <summary>
            The line spacing.
            </summary>
        </member>
        <member name="F:OxyPlot.Reporting.ParagraphStyle.pageBreakBefore">
            <summary>
            The page break before.
            </summary>
        </member>
        <member name="F:OxyPlot.Reporting.ParagraphStyle.rightIndentation">
            <summary>
            The right indentation.
            </summary>
        </member>
        <member name="F:OxyPlot.Reporting.ParagraphStyle.spacingAfter">
            <summary>
            The spacing after.
            </summary>
        </member>
        <member name="F:OxyPlot.Reporting.ParagraphStyle.spacingBefore">
            <summary>
            The spacing before.
            </summary>
        </member>
        <member name="F:OxyPlot.Reporting.ParagraphStyle.textColor">
            <summary>
            The text color.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.ParagraphStyle.BasedOn">
            <summary>
            Gets or sets BasedOn.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.ParagraphStyle.Bold">
            <summary>
            Gets or sets a value indicating whether Bold.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.ParagraphStyle.FontFamily">
            <summary>
            Gets or sets FontFamily.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.ParagraphStyle.FontSize">
            <summary>
            Gets or sets FontSize.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.ParagraphStyle.Italic">
            <summary>
            Gets or sets a value indicating whether Italic.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.ParagraphStyle.LeftIndentation">
            <summary>
            Gets or sets LeftIndentation.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.ParagraphStyle.LineSpacing">
            <summary>
            Gets or sets LineSpacing.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.ParagraphStyle.PageBreakBefore">
            <summary>
            Gets or sets a value indicating whether PageBreakBefore.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.ParagraphStyle.RightIndentation">
            <summary>
            Gets or sets RightIndentation.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.ParagraphStyle.SpacingAfter">
            <summary>
            Gets or sets SpacingAfter.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.ParagraphStyle.SpacingBefore">
            <summary>
            Gets or sets SpacingBefore.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.ParagraphStyle.TextColor">
            <summary>
            Gets or sets TextColor.
            </summary>
        </member>
        <member name="T:OxyPlot.Reporting.PlotFigure">
            <summary>
            Represents a plot figure.
            </summary>
        </member>
        <member name="M:OxyPlot.Reporting.PlotFigure.WriteContent(OxyPlot.Reporting.IReportWriter)">
            <summary>
            The write content.
            </summary>
            <param name="w">
            The w.
            </param>
        </member>
        <member name="P:OxyPlot.Reporting.PlotFigure.Height">
            <summary>
            Gets or sets Height.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.PlotFigure.PlotModel">
            <summary>
            Gets or sets PlotModel.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.PlotFigure.Width">
            <summary>
            Gets or sets Width.
            </summary>
        </member>
        <member name="T:OxyPlot.Reporting.PropertyTable">
            <summary>
            Represents a table of autogenerated property values.
            </summary>
            <remarks>
            The PropertyTable autogenerates columns or rows based on reflecting the Items type.
            Only [Browsable] properties are included.
            </remarks>
        </member>
        <member name="M:OxyPlot.Reporting.PropertyTable.#ctor(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Reporting.PropertyTable"/> class.
            </summary>
            <param name="items">
            The items.
            </param>
            <param name="itemsInRows">
            The items in rows.
            </param>
        </member>
        <member name="M:OxyPlot.Reporting.PropertyTable.GetItemType(System.Collections.IEnumerable)">
            <summary>
            The get item type.
            </summary>
            <param name="items">
            The items.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:OxyPlot.Reporting.PropertyTable.UpdateFields(System.Collections.IEnumerable)">
            <summary>
            Updates the fields.
            </summary>
            <param name="items">
            The items.
            </param>
        </member>
        <member name="T:OxyPlot.Reporting.Report">
            <summary>
            Represents a report.
            </summary>
        </member>
        <member name="M:OxyPlot.Reporting.Report.Write(OxyPlot.Reporting.IReportWriter)">
            <summary>
            The write.
            </summary>
            <param name="w">
            The w.
            </param>
        </member>
        <member name="P:OxyPlot.Reporting.Report.ActualCulture">
            <summary>
            Gets the actual culture.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.Report.Author">
            <summary>
            Gets or sets Author.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.Report.Culture">
            <summary>
            Gets or sets the culture.
            </summary>
            <value>
            The culture.
            </value>
        </member>
        <member name="P:OxyPlot.Reporting.Report.SubTitle">
            <summary>
            Gets or sets SubTitle.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.Report.Title">
            <summary>
            Gets or sets Title.
            </summary>
        </member>
        <member name="T:OxyPlot.Reporting.ReportSection">
            <summary>
            Represents a report section.
            </summary>
        </member>
        <member name="T:OxyPlot.Reporting.ReportStyle">
            <summary>
            The report style.
            </summary>
        </member>
        <member name="M:OxyPlot.Reporting.ReportStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Reporting.ReportStyle"/> class.
            </summary>
            <param name="titleFontFamily">
            The title font family.
            </param>
            <param name="bodyTextFontFamily">
            The body text font family.
            </param>
            <param name="tableTextFontFamily">
            The table text font family.
            </param>
        </member>
        <member name="P:OxyPlot.Reporting.ReportStyle.BodyTextStyle">
            <summary>
            Gets or sets BodyTextStyle.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.ReportStyle.DefaultStyle">
            <summary>
            Gets or sets DefaultStyle.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.ReportStyle.FigureTextFormatString">
            <summary>
            Gets or sets FigureTextFormatString.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.ReportStyle.FigureTextStyle">
            <summary>
            Gets or sets FigureTextStyle.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.ReportStyle.HeaderStyles">
            <summary>
            Gets or sets HeaderStyles.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.ReportStyle.Margins">
            <summary>
            Gets or sets the page margins (mm).
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.ReportStyle.TableCaptionFormatString">
            <summary>
            Gets or sets TableCaptionFormatString.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.ReportStyle.TableCaptionStyle">
            <summary>
            Gets or sets TableCaptionStyle.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.ReportStyle.TableHeaderStyle">
            <summary>
            Gets or sets TableHeaderStyle.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.ReportStyle.TableTextStyle">
            <summary>
            Gets or sets TableTextStyle.
            </summary>
        </member>
        <member name="T:OxyPlot.Reporting.TableColumn">
            <summary>
            Represents a table column definition.
            </summary>
        </member>
        <member name="M:OxyPlot.Reporting.TableColumn.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Reporting.TableColumn"/> class.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.TableColumn.ActualWidth">
            <summary>
            Gets or sets the actual width (mm).
            </summary>
            <value>The actual width.</value>
        </member>
        <member name="P:OxyPlot.Reporting.TableColumn.Alignment">
            <summary>
            Gets or sets Alignment.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.TableColumn.IsHeader">
            <summary>
            Gets or sets a value indicating whether IsHeader.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.TableColumn.Width">
            <summary>
            Gets or sets the width.
            NaN: auto width.
            Negative numbers: weights
            </summary>
            <value>The width.</value>
        </member>
        <member name="T:OxyPlot.Reporting.TableRow">
            <summary>
            Represents a table row definition.
            </summary>
        </member>
        <member name="M:OxyPlot.Reporting.TableRow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Reporting.TableRow"/> class.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.TableRow.Cells">
            <summary>
            Gets Cells.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.TableRow.IsHeader">
            <summary>
            Gets or sets a value indicating whether IsHeader.
            </summary>
        </member>
        <member name="T:OxyPlot.Reporting.TableCell">
            <summary>
            Represents a table cell.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.TableCell.Content">
            <summary>
            Gets or sets Content.
            </summary>
        </member>
        <member name="T:OxyPlot.Reporting.TableOfContents">
            <summary>
            Represents a table of contents.
            </summary>
        </member>
        <member name="M:OxyPlot.Reporting.TableOfContents.#ctor(OxyPlot.Reporting.ReportItem)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Reporting.TableOfContents"/> class.
            </summary>
            <param name="b">
            The b.
            </param>
        </member>
        <member name="M:OxyPlot.Reporting.TableOfContents.Update">
            <summary>
            The update.
            </summary>
        </member>
        <member name="M:OxyPlot.Reporting.TableOfContents.Search(OxyPlot.Reporting.ReportItem,OxyPlot.Reporting.HeaderHelper)">
            <summary>
            The search.
            </summary>
            <param name="item">
            The item.
            </param>
            <param name="hh">
            The hh.
            </param>
        </member>
        <member name="P:OxyPlot.Reporting.TableOfContents.Base">
            <summary>
            Gets or sets Base.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.TableOfContents.Contents">
            <summary>
            Gets or sets Contents.
            </summary>
        </member>
        <member name="T:OxyPlot.Reporting.TableOfContents.ContentItem">
            <summary>
            The content item.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.TableOfContents.ContentItem.Chapter">
            <summary>
            Gets or sets Chapter.
            </summary>
        </member>
        <member name="P:OxyPlot.Reporting.TableOfContents.ContentItem.Title">
            <summary>
            Gets or sets Title.
            </summary>
        </member>
        <member name="T:OxyPlot.Series.AreaSeries">
            <summary>
            Represents an area series that fills the polygon defined by two sets of points or one set of points and a constant.
            </summary>
        </member>
        <member name="T:OxyPlot.Series.LineSeries">
            <summary>
            Represents a line series.
            </summary>
        </member>
        <member name="T:OxyPlot.Series.DataPointSeries">
            <summary>
            Provides an abstract base class for series that contain a collection of <see cref="T:OxyPlot.IDataPoint"/>s.
            </summary>
        </member>
        <member name="T:OxyPlot.Series.XYAxisSeries">
            <summary>
            Provides an abstract base class for series that are related to an X-axis and a Y-axis.
            </summary>
        </member>
        <member name="T:OxyPlot.Series.ItemsSeries">
            <summary>
            Abstract base class for series that can contain items.
            </summary>
        </member>
        <member name="T:OxyPlot.Series.Series">
            <summary>
            Provides an abstract base class for plot series.
            </summary>
            <remarks>
            This class contains internal methods that should be called only from the PlotModel.
            </remarks>
        </member>
        <member name="T:OxyPlot.Series.ITrackableSeries">
            <summary>
            Provides functionality to return data for a tracker control.
            </summary>
            <remarks>
            The plot control will show a tracker with the current value when moving the mouse over the data.
            </remarks>
        </member>
        <member name="M:OxyPlot.Series.ITrackableSeries.GetNearestPoint(OxyPlot.ScreenPoint,System.Boolean)">
            <summary>
            Gets the point on the series that is nearest the specified point.
            </summary>
            <param name="point">
            The point.
            </param>
            <param name="interpolate">
            Interpolate the series if this flag is set to <c>true</c>.
            </param>
            <returns>
            A TrackerHitResult for the current hit.
            </returns>
        </member>
        <member name="P:OxyPlot.Series.ITrackableSeries.TrackerFormatString">
            <summary>
            Gets a format string used for the tracker.
            </summary>
            <remarks>
            The fields that can be used in the format string depends on the series.
            </remarks>
        </member>
        <member name="P:OxyPlot.Series.ITrackableSeries.TrackerKey">
            <summary>
            Gets the tracker key.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.Series.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.Series"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.Series.GetNearestPoint(OxyPlot.ScreenPoint,System.Boolean)">
            <summary>
            Gets the point on the series that is nearest the specified point.
            </summary>
            <param name="point">The point.</param>
            <param name="interpolate">Interpolate the series if this flag is set to <c>true</c>.</param>
            <returns>
            A TrackerHitResult for the current hit.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.Series.Render(OxyPlot.IRenderContext,OxyPlot.PlotModel)">
            <summary>
            Renders the series on the specified render context.
            </summary>
            <param name="rc">
            The rendering context.
            </param>
            <param name="model">
            The model.
            </param>
        </member>
        <member name="M:OxyPlot.Series.Series.RenderLegend(OxyPlot.IRenderContext,OxyPlot.OxyRect)">
            <summary>
            Renders the legend symbol on the specified render context.
            </summary>
            <param name="rc">
            The rendering context.
            </param>
            <param name="legendBox">
            The legend rectangle.
            </param>
        </member>
        <member name="M:OxyPlot.Series.Series.HitTest(OxyPlot.ScreenPoint,System.Double)">
            <summary>
            Tests if the plot element is hit by the specified point.
            </summary>
            <param name="point">The point.</param>
            <param name="tolerance">The tolerance.</param>
            <returns>
            A hit test result.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.Series.AreAxesRequired">
            <summary>
            Check if this data series requires X/Y axes. (e.g. Pie series do not require axes)
            </summary>
            <returns>
            True if no axes are required.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.Series.EnsureAxes">
            <summary>
            Ensures that the axes of the series is defined.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.Series.IsUsing(OxyPlot.Axes.Axis)">
            <summary>
            Check if the data series is using the specified axis.
            </summary>
            <param name="axis">
            An axis which should be checked if used
            </param>
            <returns>
            True if the axis is in use.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.Series.SetDefaultValues(OxyPlot.PlotModel)">
            <summary>
            Sets default values (colors, line style etc) from the plot model.
            </summary>
            <param name="model">
            A plot model.
            </param>
        </member>
        <member name="M:OxyPlot.Series.Series.UpdateAxisMaxMin">
            <summary>
            Updates the axis maximum and minimum values.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.Series.UpdateData">
            <summary>
            Updates the data.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.Series.UpdateValidData">
            <summary>
            Updates the valid data.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.Series.UpdateMaxMin">
            <summary>
            Updates the maximum and minimum of the series.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.Series.ActualCulture">
            <summary>
            Gets the actual culture.
            </summary>
            <remarks>
            The culture is defined in the parent PlotModel.
            </remarks>
        </member>
        <member name="P:OxyPlot.Series.Series.Background">
            <summary>
            Gets or sets the background color of the series. The background area is defined by the x and y axes.
            </summary>
            <value> The background color. </value>
        </member>
        <member name="P:OxyPlot.Series.Series.IsVisible">
            <summary>
            Gets or sets a value indicating whether this series is visible.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.Series.Title">
            <summary>
            Gets or sets the title of the Series.
            </summary>
            <value> The title. </value>
        </member>
        <member name="P:OxyPlot.Series.Series.TrackerFormatString">
            <summary>
            Gets or sets a format string used for the tracker.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.Series.TrackerKey">
            <summary>
            Gets or sets the key for the tracker to use on this series.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.ItemsSeries.UpdateValidData">
            <summary>
            Updates the valid items
            </summary>
        </member>
        <member name="M:OxyPlot.Series.ItemsSeries.GetItem(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Gets the item for the specified index.
            </summary>
            <param name="itemsSource"> The items source. </param>
            <param name="index"> The index. </param>
            <returns> The get item. </returns>
            <remarks>
            Returns null if ItemsSource is not set, or the index is outside the boundaries.
            </remarks>
        </member>
        <member name="M:OxyPlot.Series.ItemsSeries.GetItem(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="i"> The index of the item. </param>
            <returns> The item of the index. </returns>
        </member>
        <member name="P:OxyPlot.Series.ItemsSeries.ItemsSource">
            <summary>
            Gets or sets the items source.
            </summary>
            <value> The items source. </value>
        </member>
        <member name="M:OxyPlot.Series.XYAxisSeries.GetScreenRectangle">
            <summary>
            Gets the rectangle the series uses on the screen (screen coordinates).
            </summary>
            <returns>
            The rectangle.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.XYAxisSeries.RenderLegend(OxyPlot.IRenderContext,OxyPlot.OxyRect)">
            <summary>
            Renders the legend symbol on the specified rendering context.
            </summary>
            <param name="rc">
            The rendering context.
            </param>
            <param name="legendBox">
            The legend rectangle.
            </param>
        </member>
        <member name="M:OxyPlot.Series.XYAxisSeries.InverseTransform(OxyPlot.ScreenPoint)">
            <summary>
            Transforms from a screen point to a data point by the axes of this series.
            </summary>
            <param name="p">
            The screen point.
            </param>
            <returns>
            A data point.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.XYAxisSeries.Transform(System.Double,System.Double)">
            <summary>
            Transforms the specified coordinates to a screen point by the axes of this series.
            </summary>
            <param name="x">
            The x coordinate.
            </param>
            <param name="y">
            The y coordinate.
            </param>
            <returns>
            A screen point.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.XYAxisSeries.Transform(OxyPlot.IDataPoint)">
            <summary>
            Transforms the specified data point to a screen point by the axes of this series.
            </summary>
            <param name="p">
            The point.
            </param>
            <returns>
            A screen point.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.XYAxisSeries.AreAxesRequired">
            <summary>
            Check if this data series requires X/Y axes. (e.g. Pie series do not require axes)
            </summary>
            <returns>
            The are axes required.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.XYAxisSeries.EnsureAxes">
            <summary>
            Ensures that the axes of the series is defined.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.XYAxisSeries.IsUsing(OxyPlot.Axes.Axis)">
            <summary>
            Check if the data series is using the specified axis.
            </summary>
            <param name="axis">
            An axis.
            </param>
            <returns>
            True if the axis is in use.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.XYAxisSeries.SetDefaultValues(OxyPlot.PlotModel)">
            <summary>
            Sets default values from the plot model.
            </summary>
            <param name="model">
            The plot model.
            </param>
        </member>
        <member name="M:OxyPlot.Series.XYAxisSeries.UpdateAxisMaxMin">
            <summary>
            Updates the axes to include the max and min of this series.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.XYAxisSeries.UpdateData">
            <summary>
            Updates the data.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.XYAxisSeries.UpdateMaxMin">
            <summary>
            Updates the max/minimum values.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.XYAxisSeries.GetClippingRect">
            <summary>
            Gets the clipping rectangle.
            </summary>
            <returns>
            The clipping rectangle.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.XYAxisSeries.GetNearestInterpolatedPointInternal(System.Collections.Generic.IList{OxyPlot.IDataPoint},OxyPlot.ScreenPoint)">
            <summary>
            Gets the point on the curve that is nearest the specified point.
            </summary>
            <param name="points">
            The point list.
            </param>
            <param name="point">
            The point.
            </param>
            <returns>
            A tracker hit result if a point was found.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.XYAxisSeries.GetNearestPointInternal(System.Collections.Generic.IEnumerable{OxyPlot.IDataPoint},OxyPlot.ScreenPoint)">
            <summary>
            Gets the nearest point.
            </summary>
            <param name="points">
            The points (data coordinates).
            </param>
            <param name="point">
            The point (screen coordinates).
            </param>
            <returns>
            A <see cref="T:OxyPlot.TrackerHitResult"/> if a point was found, null otherwise.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.XYAxisSeries.IsValidPoint(OxyPlot.IDataPoint,OxyPlot.Axes.Axis,OxyPlot.Axes.Axis)">
            <summary>
            Determines whether the specified point is valid.
            </summary>
            <param name="pt">
            The point.
            </param>
            <param name="xaxis">
            The x axis.
            </param>
            <param name="yaxis">
            The y axis.
            </param>
            <returns>
            <c>true</c> if the point is valid; otherwise, <c>false</c> .
            </returns>
        </member>
        <member name="M:OxyPlot.Series.XYAxisSeries.ToDouble(System.Object)">
            <summary>
            Converts the value of the specified object to a double precision floating point number. DateTime objects are converted using DateTimeAxis.ToDouble and TimeSpan objects are converted using TimeSpanAxis.ToDouble
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The floating point number value.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.XYAxisSeries.VerifyAxes">
            <summary>
            Verifies that both axes are defined.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.XYAxisSeries.MaxX">
            <summary>
            Gets or sets the maximum x-coordinate of the dataset.
            </summary>
            <value> The maximum x-coordinate. </value>
        </member>
        <member name="P:OxyPlot.Series.XYAxisSeries.MaxY">
            <summary>
            Gets or sets the maximum y-coordinate of the dataset.
            </summary>
            <value> The maximum y-coordinate. </value>
        </member>
        <member name="P:OxyPlot.Series.XYAxisSeries.MinX">
            <summary>
            Gets or sets the minimum x-coordinate of the dataset.
            </summary>
            <value> The minimum x-coordinate. </value>
        </member>
        <member name="P:OxyPlot.Series.XYAxisSeries.MinY">
            <summary>
            Gets or sets the minimum y-coordinate of the dataset.
            </summary>
            <value> The minimum y-coordinate. </value>
        </member>
        <member name="P:OxyPlot.Series.XYAxisSeries.XAxis">
            <summary>
            Gets the x-axis.
            </summary>
            <value> The x-axis. </value>
        </member>
        <member name="P:OxyPlot.Series.XYAxisSeries.XAxisKey">
            <summary>
            Gets or sets the x-axis key.
            </summary>
            <value> The x-axis key. </value>
        </member>
        <member name="P:OxyPlot.Series.XYAxisSeries.YAxis">
            <summary>
            Gets the y-axis.
            </summary>
            <value> The y-axis. </value>
        </member>
        <member name="P:OxyPlot.Series.XYAxisSeries.YAxisKey">
            <summary>
            Gets or sets the y-axis key.
            </summary>
            <value> The y-axis key. </value>
        </member>
        <member name="F:OxyPlot.Series.DataPointSeries.points">
            <summary>
            The list of data points.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.DataPointSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.DataPointSeries"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.DataPointSeries.GetNearestPoint(OxyPlot.ScreenPoint,System.Boolean)">
            <summary>
            Gets the point on the series that is nearest the specified point.
            </summary>
            <param name="point">The point.</param>
            <param name="interpolate">Interpolate the series if this flag is set to <c>true</c>.</param>
            <returns>
            A TrackerHitResult for the current hit.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.DataPointSeries.GetItem(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="i">The index of the item.</param>
            <returns>The item of the index.</returns>
        </member>
        <member name="M:OxyPlot.Series.DataPointSeries.UpdateData">
            <summary>
            The update data.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.DataPointSeries.UpdateMaxMin">
            <summary>
            Updates the max/min from the datapoints.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.DataPointSeries.AddDataPoints(System.Collections.Generic.IList{OxyPlot.IDataPoint})">
            <summary>
            The add data points.
            </summary>
            <param name="pts">
            The points.
            </param>
        </member>
        <member name="M:OxyPlot.Series.DataPointSeries.AddDataPoints(System.Collections.IList,System.Collections.IEnumerable,System.String,System.String)">
            <summary>
            The add data points.
            </summary>
            <param name="dest">
            The dest.
            </param>
            <param name="itemsSource">
            The items source.
            </param>
            <param name="dataFieldX">
            The data field x.
            </param>
            <param name="dataFieldY">
            The data field y.
            </param>
        </member>
        <member name="M:OxyPlot.Series.DataPointSeries.InternalUpdateMaxMin(System.Collections.Generic.IList{OxyPlot.IDataPoint})">
            <summary>
            Updates the Max/Min limits from the specified point list.
            </summary>
            <param name="pts">
            The points.
            </param>
        </member>
        <member name="P:OxyPlot.Series.DataPointSeries.CanTrackerInterpolatePoints">
            <summary>
            Gets or sets a value indicating whether the tracker can interpolate points.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.DataPointSeries.DataFieldX">
            <summary>
            Gets or sets the data field X.
            </summary>
            <value>The data field X.</value>
        </member>
        <member name="P:OxyPlot.Series.DataPointSeries.DataFieldY">
            <summary>
            Gets or sets the data field Y.
            </summary>
            <value>The data field Y.</value>
        </member>
        <member name="P:OxyPlot.Series.DataPointSeries.Mapping">
            <summary>
            Gets or sets the mapping delegate.
            Example: series1.Mapping = item => new DataPoint(((MyType)item).Time,((MyType)item).Value);
            </summary>
            <value>The mapping.</value>
        </member>
        <member name="P:OxyPlot.Series.DataPointSeries.Points">
            <summary>
            Gets or sets the points list.
            </summary>
            <value>The points list.</value>
        </member>
        <member name="P:OxyPlot.Series.DataPointSeries.Smooth">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:OxyPlot.Series.DataPointSeries"/> is smooth.
            </summary>
            <value><c>true</c> if smooth; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:OxyPlot.Series.LineSeries.ToleranceDivisor">
            <summary>
            The divisor value used to calculate tolerance for line smoothing.
            </summary>
        </member>
        <member name="F:OxyPlot.Series.LineSeries.defaultColor">
            <summary>
            The default color.
            </summary>
        </member>
        <member name="F:OxyPlot.Series.LineSeries.smoothedPoints">
            <summary>
            The smoothed points.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.LineSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.LineSeries"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.LineSeries.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.LineSeries"/> class.
            </summary>
            <param name="title">
            The title.
            </param>
        </member>
        <member name="M:OxyPlot.Series.LineSeries.#ctor(OxyPlot.OxyColor)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.LineSeries"/> class.
            </summary>
            <param name="color">
            The color of the line stroke.
            </param>
            <param name="strokeThickness">
            The stroke thickness (optional).
            </param>
            <param name="title">
            The title (optional).
            </param>
        </member>
        <member name="M:OxyPlot.Series.LineSeries.GetNearestPoint(OxyPlot.ScreenPoint,System.Boolean)">
            <summary>
            Gets the point on the series that is nearest the specified point.
            </summary>
            <param name="point">The point.</param>
            <param name="interpolate">Interpolate the series if this flag is set to <c>true</c>.</param>
            <returns>
            A TrackerHitResult for the current hit.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.LineSeries.Render(OxyPlot.IRenderContext,OxyPlot.PlotModel)">
            <summary>
            Renders the series on the specified rendering context.
            </summary>
            <param name="rc">
            The rendering context.
            </param>
            <param name="model">
            The owner plot model.
            </param>
        </member>
        <member name="M:OxyPlot.Series.LineSeries.RenderLegend(OxyPlot.IRenderContext,OxyPlot.OxyRect)">
            <summary>
            Renders the legend symbol for the line series on the
            specified rendering context.
            </summary>
            <param name="rc">
            The rendering context.
            </param>
            <param name="legendBox">
            The bounding rectangle of the legend box.
            </param>
        </member>
        <member name="M:OxyPlot.Series.LineSeries.SetDefaultValues(OxyPlot.PlotModel)">
            <summary>
            The set default values.
            </summary>
            <param name="model">
            The model.
            </param>
        </member>
        <member name="M:OxyPlot.Series.LineSeries.UpdateMaxMin">
            <summary>
            Updates the axes to include the max and min of this series.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.LineSeries.RenderPointLabels(OxyPlot.IRenderContext,OxyPlot.OxyRect)">
            <summary>
            Renders the point labels.
            </summary>
            <param name="rc">The render context.</param>
            <param name="clippingRect">The clipping rectangle.</param>
        </member>
        <member name="M:OxyPlot.Series.LineSeries.RenderLegendOnLine(OxyPlot.IRenderContext,OxyPlot.OxyRect)">
            <summary>
            Renders a legend on the line.
            </summary>
            <param name="rc">The render context.</param>
            <param name="clippingRect">The clipping rectangle.</param>
        </member>
        <member name="M:OxyPlot.Series.LineSeries.RenderPoints(OxyPlot.IRenderContext,OxyPlot.OxyRect,System.Collections.Generic.IList{OxyPlot.ScreenPoint})">
            <summary>
            Renders the transformed points.
            </summary>
            <param name="rc">
            The render context.
            </param>
            <param name="clippingRect">
            The clipping rectangle.
            </param>
            <param name="pointsToRender">
            The points to render.
            </param>
        </member>
        <member name="M:OxyPlot.Series.LineSeries.RenderSmoothedLine(OxyPlot.IRenderContext,OxyPlot.OxyRect,System.Collections.Generic.IList{OxyPlot.ScreenPoint})">
            <summary>
            Renders the (smoothed) line.
            </summary>
            <param name="rc">
            The render context.
            </param>
            <param name="clippingRect">
            The clipping rectangle.
            </param>
            <param name="pointsToRender">
            The points to render.
            </param>
        </member>
        <member name="M:OxyPlot.Series.LineSeries.ResetSmoothedPoints">
            <summary>
            Force the smoothed points to be re-evaluated.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.LineSeries.Color">
            <summary>
            Gets or sets the color of the curve.
            </summary>
            <value>The color.</value>
        </member>
        <member name="P:OxyPlot.Series.LineSeries.BrokenLineColor">
            <summary>
            Gets or sets the color of the broken line segments.
            </summary>
            <remarks>
            Add <c>DataPoint.Undefined</c> in the Points collection to create breaks in the line.
            </remarks>
        </member>
        <member name="P:OxyPlot.Series.LineSeries.BrokenLineStyle">
            <summary>
            Gets or sets the broken line style.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.LineSeries.BrokenLineThickness">
            <summary>
            Gets or sets the broken line thickness.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.LineSeries.Dashes">
            <summary>
            Gets or sets the dashes array.
            If this is not null it overrides the LineStyle property.
            </summary>
            <value>The dashes.</value>
        </member>
        <member name="P:OxyPlot.Series.LineSeries.LabelFormatString">
            <summary>
            Gets or sets the label format string.
            </summary>
            <value> The label format string. </value>
        </member>
        <member name="P:OxyPlot.Series.LineSeries.LabelMargin">
            <summary>
            Gets or sets the label margins.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.LineSeries.LineJoin">
            <summary>
            Gets or sets the line join.
            </summary>
            <value>The line join.</value>
        </member>
        <member name="P:OxyPlot.Series.LineSeries.LineStyle">
            <summary>
            Gets or sets the line style.
            </summary>
            <value>The line style.</value>
        </member>
        <member name="P:OxyPlot.Series.LineSeries.LineLegendPosition">
            <summary>
            Gets or sets a value specifying the position of a legend rendered on the line.
            </summary>
            <value>A value specifying the position of the legend.</value>
        </member>
        <member name="P:OxyPlot.Series.LineSeries.MarkerFill">
            <summary>
            Gets or sets the marker fill color.
            </summary>
            <value>The marker fill.</value>
        </member>
        <member name="P:OxyPlot.Series.LineSeries.MarkerOutline">
            <summary>
            Gets or sets the marker outline polygon.
            If this property is set, the MarkerType will not be used.
            </summary>
            <value>The marker outline.</value>
        </member>
        <member name="P:OxyPlot.Series.LineSeries.MarkerResolution">
            <summary>
            Gets or sets the marker resolution.
            </summary>
            <value>
            The marker resolution.
            </value>
        </member>
        <member name="P:OxyPlot.Series.LineSeries.MarkerSize">
            <summary>
            Gets or sets the size of the marker.
            </summary>
            <value>The size of the marker.</value>
        </member>
        <member name="P:OxyPlot.Series.LineSeries.MarkerStroke">
            <summary>
            Gets or sets the marker stroke.
            </summary>
            <value>The marker stroke.</value>
        </member>
        <member name="P:OxyPlot.Series.LineSeries.MarkerStrokeThickness">
            <summary>
            Gets or sets the marker stroke thickness.
            </summary>
            <value>The marker stroke thickness.</value>
        </member>
        <member name="P:OxyPlot.Series.LineSeries.MarkerType">
            <summary>
            Gets or sets the type of the marker.
            </summary>
            <value>The type of the marker.</value>
            <remarks>
            If MarkerType.Custom is used, the MarkerOutline property must be specified.
            </remarks>
        </member>
        <member name="P:OxyPlot.Series.LineSeries.MinimumSegmentLength">
            <summary>
            Gets or sets the minimum length of the segment.
            Increasing this number will increase performance,
            but make the curve less accurate.
            </summary>
            <value>The minimum length of the segment.</value>
        </member>
        <member name="P:OxyPlot.Series.LineSeries.StrokeThickness">
            <summary>
            Gets or sets the thickness of the curve.
            </summary>
            <value>The stroke thickness.</value>
        </member>
        <member name="P:OxyPlot.Series.LineSeries.ActualColor">
            <summary>
            Gets the actual color.
            </summary>
            <value>The actual color.</value>
        </member>
        <member name="P:OxyPlot.Series.LineSeries.ActualLineStyle">
            <summary>
            Gets the actual line style.
            </summary>
            <value>
            The actual line style.
            </value>
        </member>
        <member name="P:OxyPlot.Series.LineSeries.SmoothedPoints">
            <summary>
            Gets the smoothed points.
            </summary>
            <value>The smoothed points.</value>
        </member>
        <member name="F:OxyPlot.Series.AreaSeries.points2">
            <summary>
            The second list of points.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.AreaSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.AreaSeries"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.AreaSeries.GetNearestPoint(OxyPlot.ScreenPoint,System.Boolean)">
            <summary>
            Gets the nearest point.
            </summary>
            <param name="point">The point.</param>
            <param name="interpolate">interpolate if set to <c>true</c> .</param>
            <returns>A TrackerHitResult for the current hit.</returns>
        </member>
        <member name="M:OxyPlot.Series.AreaSeries.Render(OxyPlot.IRenderContext,OxyPlot.PlotModel)">
            <summary>
            Renders the series on the specified rendering context.
            </summary>
            <param name="rc">The rendering context.</param>
            <param name="model">The owner plot model.</param>
        </member>
        <member name="M:OxyPlot.Series.AreaSeries.RenderLegend(OxyPlot.IRenderContext,OxyPlot.OxyRect)">
            <summary>
            Renders the legend symbol for the line series on the
            specified rendering context.
            </summary>
            <param name="rc">
            The rendering context.
            </param>
            <param name="legendBox">
            The bounding rectangle of the legend box.
            </param>
        </member>
        <member name="M:OxyPlot.Series.AreaSeries.UpdateData">
            <summary>
            The update data.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.AreaSeries.UpdateMaxMin">
            <summary>
            The update max min.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.AreaSeries.ConstantY2">
            <summary>
            Gets or sets a constant value for the area definition.
            This is used if DataFieldBase and BaselineValues are null.
            </summary>
            <value>The baseline.</value>
        </member>
        <member name="P:OxyPlot.Series.AreaSeries.DataFieldX2">
            <summary>
            Gets or sets the second X data field.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.AreaSeries.DataFieldY2">
            <summary>
            Gets or sets the second Y data field.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.AreaSeries.Fill">
            <summary>
            Gets or sets the area fill color.
            </summary>
            <value>The fill.</value>
        </member>
        <member name="P:OxyPlot.Series.AreaSeries.Points2">
            <summary>
            Gets the second list of points.
            </summary>
            <value>The second list of points.</value>
        </member>
        <member name="P:OxyPlot.Series.AreaSeries.Reverse2">
            <summary>
            Gets or sets a value indicating whether the second
            data collection should be reversed.
            The first dataset is not reversed, and normally
            the second dataset should be reversed to get a
            closed polygon.
            </summary>
        </member>
        <member name="T:OxyPlot.Series.BarItem">
            <summary>
            Represents an item used in the BarSeries.
            </summary>
        </member>
        <member name="T:OxyPlot.Series.BarItemBase">
            <summary>
            Represents an item used in the BarSeriesBase.
            </summary>
        </member>
        <member name="T:OxyPlot.Series.CategorizedItem">
            <summary>
            Represents an item in a CategorizedSeries.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.CategorizedItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.CategorizedItem"/> class. Initializes a new instance of the <see cref="T:OxyPlot.Series.CategorizedItem"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.CategorizedItem.GetCategoryIndex(System.Int32)">
            <summary>
            Gets the index of the category.
            </summary>
            <param name="defaultIndex">
            The default index.
            </param>
            <returns>
            The index.
            </returns>
        </member>
        <member name="P:OxyPlot.Series.CategorizedItem.CategoryIndex">
            <summary>
            Gets or sets the index of the category.
            </summary>
            <value>
            The index of the category.
            </value>
        </member>
        <member name="M:OxyPlot.Series.BarItemBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.BarItemBase"/> class. Initializes a new instance of the <see cref="T:OxyPlot.Series.BarItem"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.BarItemBase.ToCode">
            <summary>
            Returns c# code that generates this instance.
            </summary>
            <returns>
            C# code.
            </returns>
        </member>
        <member name="P:OxyPlot.Series.BarItemBase.Color">
            <summary>
            Gets or sets the color of the item.
            </summary>
            <remarks>
            If the color is not specified (default), the color of the series will be used.
            </remarks>
        </member>
        <member name="P:OxyPlot.Series.BarItemBase.Value">
            <summary>
            Gets or sets the value of the item.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.BarItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.BarItem"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.BarItem.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.BarItem"/> class.
            </summary>
            <param name="value">
            The value.
            </param>
            <param name="categoryIndex">
            Index of the category.
            </param>
            <param name="color">
            The color.
            </param>
        </member>
        <member name="T:OxyPlot.Series.BarSeries">
            <summary>
            Represents a series for clustered or stacked bar charts.
            </summary>
        </member>
        <member name="T:OxyPlot.Series.BarSeriesBase`1">
            <summary>
            Generic base class that provides common properties and methods for the BarSeries and ColumnSeries.
            </summary>
            <typeparam name="T">
            The type of the items.
            </typeparam>
        </member>
        <member name="T:OxyPlot.Series.BarSeriesBase">
            <summary>
            Base class for BarSeries and ColumnSeries.
            </summary>
        </member>
        <member name="T:OxyPlot.Series.CategorizedSeries">
            <summary>
            Base class for series where the items are categorized.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.CategorizedSeries.GetBarWidth">
            <summary>
            Gets or sets the width/height of the columns/bars (as a fraction of the available space).
            </summary>
            <returns>
            The fractional width.
            </returns>
            <value>
            The width of the bars.
            </value>
            <remarks>
            The available space will be determined by the GapWidth of the CategoryAxis used by this series.
            </remarks>
        </member>
        <member name="M:OxyPlot.Series.CategorizedSeries.GetItems">
            <summary>
            Gets the items of this series.
            </summary>
            <returns>
            The items.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.CategorizedSeries.GetActualBarWidth">
            <summary>
            Gets the actual bar width/height of the items in this series.
            </summary>
            <returns>
            The width or height.
            </returns>
            <remarks>
            The actual width is also influenced by the GapWidth of the CategoryAxis used by this series.
            </remarks>
        </member>
        <member name="M:OxyPlot.Series.CategorizedSeries.GetCategoryAxis">
            <summary>
            Gets the category axis.
            </summary>
            <returns>
            The category axis.
            </returns>
        </member>
        <member name="T:OxyPlot.Series.IStackableSeries">
            <summary>
            Defines properties for stacked series.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.IStackableSeries.IsStacked">
            <summary>
            Gets a value indicating whether this series is stacked.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.IStackableSeries.StackGroup">
            <summary>
            Gets the stack group.
            </summary>
            <value>
            The stack group.
            </value>
        </member>
        <member name="F:OxyPlot.Series.BarSeriesBase.defaultFillColor">
            <summary>
            The default fill color.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.BarSeriesBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.BarSeriesBase"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.BarSeriesBase.GetNearestPoint(OxyPlot.ScreenPoint,System.Boolean)">
            <summary>
            Gets the nearest point.
            </summary>
            <param name="point">
            The point.
            </param>
            <param name="interpolate">
            interpolate if set to <c>true</c> .
            </param>
            <returns>
            A TrackerHitResult for the current hit.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.BarSeriesBase.Render(OxyPlot.IRenderContext,OxyPlot.PlotModel)">
            <summary>
            Renders the series on the specified rendering context.
            </summary>
            <param name="rc">
            The rendering context.
            </param>
            <param name="model">
            The model.
            </param>
        </member>
        <member name="M:OxyPlot.Series.BarSeriesBase.RenderLegend(OxyPlot.IRenderContext,OxyPlot.OxyRect)">
            <summary>
            Renders the legend symbol on the specified rendering context.
            </summary>
            <param name="rc">
            The rendering context.
            </param>
            <param name="legendBox">
            The legend rectangle.
            </param>
        </member>
        <member name="M:OxyPlot.Series.BarSeriesBase.IsUsing(OxyPlot.Axes.Axis)">
            <summary>
            Check if the data series is using the specified axis.
            </summary>
            <param name="axis">
            An axis which should be checked if used
            </param>
            <returns>
            True if the axis is in use.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.BarSeriesBase.SetDefaultValues(OxyPlot.PlotModel)">
            <summary>
            The set default values.
            </summary>
            <param name="model">
            The model.
            </param>
        </member>
        <member name="M:OxyPlot.Series.BarSeriesBase.UpdateAxisMaxMin">
            <summary>
            The update axis max min.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.BarSeriesBase.UpdateMaxMin">
            <summary>
            Updates the maximum/minimum value on the value axis from the bar values.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.BarSeriesBase.UpdateValidData">
            <summary>
            Updates the valid items
            </summary>
        </member>
        <member name="M:OxyPlot.Series.BarSeriesBase.GetRectangle(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Gets the rectangle for the specified values.
            </summary>
            <param name="baseValue">
            The base value of the bar
            </param>
            <param name="topValue">
            The top value of the bar
            </param>
            <param name="beginValue">
            The begin value of the bar
            </param>
            <param name="endValue">
            The end value of the bar
            </param>
            <returns>
            The rectangle.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.BarSeriesBase.GetTrackerText(System.Object,System.Int32)">
            <summary>
            Gets the tracker text for the specified item.
            </summary>
            <param name="item">
            The item.
            </param>
            <param name="categoryIndex">
            Category index of the item.
            </param>
            <returns>
            The tracker text.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.BarSeriesBase.GetValueAxis">
            <summary>
            Gets the value axis.
            </summary>
            <returns>
            The value axis.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.BarSeriesBase.IsValidPoint(System.Double,OxyPlot.Axes.Axis)">
            <summary>
            Checks if the specified value is valid.
            </summary>
            <param name="v">
            The value.
            </param>
            <param name="yaxis">
            The y axis.
            </param>
            <returns>
            True if the value is valid.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.BarSeriesBase.RenderItem(OxyPlot.IRenderContext,OxyPlot.OxyRect,System.Double,System.Double,System.Double,OxyPlot.Series.BarItemBase,OxyPlot.OxyRect)">
            <summary>
            Renders the bar/column item.
            </summary>
            <param name="rc">
            The render context.
            </param>
            <param name="clippingRect">
            The clipping rectangle.
            </param>
            <param name="topValue">
            The end value of the bar.
            </param>
            <param name="categoryValue">
            The category value.
            </param>
            <param name="actualBarWidth">
            The actual width of the bar.
            </param>
            <param name="item">
            The item.
            </param>
            <param name="rect">
            The rectangle of the bar.
            </param>
        </member>
        <member name="M:OxyPlot.Series.BarSeriesBase.RenderLabel(OxyPlot.IRenderContext,OxyPlot.OxyRect,OxyPlot.OxyRect,System.Double,System.Int32)">
            <summary>
            Renders the item label.
            </summary>
            <param name="rc">
            The render context
            </param>
            <param name="clippingRect">
            The clipping rectangle
            </param>
            <param name="rect">
            The rectangle of the item.
            </param>
            <param name="value">
            The value of the label.
            </param>
            <param name="index">
            The index of the bar item.
            </param>
        </member>
        <member name="P:OxyPlot.Series.BarSeriesBase.BaseValue">
            <summary>
            Gets or sets the base value.
            </summary>
            <value>
            The base value.
            </value>
        </member>
        <member name="P:OxyPlot.Series.BarSeriesBase.ColorField">
            <summary>
            Gets or sets the color field.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.BarSeriesBase.FillColor">
            <summary>
            Gets or sets the color of the interior of the bars.
            </summary>
            <value>
            The color.
            </value>
        </member>
        <member name="P:OxyPlot.Series.BarSeriesBase.ActualFillColor">
            <summary>
            Gets the actual fill color.
            </summary>
            <value>The actual color.</value>
        </member>
        <member name="P:OxyPlot.Series.BarSeriesBase.IsStacked">
            <summary>
            Gets or sets a value indicating whether this bar series is stacked.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.BarSeriesBase.LabelFormatString">
            <summary>
            Gets or sets the label format string.
            </summary>
            <value>
            The label format string.
            </value>
        </member>
        <member name="P:OxyPlot.Series.BarSeriesBase.LabelMargin">
            <summary>
            Gets or sets the label margins.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.BarSeriesBase.LabelPlacement">
            <summary>
            Gets or sets label placements.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.BarSeriesBase.NegativeFillColor">
            <summary>
            Gets or sets the color of the interior of the bars when the value is negative.
            </summary>
            <value>
            The color.
            </value>
        </member>
        <member name="P:OxyPlot.Series.BarSeriesBase.StackGroup">
            <summary>
            Gets or sets the stack index indication to which stack the series belongs. Default is 0. Hence, all stacked series belong to the same stack.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.BarSeriesBase.StrokeColor">
            <summary>
            Gets or sets the color of the border around the bars.
            </summary>
            <value>
            The color of the stroke.
            </value>
        </member>
        <member name="P:OxyPlot.Series.BarSeriesBase.StrokeThickness">
            <summary>
            Gets or sets the thickness of the bar border strokes.
            </summary>
            <value>
            The stroke thickness.
            </value>
        </member>
        <member name="P:OxyPlot.Series.BarSeriesBase.ValueField">
            <summary>
            Gets or sets the value field.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.BarSeriesBase.ValidItems">
            <summary>
            Gets or sets the valid items
            </summary>
        </member>
        <member name="P:OxyPlot.Series.BarSeriesBase.ValidItemsIndexInversion">
            <summary>
            Gets or sets the dictionary which stores the index-inversion for the valid items
            </summary>
        </member>
        <member name="P:OxyPlot.Series.BarSeriesBase.ActualBarRectangles">
            <summary>
            Gets or sets the actual rectangles for the bars.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.BarSeriesBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.BarSeriesBase`1"/> class. Initializes a new instance of the <see cref="T:OxyPlot.Series.BarSeriesBase`1"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.BarSeriesBase`1.GetItems">
            <summary>
            Gets the items of this series.
            </summary>
            <returns>
            The items.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.BarSeriesBase`1.UpdateData">
            <summary>
            Updates the data.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.BarSeriesBase`1.GetItem(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="i">
            The index of the item.
            </param>
            <returns>
            The item of the index.
            </returns>
        </member>
        <member name="P:OxyPlot.Series.BarSeriesBase`1.Items">
            <summary>
            Gets the items.
            </summary>
            <value>
            The items.
            </value>
        </member>
        <member name="M:OxyPlot.Series.BarSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.BarSeries"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.BarSeries.GetBarWidth">
            <summary>
            Gets or sets the width of the columns/bars (as a fraction of the available space).
            </summary>
            <returns>
            The fractional width.
            </returns>
            <value>
            The width of the bars.
            </value>
            <remarks>
            The available space will be determined by the GapWidth of the CategoryAxis used by this series.
            </remarks>
        </member>
        <member name="M:OxyPlot.Series.BarSeries.GetActualBarWidth">
            <summary>
            Gets the actual width/height of the items of this series.
            </summary>
            <returns>
            The width or height.
            </returns>
            <remarks>
            The actual width is also influenced by the GapWidth of the CategoryAxis used by this series.
            </remarks>
        </member>
        <member name="M:OxyPlot.Series.BarSeries.GetCategoryAxis">
            <summary>
            Gets the category axis.
            </summary>
            <returns>
            The category axis.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.BarSeries.GetRectangle(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Gets the rectangle for the specified values.
            </summary>
            <param name="baseValue">
            The base value of the bar
            </param>
            <param name="topValue">
            The top value of the bar
            </param>
            <param name="beginValue">
            The begin value of the bar
            </param>
            <param name="endValue">
            The end value of the bar
            </param>
            <returns>
            The rectangle.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.BarSeries.GetValueAxis">
            <summary>
            Gets the value axis.
            </summary>
            <returns>
            The value axis.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.BarSeries.RenderLabel(OxyPlot.IRenderContext,OxyPlot.OxyRect,OxyPlot.OxyRect,System.Double,System.Int32)">
            <summary>
            Draws the label.
            </summary>
            <param name="rc">
            The render context.
            </param>
            <param name="clippingRect">
            The clipping rect.
            </param>
            <param name="rect">
            The rect.
            </param>
            <param name="value">
            The value.
            </param>
            <param name="i">
            The i.
            </param>
        </member>
        <member name="P:OxyPlot.Series.BarSeries.BarWidth">
            <summary>
            Gets or sets the width (height) of the bars.
            </summary>
            <value>
            The width of the bars.
            </value>
        </member>
        <member name="T:OxyPlot.Series.ColumnItem">
            <summary>
            Represents an item used in the ColumnSeries.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.ColumnItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.ColumnItem"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.ColumnItem.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.ColumnItem"/> class.
            </summary>
            <param name="value">
            The value.
            </param>
            <param name="categoryIndex">
            Index of the category.
            </param>
            <param name="color">
            The color.
            </param>
        </member>
        <member name="T:OxyPlot.Series.ColumnSeries">
            <summary>
            Represents a series for clustered or stacked column charts.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.ColumnSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.ColumnSeries"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.ColumnSeries.GetBarWidth">
            <summary>
            Gets or sets the width/height of the columns/bars (as a fraction of the available space).
            </summary>
            <returns>
            The fractional width.
            </returns>
            <value>
            The width of the bars.
            </value>
            <remarks>
            The available space will be determined by the GapWidth of the CategoryAxis used by this series.
            </remarks>
        </member>
        <member name="M:OxyPlot.Series.ColumnSeries.GetActualBarWidth">
            <summary>
            Gets the actual width/height of the items of this series.
            </summary>
            <returns>
            The width or height.
            </returns>
            <remarks>
            The actual width is also influenced by the GapWidth of the CategoryAxis used by this series.
            </remarks>
        </member>
        <member name="M:OxyPlot.Series.ColumnSeries.GetCategoryAxis">
            <summary>
            Gets the category axis.
            </summary>
            <returns>
            The category axis.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.ColumnSeries.GetRectangle(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Gets the rectangle for the specified values.
            </summary>
            <param name="baseValue">
            The base value of the bar
            </param>
            <param name="topValue">
            The top value of the bar
            </param>
            <param name="beginValue">
            The begin value of the bar
            </param>
            <param name="endValue">
            The end value of the bar
            </param>
            <returns>
            The rectangle.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.ColumnSeries.GetValueAxis">
            <summary>
            Gets the value axis.
            </summary>
            <returns>
            The value axis.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.ColumnSeries.RenderLabel(OxyPlot.IRenderContext,OxyPlot.OxyRect,OxyPlot.OxyRect,System.Double,System.Int32)">
            <summary>
            Draws the label.
            </summary>
            <param name="rc">
            The render context.
            </param>
            <param name="clippingRect">
            The clipping rect.
            </param>
            <param name="rect">
            The rect.
            </param>
            <param name="value">
            The value.
            </param>
            <param name="i">
            The i.
            </param>
        </member>
        <member name="P:OxyPlot.Series.ColumnSeries.ColumnWidth">
            <summary>
            Gets or sets the width of the column.
            </summary>
            <value>
            The width of the column.
            </value>
        </member>
        <member name="T:OxyPlot.Series.ErrorColumnItem">
            <summary>
            Represents an item used in the ErrorColumnSeries.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.ErrorColumnItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.ErrorColumnItem"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.ErrorColumnItem.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.ErrorColumnItem"/> class.
            </summary>
            <param name="value">
            The value.
            </param>
            <param name="error">
            The error.
            </param>
            <param name="categoryIndex">
            Index of the category.
            </param>
            <param name="color">
            The color.
            </param>
        </member>
        <member name="M:OxyPlot.Series.ErrorColumnItem.ToCode">
            <summary>
            Returns c# code that generates this instance.
            </summary>
            <returns>
            C# code.
            </returns>
        </member>
        <member name="P:OxyPlot.Series.ErrorColumnItem.Error">
            <summary>
            Gets or sets the error of the item.
            </summary>
        </member>
        <member name="T:OxyPlot.Series.ErrorColumnSeries">
            <summary>
            Represents a series for clustered or stacked column charts with an error value.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.ErrorColumnSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.ErrorColumnSeries"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.ErrorColumnSeries.UpdateMaxMin">
            <summary>
            Updates the maximum/minimum value on the value axis from the bar values.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.ErrorColumnSeries.RenderItem(OxyPlot.IRenderContext,OxyPlot.OxyRect,System.Double,System.Double,System.Double,OxyPlot.Series.BarItemBase,OxyPlot.OxyRect)">
            <summary>
            Renders the bar/column item.
            </summary>
            <param name="rc">
            The render context.
            </param>
            <param name="clippingRect">
            The clipping rectangle.
            </param>
            <param name="topValue">
            The end value of the bar.
            </param>
            <param name="categoryValue">
            The category value.
            </param>
            <param name="actualBarWidth">
            The actual width of the bar.
            </param>
            <param name="item">
            The item.
            </param>
            <param name="rect">
            The rectangle of the bar.
            </param>
        </member>
        <member name="P:OxyPlot.Series.ErrorColumnSeries.ErrorStrokeThickness">
            <summary>
            Gets or sets the stroke thickness of the error line.
            </summary>
            <value>
            The stroke thickness of the error line.
            </value>
        </member>
        <member name="P:OxyPlot.Series.ErrorColumnSeries.ErrorWidth">
            <summary>
            Gets or sets the width of the error end lines.
            </summary>
            <value>
            The width of the error end lines.
            </value>
        </member>
        <member name="T:OxyPlot.Series.IntervalBarItem">
            <summary>
            Represents an item in an IntervalBarSeries.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.IntervalBarItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.IntervalBarItem"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.IntervalBarItem.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.IntervalBarItem"/> class.
            </summary>
            <param name="start">
            The start.
            </param>
            <param name="end">
            The end.
            </param>
            <param name="title">
            The title.
            </param>
            <param name="color">
            The color.
            </param>
        </member>
        <member name="M:OxyPlot.Series.IntervalBarItem.ToCode">
            <summary>
            Returns c# code that generates this instance.
            </summary>
            <returns>
            C# code.
            </returns>
        </member>
        <member name="P:OxyPlot.Series.IntervalBarItem.Color">
            <summary>
            Gets or sets the color.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.IntervalBarItem.End">
            <summary>
            Gets or sets the end value.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.IntervalBarItem.Start">
            <summary>
            Gets or sets the start value.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.IntervalBarItem.Title">
            <summary>
            Gets or sets the title.
            </summary>
        </member>
        <member name="T:OxyPlot.Series.IntervalBarSeries">
            <summary>
            Represents a series for bar charts defined by to/from values.
            </summary>
        </member>
        <member name="F:OxyPlot.Series.IntervalBarSeries.defaultFillColor">
            <summary>
            The default fill color.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.IntervalBarSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.IntervalBarSeries"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.IntervalBarSeries.GetNearestPoint(OxyPlot.ScreenPoint,System.Boolean)">
            <summary>
            Gets the point in the dataset that is nearest the specified point.
            </summary>
            <param name="point">
            The point.
            </param>
            <param name="interpolate">
            The interpolate.
            </param>
            <returns>
            A TrackerHitResult for the current hit.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.IntervalBarSeries.IsValidPoint(System.Double,OxyPlot.Axes.Axis)">
            <summary>
            Checks if the specified value is valid.
            </summary>
            <param name="v">
            The value.
            </param>
            <param name="yaxis">
            The y axis.
            </param>
            <returns>
            True if the value is valid.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.IntervalBarSeries.Render(OxyPlot.IRenderContext,OxyPlot.PlotModel)">
            <summary>
            Renders the Series on the specified rendering context.
            </summary>
            <param name="rc">
            The rendering context.
            </param>
            <param name="model">
            The model.
            </param>
        </member>
        <member name="M:OxyPlot.Series.IntervalBarSeries.RenderLegend(OxyPlot.IRenderContext,OxyPlot.OxyRect)">
            <summary>
            Renders the legend symbol on the specified rendering context.
            </summary>
            <param name="rc">
            The rendering context.
            </param>
            <param name="legendBox">
            The legend rectangle.
            </param>
        </member>
        <member name="M:OxyPlot.Series.IntervalBarSeries.GetBarWidth">
            <summary>
            Gets or sets the width/height of the columns/bars (as a fraction of the available space).
            </summary>
            <returns>
            The fractional width.
            </returns>
            <value>
            The width of the bars.
            </value>
            <remarks>
            The available space will be determined by the GapWidth of the CategoryAxis used by this series.
            </remarks>
        </member>
        <member name="M:OxyPlot.Series.IntervalBarSeries.GetItems">
            <summary>
            Gets the items of this series.
            </summary>
            <returns>
            The items.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.IntervalBarSeries.IsUsing(OxyPlot.Axes.Axis)">
            <summary>
            Check if the data series is using the specified axis.
            </summary>
            <param name="axis">
            An axis which should be checked if used
            </param>
            <returns>
            True if the axis is in use.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.IntervalBarSeries.SetDefaultValues(OxyPlot.PlotModel)">
            <summary>
            The set default values.
            </summary>
            <param name="model">
            The model.
            </param>
        </member>
        <member name="M:OxyPlot.Series.IntervalBarSeries.UpdateAxisMaxMin">
            <summary>
            Updates the axis maximum and minimum values.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.IntervalBarSeries.UpdateData">
            <summary>
            Updates the data.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.IntervalBarSeries.UpdateMaxMin">
            <summary>
            Updates the maximum/minimum value on the value axis from the bar values.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.IntervalBarSeries.UpdateValidData">
            <summary>
            Updates the valid items
            </summary>
        </member>
        <member name="M:OxyPlot.Series.IntervalBarSeries.GetActualBarWidth">
            <summary>
            Gets the actual width/height of the items of this series.
            </summary>
            <returns>
            The width or height.
            </returns>
            <remarks>
            The actual width is also influenced by the GapWidth of the CategoryAxis used by this series.
            </remarks>
        </member>
        <member name="M:OxyPlot.Series.IntervalBarSeries.GetCategoryAxis">
            <summary>
            Gets the category axis.
            </summary>
            <returns>
            The category axis.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.IntervalBarSeries.GetItem(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="i">
            The index of the item.
            </param>
            <returns>
            The item of the index.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.IntervalBarSeries.GetValueAxis">
            <summary>
            Gets the value axis.
            </summary>
            <returns>
            The value axis.
            </returns>
        </member>
        <member name="P:OxyPlot.Series.IntervalBarSeries.BarWidth">
            <summary>
            Gets or sets the width of the bars (as a fraction of the available width). The default value is 0.5 (50%)
            </summary>
            <value>
            The width of the bars.
            </value>
        </member>
        <member name="P:OxyPlot.Series.IntervalBarSeries.FillColor">
            <summary>
            Gets or sets the default color of the interior of the Maximum bars.
            </summary>
            <value>
            The color.
            </value>
        </member>
        <member name="P:OxyPlot.Series.IntervalBarSeries.ActualFillColor">
            <summary>
            Gets the actual fill color.
            </summary>
            <value>The actual color.</value>
        </member>
        <member name="P:OxyPlot.Series.IntervalBarSeries.IsStacked">
            <summary>
            Gets a value indicating whether IsStacked.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.IntervalBarSeries.Items">
            <summary>
            Gets the range bar items.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.IntervalBarSeries.LabelColor">
            <summary>
            Gets or sets the label color.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.IntervalBarSeries.LabelField">
            <summary>
            Gets or sets the label field.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.IntervalBarSeries.LabelFormatString">
            <summary>
            Gets or sets the format string for the maximum labels.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.IntervalBarSeries.LabelMargin">
            <summary>
            Gets or sets the label margins.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.IntervalBarSeries.MaximumField">
            <summary>
            Gets or sets the maximum value field.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.IntervalBarSeries.MinimumField">
            <summary>
            Gets or sets the minimum value field.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.IntervalBarSeries.StackGroup">
            <summary>
            Gets StackGroup.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.IntervalBarSeries.StrokeColor">
            <summary>
            Gets or sets the color of the border around the bars.
            </summary>
            <value>
            The color of the stroke.
            </value>
        </member>
        <member name="P:OxyPlot.Series.IntervalBarSeries.StrokeThickness">
            <summary>
            Gets or sets the thickness of the bar border strokes.
            </summary>
            <value>
            The stroke thickness.
            </value>
        </member>
        <member name="P:OxyPlot.Series.IntervalBarSeries.ActualBarRectangles">
            <summary>
            Gets or sets the actual rectangles for the maximum bars.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.IntervalBarSeries.ValidItems">
            <summary>
            Gets or sets the valid items
            </summary>
        </member>
        <member name="P:OxyPlot.Series.IntervalBarSeries.ValidItemsIndexInversion">
            <summary>
            Gets or sets the dictionary which stores the index-inversion for the valid items
            </summary>
        </member>
        <member name="T:OxyPlot.Series.LabelPlacement">
            <summary>
            Placement of the labels.
            </summary>
        </member>
        <member name="F:OxyPlot.Series.LabelPlacement.Outside">
            <summary>
            Placed outside the bar.
            </summary>
        </member>
        <member name="F:OxyPlot.Series.LabelPlacement.Inside">
            <summary>
            Placed inside the bar.
            </summary>
        </member>
        <member name="F:OxyPlot.Series.LabelPlacement.Middle">
            <summary>
            Placed inside in the middle/center of the bar.
            </summary>
        </member>
        <member name="F:OxyPlot.Series.LabelPlacement.Base">
            <summary>
            Placed inside at the base of the bar.
            </summary>
        </member>
        <member name="T:OxyPlot.Series.RectangleBarItem">
            <summary>
            Represents a rectangle item in a RectangleBarSeries.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.RectangleBarItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.RectangleBarItem"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.RectangleBarItem.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.RectangleBarItem"/> class.
            </summary>
            <param name="x0">
            The x0.
            </param>
            <param name="y0">
            The y0.
            </param>
            <param name="x1">
            The x1.
            </param>
            <param name="y1">
            The y1.
            </param>
            <param name="title">
            The title.
            </param>
            <param name="color">
            The color.
            </param>
        </member>
        <member name="M:OxyPlot.Series.RectangleBarItem.ToCode">
            <summary>
            Returns c# code that generates this instance.
            </summary>
            <returns>
            C# code.
            </returns>
        </member>
        <member name="P:OxyPlot.Series.RectangleBarItem.Color">
            <summary>
            Gets or sets the color.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.RectangleBarItem.Title">
            <summary>
            Gets or sets the title.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.RectangleBarItem.X0">
            <summary>
            Gets or sets the x0 coordinate.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.RectangleBarItem.X1">
            <summary>
            Gets or sets the x1 coordinate.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.RectangleBarItem.Y0">
            <summary>
            Gets or sets the y0 coordinate.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.RectangleBarItem.Y1">
            <summary>
            Gets or sets the y1 coordinate.
            </summary>
        </member>
        <member name="T:OxyPlot.Series.RectangleBarSeries">
            <summary>
            Represents a series for bar charts where the bars are defined by rectangles.
            </summary>
        </member>
        <member name="F:OxyPlot.Series.RectangleBarSeries.defaultFillColor">
            <summary>
            The default fill color.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.RectangleBarSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.RectangleBarSeries"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.RectangleBarSeries.GetNearestPoint(OxyPlot.ScreenPoint,System.Boolean)">
            <summary>
            Gets the point in the dataset that is nearest the specified point.
            </summary>
            <param name="point">
            The point.
            </param>
            <param name="interpolate">
            Specifies whether to interpolate or not.
            </param>
            <returns>
            A <see cref="T:OxyPlot.TrackerHitResult"/> for the current hit.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.RectangleBarSeries.IsValid(System.Double)">
            <summary>
            Checks if the specified value is valid.
            </summary>
            <param name="v">
            The value.
            </param>
            <returns>
            True if the value is valid.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.RectangleBarSeries.Render(OxyPlot.IRenderContext,OxyPlot.PlotModel)">
            <summary>
            Renders the Series on the specified rendering context.
            </summary>
            <param name="rc">
            The rendering context.
            </param>
            <param name="model">
            The model.
            </param>
        </member>
        <member name="M:OxyPlot.Series.RectangleBarSeries.RenderLegend(OxyPlot.IRenderContext,OxyPlot.OxyRect)">
            <summary>
            Renders the legend symbol on the specified rendering context.
            </summary>
            <param name="rc">
            The rendering context.
            </param>
            <param name="legendBox">
            The legend rectangle.
            </param>
        </member>
        <member name="M:OxyPlot.Series.RectangleBarSeries.SetDefaultValues(OxyPlot.PlotModel)">
            <summary>
            Sets the default values.
            </summary>
            <param name="model">
            The model.
            </param>
        </member>
        <member name="M:OxyPlot.Series.RectangleBarSeries.UpdateData">
            <summary>
            Updates the data.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.RectangleBarSeries.UpdateMaxMin">
            <summary>
            Updates the maximum/minimum value on the value axis from the bar values.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.RectangleBarSeries.FillColor">
            <summary>
            Gets or sets the default color of the interior of the rectangles.
            </summary>
            <value>
            The color.
            </value>
        </member>
        <member name="P:OxyPlot.Series.RectangleBarSeries.ActualFillColor">
            <summary>
            Gets the actual fill color.
            </summary>
            <value>The actual color.</value>
        </member>
        <member name="P:OxyPlot.Series.RectangleBarSeries.Items">
            <summary>
            Gets the rectangle bar items.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.RectangleBarSeries.LabelColor">
            <summary>
            Gets or sets the label color.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.RectangleBarSeries.LabelFormatString">
            <summary>
            Gets or sets the format string for the labels.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.RectangleBarSeries.StrokeColor">
            <summary>
            Gets or sets the color of the border around the rectangles.
            </summary>
            <value>
            The color of the stroke.
            </value>
        </member>
        <member name="P:OxyPlot.Series.RectangleBarSeries.StrokeThickness">
            <summary>
            Gets or sets the thickness of the border around the rectangles.
            </summary>
            <value>
            The stroke thickness.
            </value>
        </member>
        <member name="P:OxyPlot.Series.RectangleBarSeries.ActualBarRectangles">
            <summary>
            Gets or sets the actual rectangles for the rectangles.
            </summary>
        </member>
        <member name="T:OxyPlot.Series.TornadoBarItem">
            <summary>
            Represents an item for the TornadoBarSeries.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.TornadoBarItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.TornadoBarItem"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.TornadoBarItem.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.TornadoBarItem"/> class.
            </summary>
            <param name="minimum">
            The minimum.
            </param>
            <param name="maximum">
            The maximum.
            </param>
            <param name="baseValue">
            The base value.
            </param>
            <param name="minimumColor">
            The minimum color.
            </param>
            <param name="maximumColor">
            The maximum color.
            </param>
        </member>
        <member name="M:OxyPlot.Series.TornadoBarItem.ToCode">
            <summary>
            Returns c# code that generates this instance.
            </summary>
            <returns>
            C# code.
            </returns>
        </member>
        <member name="P:OxyPlot.Series.TornadoBarItem.BaseValue">
            <summary>
            Gets or sets the base value.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.TornadoBarItem.Maximum">
            <summary>
            Gets or sets the maximum.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.TornadoBarItem.MaximumColor">
            <summary>
            Gets or sets the color for the maximum bar.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.TornadoBarItem.Minimum">
            <summary>
            Gets or sets the minimum value.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.TornadoBarItem.MinimumColor">
            <summary>
            Gets or sets the color for the minimum bar.
            </summary>
        </member>
        <member name="T:OxyPlot.Series.TornadoBarSeries">
            <summary>
            Represents a series that can be used to create tornado plots.
            </summary>
            <remarks>
            See http://en.wikipedia.org/wiki/Tornado_diagram.
            </remarks>
        </member>
        <member name="F:OxyPlot.Series.TornadoBarSeries.defaultMaximumFillColor">
            <summary>
            The default fill color.
            </summary>
        </member>
        <member name="F:OxyPlot.Series.TornadoBarSeries.defaultMinimumFillColor">
            <summary>
            The default minimum fill color.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.TornadoBarSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.TornadoBarSeries"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.TornadoBarSeries.GetNearestPoint(OxyPlot.ScreenPoint,System.Boolean)">
            <summary>
            Gets the point in the dataset that is nearest the specified point.
            </summary>
            <param name="point">
            The point.
            </param>
            <param name="interpolate">
            The interpolate.
            </param>
            <returns>
            A TrackerHitResult for the current hit.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.TornadoBarSeries.IsValidPoint(System.Double,OxyPlot.Axes.Axis)">
            <summary>
            Checks if the specified value is valid.
            </summary>
            <param name="v">
            The value.
            </param>
            <param name="yaxis">
            The y axis.
            </param>
            <returns>
            True if the value is valid.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.TornadoBarSeries.Render(OxyPlot.IRenderContext,OxyPlot.PlotModel)">
            <summary>
            Renders the Series on the specified rendering context.
            </summary>
            <param name="rc">
            The rendering context.
            </param>
            <param name="model">
            The model.
            </param>
        </member>
        <member name="M:OxyPlot.Series.TornadoBarSeries.RenderLegend(OxyPlot.IRenderContext,OxyPlot.OxyRect)">
            <summary>
            Renders the legend symbol on the specified rendering context.
            </summary>
            <param name="rc">
            The rendering context.
            </param>
            <param name="legendBox">
            The legend rectangle.
            </param>
        </member>
        <member name="M:OxyPlot.Series.TornadoBarSeries.GetBarWidth">
            <summary>
            Gets or sets the width/height of the columns/bars (as a fraction of the available space).
            </summary>
            <returns>
            The fractional width.
            </returns>
            <value>
            The width of the bars.
            </value>
            <remarks>
            The available space will be determined by the GapWidth of the CategoryAxis used by this series.
            </remarks>
        </member>
        <member name="M:OxyPlot.Series.TornadoBarSeries.GetItems">
            <summary>
            Gets the items of this series.
            </summary>
            <returns>
            The items.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.TornadoBarSeries.IsUsing(OxyPlot.Axes.Axis)">
            <summary>
            Check if the data series is using the specified axis.
            </summary>
            <param name="axis">
            An axis which should be checked if used
            </param>
            <returns>
            True if the axis is in use.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.TornadoBarSeries.SetDefaultValues(OxyPlot.PlotModel)">
            <summary>
            The set default values.
            </summary>
            <param name="model">
            The model.
            </param>
        </member>
        <member name="M:OxyPlot.Series.TornadoBarSeries.UpdateAxisMaxMin">
            <summary>
            Updates the axis maximum and minimum values.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.TornadoBarSeries.UpdateData">
            <summary>
            Updates the data.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.TornadoBarSeries.UpdateMaxMin">
            <summary>
            Updates the maximum/minimum value on the value axis from the bar values.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.TornadoBarSeries.UpdateValidData">
            <summary>
            Updates the valid items
            </summary>
        </member>
        <member name="M:OxyPlot.Series.TornadoBarSeries.GetActualBarWidth">
            <summary>
            Gets the actual width/height of the items of this series.
            </summary>
            <returns>
            The width or height.
            </returns>
            <remarks>
            The actual width is also influenced by the GapWidth of the CategoryAxis used by this series.
            </remarks>
        </member>
        <member name="M:OxyPlot.Series.TornadoBarSeries.GetCategoryAxis">
            <summary>
            Gets the category axis.
            </summary>
            <returns>
            The category axis.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.TornadoBarSeries.GetItem(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="i">
            The index of the item.
            </param>
            <returns>
            The item of the index.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.TornadoBarSeries.GetValueAxis">
            <summary>
            Gets the value axis.
            </summary>
            <returns>
            The value axis.
            </returns>
        </member>
        <member name="P:OxyPlot.Series.TornadoBarSeries.BarWidth">
            <summary>
            Gets or sets the width of the bars (as a fraction of the available width). The default value is 0.5 (50%)
            </summary>
            <value>
            The width of the bars.
            </value>
        </member>
        <member name="P:OxyPlot.Series.TornadoBarSeries.BaseValue">
            <summary>
            Gets or sets the base value.
            </summary>
            <value>
            The base value.
            </value>
        </member>
        <member name="P:OxyPlot.Series.TornadoBarSeries.Items">
            <summary>
            Gets the tornado bar items.
            </summary>
            <value>
            The items.
            </value>
        </member>
        <member name="P:OxyPlot.Series.TornadoBarSeries.LabelColor">
            <summary>
            Gets or sets the label color.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.TornadoBarSeries.LabelField">
            <summary>
            Gets or sets the label field.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.TornadoBarSeries.LabelMargin">
            <summary>
            Gets or sets the label margins.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.TornadoBarSeries.MaximumField">
            <summary>
            Gets or sets the maximum value field.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.TornadoBarSeries.MaximumFillColor">
            <summary>
            Gets or sets the color of the interior of the Maximum bars.
            </summary>
            <value>
            The color.
            </value>
        </member>
        <member name="P:OxyPlot.Series.TornadoBarSeries.ActualMaximumFillColor">
            <summary>
            Gets the actual fill color.
            </summary>
            <value>The actual color.</value>
        </member>
        <member name="P:OxyPlot.Series.TornadoBarSeries.MaximumLabelFormatString">
            <summary>
            Gets or sets the format string for the maximum labels.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.TornadoBarSeries.MinimumField">
            <summary>
            Gets or sets the minimum value field.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.TornadoBarSeries.MinimumFillColor">
            <summary>
            Gets or sets the default color of the interior of the Minimum bars.
            </summary>
            <value>
            The color.
            </value>
        </member>
        <member name="P:OxyPlot.Series.TornadoBarSeries.ActualMinimumFillColor">
            <summary>
            Gets the actual minimum fill color.
            </summary>
            <value>The actual color.</value>
        </member>
        <member name="P:OxyPlot.Series.TornadoBarSeries.MinimumLabelFormatString">
            <summary>
            Gets or sets the format string for the minimum labels.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.TornadoBarSeries.StrokeColor">
            <summary>
            Gets or sets the color of the border around the bars.
            </summary>
            <value>
            The color of the stroke.
            </value>
        </member>
        <member name="P:OxyPlot.Series.TornadoBarSeries.StrokeThickness">
            <summary>
            Gets or sets the thickness of the bar border strokes.
            </summary>
            <value>
            The stroke thickness.
            </value>
        </member>
        <member name="P:OxyPlot.Series.TornadoBarSeries.ActualMaximumBarRectangles">
            <summary>
            Gets or sets the actual rectangles for the maximum bars.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.TornadoBarSeries.ActualMinimumBarRectangles">
            <summary>
            Gets or sets the actual rectangles for the minimum bars.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.TornadoBarSeries.ValidItems">
            <summary>
            Gets or sets the valid items
            </summary>
        </member>
        <member name="P:OxyPlot.Series.TornadoBarSeries.ValidItemsIndexInversion">
            <summary>
            Gets or sets the dictionary which stores the index-inversion for the valid items
            </summary>
        </member>
        <member name="T:OxyPlot.Series.BoxPlotItem">
            <summary>
            Represents an item in a <see cref="T:OxyPlot.Series.BoxPlotSeries"/>.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.BoxPlotItem.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Collections.Generic.IList{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.BoxPlotItem"/> struct.
            </summary>
            <param name="x">
            The x.
            </param>
            <param name="lowerWhisker">
            The lower whisker.
            </param>
            <param name="boxBottom">
            The box bottom.
            </param>
            <param name="median">
            The median.
            </param>
            <param name="boxTop">
            The box top.
            </param>
            <param name="upperWhisker">
            The upper whisker.
            </param>
            <param name="outliers">
            The outliers.
            </param>
            <param name="tag">
            The tag.
            </param>
        </member>
        <member name="M:OxyPlot.Series.BoxPlotItem.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:OxyPlot.Series.BoxPlotItem.BoxBottom">
            <summary>
            Gets or sets the box bottom value (usually the 25th percentile, Q1).
            </summary>
            <value> The lower quartile value. </value>
        </member>
        <member name="P:OxyPlot.Series.BoxPlotItem.BoxTop">
            <summary>
            Gets or sets the box top value (usually the 75th percentile, Q3)).
            </summary>
            <value> The box top value. </value>
        </member>
        <member name="P:OxyPlot.Series.BoxPlotItem.LowerWhisker">
            <summary>
            Gets or sets the lower whisker value.
            </summary>
            <value> The lower whisker value. </value>
        </member>
        <member name="P:OxyPlot.Series.BoxPlotItem.Median">
            <summary>
            Gets or sets the median.
            </summary>
            <value> The median. </value>
        </member>
        <member name="P:OxyPlot.Series.BoxPlotItem.Outliers">
            <summary>
            Gets or sets the outliers.
            </summary>
            <value> The outliers. </value>
        </member>
        <member name="P:OxyPlot.Series.BoxPlotItem.Tag">
            <summary>
            Gets or sets the tag.
            </summary>
            <value> The tag. </value>
        </member>
        <member name="P:OxyPlot.Series.BoxPlotItem.UpperWhisker">
            <summary>
            Gets or sets the upper whisker value.
            </summary>
            <value> The upper whisker value. </value>
        </member>
        <member name="P:OxyPlot.Series.BoxPlotItem.Values">
            <summary>
            Gets a list of all the values in the item.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.BoxPlotItem.X">
            <summary>
            Gets or sets the X value.
            </summary>
            <value> The X value. </value>
        </member>
        <member name="T:OxyPlot.Series.BoxPlotSeries">
            <summary>
            Represents a series for box plots.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.BoxPlotSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.BoxPlotSeries"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.BoxPlotSeries.GetNearestPoint(OxyPlot.ScreenPoint,System.Boolean)">
            <summary>
            Gets the nearest point.
            </summary>
            <param name="point">
            The point.
            </param>
            <param name="interpolate">
            interpolate if set to <c>true</c> .
            </param>
            <returns>
            A TrackerHitResult for the current hit.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.BoxPlotSeries.IsValidPoint(OxyPlot.Series.BoxPlotItem,OxyPlot.Axes.Axis,OxyPlot.Axes.Axis)">
            <summary>
            Determines whether the specified item contains a valid point.
            </summary>
            <param name="item">
            The item.
            </param>
            <param name="xaxis">
            The x axis.
            </param>
            <param name="yaxis">
            The y axis.
            </param>
            <returns>
            <c>true</c> if the point is valid; otherwise, <c>false</c> .
            </returns>
        </member>
        <member name="M:OxyPlot.Series.BoxPlotSeries.Render(OxyPlot.IRenderContext,OxyPlot.PlotModel)">
            <summary>
            Renders the series on the specified render context.
            </summary>
            <param name="rc">
            The rendering context.
            </param>
            <param name="model">
            The model.
            </param>
        </member>
        <member name="M:OxyPlot.Series.BoxPlotSeries.RenderLegend(OxyPlot.IRenderContext,OxyPlot.OxyRect)">
            <summary>
            Renders the legend symbol on the specified rendering context.
            </summary>
            <param name="rc">
            The rendering context.
            </param>
            <param name="legendBox">
            The legend rectangle.
            </param>
        </member>
        <member name="M:OxyPlot.Series.BoxPlotSeries.UpdateMaxMin">
            <summary>
            Updates the max/minimum values.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.BoxPlotSeries.InternalUpdateMaxMin(System.Collections.Generic.IList{OxyPlot.Series.BoxPlotItem})">
            <summary>
            Updates the max and min of the series.
            </summary>
            <param name="items">
            The items.
            </param>
        </member>
        <member name="M:OxyPlot.Series.BoxPlotSeries.GetBoxRect(OxyPlot.Series.BoxPlotItem)">
            <summary>
            Gets the screen rectangle for the box.
            </summary>
            <param name="item">
            The box item.
            </param>
            <returns>
            A rectangle.
            </returns>
        </member>
        <member name="P:OxyPlot.Series.BoxPlotSeries.BoxWidth">
            <summary>
            Gets or sets the width of the boxes (specified in x-axis units).
            </summary>
            <value>
            The width of the boxes.
            </value>
        </member>
        <member name="P:OxyPlot.Series.BoxPlotSeries.Fill">
            <summary>
            Gets or sets the fill color. If null, this color will be automatically set.
            </summary>
            <value>
            The fill color.
            </value>
        </member>
        <member name="P:OxyPlot.Series.BoxPlotSeries.Items">
            <summary>
            Gets or sets the box plot items.
            </summary>
            <value>
            The items.
            </value>
        </member>
        <member name="P:OxyPlot.Series.BoxPlotSeries.LineStyle">
            <summary>
            Gets or sets the line style.
            </summary>
            <value>
            The line style.
            </value>
        </member>
        <member name="P:OxyPlot.Series.BoxPlotSeries.MedianPointSize">
            <summary>
            Gets or sets the size of the median point.
            </summary>
            <remarks>
            This property is only used when MedianStyle = Dot.
            </remarks>
        </member>
        <member name="P:OxyPlot.Series.BoxPlotSeries.MedianThickness">
            <summary>
            Gets or sets the median thickness, relative to the StrokeThickness.
            </summary>
            <value>
            The median thickness.
            </value>
        </member>
        <member name="P:OxyPlot.Series.BoxPlotSeries.OutlierSize">
            <summary>
            Gets or sets the diameter of the outlier circles (specified in points).
            </summary>
            <value>
            The size of the outlier.
            </value>
        </member>
        <member name="P:OxyPlot.Series.BoxPlotSeries.OutlierTrackerFormatString">
            <summary>
            Gets or sets the tracker format string for the outliers.
            </summary>
            <value>
            The tracker format string for the outliers.
            </value>
            <remarks>
            Use {0} for series title, {1} for x- and {2} for y-value.
            </remarks>
        </member>
        <member name="P:OxyPlot.Series.BoxPlotSeries.OutlierType">
            <summary>
            Gets or sets the type of the outliers.
            </summary>
            <value>
            The type of the outliers.
            </value>
            <remarks>
            MarkerType.Custom is currently not supported.
            </remarks>
        </member>
        <member name="P:OxyPlot.Series.BoxPlotSeries.ShowBox">
            <summary>
            Gets or sets a value indicating whether to show the boxes.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.BoxPlotSeries.ShowMedianAsDot">
            <summary>
            Gets or sets a value indicating whether to show the median as a dot.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.BoxPlotSeries.Stroke">
            <summary>
            Gets or sets the stroke.
            </summary>
            <value>
            The stroke.
            </value>
        </member>
        <member name="P:OxyPlot.Series.BoxPlotSeries.StrokeThickness">
            <summary>
            Gets or sets the stroke thickness.
            </summary>
            <value>
            The stroke thickness.
            </value>
        </member>
        <member name="P:OxyPlot.Series.BoxPlotSeries.WhiskerWidth">
            <summary>
            Gets or sets the width of the whiskers (relative to the BoxWidth).
            </summary>
            <value>
            The width of the whiskers.
            </value>
        </member>
        <member name="T:OxyPlot.Series.CandleStickSeries">
            <summary>
            Represents a series for candlestick charts.
            </summary>
            <remarks>
            http://en.wikipedia.org/wiki/Candlestick_chart
            http://www.mathworks.com/help/toolbox/finance/candle.html
            </remarks>
        </member>
        <member name="T:OxyPlot.Series.HighLowSeries">
            <summary>
            Represents a series for high-low plots.
            </summary>
            <remarks>
            See http://www.mathworks.com/help/toolbox/finance/highlowfts.html
            </remarks>
        </member>
        <member name="F:OxyPlot.Series.HighLowSeries.items">
            <summary>
            High/low items
            </summary>
        </member>
        <member name="F:OxyPlot.Series.HighLowSeries.defaultColor">
            <summary>
            The default color.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.HighLowSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.HighLowSeries"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.HighLowSeries.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.HighLowSeries"/> class.
            </summary>
            <param name="title">
            The title.
            </param>
        </member>
        <member name="M:OxyPlot.Series.HighLowSeries.#ctor(OxyPlot.OxyColor)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.HighLowSeries"/> class.
            </summary>
            <param name="color">
            The color.
            </param>
            <param name="strokeThickness">
            The stroke thickness.
            </param>
            <param name="title">
            The title.
            </param>
        </member>
        <member name="M:OxyPlot.Series.HighLowSeries.GetNearestPoint(OxyPlot.ScreenPoint,System.Boolean)">
            <summary>
            Gets the point on the series that is nearest the specified point.
            </summary>
            <param name="point">The point.</param>
            <param name="interpolate">Interpolate the series if this flag is set to <c>true</c>.</param>
            <returns>
            A TrackerHitResult for the current hit.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.HighLowSeries.IsValidItem(OxyPlot.Series.HighLowItem,OxyPlot.Axes.Axis,OxyPlot.Axes.Axis)">
            <summary>
            Determines whether the point is valid.
            </summary>
            <param name="pt">The point.</param>
            <param name="xaxis">The x axis.</param>
            <param name="yaxis">The y axis.</param>
            <returns>
             <c>true</c> if [is valid point] [the specified pt]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.HighLowSeries.Render(OxyPlot.IRenderContext,OxyPlot.PlotModel)">
            <summary>
            Renders the series on the specified rendering context.
            </summary>
            <param name="rc">
            The rendering context.
            </param>
            <param name="model">
            The owner plot model.
            </param>
        </member>
        <member name="M:OxyPlot.Series.HighLowSeries.RenderLegend(OxyPlot.IRenderContext,OxyPlot.OxyRect)">
            <summary>
            Renders the legend symbol for the series on the specified rendering context.
            </summary>
            <param name="rc">
            The rendering context.
            </param>
            <param name="legendBox">
            The bounding rectangle of the legend box.
            </param>
        </member>
        <member name="M:OxyPlot.Series.HighLowSeries.SetDefaultValues(OxyPlot.PlotModel)">
            <summary>
            Sets the default values.
            </summary>
            <param name="model">
            The model.
            </param>
        </member>
        <member name="M:OxyPlot.Series.HighLowSeries.UpdateData">
            <summary>
            Updates the data.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.HighLowSeries.UpdateMaxMin">
            <summary>
            Updates the max/min values.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.HighLowSeries.InternalUpdateMaxMin(System.Collections.Generic.IList{OxyPlot.Series.HighLowItem})">
            <summary>
            Updates the Max/Min limits from the specified point list.
            </summary>
            <param name="pts">
            The PTS.
            </param>
        </member>
        <member name="P:OxyPlot.Series.HighLowSeries.Color">
            <summary>
            Gets or sets the color of the curve.
            </summary>
            <value>The color.</value>
        </member>
        <member name="P:OxyPlot.Series.HighLowSeries.ActualColor">
            <summary>
            Gets the actual color.
            </summary>
            <value>The actual color.</value>
        </member>
        <member name="P:OxyPlot.Series.HighLowSeries.Dashes">
            <summary>
            Gets or sets the dashes array.
            If this is not null it overrides the LineStyle property.
            </summary>
            <value>The dashes.</value>
        </member>
        <member name="P:OxyPlot.Series.HighLowSeries.DataFieldClose">
            <summary>
            Gets or sets the data field for the Close value.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.HighLowSeries.DataFieldHigh">
            <summary>
            Gets or sets the data field for the High value.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.HighLowSeries.DataFieldLow">
            <summary>
            Gets or sets the data field for the Low value.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.HighLowSeries.DataFieldOpen">
            <summary>
            Gets or sets the data field for the Open value.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.HighLowSeries.DataFieldX">
            <summary>
            Gets or sets the x data field (time).
            </summary>
        </member>
        <member name="P:OxyPlot.Series.HighLowSeries.Items">
            <summary>
            Gets or sets the points.
            </summary>
            <value>The points.</value>
        </member>
        <member name="P:OxyPlot.Series.HighLowSeries.LineJoin">
            <summary>
            Gets or sets the line join.
            </summary>
            <value>The line join.</value>
        </member>
        <member name="P:OxyPlot.Series.HighLowSeries.LineStyle">
            <summary>
            Gets or sets the line style.
            </summary>
            <value>The line style.</value>
        </member>
        <member name="P:OxyPlot.Series.HighLowSeries.Mapping">
            <summary>
            Gets or sets the mapping deleagte.
            Example: series1.Mapping = item => new HighLowItem(((MyType)item).Time,((MyType)item).Value);
            </summary>
            <value>The mapping.</value>
        </member>
        <member name="P:OxyPlot.Series.HighLowSeries.StrokeThickness">
            <summary>
            Gets or sets the thickness of the curve.
            </summary>
            <value>The stroke thickness.</value>
        </member>
        <member name="P:OxyPlot.Series.HighLowSeries.TickLength">
            <summary>
            Gets or sets the length of the open/close ticks (screen coordinates).
            </summary>
            <value>The length of the open/close ticks.</value>
        </member>
        <member name="M:OxyPlot.Series.CandleStickSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.CandleStickSeries"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.CandleStickSeries.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.CandleStickSeries"/> class.
            </summary>
            <param name="title">
            The title.
            </param>
        </member>
        <member name="M:OxyPlot.Series.CandleStickSeries.#ctor(OxyPlot.OxyColor)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.CandleStickSeries"/> class.
            </summary>
            <param name="color">
            The color.
            </param>
            <param name="strokeThickness">
            The stroke thickness.
            </param>
            <param name="title">
            The title.
            </param>
        </member>
        <member name="M:OxyPlot.Series.CandleStickSeries.Render(OxyPlot.IRenderContext,OxyPlot.PlotModel)">
            <summary>
            Renders the series on the specified rendering context.
            </summary>
            <param name="rc">
            The rendering context.
            </param>
            <param name="model">
            The owner plot model.
            </param>
        </member>
        <member name="M:OxyPlot.Series.CandleStickSeries.RenderLegend(OxyPlot.IRenderContext,OxyPlot.OxyRect)">
            <summary>
            Renders the legend symbol for the series on the specified rendering context.
            </summary>
            <param name="rc">
            The rendering context.
            </param>
            <param name="legendBox">
            The bounding rectangle of the legend box.
            </param>
        </member>
        <member name="P:OxyPlot.Series.CandleStickSeries.CandleWidth">
            <summary>
            Gets or sets the width of the candle.
            </summary>
            <value>The width of the candle.</value>
        </member>
        <member name="T:OxyPlot.Series.ContourSeries">
            <summary>
            Represents a series that renders contours.
            </summary>
            <remarks>
            See http://en.wikipedia.org/wiki/Contour_line and http://www.mathworks.se/help/techdoc/ref/contour.html.
            </remarks>
        </member>
        <member name="F:OxyPlot.Series.ContourSeries.contours">
            <summary>
            The contour collection.
            </summary>
        </member>
        <member name="F:OxyPlot.Series.ContourSeries.segments">
            <summary>
            The temporary segment collection.
            </summary>
        </member>
        <member name="F:OxyPlot.Series.ContourSeries.defaultColor">
            <summary>
            The default color.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.ContourSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.ContourSeries"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.ContourSeries.CalculateContours">
            <summary>
            Calculates the contours.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.ContourSeries.GetNearestPoint(OxyPlot.ScreenPoint,System.Boolean)">
            <summary>
            Gets the point in the dataset that is nearest the specified point.
            </summary>
            <param name="point">
            The point.
            </param>
            <param name="interpolate">
            The interpolate.
            </param>
            <returns>
            A hit result object.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.ContourSeries.Render(OxyPlot.IRenderContext,OxyPlot.PlotModel)">
            <summary>
            Renders the series on the specified rendering context.
            </summary>
            <param name="rc">
            The rendering context.
            </param>
            <param name="model">
            The model.
            </param>
        </member>
        <member name="M:OxyPlot.Series.ContourSeries.SetDefaultValues(OxyPlot.PlotModel)">
            <summary>
            Sets default values from the plotmodel.
            </summary>
            <param name="model">
            The plot model.
            </param>
        </member>
        <member name="M:OxyPlot.Series.ContourSeries.UpdateMaxMin">
            <summary>
            Updates the max/min from the datapoints.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.ContourSeries.AreClose(System.Double,System.Double)">
            <summary>
            Determines if two values are close.
            </summary>
            <param name="x1">
            The first value.
            </param>
            <param name="x2">
            The second value.
            </param>
            <param name="eps">
            The squared tolerance.
            </param>
            <returns>
            True if the values are close.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.ContourSeries.AreClose(OxyPlot.DataPoint,OxyPlot.DataPoint)">
            <summary>
            Determines if two points are close.
            </summary>
            <param name="p0">
            The first point.
            </param>
            <param name="p1">
            The second point.
            </param>
            <param name="eps">
            The squared tolerance.
            </param>
            <returns>
            True if the points are close.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.ContourSeries.IndexOf(System.Collections.Generic.IList{System.Double},System.Double)">
            <summary>
            Gets the index of item that is closest to the specified value.
            </summary>
            <param name="values">A list of values.</param>
            <param name="value">A value.</param>
            <returns>An index.</returns>
        </member>
        <member name="M:OxyPlot.Series.ContourSeries.AddContourLabels(OxyPlot.Series.ContourSeries.Contour,OxyPlot.ScreenPoint[],OxyPlot.OxyRect,System.Collections.Generic.List{OxyPlot.Series.ContourSeries.ContourLabel})">
            <summary>
            The add contour labels.
            </summary>
            <param name="contour">
            The contour.
            </param>
            <param name="pts">
            The pts.
            </param>
            <param name="clippingRect">
            The clipping rect.
            </param>
            <param name="contourLabels">
            The contour labels.
            </param>
        </member>
        <member name="M:OxyPlot.Series.ContourSeries.FindConnectedSegment(OxyPlot.DataPoint,System.Double,System.Double,System.Boolean@)">
            <summary>
            Finds the connected segment.
            </summary>
            <param name="point">
            The point.
            </param>
            <param name="contourLevel">
            The contour level.
            </param>
            <param name="eps">
            The eps.
            </param>
            <param name="reverse">
            reverse the segment if set to <c>true</c>.
            </param>
            <returns>
            The connected segment, or null if no segment was found.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.ContourSeries.JoinContourSegments">
            <summary>
            Joins the contour segments.
            </summary>
            <param name="eps">
            The tolerance for segment ends to connect (squared distance).
            </param>
        </member>
        <member name="M:OxyPlot.Series.ContourSeries.RenderLabel(OxyPlot.IRenderContext,OxyPlot.Series.ContourSeries.ContourLabel)">
            <summary>
            Renders the contour label.
            </summary>
            <param name="rc">
            The render context.
            </param>
            <param name="cl">
            The contour label.
            </param>
        </member>
        <member name="M:OxyPlot.Series.ContourSeries.RenderLabelBackground(OxyPlot.IRenderContext,OxyPlot.Series.ContourSeries.ContourLabel)">
            <summary>
            Renders the contour label background.
            </summary>
            <param name="rc">
            The render context.
            </param>
            <param name="cl">
            The contour label.
            </param>
        </member>
        <member name="P:OxyPlot.Series.ContourSeries.Color">
            <summary>
            Gets or sets the color.
            </summary>
            <value>The color.</value>
        </member>
        <member name="P:OxyPlot.Series.ContourSeries.ActualColor">
            <summary>
            Gets the actual color.
            </summary>
            <value>The actual color.</value>
        </member>
        <member name="P:OxyPlot.Series.ContourSeries.ColumnCoordinates">
            <summary>
            Gets or sets the column coordinates.
            </summary>
            <value>The column coordinates.</value>
        </member>
        <member name="P:OxyPlot.Series.ContourSeries.ContourLevelStep">
            <summary>
            Gets or sets the contour level step size.
            This property is not used if the ContourLevels vector is set.
            </summary>
            <value>The contour level step size.</value>
        </member>
        <member name="P:OxyPlot.Series.ContourSeries.ContourLevels">
            <summary>
            Gets or sets the contour levels.
            </summary>
            <value>The contour levels.</value>
        </member>
        <member name="P:OxyPlot.Series.ContourSeries.ContourColors">
            <summary>
            Gets or sets the contour colors.
            </summary>
            <value>The contour colors.</value>
            <remarks>
            These colors will override the Color of the series.
            If there are less colors than the number of contour levels, the colors will cycle.
            </remarks>
        </member>
        <member name="P:OxyPlot.Series.ContourSeries.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:OxyPlot.Series.ContourSeries.LabelBackground">
            <summary>
            Gets or sets the text background color.
            </summary>
            <value>The text background color.</value>
        </member>
        <member name="P:OxyPlot.Series.ContourSeries.LabelFormatString">
            <summary>
            Gets or sets the format string for contour values.
            </summary>
            <value>The format string.</value>
        </member>
        <member name="P:OxyPlot.Series.ContourSeries.LabelSpacing">
            <summary>
            Gets or sets the label spacing.
            </summary>
            <value>The label spacing.</value>
        </member>
        <member name="P:OxyPlot.Series.ContourSeries.LabelStep">
            <summary>
            Gets or sets the label step (number of contours per label).
            </summary>
            <value>The label step.</value>
        </member>
        <member name="P:OxyPlot.Series.ContourSeries.LineStyle">
            <summary>
            Gets or sets the line style.
            </summary>
            <value>The line style.</value>
        </member>
        <member name="P:OxyPlot.Series.ContourSeries.RowCoordinates">
            <summary>
            Gets or sets the row coordinates.
            </summary>
            <value>The row coordinates.</value>
        </member>
        <member name="P:OxyPlot.Series.ContourSeries.StrokeThickness">
            <summary>
            Gets or sets the stroke thickness.
            </summary>
            <value>The stroke thickness.</value>
        </member>
        <member name="T:OxyPlot.Series.ContourSeries.Contour">
            <summary>
            Represents a contour.
            </summary>
        </member>
        <member name="F:OxyPlot.Series.ContourSeries.Contour.ContourLevel">
            <summary>
            Gets or sets the contour level.
            </summary>
            <value>The contour level.</value>
        </member>
        <member name="F:OxyPlot.Series.ContourSeries.Contour.Points">
            <summary>
            Gets or sets the points.
            </summary>
            <value>The points.</value>
        </member>
        <member name="M:OxyPlot.Series.ContourSeries.Contour.#ctor(System.Collections.Generic.IList{OxyPlot.IDataPoint},System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.ContourSeries.Contour"/> class.
            </summary>
            <param name="points">
            The points.
            </param>
            <param name="contourLevel">
            The contour level.
            </param>
        </member>
        <member name="P:OxyPlot.Series.ContourSeries.Contour.Color">
            <summary>
            Gets or sets the color of the contour.
            </summary>
        </member>
        <member name="T:OxyPlot.Series.ContourSeries.ContourLabel">
            <summary>
            Represents a contour label.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.ContourSeries.ContourLabel.Angle">
            <summary>
            Gets or sets the angle.
            </summary>
            <value>The angle.</value>
        </member>
        <member name="P:OxyPlot.Series.ContourSeries.ContourLabel.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <value>The position.</value>
        </member>
        <member name="P:OxyPlot.Series.ContourSeries.ContourLabel.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="T:OxyPlot.Series.ContourSeries.ContourSegment">
            <summary>
            Represents a contour segment.
            </summary>
        </member>
        <member name="F:OxyPlot.Series.ContourSeries.ContourSegment.ContourLevel">
            <summary>
            The contour level.
            </summary>
        </member>
        <member name="F:OxyPlot.Series.ContourSeries.ContourSegment.EndPoint">
            <summary>
            The end point.
            </summary>
        </member>
        <member name="F:OxyPlot.Series.ContourSeries.ContourSegment.StartPoint">
            <summary>
            The start point.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.ContourSeries.ContourSegment.#ctor(OxyPlot.DataPoint,OxyPlot.DataPoint,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.ContourSeries.ContourSegment"/> class.
            </summary>
            <param name="startPoint">
            The start point.
            </param>
            <param name="endPoint">
            The end point.
            </param>
            <param name="contourLevel">
            The contour level.
            </param>
        </member>
        <member name="T:OxyPlot.Series.FunctionSeries">
            <summary>
            Represents a line series that generates its dataset from a function.
            </summary>
            <remarks>
            Define f(x) and make a plot on the range [x0,x1] or define fx(t) and fy(t) and make a plot on the range [t0,t1].
            </remarks>
        </member>
        <member name="M:OxyPlot.Series.FunctionSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.FunctionSeries"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.FunctionSeries.#ctor(Alt.Func{System.Double,System.Double},System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.FunctionSeries"/> class.
            </summary>
            <param name="f">
            The function f(x).
            </param>
            <param name="x0">
            The start x value.
            </param>
            <param name="x1">
            The end x value.
            </param>
            <param name="dx">
            The increment in x.
            </param>
            <param name="title">
            The title (optional).
            </param>
        </member>
        <member name="M:OxyPlot.Series.FunctionSeries.#ctor(Alt.Func{System.Double,System.Double},System.Double,System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.FunctionSeries"/> class.
            </summary>
            <param name="f">
            The function f(x).
            </param>
            <param name="x0">
            The start x value.
            </param>
            <param name="x1">
            The end x value.
            </param>
            <param name="n">
            The number of points.
            </param>
            <param name="title">
            The title (optional).
            </param>
        </member>
        <member name="M:OxyPlot.Series.FunctionSeries.#ctor(Alt.Func{System.Double,System.Double},Alt.Func{System.Double,System.Double},System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.FunctionSeries"/> class.
            </summary>
            <param name="fx">
            The function fx(t).
            </param>
            <param name="fy">
            The function fy(t).
            </param>
            <param name="t0">
            The t0.
            </param>
            <param name="t1">
            The t1.
            </param>
            <param name="dt">
            The increment dt.
            </param>
            <param name="title">
            The title.
            </param>
        </member>
        <member name="M:OxyPlot.Series.FunctionSeries.#ctor(Alt.Func{System.Double,System.Double},Alt.Func{System.Double,System.Double},System.Double,System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.FunctionSeries"/> class.
            </summary>
            <param name="fx">
            The function fx(t).
            </param>
            <param name="fy">
            The function fy(t).
            </param>
            <param name="t0">
            The t0.
            </param>
            <param name="t1">
            The t1.
            </param>
            <param name="n">
            The number of points.
            </param>
            <param name="title">
            The title.
            </param>
        </member>
        <member name="T:OxyPlot.Series.HeatMapSeries">
            <summary>
            The heat map series.
            </summary>
            <remarks>
            Does not work with Silverlight. Silverlight does not support bitmaps, only PNG and JPG.
            </remarks>
        </member>
        <member name="F:OxyPlot.Series.HeatMapSeries.dataHash">
            <summary>
            The hash code of the current data.
            </summary>
        </member>
        <member name="F:OxyPlot.Series.HeatMapSeries.image">
            <summary>
            The image
            </summary>
        </member>
        <member name="M:OxyPlot.Series.HeatMapSeries.Render(OxyPlot.IRenderContext,OxyPlot.PlotModel)">
            <summary>
            Renders the series on the specified render context.
            </summary>
            <param name="rc">
            The rendering context.
            </param>
            <param name="model">
            The model.
            </param>
        </member>
        <member name="M:OxyPlot.Series.HeatMapSeries.GetNearestPoint(OxyPlot.ScreenPoint,System.Boolean)">
            <summary>
            Gets the point on the series that is nearest the specified point.
            </summary>
            <param name="point">
            The point.
            </param>
            <param name="interpolate">
            Interpolate the series if this flag is set to <c>true</c>.
            </param>
            <returns>
            A TrackerHitResult for the current hit.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.HeatMapSeries.EnsureAxes">
            <summary>
            Ensures that the axes of the series is defined.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.HeatMapSeries.UpdateMaxMin">
            <summary>
            Updates the max/minimum values.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.HeatMapSeries.GetData">
            <summary>
            Gets the data as a sequence (LINQ-friendly).
            </summary>
            <returns>The sequence of data.</returns>
        </member>
        <member name="M:OxyPlot.Series.HeatMapSeries.UpdateImage">
            <summary>
            Updates the image.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.HeatMapSeries.X0">
            <summary>
            Gets or sets the x 0.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.HeatMapSeries.X1">
            <summary>
            Gets or sets the x 1.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.HeatMapSeries.Y0">
            <summary>
            Gets or sets the y 0.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.HeatMapSeries.Y1">
            <summary>
            Gets or sets the y 1.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.HeatMapSeries.Data">
            <summary>
            Gets or sets the data.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.HeatMapSeries.MinValue">
            <summary>
            Gets or sets the minimum value of the dataset.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.HeatMapSeries.MaxValue">
            <summary>
            Gets or sets the maximum value of the dataset.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.HeatMapSeries.ColorAxis">
            <summary>
            Gets or sets the color axis.
            </summary>
            <value>
            The color axis.
            </value>
        </member>
        <member name="P:OxyPlot.Series.HeatMapSeries.ColorAxisKey">
            <summary>
            Gets or sets the color axis key.
            </summary>
            <value> The color axis key. </value>
        </member>
        <member name="T:OxyPlot.Series.HighLowItem">
            <summary>
            Represents an item in a <see cref="T:OxyPlot.Series.HighLowSeries"/>.
            </summary>
        </member>
        <member name="F:OxyPlot.Series.HighLowItem.Undefined">
            <summary>
            The undefined.
            </summary>
        </member>
        <member name="F:OxyPlot.Series.HighLowItem.close">
            <summary>
            The close.
            </summary>
        </member>
        <member name="F:OxyPlot.Series.HighLowItem.high">
            <summary>
            The high.
            </summary>
        </member>
        <member name="F:OxyPlot.Series.HighLowItem.low">
            <summary>
            The low.
            </summary>
        </member>
        <member name="F:OxyPlot.Series.HighLowItem.open">
            <summary>
            The open.
            </summary>
        </member>
        <member name="F:OxyPlot.Series.HighLowItem.x">
            <summary>
            The x.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.HighLowItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.HighLowItem"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.HighLowItem.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.HighLowItem"/> struct.
            </summary>
            <param name="x">
            The x value.
            </param>
            <param name="high">
            The high value.
            </param>
            <param name="low">
            The low value.
            </param>
            <param name="open">
            The open value.
            </param>
            <param name="close">
            The close value.
            </param>
        </member>
        <member name="P:OxyPlot.Series.HighLowItem.Close">
            <summary>
            Gets or sets the close value.
            </summary>
            <value>The close value.</value>
        </member>
        <member name="P:OxyPlot.Series.HighLowItem.High">
            <summary>
            Gets or sets the high value.
            </summary>
            <value>The high value.</value>
        </member>
        <member name="P:OxyPlot.Series.HighLowItem.Low">
            <summary>
            Gets or sets the low value.
            </summary>
            <value>The low value.</value>
        </member>
        <member name="P:OxyPlot.Series.HighLowItem.Open">
            <summary>
            Gets or sets the open value.
            </summary>
            <value>The open value.</value>
        </member>
        <member name="P:OxyPlot.Series.HighLowItem.X">
            <summary>
            Gets or sets the X value (time).
            </summary>
            <value>The X value.</value>
        </member>
        <member name="T:OxyPlot.Series.LineLegendPosition">
            <summary>
            Specifies the position of legends rendered on a <see cref="T:OxyPlot.Series.LineSeries"/>.
            </summary>
        </member>
        <member name="F:OxyPlot.Series.LineLegendPosition.None">
            <summary>
            Do not render legend on the line.
            </summary>
        </member>
        <member name="F:OxyPlot.Series.LineLegendPosition.Start">
            <summary>
            Render legend at the start of the line.
            </summary>
        </member>
        <member name="F:OxyPlot.Series.LineLegendPosition.End">
            <summary>
            Render legend at the end of the line.
            </summary>
        </member>
        <member name="T:OxyPlot.Series.PieSeries">
            <summary>
            Represents a series for pie/circle/doughnut charts.
            </summary>
            <remarks>
            The arc length/central angle/area of each slice is proportional to the quantity it represents. See http://en.wikipedia.org/wiki/Pie_chart
            </remarks>
        </member>
        <member name="F:OxyPlot.Series.PieSeries.slices">
            <summary>
            The slices.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.PieSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.PieSeries"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.PieSeries.GetNearestPoint(OxyPlot.ScreenPoint,System.Boolean)">
            <summary>
            Gets the point on the series that is nearest the specified point.
            </summary>
            <param name="point">
            The point.
            </param>
            <param name="interpolate">
            Interpolate the series if this flag is set to <c>true</c> .
            </param>
            <returns>
            A TrackerHitResult for the current hit.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.PieSeries.Render(OxyPlot.IRenderContext,OxyPlot.PlotModel)">
            <summary>
            Renders the series on the specified render context.
            </summary>
            <param name="rc">
            The rendering context.
            </param>
            <param name="model">
            The model.
            </param>
        </member>
        <member name="M:OxyPlot.Series.PieSeries.RenderLegend(OxyPlot.IRenderContext,OxyPlot.OxyRect)">
            <summary>
            Renders the legend symbol on the specified render context.
            </summary>
            <param name="rc">
            The rendering context.
            </param>
            <param name="legendBox">
            The legend rectangle.
            </param>
        </member>
        <member name="M:OxyPlot.Series.PieSeries.AreAxesRequired">
            <summary>
            Check if this data series requires X/Y axes. (e.g. Pie series do not require axes)
            </summary>
            <returns>
            True if no axes are required.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.PieSeries.EnsureAxes">
            <summary>
            Ensures that the axes of the series is defined.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.PieSeries.IsUsing(OxyPlot.Axes.Axis)">
            <summary>
            Check if the data series is using the specified axis.
            </summary>
            <param name="axis">
            An axis.
            </param>
            <returns>
            True if the axis is in use.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.PieSeries.SetDefaultValues(OxyPlot.PlotModel)">
            <summary>
            The set default values.
            </summary>
            <param name="model">
            The model.
            </param>
        </member>
        <member name="M:OxyPlot.Series.PieSeries.UpdateAxisMaxMin">
            <summary>
            The update axis max min.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.PieSeries.UpdateData">
            <summary>
            Updates the data.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.PieSeries.UpdateMaxMin">
            <summary>
            The update max min.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.PieSeries.AngleIncrement">
            <summary>
            Gets or sets AngleIncrement.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.PieSeries.AngleSpan">
            <summary>
            Gets or sets AngleSpan.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.PieSeries.AreInsideLabelsAngled">
            <summary>
            Gets or sets a value indicating whether AreInsideLabelsAngled.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.PieSeries.ColorField">
            <summary>
            Gets or sets the name of the property containing the color.
            </summary>
            <value> The color field. </value>
        </member>
        <member name="P:OxyPlot.Series.PieSeries.Diameter">
            <summary>
            Gets or sets the diameter.
            </summary>
            <value> The diameter. </value>
        </member>
        <member name="P:OxyPlot.Series.PieSeries.ExplodedDistance">
            <summary>
            Gets or sets the exploded distance.
            </summary>
            <value> The exploded distance. </value>
        </member>
        <member name="P:OxyPlot.Series.PieSeries.InnerDiameter">
            <summary>
            Gets or sets the inner diameter.
            </summary>
            <value> The inner diameter. </value>
        </member>
        <member name="P:OxyPlot.Series.PieSeries.InsideLabelFormat">
            <summary>
            Gets or sets the inside label format.
            </summary>
            <value> The inside label format. </value>
        </member>
        <member name="P:OxyPlot.Series.PieSeries.InsideLabelPosition">
            <summary>
            Gets or sets the inside label position.
            </summary>
            <value> The inside label position. </value>
        </member>
        <member name="P:OxyPlot.Series.PieSeries.IsExplodedField">
            <summary>
            Gets or sets the is exploded field.
            </summary>
            <value> The is exploded field. </value>
        </member>
        <member name="P:OxyPlot.Series.PieSeries.LabelField">
            <summary>
            Gets or sets the label field.
            </summary>
            <value> The label field. </value>
        </member>
        <member name="P:OxyPlot.Series.PieSeries.LegendFormat">
            <summary>
            Gets or sets the legend format.
            </summary>
            <value> The legend format. </value>
        </member>
        <member name="P:OxyPlot.Series.PieSeries.OutsideLabelFormat">
            <summary>
            Gets or sets the outside label format.
            </summary>
            <value> The outside label format. </value>
        </member>
        <member name="P:OxyPlot.Series.PieSeries.Slices">
            <summary>
            Gets or sets the slices.
            </summary>
            <value> The slices. </value>
        </member>
        <member name="P:OxyPlot.Series.PieSeries.StartAngle">
            <summary>
            Gets or sets the start angle.
            </summary>
            <value> The start angle. </value>
        </member>
        <member name="P:OxyPlot.Series.PieSeries.Stroke">
            <summary>
            Gets or sets the stroke.
            </summary>
            <value> The stroke. </value>
        </member>
        <member name="P:OxyPlot.Series.PieSeries.StrokeThickness">
            <summary>
            Gets or sets the stroke thickness.
            </summary>
            <value> The stroke thickness. </value>
        </member>
        <member name="P:OxyPlot.Series.PieSeries.TickDistance">
            <summary>
            Gets or sets the tick distance.
            </summary>
            <value> The tick distance. </value>
        </member>
        <member name="P:OxyPlot.Series.PieSeries.TickHorizontalLength">
            <summary>
            Gets or sets the length of the horizontal part of the tick.
            </summary>
            <value> The length. </value>
        </member>
        <member name="P:OxyPlot.Series.PieSeries.TickLabelDistance">
            <summary>
            Gets or sets the tick label distance.
            </summary>
            <value> The tick label distance. </value>
        </member>
        <member name="P:OxyPlot.Series.PieSeries.TickRadialLength">
            <summary>
            Gets or sets the length of the tick radial.
            </summary>
            <value> The length of the tick radial. </value>
        </member>
        <member name="P:OxyPlot.Series.PieSeries.ValueField">
            <summary>
            Gets or sets the name of the property containing the value.
            </summary>
            <value> The value field. </value>
        </member>
        <member name="T:OxyPlot.Series.PieSlice">
            <summary>
            Represent a slice of a <see cref="T:OxyPlot.Series.PieSeries"/>.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.PieSlice.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.PieSlice"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.PieSlice.#ctor(System.String,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.PieSlice"/> class.
            </summary>
            <param name="label">
            The label.
            </param>
            <param name="value">
            The value.
            </param>
            <param name="fill">
            The fill.
            </param>
        </member>
        <member name="P:OxyPlot.Series.PieSlice.Fill">
            <summary>
            Gets or sets Fill.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.PieSlice.ActualFillColor">
            <summary>
            Gets the actual fill color.
            </summary>
            <value>The actual color.</value>
        </member>
        <member name="P:OxyPlot.Series.PieSlice.IsExploded">
            <summary>
            Gets or sets a value indicating whether IsExploded.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.PieSlice.Label">
            <summary>
            Gets or sets Label.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.PieSlice.Value">
            <summary>
            Gets or sets Value.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.PieSlice.DefaultFillColor">
            <summary>
            Gets or sets the default fill color.
            </summary>
            <value>The default fill color.</value>
        </member>
        <member name="T:OxyPlot.Series.ScatterPoint">
            <summary>
            Represents a point in a <see cref="T:OxyPlot.Series.ScatterSeries"/>.
            </summary>
        </member>
        <member name="F:OxyPlot.Series.ScatterPoint.size">
            <summary>
            The size.
            </summary>
        </member>
        <member name="F:OxyPlot.Series.ScatterPoint.tag">
            <summary>
            The tag.
            </summary>
        </member>
        <member name="F:OxyPlot.Series.ScatterPoint.value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="F:OxyPlot.Series.ScatterPoint.x">
            <summary>
            The x.
            </summary>
        </member>
        <member name="F:OxyPlot.Series.ScatterPoint.y">
            <summary>
            The y.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.ScatterPoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.ScatterPoint"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.ScatterPoint.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.ScatterPoint"/> class.
            </summary>
            <param name="x">
            The x.
            </param>
            <param name="y">
            The y.
            </param>
            <param name="size">
            The size.
            </param>
            <param name="value">
            The value.
            </param>
            <param name="tag">
            The tag.
            </param>
        </member>
        <member name="M:OxyPlot.Series.ScatterPoint.ToCode">
            <summary>
            Returns C# code that generates this instance.
            </summary>
            <returns>
            C# code.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.ScatterPoint.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:OxyPlot.Series.ScatterPoint.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:OxyPlot.Series.ScatterPoint.Tag">
            <summary>
            Gets or sets the tag.
            </summary>
            <value>The tag.</value>
        </member>
        <member name="P:OxyPlot.Series.ScatterPoint.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:OxyPlot.Series.ScatterPoint.X">
            <summary>
            Gets or sets the X.
            </summary>
            <value>The X.</value>
        </member>
        <member name="P:OxyPlot.Series.ScatterPoint.Y">
            <summary>
            Gets or sets the Y.
            </summary>
            <value>The Y.</value>
        </member>
        <member name="T:OxyPlot.Series.ScatterSeries">
            <summary>
            Represents a series for scatter plots.
            </summary>
            <remarks>
            See http://en.wikipedia.org/wiki/Scatter_plot
            </remarks>
        </member>
        <member name="F:OxyPlot.Series.ScatterSeries.defaultMarkerFillColor">
            <summary>
            The default fill color.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.ScatterSeries.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.ScatterSeries"/> class.
            </summary>
            <param name="title">
            The title.
            </param>
            <param name="markerFill">
            The marker fill color.
            </param>
            <param name="markerSize">
            Size of the markers (If ScatterPoint.Size is set, this value will be overridden).
            </param>
        </member>
        <member name="M:OxyPlot.Series.ScatterSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.ScatterSeries"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.ScatterSeries.GetNearestPoint(OxyPlot.ScreenPoint,System.Boolean)">
            <summary>
            Gets the nearest point.
            </summary>
            <param name="point">
            The point.
            </param>
            <param name="interpolate">
            interpolate if set to <c>true</c> .
            </param>
            <returns>
            A TrackerHitResult for the current hit.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.ScatterSeries.IsValidPoint(OxyPlot.Series.ScatterPoint,OxyPlot.Axes.Axis,OxyPlot.Axes.Axis)">
            <summary>
            Determines whether the specified point is valid.
            </summary>
            <param name="pt">
            The point.
            </param>
            <param name="xaxis">
            The x axis.
            </param>
            <param name="yaxis">
            The y axis.
            </param>
            <returns>
            <c>true</c> if the point is valid; otherwise, <c>false</c> .
            </returns>
        </member>
        <member name="M:OxyPlot.Series.ScatterSeries.Render(OxyPlot.IRenderContext,OxyPlot.PlotModel)">
            <summary>
            Renders the series on the specified rendering context.
            </summary>
            <param name="rc">
            The rendering context.
            </param>
            <param name="model">
            The owner plot model.
            </param>
        </member>
        <member name="M:OxyPlot.Series.ScatterSeries.RenderLegend(OxyPlot.IRenderContext,OxyPlot.OxyRect)">
            <summary>
            Renders the legend symbol for the line series on the specified rendering context.
            </summary>
            <param name="rc">
            The rendering context.
            </param>
            <param name="legendBox">
            The bounding rectangle of the legend box.
            </param>
        </member>
        <member name="M:OxyPlot.Series.ScatterSeries.EnsureAxes">
            <summary>
            Ensures that the axes of the series is defined.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.ScatterSeries.SetDefaultValues(OxyPlot.PlotModel)">
            <summary>
            Sets the default values.
            </summary>
            <param name="model">
            The model.
            </param>
        </member>
        <member name="M:OxyPlot.Series.ScatterSeries.UpdateData">
            <summary>
            The update data.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.ScatterSeries.UpdateMaxMin">
            <summary>
            Updates the max/min from the data points.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.ScatterSeries.AddScatterPoints(System.Collections.Generic.IList{OxyPlot.Series.ScatterPoint},System.Collections.IEnumerable,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Adds scatter points specified by a items source and data fields.
            </summary>
            <param name="dest">
            The destination collection.
            </param>
            <param name="itemsSource">
            The items source.
            </param>
            <param name="dataFieldX">
            The data field x.
            </param>
            <param name="dataFieldY">
            The data field y.
            </param>
            <param name="dataFieldSize">
            The data field size.
            </param>
            <param name="dataFieldValue">
            The data field value.
            </param>
            <param name="dataFieldTag">
            The data field tag.
            </param>
        </member>
        <member name="M:OxyPlot.Series.ScatterSeries.InternalUpdateMaxMinValue(System.Collections.Generic.IList{OxyPlot.IDataPoint})">
            <summary>
            Updates the Max/Min limits from the values in the specified point list.
            </summary>
            <param name="pts">
            The points.
            </param>
        </member>
        <member name="P:OxyPlot.Series.ScatterSeries.BinSize">
            <summary>
            Gets or sets the screen resolution. If this number is greater than 1, bins of that size is created for both x and y directions. Only one point will be drawn in each bin.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.ScatterSeries.ColorAxis">
            <summary>
            Gets or sets the color map.
            </summary>
            <value> The color map. </value>
            <remarks>
            This is used to map scatter point values to colors.
            </remarks>
        </member>
        <member name="P:OxyPlot.Series.ScatterSeries.ColorAxisKey">
            <summary>
            Gets or sets the color axis key.
            </summary>
            <value> The color axis key. </value>
        </member>
        <member name="P:OxyPlot.Series.ScatterSeries.DataFieldSize">
            <summary>
            Gets or sets the data field for the size.
            </summary>
            <value> The size data field. </value>
        </member>
        <member name="P:OxyPlot.Series.ScatterSeries.DataFieldTag">
            <summary>
            Gets or sets the tag data field.
            </summary>
            <value> The tag data field. </value>
        </member>
        <member name="P:OxyPlot.Series.ScatterSeries.DataFieldValue">
            <summary>
            Gets or sets the value data field.
            </summary>
            <value> The value data field. </value>
        </member>
        <member name="P:OxyPlot.Series.ScatterSeries.MarkerFill">
            <summary>
            Gets or sets the marker fill color. If null, this color will be automatically set.
            </summary>
            <value> The marker fill color. </value>
        </member>
        <member name="P:OxyPlot.Series.ScatterSeries.ActualMarkerFillColor">
            <summary>
            Gets the actual fill color.
            </summary>
            <value>The actual color.</value>
        </member>
        <member name="P:OxyPlot.Series.ScatterSeries.MarkerOutline">
            <summary>
            Gets or sets the marker outline polygon. Set MarkerType to Custom to use this.
            </summary>
            <value> The marker outline. </value>
        </member>
        <member name="P:OxyPlot.Series.ScatterSeries.MarkerSize">
            <summary>
            Gets or sets the size of the marker (same size for all items).
            </summary>
            <value> The size of the markers. </value>
        </member>
        <member name="P:OxyPlot.Series.ScatterSeries.MarkerStroke">
            <summary>
            Gets or sets the marker stroke.
            </summary>
            <value> The marker stroke. </value>
        </member>
        <member name="P:OxyPlot.Series.ScatterSeries.MarkerStrokeThickness">
            <summary>
            Gets or sets the marker stroke thickness.
            </summary>
            <value> The marker stroke thickness. </value>
        </member>
        <member name="P:OxyPlot.Series.ScatterSeries.MarkerType">
            <summary>
            Gets or sets the type of the marker.
            </summary>
            <value> The type of the marker. </value>
            <remarks>
            If MarkerType.Custom is used, the MarkerOutline property must be specified.
            </remarks>
        </member>
        <member name="P:OxyPlot.Series.ScatterSeries.MaxValue">
            <summary>
            Gets the max value of the points.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.ScatterSeries.MinValue">
            <summary>
            Gets the min value of the points.
            </summary>
        </member>
        <member name="T:OxyPlot.Series.StairStepSeries">
            <summary>
            Represents a series for stair step graphs.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.StairStepSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.StairStepSeries"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.StairStepSeries.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.StairStepSeries"/> class.
            </summary>
            <param name="title">
            The title.
            </param>
        </member>
        <member name="M:OxyPlot.Series.StairStepSeries.#ctor(OxyPlot.OxyColor)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.StairStepSeries"/> class.
            </summary>
            <param name="color">
            The color.
            </param>
            <param name="strokeThickness">
            The stroke thickness.
            </param>
            <param name="title">
            The title.
            </param>
        </member>
        <member name="M:OxyPlot.Series.StairStepSeries.GetNearestPoint(OxyPlot.ScreenPoint,System.Boolean)">
            <summary>
            Gets the nearest point.
            </summary>
            <param name="point">
            The point.
            </param>
            <param name="interpolate">
            interpolate if set to <c>true</c> .
            </param>
            <returns>
            A TrackerHitResult for the current hit.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.StairStepSeries.Render(OxyPlot.IRenderContext,OxyPlot.PlotModel)">
            <summary>
            Renders the LineSeries on the specified rendering context.
            </summary>
            <param name="rc">
            The rendering context.
            </param>
            <param name="model">
            The owner plot model.
            </param>
        </member>
        <member name="P:OxyPlot.Series.StairStepSeries.VerticalStrokeThickness">
            <summary>
            Gets or sets the stroke thickness of the vertical line segments.
            </summary>
            <remarks>
            Set the value to NaN to use the StrokeThickness property for both horizontal and vertical segments.
            Using the VerticalStrokeThickness property will have a small performance hit.
            </remarks>
            <value>The vertical stroke thickness.</value>
        </member>
        <member name="P:OxyPlot.Series.StairStepSeries.VerticalLineStyle">
            <summary>
            Gets or sets the line style of the vertical line segments.
            </summary>
            <value>The vertical line style.</value>
        </member>
        <member name="T:OxyPlot.Series.StemSeries">
            <summary>
            Represents a series that plots discrete data in a stem plot.
            </summary>
            <remarks>
            See <a href="http://en.wikipedia.org/wiki/Stemplot">Stem plot</a> and
            <a href="http://www.mathworks.com/help/techdoc/ref/stem.html">stem</a>.
            </remarks>
        </member>
        <member name="M:OxyPlot.Series.StemSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.StemSeries"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.StemSeries.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.StemSeries"/> class.
            </summary>
            <param name="title">
            The title.
            </param>
        </member>
        <member name="M:OxyPlot.Series.StemSeries.#ctor(OxyPlot.OxyColor)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.StemSeries"/> class.
            </summary>
            <param name="color">
            The color of the line stroke.
            </param>
            <param name="strokeThickness">
            The stroke thickness (optional).
            </param>
            <param name="title">
            The title (optional).
            </param>
        </member>
        <member name="M:OxyPlot.Series.StemSeries.GetNearestPoint(OxyPlot.ScreenPoint,System.Boolean)">
            <summary>
            Gets the point on the series that is nearest the specified point.
            </summary>
            <param name="point">
            The point.
            </param>
            <param name="interpolate">
            Interpolate the series if this flag is set to <c>true</c>.
            </param>
            <returns>
            A TrackerHitResult for the current hit.
            </returns>
        </member>
        <member name="M:OxyPlot.Series.StemSeries.Render(OxyPlot.IRenderContext,OxyPlot.PlotModel)">
            <summary>
            Renders the LineSeries on the specified rendering context.
            </summary>
            <param name="rc">
            The rendering context.
            </param>
            <param name="model">
            The owner plot model.
            </param>
        </member>
        <member name="P:OxyPlot.Series.StemSeries.Base">
            <summary>
            Gets or sets Base.
            </summary>
        </member>
        <member name="T:OxyPlot.Series.TwoColorLineSeries">
            <summary>
            Represents a two-color line series.
            </summary>
        </member>
        <member name="F:OxyPlot.Series.TwoColorLineSeries.defaultColor2">
            <summary>
            The default second color.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.TwoColorLineSeries.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.Series.TwoColorLineSeries"/> class.
            </summary>
        </member>
        <member name="M:OxyPlot.Series.TwoColorLineSeries.SetDefaultValues(OxyPlot.PlotModel)">
            <summary>
            The set default values.
            </summary>
            <param name="model">
            The model.
            </param>
        </member>
        <member name="M:OxyPlot.Series.TwoColorLineSeries.RenderSmoothedLine(OxyPlot.IRenderContext,OxyPlot.OxyRect,System.Collections.Generic.IList{OxyPlot.ScreenPoint})">
            <summary>
            Renders the smoothed line.
            </summary>
            <param name="rc">
            The render context.
            </param>
            <param name="clippingRect">
            The clipping rect.
            </param>
            <param name="pointsToRender">
            The points.
            </param>
        </member>
        <member name="P:OxyPlot.Series.TwoColorLineSeries.Color2">
            <summary>
            Gets or sets the color for the part of the line that is below the limit.
            </summary>
        </member>
        <member name="P:OxyPlot.Series.TwoColorLineSeries.ActualColor2">
            <summary>
            Gets the actual second color.
            </summary>
            <value>The actual color.</value>
        </member>
        <member name="P:OxyPlot.Series.TwoColorLineSeries.Limit">
            <summary>
            Gets or sets the limit.
            </summary>
            <remarks>
            The parts of the line that is below this limit will be rendered with Color2.
            The parts of the line that is above the limit will be rendered with Color.
            </remarks>
        </member>
        <member name="P:OxyPlot.Series.TwoColorLineSeries.LineStyle2">
            <summary>
            Gets or sets the line style for the part of the line that is below the limit.
            </summary>
            <value>The line style.</value>
        </member>
        <member name="P:OxyPlot.Series.TwoColorLineSeries.ActualLineStyle2">
            <summary>
            Gets the actual line style for the part of the line that is below the limit.
            </summary>
            <value>The line style.</value>
        </member>
        <member name="T:OxyPlot.SvgExporter">
            <summary>
            Exports plots to scalable vector graphics.
            </summary>
        </member>
        <member name="M:OxyPlot.SvgExporter.Export(OxyPlot.PlotModel,System.IO.Stream,System.Double,System.Double,System.Boolean,OxyPlot.IRenderContext)">
            <summary>
            Exports the specified model to a stream.
            </summary>
            <param name="model">The model.</param>
            <param name="stream">The output stream.</param>
            <param name="width">The width (points).</param>
            <param name="height">The height (points).</param>
            <param name="isDocument">if set to <c>true</c>, the xml headers will be included (?xml and !DOCTYPE).</param>
            <param name="textMeasurer">The text measurer.</param>
        </member>
        <member name="M:OxyPlot.SvgExporter.ExportToString(OxyPlot.PlotModel,System.Double,System.Double,System.Boolean,OxyPlot.IRenderContext)">
            <summary>
            Exports to string.
            </summary>
            <param name="model">The model.</param>
            <param name="width">The width (points).</param>
            <param name="height">The height (points).</param>
            <param name="isDocument">if set to <c>true</c>, the xml headers will be included (?xml and !DOCTYPE).</param>
            <param name="textMeasurer">The text measurer.</param>
            <returns>
            The plot as a svg string.
            </returns>
        </member>
        <member name="T:OxyPlot.SvgRenderContext">
            <summary>
            Provides a render context for scalable vector graphics output.
            </summary>
        </member>
        <member name="F:OxyPlot.SvgRenderContext.w">
            <summary>
            The writer.
            </summary>
        </member>
        <member name="F:OxyPlot.SvgRenderContext.disposed">
            <summary>
            The disposed flag.
            </summary>
        </member>
        <member name="M:OxyPlot.SvgRenderContext.#ctor(System.IO.Stream,System.Double,System.Double,System.Boolean,OxyPlot.IRenderContext,OxyPlot.OxyColor)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.SvgRenderContext"/> class.
            </summary>
            <param name="s">The s.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="isDocument">Create an SVG document if set to <c>true</c>.</param>
            <param name="textMeasurer">The text measurer.</param>
            <param name="background">The background.</param>
        </member>
        <member name="M:OxyPlot.SvgRenderContext.Close">
            <summary>
            Closes the svg writer.
            </summary>
        </member>
        <member name="M:OxyPlot.SvgRenderContext.Complete">
            <summary>
            Completes the svg element.
            </summary>
        </member>
        <member name="M:OxyPlot.SvgRenderContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:OxyPlot.SvgRenderContext.DrawEllipse(OxyPlot.OxyRect,OxyPlot.OxyColor,OxyPlot.OxyColor,System.Double)">
            <summary>
            Draws an ellipse.
            </summary>
            <param name="rect">The rectangle.</param>
            <param name="fill">The fill color.</param>
            <param name="stroke">The stroke color.</param>
            <param name="thickness">The thickness.</param>
        </member>
        <member name="M:OxyPlot.SvgRenderContext.DrawLine(System.Collections.Generic.IList{OxyPlot.ScreenPoint},OxyPlot.OxyColor,System.Double,System.Double[],OxyPlot.OxyPenLineJoin,System.Boolean)">
            <summary>
            Draws the polyline from the specified points.
            </summary>
            <param name="points">The points.</param>
            <param name="stroke">The stroke color.</param>
            <param name="thickness">The stroke thickness.</param>
            <param name="dashArray">The dash array.</param>
            <param name="lineJoin">The line join type.</param>
            <param name="aliased">if set to <c>true</c> the shape will be aliased.</param>
        </member>
        <member name="M:OxyPlot.SvgRenderContext.DrawPolygon(System.Collections.Generic.IList{OxyPlot.ScreenPoint},OxyPlot.OxyColor,OxyPlot.OxyColor,System.Double,System.Double[],OxyPlot.OxyPenLineJoin,System.Boolean)">
            <summary>
            Draws the polygon from the specified points. The polygon can have stroke and/or fill.
            </summary>
            <param name="points">The points.</param>
            <param name="fill">The fill color.</param>
            <param name="stroke">The stroke color.</param>
            <param name="thickness">The stroke thickness.</param>
            <param name="dashArray">The dash array.</param>
            <param name="lineJoin">The line join type.</param>
            <param name="aliased">if set to <c>true</c> the shape will be aliased.</param>
        </member>
        <member name="M:OxyPlot.SvgRenderContext.DrawRectangle(OxyPlot.OxyRect,OxyPlot.OxyColor,OxyPlot.OxyColor,System.Double)">
            <summary>
            Draws the rectangle.
            </summary>
            <param name="rect">The rectangle.</param>
            <param name="fill">The fill color.</param>
            <param name="stroke">The stroke color.</param>
            <param name="thickness">The stroke thickness.</param>
        </member>
        <member name="M:OxyPlot.SvgRenderContext.DrawText(OxyPlot.ScreenPoint,System.String,OxyPlot.OxyColor,System.String,System.Double,System.Double,System.Double,OxyPlot.HorizontalAlignment,OxyPlot.VerticalAlignment,System.Nullable{OxyPlot.OxySize})">
            <summary>
            Draws the text.
            </summary>
            <param name="p">The p.</param>
            <param name="text">The text.</param>
            <param name="c">The c.</param>
            <param name="fontFamily">The font family.</param>
            <param name="fontSize">Size of the font.</param>
            <param name="fontWeight">The font weight.</param>
            <param name="rotate">The rotate.</param>
            <param name="halign">The horizontal alignment.</param>
            <param name="valign">The vertical alignment.</param>
            <param name="maxSize">Size of the max.</param>
        </member>
        <member name="M:OxyPlot.SvgRenderContext.Flush">
            <summary>
            Flushes this instance.
            </summary>
        </member>
        <member name="M:OxyPlot.SvgRenderContext.MeasureText(System.String,System.String,System.Double,System.Double)">
            <summary>
            Measures the text.
            </summary>
            <param name="text">The text.</param>
            <param name="fontFamily">The font family.</param>
            <param name="fontSize">Size of the font.</param>
            <param name="fontWeight">The font weight.</param>
            <returns>
            The text size.
            </returns>
        </member>
        <member name="M:OxyPlot.SvgRenderContext.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:OxyPlot.SvgRenderContext.TextMeasurer">
            <summary>
            Gets or sets the text measurer.
            </summary>
            <value>
            The text measurer.
            </value>
        </member>
        <member name="T:OxyPlot.SvgWriter">
            <summary>
            Represents a writer that provides easy generation of Scalable Vector Graphics files.
            </summary>
        </member>
        <member name="F:OxyPlot.SvgWriter.endIsWritten">
            <summary>
            The end is written.
            </summary>
        </member>
        <member name="M:OxyPlot.SvgWriter.#ctor(System.IO.Stream,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:OxyPlot.SvgWriter"/> class.
            </summary>
            <param name="stream">
            The stream.
            </param>
            <param name="width">
            The width.
            </param>
            <param name="height">
            The height.
            </param>
            <param name="isDocument">
            if set to <c>true</c>, the writer will write the xml headers (?xml and !DOCTYPE).
            </param>
        </member>
        <member name="M:OxyPlot.SvgWriter.Close">
            <summary>
            Closes the svg document.
            </summary>
        </member>
        <member name="M:OxyPlot.SvgWriter.Complete">
            <summary>
            Writes the end of the document.
            </summary>
        </member>
        <member name="M:OxyPlot.SvgWriter.CreateStyle(OxyPlot.OxyColor,OxyPlot.OxyColor,System.Double)">
            <summary>
            Creates a style.
            </summary>
            <param name="fill">
            The fill color.
            </param>
            <param name="stroke">
            The stroke color.
            </param>
            <param name="thickness">
            The stroke thickness.
            </param>
            <param name="dashArray">
            The line dash array.
            </param>
            <param name="lineJoin">
            The line join type.
            </param>
            <returns>
            A style string.
            </returns>
        </member>
        <member name="M:OxyPlot.SvgWriter.WriteEllipse(System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Writes an ellipse.
            </summary>
            <param name="x">
            The x coordinate of the center.
            </param>
            <param name="y">
            The y coordinate of the center.
            </param>
            <param name="width">
            The width.
            </param>
            <param name="height">
            The height.
            </param>
            <param name="style">
            The style.
            </param>
        </member>
        <member name="M:OxyPlot.SvgWriter.WriteLine(OxyPlot.ScreenPoint,OxyPlot.ScreenPoint,System.String)">
            <summary>
            Writes a line.
            </summary>
            <param name="p1">
            The first point.
            </param>
            <param name="p2">
            The second point.
            </param>
            <param name="style">
            The style.
            </param>
        </member>
        <member name="M:OxyPlot.SvgWriter.WritePolygon(System.Collections.Generic.IEnumerable{OxyPlot.ScreenPoint},System.String)">
            <summary>
            Writes a polygon.
            </summary>
            <param name="points">
            The points.
            </param>
            <param name="style">
            The style.
            </param>
        </member>
        <member name="M:OxyPlot.SvgWriter.WritePolyline(System.Collections.Generic.IEnumerable{OxyPlot.ScreenPoint},System.String)">
            <summary>
            Writes a polyline.
            </summary>
            <param name="pts">
            The points.
            </param>
            <param name="style">
            The style.
            </param>
        </member>
        <member name="M:OxyPlot.SvgWriter.WriteRectangle(System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Writes a rectangle.
            </summary>
            <param name="x">
            The x coordinate.
            </param>
            <param name="y">
            The y coordinate.
            </param>
            <param name="width">
            The width.
            </param>
            <param name="height">
            The height.
            </param>
            <param name="style">
            The style.
            </param>
        </member>
        <member name="M:OxyPlot.SvgWriter.WriteText(OxyPlot.ScreenPoint,System.String,OxyPlot.OxyColor)">
            <summary>
            Writes text.
            </summary>
            <param name="position">
            The position.
            </param>
            <param name="text">
            The text.
            </param>
            <param name="fill">
            The text color.
            </param>
            <param name="fontFamily">
            The font family.
            </param>
            <param name="fontSize">
            The font size.
            </param>
            <param name="fontWeight">
            The font weight.
            </param>
            <param name="rotate">
            The rotation angle.
            </param>
            <param name="halign">
            The horizontal alignment.
            </param>
            <param name="valign">
            The vertical alignment.
            </param>
        </member>
        <member name="M:OxyPlot.SvgWriter.ColorToString(OxyPlot.OxyColor)">
            <summary>
            Converts a color to a svg color string.
            </summary>
            <param name="color">The color.</param>
            <returns>The color string.</returns>
        </member>
        <member name="M:OxyPlot.SvgWriter.WriteAttributeString(System.String,System.Double)">
            <summary>
            The write attribute string.
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:OxyPlot.SvgWriter.GetAutoValue(System.Double,System.String)">
            <summary>
            Converts a value to a string or to the specified "auto" string if the value is NaN.
            </summary>
            <param name="value">The value.</param>
            <param name="auto">The string to return if value is NaN.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:OxyPlot.SvgWriter.PointsToString(System.Collections.Generic.IEnumerable{OxyPlot.ScreenPoint})">
            <summary>
            Converts a list of points to a string.
            </summary>
            <param name="points">The points.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:OxyPlot.SvgWriter.WriteHeader(System.Double,System.Double)">
            <summary>
            The write header.
            </summary>
            <param name="width">
            The width.
            </param>
            <param name="height">
            The height.
            </param>
        </member>
        <member name="P:OxyPlot.SvgWriter.IsDocument">
            <summary>
            Gets or sets a value indicating whether this writer should produce a stand-alone document.
            </summary>
        </member>
        <member name="P:OxyPlot.SvgWriter.NumberFormat">
            <summary>
            Gets or sets the number format.
            </summary>
            <value>The number format.</value>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Temporary.Gwen.PagePreview">
            <summary>
            Represents a preview control for an XGraphics page. Can be used as an alternative to
            System.Windows.Forms.PrintPreviewControl.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Temporary.Gwen.PagePreview.posOffset">
            <summary>
            Upper left corner of scroll area.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Temporary.Gwen.PagePreview.pageSize">
            <summary>
            Real page size in point.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Temporary.Gwen.PagePreview.virtualPage">
            <summary>
            Page in pixel relative to virtual canvas.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Temporary.Gwen.PagePreview.m_VirtualCanvasSize">
            <summary>
            The size in pixel of an area that completely contains the virtual page and at leat a small 
            border around it. If this area is larger than the canvas window, it is scrolled.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Temporary.Gwen.PagePreview.printableArea">
            <summary>
            Printable area in point.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Temporary.Gwen.PagePreview.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Temporary.Gwen.PagePreview"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Temporary.Gwen.PagePreview.SetRenderEvent(Alt.GUI.PdfSharp.Temporary.Gwen.PagePreview.RenderEvent)">
            <summary>
            Sets a delagate that is invoked when the preview wants to be painted.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Temporary.Gwen.PagePreview.OnZoomChanged(System.EventArgs)">
            <summary>
            Raises the ZoomChanged event when the zoom factor changed.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Temporary.Gwen.PagePreview.OnSizeChanged(System.EventArgs)">
            <summary>
            Recalculates the preview dimension.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Temporary.Gwen.PagePreview.Invalidate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Temporary.Gwen.PagePreview.Layout(Alt.GUI.Temporary.Gwen.Skin.Base)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Temporary.Gwen.PagePreview.CalculatePreviewDimension(System.Boolean@)">
            <summary>
            Calculates all values for drawing the page preview.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Temporary.Gwen.PagePreview.PaintBackground(Alt.Sketch.Graphics)">
            <summary>
            Paints the background and the empty page.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Temporary.Gwen.PagePreview.SetScrollBarRange">
            <summary>
            Adjusts scroll bars.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Temporary.Gwen.PagePreview.Zoom">
            <summary>
            Gets or sets a predefined zoom factor.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Temporary.Gwen.PagePreview.ZoomPercent">
            <summary>
            Gets or sets an arbitrary zoom factor. The range is from 10 to 800.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Temporary.Gwen.PagePreview.PageColor">
            <summary>
            Gets or sets the color of the page.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Temporary.Gwen.PagePreview.DesktopColor">
            <summary>
            Gets or sets the color of the desktop.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Temporary.Gwen.PagePreview.ShowPage">
            <summary>
            Gets or sets a value indicating whether the page is visilbe.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Temporary.Gwen.PagePreview.PageSize">
            <summary>
            Gets or sets the page size in point.
            </summary>
        </member>
        <member name="E:Alt.GUI.PdfSharp.Temporary.Gwen.PagePreview.ZoomChanged">
            <summary>
            Occurs when the zoom factor changed.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Temporary.Gwen.PagePreview.RenderEvent">
            <summary>
            A delegate for invoking the render function.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Temporary.Gwen.PagePreviewCanvas">
            <summary>
            Implements the control that previews the page.
            </summary>
        </member>
        <member name="T:Alt.GUI.PieChart.Temporary.Gwen.PieChartControl">
            <summary>
            Summary description for PieChartControl.
            </summary>
        </member>
        <member name="M:Alt.GUI.PieChart.Temporary.Gwen.PieChartControl.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
              Initializes the <c>PieChartControl</c>.
            </summary>
        </member>
        <member name="M:Alt.GUI.PieChart.Temporary.Gwen.PieChartControl.OnPaint(Alt.GUI.PaintEventArgs)">
            <summary>
              Handles <c>OnPaint</c> event.
            </summary>
            <param name="args">
              <c>PaintEventArgs</c> object.
            </param>
        </member>
        <member name="M:Alt.GUI.PieChart.Temporary.Gwen.PieChartControl.DoDraw(Alt.Sketch.Graphics)">
            <summary>
              Sets values for the chart and draws them.
            </summary>
            <param name="graphics">
              Graphics object used for drawing.
            </param>
        </member>
        <member name="M:Alt.GUI.PieChart.Temporary.Gwen.PieChartControl.OnMouseLeave(System.EventArgs)">
            <summary>
              Handles <c>MouseLeave</c> event to disable tooltip.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Alt.GUI.PieChart.Temporary.Gwen.PieChartControl.OnMouseMove(Alt.GUI.MouseEventArgs)">
            <summary>
              Handles <c>MouseMove</c> event to display tooltip for the pie
              slice under pointer and to display slice in highlighted color.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Alt.GUI.PieChart.Temporary.Gwen.PieChartControl.Dispose">
            <summary>
              Clean up any resources being used.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.Temporary.Gwen.PieChartControl.m_disposed">
            <summary>
              Flag indicating that object has been disposed.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.Temporary.Gwen.PieChartControl.LeftMargin">
            <summary>
              Sets the left margin for the chart.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.Temporary.Gwen.PieChartControl.RightMargin">
            <summary>
              Sets the right margin for the chart.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.Temporary.Gwen.PieChartControl.TopMargin">
            <summary>
              Sets the top margin for the chart.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.Temporary.Gwen.PieChartControl.BottomMargin">
            <summary>
              Sets the bottom margin for the chart.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.Temporary.Gwen.PieChartControl.FitChart">
            <summary>
              Sets the indicator if chart should fit the bounding rectangle
              exactly.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.Temporary.Gwen.PieChartControl.Values">
            <summary>
              Sets values to be represented by the chart.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.Temporary.Gwen.PieChartControl.Colors">
            <summary>
              Sets colors to be used for rendering pie slices.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.Temporary.Gwen.PieChartControl.SliceRelativeDisplacements">
            <summary>
              Sets values for slice displacements.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.Temporary.Gwen.PieChartControl.ToolTips">
            <summary>
              Gets or sets tooltip texts.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.Temporary.Gwen.PieChartControl.Texts">
            <summary>
              Sets texts appearing by each pie slice.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.Temporary.Gwen.PieChartControl.SliceRelativeHeight">
            <summary>
              Sets pie slice reative height.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.Temporary.Gwen.PieChartControl.ShadowStyle">
            <summary>
              Sets the shadow style.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.Temporary.Gwen.PieChartControl.EdgeColorType">
            <summary>
             Sets the edge color type.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.Temporary.Gwen.PieChartControl.EdgeLineWidth">
            <summary>
              Sets the edge lines width.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.Temporary.Gwen.PieChartControl.InitialAngle">
            <summary>
              Sets the initial angle from which pies are drawn.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.Temporary.Gwen.PieChartControl.HasAnyValue">
            <summary>
              Gets a flag indicating if at least one value is nonzero.
            </summary>
        </member>
        <member name="T:Alt.GUI.QuickFont.Builder">
            <summary>
            Class for building a Quick Font, given a Font
            and a configuration object.
            </summary>
        </member>
        <member name="M:Alt.GUI.QuickFont.Builder.IsMonospaced(System.Collections.Generic.List{Alt.Sketch.Size})">
            <summary>
            Returns true if all glyph widths are within 5% of each other
            </summary>
            <param name="sizes"></param>
            <returns></returns>
        </member>
        <member name="M:Alt.GUI.QuickFont.Builder.PowerOfTwo(System.Int32)">
            <summary>
            Returns the power of 2 that is closest to x, but not smaller than x.
            </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.TextGenerationRenderHint.AntiAliasGridFit">
            <summary>
            Use AntiAliasGridFit when rendering the ttf character set to create the QFont texture
            </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.TextGenerationRenderHint.AntiAlias">
            <summary>
            Use AntiAlias when rendering the ttf character set to create the QFont texture
            </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.TextGenerationRenderHint.SizeDependent">
            <summary>
            Use ClearTypeGridFit if the font is smaller than 12, otherwise use AntiAlias
            </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.TextGenerationRenderHint.ClearTypeGridFit">
            <summary>
            Use ClearTypeGridFit when rendering the ttf character set to create the QFont texture
            </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.TextGenerationRenderHint.SystemDefault">
            <summary>
            Use SystemDefault when rendering the ttf character set to create the QFont texture
            </summary>
        </member>
        <member name="T:Alt.GUI.QuickFont.QFontBuilderConfiguration">
            <summary>
            What settings to use when building the font
            </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.QFontConfiguration.TransformToCurrentOrthogProjection">
            <summary>
            Render the font pixel-prefectly at a size in units of the current orthogonal projection, independent of the viewport pixel size.
            </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.QFontBuilderConfiguration.SuperSampleLevels">
            <summary>
            Whether to use super sampling when building font texture pages
            
            
            </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.QFontBuilderConfiguration.PageWidth">
            <summary>
            The standard width of texture pages (the page will
            automatically be cropped if there is extra space)
            </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.QFontBuilderConfiguration.PageHeight">
            <summary>
            The standard height of texture pages (the page will
            automatically be cropped if there is extra space)
            </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.QFontBuilderConfiguration.ForcePowerOfTwo">
            <summary>
            Whether to force texture pages to use a power of two.
            </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.QFontBuilderConfiguration.GlyphMargin">
            <summary>
            The margin (on all sides) around glyphs when rendered to
            their texture page
            </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.QFontBuilderConfiguration.charSet">
            <summary>
            Set of characters to support
            </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.QFontBuilderConfiguration.TextGenerationRenderHint">
            <summary>
            Which render hint to use when rendering the ttf character set to create the QFont texture
            </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.CharacterKerningRule.Normal">
            <summary>
            Ordinary kerning
            </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.CharacterKerningRule.Zero">
            <summary>
            All kerning pairs involving this character will kern by 0. This will
            override both Normal and NotMoreThanHalf for any pair.
            </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.CharacterKerningRule.NotMoreThanHalf">
            <summary>
            Any kerning pairs involving this character will not kern
            by more than half the minimum width of the two characters 
            involved. This will override Normal for any pair.
            </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.QFontKerningConfiguration.CharacterKerningRules">
            <summary>
            Kerning rules for particular characters
            </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.QFontKerningConfiguration.alphaEmptyPixelTolerance">
            <summary>
            When measuring the bounds of glyphs, and performing kerning calculations, 
            this is the minimum alpha level that is necessray for a pixel to be considered
            non-empty. This should be set to a value on the range [0,255]
            </summary>
        </member>
        <member name="M:Alt.GUI.QuickFont.QFontKerningConfiguration.BatchSetCharacterKerningRule(System.String,Alt.GUI.QuickFont.CharacterKerningRule)">
            <summary>
            Sets all characters in the given string to the specified kerning rule.
            </summary>
            <param name="chars"></param>
            <param name="rule"></param>
        </member>
        <member name="M:Alt.GUI.QuickFont.QFontKerningConfiguration.SetCharacterKerningRule(System.Char,Alt.GUI.QuickFont.CharacterKerningRule)">
            <summary>
            Sets the specified character kerning rule.
            </summary>
            <param name="c"></param>
            <param name="rule"></param>
        </member>
        <member name="M:Alt.GUI.QuickFont.QFontKerningConfiguration.GetOverridingCharacterKerningRuleForPair(System.String)">
            <summary>
            Given a pair of characters, this will return the overriding 
            CharacterKerningRule.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:Alt.GUI.QuickFont.QFontLoaderConfiguration">
            <summary>
            The configuraiton used when loading a font from a qfont file.
            </summary>
        </member>
        <member name="T:Alt.GUI.QuickFont.QFontShadowConfiguration">
            <summary>
            The configuration used when building a font drop shadow.
            </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.QFontShadowConfiguration.Scale">
            <summary>
            Scale in relation to the actual font glyphs
            </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.QFontShadowConfiguration.blurRadius">
            <summary>
            The blur radius. Caution: high values will greatly impact the 
            time it takes to build a font shadow
            </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.QFontShadowConfiguration.blurPasses">
            <summary>
            Number of blur passes. Caution: high values will greatly impact the 
            time it takes to build a font shadow
            </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.QFontShadowConfiguration.PageWidth">
            <summary>
            The standard width of texture pages (the page will
            automatically be cropped if there is extra space)
            </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.QFontShadowConfiguration.PageHeight">
            <summary>
            The standard height of texture pages (the page will
            automatically be cropped if there is extra space)
            </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.QFontShadowConfiguration.ForcePowerOfTwo">
            <summary>
            Whether to force texture pages to use a power of two.
            </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.QFontShadowConfiguration.GlyphMargin">
            <summary>
            The margin (on all sides) around glyphs when rendered to
            their texture page. Note this is in addition to 3xblurRadius margin
            which is automatically added.
            </summary>
        </member>
        <member name="T:Alt.GUI.QuickFont.FontLoadDescription">
            <summary>
            Describes how a font was loaded so that it can be reloaded
            </summary>
        </member>
        <member name="M:Alt.GUI.QuickFont.QBitmap.BlitMask(Alt.Sketch.BitmapData,Alt.Sketch.BitmapData,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Blits a block of a bitmap data from source to destination, using the luminance of the source to determine the 
            alpha of the target. Source must be 24-bit, target must be 32-bit.
            </summary>
        </member>
        <member name="M:Alt.GUI.QuickFont.QBitmap.Blit(Alt.Sketch.BitmapData,Alt.Sketch.BitmapData,Alt.Sketch.RectI,System.Int32,System.Int32)">
            <summary>
            Blits from source to target. Both source and target must be 32-bit
            </summary>
        </member>
        <member name="M:Alt.GUI.QuickFont.QBitmap.Blit(Alt.Sketch.BitmapData,Alt.Sketch.BitmapData,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Blits from source to target. Both source and target must be 32-bit
            </summary>
        </member>
        <member name="M:Alt.GUI.QuickFont.QBitmap.Colour32(System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets colour without touching alpha values
            </summary>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
        </member>
        <member name="M:Alt.GUI.QuickFont.QFont.Reload">
            <summary>
            Reloads the font using the original loader/builder options. This may be useful if the underlying
            files change, or, more commonly, if the "TransformToCurrentOrthogProjection" option was used when
            creating the font, and the orthog projection has since changed (e.g. resizing the window). This 
            will do nothing for fonts created directly from a Font object.
            </summary>
        </member>
        <member name="M:Alt.GUI.QuickFont.QFont.OrthogonalTransform(Alt.GUI.QuickFont.QuickFontRenderer,System.Double@)">
            <summary>
            When TransformToOrthogProjection is enabled, we need to get the current orthogonal transformation,
            the font scale, and ensure that the projection is actually orthogonal
            </summary>
            <param name="fontScale"></param>
            <param name="viewportTransform"></param>
        </member>
        <member name="M:Alt.GUI.QuickFont.QFont.PushOptions(Alt.GUI.QuickFont.QFontRenderOptions)">
            <summary>
            Pushes the specified QFont options onto the options stack
            </summary>
            <param name="newOptions"></param>
        </member>
        <member name="M:Alt.GUI.QuickFont.QFont.PushOptions">
            <summary>
            Creates a clone of the current font options and pushes
            it onto the stack
            </summary>
        </member>
        <member name="M:Alt.GUI.QuickFont.QFont.Measure(System.String,System.Double,Alt.GUI.QuickFont.QFontAlignment)">
            <summary>
            Measures the actual width and height of the block of text.
            </summary>
            <param name="text"></param>
            <param name="bounds"></param>
            <param name="alignment"></param>
            <returns></returns>
        </member>
        <member name="M:Alt.GUI.QuickFont.QFont.Measure(Alt.GUI.QuickFont.ProcessedText)">
            <summary>
            Measures the actual width and height of the block of text
            </summary>
            <param name="processedText"></param>
            <returns></returns>
        </member>
        <member name="M:Alt.GUI.QuickFont.QFont.TextNodeLineLength(Alt.GUI.QuickFont.TextNode,System.Double)">
            <summary>
            Computes the length of the next line, and whether the line is valid for
            justification.
            </summary>
            <param name="node"></param>
            <param name="maxLength"></param>
            <param name="justifable"></param>
            <returns></returns>
        </member>
        <member name="M:Alt.GUI.QuickFont.QFont.JustifyLine(Alt.GUI.QuickFont.TextNode,System.Double)">
            <summary>
            Computes the length of the next line, and whether the line is valid for
            justification.
            </summary>
        </member>
        <member name="M:Alt.GUI.QuickFont.QFont.SkipTrailingSpace(Alt.GUI.QuickFont.TextNode,System.Double,System.Double)">
            <summary>
            Checks whether to skip trailing space on line because the next word does not
            fit.
            
            We only check one space - the assumption is that if there is more than one,
            it is a deliberate attempt to insert spaces.
            </summary>
            <param name="node"></param>
            <param name="lengthSoFar"></param>
            <param name="boundWidth"></param>
            <returns></returns>
        </member>
        <member name="M:Alt.GUI.QuickFont.QFont.Print(System.String,System.Double,Alt.GUI.QuickFont.QFontAlignment)">
            <summary>
            Prints text inside the given bounds.
            </summary>
            <param name="text"></param>
            <param name="bounds"></param>
            <param name="alignment"></param>
        </member>
        <member name="M:Alt.GUI.QuickFont.QFont.ProcessText(System.String,System.Double,Alt.GUI.QuickFont.QFontAlignment)">
            <summary>
            Creates node list object associated with the text.
            </summary>
            <param name="text"></param>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:Alt.GUI.QuickFont.QFont.Print(Alt.GUI.QuickFont.ProcessedText)">
            <summary>
            Prints text as previously processed with a boundary and alignment.
            </summary>
            <param name="processedText"></param>
        </member>
        <member name="M:Alt.GUI.QuickFont.QFont.InvalidateViewport">
            <summary>
            Invalidates the internally cached viewport, causing it to be 
            reread the next time it is required. This should be called
            if the viewport and text is to be rendered to the new 
            viewport.
            </summary>
        </member>
        <member name="M:Alt.GUI.QuickFont.QFont.ForceViewportRefresh(Alt.GUI.QuickFont.QuickFontRenderer)">
            <summary>
            Forces the current viewport used by QFont to be read 
            from "hardware"
            </summary>
        </member>
        <member name="M:Alt.GUI.QuickFont.QFont.PushSoftwareViewport(Alt.GUI.QuickFont.Viewport)">
            <summary>
            Use a new viewport. This is more efficient 
            than calling ForceViewportRefresh() or InvalidateViewport()
            </summary>
            <param name="viewport"></param>
        </member>
        <member name="M:Alt.GUI.QuickFont.QFont.PopSoftwareViewport">
            <summary>
            Pops the last pushed viewport, returning
            to the previous viewport in use
            </summary>
        </member>
        <member name="M:Alt.GUI.QuickFont.QFont.Dispose">
            <summary>
            Dispose of the QFont data.
            </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.QFontData.KerningPairs">
            <summary>
            Mapping from a pair of characters to a pixel offset
            </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.QFontData.Pages">
            <summary>
            List of texture pages
            </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.QFontData.CharSetMapping">
            <summary>
            Mapping from character to glyph index
            </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.QFontData.meanGlyphWidth">
            <summary>
            The average glyph width
            </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.QFontData.maxGlyphHeight">
            <summary>
            The maximum glyph height
            </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.QFontData.dropShadow">
            <summary>
            Null if no dropShadow is available
            </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.QFontData.naturallyMonospaced">
            <summary>
            Whether the original font (from ttf) was detected to be monospaced
            </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.QFontData.scaleDueToTransformToViewport">
            <summary>
            The font scaling due to the font being transformed to the
            current viewport for consistent pixel-perfect size across
            any resolution
            </summary>
        </member>
        <member name="M:Alt.GUI.QuickFont.QFontData.GetKerningPairCorrection(System.Int32,System.String,Alt.GUI.QuickFont.TextNode)">
            <summary>
            Returns the kerning length correction for the character at the given index in the given string.
            Also, if the text is part of a textNode list, the nextNode is given so that the following 
            node can be checked incase of two adjacent word nodes.
            </summary>
            <param name="index"></param>
            <param name="text"></param>
            <param name="textNode"></param>
            <returns></returns>
        </member>
        <member name="F:Alt.GUI.QuickFont.QFontGlyph.page">
            <summary>
            Which texture page the glyph is on
            </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.QFontGlyph.rect">
            <summary>
            The rectangle defining the glyphs position on the page
            </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.QFontGlyph.yOffset">
            <summary>
            How far the glyph would need to be vertically offset to be vertically in line with the tallest glyph in the set of all glyphs
            </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.QFontGlyph.character">
            <summary>
            Which character this glyph represents
            </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.QFontRenderOptions.Colour">
            <summary>
            The font colour
            </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.QFontRenderOptions.CharacterSpacing">
            <summary>
            Spacing between characters in units of average glyph width
            </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.QFontRenderOptions.WordSpacing">
            <summary>
            Spacing between words in units of average glyph width
            </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.QFontRenderOptions.LineSpacing">
            <summary>
            Line spacing in units of max glyph width
            </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.QFontRenderOptions.DropShadowActive">
            <summary>
            Whether to draw a drop-shadow. Note: this requires
            the QFont to have been loaded with a drop shadow to
            take effect.
            </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.QFontRenderOptions.DropShadowOffset">
            <summary>
            Offset of the shadow from the font glyphs in units of average glyph width
            </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.QFontRenderOptions.DropShadowOpacity">
            <summary>
            Opacity of drop shadows
            </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.QFontRenderOptions.Monospacing">
            <summary>
            Whether to render the font in monospaced mode. If set to "Natural", then 
            monospacing will be used if the font loaded font was detected to be monospaced.
            </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.QFontRenderOptions.TransformToViewport">
             <summary>
             This is intended as a means of rendering text pixel-perfectly at a 
             fixed display size (size on screen) independent of the screen resolution.
             
             Ordinarily it is possible to render pixel-perfect text by calling 
             QFont.Begin() / QFont.End(); however, this means working in a coordinate 
             system corresponding to the current screen resolution. If the screen 
             resolution changes, then the display size of the font will change 
             accordingly which may not be desirable. Many games/applications prefer 
             to use a fixed orthog coordinate system that is independent of screen 
             resolution (e.g. 1000x1000) so that when the screen resolution changes,
             everything is still the same size on screen, it simply has higher
             definition - which is what this setting supports.
             
             One option is simply not to call QFont.Begin() / QFont.End(). This
             works; however, it becomes impossible to assure that glyphs are
             rendered pixel-perfectly. Instead they will be scaled in hardware.
             In most cases this looks fine; however, if you are a perfectionist, 
             you may prefer to use this option to assure pixel perfection.
             
             Setting this option does two things:
             
             Rendering to a specified position is transformed
             Measurements are transformed
             
             So for example, suppose the screen resolution is 1024x768, but you 
             wish to run orthog mode at 1000x1000.  If you set:
             
             myFont.Options.TransformToViewport = new Viewport(0,0,1000,1000);
            
             Then, if you render at position 500,500:
             
             QFont.Begin();
             myFont.Options.LockToPixel = true;
             myFont.Print("Hello",new Vector2(500,500));
             QFont.End();
            
             This will be printed pixel-pefectly at pixel position 512, 384.
             
             Additionally the font will be measured in terms of your 500x500 
             coordinate system.
             
             The only issue is that if you change the resolution, the size of your
             font will change. You can get around this by loading a font size
             that is proportional to the screen resolution. This makes sense:
             if you want a font to be rendered pixel-perfectly at a higher
             resolution, it will need to be a larger font. At present this 
             needs to be doen manually. E.g:
             
                float fontScale = (float)Height / 800;
                compyFontSmall = new QFont("Data/comfy.ttf", 14 * fontScale);
             
             
             </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.QFontRenderOptions.LockToPixel">
            <summary>
            Locks the position to a particular pixel, allowing the text to be rendered pixel-perfectly.
            You need to turn this off if you wish to move text around the screen smoothly by fractions 
            of a pixel.
            </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.QFontRenderOptions.LockToPixelRatio">
            <summary>
            Only applies when LockToPixel is true:
            This is used to transition smoothly between being locked to pixels and not
            </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.QFontRenderOptions.UseDefaultBlendFunction">
            <summary>
            Whether to always set :
            GL.BlendFunc(BlendingFactorSrc.SrcAlpha, BlendingFactorDest.DstAlpha);
            before rendering text.
            
            </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.QFontRenderOptions.JustifyCapExpand">
            <summary>
            Total justification cap as a fraction of the boundary width.
            </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.QFontRenderOptions.JustifyCapContract">
            <summary>
            Total justification cap as a fraction of the boundary width.
            </summary>
        </member>
        <member name="F:Alt.GUI.QuickFont.QFontRenderOptions.JustifyContractionPenalty">
            <summary>
            By what factor justification is penalized for being negative.
            
            (e.g. if this is set to 3, then a contraction will only happen
            over an expansion if it is 3 of fewer times smaller than the
            expansion).
            
            
            </summary>
        </member>
        <member name="P:Alt.GUI.QuickFont.QFontRenderOptions.JustifyCharacterWeightForExpand">
            <summary>
            When a line of text is justified, space may be inserted between
            characters, and between words. 
            
            This parameter determines how this choice is weighted:
            
            0.0f => word spacing only
            1.0f => "fairly" distributed between both
            > 1.0 => in favour of character spacing
            
            This applies to expansions only.
            
            </summary>
        </member>
        <member name="P:Alt.GUI.QuickFont.QFontRenderOptions.JustifyCharacterWeightForContract">
            <summary>
            When a line of text is justified, space may be removed between
            characters, and between words. 
            
            This parameter determines how this choice is weighted:
            
            0.0f => word spacing only
            1.0f => "fairly" distributed between both
            > 1.0 => in favour of character spacing
            
            This applies to contractions only.
            
            </summary>
        </member>
        <member name="T:Alt.GUI.QuickFont.ProcessedText">
            <summary>
            Class to hide TextNodeList and related classes from 
            user whilst allowing a textNodeList to be passed around.
            </summary>
        </member>
        <member name="T:Alt.GUI.QuickFont.TextNodeList">
            <summary>
            A doubly linked list of text nodes
            </summary>
        </member>
        <member name="M:Alt.GUI.QuickFont.TextNodeList.#ctor(System.String)">
            <summary>
            Builds a doubly linked list of text nodes from the given input string
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Alt.GUI.QuickFont.TextNodeList.Crumble(Alt.GUI.QuickFont.TextNode,System.Int32)">
            <summary>
            Splits a word into sub-words of size less than or equal to baseCaseSize 
            </summary>
            <param name="node"></param>
            <param name="baseCaseSize"></param>
        </member>
        <member name="M:Alt.GUI.QuickFont.TextNodeList.SplitNode(Alt.GUI.QuickFont.TextNode)">
            <summary>
            Splits a word node in two, adding both new nodes to the list in sequence.
            </summary>
            <param name="node"></param>
            <returns>The first new node</returns>
        </member>
        <member name="T:Alt.Sketch.Svg.SvgCircle">
            <summary>
            An SVG element to render circles to the document.
            </summary>
        </member>
        <member name="T:Alt.Sketch.Svg.SvgVisualElement">
            <summary>
            The class that all SVG elements should derive from when they are to be rendered.
            </summary>
        </member>
        <member name="T:Alt.Sketch.Svg.SvgElement">
            <summary>
            The base class of which all SVG elements are derived from.
            </summary>
        </member>
        <member name="T:Alt.Sketch.Svg.ISvgTransformable">
            <summary>
            Represents and element that may be transformed.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.ISvgTransformable.PushTransforms(Alt.Sketch.Svg.SvgRenderer)">
            <summary>
            Applies the required transforms to <see cref="T:Alt.Sketch.Svg.SvgRenderer"/>.
            </summary>
            <param name="renderer">The <see cref="T:Alt.Sketch.Svg.SvgRenderer"/> to be transformed.</param>
        </member>
        <member name="M:Alt.Sketch.Svg.ISvgTransformable.PopTransforms(Alt.Sketch.Svg.SvgRenderer)">
            <summary>
            Removes any previously applied transforms from the specified <see cref="T:Alt.Sketch.Svg.SvgRenderer"/>.
            </summary>
            <param name="renderer">The <see cref="T:Alt.Sketch.Svg.SvgRenderer"/> that should have transforms removed.</param>
        </member>
        <member name="P:Alt.Sketch.Svg.ISvgTransformable.Transforms">
            <summary>
            Gets or sets an <see cref="T:Alt.Sketch.Svg.Transforms.SvgTransformCollection"/> of element transforms.
            </summary>
        </member>
        <member name="F:Alt.Sketch.Svg.SvgElement._content">
            <summary>
            Gets or sets the content of the element.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgElement.HasChildren">
            <summary>
            Gets a value to determine whether the element has children.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgElement.PushTransforms(Alt.Sketch.Svg.SvgRenderer)">
            <summary>
            Applies the required transforms to <see cref="T:Alt.Sketch.Svg.SvgRenderer"/>.
            </summary>
            <param name="renderer">The <see cref="T:Alt.Sketch.Svg.SvgRenderer"/> to be transformed.</param>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgElement.PopTransforms(Alt.Sketch.Svg.SvgRenderer)">
            <summary>
            Removes any previously applied transforms from the specified <see cref="T:Alt.Sketch.Svg.SvgRenderer"/>.
            </summary>
            <param name="renderer">The <see cref="T:Alt.Sketch.Svg.SvgRenderer"/> that should have transforms removed.</param>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgElement.Alt#Sketch#Svg#ISvgTransformable#PushTransforms(Alt.Sketch.Svg.SvgRenderer)">
            <summary>
            Applies the required transforms to <see cref="T:Alt.Sketch.Svg.SvgRenderer"/>.
            </summary>
            <param name="renderer">The <see cref="T:Alt.Sketch.Svg.SvgRenderer"/> to be transformed.</param>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgElement.Alt#Sketch#Svg#ISvgTransformable#PopTransforms(Alt.Sketch.Svg.SvgRenderer)">
            <summary>
            Removes any previously applied transforms from the specified <see cref="T:Alt.Sketch.Svg.SvgRenderer"/>.
            </summary>
            <param name="renderer">The <see cref="T:Alt.Sketch.Svg.SvgRenderer"/> that should have transforms removed.</param>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgElement.FixID(System.String)">
            <summary>
            Only used by the ID Manager
            </summary>
            <param name="newID"></param>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgElement.AddElement(Alt.Sketch.Svg.SvgElement,System.Int32)">
            <summary>
            Called by the underlying <see cref="T:Alt.Sketch.Svg.SvgElement"/> when an element has been added to the
            <see cref="P:Alt.Sketch.Svg.SvgElement.Children"/> collection.
            </summary>
            <param name="child">The <see cref="T:Alt.Sketch.Svg.SvgElement"/> that has been added.</param>
            <param name="index">An <see cref="T:System.Int32"/> representing the index where the element was added to the collection.</param>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgElement.OnElementAdded(Alt.Sketch.Svg.SvgElement,System.Int32)">
            <summary>
            Calls the <see cref="M:Alt.Sketch.Svg.SvgElement.AddElement(Alt.Sketch.Svg.SvgElement,System.Int32)"/> method with the specified parameters.
            </summary>
            <param name="child">The <see cref="T:Alt.Sketch.Svg.SvgElement"/> that has been added.</param>
            <param name="index">An <see cref="T:System.Int32"/> representing the index where the element was added to the collection.</param>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgElement.RemoveElement(Alt.Sketch.Svg.SvgElement)">
            <summary>
            Called by the underlying <see cref="T:Alt.Sketch.Svg.SvgElement"/> when an element has been removed from the
            <see cref="P:Alt.Sketch.Svg.SvgElement.Children"/> collection.
            </summary>
            <param name="child">The <see cref="T:Alt.Sketch.Svg.SvgElement"/> that has been removed.</param>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgElement.OnElementRemoved(Alt.Sketch.Svg.SvgElement)">
            <summary>
            Calls the <see cref="M:Alt.Sketch.Svg.SvgElement.RemoveElement(Alt.Sketch.Svg.SvgElement)"/> method with the specified <see cref="T:Alt.Sketch.Svg.SvgElement"/> as the parameter.
            </summary>
            <param name="child">The <see cref="T:Alt.Sketch.Svg.SvgElement"/> that has been removed.</param>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.Sketch.Svg.SvgElement"/> class.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgElement.RenderElement(Alt.Sketch.Svg.SvgRenderer)">
            <summary>
            Renders this element to the <see cref="T:Alt.Sketch.Svg.SvgRenderer"/>.
            </summary>
            <param name="renderer">The <see cref="T:Alt.Sketch.Svg.SvgRenderer"/> that the element should use to render itself.</param>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgElement.Render(Alt.Sketch.Svg.SvgRenderer)">
            <summary>
            Renders the <see cref="T:Alt.Sketch.Svg.SvgElement"/> and contents to the specified <see cref="T:Alt.Sketch.Svg.SvgRenderer"/> object.
            </summary>
            <param name="renderer">The <see cref="T:Alt.Sketch.Svg.SvgRenderer"/> object to render to.</param>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgElement.RenderChildren(Alt.Sketch.Svg.SvgRenderer)">
            <summary>
            Renders the children of this <see cref="T:Alt.Sketch.Svg.SvgElement"/>.
            </summary>
            <param name="renderer">The <see cref="T:Alt.Sketch.Svg.SvgRenderer"/> to render the child <see cref="T:Alt.Sketch.Svg.SvgElement"/>s to.</param>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgElement.Alt#Sketch#Svg#ISvgElement#Render(Alt.Sketch.Svg.SvgRenderer)">
            <summary>
            Renders the <see cref="T:Alt.Sketch.Svg.SvgElement"/> and contents to the specified <see cref="T:Alt.Sketch.Svg.SvgRenderer"/> object.
            </summary>
            <param name="renderer">The <see cref="T:Alt.Sketch.Svg.SvgRenderer"/> object to render to.</param>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgElement.AddPaths(Alt.Sketch.Svg.SvgElement,Alt.Sketch.GraphicsPath)">
            <summary>
            Recursive method to add up the paths of all children
            </summary>
            <param name="elem"></param>
            <param name="path"></param>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgElement.GetPaths(Alt.Sketch.Svg.SvgElement)">
            <summary>
            Recursive method to add up the paths of all children
            </summary>
            <param name="elem"></param>
            <param name="path"></param>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgElement.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgElement.RegisterEvents(Alt.Sketch.Svg.ISvgEventCaller)">
            <summary>
            Use this method to provide your implementation ISvgEventCaller which can register Actions 
            and call them if one of the events occurs. Make sure, that your SvgElement has a unique ID.
            </summary>
            <param name="caller"></param>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgElement.UnregisterEvents(Alt.Sketch.Svg.ISvgEventCaller)">
            <summary>
            Use this method to provide your implementation ISvgEventCaller to unregister Actions
            </summary>
            <param name="caller"></param>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgElement.ElementName">
            <summary>
            Gets the name of the element.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgElement.Events">
            <summary>
            Gets an <see cref="T:Alt.ComponentModel.EventHandlerList"/> of all events belonging to the element.
            </summary>
        </member>
        <member name="E:Alt.Sketch.Svg.SvgElement.Load">
            <summary>
            Occurs when the element is loaded.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgElement.Children">
            <summary>
            Gets a collection of all child <see cref="!:SvgElements"/>.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgElement.Parent">
            <summary>
            Gets the parent <see cref="T:Alt.Sketch.Svg.SvgElement"/>.
            </summary>
            <value>An <see cref="T:Alt.Sketch.Svg.SvgElement"/> if one exists; otherwise null.</value>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgElement.OwnerDocument">
            <summary>
            Gets the owner <see cref="T:Alt.Sketch.Svg.SvgDocument"/>.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgElement.Attributes">
            <summary>
            Gets a collection of element attributes.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgElement.CustomAttributes">
            <summary>
            Gets a collection of custom attributes
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgElement.Transforms">
            <summary>
            Gets or sets the element transforms.
            </summary>
            <value>The transforms.</value>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgElement.ID">
            <summary>
            Gets or sets the ID of the element.
            </summary>
            <exception cref="T:Alt.Sketch.Svg.SvgException">The ID is already used within the <see cref="T:Alt.Sketch.Svg.SvgDocument"/>.</exception>
        </member>
        <member name="E:Alt.Sketch.Svg.SvgElement.AttributeChanged">
            <summary>
            Fired when an Atrribute of this Element has changed
            </summary>
        </member>
        <member name="T:Alt.Sketch.Svg.ISvgStylable">
            <summary>
            Defines the methods and properties required for an SVG element to be styled.
            </summary>
        </member>
        <member name="T:Alt.Sketch.Svg.ISvgClipable">
            <summary>
            Defines the methods and properties that an <see cref="T:Alt.Sketch.Svg.SvgElement"/> must implement to support clipping.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.ISvgClipable.SetClip(Alt.Sketch.Svg.SvgRenderer)">
            <summary>
            Sets the clipping region of the specified <see cref="T:Alt.Sketch.Svg.SvgRenderer"/>.
            </summary>
            <param name="renderer">The <see cref="T:Alt.Sketch.Svg.SvgRenderer"/> to have its clipping region set.</param>
        </member>
        <member name="M:Alt.Sketch.Svg.ISvgClipable.ResetClip(Alt.Sketch.Svg.SvgRenderer)">
            <summary>
            Resets the clipping region of the specified <see cref="T:Alt.Sketch.Svg.SvgRenderer"/> back to where it was before the <see cref="M:Alt.Sketch.Svg.ISvgClipable.SetClip(Alt.Sketch.Svg.SvgRenderer)"/> method was called.
            </summary>
            <param name="renderer">The <see cref="T:Alt.Sketch.Svg.SvgRenderer"/> to have its clipping region reset.</param>
        </member>
        <member name="P:Alt.Sketch.Svg.ISvgClipable.ClipPath">
            <summary>
            Gets or sets the ID of the associated <see cref="T:Alt.Sketch.Svg.SvgClipPath"/> if one has been specified.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.ISvgClipable.ClipRule">
            <summary>
            Specifies the rule used to define the clipping region when the element is within a <see cref="T:Alt.Sketch.Svg.SvgClipPath"/>.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgVisualElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:SvgGraphicsElement"/> class.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgVisualElement.Render(Alt.Sketch.Svg.SvgRenderer)">
            <summary>
            Renders the <see cref="T:Alt.Sketch.Svg.SvgElement"/> and contents to the specified <see cref="T:Alt.Sketch.Graphics"/> object.
            </summary>
            <param name="graphics">The <see cref="T:Alt.Sketch.Svg.SvgRenderer"/> object to render to.</param>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgVisualElement.RenderFill(Alt.Sketch.Svg.SvgRenderer)">
            <summary>
            Renders the fill of the <see cref="T:Alt.Sketch.Svg.SvgVisualElement"/> to the specified <see cref="T:Alt.Sketch.Svg.SvgRenderer"/>
            </summary>
            <param name="renderer">The <see cref="T:Alt.Sketch.Svg.SvgRenderer"/> object to render to.</param>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgVisualElement.RenderStroke(Alt.Sketch.Svg.SvgRenderer)">
            <summary>
            Renders the stroke of the <see cref="T:Alt.Sketch.Svg.SvgVisualElement"/> to the specified <see cref="T:Alt.Sketch.Svg.SvgRenderer"/>
            </summary>
            <param name="renderer">The <see cref="T:Alt.Sketch.Svg.SvgRenderer"/> object to render to.</param>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgVisualElement.SetClip(Alt.Sketch.Svg.SvgRenderer)">
            <summary>
            Sets the clipping region of the specified <see cref="T:Alt.Sketch.Svg.SvgRenderer"/>.
            </summary>
            <param name="renderer">The <see cref="T:Alt.Sketch.Svg.SvgRenderer"/> to have its clipping region set.</param>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgVisualElement.ResetClip(Alt.Sketch.Svg.SvgRenderer)">
            <summary>
            Resets the clipping region of the specified <see cref="T:Alt.Sketch.Svg.SvgRenderer"/> back to where it was before the <see cref="M:Alt.Sketch.Svg.SvgVisualElement.SetClip(Alt.Sketch.Svg.SvgRenderer)"/> method was called.
            </summary>
            <param name="renderer">The <see cref="T:Alt.Sketch.Svg.SvgRenderer"/> to have its clipping region reset.</param>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgVisualElement.Alt#Sketch#Svg#ISvgClipable#SetClip(Alt.Sketch.Svg.SvgRenderer)">
            <summary>
            Sets the clipping region of the specified <see cref="T:Alt.Sketch.Svg.SvgRenderer"/>.
            </summary>
            <param name="renderer">The <see cref="T:Alt.Sketch.Svg.SvgRenderer"/> to have its clipping region set.</param>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgVisualElement.Alt#Sketch#Svg#ISvgClipable#ResetClip(Alt.Sketch.Svg.SvgRenderer)">
            <summary>
            Resets the clipping region of the specified <see cref="T:Alt.Sketch.Svg.SvgRenderer"/> back to where it was before the <see cref="M:Alt.Sketch.Svg.SvgVisualElement.SetClip(Alt.Sketch.Svg.SvgRenderer)"/> method was called.
            </summary>
            <param name="renderer">The <see cref="T:Alt.Sketch.Svg.SvgRenderer"/> to have its clipping region reset.</param>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgVisualElement.Path">
            <summary>
            Gets the <see cref="T:Alt.Sketch.GraphicsPath"/> for this element.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgVisualElement.Bounds">
            <summary>
            Gets the bounds of the element.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgVisualElement.IsPathDirty">
            <summary>
            Gets or sets a value indicating whether this element's <see cref="P:Alt.Sketch.Svg.SvgVisualElement.Path"/> is dirty.
            </summary>
            <value>
            	<c>true</c> if the path is dirty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgVisualElement.ClipPath">
            <summary>
            Gets the associated <see cref="T:Alt.Sketch.Svg.SvgClipPath"/> if one has been specified.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgVisualElement.ClipRule">
            <summary>
            Gets or sets the algorithm which is to be used to determine the clipping region.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgVisualElement.Filter">
            <summary>
            Gets the associated <see cref="T:Alt.Sketch.Svg.SvgClipPath"/> if one has been specified.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgVisualElement.RequiresSmoothRendering">
            <summary>
            Gets or sets a value to determine if anti-aliasing should occur when the element is being rendered.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgVisualElement.Visible">
            <summary>
            Gets or sets a value to determine whether the element will be rendered.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgVisualElement.Fill">
            <summary>
            Gets or sets the fill <see cref="T:Alt.Sketch.Svg.SvgPaintServer"/> of this element.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgVisualElement.Stroke">
            <summary>
            Gets or sets the <see cref="T:Alt.Sketch.Svg.SvgPaintServer"/> to be used when rendering a stroke around this element.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgVisualElement.FillOpacity">
            <summary>
            Gets or sets the opacity of this element's <see cref="P:Alt.Sketch.Svg.SvgVisualElement.Fill"/>.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgVisualElement.StrokeWidth">
            <summary>
            Gets or sets the width of the stroke (if the <see cref="P:Alt.Sketch.Svg.SvgVisualElement.Stroke"/> property has a valid value specified.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgVisualElement.StrokeOpacity">
            <summary>
            Gets or sets the opacity of the stroke, if the <see cref="P:Alt.Sketch.Svg.SvgVisualElement.Stroke"/> property has been specified. 1.0 is fully opaque; 0.0 is transparent.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgVisualElement.Opacity">
            <summary>
            Gets or sets the opacity of the element. 1.0 is fully opaque; 0.0 is transparent.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgCircle.Render(Alt.Sketch.Svg.SvgRenderer)">
            <summary>
            Renders the circle to the specified <see cref="T:Alt.Sketch.Graphics"/> object.
            </summary>
            <param name="graphics">The graphics object.</param>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgCircle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.Sketch.Svg.SvgCircle"/> class.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgCircle.Center">
            <summary>
            Gets the center point of the circle.
            </summary>
            <value>The center.</value>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgCircle.Bounds">
            <summary>
            Gets the bounds of the circle.
            </summary>
            <value>The rectangular bounds of the circle.</value>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgCircle.RequiresSmoothRendering">
            <summary>
            Gets a value indicating whether the circle requires anti-aliasing when being rendered.
            </summary>
            <value>
            	<c>true</c> if the circle requires anti-aliasing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgCircle.Path">
            <summary>
            Gets the <see cref="T:Alt.Sketch.GraphicsPath"/> representing this element.
            </summary>
        </member>
        <member name="T:Alt.Sketch.Svg.SvgEllipse">
            <summary>
            Represents and SVG ellipse element.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgEllipse.Render(Alt.Sketch.Svg.SvgRenderer)">
            <summary>
            Renders the <see cref="T:Alt.Sketch.Svg.SvgElement"/> and contents to the specified <see cref="T:Alt.Sketch.Graphics"/> object.
            </summary>
            <param name="graphics">The <see cref="T:Alt.Sketch.Graphics"/> object to render to.</param>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgEllipse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.Sketch.Svg.SvgEllipse"/> class.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgEllipse.RequiresSmoothRendering">
            <summary>
            Gets or sets a value to determine if anti-aliasing should occur when the element is being rendered.
            </summary>
            <value></value>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgEllipse.Bounds">
            <summary>
            Gets the bounds of the element.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgEllipse.Path">
            <summary>
            Gets the <see cref="T:Alt.Sketch.GraphicsPath"/> for this element.
            </summary>
            <value></value>
        </member>
        <member name="T:Alt.Sketch.Svg.SvgImage">
            <summary>
            Represents and SVG image
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgImage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.Sketch.Svg.SvgImage"/> class.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgImage.Render(Alt.Sketch.Svg.SvgRenderer)">
            <summary>
            Renders the <see cref="T:Alt.Sketch.Svg.SvgElement"/> and contents to the specified <see cref="T:Alt.Sketch.Graphics"/> object.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgImage.Location">
            <summary>
            Gets an <see cref="T:Alt.Sketch.Svg.SvgPoint"/> representing the top left point of the rectangle.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgImage.Bounds">
            <summary>
            Gets the bounds of the element.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgImage.Path">
            <summary>
            Gets the <see cref="T:Alt.Sketch.GraphicsPath"/> for this element.
            </summary>
        </member>
        <member name="T:Alt.Sketch.Svg.SvgLine">
            <summary>
            Represents and SVG line element.
            </summary>
        </member>
        <member name="T:Alt.Sketch.Svg.SvgPolygon">
            <summary>
            SvgPolygon defines a closed shape consisting of a set of connected straight line segments.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgPolygon.Points">
            <summary>
            The points that make up the SvgPolygon
            </summary>
        </member>
        <member name="T:Alt.Sketch.Svg.SvgPolyline">
            <summary>
            SvgPolyline defines a set of connected straight line segments. Typically, <see cref="T:Alt.Sketch.Svg.SvgPolyline"/> defines open shapes.
            </summary>
        </member>
        <member name="T:Alt.Sketch.Svg.SvgRectangle">
            <summary>
            Represents and SVG rectangle that could also have reounded edges.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgRectangle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.Sketch.Svg.SvgRectangle"/> class.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgRectangle.Render(Alt.Sketch.Svg.SvgRenderer)">
            <summary>
            Renders the <see cref="T:Alt.Sketch.Svg.SvgElement"/> and contents to the specified <see cref="T:Alt.Sketch.Graphics"/> object.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgRectangle.Location">
            <summary>
            Gets an <see cref="T:Alt.Sketch.Svg.SvgPoint"/> representing the top left point of the rectangle.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgRectangle.X">
            <summary>
            Gets or sets the position where the left point of the rectangle should start.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgRectangle.Y">
            <summary>
            Gets or sets the position where the top point of the rectangle should start.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgRectangle.Width">
            <summary>
            Gets or sets the width of the rectangle.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgRectangle.Height">
            <summary>
            Gets or sets the height of the rectangle.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgRectangle.CornerRadiusX">
            <summary>
            Gets or sets the X-radius of the rounded edges of this rectangle.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgRectangle.CornerRadiusY">
            <summary>
            Gets or sets the Y-radius of the rounded edges of this rectangle.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgRectangle.RequiresSmoothRendering">
            <summary>
            Gets or sets a value to determine if anti-aliasing should occur when the element is being rendered.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgRectangle.Bounds">
            <summary>
            Gets the bounds of the element.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgRectangle.Path">
            <summary>
            Gets the <see cref="T:Alt.Sketch.GraphicsPath"/> for this element.
            </summary>
        </member>
        <member name="T:Alt.Sketch.Svg.SvgClipPath">
            <summary>
            Defines a path that can be used by other <see cref="T:Alt.Sketch.Svg.ISvgClipable"/> elements.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgClipPath.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.Sketch.Svg.SvgClipPath"/> class.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgClipPath.GetClipRegion(Alt.Sketch.Svg.SvgVisualElement)">
            <summary>
            Gets this <see cref="T:Alt.Sketch.Svg.SvgClipPath"/>'s region to be used as a clipping region.
            </summary>
            <returns>A new <see cref="T:Alt.Sketch.Region"/> containing the <see cref="T:Alt.Sketch.Region"/> to be used for clipping.</returns>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgClipPath.CombinePaths(Alt.Sketch.GraphicsPath,Alt.Sketch.Svg.SvgElement)">
            <summary>
            
            </summary>
            <param name="region"></param>
            <param name="element"></param>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgClipPath.AddElement(Alt.Sketch.Svg.SvgElement,System.Int32)">
            <summary>
            Called by the underlying <see cref="T:Alt.Sketch.Svg.SvgElement"/> when an element has been added to the
            <see cref="!:Children"/> collection.
            </summary>
            <param name="child">The <see cref="T:Alt.Sketch.Svg.SvgElement"/> that has been added.</param>
            <param name="index">An <see cref="T:System.Int32"/> representing the index where the element was added to the collection.</param>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgClipPath.RemoveElement(Alt.Sketch.Svg.SvgElement)">
            <summary>
            Called by the underlying <see cref="T:Alt.Sketch.Svg.SvgElement"/> when an element has been removed from the
            <see cref="!:Children"/> collection.
            </summary>
            <param name="child">The <see cref="T:Alt.Sketch.Svg.SvgElement"/> that has been removed.</param>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgClipPath.Render(Alt.Sketch.Svg.SvgRenderer)">
            <summary>
            Renders the <see cref="T:Alt.Sketch.Svg.SvgElement"/> and contents to the specified <see cref="T:Alt.Sketch.Svg.SvgRenderer"/> object.
            </summary>
            <param name="renderer">The <see cref="T:Alt.Sketch.Svg.SvgRenderer"/> object to render to.</param>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgClipPath.ClipPathUnits">
            <summary>
            Specifies the coordinate system for the clipping path.
            </summary>
        </member>
        <member name="T:Alt.Sketch.Svg.SvgClipRule">
            <summary>
            Indicates the algorithm which is to be used to determine the clipping region.
            </summary>
            <remarks>
                <para>This rule determines the "insideness" of a point on the canvas by drawing a ray from 
                that point to infinity in any direction and then examining the places where a segment of the 
                shape crosses the ray.</para>
            </remarks>
        </member>
        <member name="F:Alt.Sketch.Svg.SvgClipRule.NonZero">
            <summary>
            This rule determines the "insideness" of a point on the canvas by drawing a ray from that point to infinity in any direction and then examining the places where a segment of the shape crosses the ray. Starting with a count of zero, add one each time a path segment crosses the ray from left to right and subtract one each time a path segment crosses the ray from right to left. After counting the crossings, if the result is zero then the point is outside  the path. Otherwise, it is inside.
            </summary>
        </member>
        <member name="F:Alt.Sketch.Svg.SvgClipRule.EvenOdd">
            <summary>
            This rule determines the "insideness" of a point on the canvas by drawing a ray from that point to infinity in any direction and counting the number of path segments from the given shape that the ray crosses. If this number is odd, the point is inside; if even, the point is outside.
            </summary>
        </member>
        <member name="T:Alt.Sketch.Svg.ISvgViewPort">
            <summary>
            Provides properties and methods to be implemented by view port elements.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.ISvgViewPort.ViewBox">
            <summary>
            Gets or sets the viewport of the element.
            </summary>
        </member>
        <member name="T:Alt.Sketch.Svg.SvgAspectRatio">
            <summary>
            Description of SvgAspectRatio.
            </summary>
        </member>
        <member name="T:Alt.Sketch.Svg.SvgCoordinateUnits">
            <summary>
            Defines the various coordinate units certain SVG elements may use.
            </summary>
        </member>
        <member name="F:Alt.Sketch.Svg.SvgCoordinateUnits.UserSpaceOnUse">
            <summary>
            Indicates that the coordinate system of the entire document is to be used.
            </summary>
        </member>
        <member name="F:Alt.Sketch.Svg.SvgCoordinateUnits.ObjectBoundingBox">
            <summary>
            Indicates that the coordinate system of the owner element is to be used.
            </summary>
        </member>
        <member name="T:Alt.Sketch.Svg.SvgOrient">
            <summary>
            Represents an orientation in an Scalable Vector Graphics document.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgOrient.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgOrient.op_Implicit(System.Single)~Alt.Sketch.Svg.SvgOrient">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Single"/> to <see cref="T:Alt.Sketch.Svg.SvgOrient"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgOrient.Angle">
            <summary>
            Gets the value of the unit.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgOrient.IsAuto">
            <summary>
            Gets the value of the unit.
            </summary>
        </member>
        <member name="T:Alt.Sketch.Svg.SvgUnit">
            <summary>
            Represents a unit in an Scalable Vector Graphics document.
            </summary>
        </member>
        <member name="F:Alt.Sketch.Svg.SvgUnit.Empty">
            <summary>
            Gets and empty <see cref="T:Alt.Sketch.Svg.SvgUnit"/>.
            </summary>
        </member>
        <member name="F:Alt.Sketch.Svg.SvgUnit.None">
            <summary>
            Gets an <see cref="T:Alt.Sketch.Svg.SvgUnit"/> with a value of none.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgUnit.ToDeviceValue">
            <summary>
            Converts the current unit to one that can be used at render time.
            </summary>
            <returns>The representation of the current unit in a device value (usually pixels).</returns>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgUnit.ToDeviceValue(Alt.Sketch.Svg.ISvgStylable)">
            <summary>
            Converts the current unit to one that can be used at render time.
            </summary>
            <returns>The representation of the current unit in a device value (usually pixels).</returns>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgUnit.ToDeviceValue(Alt.Sketch.Svg.ISvgStylable,System.Boolean)">
            <summary>
            Converts the current unit to one that can be used at render time.
            </summary>
            <returns>The representation of the current unit in a device value (usually pixels).</returns>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgUnit.ToPercentage">
            <summary>
            Converts the current unit to a percentage, if applicable.
            </summary>
            <returns>An <see cref="T:Alt.Sketch.Svg.SvgUnit"/> of type <see cref="!:SvgUnitType.Perscentage"/>.</returns>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgUnit.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgUnit.op_Implicit(Alt.Sketch.Svg.SvgUnit)~System.Double">
            <summary>
            Performs an implicit conversion from <see cref="T:Alt.Sketch.Svg.SvgUnit"/> to <see cref="T:System.Single"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgUnit.op_Implicit(System.Double)~Alt.Sketch.Svg.SvgUnit">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Single"/> to <see cref="T:Alt.Sketch.Svg.SvgUnit"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgUnit.#ctor(Alt.Sketch.Svg.SvgUnitType,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.Sketch.Svg.SvgUnit"/> struct.
            </summary>
            <param name="type">The type.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgUnit.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.Sketch.Svg.SvgUnit"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgUnit.IsEmpty">
            <summary>
            Gets a value to determine whether the unit is empty.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgUnit.IsNone">
            <summary>
            Gets whether this unit is none.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgUnit.Value">
            <summary>
            Gets the value of the unit.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgUnit.Type">
            <summary>
            Gets the <see cref="T:Alt.Sketch.Svg.SvgUnitType"/> of unit.
            </summary>
        </member>
        <member name="T:Alt.Sketch.Svg.SvgUnitType">
            <summary>
            Defines the various types of unit an <see cref="T:Alt.Sketch.Svg.SvgUnit"/> can be.
            </summary>
        </member>
        <member name="F:Alt.Sketch.Svg.SvgUnitType.None">
            <summary>
            Indicates that the unit holds no value.
            </summary>
        </member>
        <member name="F:Alt.Sketch.Svg.SvgUnitType.Pixel">
            <summary>
            Indicates that the unit is in pixels.
            </summary>
        </member>
        <member name="F:Alt.Sketch.Svg.SvgUnitType.Em">
            <summary>
            Indicates that the unit is equal to the pt size of the current font.
            </summary>
        </member>
        <member name="F:Alt.Sketch.Svg.SvgUnitType.Percentage">
            <summary>
            Indicates that the unit is a percentage.
            </summary>
        </member>
        <member name="F:Alt.Sketch.Svg.SvgUnitType.User">
            <summary>
            Indicates that the unit has no unit identifier and is a value in the current user coordinate system.
            </summary>
        </member>
        <member name="F:Alt.Sketch.Svg.SvgUnitType.Inch">
            <summary>
            Indicates the the unit is in inches.
            </summary>
        </member>
        <member name="F:Alt.Sketch.Svg.SvgUnitType.Centimeter">
            <summary>
            Indicates that the unit is in centimeters.
            </summary>
        </member>
        <member name="F:Alt.Sketch.Svg.SvgUnitType.Millimeter">
            <summary>
            Indicates that the unit is in millimeters.
            </summary>
        </member>
        <member name="F:Alt.Sketch.Svg.SvgUnitType.Pica">
            <summary>
            Indicates that the unit is in picas.
            </summary>
        </member>
        <member name="F:Alt.Sketch.Svg.SvgUnitType.Point">
            <summary>
            Indicates that the unit is in points, the smallest unit of measure, being a subdivision of the larger <see cref="F:Alt.Sketch.Svg.SvgUnitType.Pica"/>. There are 12 points in the <see cref="F:Alt.Sketch.Svg.SvgUnitType.Pica"/>.
            </summary>
        </member>
        <member name="T:Alt.Sketch.Svg.SvgUnitCollection">
            <summary>
            Represents a list of <see cref="!:SvgUnits"/>.
            </summary>
        </member>
        <member name="T:Alt.Sketch.Svg.SvgUnitCollectionConverter">
            <summary>
            A class to convert string into <see cref="T:Alt.Sketch.Svg.SvgUnitCollection"/> instances.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgUnitCollectionConverter.ConvertFrom(Alt.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:Alt.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="T:Alt.Sketch.Svg.SvgViewBox">
            <summary>
            It is often desirable to specify that a given set of graphics stretch to fit a particular container element. The viewBox attribute provides this capability.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgViewBox.op_Implicit(Alt.Sketch.Svg.SvgViewBox)~Alt.Sketch.Rect">
            <summary>
            Performs an implicit conversion from <see cref="T:Alt.Sketch.Svg.SvgViewBox"/> to <see cref="T:Alt.Sketch.Rect"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgViewBox.op_Implicit(Alt.Sketch.Rect)~Alt.Sketch.Svg.SvgViewBox">
            <summary>
            Performs an implicit conversion from <see cref="T:Alt.Sketch.Rect"/> to <see cref="T:Alt.Sketch.Svg.SvgViewBox"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgViewBox.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.Sketch.Svg.SvgViewBox"/> struct.
            </summary>
            <param name="minX">The min X.</param>
            <param name="minY">The min Y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgViewBox.MinX">
            <summary>
            Gets or sets the position where the viewport starts horizontally.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgViewBox.MinY">
            <summary>
            Gets or sets the position where the viewport starts vertically.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgViewBox.Width">
            <summary>
            Gets or sets the width of the viewport.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgViewBox.Height">
            <summary>
            Gets or sets the height of the viewport.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgViewBoxConverter.ConvertFrom(Alt.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:Alt.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="T:Alt.Sketch.Svg.SvgDefinitionList">
            <summary>
            Represents a list of re-usable SVG components.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgDefinitionList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.Sketch.Svg.SvgDefinitionList"/> class.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgDefinitionList.Render(Alt.Sketch.Svg.SvgRenderer)">
            <summary>
            Renders the <see cref="T:Alt.Sketch.Svg.SvgElement"/> and contents to the specified <see cref="T:Alt.Sketch.Svg.SvgRenderer"/> object.
            </summary>
            <param name="renderer">The <see cref="T:Alt.Sketch.Svg.SvgRenderer"/> object to render to.</param>
        </member>
        <member name="T:Alt.Sketch.Svg.SvgDocumentMetadata">
            <summary>
            Represents a list of re-usable SVG components.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgDocumentMetadata.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.Sketch.Svg.SvgDocumentMetadata"/> class.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgDocumentMetadata.Render(Alt.Sketch.Svg.SvgRenderer)">
            <summary>
            Renders the <see cref="T:Alt.Sketch.Svg.SvgElement"/> and contents to the specified <see cref="T:Alt.Sketch.Svg.SvgRenderer"/> object.
            </summary>
            <param name="renderer">The <see cref="T:Alt.Sketch.Svg.SvgRenderer"/> object to render to.</param>
        </member>
        <member name="T:Alt.Sketch.Svg.SvgFragment">
            <summary>
            An <see cref="T:Alt.Sketch.Svg.SvgFragment"/> represents an SVG fragment that can be the root element or an embedded fragment of an SVG document.
            </summary>
        </member>
        <member name="F:Alt.Sketch.Svg.SvgFragment.Namespace">
            <summary>
            Gets the SVG namespace string.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgFragment.PushTransforms(Alt.Sketch.Svg.SvgRenderer)">
            <summary>
            Applies the required transforms to <see cref="T:Alt.Sketch.Svg.SvgRenderer"/>.
            </summary>
            <param name="renderer">The <see cref="T:Alt.Sketch.Svg.SvgRenderer"/> to be transformed.</param>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgFragment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.Sketch.Svg.SvgFragment"/> class.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgFragment.Width">
            <summary>
            Gets or sets the width of the fragment.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgFragment.Height">
            <summary>
            Gets or sets the height of the fragment.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgFragment.ViewBox">
            <summary>
            Gets or sets the viewport of the element.
            </summary>
            <value></value>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgFragment.AspectRatio">
            <summary>
            Gets or sets the aspect of the viewport.
            </summary>
            <value></value>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgFragment.Path">
            <summary>
            Gets the <see cref="T:Alt.Sketch.GraphicsPath"/> for this element.
            </summary>
            <value></value>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgFragment.Bounds">
            <summary>
            Gets the bounds of the svg element.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="T:Alt.Sketch.Svg.SvgGroup">
            <summary>
            An element used to group SVG shapes.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgGroup.Render(Alt.Sketch.Svg.SvgRenderer)">
            <summary>
            Renders the <see cref="T:Alt.Sketch.Svg.SvgElement"/> and contents to the specified <see cref="T:Alt.Sketch.Graphics"/> object.
            </summary>
            <param name="graphics">The <see cref="T:Alt.Sketch.Graphics"/> object to render to.</param>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgGroup.Path">
            <summary>
            Gets the <see cref="T:Alt.Sketch.GraphicsPath"/> for this element.
            </summary>
            <value></value>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgGroup.Bounds">
            <summary>
            Gets the bounds of the element.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgUse.PushTransforms(Alt.Sketch.Svg.SvgRenderer)">
            <summary>
            Applies the required transforms to <see cref="T:Alt.Sketch.Svg.SvgRenderer"/>.
            </summary>
            <param name="renderer">The <see cref="T:Alt.Sketch.Svg.SvgRenderer"/> to be transformed.</param>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgUse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.Sketch.Svg.SvgUse"/> class.
            </summary>
        </member>
        <member name="T:Alt.Sketch.Svg.FilterEffects.SvgColourMatrix">
            <summary>
            Note: this is not used in calculations to bitmap - used only to allow for svg xml output
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.FilterEffects.SvgColourMatrix.Type">
            <summary>
            matrix | saturate | hueRotate | luminanceToAlpha
            Indicates the type of matrix operation. The keyword 'matrix' indicates that a full 5x4 matrix of values will be provided. The other keywords represent convenience shortcuts to allow commonly used color operations to be performed without specifying a complete matrix. If attribute ‘type’ is not specified, then the effect is as if a value of matrix were specified.
            Note: this is not used in calculations to bitmap - used only to allow for svg xml output
            </summary>
        </member>
        <!-- Некорректный комментарий в формате XML для члена "P:Alt.Sketch.Svg.FilterEffects.SvgColourMatrix.Values" проигнорирован -->
        <member name="P:Alt.Sketch.Svg.FilterEffects.SvgGaussianBlur.StdDeviation">
            <summary>
            Gets or sets the radius of the blur (only allows for one value - not the two specified in the SVG Spec)
            </summary>
        </member>
        <member name="T:Alt.Sketch.Svg.FilterEffects.SvgOffset">
            <summary>
            Note: this is not used in calculations to bitmap - used only to allow for svg xml output
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.FilterEffects.SvgOffset.Dx">
            <summary>
            The amount to offset the input graphic along the x-axis. The offset amount is expressed in the coordinate system established by attribute ‘primitiveUnits’ on the ‘filter’ element.
            If the attribute is not specified, then the effect is as if a value of 0 were specified.
            Note: this is not used in calculations to bitmap - used only to allow for svg xml output
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.FilterEffects.SvgOffset.Dy">
            <summary>
            The amount to offset the input graphic along the y-axis. The offset amount is expressed in the coordinate system established by attribute ‘primitiveUnits’ on the ‘filter’ element.
            If the attribute is not specified, then the effect is as if a value of 0 were specified.
            Note: this is not used in calculations to bitmap - used only to allow for svg xml output
            </summary>
        </member>
        <member name="T:Alt.Sketch.Svg.FilterEffects.SvgFilter">
            <summary>
            A filter effect consists of a series of graphics operations that are applied to a given source graphic to produce a modified graphical result.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.FilterEffects.SvgFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.Sketch.Svg.FilterEffects.SvgFilter"/> class.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.FilterEffects.SvgFilter.Render(Alt.Sketch.Svg.SvgRenderer)">
            <summary>
            Renders the <see cref="T:Alt.Sketch.Svg.SvgElement"/> and contents to the specified <see cref="T:Alt.Sketch.Svg.SvgRenderer"/> object.
            </summary>
            <param name="renderer">The <see cref="T:Alt.Sketch.Svg.SvgRenderer"/> object to render to.</param>
        </member>
        <member name="M:Alt.Sketch.Svg.FilterEffects.SvgFilter.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:Alt.Sketch.Svg.FilterEffects.SvgFilter.X">
            <summary>
            Gets or sets the position where the left point of the filter.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.FilterEffects.SvgFilter.Y">
            <summary>
            Gets or sets the position where the top point of the filter.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.FilterEffects.SvgFilter.Width">
            <summary>
            Gets or sets the width of the resulting filter graphic.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.FilterEffects.SvgFilter.Height">
            <summary>
            Gets or sets the height of the resulting filter graphic.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.FilterEffects.SvgFilter.ColorInterpolationFilters">
            <summary>
            Gets or sets the color-interpolation-filters of the resulting filter graphic.
            NOT currently mapped through to bitmap
            </summary>
        </member>
        <member name="T:Alt.Sketch.Svg.SvgColourConverter">
            <summary>
            Converts string representations of colours into <see cref="T:Alt.Sketch.Color"/> objects.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgColourConverter.ConvertFrom(Alt.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the converter's native type.
            </summary>
            <param name="context">A <see cref="T:Alt.ComponentModel.TypeDescriptor"/> that provides a format context. You can use this object to get additional information about the environment from which this converter is being invoked.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/> that specifies the culture to represent the color.</param>
            <param name="value">The object to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> representing the converted value.
            </returns>
            <exception cref="T:System.ArgumentException">The conversion cannot be performed.</exception>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
            </PermissionSet>
        </member>
        <member name="T:Alt.Sketch.Svg.SvgPaintServer">
            <summary>
            Represents the base class for all paint servers that are intended to be used as a fill or stroke.
            </summary>
        </member>
        <member name="F:Alt.Sketch.Svg.SvgPaintServer.None">
            <summary>
            An unspecified <see cref="T:Alt.Sketch.Svg.SvgPaintServer"/>.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgPaintServer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.Sketch.Svg.SvgPaintServer"/> class.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgPaintServer.Render(Alt.Sketch.Svg.SvgRenderer)">
            <summary>
            Renders the <see cref="T:Alt.Sketch.Svg.SvgElement"/> and contents to the specified <see cref="T:Alt.Sketch.Svg.SvgRenderer"/> object.
            </summary>
            <param name="renderer">The <see cref="T:Alt.Sketch.Svg.SvgRenderer"/> object to render to.</param>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgPaintServer.GetBrush(Alt.Sketch.Svg.SvgVisualElement,System.Single)">
            <summary>
            Gets a <see cref="T:Alt.Sketch.Brush"/> representing the current paint server.
            </summary>
            <param name="styleOwner">The owner <see cref="T:Alt.Sketch.Svg.SvgVisualElement"/>.</param>
            <param name="opacity">The opacity of the brush.</param>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgPaintServer.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="F:Alt.Sketch.Svg.SvgColourServer.NotSet">
            <summary>
            An unspecified <see cref="T:Alt.Sketch.Svg.SvgPaintServer"/>.
            </summary>
        </member>
        <member name="T:Alt.Sketch.Svg.SvgGradientServer">
            <summary>
            Provides the base class for all paint servers that wish to render a gradient.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgGradientServer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.Sketch.Svg.SvgGradientServer"/> class.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgGradientServer.AddElement(Alt.Sketch.Svg.SvgElement,System.Int32)">
            <summary>
            Called by the underlying <see cref="T:Alt.Sketch.Svg.SvgElement"/> when an element has been added to the
            <see cref="!:Children"/> collection.
            </summary>
            <param name="child">The <see cref="T:Alt.Sketch.Svg.SvgElement"/> that has been added.</param>
            <param name="index">An <see cref="T:System.Int32"/> representing the index where the element was added to the collection.</param>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgGradientServer.RemoveElement(Alt.Sketch.Svg.SvgElement)">
            <summary>
            Called by the underlying <see cref="T:Alt.Sketch.Svg.SvgElement"/> when an element has been removed from the
            <see cref="!:Children"/> collection.
            </summary>
            <param name="child">The <see cref="T:Alt.Sketch.Svg.SvgElement"/> that has been removed.</param>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgGradientServer.GetColourBlend(Alt.Sketch.Svg.SvgVisualElement,System.Single)">
            <summary>
            Gets a <see cref="!:ColourBlend"/> representing the <see cref="T:Alt.Sketch.Svg.SvgGradientServer"/>'s gradient stops.
            </summary>
            <param name="owner">The parent <see cref="T:Alt.Sketch.Svg.SvgVisualElement"/>.</param>
            <param name="opacity">The opacity of the colour blend.</param>
        </member>
        <!-- Некорректный комментарий в формате XML для члена "M:Alt.Sketch.Svg.SvgGradientServer.InheritStops" проигнорирован -->
        <member name="P:Alt.Sketch.Svg.SvgGradientServer.Stops">
            <summary>
            Gets the ramp of colors to use on a gradient.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgGradientServer.SpreadMethod">
            <summary>
            Specifies what happens if the gradient starts or ends inside the bounds of the target rectangle.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgGradientServer.GradientUnits">
            <summary>
            Gets or sets the coordinate system of the gradient.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgGradientServer.InheritGradient">
            <summary>
            Gets or sets another gradient fill from which to inherit the stops from.
            </summary>
        </member>
        <member name="T:Alt.Sketch.Svg.SvgGradientStop">
            <summary>
            Represents a colour stop in a gradient.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgGradientStop.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.Sketch.Svg.SvgGradientStop"/> class.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgGradientStop.#ctor(Alt.Sketch.Svg.SvgUnit,Alt.Sketch.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.Sketch.Svg.SvgGradientStop"/> class.
            </summary>
            <param name="offset">The offset.</param>
            <param name="colour">The colour.</param>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgGradientStop.Offset">
            <summary>
            Gets or sets the offset, i.e. where the stop begins from the beginning, of the gradient stop.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgGradientStop.Colour">
            <summary>
            Gets or sets the colour of the gradient stop.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgGradientStop.Opacity">
            <summary>
            Gets or sets the opacity of the gradient stop (0-1).
            </summary>
        </member>
        <member name="T:Alt.Sketch.Svg.SvgPatternServer">
            <summary>
            A pattern is used to fill or stroke an object using a pre-defined graphic object which can be replicated ("tiled") at fixed intervals in x and y to cover the areas to be painted.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgPatternServer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.Sketch.Svg.SvgPatternServer"/> class.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgPatternServer.GetBrush(Alt.Sketch.Svg.SvgVisualElement,System.Single)">
            <summary>
            Gets a <see cref="T:Alt.Sketch.Brush"/> representing the current paint server.
            </summary>
            <param name="styleOwner">The owner <see cref="T:Alt.Sketch.Svg.SvgVisualElement"/>.</param>
            <param name="opacity">The opacity of the brush.</param>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgPatternServer.ViewBox">
            <summary>
            Specifies a supplemental transformation which is applied on top of any 
            transformations necessary to create a new pattern coordinate system.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgPatternServer.AspectRatio">
            <summary>
            Gets or sets the aspect of the viewport.
            </summary>
            <value></value>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgPatternServer.Width">
            <summary>
            Gets or sets the width of the pattern.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgPatternServer.Height">
            <summary>
            Gets or sets the height of the pattern.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgPatternServer.X">
            <summary>
            Gets or sets the X-axis location of the pattern.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgPatternServer.Y">
            <summary>
            Gets or sets the Y-axis location of the pattern.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgRadialGradientServer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.Sketch.Svg.SvgRadialGradientServer"/> class.
            </summary>
        </member>
        <member name="T:Alt.Sketch.Svg.SvgPath">
            <summary>
            Represents an SVG path element.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgPath.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.Sketch.Svg.SvgPath"/> class.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgPath.RenderStroke(Alt.Sketch.Svg.SvgRenderer)">
            <summary>
            Renders the stroke of the <see cref="T:Alt.Sketch.Svg.SvgVisualElement"/> to the specified <see cref="T:Alt.Sketch.Svg.SvgRenderer"/>
            </summary>
            <param name="renderer">The <see cref="T:Alt.Sketch.Svg.SvgRenderer"/> object to render to.</param>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgPath.PathData">
            <summary>
            Gets or sets a <see cref="T:Alt.Sketch.Svg.Pathing.SvgPathSegmentList"/> of path data.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgPath.PathLength">
            <summary>
            Gets or sets the length of the path.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgPath.MarkerEnd">
            <summary>
            Gets or sets the marker (end cap) of the path.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgPath.MarkerStart">
            <summary>
            Gets or sets the marker (start cap) of the path.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgPath.Path">
            <summary>
            Gets the <see cref="T:Alt.Sketch.GraphicsPath"/> for this element.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgPath.RequiresSmoothRendering">
            <summary>
            Gets or sets a value to determine if anti-aliasing should occur when the element is being rendered.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgPath.Bounds">
            <summary>
            Gets the bounds of the element.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgPathBuilder.Parse(System.String)">
            <summary>
            Parses the specified string into a collection of path segments.
            </summary>
            <param name="path">A <see cref="T:System.String"/> containing path data.</param>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgPathBuilder.ToAbsolute(System.Double,System.Double,Alt.Sketch.Svg.Pathing.SvgPathSegmentList,System.Boolean)">
            <summary>
            Creates point with absolute coorindates.
            </summary>
            <param name="x">Raw X-coordinate value.</param>
            <param name="y">Raw Y-coordinate value.</param>
            <param name="segments">Current path segments.</param>
            <param name="isRelativeBoth"><b>true</b> if <paramref name="x"/> and <paramref name="y"/> contains relative coordinate values, otherwise <b>false</b>.</param>
            <returns><see cref="T:Alt.Sketch.Point"/> that contains absolute coordinates.</returns>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgPathBuilder.ToAbsolute(System.Double,System.Double,Alt.Sketch.Svg.Pathing.SvgPathSegmentList,System.Boolean,System.Boolean)">
            <summary>
            Creates point with absolute coorindates.
            </summary>
            <param name="x">Raw X-coordinate value.</param>
            <param name="y">Raw Y-coordinate value.</param>
            <param name="segments">Current path segments.</param>
            <param name="isRelativeX"><b>true</b> if <paramref name="x"/> contains relative coordinate value, otherwise <b>false</b>.</param>
            <param name="isRelativeY"><b>true</b> if <paramref name="y"/> contains relative coordinate value, otherwise <b>false</b>.</param>
            <returns><see cref="T:Alt.Sketch.Point"/> that contains absolute coordinates.</returns>
        </member>
        <member name="T:Alt.Sketch.Svg.SvgText">
            <summary>
            The <see cref="T:Alt.Sketch.Svg.SvgText"/> element defines a graphics element consisting of text.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgText.#cctor">
            <summary>
            Initializes the <see cref="T:Alt.Sketch.Svg.SvgText"/> class.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgText.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.Sketch.Svg.SvgText"/> class.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgText.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.Sketch.Svg.SvgText"/> class.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgText.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgText.Text">
            <summary>
            Gets or sets the text to be rendered.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgText.TextAnchor">
            <summary>
            Gets or sets the text anchor.
            </summary>
            <value>The text anchor.</value>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgText.X">
            <summary>
            Gets or sets the X.
            </summary>
            <value>The X.</value>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgText.Y">
            <summary>
            Gets or sets the Y.
            </summary>
            <value>The Y.</value>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgText.LetterSpacing">
            <summary>
            Specifies spacing behavior between text characters.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgText.WordSpacing">
            <summary>
            Specifies spacing behavior between words.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgText.FontFamily">
            <summary>
            Indicates which font family is to be used to render the text.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgText.FontSize">
            <summary>
            Refers to the size of the font from baseline to baseline when multiple lines of text are set solid in a multiline layout environment.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgText.FontWeight">
            <summary>
            Refers to the boldness of the font.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgText.Font">
            <summary>
            Set all font information.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgText.Fill">
            <summary>
            Gets or sets the fill.
            </summary>
            <remarks>
            <para>Unlike other <see cref="!:SvgGraphicsElement"/>s, <see cref="T:Alt.Sketch.Svg.SvgText"/> has a default fill of black rather than transparent.</para>
            </remarks>
            <value>The fill.</value>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgText.RequiresSmoothRendering">
            <summary>
            Gets or sets a value to determine if anti-aliasing should occur when the element is being rendered.
            </summary>
            <value></value>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgText.Bounds">
            <summary>
            Gets the bounds of the element.
            </summary>
            <value>The bounds.</value>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgText.Path">
            <summary>
            Gets the <see cref="T:Alt.Sketch.GraphicsPath"/> for this element.
            </summary>
            <value></value>
        </member>
        <member name="T:Alt.Sketch.Svg.SvgTextAnchor">
            <summary>
            Text anchor is used to align (start-, middle- or end-alignment) a string of text relative to a given point.
            </summary>
        </member>
        <member name="F:Alt.Sketch.Svg.SvgTextAnchor.Start">
            <summary>
            The rendered characters are aligned such that the start of the text string is at the initial current text position.
            </summary>
        </member>
        <member name="F:Alt.Sketch.Svg.SvgTextAnchor.Middle">
            <summary>
            The rendered characters are aligned such that the middle of the text string is at the current text position.
            </summary>
        </member>
        <member name="F:Alt.Sketch.Svg.SvgTextAnchor.End">
            <summary>
            The rendered characters are aligned such that the end of the text string is at the initial current text position.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgTextSpan.X">
            <summary>
            Gets or sets the X.
            </summary>
            <value>The X.</value>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgTextSpan.Y">
            <summary>
            Gets or sets the X.
            </summary>
            <value>The X.</value>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgTextSpan.DX">
            <summary>
            Gets or sets the deltaX from the containing text.
            </summary>
            <value>The dX.</value>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgTextSpan.DY">
            <summary>
            Gets or sets the deltaY from the containing text.
            </summary>
            <value>The dY.</value>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgTextSpan.Text">
            <summary>
            Gets or sets the text to be rendered.
            </summary>
        </member>
        <member name="T:Alt.Sketch.Svg.Transforms.SvgMatrix">
            <summary>
            The class which applies custom transform to this Matrix (Required for projects created by the Inkscape).
            </summary>
        </member>
        <member name="T:Alt.Sketch.Svg.Transforms.SvgShear">
            <summary>
            The class which applies the specified shear vector to this Matrix.
            </summary>
        </member>
        <member name="T:Alt.Sketch.Svg.Transforms.SvgSkew">
            <summary>
            The class which applies the specified skew vector to this Matrix.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.Transforms.SvgTransformCollection.GetMatrix">
            <summary>
            Multiplies all matrices
            </summary>
            <returns>The result of all transforms</returns>
        </member>
        <member name="E:Alt.Sketch.Svg.Transforms.SvgTransformCollection.TransformChanged">
            <summary>
            Fired when an SvgTransform has changed
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.Transforms.SvgTransformConverter.ConvertFrom(Alt.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:Alt.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="T:Alt.Sketch.Svg.SvgAttributeAttribute">
            <summary>
            Specifies the SVG attribute name of the associated property.
            </summary>
        </member>
        <member name="F:Alt.Sketch.Svg.SvgAttributeAttribute.SVG_NAMESPACE">
            <summary>
            Gets a <see cref="T:System.String"/> containing the XLink namespace (http://www.w3.org/1999/xlink).
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgAttributeAttribute.Match(System.Object)">
            <summary>
            When overridden in a derived class, returns a value that indicates whether this instance equals a specified object.
            </summary>
            <param name="obj">An <see cref="T:System.Object"/> to compare with this instance of <see cref="T:System.Attribute"/>.</param>
            <returns>
            true if this instance equals <paramref name="obj"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgAttributeAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.Sketch.Svg.SvgAttributeAttribute"/> class.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgAttributeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.Sketch.Svg.SvgAttributeAttribute"/> class with the specified attribute name.
            </summary>
            <param name="name">The name of the SVG attribute.</param>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgAttributeAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.Sketch.Svg.SvgAttributeAttribute"/> class with the specified SVG attribute name and namespace.
            </summary>
            <param name="name">The name of the SVG attribute.</param>
            <param name="nameSpace">The namespace of the SVG attribute (e.g. http://www.w3.org/2000/svg).</param>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgAttributeAttribute.NamespaceAndName">
            <summary>
            Gets the name of the SVG attribute.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgAttributeAttribute.Name">
            <summary>
            Gets the name of the SVG attribute.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgAttributeAttribute.NameSpace">
            <summary>
            Gets the namespace of the SVG attribute.
            </summary>
        </member>
        <member name="T:Alt.Sketch.Svg.SvgAttributeCollection">
            <summary>
            A collection of Scalable Vector Attributes that can be inherited from the owner elements ancestors.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgAttributeCollection.#ctor(Alt.Sketch.Svg.SvgElement)">
            <summary>
            Initialises a new instance of a <see cref="T:Alt.Sketch.Svg.SvgAttributeCollection"/> with the given <see cref="T:Alt.Sketch.Svg.SvgElement"/> as the owner.
            </summary>
            <param name="owner">The <see cref="T:Alt.Sketch.Svg.SvgElement"/> owner of the collection.</param>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgAttributeCollection.GetAttribute``1(System.String)">
            <summary>
            Gets the attribute with the specified name.
            </summary>
            <typeparam name="TAttributeType">The type of the attribute value.</typeparam>
            <param name="attributeName">A <see cref="T:System.String"/> containing the name of the attribute.</param>
            <returns>The attribute value if available; otherwise the default value of <typeparamref name="TAttributeType"/>.</returns>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgAttributeCollection.GetAttribute``1(System.String,``0)">
            <summary>
            Gets the attribute with the specified name.
            </summary>
            <typeparam name="T">The type of the attribute value.</typeparam>
            <param name="attributeName">A <see cref="T:System.String"/> containing the name of the attribute.</param>
            <param name="defaultValue">The value to return if a value hasn't already been specified.</param>
            <returns>The attribute value if available; otherwise the default value of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgAttributeCollection.GetInheritedAttribute``1(System.String)">
            <summary>
            Gets the attribute with the specified name and inherits from ancestors if there is no attribute set.
            </summary>
            <typeparam name="TAttributeType">The type of the attribute value.</typeparam>
            <param name="attributeName">A <see cref="T:System.String"/> containing the name of the attribute.</param>
            <returns>The attribute value if available; otherwise the ancestors value for the same attribute; otherwise the default value of <typeparamref name="TAttributeType"/>.</returns>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgAttributeCollection.Item(System.String)">
            <summary>
            Gets the attribute with the specified name.
            </summary>
            <param name="attributeName">A <see cref="T:System.String"/> containing the attribute name.</param>
            <returns>The attribute value associated with the specified name; If there is no attribute the parent's value will be inherited.</returns>
        </member>
        <member name="E:Alt.Sketch.Svg.SvgAttributeCollection.AttributeChanged">
            <summary>
            Fired when an Atrribute has changed
            </summary>
        </member>
        <member name="T:Alt.Sketch.Svg.SvgCustomAttributeCollection">
            <summary>
            A collection of Custom Attributes
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgCustomAttributeCollection.#ctor(Alt.Sketch.Svg.SvgElement)">
            <summary>
            Initialises a new instance of a <see cref="T:Alt.Sketch.Svg.SvgAttributeCollection"/> with the given <see cref="T:Alt.Sketch.Svg.SvgElement"/> as the owner.
            </summary>
            <param name="owner">The <see cref="T:Alt.Sketch.Svg.SvgElement"/> owner of the collection.</param>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgCustomAttributeCollection.Item(System.String)">
            <summary>
            Gets the attribute with the specified name.
            </summary>
            <param name="attributeName">A <see cref="T:System.String"/> containing the attribute name.</param>
            <returns>The attribute value associated with the specified name; If there is no attribute the parent's value will be inherited.</returns>
        </member>
        <member name="E:Alt.Sketch.Svg.SvgCustomAttributeCollection.AttributeChanged">
            <summary>
            Fired when an Atrribute has changed
            </summary>
        </member>
        <member name="T:Alt.Sketch.Svg.SvgDefaults">
            <summary>
            Holds a dictionary of the default values of the SVG specification 
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgDefaults.IsDefault(System.String,System.String)">
            <summary>
            Checks whether the property value is the default value of the svg definition.
            </summary>
            <param name="attributeName">Name of the svg attribute</param>
            <param name="propertyValue">.NET value of the attribute</param>
        </member>
        <member name="T:Alt.Sketch.Svg.SvgDocument">
            <summary>
            The class used to create and load SVG documents.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgDocument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.Sketch.Svg.SvgDocument"/> class.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgDocument.OverwriteIdManager(Alt.Sketch.Svg.SvgElementIdManager)">
            <summary>
            Overwrites the current IdManager with a custom implementation. 
            Be careful with this: If elements have been inserted into the document before,
            you have to take care that the new IdManager also knows of them.
            </summary>
            <param name="manager"></param>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgDocument.GetElementById(System.String)">
            <summary>
            Retrieves the <see cref="T:Alt.Sketch.Svg.SvgElement"/> with the specified ID.
            </summary>
            <param name="id">A <see cref="T:System.String"/> containing the ID of the element to find.</param>
            <returns>An <see cref="T:Alt.Sketch.Svg.SvgElement"/> of one exists with the specified ID; otherwise false.</returns>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgDocument.GetElementById``1(System.String)">
            <summary>
            Retrieves the <see cref="T:Alt.Sketch.Svg.SvgElement"/> with the specified ID.
            </summary>
            <param name="id">A <see cref="T:System.String"/> containing the ID of the element to find.</param>
            <returns>An <see cref="T:Alt.Sketch.Svg.SvgElement"/> of one exists with the specified ID; otherwise false.</returns>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgDocument.Open(System.String)">
            <summary>
            Opens the document at the specified path and loads the SVG contents.
            </summary>
            <param name="path">A <see cref="T:System.String"/> containing the path of the file to open.</param>
            <returns>An <see cref="T:Alt.Sketch.Svg.SvgDocument"/> with the contents loaded.</returns>
            <exception cref="!:FileNotFoundException">The document at the specified <paramref name="path"/> cannot be found.</exception>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgDocument.Open``1(System.String)">
            <summary>
            Opens the document at the specified path and loads the SVG contents.
            </summary>
            <param name="path">A <see cref="T:System.String"/> containing the path of the file to open.</param>
            <returns>An <see cref="T:Alt.Sketch.Svg.SvgDocument"/> with the contents loaded.</returns>
            <exception cref="!:FileNotFoundException">The document at the specified <paramref name="path"/> cannot be found.</exception>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgDocument.Open``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Opens the document at the specified path and loads the SVG contents.
            </summary>
            <param name="path">A <see cref="T:System.String"/> containing the path of the file to open.</param>
            <param name="entities">A dictionary of custom entity definitions to be used when resolving XML entities within the document.</param>
            <returns>An <see cref="T:Alt.Sketch.Svg.SvgDocument"/> with the contents loaded.</returns>
            <exception cref="!:FileNotFoundException">The document at the specified <paramref name="path"/> cannot be found.</exception>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgDocument.Open``1(System.IO.Stream)">
            <summary>
            Attempts to open an SVG document from the specified <see cref="!:Stream"/>.
            </summary>
            <param name="stream">The <see cref="!:Stream"/> containing the SVG document to open.</param>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgDocument.Open``1(System.IO.Stream,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Opens an SVG document from the specified <see cref="!:Stream"/> and adds the specified entities.
            </summary>
            <param name="stream">The <see cref="!:Stream"/> containing the SVG document to open.</param>
            <param name="entities">Custom entity definitions.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="stream"/> parameter cannot be <c>null</c>.</exception>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgDocument.Open(Alt.Xml.XmlDocument)">
            <summary>
            Opens an SVG document from the specified <see cref="T:Alt.Xml.XmlDocument"/>.
            </summary>
            <param name="document">The <see cref="T:Alt.Xml.XmlDocument"/> containing the SVG document XML.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="document"/> parameter cannot be <c>null</c>.</exception>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgDocument.Draw(Alt.Sketch.Svg.SvgRenderer)">
            <summary>
            Renders the <see cref="T:Alt.Sketch.Svg.SvgDocument"/> to the specified <see cref="T:Alt.Sketch.Svg.SvgRenderer"/>.
            </summary>
            <param name="renderer">The <see cref="T:Alt.Sketch.Svg.SvgRenderer"/> to render the document with.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="renderer"/> parameter cannot be <c>null</c>.</exception>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgDocument.Draw(Alt.Sketch.Graphics)">
            <summary>
            Renders the <see cref="T:Alt.Sketch.Svg.SvgDocument"/> to the specified <see cref="T:Alt.Sketch.Graphics"/>.
            </summary>
            <param name="graphics">The <see cref="T:Alt.Sketch.Graphics"/> to be rendered to.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="graphics"/> parameter cannot be <c>null</c>.</exception>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgDocument.Draw">
            <summary>
            Renders the <see cref="T:Alt.Sketch.Svg.SvgDocument"/> and returns the image as a <see cref="T:Alt.Sketch.Bitmap"/>.
            </summary>
            <returns>A <see cref="T:Alt.Sketch.Bitmap"/> containing the rendered document.</returns>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgDocument.Draw(Alt.Sketch.Bitmap)">
            <summary>
            Renders the <see cref="T:Alt.Sketch.Svg.SvgDocument"/> into a given Bitmap <see cref="T:Alt.Sketch.Bitmap"/>.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgDocument.IdManager">
            <summary>
            Gets an <see cref="T:Alt.Sketch.Svg.SvgElementIdManager"/> for this document.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgDocument.Ppi">
            <summary>
            Gets or sets the Pixels Per Inch of the rendered image.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgDtdResolver.GetEntity(System.Uri,System.String,System.Type)">
            <summary>
            Maps a URI to an object containing the actual resource.
            </summary>
            <param name="absoluteUri">The URI returned from <see cref="M:Alt.Xml.XmlResolver.ResolveUri(System.Uri,System.String)"/></param>
            <param name="role">The current implementation does not use this parameter when resolving URIs. This is provided for future extensibility purposes. For example, this can be mapped to the xlink:role and used as an implementation specific argument in other scenarios.</param>
            <param name="ofObjectToReturn">The type of object to return. The current implementation only returns System.IO.Stream objects.</param>
            <returns>
            A System.IO.Stream object or null if a type other than stream is specified.
            </returns>
            <exception cref="T:Alt.Xml.XmlException">
            	<paramref name="ofObjectToReturn"/> is neither null nor a Stream type. </exception>
            <exception cref="T:System.UriFormatException">The specified URI is not an absolute URI. </exception>
            <exception cref="T:System.NullReferenceException">
            	<paramref name="absoluteUri"/> is null. </exception>
            <exception cref="T:System.Exception">There is a runtime error (for example, an interrupted server connection). </exception>
        </member>
        <member name="T:Alt.Sketch.Svg.AttributeEventArgs">
            <summary>
            Describes the Attribute which was set
            </summary>
        </member>
        <member name="T:Alt.Sketch.Svg.MouseArg">
            <summary>
            Represents the state of the mouse at the moment the event occured.
            </summary>
        </member>
        <member name="F:Alt.Sketch.Svg.MouseArg.Button">
            <summary>
            1 = left, 2 = middle, 3 = right
            </summary>
        </member>
        <member name="T:Alt.Sketch.Svg.PointArg">
            <summary>
            Represents the mouse position at the moment the event occured.
            </summary>
        </member>
        <member name="T:Alt.Sketch.Svg.SvgElementAttribute">
            <summary>
            Specifies the SVG name of an <see cref="T:Alt.Sketch.Svg.SvgElement"/>.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgElementAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.Sketch.Svg.SvgElementAttribute"/> class with the specified element name;
            </summary>
            <param name="elementName">The name of the SVG element.</param>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgElementAttribute.ElementName">
            <summary>
            Gets the name of the SVG element.
            </summary>
        </member>
        <member name="T:Alt.Sketch.Svg.SvgElementCollection">
            <summary>
            Represents a collection of <see cref="T:Alt.Sketch.Svg.SvgElement"/>s.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgElementCollection.#ctor(Alt.Sketch.Svg.SvgElement)">
            <summary>
            Initialises a new instance of an <see cref="T:Alt.Sketch.Svg.SvgElementCollection"/> class.
            </summary>
            <param name="owner">The owner <see cref="T:Alt.Sketch.Svg.SvgElement"/> of the collection.</param>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgElementCollection.IndexOf(Alt.Sketch.Svg.SvgElement)">
            <summary>
            Returns the index of the specified <see cref="T:Alt.Sketch.Svg.SvgElement"/> in the collection.
            </summary>
            <param name="item">The <see cref="T:Alt.Sketch.Svg.SvgElement"/> to search for.</param>
            <returns>The index of the element if it is present; otherwise -1.</returns>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgElementCollection.Insert(System.Int32,Alt.Sketch.Svg.SvgElement)">
            <summary>
            Inserts the given <see cref="T:Alt.Sketch.Svg.SvgElement"/> to the collection at the specified index.
            </summary>
            <param name="index">The index that the <paramref name="item"/> should be added at.</param>
            <param name="item">The <see cref="T:Alt.Sketch.Svg.SvgElement"/> to be added.</param>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgElementCollection.FindSvgElementsOf``1">
            <summary>
            expensive recursive search for nodes of type T
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgElementCollection.FindSvgElementOf``1">
            <summary>
            expensive recursive search for first node of type T
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Alt.Sketch.Svg.SvgElementFactory">
            <summary>
            Provides the methods required in order to parse and create <see cref="T:Alt.Sketch.Svg.SvgElement"/> instances from XML.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgElementFactory.CreateDocument``1(Alt.Xml.XmlTextReader)">
            <summary>
            Creates an <see cref="T:Alt.Sketch.Svg.SvgDocument"/> from the current node in the specified <see cref="T:Alt.Xml.XmlTextReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Alt.Xml.XmlTextReader"/> containing the node to parse into an <see cref="T:Alt.Sketch.Svg.SvgDocument"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="reader"/> parameter cannot be <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException">The CreateDocument method can only be used to parse root &lt;svg&gt; elements.</exception>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgElementFactory.CreateElement(Alt.Xml.XmlTextReader,Alt.Sketch.Svg.SvgDocument)">
            <summary>
            Creates an <see cref="T:Alt.Sketch.Svg.SvgElement"/> from the current node in the specified <see cref="T:Alt.Xml.XmlTextReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Alt.Xml.XmlTextReader"/> containing the node to parse into a subclass of <see cref="T:Alt.Sketch.Svg.SvgElement"/>.</param>
            <param name="document">The <see cref="T:Alt.Sketch.Svg.SvgDocument"/> that the created element belongs to.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="reader"/> and <paramref name="document"/> parameters cannot be <c>null</c>.</exception>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgElementFactory.AvailableElements">
            <summary>
            Gets a list of available types that can be used when creating an <see cref="T:Alt.Sketch.Svg.SvgElement"/>.
            </summary>
        </member>
        <member name="T:Alt.Sketch.Svg.SvgElementFactory.ElementInfo">
            <summary>
            Contains information about a type inheriting from <see cref="T:Alt.Sketch.Svg.SvgElement"/>.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgElementFactory.ElementInfo.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.Sketch.Svg.SvgElementFactory.ElementInfo"/> struct.
            </summary>
            <param name="elementName">Name of the element.</param>
            <param name="elementType">Type of the element.</param>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgElementFactory.ElementInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.Sketch.Svg.SvgElementFactory.ElementInfo"/> class.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgElementFactory.ElementInfo.ElementName">
            <summary>
            Gets the SVG name of the <see cref="T:Alt.Sketch.Svg.SvgElement"/>.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgElementFactory.ElementInfo.ElementType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the <see cref="T:Alt.Sketch.Svg.SvgElement"/> subclass.
            </summary>
        </member>
        <member name="T:Alt.Sketch.Svg.SvgElementIdManager">
            <summary>
            Provides methods to ensure element ID's are valid and unique.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgElementIdManager.GetElementById(System.String)">
            <summary>
            Retrieves the <see cref="T:Alt.Sketch.Svg.SvgElement"/> with the specified ID.
            </summary>
            <param name="id">A <see cref="T:System.String"/> containing the ID of the element to find.</param>
            <returns>An <see cref="T:Alt.Sketch.Svg.SvgElement"/> of one exists with the specified ID; otherwise false.</returns>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgElementIdManager.Add(Alt.Sketch.Svg.SvgElement)">
            <summary>
            Adds the specified <see cref="T:Alt.Sketch.Svg.SvgElement"/> for ID management.
            </summary>
            <param name="element">The <see cref="T:Alt.Sketch.Svg.SvgElement"/> to be managed.</param>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgElementIdManager.AddAndFixID(Alt.Sketch.Svg.SvgElement)">
            <summary>
            Adds the specified <see cref="T:Alt.Sketch.Svg.SvgElement"/> for ID management. 
            And can auto fix the ID if it already exists or it starts with a number.
            </summary>
            <param name="element">The <see cref="T:Alt.Sketch.Svg.SvgElement"/> to be managed.</param>
            <param name="autoFixID">Pass true here, if you want the ID to be fixed</param>
            <param name="logElementOldIDNewID">If not null, the action is called before the id is fixed</param>
            <returns>true, if ID was altered</returns>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgElementIdManager.Remove(Alt.Sketch.Svg.SvgElement)">
            <summary>
            Removed the specified <see cref="T:Alt.Sketch.Svg.SvgElement"/> from ID management.
            </summary>
            <param name="element">The <see cref="T:Alt.Sketch.Svg.SvgElement"/> to be removed from ID management.</param>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgElementIdManager.EnsureValidId(System.String)">
            <summary>
            Ensures that the specified ID is valid within the containing <see cref="T:Alt.Sketch.Svg.SvgDocument"/>.
            </summary>
            <param name="id">A <see cref="T:System.String"/> containing the ID to validate.</param>
            <exception cref="T:Alt.Sketch.Svg.SvgException">
            <para>The ID cannot start with a digit.</para>
            <para>An element with the same ID already exists within the containing <see cref="T:Alt.Sketch.Svg.SvgDocument"/>.</para>
            </exception>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgElementIdManager.#ctor(Alt.Sketch.Svg.SvgDocument)">
            <summary>
            Initialises a new instance of an <see cref="T:Alt.Sketch.Svg.SvgElementIdManager"/>.
            </summary>
            <param name="document">The <see cref="T:Alt.Sketch.Svg.SvgDocument"/> containing the <see cref="T:Alt.Sketch.Svg.SvgElement"/>s to manage.</param>
        </member>
        <member name="T:Alt.Sketch.Svg.SvgExtentions">
            <summary>
            Svg helpers
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.Sketch.Svg.SvgRenderer"/> class.
            </summary>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgRenderer.FromImage(Alt.Sketch.ImageSource)">
            <summary>
            Creates a new <see cref="T:Alt.Sketch.Svg.SvgRenderer"/> from the specified <see cref="!:Image"/>.
            </summary>
            <param name="image"><see cref="!:Image"/> from which to create the new <see cref="T:Alt.Sketch.Svg.SvgRenderer"/>.</param>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgRenderer.FromGraphics(Alt.Sketch.Graphics)">
            <summary>
            Creates a new <see cref="T:Alt.Sketch.Svg.SvgRenderer"/> from the specified <see cref="T:Alt.Sketch.Graphics"/>.
            </summary>
            <param name="graphics">The <see cref="T:Alt.Sketch.Graphics"/> to create the renderer from.</param>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgTextReader.MoveToNextAttribute">
            <summary>
            Moves to the next attribute.
            </summary>
            <returns>
            true if there is a next attribute; false if there are no more attributes.
            </returns>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgTextReader.Read">
            <summary>
            Reads the next node from the stream.
            </summary>
            <returns>
            true if the next node was read successfully; false if there are no more nodes to read.
            </returns>
            <exception cref="T:Alt.Xml.XmlException">An error occurred while parsing the XML. </exception>
        </member>
        <member name="M:Alt.Sketch.Svg.SvgTextReader.ResolveEntity">
            <summary>
            Resolves the entity reference for EntityReference nodes.
            </summary>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgTextReader.Value">
            <summary>
            Gets the text value of the current node.
            </summary>
            <value></value>
            <returns>The value returned depends on the <see cref="P:Alt.Xml.XmlTextReader.NodeType"/> of the node. The following table lists node types that have a value to return. All other node types return String.Empty.Node Type Value AttributeThe value of the attribute. CDATAThe content of the CDATA section. CommentThe content of the comment. DocumentTypeThe internal subset. ProcessingInstructionThe entire content, excluding the target. SignificantWhitespaceThe white space within an xml:space= 'preserve' scope. TextThe content of the text node. WhitespaceThe white space between markup. XmlDeclarationThe content of the declaration. </returns>
        </member>
        <member name="P:Alt.Sketch.Svg.SvgTextReader.LocalName">
            <summary>
            Gets the local name of the current node.
            </summary>
            <value></value>
            <returns>The name of the current node with the prefix removed. For example, LocalName is book for the element &lt;bk:book&gt;.For node types that do not have a name (like Text, Comment, and so on), this property returns String.Empty.</returns>
        </member>
        <member name="T:Alt.GUI.HtmlRenderer.PdfSharp.Adapters.BrushAdapter">
            <summary>
            Adapter for WindowsForms brushes objects for core.
            </summary>
        </member>
        <member name="F:Alt.GUI.HtmlRenderer.PdfSharp.Adapters.BrushAdapter._brush">
            <summary>
            The actual PdfSharp brush instance.<br/>
            Should be <see cref="T:Alt.GUI.PdfSharp.Drawing.XBrush"/> but there is some fucking issue inheriting from it =/
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.PdfSharp.Adapters.BrushAdapter.#ctor(System.Object)">
            <summary>
            Init.
            </summary>
        </member>
        <member name="P:Alt.GUI.HtmlRenderer.PdfSharp.Adapters.BrushAdapter.Brush">
            <summary>
            The actual WindowsForms brush instance.
            </summary>
        </member>
        <member name="T:Alt.GUI.HtmlRenderer.PdfSharp.Adapters.FontAdapter">
            <summary>
            Adapter for WindowsForms Font object for core.
            </summary>
        </member>
        <member name="F:Alt.GUI.HtmlRenderer.PdfSharp.Adapters.FontAdapter._font">
            <summary>
            the underline win-forms font.
            </summary>
        </member>
        <member name="F:Alt.GUI.HtmlRenderer.PdfSharp.Adapters.FontAdapter._underlineOffset">
            <summary>
            the vertical offset of the font underline location from the top of the font.
            </summary>
        </member>
        <member name="F:Alt.GUI.HtmlRenderer.PdfSharp.Adapters.FontAdapter._height">
            <summary>
            Cached font height.
            </summary>
        </member>
        <member name="F:Alt.GUI.HtmlRenderer.PdfSharp.Adapters.FontAdapter._whitespaceWidth">
            <summary>
            Cached font whitespace width.
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.PdfSharp.Adapters.FontAdapter.#ctor(Alt.GUI.PdfSharp.Drawing.XFont)">
            <summary>
            Init.
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.PdfSharp.Adapters.FontAdapter.SetMetrics(System.Int32,System.Int32)">
            <summary>
            Set font metrics to be cached for the font for future use.
            </summary>
            <param name="height">the full height of the font</param>
            <param name="underlineOffset">the vertical offset of the font underline location from the top of the font.</param>
        </member>
        <member name="P:Alt.GUI.HtmlRenderer.PdfSharp.Adapters.FontAdapter.Font">
            <summary>
            the underline win-forms font.
            </summary>
        </member>
        <member name="T:Alt.GUI.HtmlRenderer.PdfSharp.Adapters.FontFamilyAdapter">
            <summary>
            Adapter for WindowsForms Font object for core.
            </summary>
        </member>
        <member name="F:Alt.GUI.HtmlRenderer.PdfSharp.Adapters.FontFamilyAdapter._fontFamily">
            <summary>
            the underline win-forms font.
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.PdfSharp.Adapters.FontFamilyAdapter.#ctor(Alt.GUI.PdfSharp.Drawing.XFontFamily)">
            <summary>
            Init.
            </summary>
        </member>
        <member name="P:Alt.GUI.HtmlRenderer.PdfSharp.Adapters.FontFamilyAdapter.FontFamily">
            <summary>
            the underline win-forms font family.
            </summary>
        </member>
        <member name="T:Alt.GUI.HtmlRenderer.PdfSharp.Adapters.GraphicsAdapter">
            <summary>
            Adapter for WindowsForms Graphics for core.
            </summary>
        </member>
        <member name="F:Alt.GUI.HtmlRenderer.PdfSharp.Adapters.GraphicsAdapter._g">
            <summary>
            The wrapped WindowsForms graphics object
            </summary>
        </member>
        <member name="F:Alt.GUI.HtmlRenderer.PdfSharp.Adapters.GraphicsAdapter._releaseGraphics">
            <summary>
            if to release the graphics object on dispose
            </summary>
        </member>
        <member name="F:Alt.GUI.HtmlRenderer.PdfSharp.Adapters.GraphicsAdapter._stringFormat">
            <summary>
            Used to measure and draw strings
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.PdfSharp.Adapters.GraphicsAdapter.#ctor(Alt.GUI.PdfSharp.Drawing.XGraphics,System.Boolean)">
            <summary>
            Init.
            </summary>
            <param name="g">the win forms graphics object to use</param>
            <param name="releaseGraphics">optional: if to release the graphics object on dispose (default - false)</param>
        </member>
        <member name="T:Alt.GUI.HtmlRenderer.PdfSharp.Adapters.GraphicsPathAdapter">
            <summary>
            Adapter for WindowsForms graphics path object for core.
            </summary>
        </member>
        <member name="F:Alt.GUI.HtmlRenderer.PdfSharp.Adapters.GraphicsPathAdapter._graphicsPath">
            <summary>
            The actual PdfSharp graphics path instance.
            </summary>
        </member>
        <member name="F:Alt.GUI.HtmlRenderer.PdfSharp.Adapters.GraphicsPathAdapter._lastPoint">
            <summary>
            the last point added to the path to begin next segment from
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.PdfSharp.Adapters.GraphicsPathAdapter.GetStartAngle(Alt.GUI.HtmlRenderer.Adapters.RGraphicsPath.Corner)">
            <summary>
            Get arc start angle for the given corner.
            </summary>
        </member>
        <member name="P:Alt.GUI.HtmlRenderer.PdfSharp.Adapters.GraphicsPathAdapter.GraphicsPath">
            <summary>
            The actual PdfSharp graphics path instance.
            </summary>
        </member>
        <member name="T:Alt.GUI.HtmlRenderer.PdfSharp.Adapters.ImageAdapter">
            <summary>
            Adapter for WindowsForms Image object for core.
            </summary>
        </member>
        <member name="F:Alt.GUI.HtmlRenderer.PdfSharp.Adapters.ImageAdapter._image">
            <summary>
            the underline win-forms image.
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.PdfSharp.Adapters.ImageAdapter.#ctor(Alt.GUI.PdfSharp.Drawing.XImage)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Object"/> class.
            </summary>
        </member>
        <member name="P:Alt.GUI.HtmlRenderer.PdfSharp.Adapters.ImageAdapter.Image">
            <summary>
            the underline win-forms image.
            </summary>
        </member>
        <member name="T:Alt.GUI.HtmlRenderer.PdfSharp.Adapters.PdfSharpAdapter">
            <summary>
            Adapter for PdfSharp library platform.
            </summary>
        </member>
        <member name="F:Alt.GUI.HtmlRenderer.PdfSharp.Adapters.PdfSharpAdapter._instance">
            <summary>
            Singleton instance of global adapter.
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.PdfSharp.Adapters.PdfSharpAdapter.#ctor">
            <summary>
            Init color resolve.
            </summary>
        </member>
        <member name="P:Alt.GUI.HtmlRenderer.PdfSharp.Adapters.PdfSharpAdapter.Instance">
            <summary>
            Singleton instance of global adapter.
            </summary>
        </member>
        <member name="T:Alt.GUI.HtmlRenderer.PdfSharp.Adapters.PenAdapter">
            <summary>
            Adapter for WindowsForms pens objects for core.
            </summary>
        </member>
        <member name="F:Alt.GUI.HtmlRenderer.PdfSharp.Adapters.PenAdapter._pen">
            <summary>
            The actual WindowsForms brush instance.
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.PdfSharp.Adapters.PenAdapter.#ctor(Alt.GUI.PdfSharp.Drawing.XPen)">
            <summary>
            Init.
            </summary>
        </member>
        <member name="P:Alt.GUI.HtmlRenderer.PdfSharp.Adapters.PenAdapter.Pen">
            <summary>
            The actual WindowsForms brush instance.
            </summary>
        </member>
        <member name="T:Alt.GUI.HtmlRenderer.PdfSharp.Adapters.XTextureBrush">
            <summary>
            Because PdfSharp doesn't support texture brush we need to implement it ourselves.
            </summary>
        </member>
        <member name="F:Alt.GUI.HtmlRenderer.PdfSharp.Adapters.XTextureBrush._image">
            <summary>
            The image to draw in the brush
            </summary>
        </member>
        <member name="F:Alt.GUI.HtmlRenderer.PdfSharp.Adapters.XTextureBrush._dstRect">
            <summary>
            the
            </summary>
        </member>
        <member name="F:Alt.GUI.HtmlRenderer.PdfSharp.Adapters.XTextureBrush._translateTransformLocation">
            <summary>
            the transform the location of the image to handle center alignment
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.PdfSharp.Adapters.XTextureBrush.#ctor(Alt.GUI.PdfSharp.Drawing.XImage,Alt.GUI.PdfSharp.Drawing.XRect,Alt.GUI.PdfSharp.Drawing.XPoint)">
            <summary>
            Init.
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.PdfSharp.Adapters.XTextureBrush.DrawRectangle(Alt.GUI.PdfSharp.Drawing.XGraphics,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw the texture image in the given graphics at the given location.
            </summary>
        </member>
        <member name="T:Alt.GUI.HtmlRenderer.PdfSharp.HtmlContainer">
            <summary>
            Low level handling of Html Renderer logic, this class is used by <see cref="T:Alt.GUI.HtmlRenderer.PdfSharp.PdfGenerator"/>.
            </summary>
            <seealso cref="P:Alt.GUI.HtmlRenderer.PdfSharp.HtmlContainer.HtmlContainerInt"/>
        </member>
        <member name="F:Alt.GUI.HtmlRenderer.PdfSharp.HtmlContainer._htmlContainerInt">
            <summary>
            The internal core html container
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.PdfSharp.HtmlContainer.#ctor">
            <summary>
            Init.
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.PdfSharp.HtmlContainer.SetHtml(System.String,Alt.GUI.HtmlRenderer.Core.CssData)">
            <summary>
            Init with optional document and stylesheet.
            </summary>
            <param name="htmlSource">the html to init with, init empty if not given</param>
            <param name="baseCssData">optional: the stylesheet to init with, init default if not given</param>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.PdfSharp.HtmlContainer.GetHtml(Alt.GUI.HtmlRenderer.Core.Entities.HtmlGenerationStyle)">
            <summary>
            Get html from the current DOM tree with style if requested.
            </summary>
            <param name="styleGen">Optional: controls the way styles are generated when html is generated (default: <see cref="F:Alt.GUI.HtmlRenderer.Core.Entities.HtmlGenerationStyle.Inline"/>)</param>
            <returns>generated html</returns>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.PdfSharp.HtmlContainer.GetAttributeAt(Alt.GUI.PdfSharp.Drawing.XPoint,System.String)">
            <summary>
            Get attribute value of element at the given x,y location by given key.<br/>
            If more than one element exist with the attribute at the location the inner most is returned.
            </summary>
            <param name="location">the location to find the attribute at</param>
            <param name="attribute">the attribute key to get value by</param>
            <returns>found attribute value or null if not found</returns>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.PdfSharp.HtmlContainer.GetLinks">
            <summary>
            Get all the links in the HTML with the element rectangle and href data.
            </summary>
            <returns>collection of all the links in the HTML</returns>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.PdfSharp.HtmlContainer.GetLinkAt(Alt.GUI.PdfSharp.Drawing.XPoint)">
            <summary>
            Get css link href at the given x,y location.
            </summary>
            <param name="location">the location to find the link at</param>
            <returns>css link href if exists or null</returns>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.PdfSharp.HtmlContainer.GetElementRectangle(System.String)">
            <summary>
            Get the rectangle of html element as calculated by html layout.<br/>
            Element if found by id (id attribute on the html element).<br/>
            Note: to get the screen rectangle you need to adjust by the hosting control.<br/>
            </summary>
            <param name="elementId">the id of the element to get its rectangle</param>
            <returns>the rectangle of the element or null if not found</returns>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.PdfSharp.HtmlContainer.PerformLayout(Alt.GUI.PdfSharp.Drawing.XGraphics)">
            <summary>
            Measures the bounds of box and children, recursively.
            </summary>
            <param name="g">Device context to draw</param>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.PdfSharp.HtmlContainer.PerformPaint(Alt.GUI.PdfSharp.Drawing.XGraphics)">
            <summary>
            Render the html using the given device.
            </summary>
            <param name="g">the device to use to render</param>
        </member>
        <member name="E:Alt.GUI.HtmlRenderer.PdfSharp.HtmlContainer.LoadComplete">
            <summary>
            Raised when the set html document has been fully loaded.<br/>
            Allows manipulation of the html dom, scroll position, etc.
            </summary>
        </member>
        <member name="E:Alt.GUI.HtmlRenderer.PdfSharp.HtmlContainer.RenderError">
            <summary>
            Raised when an error occurred during html rendering.<br/>
            </summary>
            <remarks>
            There is no guarantee that the event will be raised on the main thread, it can be raised on thread-pool thread.
            </remarks>
        </member>
        <member name="E:Alt.GUI.HtmlRenderer.PdfSharp.HtmlContainer.StylesheetLoad">
            <summary>
            Raised when a stylesheet is about to be loaded by file path or URI by link element.<br/>
            This event allows to provide the stylesheet manually or provide new source (file or Uri) to load from.<br/>
            If no alternative data is provided the original source will be used.<br/>
            </summary>
        </member>
        <member name="E:Alt.GUI.HtmlRenderer.PdfSharp.HtmlContainer.ImageLoad">
            <summary>
            Raised when an image is about to be loaded by file path or URI.<br/>
            This event allows to provide the image manually, if not handled the image will be loaded from file or download from URI.
            </summary>
        </member>
        <member name="P:Alt.GUI.HtmlRenderer.PdfSharp.HtmlContainer.HtmlContainerInt">
            <summary>
            The internal core html container
            </summary>
        </member>
        <member name="P:Alt.GUI.HtmlRenderer.PdfSharp.HtmlContainer.CssData">
            <summary>
            the parsed stylesheet data used for handling the html
            </summary>
        </member>
        <member name="P:Alt.GUI.HtmlRenderer.PdfSharp.HtmlContainer.AvoidGeometryAntialias">
            <summary>
            Gets or sets a value indicating if anti-aliasing should be avoided for geometry like backgrounds and borders (default - false).
            </summary>
        </member>
        <member name="P:Alt.GUI.HtmlRenderer.PdfSharp.HtmlContainer.ScrollOffset">
            <summary>
            The scroll offset of the html.<br/>
            This will adjust the rendered html by the given offset so the content will be "scrolled".<br/>
            </summary>
            <example>
            Element that is rendered at location (50,100) with offset of (0,200) will not be rendered as it
            will be at -100 therefore outside the client rectangle.
            </example>
        </member>
        <member name="P:Alt.GUI.HtmlRenderer.PdfSharp.HtmlContainer.Location">
            <summary>
            The top-left most location of the rendered html.<br/>
            This will offset the top-left corner of the rendered html.
            </summary>
        </member>
        <member name="P:Alt.GUI.HtmlRenderer.PdfSharp.HtmlContainer.MaxSize">
            <summary>
            The max width and height of the rendered html.<br/>
            The max width will effect the html layout wrapping lines, resize images and tables where possible.<br/>
            The max height does NOT effect layout, but will not render outside it (clip).<br/>
            <see cref="P:Alt.GUI.HtmlRenderer.PdfSharp.HtmlContainer.ActualSize"/> can be exceed the max size by layout restrictions (unwrappable line, set image size, etc.).<br/>
            Set zero for unlimited (width\height separately).<br/>
            </summary>
        </member>
        <member name="P:Alt.GUI.HtmlRenderer.PdfSharp.HtmlContainer.ActualSize">
            <summary>
            The actual size of the rendered html (after layout)
            </summary>
        </member>
        <member name="P:Alt.GUI.HtmlRenderer.PdfSharp.HtmlContainer.SelectedText">
            <summary>
            Get the currently selected text segment in the html.
            </summary>
        </member>
        <member name="P:Alt.GUI.HtmlRenderer.PdfSharp.HtmlContainer.SelectedHtml">
            <summary>
            Copy the currently selected html segment with style.
            </summary>
        </member>
        <member name="T:Alt.GUI.HtmlRenderer.PdfSharp.PdfGenerateConfig">
            <summary>
            The settings for generating PDF using <see cref="T:Alt.GUI.HtmlRenderer.PdfSharp.PdfGenerator"/>
            </summary>
        </member>
        <member name="F:Alt.GUI.HtmlRenderer.PdfSharp.PdfGenerateConfig._pageSize">
            <summary>
            the page size to use for each page in the generated pdf
            </summary>
        </member>
        <member name="F:Alt.GUI.HtmlRenderer.PdfSharp.PdfGenerateConfig._marginTop">
            <summary>
            the top margin between the page start and the text
            </summary>
        </member>
        <member name="F:Alt.GUI.HtmlRenderer.PdfSharp.PdfGenerateConfig._marginBottom">
            <summary>
            the bottom margin between the page end and the text
            </summary>
        </member>
        <member name="F:Alt.GUI.HtmlRenderer.PdfSharp.PdfGenerateConfig._marginLeft">
            <summary>
            the left margin between the page start and the text
            </summary>
        </member>
        <member name="F:Alt.GUI.HtmlRenderer.PdfSharp.PdfGenerateConfig._marginRight">
            <summary>
            the right margin between the page end and the text
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.PdfSharp.PdfGenerateConfig.SetMargins(System.Int32)">
            <summary>
            Set all 4 margins to the given value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Alt.GUI.HtmlRenderer.PdfSharp.PdfGenerateConfig.PageSize">
            <summary>
            the page size to use for each page in the generated pdf
            </summary>
        </member>
        <member name="P:Alt.GUI.HtmlRenderer.PdfSharp.PdfGenerateConfig.MarginTop">
            <summary>
            the top margin between the page start and the text
            </summary>
        </member>
        <member name="P:Alt.GUI.HtmlRenderer.PdfSharp.PdfGenerateConfig.MarginBottom">
            <summary>
            the bottom margin between the page end and the text
            </summary>
        </member>
        <member name="P:Alt.GUI.HtmlRenderer.PdfSharp.PdfGenerateConfig.MarginLeft">
            <summary>
            the left margin between the page start and the text
            </summary>
        </member>
        <member name="P:Alt.GUI.HtmlRenderer.PdfSharp.PdfGenerateConfig.MarginRight">
            <summary>
            the right margin between the page end and the text
            </summary>
        </member>
        <member name="T:Alt.GUI.HtmlRenderer.PdfSharp.PdfGenerator">
            <summary>
            TODO:a add doc
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.PdfSharp.PdfGenerator.AddFontFamilyMapping(System.String,System.String)">
            <summary>
            Adds a font mapping from <paramref name="fromFamily"/> to <paramref name="toFamily"/> iff the <paramref name="fromFamily"/> is not found.<br/>
            When the <paramref name="fromFamily"/> font is used in rendered html and is not found in existing 
            fonts (installed or added) it will be replaced by <paramref name="toFamily"/>.<br/>
            </summary>
            <remarks>
            This fonts mapping can be used as a fallback in case the requested font is not installed in the client system.
            </remarks>
            <param name="fromFamily">the font family to replace</param>
            <param name="toFamily">the font family to replace with</param>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.PdfSharp.PdfGenerator.ParseStyleSheet(System.String,System.Boolean)">
            <summary>
            Parse the given stylesheet to <see cref="T:Alt.GUI.HtmlRenderer.Core.CssData"/> object.<br/>
            If <paramref name="combineWithDefault"/> is true the parsed css blocks are added to the 
            default css data (as defined by W3), merged if class name already exists. If false only the data in the given stylesheet is returned.
            </summary>
            <seealso cref="!:http://www.w3.org/TR/CSS21/sample.html"/>
            <param name="stylesheet">the stylesheet source to parse</param>
            <param name="combineWithDefault">true - combine the parsed css data with default css data, false - return only the parsed css data</param>
            <returns>the parsed css data</returns>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.PdfSharp.PdfGenerator.GeneratePdf(System.String,Alt.GUI.PdfSharp.PageSize,System.Int32,Alt.GUI.HtmlRenderer.Core.CssData,System.EventHandler{Alt.GUI.HtmlStylesheetLoadEventArgs},System.EventHandler{Alt.GUI.HtmlImageLoadEventArgs})">
            <summary>
            Create PDF document from given HTML.<br/>
            </summary>
            <param name="html">HTML source to create PDF from</param>
            <param name="pageSize">the page size to use for each page in the generated pdf </param>
            <param name="margin">the margin to use between the HTML and the edges of each page</param>
            <param name="cssData">optional: the style to use for html rendering (default - use W3 default style)</param>
            <param name="stylesheetLoad">optional: can be used to overwrite stylesheet resolution logic</param>
            <param name="imageLoad">optional: can be used to overwrite image resolution logic</param>
            <returns>the generated image of the html</returns>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.PdfSharp.PdfGenerator.GeneratePdf(System.String,Alt.GUI.HtmlRenderer.PdfSharp.PdfGenerateConfig,Alt.GUI.HtmlRenderer.Core.CssData,System.EventHandler{Alt.GUI.HtmlStylesheetLoadEventArgs},System.EventHandler{Alt.GUI.HtmlImageLoadEventArgs})">
            <summary>
            Create PDF document from given HTML.<br/>
            </summary>
            <param name="html">HTML source to create PDF from</param>
            <param name="config">the configuration to use for the PDF generation (page size/page orientation/margins/etc.)</param>
            <param name="cssData">optional: the style to use for html rendering (default - use W3 default style)</param>
            <param name="stylesheetLoad">optional: can be used to overwrite stylesheet resolution logic</param>
            <param name="imageLoad">optional: can be used to overwrite image resolution logic</param>
            <returns>the generated image of the html</returns>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.PdfSharp.PdfGenerator.HandleLinks(Alt.GUI.PdfSharp.Pdf.PdfDocument,Alt.GUI.HtmlRenderer.PdfSharp.HtmlContainer,Alt.GUI.PdfSharp.Drawing.XSize,Alt.GUI.PdfSharp.Drawing.XSize)">
            <summary>
            Handle HTML links by create PDF Documents link either to external URL or to another page in the document.
            </summary>
        </member>
        <member name="T:Alt.GUI.HtmlRenderer.PdfSharp.Utilities.Utils">
            <summary>
            Utilities for converting WindowsForms entities to HtmlRenderer core entities.
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.PdfSharp.Utilities.Utils.Convert(Alt.GUI.PdfSharp.Drawing.XPoint)">
            <summary>
            Convert from WindowsForms point to core point.
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.PdfSharp.Utilities.Utils.Convert(Alt.GUI.HtmlRenderer.Adapters.Entities.RPoint[])">
            <summary>
            Convert from WindowsForms point to core point.
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.PdfSharp.Utilities.Utils.Convert(Alt.GUI.HtmlRenderer.Adapters.Entities.RPoint)">
            <summary>
            Convert from core point to WindowsForms point.
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.PdfSharp.Utilities.Utils.Convert(Alt.GUI.PdfSharp.Drawing.XSize)">
            <summary>
            Convert from WindowsForms size to core size.
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.PdfSharp.Utilities.Utils.Convert(Alt.GUI.HtmlRenderer.Adapters.Entities.RSize)">
            <summary>
            Convert from core size to WindowsForms size.
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.PdfSharp.Utilities.Utils.Convert(Alt.GUI.PdfSharp.Drawing.XRect)">
            <summary>
            Convert from WindowsForms rectangle to core rectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.PdfSharp.Utilities.Utils.Convert(Alt.GUI.HtmlRenderer.Adapters.Entities.RRect)">
            <summary>
            Convert from core rectangle to WindowsForms rectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.PdfSharp.Utilities.Utils.Convert(Alt.GUI.PdfSharp.Drawing.XColor)">
            <summary>
            Convert from WindowsForms color to core color.
            </summary>
        </member>
        <member name="M:Alt.GUI.HtmlRenderer.PdfSharp.Utilities.Utils.Convert(Alt.GUI.HtmlRenderer.Adapters.Entities.RColor)">
            <summary>
            Convert from core color to WindowsForms color.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.AdapterUtils">
            <summary>
            Encapsulates functionality relating to exposing data in various
            different data structures in a consistent way.
            </summary>
            <remarks>It would be more efficient to have iterator style access
            to the data, rather than index based, and Count.</remarks>
        </member>
        <member name="T:Alt.GUI.NPlot.AdapterUtils.IAxisSuggester">
            <summary>
            Interface for classes that can suggest an axis for data they contain.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.AdapterUtils.IAxisSuggester.Get">
            <summary>
            Calculates a suggested axis for the data contained by the implementing class.
            </summary>
            <returns>the suggested axis</returns>
        </member>
        <member name="T:Alt.GUI.NPlot.AdapterUtils.AxisSuggester_MultiColumns">
            <summary>
            Implements functionality for suggesting an axis suitable for charting 
            data in multiple columns of a DataRowCollection.
            </summary>
            <remarks>This is currently not used.</remarks>
        </member>
        <member name="M:Alt.GUI.NPlot.AdapterUtils.AxisSuggester_MultiColumns.#ctor(Alt.Data.DataRowCollection,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="rows">The DataRowCollection containing the data.</param>
            <param name="abscissaName">the column with this name is not considered</param>
        </member>
        <member name="M:Alt.GUI.NPlot.AdapterUtils.AxisSuggester_MultiColumns.Get">
            <summary>
            Calculates a suggested axis for the DataRowCollection data.
            </summary>
            <returns>the suggested axis</returns>
        </member>
        <member name="T:Alt.GUI.NPlot.AdapterUtils.AxisSuggester_IList">
            <summary>
            This class gets an axis suitable for plotting the data contained in an IList.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.AdapterUtils.AxisSuggester_IList.#ctor(System.Collections.IList)">
            <summary>
            Constructor. 
            </summary>
            <param name="data">the data we want to find a suitable axis for.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.AdapterUtils.AxisSuggester_IList.Get">
            <summary>
            Calculates a suggested axis for the IList data.
            </summary>
            <returns>the suggested axis</returns>
        </member>
        <member name="T:Alt.GUI.NPlot.AdapterUtils.AxisSuggester_Null">
            <summary>
            This class is responsible for supplying a default axis via the IAxisSuggester interface.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.AdapterUtils.AxisSuggester_Null.Get">
            <summary>
            Returns a default axis.
            </summary>
            <returns>the suggested axis</returns>
        </member>
        <member name="T:Alt.GUI.NPlot.AdapterUtils.AxisSuggester_StartStep">
            <summary>
            This class gets an axis corresponding to a StartStep object. The data on
            the orthogonal axis is of course also needed to calculate this.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.AdapterUtils.AxisSuggester_StartStep.#ctor(Alt.GUI.NPlot.StartStep,System.Collections.IList)">
            <summary>
            Constructor
            </summary>
            <param name="axisOfInterest">StartStep object corresponding to axis of interest</param>
            <param name="otherAxisData">data of other axis (needed to get count value)</param>
        </member>
        <member name="M:Alt.GUI.NPlot.AdapterUtils.AxisSuggester_StartStep.Get">
            <summary>
            Calculates a suggested axis given the data specified in the constructor.
            </summary>
            <returns>the suggested axis</returns>
        </member>
        <member name="T:Alt.GUI.NPlot.AdapterUtils.AxisSuggester_Auto">
            <summary>
            Provides default axis if only data corresponding to orthogonal axis is provided.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.AdapterUtils.AxisSuggester_Auto.#ctor(System.Collections.IList)">
            <summary>
            Constructor
            </summary>
            <param name="ordinateData">Data corresponding to orthogonal axis.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.AdapterUtils.AxisSuggester_Auto.Get">
            <summary>
            Calculates a suggested axis given the data specified in the constructor.
            </summary>
            <returns>the suggested axis</returns>
        </member>
        <member name="T:Alt.GUI.NPlot.AdapterUtils.AxisSuggester_RowAuto">
            <summary>
            Provides default axis if only data corresponding to orthogonal axis is provided.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.AdapterUtils.AxisSuggester_RowAuto.#ctor(Alt.Data.DataRowCollection)">
            <summary>
            Construbtor
            </summary>
            <param name="ordinateData">Data corresponding to orthogonal axis.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.AdapterUtils.AxisSuggester_RowAuto.Get">
            <summary>
            Calculates a suggested axis given the data specified in the constructor.
            </summary>
            <returns>the suggested axis</returns>
        </member>
        <member name="T:Alt.GUI.NPlot.AdapterUtils.AxisSuggester_Rows">
            <summary>
            Provides axis for data in a given column of a DataRowCollection.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.AdapterUtils.AxisSuggester_Rows.#ctor(Alt.Data.DataRowCollection,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="rows">DataRowCollection containing the data to suggest axis for.</param>
            <param name="columnName">the column to get data.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.AdapterUtils.AxisSuggester_Rows.Get">
            <summary>
            Calculates a suggested axis given the data specified in the constructor.
            </summary>
            <returns>the suggested axis</returns>
        </member>
        <member name="T:Alt.GUI.NPlot.AdapterUtils.AxisSuggester_DataView">
            <summary>
            Provides axis suggestion for data in a particular column of a DataView.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.AdapterUtils.AxisSuggester_DataView.#ctor(Alt.Data.DataView,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="data">DataView that contains data to suggest axis for</param>
            <param name="columnName">the column of interest in the DataView</param>
        </member>
        <member name="M:Alt.GUI.NPlot.AdapterUtils.AxisSuggester_DataView.Get">
            <summary>
            Calculates a suggested axis given the data specified in the constructor.
            </summary>
            <returns>the suggested axis</returns>
        </member>
        <member name="T:Alt.GUI.NPlot.AdapterUtils.ICounter">
            <summary>
            Interface that enables a dataholding class to report how many data items it holds.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.AdapterUtils.ICounter.Count">
            <summary>
            Number of data items in container.
            </summary>
            <value>Number of data items in container.</value>
        </member>
        <member name="T:Alt.GUI.NPlot.AdapterUtils.Counter_IList">
            <summary>
            Class that provides the number of items in an IList via the ICounter interface.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.AdapterUtils.Counter_IList.#ctor(System.Collections.IList)">
            <summary>
            Constructor
            </summary>
            <param name="data">the IList data to provide count of</param>
        </member>
        <member name="P:Alt.GUI.NPlot.AdapterUtils.Counter_IList.Count">
            <summary>
            Number of data items in container.
            </summary>
            <value>Number of data items in container.</value>
        </member>
        <member name="T:Alt.GUI.NPlot.AdapterUtils.Counter_Null">
            <summary>
            Class that returns 0 via the ICounter interface.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.AdapterUtils.Counter_Null.Count">
            <summary>
            Number of data items in container.
            </summary>
            <value>Number of data items in container.</value>
        </member>
        <member name="T:Alt.GUI.NPlot.AdapterUtils.Counter_Rows">
            <summary>
            Class that provides the number of items in a DataRowCollection via the ICounter interface.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.AdapterUtils.Counter_Rows.#ctor(Alt.Data.DataRowCollection)">
            <summary>
            Constructor
            </summary>
            <param name="rows">the DataRowCollection data to provide count of number of rows of.</param>
        </member>
        <member name="P:Alt.GUI.NPlot.AdapterUtils.Counter_Rows.Count">
            <summary>
            Number of data items in container.
            </summary>
            <value>Number of data items in container.</value>
        </member>
        <member name="T:Alt.GUI.NPlot.AdapterUtils.Counter_DataView">
            <summary>
            Class that provides the number of items in a DataView via the ICounter interface.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.AdapterUtils.Counter_DataView.#ctor(Alt.Data.DataView)">
            <summary>
            Constructor
            </summary>
            <param name="dataView">the DataBiew data to provide count of number of rows of.</param>
        </member>
        <member name="P:Alt.GUI.NPlot.AdapterUtils.Counter_DataView.Count">
            <summary>
            Number of data items in container.
            </summary>
            <value>Number of data items in container.</value>
        </member>
        <member name="T:Alt.GUI.NPlot.AdapterUtils.IDataGetter">
            <summary>
            Interface for data holding classes that allows users to get the ith value.
            </summary>
            <remarks>
            TODO: should change this to GetNext() and Reset() for more generality.
            </remarks>
        </member>
        <member name="M:Alt.GUI.NPlot.AdapterUtils.IDataGetter.Get(System.Int32)">
            <summary>
            Gets the ith data value.
            </summary>
            <param name="i">sequence number of data to get.</param>
            <returns>ith data value.</returns>
        </member>
        <member name="T:Alt.GUI.NPlot.AdapterUtils.DataGetter_IList">
            <summary>
            Provides data in an IList via the IDataGetter interface.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.AdapterUtils.DataGetter_IList.#ctor(System.Collections.IList)">
            <summary>
            Constructor
            </summary>
            <param name="data">IList that contains the data</param>
        </member>
        <member name="M:Alt.GUI.NPlot.AdapterUtils.DataGetter_IList.Get(System.Int32)">
            <summary>
            Gets the ith data value.
            </summary>
            <param name="i">sequence number of data to get.</param>
            <returns>ith data value.</returns>
        </member>
        <member name="T:Alt.GUI.NPlot.AdapterUtils.DataGetter_DoublesArray">
            <summary>
            Provides data in an array of doubles via the IDataGetter interface.
            </summary>
            <remarks>
            A speed-up version of DataDetter_IList; no boxing/unboxing overhead.
            </remarks>
        </member>
        <member name="M:Alt.GUI.NPlot.AdapterUtils.DataGetter_DoublesArray.#ctor(System.Double[])">
            <summary>
            Constructor
            </summary>
            <param name="data">array of doubles that contains the data</param>
        </member>
        <member name="M:Alt.GUI.NPlot.AdapterUtils.DataGetter_DoublesArray.Get(System.Int32)">
            <summary>
            Gets the ith data value.
            </summary>
            <param name="i">sequence number of data to get.</param>
            <returns>ith data value.</returns>
        </member>
        <member name="T:Alt.GUI.NPlot.AdapterUtils.DataGetter_Null">
            <summary>
            Provides no data.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.AdapterUtils.DataGetter_Null.Get(System.Int32)">
            <summary>
            Gets the ith data value.
            </summary>
            <param name="i">sequence number of data to get.</param>
            <returns>ith data value.</returns>
        </member>
        <member name="T:Alt.GUI.NPlot.AdapterUtils.DataGetter_StartStep">
            <summary>
            Provides data points from a StartStep object via the IDataGetter interface.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.AdapterUtils.DataGetter_StartStep.#ctor(Alt.GUI.NPlot.StartStep)">
            <summary>
            Constructor
            </summary>
            <param name="data">StartStep to derive data from.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.AdapterUtils.DataGetter_StartStep.Get(System.Int32)">
            <summary>
            Gets the ith data value.
            </summary>
            <param name="i">sequence number of data to get.</param>
            <returns>ith data value.</returns>
        </member>
        <member name="T:Alt.GUI.NPlot.AdapterUtils.DataGetter_Count">
            <summary>
            Provides the natural numbers (and 0) via the IDataGetter interface.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.AdapterUtils.DataGetter_Count.Get(System.Int32)">
            <summary>
            Gets the ith data value.
            </summary>
            <param name="i">sequence number of data to get.</param>
            <returns>ith data value.</returns>
        </member>
        <member name="T:Alt.GUI.NPlot.AdapterUtils.DataGetter_Rows">
            <summary>
            Provides data in a DataRowCollection via the IDataGetter interface.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.AdapterUtils.DataGetter_Rows.#ctor(Alt.Data.DataRowCollection,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="rows">DataRowCollection to get data from</param>
            <param name="columnName">Get data in this column</param>
        </member>
        <member name="M:Alt.GUI.NPlot.AdapterUtils.DataGetter_Rows.Get(System.Int32)">
            <summary>
            Gets the ith data value.
            </summary>
            <param name="i">sequence number of data to get.</param>
            <returns>ith data value.</returns>
        </member>
        <member name="T:Alt.GUI.NPlot.AdapterUtils.DataGetter_DataView">
            <summary>
            Provides data in a DataView via the IDataGetter interface.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.AdapterUtils.DataGetter_DataView.#ctor(Alt.Data.DataView,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="data">DataView to get data from.</param>
            <param name="columnName">Get data in this column</param>
        </member>
        <member name="M:Alt.GUI.NPlot.AdapterUtils.DataGetter_DataView.Get(System.Int32)">
            <summary>
            Gets the ith data value.
            </summary>
            <param name="i">sequence number of data to get.</param>
            <returns>ith data value.</returns>
        </member>
        <member name="T:Alt.GUI.NPlot.AdapterUtils.DataGetter_MultiRows">
            <summary>
            Gets data 
            </summary>
            <remarks>Note: Does not implement IDataGetter... Currently this class is not used.</remarks>
        </member>
        <member name="M:Alt.GUI.NPlot.AdapterUtils.DataGetter_MultiRows.#ctor(Alt.Data.DataRowCollection,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="rows">DataRowCollection to get data from.</param>
            <param name="omitThisColumn">don't get data from this column</param>
        </member>
        <member name="M:Alt.GUI.NPlot.AdapterUtils.DataGetter_MultiRows.PointAt(System.Int32,System.Int32)">
            <summary>
            Gets data at a given index, in the given series (column number).
            </summary>
            <param name="index">index in the series to get data for</param>
            <param name="seriesIndex">series number (column number) to get data for.</param>
            <returns>the required data point.</returns>
        </member>
        <member name="P:Alt.GUI.NPlot.AdapterUtils.DataGetter_MultiRows.Count">
            <summary>
            Number of data points
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.PlotSurface2DControl">
            <summary>
            A AltGUI PlotSurface2D control.
            </summary>
            <remarks>
            Unfortunately it's not possible to derive from both Control and NPlot.PlotSurface2D.
            </remarks>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
            <remarks>Modified! :-)</remarks>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.OnKeyDown(Alt.GUI.KeyEventArgs)">
            <summary>
            the key down callback
            </summary>
            <param name="e">information pertaining to the event</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.OnKeyUp(Alt.GUI.KeyEventArgs)">
            <summary>
            The key up callback.
            </summary>
            <param name="e">information pertaining to the event</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.OnPaint(Alt.GUI.PaintEventArgs)">
            <summary>
            the paint event callback.
            </summary>
            <param name="pe">the PaintEventArgs</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.DoPaint(Alt.GUI.PaintEventArgs,System.Int32,System.Int32)">
            <summary>
            All functionality of the OnPaint method is provided by this function.
            This allows use of the all encompasing PlotSurface.
            </summary>
            <param name="pe">the PaintEventArgs from paint event.</param>
            <param name="width">width of the control</param>
            <param name="height">height of the control</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.Draw(Alt.Sketch.Graphics,Alt.Sketch.RectI)">
            <summary>
            Draws the plot surface on the supplied graphics surface [not the control surface].
            </summary>
            <param name="g">The graphics surface on which to draw</param>
            <param name="bounds">A bounding box on this surface that denotes the area on the
            surface to confine drawing to.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.drawDesignMode(Alt.Sketch.Graphics,Alt.Sketch.RectI)">
            <summary>
            Draw a lightweight representation of us for design mode.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.Clear">
            <summary>
            Clears the plot and resets to default values.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.Add(Alt.GUI.NPlot.IDrawable)">
            <summary>
            Adds a drawable object to the plot surface. If the object is an IPlot, 
            the PlotSurface2D axes will also be updated.
            </summary>
            <param name="p">The IDrawable object to add to the plot surface.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.Add(Alt.GUI.NPlot.IDrawable,Alt.GUI.NPlot.PlotSurface2D.XAxisPosition,Alt.GUI.NPlot.PlotSurface2D.YAxisPosition)">
            <summary>
            Adds a drawable object to the plot surface against the specified axes. If
            the object is an IPlot, the PlotSurface2D axes will also be updated.
            </summary>
            <param name="p">the IDrawable object to add to the plot surface</param>
            <param name="xp">the x-axis to add the plot against.</param>
            <param name="yp">the y-axis to add the plot against.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.Add(Alt.GUI.NPlot.IDrawable,System.Int32)">
            <summary>
            Adds a drawable object to the plot surface. If the object is an IPlot, 
            the PlotSurface2D axes will also be updated.
            </summary>
            <param name="p">The IDrawable object to add to the plot surface.</param>
            <param name="zOrder">The z-ordering when drawing (objects with lower numbers are drawn first)</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.Add(Alt.GUI.NPlot.IDrawable,Alt.GUI.NPlot.PlotSurface2D.XAxisPosition,Alt.GUI.NPlot.PlotSurface2D.YAxisPosition,System.Int32)">
            <summary>
            Adds a drawable object to the plot surface against the specified axes. If
            the object is an IPlot, the PlotSurface2D axes will also be updated.
            </summary>
            <param name="p">the IDrawable object to add to the plot surface</param>
            <param name="xp">the x-axis to add the plot against.</param>
            <param name="yp">the y-axis to add the plot against.</param>
            <param name="zOrder">The z-ordering when drawing (objects with lower numbers are drawn first)</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.OnMouseDown(Alt.GUI.MouseEventArgs)">
            <summary>
            Mouse down event handler.
            </summary>
            <param name="e">the event args.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.DoMouseDown(Alt.GUI.MouseEventArgs)">
            <summary>
            All functionality of the OnMouseDown function is contained here.
            This allows use of the all encompasing PlotSurface.
            </summary>
            <param name="e">The mouse event args from the window we are drawing to.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.OnMouseWheel(Alt.GUI.MouseEventArgs)">
            <summary>
            Mouse Wheel event handler.
            </summary>
            <param name="e">the event args</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.DoMouseWheel(Alt.GUI.MouseEventArgs)">
            <summary>
            All functionality of the OnMouseWheel function is containd here.
            This allows use of the all encompasing PlotSurface.
            </summary>
            <param name="e">the event args.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.DoMouseMove(Alt.GUI.MouseEventArgs,Alt.GUI.Control)">
            <summary>
            All functionality of the OnMouseMove function is contained here.
            This allows use of the all encompasing PlotSurface.
            </summary>
            <param name="e">The mouse event args from the window we are drawing to.</param>
            <param name="ctr">The control that the mouse event happened in.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.OnMouseMove(Alt.GUI.MouseEventArgs)">
            <summary>
            MouseMove event handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.OnMouseLeave(System.EventArgs)">
            <summary>
            MouseLeave event handler. It has to invalidate the control to get rid of
            any remnant of vertical and horizontal guides.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.DoMouseLeave(System.EventArgs,Alt.GUI.Control)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.DoMouseUp(Alt.GUI.MouseEventArgs,Alt.GUI.Control)">
            <summary>
            All functionality of the OnMouseUp function is contained here.
            This allows use of the all encompasing PlotSurface.
            </summary>
            <param name="e">The mouse event args from the window we are drawing to.</param>
            <param name="ctr">The control that the mouse event happened in.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.OnMouseUp(Alt.GUI.MouseEventArgs)">
            <summary>
            mouse up event handler.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.OriginalDimensions">
            <summary>
            sets axes to be those saved in the cache.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.AddAxesConstraint(Alt.GUI.NPlot.AxesConstraint)">
            <summary>
            Add an axis constraint to the plot surface. Axis constraints can
            specify relative world-pixel scalings, absolute axis positions etc.
            </summary>
            <param name="c">The axis constraint to add.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.CopyToClipboard">
            <summary>
            Coppies the chart currently shown in the control to the clipboard as an image.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.CopyDataToClipboard">
            <summary>
            Coppies data in the current plot surface view window to the clipboard
            as text.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.Remove(Alt.GUI.NPlot.IDrawable,System.Boolean)">
            <summary>
            Remove a drawable object from the plot surface.
            </summary>
            <param name="p">the drawable to remove</param>
            <param name="updateAxes">whether or not to update the axes after removing the idrawable.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.CacheAxes">
            <summary>
            Remembers the current axes - useful in interactions.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.AddInteraction(Alt.GUI.NPlot.PlotSurface2DControl.Interactions.Interaction)">
            <summary>
            Adds and interaction to the plotsurface that adds functionality that responds 
            to a set of mouse / keyboard events. 
            </summary>
            <param name="i">the interaction to add.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.RemoveInteraction(Alt.GUI.NPlot.PlotSurface2DControl.Interactions.Interaction)">
            <summary>
            Remove a previously added interaction
            </summary>
            <param name="i">interaction to remove</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.OnInteractionOccured(System.Object)">
            <summary>
            Default function called when plotsurface modifying interaction occured. 
            
            Override this, or add method to InteractionOccured event.
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.OnPreRefresh(System.Object)">
            <summary>
            Default function called just before a refresh happens.
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DControl.ShowCoordinates">
            <summary>
            Flag to display a coordinates in a tooltip.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DControl.Legend">
            <summary>
            Gets or Sets the legend to use with this plot surface.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DControl.LegendZOrder">
            <summary>
            Gets or Sets the legend z-order.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DControl.AutoScaleTitle">
            <summary>
            Whether or not the title will be scaled according to size of the plot 
            surface.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DControl.AutoScaleAutoGeneratedAxes">
            <summary>
            When plots are added to the plot surface, the axes they are attached to
            are immediately modified to reflect data of the plot. If 
            AutoScaleAutoGeneratedAxes is true when a plot is added, the axes will
            be turned in to auto scaling ones if they are not already [tick marks,
            tick text and label size scaled to size of plot surface]. If false,
            axes will not be autoscaling.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DControl.Title">
            <summary>
            The plot surface title.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DControl.TitleFont">
            <summary>
            The font used to draw the title.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DControl.SurfacePadding">
            <summary>
            Padding of this width will be left between what is drawn and the control border.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DControl.XAxis1">
            <summary>
            The first abscissa axis.
            </summary>
            
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DControl.YAxis1">
            <summary>
            The first ordinate axis.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DControl.XAxis2">
            <summary>
            The second abscissa axis.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DControl.YAxis2">
            <summary>
            The second ordinate axis.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DControl.PhysicalXAxis1Cache">
            <summary>
            The physical XAxis1 that was last drawn.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DControl.PhysicalYAxis1Cache">
            <summary>
            The physical YAxis1 that was last drawn.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DControl.PhysicalXAxis2Cache">
            <summary>
            The physical XAxis2 that was last drawn.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DControl.PhysicalYAxis2Cache">
            <summary>
            The physical YAxis2 that was last drawn.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DControl.PlotBackColor">
            <summary>
            A color used to paint the plot background. Mutually exclusive with PlotBackImage and PlotBackBrush
            </summary>
            <remarks>not browsable or bindable because only set method.</remarks>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DControl.PlotBackImage">
            <summary>
            An imaged used to paint the plot background. Mutually exclusive with PlotBackColor and PlotBackBrush
            </summary>
            <remarks>not browsable or bindable because only set method.</remarks>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DControl.PlotBackBrush">
            <summary>
            A RectI brush used to paint the plot background. Mutually exclusive with PlotBackColor and PlotBackBrush
            </summary>
            <remarks>not browsable or bindable because only set method.</remarks>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DControl.TitleColor">
            <summary>
            Sets the title to be drawn using a solid brush of this color.
            </summary>
            <remarks>not browsable or bindable because only set method.</remarks>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DControl.TitleBrush">
            <summary>
            The brush used for drawing the title.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DControl.SmoothingMode">
            <summary>
            Set smoothing mode for drawing plot objects.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DControl.DateTimeToolTip">
            <summary>
            When true, tool tip will display x value as a DateTime. Quick hack - this will probably be 
            changed at some point.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DControl.Drawables">
            <summary>
            Gets an array list containing all drawables currently added to the PlotSurface2D.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DControl.RightMenu">
            <summary>
            Sets the right context menu. Custom menus can be designed by overriding
            NPlot.Windows.PlotSurface2D.ContextMenu.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DControl.DefaultContextMenu">
            <summary>
            Gets an instance of a NPlot.Windows.PlotSurface2D.ContextMenu that
            is useful in typical situations.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DControl.Inner">
            <summary>
            Allows access to the PlotSurface2D.
            </summary>
        </member>
        <member name="E:Alt.GUI.NPlot.PlotSurface2DControl.InteractionOccured">
            <summary>
            Event is fired when an interaction happens with the plot that causes it to be modified.
            </summary>
        </member>
        <member name="E:Alt.GUI.NPlot.PlotSurface2DControl.PreRefresh">
            <summary>
            Event fired when we are about to paint.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.PlotSurface2DControl.Interactions">
            <summary>
            Encapsulates a number of separate "Interactions". An interaction is basically 
            a set of handlers for mouse and keyboard events that work together in a 
            specific way. 
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.Interaction">
            <summary>
            Base class for an interaction. All methods are virtual. Not abstract as not all interactions
            need to use all methods. Default functionality for each method is to do nothing. 
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.Interaction.DoMouseDown(Alt.GUI.MouseEventArgs,Alt.GUI.Control)">
            <summary>
            Handler for this interaction if a mouse down event is received.
            </summary>
            <param name="e">event args</param>
            <param name="ctr">reference to the control</param>
            <returns>true if plot surface needs refreshing.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.Interaction.DoMouseUp(Alt.GUI.MouseEventArgs,Alt.GUI.Control)">
            <summary>
            Handler for this interaction if a mouse up event is received.
            </summary>
            <param name="e">event args</param>
            <param name="ctr">reference to the control</param>
            <returns>true if plot surface needs refreshing.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.Interaction.DoMouseMove(Alt.GUI.MouseEventArgs,Alt.GUI.Control,Alt.GUI.KeyEventArgs)">
            <summary>
            Handler for this interaction if a mouse move event is received.
            </summary>
            <param name="e">event args</param>
            <param name="ctr">reference to the control</param>
            <param name="lastKeyEventArgs"></param>
            <returns>true if plot surface needs refreshing.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.Interaction.DoMouseWheel(Alt.GUI.MouseEventArgs,Alt.GUI.Control)">
            <summary>
            Handler for this interaction if a mouse move event is received.
            </summary>
            <param name="e">event args</param>
            <param name="ctr">reference to the control</param>
            <returns>true if plot surface needs refreshing.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.Interaction.DoMouseLeave(System.EventArgs,Alt.GUI.Control)">
            <summary>
            Handler for this interaction if a mouse Leave event is received.
            </summary>
            <param name="e">event args</param>
            <param name="ctr">reference to the control</param>
            <returns>true if the plot surface needs refreshing.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.Interaction.DoPaint(Alt.GUI.PaintEventArgs,System.Int32,System.Int32)">
            <summary>
            Handler for this interaction if a paint event is received.
            </summary>
            <param name="pe">paint event args</param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="T:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.RubberBandSelection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.RubberBandSelection.DoMouseDown(Alt.GUI.MouseEventArgs,Alt.GUI.Control)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.RubberBandSelection.DoMouseMove(Alt.GUI.MouseEventArgs,Alt.GUI.Control,Alt.GUI.KeyEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
            <param name="lastKeyEventArgs"></param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.RubberBandSelection.DoMouseUp(Alt.GUI.MouseEventArgs,Alt.GUI.Control)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.RubberBandSelection.DrawRubberBand(Alt.Sketch.Point,Alt.Sketch.Point,Alt.GUI.Control)">
            <summary>
            Draws a rectangle representing selection area. 
            </summary>
            <param name="start">a corner of the rectangle.</param>
            <param name="end">a corner of the rectangle diagonally opposite the first.</param>
            <param name="ctr">The control to draw to - this may not be us, if we have
            been contained by a PlotSurface.</param>
        </member>
        <member name="T:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.HorizontalGuideline">
            <summary>
            Horizontal line interaction
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.HorizontalGuideline.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.HorizontalGuideline.#ctor(Alt.Sketch.Color)">
            <summary>
            Constructor
            </summary>
            <param name="lineColor"></param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.HorizontalGuideline.DoPaint(Alt.GUI.PaintEventArgs,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="pe"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.HorizontalGuideline.DoMouseMove(Alt.GUI.MouseEventArgs,Alt.GUI.Control,Alt.GUI.KeyEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
            <param name="lastKeyEventArgs"></param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.HorizontalGuideline.DoMouseLeave(System.EventArgs,Alt.GUI.Control)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
            <returns></returns>
        </member>
        <member name="T:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.VerticalGuideline">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.VerticalGuideline.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.VerticalGuideline.#ctor(Alt.Sketch.Color)">
            <summary>
            
            </summary>
            <param name="lineColor"></param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.VerticalGuideline.DoPaint(Alt.GUI.PaintEventArgs,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="pe"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.VerticalGuideline.DoMouseMove(Alt.GUI.MouseEventArgs,Alt.GUI.Control,Alt.GUI.KeyEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
            <param name="lastKeyEventArgs"></param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.VerticalGuideline.DoMouseLeave(System.EventArgs,Alt.GUI.Control)">
            <summary>
            Handler for mouse leave event
            </summary>
            <param name="e">event args</param>
            <param name="ctr"></param>
            <returns></returns>
        </member>
        <member name="T:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.HorizontalDrag">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.HorizontalDrag.DoMouseDown(Alt.GUI.MouseEventArgs,Alt.GUI.Control)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.HorizontalDrag.DoMouseMove(Alt.GUI.MouseEventArgs,Alt.GUI.Control,Alt.GUI.KeyEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
            <param name="lastKeyEventArgs"></param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.HorizontalDrag.DoMouseUp(Alt.GUI.MouseEventArgs,Alt.GUI.Control)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
        </member>
        <member name="T:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.VerticalDrag">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.VerticalDrag.DoMouseDown(Alt.GUI.MouseEventArgs,Alt.GUI.Control)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.VerticalDrag.DoMouseMove(Alt.GUI.MouseEventArgs,Alt.GUI.Control,Alt.GUI.KeyEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
            <param name="lastKeyEventArgs"></param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.VerticalDrag.DoMouseUp(Alt.GUI.MouseEventArgs,Alt.GUI.Control)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
        </member>
        <member name="T:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.HorizontalRangeSelection">
            <summary>
            This plot intraction allows the user to select horizontal regions.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.HorizontalRangeSelection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.HorizontalRangeSelection.#ctor(System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="smallestAllowedRange">the smallest distance between the selected xmin and xmax for the selection to be performed.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.HorizontalRangeSelection.DoMouseDown(Alt.GUI.MouseEventArgs,Alt.GUI.Control)">
            <summary>
            Handler for mouse down event for this interaction
            </summary>
            <param name="e">the mouse event args</param>
            <param name="ctr">the plot surface this event applies to</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.HorizontalRangeSelection.DoMouseMove(Alt.GUI.MouseEventArgs,Alt.GUI.Control,Alt.GUI.KeyEventArgs)">
            <summary>
            Handler for mouse move event for this interaction
            </summary>
            <param name="e">the mouse event args</param>
            <param name="ctr">the plot surface this event applies to</param>
            <param name="lastKeyEventArgs"></param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.HorizontalRangeSelection.DoMouseUp(Alt.GUI.MouseEventArgs,Alt.GUI.Control)">
            <summary>
            Handler for mouse up event for this interaction
            </summary>
            <param name="e">the mouse event args</param>
            <param name="ctr">the plot surface this event applies to</param>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.HorizontalRangeSelection.MinimumPixelDistanceForSelect">
            <summary>
            The minimum width of the selected region (in pixels) for the interaction to zoom.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.HorizontalRangeSelection.SmallestAllowedRange">
            <summary>
            The smallest range (distance between world min and world max) selectable.
            If a smaller region is selected, the selection will do nothing.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.AxisDrag">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.AxisDrag.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="enableDragWithCtr"></param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.AxisDrag.DoMouseDown(Alt.GUI.MouseEventArgs,Alt.GUI.Control)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.AxisDrag.DoMouseMove(Alt.GUI.MouseEventArgs,Alt.GUI.Control,Alt.GUI.KeyEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
            <param name="lastKeyEventArgs"></param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.AxisDrag.DoMouseUp(Alt.GUI.MouseEventArgs,Alt.GUI.Control)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.AxisDrag.Sensitivity">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="T:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.MouseWheelZoom">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.MouseWheelZoom.DoMouseUp(Alt.GUI.MouseEventArgs,Alt.GUI.Control)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.MouseWheelZoom.DoMouseDown(Alt.GUI.MouseEventArgs,Alt.GUI.Control)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.MouseWheelZoom.DoMouseWheel(Alt.GUI.MouseEventArgs,Alt.GUI.Control)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="ctr"></param>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DControl.Interactions.MouseWheelZoom.Sensitivity">
            <summary>
            Number of screen pixels equivalent to one wheel step.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.PlotSurface2DControl.InteractionHandler">
            <summary>
            This is the signature of the function used for InteractionOccurred events.
            
            TODO: expand this to include information about the event. 
            </summary>
            <param name="sender"></param>
        </member>
        <member name="T:Alt.GUI.NPlot.PlotSurface2DControl.PreRefreshHandler">
            <summary>
            This is the signature of the function used for PreRefresh events.
            </summary>
            <param name="sender"></param>
        </member>
        <member name="T:Alt.GUI.NPlot.PlotSurface2DControl.PlotContextMenu">
            <summary>
            Summary description for ContextMenu.
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.PlotSurface2DControl.PlotContextMenu.plotSurface2D_">
            <summary>
            The PlotSurface2D associated with the context menu. Classes inherited
            from PlotContextMenu will likely use this to implement their functionality.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.PlotContextMenu.SetMenuItems(Alt.Collections.ArrayList)">
            <summary>
            Sets the context menu according to the IPlotMenuItem's in the provided
            ArrayList. The current menu items can be obtained using the MenuItems
            property and extended if desired.
            </summary>
            <param name="menuItems"></param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.PlotContextMenu.#ctor">
            <summary>
            Constructor creates
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DControl.PlotContextMenu.MenuItems">
            <summary>
            Gets an arraylist of all PlotMenuItems that comprise the
            menu. If this list is changed, this class must be told to
            update using the Update method.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DControl.PlotContextMenu.PlotSurface2D">
            <summary>
            The PlotSurface2D associated with the context menu. Generally, the user
            should not set this. It is used internally by PlotSurface2D.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DControl.PlotContextMenu.Menu">
            <summary>
            Gets the Windows.Forms context menu managed by this object.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.PlotSurface2DControl.PlotContextMenu.IPlotMenuItem">
            <summary>
            elements of the MenuItems array list must implement this interface.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.PlotContextMenu.IPlotMenuItem.OnPopup(Alt.GUI.NPlot.PlotSurface2DControl.PlotContextMenu)">
            <summary>
            This method is called for each menu item before the menu is 
            displayed. It is useful for implementing check marks, disabling
            etc.
            </summary>
            <param name="plotContextMenu"></param>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DControl.PlotContextMenu.IPlotMenuItem.MenuItem">
            <summary>
            Gets the Windows.Forms.MenuItem associated with the PlotMenuItem
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.PlotSurface2DControl.PlotContextMenu.PlotMenuSeparator">
            <summary>
            A plot menu item for separators.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.PlotContextMenu.PlotMenuSeparator.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.PlotContextMenu.PlotMenuSeparator.OnPopup(Alt.GUI.NPlot.PlotSurface2DControl.PlotContextMenu)">
            <summary>
            
            </summary>
            <param name="plotContextMenu"></param>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DControl.PlotContextMenu.PlotMenuSeparator.Index">
            <summary>
            Index of this menu item in the menu.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DControl.PlotContextMenu.PlotMenuSeparator.MenuItem">
            <summary>
            The Windows.Forms.MenuItem associated with this IPlotMenuItem
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.PlotSurface2DControl.PlotContextMenu.PlotMenuItem">
            <summary>
            A Plot menu item suitable for specifying basic menu items
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.PlotContextMenu.PlotMenuItem.#ctor(System.String,System.Int32,System.EventHandler)">
            <summary>
            Constructor
            </summary>
            <param name="text">Menu item text</param>
            <param name="index">Index in the manu</param>
            <param name="callback">EventHandler to call if menu selected.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.PlotContextMenu.PlotMenuItem.OnPopup(Alt.GUI.NPlot.PlotSurface2DControl.PlotContextMenu)">
            <summary>
            Called before menu drawn.
            </summary>
            <param name="plotContextMenu">The plot menu this item is a member of.</param>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DControl.PlotContextMenu.PlotMenuItem.Text">
            <summary>
            The text to put in the menu for this menu item.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DControl.PlotContextMenu.PlotMenuItem.Index">
            <summary>
            Index of this menu item in the menu.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DControl.PlotContextMenu.PlotMenuItem.Callback">
            <summary>
            EventHandler to call if menu selected.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DControl.PlotContextMenu.PlotMenuItem.MenuItem">
            <summary>
            The Windows.Forms.MenuItem associated with this IPlotMenuItem
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.PlotSurface2DControl.PlotContextMenu.PlotZoomBackMenuItem">
            <summary>
            A Plot Menu Item that provides necessary functionality for the
            zoom back menu item (graying out if zoomed right out in addition
            to basic functionality).
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.PlotContextMenu.PlotZoomBackMenuItem.#ctor(System.String,System.Int32,System.EventHandler)">
            <summary>
            Constructor
            </summary>
            <param name="text">Text associated with this item in the menu.</param>
            <param name="index">Index of this item in the menu.</param>
            <param name="callback">EventHandler to call when menu item is selected.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.PlotContextMenu.PlotZoomBackMenuItem.OnPopup(Alt.GUI.NPlot.PlotSurface2DControl.PlotContextMenu)">
            <summary>
            Called before menu drawn.
            </summary>
            <param name="plotContextMenu">The plot menu this item is a member of.</param>
        </member>
        <member name="T:Alt.GUI.NPlot.PlotSurface2DControl.PlotContextMenu.PlotShowCoordinatesMenuItem">
            <summary>
            A Plot Menu Item that provides necessary functionality for the
            show coordinates menu item (tick mark toggle in addition to basic
            functionality).
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.PlotContextMenu.PlotShowCoordinatesMenuItem.#ctor(System.String,System.Int32,System.EventHandler)">
            <summary>
            Constructor
            </summary>
            <param name="text">Text associated with this item in the menu.</param>
            <param name="index">Index of this item in the menu.</param>
            <param name="callback">EventHandler to call when menu item is selected.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DControl.PlotContextMenu.PlotShowCoordinatesMenuItem.OnPopup(Alt.GUI.NPlot.PlotSurface2DControl.PlotContextMenu)">
            <summary>
            Called before menu drawn.
            </summary>
            <param name="plotContextMenu">The plot menu this item is a member of.</param>
        </member>
        <member name="T:Alt.GUI.NPlot.ArrowItem">
            <summary>
            An Arrow IDrawable, with a text label that is automatically
            nicely positioned at the non-pointy end of the arrow. Future
            feature idea: have constructor that takes a dataset, and have
            the arrow know how to automatically set it's angle to avoid 
            the data.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.IDrawable">
            <summary>
            Defines a Draw method for drawing objects against an x and y
            Physical Axis.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.IDrawable.Draw(Alt.Sketch.Graphics,Alt.GUI.NPlot.PhysicalAxis,Alt.GUI.NPlot.PhysicalAxis)">
            <summary>
            Draws this object against an x and y PhysicalAxis.
            </summary>
            <param name="g">The graphics surface on which to draw.</param>
            <param name="xAxis">The physical x-axis to draw against.</param>
            <param name="yAxis">The physical y-axis to draw against.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.ArrowItem.#ctor(Alt.GUI.NPlot.PointD)">
            <summary>
            Default constructor : 
            text = ""
            angle = 45 degrees anticlockwise from horizontal.
            </summary>
            <param name="position">The position the arrow points to.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.ArrowItem.#ctor(Alt.GUI.NPlot.PointD,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="position">The position the arrow points to.</param>
            <param name="angle">angle of arrow with respect to x axis.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.ArrowItem.#ctor(Alt.GUI.NPlot.PointD,System.Double,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="position">The position the arrow points to.</param>
            <param name="angle">angle of arrow with respect to x axis.</param>
            <param name="text">The text associated with the arrow.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.ArrowItem.Draw(Alt.Sketch.Graphics,Alt.GUI.NPlot.PhysicalAxis,Alt.GUI.NPlot.PhysicalAxis)">
            <summary>
            Draws the arrow on a plot surface.
            </summary>
            <param name="g">graphics surface on which to draw</param>
            <param name="xAxis">The X-Axis to draw against.</param>
            <param name="yAxis">The Y-Axis to draw against.</param>
        </member>
        <member name="P:Alt.GUI.NPlot.ArrowItem.Text">
            <summary>
            Text associated with the arrow.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.ArrowItem.Angle">
            <summary>
            Angle of arrow anti-clockwise to right horizontal in degrees.
            </summary>
            <remarks>The code relating to this property in the Draw method is
            a bit weird. Internally, all rotations are clockwise [this is by 
            accient, I wasn't concentrating when I was doing it and was half
            done before I realised]. The simplest way to make angle represent
            anti-clockwise rotation (as it is normal to do) is to make the 
            get and set methods negate the provided value.</remarks>
        </member>
        <member name="P:Alt.GUI.NPlot.ArrowItem.PhysicalLength">
            <summary>
            Physical length of the arrow. 
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.ArrowItem.To">
            <summary>
            The point the arrow points to.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.ArrowItem.HeadSize">
            <summary>
            Size of the arrow head sides in pixels.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.ArrowItem.HeadAngle">
            <summary>
            angle between sides of arrow head in degrees
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.ArrowItem.TextBrush">
            <summary>
            The brush used to draw the text associated with the arrow.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.ArrowItem.TextColor">
            <summary>
            Set the text to be drawn with a solid brush of this color.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.ArrowItem.ArrowColor">
            <summary>
            The color of the pen used to draw the arrow.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.ArrowItem.TextFont">
            <summary>
            The font used to draw the text associated with the arrow.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.ArrowItem.HeadOffset">
            <summary>
            Offset the whole arrow back in the arrow direction this many pixels from the point it's pointing to.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.AxesConstraint">
            <summary>
            Classes derived from this abstract base class define and can apply 
            some form of constraint to the positioning and length of one or more
            of the four axes of a PlotSurface2D.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.AxesConstraint.ApplyConstraint(Alt.GUI.NPlot.PhysicalAxis,Alt.GUI.NPlot.PhysicalAxis,Alt.GUI.NPlot.PhysicalAxis,Alt.GUI.NPlot.PhysicalAxis)">
            <summary>
            Applies the constraint to the axes. Must be overriden.
            </summary>
            <param name="pXAxis1">The bottom x-axis.</param>
            <param name="pYAxis1">The left y-axis.</param>
            <param name="pXAxis2">The top x-axis.</param>
            <param name="pYAxis2">The right y-axis.</param>
        </member>
        <member name="T:Alt.GUI.NPlot.AxesConstraint.XPixelWorldLength">
            <summary>
            Defines an AxisConstraint that forces the world length corresponding
            to one pixel on the bottom x-axis to be a certain value. 
            
            TODO: Allow the pixel world length to be set for the top axis.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.AxesConstraint.XPixelWorldLength.#ctor(System.Double)">
            <summary>
            Constructor, which defines the world pixel length only. Both 
            y-axes will be moved by equal amounts in order to force this
            constraint.
            </summary>
            <param name="p">The world pixel length</param>
        </member>
        <member name="M:Alt.GUI.NPlot.AxesConstraint.XPixelWorldLength.#ctor(System.Double,Alt.GUI.NPlot.PlotSurface2D.YAxisPosition)">
            <summary>
            Constructor, which defines the world pixel length together with
            the y-axis that should be held constant when forcing this 
            constraint [the other y-axis only will be moved].
            </summary>
            <param name="p">The world pixel length</param>
            <param name="holdFixedY">The position of this y-axis will be 
            held constant. The other y-axis will be moved in order to 
            force the constraint.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.AxesConstraint.XPixelWorldLength.ApplyConstraint(Alt.GUI.NPlot.PhysicalAxis,Alt.GUI.NPlot.PhysicalAxis,Alt.GUI.NPlot.PhysicalAxis,Alt.GUI.NPlot.PhysicalAxis)">
            <summary>
            Applies the constraint to the axes.
            </summary>
            <param name="pXAxis1">The bottom x-axis.</param>
            <param name="pYAxis1">The left y-axis.</param>
            <param name="pXAxis2">The top x-axis.</param>
            <param name="pYAxis2">The right y-axis.</param>
        </member>
        <member name="T:Alt.GUI.NPlot.AxesConstraint.YPixelWorldLength">
            <summary>
            Defines an AxisConstraint that forces the world length corresponding
            to one pixel on the left y-axis to be a certain value. 
            
            TODO: Allow the pixel world length to be set for the right axis.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.AxesConstraint.YPixelWorldLength.#ctor(System.Double)">
            <summary>
            Constructor, which defines the world pixel length only. Both 
            x-axes will be moved by equal amounts in order to force this
            constraint.
            </summary>
            <param name="p">The world pixel length</param>
        </member>
        <member name="M:Alt.GUI.NPlot.AxesConstraint.YPixelWorldLength.#ctor(System.Double,Alt.GUI.NPlot.PlotSurface2D.XAxisPosition)">
            <summary>
            Constructor, which defines the world pixel length together with
            the x-axis that should be held constant when forcing this 
            constraint [the other x-axis only will be moved].
            </summary>
            <param name="p">The world pixel length</param>
            <param name="holdFixedX">The position of this x-axis will be held constant. The other x-axis will be moved in order to force the constraint.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.AxesConstraint.YPixelWorldLength.ApplyConstraint(Alt.GUI.NPlot.PhysicalAxis,Alt.GUI.NPlot.PhysicalAxis,Alt.GUI.NPlot.PhysicalAxis,Alt.GUI.NPlot.PhysicalAxis)">
            <summary>
            Applies the constraint to the axes.
            </summary>
            <param name="pXAxis1">The bottom x-axis.</param>
            <param name="pYAxis1">The left y-axis.</param>
            <param name="pXAxis2">The top x-axis.</param>
            <param name="pYAxis2">The right y-axis.</param>
        </member>
        <member name="T:Alt.GUI.NPlot.AxesConstraint.AxisPosition">
            <summary>
            Defines an AxisConstraint that forces the specified axis to be placed at a 
            specific physical position. The position of the axis opposite is held 
            constant.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.AxesConstraint.AxisPosition.#ctor(Alt.GUI.NPlot.PlotSurface2D.XAxisPosition,System.Int32)">
            <summary>
            Constructor, which defines an horizontal axis and the physical
            y position it should be drawn at.
            </summary>
            <param name="axis">The x-axis for which the y position is to be specified.</param>
            <param name="yPosition">The [physical] y position of the axis.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.AxesConstraint.AxisPosition.#ctor(Alt.GUI.NPlot.PlotSurface2D.YAxisPosition,System.Int32)">
            <summary>
            Constructor, which defines a vertical axis and the physical
            x position it should be drawn at.
            </summary>
            <param name="axis">The y-axis for which the x position is to be specified.</param>
            <param name="xPosition">The [physical] x position of the axis.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.AxesConstraint.AxisPosition.ApplyConstraint(Alt.GUI.NPlot.PhysicalAxis,Alt.GUI.NPlot.PhysicalAxis,Alt.GUI.NPlot.PhysicalAxis,Alt.GUI.NPlot.PhysicalAxis)">
            <summary>
            Applies the constraint to the axes.
            </summary>
            <param name="pXAxis1">The bottom x-axis.</param>
            <param name="pYAxis1">The left y-axis.</param>
            <param name="pXAxis2">The top x-axis.</param>
            <param name="pYAxis2">The right y-axis.</param>
        </member>
        <member name="T:Alt.GUI.NPlot.AxesConstraint.AspectRatio">
            <summary>
            Defines an axes constraint that forces the world width and height pixel lengths
            to be at the provided ratio. For example, an aspect ratio of 3:2 or
            1.5 indicates that there should be 1.5 times as many pixels per fixed
            world length along the x direction than for the same world length along
            the y direction. In other words, the world length of one pixel along 
            the x direction is 2/3rds that of the world length of one pixel height
            in the y direction.
            </summary>
            <remarks>
            This class will never increase the size of the plot bounding box. It 
            will always be made smaller.
            </remarks>
        </member>
        <member name="M:Alt.GUI.NPlot.AxesConstraint.AspectRatio.#ctor(System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="a">Aspect Ratio</param>
        </member>
        <member name="M:Alt.GUI.NPlot.AxesConstraint.AspectRatio.#ctor(System.Double,Alt.GUI.NPlot.PlotSurface2D.XAxisPosition)">
            <summary>
            Constructor
            </summary>
            <param name="a">Aspect Ratio</param>
            <param name="holdFixedX">
            When adjusting the position of axes, the specified axis will never
            be moved.
            </param>
        </member>
        <member name="M:Alt.GUI.NPlot.AxesConstraint.AspectRatio.#ctor(System.Double,Alt.GUI.NPlot.PlotSurface2D.YAxisPosition)">
            <summary>
            Constructor
            </summary>
            <param name="a">Aspect Ratio</param>
            <param name="holdFixedY">
            When adjusting the position of axes, the 
            specified axis will never be moved.
            </param>
        </member>
        <member name="M:Alt.GUI.NPlot.AxesConstraint.AspectRatio.#ctor(System.Double,Alt.GUI.NPlot.PlotSurface2D.XAxisPosition,Alt.GUI.NPlot.PlotSurface2D.YAxisPosition)">
            <summary>
            Constructor
            </summary>
            <param name="a">Aspect Ratio</param>
            <param name="holdFixedX">When adjusting the position of axes, the specified axis will never be moved.</param>
            <param name="holdFixedY">When adjusting the position of axes, the specified axis will never be moved.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.AxesConstraint.AspectRatio.ApplyConstraint(Alt.GUI.NPlot.PhysicalAxis,Alt.GUI.NPlot.PhysicalAxis,Alt.GUI.NPlot.PhysicalAxis,Alt.GUI.NPlot.PhysicalAxis)">
            <summary>
            Applies the constraint to the axes.
            </summary>
            <param name="pXAxis1">The bottom x-axis.</param>
            <param name="pYAxis1">The left y-axis.</param>
            <param name="pXAxis2">The top x-axis.</param>
            <param name="pYAxis2">The right y-axis.</param>
        </member>
        <member name="T:Alt.GUI.NPlot.Axis">
            <summary>
            Encapsulates functionality common to all axis classes. All specific
            axis classes derive from Axis. Axis can be used as a concrete class
            itself - it is an Axis without any embilishments [tick marks or tick
            mark labels].<br></br><br></br>
            This class encapsulates no physical information about where the axes
            are drawn. 
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.Axis.Clone">
            <summary>
            Deep copy of Axis.
            </summary>
            <remarks>
            This method includes a check that guards against derived classes forgetting
            to implement their own Clone method. If Clone is called on a object derived
            from Axis, and the Clone method hasn't been overridden by that object, then
            the test this.GetType == typeof(Axis) will fail.
            </remarks>
            <returns>A copy of the Axis Class</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.Axis.DoClone(Alt.GUI.NPlot.Axis,Alt.GUI.NPlot.Axis)">
            <summary>
            Helper method for Clone. Does all the copying - can be called by derived
            types so they don't need to implement this part of the copying themselves.
            also useful in constructor of derived types that takes Axis class.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.Axis.Init">
            <summary>
            Helper function for constructors.
            Do initialization here so that Clear() method is handled properly
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.Axis.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.Axis.#ctor(System.Double,System.Double)">
            <summary>
            Constructor that takes only world min and max values.
            </summary>
            <param name="worldMin">The minimum world coordinate.</param>
            <param name="worldMax">The maximum world coordinate.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.Axis.#ctor(Alt.GUI.NPlot.Axis)">
            <summary>
            Copy constructor.
            </summary>
            <param name="a">The Axis to clone.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.Axis.OutOfRange(System.Double)">
            <summary>
            Determines whether a world value is outside range WorldMin -> WorldMax
            </summary>
            <param name="coord">the world value to test</param>
            <returns>true if outside limits, false otherwise</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.Axis.LUB(Alt.GUI.NPlot.Axis)">
            <summary>
            Sets the world extent of the current axis to be just large enough
            to encompas the current world extent of the axis, and the world
            extent of the passed in axis
            </summary>
            <param name="a">The other Axis instance.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.Axis.WorldToPhysical(System.Double,Alt.Sketch.Point,Alt.Sketch.Point,System.Boolean)">
            <summary>
            World to physical coordinate transform.
            </summary>
            <param name="coord">The coordinate value to transform.</param>
            <param name="physicalMin">The physical position corresponding to the world minimum of the axis.</param>
            <param name="physicalMax">The physical position corresponding to the world maximum of the axis.</param>
            <param name="clip">if false, then physical value may extend outside worldMin / worldMax. If true, the physical value returned will be clipped to physicalMin or physicalMax if it lies outside this range.</param>
            <returns>The transformed coordinates.</returns>
            <remarks>Not sure how much time is spent in this often called function. If it's lots, then
            worth optimizing (there is scope to do so).</remarks>
        </member>
        <member name="M:Alt.GUI.NPlot.Axis.PhysicalToWorld(Alt.Sketch.Point,Alt.Sketch.Point,Alt.Sketch.Point,System.Boolean)">
            <summary>
            Return the world coordinate of the projection of the point p onto
            the axis.
            </summary>
            <param name="p">The point to project onto the axis</param>
            <param name="physicalMin">The physical position corresponding to the world minimum of the axis.</param>
            <param name="physicalMax">The physical position corresponding to the world maximum of the axis.</param>
            <param name="clip">If true, the world value will be clipped to WorldMin or WorldMax as appropriate if it lies outside this range.</param>
            <returns>The world value corresponding to the projection of the point p onto the axis.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.Axis.DrawLabel(Alt.Sketch.Graphics,Alt.Sketch.PointI,Alt.Sketch.PointI,Alt.Sketch.PointI)">
            <summary>
            Draw the Axis Label
            </summary>
            <param name="g">The GDI+ drawing surface on which to draw.</param>
            <param name="offset">offset from axis. Should be calculated so as to make sure axis label misses tick labels.</param>
            <param name="axisPhysicalMin">The physical position corresponding to the world minimum of the axis.</param>
            <param name="axisPhysicalMax">The physical position corresponding to the world maximum of the axis.</param>
            <returns>boxed Rectangle indicating bounding box of label. null if no label printed.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.Axis.DrawTick(Alt.Sketch.Graphics,System.Double,System.Single,System.String,Alt.Sketch.PointI,Alt.Sketch.PointI,Alt.Sketch.PointI,Alt.Sketch.PointI@,Alt.Sketch.RectI@)">
            <summary>
            Draw a tick on the axis.
            </summary>
            <param name="g">The graphics surface on which to draw.</param>
            <param name="w">The tick position in world coordinates.</param>
            <param name="size">The size of the tick (in pixels)</param>
            <param name="text">The text associated with the tick</param>
            <param name="textOffset">The Offset to draw from the auto calculated position</param>
            <param name="axisPhysMin">The minimum physical extent of the axis</param>
            <param name="axisPhysMax">The maximum physical extent of the axis</param>
            <param name="boundingBox">out: The bounding rectangle for the tick and tickLabel drawn</param>
            <param name="labelOffset">out: offset from the axies required for axis label</param>
        </member>
        <member name="M:Alt.GUI.NPlot.Axis.Draw(Alt.Sketch.Graphics,Alt.Sketch.PointI,Alt.Sketch.PointI,Alt.Sketch.RectI@)">
            <summary>
            Draw the axis. This involves three steps:
             (1) Draw the axis line.
             (2) Draw the tick marks.
             (3) Draw the label.
            </summary>
            <param name="g">The drawing surface on which to draw.</param>
            <param name="physicalMin">The physical position corresponding to the world minimum of the axis.</param>
            <param name="physicalMax">The physical position corresponding to the world maximum of the axis.</param>
            <param name="boundingBox">out The bounding rectangle of the axis including axis line, label, tick marks and tick mark labels</param>
        </member>
        <member name="M:Alt.GUI.NPlot.Axis.UpdateOffsetAndBounds(System.Object@,System.Object@,Alt.Sketch.PointI,Alt.Sketch.RectI)">
            <summary>
            Update the bounding box and label offset associated with an axis
            to encompass the additionally specified mergeBoundingBox and 
            mergeLabelOffset respectively.
            </summary>
            <param name="labelOffset">Current axis label offset.</param>
            <param name="boundingBox">Current axis bounding box.</param>
            <param name="mergeLabelOffset">the label offset to merge. The current label offset will be replaced by this if it's norm is larger.</param>
            <param name="mergeBoundingBox">the bounding box to merge. The current bounding box will be replaced by this if null, or by the least upper bound of bother bounding boxes otherwise.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.Axis.DrawTicks(Alt.Sketch.Graphics,Alt.Sketch.PointI,Alt.Sketch.PointI,System.Object@,System.Object@)">
            <summary>
            DrawTicks method. In base axis class this does nothing.
            </summary>
            <param name="g">The graphics surface on which to draw</param>
            <param name="physicalMin">The physical position corresponding to the world minimum of the axis.</param>
            <param name="physicalMax">The physical position corresponding to the world maximum of the axis.</param>
            <param name="labelOffset">is set to a suitable offset from the axis to draw the axis label. In this base method, set to null.</param>
            <param name="boundingBox">is set to the smallest box that bounds the ticks and the tick text. In this base method, set to null.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.Axis.WorldTickPositions_FirstPass(Alt.Sketch.PointI,Alt.Sketch.PointI,Alt.Collections.ArrayList@,Alt.Collections.ArrayList@)">
            <summary>
            Determines the positions, in world coordinates, of the large ticks. 
            When the physical extent of the axis is small, some of the positions 
            that were generated in this pass may be converted to small tick 
            positions and returned as well.
            
            This default implementation returns empty large ticks list and null
            small tick list.
            </summary>
            <param name="physicalMin">The physical position corresponding to the world minimum of the axis.</param>
            <param name="physicalMax">The physical position corresponding to the world maximum of the axis.</param>
            <param name="largeTickPositions">ArrayList containing the positions of the large ticks.</param>
            <param name="smallTickPositions">ArrayList containing the positions of the small ticks if calculated, null otherwise.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.Axis.WorldTickPositions_SecondPass(Alt.Sketch.PointI,Alt.Sketch.PointI,Alt.Collections.ArrayList,Alt.Collections.ArrayList@)">
            <summary>
            Determines the positions, in world coordinates, of the small ticks
            if they have not already been generated.
            
            This default implementation creates an empty smallTickPositions list 
            if it doesn't already exist.
            </summary>
            <param name="physicalMin">The physical position corresponding to the world minimum of the axis.</param>
            <param name="physicalMax">The physical position corresponding to the world maximum of the axis.</param>
            <param name="largeTickPositions">The positions of the large ticks.</param>
            <param name="smallTickPositions">If null, small tick positions are returned via this parameter. Otherwise this function does nothing.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.Axis.WorldTickPositions(Alt.Sketch.PointI,Alt.Sketch.PointI,Alt.Collections.ArrayList@,Alt.Collections.ArrayList@)">
            <summary>
            Determines the positions of all Large and Small ticks.
            </summary>
            <param name="physicalMin">The physical position corresponding to the world minimum of the axis.</param>
            <param name="physicalMax">The physical position corresponding to the world maximum of the axis.</param>
            <param name="largeTickPositions">ArrayList containing the positions of the large ticks.</param>
            <param name="smallTickPositions">ArrayList containing the positions of the small ticks.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.Axis.IncreaseRange(System.Double)">
            <summary>
            Moves the world min and max values so that the world axis
            length is [percent] bigger. If the current world
            max and min values are the same, they are moved appart 
            an arbitrary amount. This arbitrary amount is currently
            0.01, and will probably be configurable in the future.
            </summary>
            <param name="percent">Percentage to increase world length by.</param>
            <remarks>Works for the case WorldMax is less than WorldMin.</remarks>
        </member>
        <member name="M:Alt.GUI.NPlot.Axis.getDefaultLabelOffset(Alt.Sketch.PointI,Alt.Sketch.PointI)">
            <summary>
            returns a suitable offset for the axis label in the case that there are no
            ticks or tick text in the way.
            </summary>
            <param name="physicalMin">physical point corresponding to the axis world maximum.</param>
            <param name="physicalMax">physical point corresponding to the axis world minimum.</param>
            <returns>axis label offset</returns>
        </member>
        <member name="P:Alt.GUI.NPlot.Axis.TicksCrossAxis">
            <summary>
            If true, tick marks will cross the axis, with their centre on the axis line.
            If false, tick marks will be drawn as a line with origin starting on the axis line.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Axis.WorldMax">
            <summary>
            The maximum world extent of the axis. Note that it is sensical if 
            WorldMax is less than WorldMin - the axis would just be descending
            not ascending. Currently Axes won't display properly if you do 
            this - use the Axis.Reversed property instead to achieve the same
            result.
            
            Setting this raises the WorldMinChanged event and the WorldExtentsChanged event.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Axis.WorldMin">
            <summary>
            The minumum world extent of the axis. Note that it is sensical if 
            WorldMax is less than WorldMin - the axis would just be descending
            not ascending. Currently Axes won't display properly if you do 
            this - use the Axis.Reversed property instead to achieve the same
            result.
            
            Setting this raises the WorldMinChanged event and the WorldExtentsChanged event.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Axis.LargeTickSize">
            <summary>
            Length (in pixels) of a large tick. <b>Not</b> the distance 
            between large ticks. The length of the tick itself.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Axis.SmallTickSize">
            <summary>
            Length (in pixels) of the small ticks.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Axis.Label">
            <summary>
            The Axis Label
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Axis.TickTextNextToAxis">
            <summary>
            If true, text associated with tick marks will be drawn on the other side of the
            axis line [next to the axis]. If false, tick mark text will be drawn at the end
            of the tick mark [on the same of the axis line as the tick].
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Axis.Hidden">
            <summary>
            If set to true, the axis is hidden. That is, the axis line, ticks, tick 
            labels and axis label will not be drawn. 
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Axis.Reversed">
            <summary>
            If set true, the axis will behave as though the WorldMin and WorldMax values
            have been swapped.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Axis.HideTickText">
            <summary>
            If true, no text will be drawn next to any axis tick marks.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Axis.TickTextFont">
            <summary>
            This font is used for the drawing of text next to the axis tick marks.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Axis.LabelFont">
            <summary>
            This font is used to draw the axis label.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Axis.NumberFormat">
            <summary>
            Specifies the format used for drawing tick labels. See 
            StringBuilder.AppendFormat for a description of this 
            string.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Axis.MinPhysicalLargeTickStep">
            <summary>
            If LargeTickStep isn't specified, then this will be calculated 
            automatically. The calculated value will not be less than this
            amount.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Axis.AxisColor">
            <summary>
            The color of the pen used to draw the ticks and the axis line.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Axis.AxisPen">
            <summary>
            The pen used to draw the ticks and the axis line.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Axis.TicksIndependentOfPhysicalExtent">
            <summary>
            If true, automated tick placement will be independent of the physical
            extent of the axis. Tick placement will look good for charts of typical
            size (say physical dimensions of 640x480). If you want to produce the
            same chart on two graphics surfaces of different sizes [eg Windows.Forms
            control and printer], then you will want to set this property to true.
            If false [default], the number of ticks and their placement will be 
            optimally calculated to look the best for the given axis extent. This 
            is very useful if you are creating a cart with particularly small or
            large physical dimensions.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Axis.FlipTicksLabel">
            <summary>
            If true label is flipped about the text center line parallel to the text.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Axis.TicksAngle">
            <summary>
            Angle to draw ticks at (measured anti-clockwise from axis direction).
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Axis.TicksLabelAngle">
            <summary>
            Angle to draw large tick labels at (clockwise from horizontal). Note: 
            this is currently only implemented well for the lower x-axis. 
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Axis.LabelColor">
            <summary>
            The color of the brush used to draw the axis label.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Axis.LabelBrush">
            <summary>
            The brush used to draw the axis label.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Axis.TickTextColor">
            <summary>
            The color of the brush used to draw the axis tick labels.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Axis.TickTextBrush">
            <summary>
            The brush used to draw the tick text.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Axis.AutoScaleText">
            <summary>
            If true, label and tick text will be scaled to match size
            of PlotSurface2D. If false, they won't be.
            </summary>
            <remarks>Could also be argued this belongs in PlotSurface2D</remarks>
        </member>
        <member name="P:Alt.GUI.NPlot.Axis.AutoScaleTicks">
            <summary>
            If true, tick lengths will be scaled to match size
            of PlotSurface2D. If false, they won't be.
            </summary>
            <remarks>Could also be argued this belongs in PlotSurface2D</remarks>
        </member>
        <member name="P:Alt.GUI.NPlot.Axis.WorldLength">
            <summary>
            World extent of the axis.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Axis.FontScale">
            <summary>
            Scale label and tick fonts by this factor. Set by PlotSurface2D 
            Draw method.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Axis.TickScale">
            <summary>
            Scale tick mark lengths by this factor. Set by PlotSurface2D
            Draw method.
            </summary>		
        </member>
        <member name="P:Alt.GUI.NPlot.Axis.IsLinear">
            <summary>
            Get whether or not this axis is linear.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Axis.LabelOffset">
            <summary>
            If LabelOffsetAbsolute is false (default) then this is the offset 
            added to default axis label position. If LabelOffsetAbsolute is 
            true, then this is the absolute offset of the label from the axis.
            
            If positive, offset is further away from axis, if negative, towards
            the axis.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Axis.LabelOffsetAbsolute">
            <summary>
            If true, the value specified by LabelOffset is the absolute distance
            away from the axis that the label is drawn. If false, the value 
            specified by LabelOffset is added to the pre-calculated value to 
            determine the axis label position.
            </summary>
            <value></value>
        </member>
        <member name="P:Alt.GUI.NPlot.Axis.LabelOffsetScaled">
            <summary>
            Whether or not the supplied LabelOffset should be scaled by 
            a factor as specified by FontScale.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Axis.Color">
            <summary>
            Set the Axis color (sets all of axis line color, Tick text color, and label color).
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.BarPlot">
            <summary>
            Draws 
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.BasePlot">
            <summary>
            Supplies implementation of basic legend handling properties, and
            basic data specifying properties which are used by all plots.
            </summary>
            <remarks>If C# had multiple inheritance, the heirachy would be different.</remarks>
        </member>
        <member name="P:Alt.GUI.NPlot.BasePlot.Label">
            <summary>
            A label to associate with the plot - used in the legend.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.BasePlot.ShowInLegend">
            <summary>
            Whether or not to include an entry for this plot in the legend if it exists.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.BasePlot.DataSource">
            <summary>
            Gets or sets the source containing a list of values used to populate the plot object.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.BasePlot.DataMember">
            <summary>
            Gets or sets the specific data member in a multimember data source to get data from.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.IPlot">
            <summary>
            Defines the interface for objects that (a) can draw a representation of 
            themselves in the legend and (b) can recommend a good axis to draw themselves
            against.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.IPlot.DrawInLegend(Alt.Sketch.Graphics,Alt.Sketch.RectI)">
            <summary>
            Method used to draw a representation of the plot in a legend.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.IPlot.SuggestXAxis">
            <summary>
            The method used to set the default abscissa axis.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.IPlot.SuggestYAxis">
            <summary>
            The method used to set the default ordinate axis.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.IPlot.WriteData(System.Text.StringBuilder,Alt.GUI.NPlot.RectangleD,System.Boolean)">
            <summary>
            Write data associated with the plot as text.
            </summary>
            <param name="sb">the string builder to write to.</param>
            <param name="region">Only write out data in this region if onlyInRegion is true.</param>
            <param name="onlyInRegion">If true, only data in region is written, else all data is written.</param>
        </member>
        <member name="P:Alt.GUI.NPlot.IPlot.Label">
            <summary>
            The label associated with the plot [used in legend]
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.IPlot.ShowInLegend">
            <summary>
            Whether or not to include an entry for this plot in the legend if it exists.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.BarPlot.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.BarPlot.Draw(Alt.Sketch.Graphics,Alt.GUI.NPlot.PhysicalAxis,Alt.GUI.NPlot.PhysicalAxis)">
            <summary>
            Draws the line plot on a GDI+ surface against the provided x and y axes.
            </summary>
            <param name="g">The GDI+ surface on which to draw.</param>
            <param name="xAxis">The X-Axis to draw against.</param>
            <param name="yAxis">The Y-Axis to draw against.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.BarPlot.SuggestXAxis">
            <summary>
            Returns an x-axis that is suitable for drawing this plot.
            </summary>
            <returns>A suitable x-axis.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.BarPlot.SuggestYAxis">
            <summary>
            Returns a y-axis that is suitable for drawing this plot.
            </summary>
            <returns>A suitable y-axis.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.BarPlot.DrawInLegend(Alt.Sketch.Graphics,Alt.Sketch.RectI)">
            <summary>
            Draws a representation of this plot in the legend.
            </summary>
            <param name="g">The graphics surface on which to draw.</param>
            <param name="startEnd">A rectangle specifying the bounds of the area in the legend set aside for drawing.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.BarPlot.WriteData(System.Text.StringBuilder,Alt.GUI.NPlot.RectangleD,System.Boolean)">
            <summary>
            Write data associated with the plot as text.
            </summary>
            <param name="sb">the string builder to write to.</param>
            <param name="region">Only write out data in this region if onlyInRegion is true.</param>
            <param name="onlyInRegion">If true, only data in region is written, else all data is written.</param>
            <remarks>TODO: not implemented.</remarks>
        </member>
        <member name="P:Alt.GUI.NPlot.BarPlot.OrdinateDataTop">
            <summary>
            Gets or sets the data, or column name for the ordinate [y] axis.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.BarPlot.OrdinateDataBottom">
            <summary>
            Gets or sets the data, or column name for the ordinate [y] axis.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.BarPlot.AbscissaData">
            <summary>
            Gets or sets the data, or column name for the abscissa [x] axis.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.BarPlot.BorderPen">
            <summary>
            The pen used to draw the plot
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.BarPlot.BorderColor">
            <summary>
            The color of the pen used to draw lines in this plot.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.BarPlot.FillBrush">
            <summary>
            Set/Get the fill brush
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.BarPlot.BarWidth">
            <summary>
            Set/Get the width of the bar in physical pixels.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.BaseSequencePlot">
            <summary>
            Adds additional basic functionality to BasePlot that is common to all
            plots that implement the ISequencePlot interface.
            </summary>
            <remarks>If C# had multiple inheritance, the heirachy would be different. The way it is isn't very nice.</remarks>
        </member>
        <member name="T:Alt.GUI.NPlot.ISequencePlot">
            <summary>
            Defines an mix-in style interface for plots that use SequenceAdapter to interpret supplied data.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.ISequencePlot.DataSource">
            <summary>
            Gets or sets the source containing a list of values used to populate the plot object.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.ISequencePlot.DataMember">
            <summary>
            Gets or sets the specific data member in a multimember data source to get data from.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.ISequencePlot.AbscissaData">
            <summary>
            Gets or sets the data, or column name for the abscissa [x] axis.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.ISequencePlot.OrdinateData">
            <summary>
            Gets or sets the data, or column name for the ordinate [y] axis.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.BaseSequencePlot.WriteData(System.Text.StringBuilder,Alt.GUI.NPlot.RectangleD,System.Boolean)">
            <summary>
            Writes text data of the plot object to the supplied string builder. It is 
            possible to specify that only data in the specified range be written.
            </summary>
            <param name="sb">the StringBuilder object to write to.</param>
            <param name="region">a region used if onlyInRegion is true.</param>
            <param name="onlyInRegion">If true, only data enclosed in the provided region will be written.</param>
        </member>
        <member name="P:Alt.GUI.NPlot.BaseSequencePlot.OrdinateData">
            <summary>
            Gets or sets the data, or column name for the ordinate [y] axis.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.BaseSequencePlot.AbscissaData">
            <summary>
            Gets or sets the data, or column name for the abscissa [x] axis.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.PlotSurface2DBitmap">
            <summary>
            Wrapper around NPlot.PlotSurface2D that provides extra functionality
            specific to drawing to Bitmaps.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DBitmap.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="width">width of the bitmap.</param>
            <param name="height">height of the bitmap.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DBitmap.#ctor(Alt.Sketch.Bitmap)">
            <summary>
            Constructor.
            </summary>
            <param name="b">The Bitmap where the plot is to be rendered.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DBitmap.Draw(Alt.Sketch.Graphics,Alt.Sketch.RectI)">
            <summary>
            Renders the plot.
            </summary>
            <param name="g">The graphics surface.</param>
            <param name="bounds">The rectangle storing the bounds for rendering.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DBitmap.Clear">
            <summary>
            Clears the plot.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DBitmap.Add(Alt.GUI.NPlot.IDrawable)">
            <summary>
            Adds a drawable object to the plot surface. If the object is an IPlot, 
            the PlotSurface2D axes will also be updated.
            </summary>
            <param name="p">The IDrawable object to add to the plot surface.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DBitmap.Add(Alt.GUI.NPlot.IDrawable,Alt.GUI.NPlot.PlotSurface2D.XAxisPosition,Alt.GUI.NPlot.PlotSurface2D.YAxisPosition)">
            <summary>
            Adds a drawable object to the plot surface against the specified axes. If
            the object is an IPlot, the PlotSurface2D axes will also be updated.
            </summary>
            <param name="p">the IDrawable object to add to the plot surface</param>
            <param name="xp">the x-axis to add the plot against.</param>
            <param name="yp">the y-axis to add the plot against.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DBitmap.Add(Alt.GUI.NPlot.IDrawable,System.Int32)">
            <summary>
            Adds a drawable object to the plot surface. If the object is an IPlot, 
            the PlotSurface2D axes will also be updated.
            </summary>
            <param name="p">The IDrawable object to add to the plot surface.</param>
            <param name="zOrder">The z-ordering when drawing (objects with lower numbers are drawn first)</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DBitmap.Add(Alt.GUI.NPlot.IDrawable,Alt.GUI.NPlot.PlotSurface2D.XAxisPosition,Alt.GUI.NPlot.PlotSurface2D.YAxisPosition,System.Int32)">
            <summary>
            Adds a drawable object to the plot surface against the specified axes. If
            the object is an IPlot, the PlotSurface2D axes will also be updated.
            </summary>
            <param name="p">the IDrawable object to add to the plot surface</param>
            <param name="xp">the x-axis to add the plot against.</param>
            <param name="yp">the y-axis to add the plot against.</param>
            <param name="zOrder">The z-ordering when drawing (objects with lower numbers are drawn first)</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DBitmap.ToStream(Alt.Sketch.ImageFormat)">
            <summary>
            Renders the bitmap to a MemoryStream. Useful for returning the bitmap from
            an ASP.NET page.
            </summary>
            <returns>The MemoryStream object.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DBitmap.Refresh">
            <summary>
            Refreshes (draws) the plot.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DBitmap.AddAxesConstraint(Alt.GUI.NPlot.AxesConstraint)">
            <summary>
            Add an axis constraint to the plot surface. Axis constraints can
            specify relative world-pixel scalings, absolute axis positions etc.
            </summary>
            <param name="c">The axis constraint to add.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2DBitmap.Remove(Alt.GUI.NPlot.IDrawable,System.Boolean)">
            <summary>
            Remove a drawable object from the plot surface.
            </summary>
            <param name="p">the drawable to remove</param>
            <param name="updateAxes">whether or not to update the axes after removing the idrawable.</param>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DBitmap.Title">
            <summary>
            The plot surface title.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DBitmap.TitleFont">
            <summary>
            The plot title font.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DBitmap.SurfacePadding">
            <summary>
            The distance in pixels to leave between of the edge of the bounding rectangle
            supplied to the Draw method, and the markings that make up the plot.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DBitmap.XAxis1">
            <summary>
            The bottom abscissa axis.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DBitmap.YAxis1">
            <summary>
            The left ordinate axis.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DBitmap.XAxis2">
            <summary>
            The top abscissa axis.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DBitmap.YAxis2">
            <summary>
            The right ordinate axis.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DBitmap.Legend">
            <summary>
            Gets or Sets the legend to use with this plot surface.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DBitmap.LegendZOrder">
            <summary>
            Gets or Sets the legend z-order.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DBitmap.PlotBackColor">
            <summary>
            A color used to paint the plot background. Mutually exclusive with PlotBackImage and PlotBackBrush
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DBitmap.PlotBackImage">
            <summary>
            An imaged used to paint the plot background. Mutually exclusive with PlotBackColor and PlotBackBrush
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DBitmap.PlotBackBrush">
            <summary>
            A Rectangle brush used to paint the plot background. Mutually exclusive with PlotBackColor and PlotBackBrush
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DBitmap.SmoothingMode">
            <summary>
            Smoothing mode to use when drawing plots.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DBitmap.Width">
            <summary>
            The bitmap width
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DBitmap.Height">
            <summary>
            The bitmap height
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DBitmap.Bitmap">
            <summary>
            The bitmap to use as the drawing surface.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DBitmap.BackColor">
            <summary>
            The bitmap background color outside the bounds of the plot surface.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DBitmap.AutoScaleTitle">
            <summary>
            Whether or not the title will be scaled according to size of the plot 
            surface.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DBitmap.AutoScaleAutoGeneratedAxes">
            <summary>
            When plots are added to the plot surface, the axes they are attached to
            are immediately modified to reflect data of the plot. If 
            AutoScaleAutoGeneratedAxes is true when a plot is added, the axes will
            be turned in to auto scaling ones if they are not already [tick marks,
            tick text and label size scaled to size of plot surface]. If false,
            axes will not be autoscaling.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DBitmap.TitleColor">
            <summary>
            Sets the title to be drawn using a solid brush of this color.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DBitmap.TitleBrush">
            <summary>
            The brush used for drawing the title.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2DBitmap.Drawables">
            <summary>
            Gets an array list containing all drawables currently added to the PlotSurface2D.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.PointOLHC">
            <summary>
            Encapsulates open, low, high and close values useful for specifying financial data
            over a time period, together with a [single] x-value indicating the time [period] the
            data corresponds to. 
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.PointOLHC.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="x">value representing the time period that the financial values refer to</param>
            <param name="open">The value at open of time period.</param>
            <param name="low">The low value over the time period</param>
            <param name="high">The high value over the time period.</param>
            <param name="close">The value at close of time period.</param>
        </member>
        <member name="P:Alt.GUI.NPlot.PointOLHC.X">
            <summary>
            value representing the time period that the financial values apply to.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PointOLHC.Open">
            <summary>
            The value at open of time period.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PointOLHC.Close">
            <summary>
            The value at close of time period.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PointOLHC.Low">
            <summary>
            Low value of the time period.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PointOLHC.High">
            <summary>
            High value of the time period.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.CandlePlot">
            <summary>
            Encapsulates functionality for drawing finacial candle charts. 
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.CandlePlot.AutoScaleStickWidth">
            <summary>
            If stick width is set equal to this value, the width will be 
            automatically scaled dependant on the space between sticks.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.CandlePlot.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.CandlePlot.CalculatePhysicalSeparation(Alt.GUI.NPlot.CandlePlot.CandleDataAdapter,Alt.GUI.NPlot.PhysicalAxis)">
            <summary>
            Calculates the physical (not world) separation between abscissa values.
            </summary>
            <param name="cd">Candle adapter containing data</param>
            <param name="xAxis">Physical x axis the data is plotted against.</param>
            <returns>physical separation between abscissa values.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.CandlePlot.Draw(Alt.Sketch.Graphics,Alt.GUI.NPlot.PhysicalAxis,Alt.GUI.NPlot.PhysicalAxis)">
            <summary>
            Draws the candle plot on a GDI+ surface agains the provided x and y axes.
            </summary>
            <param name="g">The GDI+ surface on which to draw.</param>
            <param name="xAxis">The X-Axis to draw against.</param>
            <param name="yAxis">The Y-Axis to draw against.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.CandlePlot.SuggestXAxis">
            <summary>
            Returns an x-axis that is suitable for drawing this plot.
            </summary>
            <returns>A suitable x-axis.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.CandlePlot.SuggestYAxis">
            <summary>
            Returns a y-axis that is suitable for drawing this plot.
            </summary>
            <returns>A suitable y-axis.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.CandlePlot.DrawInLegend(Alt.Sketch.Graphics,Alt.Sketch.RectI)">
            <summary>
            Draws a representation of this plot in the legend.
            </summary>
            <param name="g">The graphics surface on which to draw.</param>
            <param name="startEnd">A rectangle specifying the bounds of the area in the legend set aside for drawing.</param>
        </member>
        <member name="F:Alt.GUI.NPlot.CandlePlot.Style">
            <summary>
            Specifies the CandleStick style to use.
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.CandlePlot.BullishColor">
            <summary>
            If CandlePlot.Style is Filled, then bullish open-close moves are displayed in this color.
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.CandlePlot.BearishColor">
            <summary>
            If CandlePlot.Style is Filled, then bearish moves are displayed in this color.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.CandlePlot.WriteData(System.Text.StringBuilder,Alt.GUI.NPlot.RectangleD,System.Boolean)">
            <summary>
            Write data associated with the plot as text.
            </summary>
            <param name="sb">the string builder to write to.</param>
            <param name="region">Only write out data in this region if onlyInRegion is true.</param>
            <param name="onlyInRegion">If true, only data in region is written, else all data is written.</param>
            <remarks>TODO: not implemented.</remarks>
        </member>
        <member name="P:Alt.GUI.NPlot.CandlePlot.OpenData">
            <summary>
            Gets or sets the data, or column name for the open values.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.CandlePlot.LowData">
            <summary>
            Gets or sets the data, or column name for the interval low values.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.CandlePlot.HighData">
            <summary>
            Gets or sets the data, or column name for the interval high values.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.CandlePlot.CloseData">
            <summary>
            Gets or sets the data, or column name for the close values.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.CandlePlot.AbscissaData">
            <summary>
            Gets or sets the data, or column name for the abscissa [x] axis.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.CandlePlot.Color">
            <summary>
            Color of this plot [excluding interior of filled boxes if Style is fill]. To
            change the Bullish and Bearish colours in Filled mode, use the BullishColor
            and BearishColor properties.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.CandlePlot.StickWidth">
            <summary>
            Width of each stick in pixels. It is best if this is an odd number.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.CandlePlot.Centered">
            <summary>
            If true (default), bars will be centered on the abscissa times. 
            If false, bars will be drawn between the corresponding abscissa time
            and the next abscissa time. 
            </summary>
            <value></value>
        </member>
        <member name="T:Alt.GUI.NPlot.CandlePlot.CandleStyle">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.CandlePlot.CandleStyle.Create(Alt.GUI.NPlot.CandlePlot.CandleDataAdapter)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="T:Alt.GUI.NPlot.CandlePlot.Stick">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.CandlePlot.Stick.Create(Alt.GUI.NPlot.CandlePlot.CandleDataAdapter)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="T:Alt.GUI.NPlot.CandlePlot.CandleDataAdapter">
            <summary>
            This class is responsible for interpreting the various ways you can 
            specify data to CandlePlot objects
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.CandlePlot.CandleDataAdapter.#ctor(System.Object,System.String,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="dataSource"></param>
            <param name="dataMember"></param>
            <param name="abscissaData"></param>
            <param name="openData"></param>
            <param name="lowData"></param>
            <param name="highData"></param>
            <param name="closeData"></param>
        </member>
        <member name="M:Alt.GUI.NPlot.CandlePlot.CandleDataAdapter.SuggestXAxis">
            <summary>
            Returns an x-axis that is suitable for drawing the data.
            </summary>
            <returns>A suitable x-axis.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.CandlePlot.CandleDataAdapter.SuggestYAxis">
            <summary>
            Returns a y-axis that is suitable for drawing the data.
            </summary>
            <returns>A suitable y-axis.</returns>
        </member>
        <member name="P:Alt.GUI.NPlot.CandlePlot.CandleDataAdapter.Item(System.Int32)">
            <summary>
            Gets the ith point in the candle adapter
            </summary>
            <param name="i">index of datapoint to get</param>
            <returns>the datapoint.</returns>
        </member>
        <member name="P:Alt.GUI.NPlot.CandlePlot.CandleDataAdapter.Count">
            <summary>
            The number of datapoints available via the candle adapter.
            </summary>
            <value>the number of datapoints available.</value>
        </member>
        <member name="T:Alt.GUI.NPlot.CandlePlot.Styles">
            <summary>
            Possible CandleStick styles.
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.CandlePlot.Styles.Stick">
            <summary>
            Draw vertical line between low and high, tick on left for open and tick on right for close.
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.CandlePlot.Styles.Filled">
            <summary>
            Draw vertical line between low and high and place on top of this a box with bottom
            and top determined by open and high values. The box is filled using the colors specified
            in BullishColor and BearishColor properties.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.DateTimeAxis">
            <summary>
            The DateTimeAxis class
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.DateTimeAxis.Clone">
            <summary>
            Deep copy of DateTimeAxis.
            </summary>
            <returns>A copy of the DateTimeAxis Class.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.DateTimeAxis.DoClone(Alt.GUI.NPlot.DateTimeAxis,Alt.GUI.NPlot.DateTimeAxis)">
            <summary>
            Helper method for Clone.
            </summary>
            <param name="a">The original object to clone.</param>
            <param name="b">The cloned object.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.DateTimeAxis.#ctor(Alt.GUI.NPlot.Axis)">
            <summary>
            Constructor
            </summary>
            <param name="a">Axis to construct from</param>
        </member>
        <member name="M:Alt.GUI.NPlot.DateTimeAxis.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.DateTimeAxis.#ctor(System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="worldMin">World min of axis</param>
            <param name="worldMax">World max of axis</param>
        </member>
        <member name="M:Alt.GUI.NPlot.DateTimeAxis.#ctor(System.Int64,System.Int64)">
            <summary>
            Constructor
            </summary>
            <param name="worldMin">World min of axis</param>
            <param name="worldMax">World max of axis</param>
        </member>
        <member name="M:Alt.GUI.NPlot.DateTimeAxis.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Constructor
            </summary>
            <param name="worldMin">World min of axis</param>
            <param name="worldMax">World max of axis</param>
        </member>
        <member name="M:Alt.GUI.NPlot.DateTimeAxis.DrawTicks(Alt.Sketch.Graphics,Alt.Sketch.PointI,Alt.Sketch.PointI,System.Object@,System.Object@)">
            <summary>
            Draw the ticks.
            </summary>
            <param name="g">The drawing surface on which to draw.</param>
            <param name="physicalMin">The minimum physical extent of the axis.</param>
            <param name="physicalMax">The maximum physical extent of the axis.</param>
            <param name="boundingBox">out: smallest box that completely encompasses all of the ticks and tick labels.</param>
            <param name="labelOffset">out: a suitable offset from the axis to draw the axis label.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.DateTimeAxis.LargeTickLabel(System.DateTime)">
            <summary>
            Get the label corresponding to the provided date time
            </summary>
            <param name="tickDate">the date time to get the label for</param>
            <returns>label for the provided DateTime</returns>
        </member>
        <member name="F:Alt.GUI.NPlot.DateTimeAxis.LargeTickLabelType_">
            <summary>
             this gets set after a get LargeTickPositions.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.DateTimeAxis.WorldTickPositions_FirstPass(Alt.Sketch.PointI,Alt.Sketch.PointI,Alt.Collections.ArrayList@,Alt.Collections.ArrayList@)">
            <summary>
            Determines the positions, in world coordinates, of the large ticks. No
            small tick marks are currently calculated by this method.
            
            </summary>
            <param name="physicalMin">The physical position corresponding to the world minimum of the axis.</param>
            <param name="physicalMax">The physical position corresponding to the world maximum of the axis.</param>
            <param name="largeTickPositions">ArrayList containing the positions of the large ticks.</param>
            <param name="smallTickPositions">null</param>
        </member>
        <member name="M:Alt.GUI.NPlot.DateTimeAxis.WorldTickPositions_SecondPass(Alt.Sketch.PointI,Alt.Sketch.PointI,Alt.Collections.ArrayList,Alt.Collections.ArrayList@)">
            <summary>
            Compute the small tick positions for largetick size of one or more years.
             - inside the domain or the large tick positons, is take the mid-point of pairs of large ticks
             - outside the large tick range, check if a half tick is inside the world min/max
            This method works only if there are atleast 2 large ticks,
            since we don't know if its minutes, hours, month, or yearly divisor.
            </summary>
            <param name="physicalMin">The physical position corresponding to the world minimum of the axis.</param>
            <param name="physicalMax">The physical position corresponding to the world maximum of the axis.</param>
            <param name="largeTickPositions">Read in the large tick positions</param>
            <param name="smallTickPositions">Fill in the corresponding small tick positions</param>
            <remarks>Added by Rosco Hill</remarks>
        </member>
        <member name="P:Alt.GUI.NPlot.DateTimeAxis.LargeTickStep">
            <summary>
            The distance between large ticks. If this is set to Zero [default],
            this distance will be calculated automatically.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.DateTimeAxis.LargeTickLabelType">
            <summary>
            Enumerates the different types of tick label possible.
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.DateTimeAxis.LargeTickLabelType.none">
            <summary>
            default - no tick labels.
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.DateTimeAxis.LargeTickLabelType.year">
            <summary>
            tick labels should be years
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.DateTimeAxis.LargeTickLabelType.month">
            <summary>
            Tick labels should be month names
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.DateTimeAxis.LargeTickLabelType.day">
            <summary>
            Tick labels should be day names
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.DateTimeAxis.LargeTickLabelType.hourMinute">
            <summary>
            Tick labels should be hour / minutes.
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.DateTimeAxis.LargeTickLabelType.hourMinuteSeconds">
            <summary>
            tick labels should be hour / minute / second.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.FilledRegion">
            <summary>
            A quick and dirty Filled region plottable object
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.FilledRegion.#ctor(Alt.GUI.NPlot.LinePlot,Alt.GUI.NPlot.LinePlot)">
            <summary>
            Constructor
            </summary>
            <param name="lp1">LinePlot that provides bounds to filled region [upper or lower]</param>
            <param name="lp2">LinePlot that provides bounds to filled region [upper or lower]</param>
            <remarks>TODO: make this work with other plot types.</remarks>
        </member>
        <member name="M:Alt.GUI.NPlot.FilledRegion.#ctor(Alt.GUI.NPlot.VerticalLine,Alt.GUI.NPlot.VerticalLine)">
            <summary>
            Constructor
            </summary>
            <param name="l1">Vertical line to provide bounds for filled region</param>
            <param name="l2">The other Vertical line to provide bounds for filled region</param>
        </member>
        <member name="M:Alt.GUI.NPlot.FilledRegion.#ctor(Alt.GUI.NPlot.HorizontalLine,Alt.GUI.NPlot.HorizontalLine)">
            <summary>
            Constructor
            </summary>
            <param name="l1">Vertical line to provide bounds for filled region</param>
            <param name="l2">The other Vertical line to provide bounds for filled region</param>
        </member>
        <member name="M:Alt.GUI.NPlot.FilledRegion.Draw(Alt.Sketch.Graphics,Alt.GUI.NPlot.PhysicalAxis,Alt.GUI.NPlot.PhysicalAxis)">
            <summary>
            Draw the filled region
            </summary>
            <param name="g">The GDI+ surface on which to draw.</param>
            <param name="xAxis">The X-Axis to draw against.</param>
            <param name="yAxis">The Y-Axis to draw against.</param>
        </member>
        <member name="P:Alt.GUI.NPlot.FilledRegion.Brush">
            <summary>
            Use this brush (and not a RectangleBrush) for drawing.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.FilledRegion.RectangleBrush">
            <summary>
            Use this RectangleBrush (and not a normal Brush) for drawing.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.Grid">
            <summary>
            Encapsulates a Grid IDrawable object. Instances of this  to a PlotSurface2D 
            instance to produce a grid.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.Grid.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.Grid.DrawGridLines(Alt.Sketch.Graphics,Alt.GUI.NPlot.PhysicalAxis,Alt.GUI.NPlot.PhysicalAxis,Alt.Collections.ArrayList,System.Boolean,Alt.Sketch.Pen)">
            <summary>
            Does all the work in drawing grid lines.
            </summary>
            <param name="g">The graphics surface on which to render.</param>
            <param name="axis">TODO</param>
            <param name="orthogonalAxis">TODO</param>
            <param name="a">the list of world values to draw grid lines at.</param>
            <param name="horizontal">true if want horizontal lines, false otherwise.</param>
            <param name="p">the pen to use to draw the grid lines.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.Grid.Draw(Alt.Sketch.Graphics,Alt.GUI.NPlot.PhysicalAxis,Alt.GUI.NPlot.PhysicalAxis)">
            <summary>
            Draws the grid
            </summary>
            <param name="g">The graphics surface on which to draw</param>
            <param name="xAxis">The physical x axis to draw horizontal lines parallel to.</param>
            <param name="yAxis">The physical y axis to draw vertical lines parallel to.</param>
        </member>
        <member name="P:Alt.GUI.NPlot.Grid.HorizontalGridType">
            <summary>
            Specifies the horizontal grid type (none, coarse or fine).
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Grid.VerticalGridType">
            <summary>
            Specifies the vertical grid type (none, coarse, or fine).
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Grid.MajorGridPen">
            <summary>
            The pen used to draw major (coarse) grid lines.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Grid.MinorGridPen">
            <summary>
            The pen used to draw minor (fine) grid lines.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.Grid.GridType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.Grid.GridType.None">
            <summary>
            No grid.
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.Grid.GridType.Coarse">
            <summary>
            Coarse grid. Lines at large tick positions only.
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.Grid.GridType.Fine">
            <summary>
            Fine grid. Lines at both large and small tick positions.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.HistogramPlot">
            <summary>
            Provides ability to draw histogram plots.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.HistogramPlot.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.HistogramPlot.Draw(Alt.Sketch.Graphics,Alt.GUI.NPlot.PhysicalAxis,Alt.GUI.NPlot.PhysicalAxis)">
            <summary>
            Renders the histogram.
            </summary>
            <param name="g">The Graphics surface on which to draw</param>
            <param name="xAxis">The X-Axis to draw against.</param>
            <param name="yAxis">The Y-Axis to draw against.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.HistogramPlot.SuggestXAxis">
            <summary>
            Returns an x-axis that is suitable for drawing this plot.
            </summary>
            <returns>A suitable x-axis.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.HistogramPlot.SuggestYAxis">
            <summary>
            Returns a y-axis that is suitable for drawing this plot.
            </summary>
            <returns>A suitable y-axis.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.HistogramPlot.StackedTo(Alt.GUI.NPlot.HistogramPlot)">
            <summary>
            Stack the histogram to another HistogramPlot.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.HistogramPlot.DrawInLegend(Alt.Sketch.Graphics,Alt.Sketch.RectI)">
            <summary>
            Draws a representation of this plot in the legend.
            </summary>
            <param name="g">The graphics surface on which to draw.</param>
            <param name="startEnd">A rectangle specifying the bounds of the area in the legend set aside for drawing.</param>
        </member>
        <member name="P:Alt.GUI.NPlot.HistogramPlot.RectangleBrush">
            <summary>
            Set/Get the brush to use if the histogram is filled.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.HistogramPlot.Filled">
            <summary>
            Whether or not the histogram columns will be filled.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.HistogramPlot.BaseWidth">
            <summary>
            The width of the histogram bar as a proportion of the data spacing 
            (in range 0.0 - 1.0).
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.HistogramPlot.Center">
            <summary>
            If true, each histogram column will be centered on the associated abscissa value.
            If false, each histogram colum will be drawn between the associated abscissa value, and the next abscissa value.
            Default value is true.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.HistogramPlot.IsStacked">
            <summary>
            If this histogram plot has another stacked on top, this will be true. Else false.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.HistogramPlot.Pen">
            <summary>
            The pen used to draw the plot
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.HistogramPlot.Color">
            <summary>
            The color of the pen used to draw lines in this plot.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.HistogramPlot.BaseOffset">
            <summary>
            Horizontal position of histogram columns is offset by this much (in world coordinates).
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.HorizontalLine">
            <summary>
            Encapsulates functionality for drawing a horizontal line on a plot surface.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.HorizontalLine.#ctor(System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="ordinateValue">ordinate (Y) value of line.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.HorizontalLine.#ctor(System.Double,Alt.Sketch.Color)">
            <summary>
            Constructor
            </summary>
            <param name="ordinateValue">ordinate (Y) value of line.</param>
            <param name="color">draw the line using this color.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.HorizontalLine.#ctor(System.Double,Alt.Sketch.Pen)">
            <summary>
            Constructor
            </summary>
            <param name="ordinateValue">ordinate (Y) value of line.</param>
            <param name="pen">Pen to use to draw the line.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.HorizontalLine.DrawInLegend(Alt.Sketch.Graphics,Alt.Sketch.RectI)">
            <summary>
            Draws a representation of the horizontal line in the legend.
            </summary>
            <param name="g">The graphics surface on which to draw</param>
            <param name="startEnd">A rectangle specifying the bounds of the area in the legend set aside for drawing.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.HorizontalLine.SuggestXAxis">
            <summary>
            Returns null indicating that x extremities of the line are variable.
            </summary>
            <returns>null</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.HorizontalLine.SuggestYAxis">
            <summary>
            Returns a y-axis that is suitable for drawing this plot.
            </summary>
            <returns>A suitable y-axis.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.HorizontalLine.WriteData(System.Text.StringBuilder,Alt.GUI.NPlot.RectangleD,System.Boolean)">
            <summary>
            Writes text data describing the horizontal line object to the supplied string builder. It is 
            possible to specify that the data will be written only if the line is in the specified 
            region.
            </summary>
            <param name="sb">the StringBuilder object to write to.</param>
            <param name="region">a region used if onlyInRegion is true.</param>
            <param name="onlyInRegion">If true, data will be written only if the line is in the specified region.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.HorizontalLine.Draw(Alt.Sketch.Graphics,Alt.GUI.NPlot.PhysicalAxis,Alt.GUI.NPlot.PhysicalAxis)">
            <summary>
            Draws the horizontal line plot on a GDI+ surface against the provided x and y axes.
            </summary>
            <param name="g">The GDI+ surface on which to draw.</param>
            <param name="xAxis">The X-Axis to draw against.</param>
            <param name="yAxis">The Y-Axis to draw against.</param>
        </member>
        <member name="P:Alt.GUI.NPlot.HorizontalLine.Label">
            <summary>
            A label to associate with the plot - used in the legend.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.HorizontalLine.ShowInLegend">
            <summary>
            Whether or not to include an entry for this plot in the legend if it exists.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.HorizontalLine.OrdinateValue">
            <summary>
            ordinate (Y) value to draw horizontal line at.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.HorizontalLine.Pen">
            <summary>
            Pen to use to draw the horizontal line.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.HorizontalLine.PixelIndent">
            <summary>
            Each end of the line is indented by this many pixels. 
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.HorizontalLine.LengthScale">
            <summary>
            The line length is multiplied by this amount. Default
            corresponds to a value of 1.0.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.IGradient">
            <summary>
            Defines a gradient.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.IGradient.GetColor(System.Double)">
            <summary>
            Gets a color corresponding to a number between 0.0 and 1.0 inclusive.
            </summary>
            <param name="prop">the number to get corresponding color for (between 0.0 and 1.0)</param>
            <returns>The color corresponding to the supplied number.</returns>
        </member>
        <member name="T:Alt.GUI.NPlot.ImagePlot">
            <summary>
            Encapsulates functionality for plotting data as a 2D image chart.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.ImagePlot.calculateMinMax">
            <summary>
            Calculates the minimum and maximum values of the data array.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.ImagePlot.#ctor(System.Double[0:,0:],System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="data">the 2D array to plot</param>
            <param name="xStart">the world value corresponding to the 1st position in the x-direction</param>
            <param name="xStep">the world step size between pixels in the x-direction.</param>
            <param name="yStart">the world value corresponding to the 1st position in the y-direction</param>
            <param name="yStep">the world step size between pixels in the y-direction.</param>
            <remarks>no adapters for this yet - when we get some more 2d
            plotting functionality, then perhaps create some.</remarks>
        </member>
        <member name="M:Alt.GUI.NPlot.ImagePlot.#ctor(System.Double[0:,0:])">
            <summary>
            Constructor
            </summary>
            <param name="data">The 2D array to plot.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.ImagePlot.Draw(Alt.Sketch.Graphics,Alt.GUI.NPlot.PhysicalAxis,Alt.GUI.NPlot.PhysicalAxis)">
            <summary>
            Draw on to the supplied graphics surface against the supplied axes.
            </summary>
            <param name="g">The graphics surface on which to draw.</param>
            <param name="xAxis">The X-Axis to draw against.</param>
            <param name="yAxis">The Y-Axis to draw against.</param>
            <remarks>TODO: block positions may be off by a pixel or so. maybe. Re-think calculations</remarks>
        </member>
        <member name="M:Alt.GUI.NPlot.ImagePlot.DrawInLegend(Alt.Sketch.Graphics,Alt.Sketch.RectI)">
            <summary>
            Draws a representation of this plot in the legend.
            </summary>
            <param name="g">The graphics surface on which to draw.</param>
            <param name="startEnd">A rectangle specifying the bounds of the area in the legend set aside for drawing.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.ImagePlot.SuggestXAxis">
            <summary>
            Returns an x-axis that is suitable for drawing this plot.
            </summary>
            <returns>A suitable x-axis.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.ImagePlot.SuggestYAxis">
            <summary>
            Returns a y-axis that is suitable for drawing this plot.
            </summary>
            <returns>A suitable y-axis.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.ImagePlot.WriteData(System.Text.StringBuilder,Alt.GUI.NPlot.RectangleD,System.Boolean)">
            <summary>
            Write data associated with the plot as text.
            </summary>
            <param name="sb">the string builder to write to.</param>
            <param name="region">Only write out data in this region if onlyInRegion is true.</param>
            <param name="onlyInRegion">If true, only data in region is written, else all data is written.</param>
            <remarks>TODO: not implemented.</remarks>
        </member>
        <member name="P:Alt.GUI.NPlot.ImagePlot.DataMin">
            <summary>
            At or below which value a minimum gradient color should be used.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.ImagePlot.DataMax">
            <summary>
            At or above which value a maximum gradient color should be used.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.ImagePlot.Gradient">
            <summary>
            The gradient that specifies the mapping between value and color.
            </summary>
            <remarks>memory allocation in get may be inefficient.</remarks>
        </member>
        <member name="P:Alt.GUI.NPlot.ImagePlot.Label">
            <summary>
            A label to associate with the plot - used in the legend.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.ImagePlot.Center">
            <summary>
            If true, pixels are centered on their respective coordinates. If false, they are drawn
            between their coordinates and the coordinates of the the next point in each direction.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.ImagePlot.ShowInLegend">
            <summary>
            Whether or not to include an entry for this plot in the legend if it exists.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.ITransform2D">
            <summary>
            This interface is useful in the Plot classes for transforming 
            world to physical coordinates. Create on using the GetTransformer
            static method in Transform2D.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.ITransform2D.Transform(System.Double,System.Double)">
            <summary>
            Transforms the given world point to physical coordinates
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.ITransform2D.Transform(Alt.GUI.NPlot.PointD)">
            <summary>
            Transforms the given world point to physical coordinates
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.LabelAxis">
            <summary>
            Allows the creation of axes with any number of user defined labels at
            user defined world values along the axis. 
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.LabelAxis.Clone">
            <summary>
            Deep copy of LabelAxis.
            </summary>
            <returns>A copy of the LinearAxis Class.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.LabelAxis.DoClone(Alt.GUI.NPlot.LabelAxis,Alt.GUI.NPlot.LabelAxis)">
            <summary>
            Helper method for Clone.
            </summary>
            <param name="a">The original object to clone.</param>
            <param name="b">The cloned object.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.LabelAxis.Init">
            <summary>
            Initialise LabelAxis to default state.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.LabelAxis.#ctor(Alt.GUI.NPlot.Axis)">
            <summary>
            Copy constructor
            </summary>
            <param name="a">The Axis to clone.</param>
            <remarks>TODO: [review notes] I don't think this will work as desired.</remarks>
        </member>
        <member name="M:Alt.GUI.NPlot.LabelAxis.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.LabelAxis.#ctor(System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="worldMin">Minimum world value</param>
            <param name="worldMax">Maximum world value</param>
        </member>
        <member name="M:Alt.GUI.NPlot.LabelAxis.AddLabel(System.String,System.Double)">
            <summary>
            Adds a label to the axis
            </summary>
            <param name="name">The label</param>
            <param name="val">The world value at which to place the label</param>
        </member>
        <member name="M:Alt.GUI.NPlot.LabelAxis.DrawTicks(Alt.Sketch.Graphics,Alt.Sketch.PointI,Alt.Sketch.PointI,System.Object@,System.Object@)">
            <summary>
            Given Graphics surface, and physical extents of axis, draw ticks and
            associated labels.
            </summary>
            <param name="g">The GDI+ Graphics surface on which to draw.</param>
            <param name="physicalMin">The physical location of the world min point</param>
            <param name="physicalMax">The physical location of the world max point</param>
            <param name="boundingBox">out: smallest box that completely encompasses all of the ticks and tick labels.</param>
            <param name="labelOffset">out: a suitable offset from the axis to draw the axis label.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.LabelAxis.WorldTickPositions_FirstPass(Alt.Sketch.PointI,Alt.Sketch.PointI,Alt.Collections.ArrayList@,Alt.Collections.ArrayList@)">
            <summary>
            Determines the positions, in world coordinates, of the large ticks. 
            
            Label axes do not have small ticks.
            </summary>
            <param name="physicalMin">The physical position corresponding to the world minimum of the axis.</param>
            <param name="physicalMax">The physical position corresponding to the world maximum of the axis.</param>
            <param name="largeTickPositions">ArrayList containing the positions of the large ticks.</param>
            <param name="smallTickPositions">null</param>
        </member>
        <member name="P:Alt.GUI.NPlot.LabelAxis.TicksBetweenText">
            <summary>
            If true, large ticks are drawn between the labels, rather
            than at the position of the labels.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.LabelAxis.SortDataIfNecessary">
            <summary>
            If your data may be be specified out of order (that is 
            abscissa values with a higher index may be less than
            abscissa values of a lower index), then data sorting 
            may be necessary to implement some of the functionality
            of this object. If you know your data is already 
            ordered with abscissa values lowest -> highest, then
            you may set this to false. It's default is true.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.LabelAxis.PhysicalSpacingMin">
            <summary>
            If consecutive labels are less than this number of pixels appart, 
            some of the labels will not be drawn.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.LabelPointPlot">
            <summary>
            Encapsulates functionality
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.PointPlot">
            <summary>
            Encapsulates functionality for drawing data as a series of points.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.PointPlot.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.PointPlot.#ctor(Alt.GUI.NPlot.Marker)">
            <summary>
            Constructor for the marker plot.
            </summary>
            <param name="marker">The marker to use.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PointPlot.Draw(Alt.Sketch.Graphics,Alt.GUI.NPlot.PhysicalAxis,Alt.GUI.NPlot.PhysicalAxis)">
            <summary>
            Draws the point plot on a GDI+ surface against the provided x and y axes.
            </summary>
            <param name="g">The GDI+ surface on which to draw.</param>
            <param name="xAxis">The X-Axis to draw against.</param>
            <param name="yAxis">The Y-Axis to draw against.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PointPlot.SuggestXAxis">
            <summary>
            Returns an x-axis that is suitable for drawing this plot.
            </summary>
            <returns>A suitable x-axis.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.PointPlot.SuggestYAxis">
            <summary>
            Returns a y-axis that is suitable for drawing this plot.
            </summary>
            <returns>A suitable y-axis.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.PointPlot.DrawInLegend(Alt.Sketch.Graphics,Alt.Sketch.RectI)">
            <summary>
            Draws a representation of this plot in the legend.
            </summary>
            <param name="g">The graphics surface on which to draw.</param>
            <param name="startEnd">A rectangle specifying the bounds of the area in the legend set aside for drawing.</param>
        </member>
        <member name="P:Alt.GUI.NPlot.PointPlot.Marker">
            <summary>
            The Marker object used for the plot.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.LabelPointPlot.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.LabelPointPlot.#ctor(Alt.GUI.NPlot.Marker)">
            <summary>
            Constructor
            </summary>
            <param name="marker">The marker type to use for this plot.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.LabelPointPlot.Draw(Alt.Sketch.Graphics,Alt.GUI.NPlot.PhysicalAxis,Alt.GUI.NPlot.PhysicalAxis)">
            <summary>
            Draws the plot on a GDI+ surface against the provided x and y axes.
            </summary>
            <param name="g">The GDI+ surface on which to draw.</param>
            <param name="xAxis">The X-Axis to draw against.</param>
            <param name="yAxis">The Y-Axis to draw against.</param>
        </member>
        <member name="P:Alt.GUI.NPlot.LabelPointPlot.LabelTextPosition">
            <summary>
            The position of the text label in relation to the point.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.LabelPointPlot.TextData">
            <summary>
            The text datasource to attach to each point.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.LabelPointPlot.Font">
            <summary>
            The Font used to write text.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.LabelPointPlot.TextDataAdapter">
            <summary>
            This class us used in conjunction with SequenceAdapter to interpret data
            specified to the TextPlot class.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.LabelPointPlot.LabelPositions">
            <summary>
            Enumeration of all label positions relative to a point.
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.LabelPointPlot.LabelPositions.Above">
            <summary>
            Above the point
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.LabelPointPlot.LabelPositions.Below">
            <summary>
            Below the point
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.LabelPointPlot.LabelPositions.Left">
            <summary>
            To the left of the point
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.LabelPointPlot.LabelPositions.Right">
            <summary>
            To the right of the point
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.Legend">
            <summary>
            Legend functionality specific to Legends associated with a PlotSurface2D.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.LegendBase">
            <summary>
            Provides functionality for drawing legends.
            </summary>
            <remarks>
            The class is quite closely tied to PlotSurface2D. 
            </remarks>
        </member>
        <member name="M:Alt.GUI.NPlot.LegendBase.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.LegendBase.GetBoundingBox(Alt.Sketch.PointI,Alt.Collections.ArrayList,System.Single)">
            <summary>
            Get the bounding box of the rectangle.
            </summary>
            <param name="position">the position of the top left of the legend.</param>
            <param name="plots">Array of plot objects to appear in the legend.</param>
            <param name="scale">if the legend is set to scale, the amount to scale by.</param>>
            <returns></returns>
            <remarks>do implementation that doesn't call draw. Change xPos, yPos to Point</remarks>
        </member>
        <member name="M:Alt.GUI.NPlot.LegendBase.Draw(Alt.Sketch.Graphics,Alt.Sketch.PointI,Alt.Collections.ArrayList,System.Single)">
            <summary>
            Draw The legend
            </summary>
            <param name="g">The graphics surface on which to draw</param>
            <param name="position">The position of the top left of the axis.</param>
            <param name="plots">Array of plot objects to appear in the legend.</param>
            <param name="scale">if the legend is set to scale, the amount to scale by.</param>
            <returns>bounding box</returns>
        </member>
        <member name="P:Alt.GUI.NPlot.LegendBase.Font">
            <summary>
            The font used to draw text in the legend.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.LegendBase.TextColor">
            <summary>
            The color used to draw text in the legend.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.LegendBase.BackgroundColor">
            <summary>
            The background color of the legend.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.LegendBase.BorderColor">
            <summary>
            The color of the legend border.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.LegendBase.BorderStyle">
            <summary>
            The border style to use for the legend.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.LegendBase.AutoScaleText">
            <summary>
            Whether or not to auto scale text in the legend according the physical
            dimensions of the plot surface.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.LegendBase.NumberItemsVertically">
            <summary>
            Setting this does two things. First of all, it sets the maximum number of 
            items in the legend vertically. Second of all, it makes the legend grow
            horizontally (as it must given this constraint).
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.LegendBase.NumberItemsHorizontally">
            <summary>
            Setting this does two things. First of all, it sets the maximum number of 
            items in the legend horizontally. Second of all, it makes the legend grow
            vertically (as it must given this constraint).
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.LegendBase.BorderType">
            <summary>
            The types of legend borders (enum).
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.LegendBase.BorderType.None">
            <summary>
            No border.
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.LegendBase.BorderType.Line">
            <summary>
            Line border.
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.LegendBase.BorderType.Shadow">
            <summary>
            Shaded border.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.Legend.AttachTo(Alt.GUI.NPlot.PlotSurface2D.XAxisPosition,Alt.GUI.NPlot.PlotSurface2D.YAxisPosition)">
            <summary>
            Specify the Axes to attach the legend to. 
            </summary>
            <param name="xa">Specify which horizontal axis the legend should be attached to.</param>
            <param name="ya">Specify which vertical axis the legend should be attached to.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.Legend.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.Legend.UpdateAxesPositions(Alt.GUI.NPlot.PhysicalAxis,Alt.GUI.NPlot.PhysicalAxis,Alt.GUI.NPlot.PhysicalAxis,Alt.GUI.NPlot.PhysicalAxis,Alt.Collections.ArrayList,System.Single,System.Int32,Alt.Sketch.RectI,Alt.Sketch.PointI@)">
            <summary>
            Updates the PlotSurface2D axes to compensate for the legend.
            </summary>
            <param name="pXAxis1">the bottom x axis</param>
            <param name="pYAxis1">the left y axis</param>
            <param name="pXAxis2">the top x axis</param>
            <param name="pYAxis2">the right y axis</param>
            <param name="plots">list of plots.</param>
            <param name="scale">scale parameter (for text and other)</param>
            <param name="padding">padding around plot within bounds.</param>
            <param name="bounds">graphics surface bounds</param>
            <param name="position">legend position</param>
        </member>
        <member name="P:Alt.GUI.NPlot.Legend.NeverShiftAxes">
            <summary>
            Whether or not the positions of the Axes may be shifted to make
            room for the Legend. 
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Legend.XOffset">
            <summary>
            Offset from the chosen Y-Axis. TODO: better description.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Legend.YOffset">
            <summary>
            Offset from the X-Axis. TODO: better description.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Legend.VerticalEdgePlacement">
            <summary>
            Whether or not to attach the legend on the inside of the top
            or bottom axis (which, is specified using the AttachTo method) or the 
            outside. 
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Legend.HorizontalEdgePlacement">
            <summary>
            Whether or not to attach the legend on the inside of the
            left or right axis (which, is specified using the AttachTo method) 
            or the outside.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.Legend.Placement">
            <summary>
            Enumeration of possible Legend placements.
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.Legend.Placement.Inside">
            <summary>
            Inside the plot area.
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.Legend.Placement.Outside">
            <summary>
            Outside the plot area.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.LinearAxis">
            <summary>
            Provides functionality for drawing axes with a linear numeric scale.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.LinearAxis.Clone">
            <summary>
            Deep copy of LinearAxis.
            </summary>
            <returns>A copy of the LinearAxis Class</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.LinearAxis.DoClone(Alt.GUI.NPlot.LinearAxis,Alt.GUI.NPlot.LinearAxis)">
            <summary>
            Helper method for Clone.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.LinearAxis.#ctor(Alt.GUI.NPlot.Axis)">
            <summary>
            Copy constructor
            </summary>
            <param name="a">The Axis to clone</param>
        </member>
        <member name="M:Alt.GUI.NPlot.LinearAxis.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.LinearAxis.#ctor(System.Double,System.Double)">
            <summary>
            Construct a linear axis with the provided world min and max values.
            </summary>
            <param name="worldMin">the world minimum value of the axis.</param>
            <param name="worldMax">the world maximum value of the axis.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.LinearAxis.DrawTicks(Alt.Sketch.Graphics,Alt.Sketch.PointI,Alt.Sketch.PointI,System.Object@,System.Object@)">
            <summary>
            Draws the large and small ticks [and tick labels] for this axis.
            </summary>
            <param name="g">The graphics surface on which to draw.</param>
            <param name="physicalMin">The physical position corresponding to the world minimum of the axis.</param>
            <param name="physicalMax">The physical position corresponding to the world maximum of the axis.</param>
            <param name="boundingBox">out: smallest box that completely surrounds all ticks and associated labels for this axis.</param>
            <param name="labelOffset">out: offset from the axis to draw the axis label.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.LinearAxis.WorldTickPositions_SecondPass(Alt.Sketch.PointI,Alt.Sketch.PointI,Alt.Collections.ArrayList,Alt.Collections.ArrayList@)">
            <summary>
            Determines the positions, in world coordinates, of the small ticks
            if they have not already been generated.
            
            </summary>
            <param name="physicalMin">The physical position corresponding to the world minimum of the axis.</param>
            <param name="physicalMax">The physical position corresponding to the world maximum of the axis.</param>
            <param name="largeTickPositions">The positions of the large ticks.</param>
            <param name="smallTickPositions">If null, small tick positions are returned via this parameter. Otherwise this function does nothing.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.LinearAxis.AdjustedWorldValue(System.Double)">
            <summary>
            Adjusts a real world value to one that has been modified to
            reflect the Axis Scale and Offset properties.
            </summary>
            <param name="world">world value to adjust</param>
            <returns>adjusted world value</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.LinearAxis.WorldTickPositions_FirstPass(Alt.Sketch.PointI,Alt.Sketch.PointI,Alt.Collections.ArrayList@,Alt.Collections.ArrayList@)">
             <summary>
             Determines the positions, in world coordinates, of the large ticks. 
             When the physical extent of the axis is small, some of the positions 
             that were generated in this pass may be converted to small tick 
             positions and returned as well.
            
             If the LargeTickStep isn't set then this is calculated automatically and
             depends on the physical extent of the axis. 
             </summary>
             <param name="physicalMin">The physical position corresponding to the world minimum of the axis.</param>
             <param name="physicalMax">The physical position corresponding to the world maximum of the axis.</param>
             <param name="largeTickPositions">ArrayList containing the positions of the large ticks.</param>
             <param name="smallTickPositions">ArrayList containing the positions of the small ticks if calculated, null otherwise.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.LinearAxis.DetermineLargeTickStep(System.Single,System.Boolean@)">
            <summary>
            Calculates the world spacing between large ticks, based on the physical
            axis length (parameter), world axis length, Mantissa values and 
            MinPhysicalLargeTickStep. A value such that at least two 
            </summary>
            <param name="physicalLength">physical length of the axis</param>
            <param name="shouldCullMiddle">Returns true if we were forced to make spacing of 
            large ticks too small in order to ensure that there are at least two of 
            them. The draw ticks method should not draw more than two large ticks if this
            returns true.</param>
            <returns>Large tick spacing</returns>
            <remarks>TODO: This can be optimised a bit.</remarks>
        </member>
        <member name="M:Alt.GUI.NPlot.LinearAxis.DetermineNumberSmallTicks(System.Double)">
            <summary>
            Given the large tick step, determine the number of small ticks that should
            be placed in between.
            </summary>
            <param name="bigTickDist">the large tick step.</param>
            <returns>the number of small ticks to place between large ticks.</returns>
        </member>
        <member name="F:Alt.GUI.NPlot.LinearAxis.largeTickStep_">
            <summary>
            If set !NaN, gives the distance between large ticks.
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.LinearAxis.ApproxNumberLargeTicks">
            <summary>
            If LargeTickStep isn't specified, then a suitable value is 
            calculated automatically. To determine the tick spacing, the
            world axis length is divided by ApproximateNumberLargeTicks
            and the next lowest distance m*10^e for some m in the Mantissas
            set and some integer e is used as the large tick spacing. 
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.LinearAxis.Mantissas">
            <summary>
            If LargeTickStep isn't specified, then a suitable value is
            calculated automatically. The value will be of the form
            m*10^e for some m in this set.
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.LinearAxis.SmallTickCounts">
            <summary>
            If NumberOfSmallTicks isn't specified then .... 
            If specified LargeTickStep manually, then no small ticks unless
            NumberOfSmallTicks specified.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.LinearAxis.LargeTickStep">
            <summary>
            The distance between large ticks. If this is set to NaN [default],
            this distance will be calculated automatically.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.LinearAxis.LargeTickValue">
            <summary>
            If set, a large tick will be placed at this position, and other large ticks will 
            be placed relative to this position.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.LinearAxis.NumberOfSmallTicks">
            <summary>
            The number of small ticks between large ticks.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.LinearAxis.Scale">
            <summary>
            Scale to apply to world values when labelling axis:
            (labelWorld = world * scale + offset). This does not
            affect the "real" world range of the axis. 
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.LinearAxis.Offset">
            <summary>
            Offset to apply to world values when labelling the axis:
            (labelWorld = axisWorld * scale + offset). This does not
            affect the "real" world range of the axis.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.LinearGradient">
            <summary>
            Class for creating a linear gradient.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.LinearGradient.#ctor(Alt.Sketch.Color,Alt.Sketch.Color)">
            <summary>
            Constructor.
            </summary>
            <param name="minColor">The color corresponding to 0.0</param>
            <param name="maxColor">The color corresponding to 1.0</param>
        </member>
        <member name="M:Alt.GUI.NPlot.LinearGradient.GetColor(System.Double)">
            <summary>
            Gets a color corresponding to a number between 0.0 and 1.0 inclusive. The color will
            be a linear interpolation of the min and max colors.
            </summary>
            <param name="prop">the number to get corresponding color for (between 0.0 and 1.0)</param>
            <returns>The color corresponding to the supplied number.</returns>
        </member>
        <member name="P:Alt.GUI.NPlot.LinearGradient.MaxColor">
            <summary>
            The color corresponding to 0.0
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.LinearGradient.MinColor">
            <summary>
            The color corresponding to 1.0
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.LinearGradient.VoidColor">
            <summary>
            The color corresponding to NaN
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.LinePlot">
            <summary>
            Encapsulates functionality for plotting data as a line chart.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.LinePlot.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.LinePlot.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="dataSource">The data source to associate with this plot</param>
        </member>
        <member name="M:Alt.GUI.NPlot.LinePlot.#ctor(System.Object,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="ordinateData">the ordinate data to associate with this plot.</param>
            <param name="abscissaData">the abscissa data to associate with this plot.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.LinePlot.DrawLineOrShadow(Alt.Sketch.Graphics,Alt.GUI.NPlot.PhysicalAxis,Alt.GUI.NPlot.PhysicalAxis,System.Boolean)">
            <summary>
            Draws the line plot on a GDI+ surface against the provided x and y axes.
            </summary>
            <param name="g">The GDI+ surface on which to draw.</param>
            <param name="xAxis">The X-Axis to draw against.</param>
            <param name="yAxis">The Y-Axis to draw against.</param>
            <param name="drawShadow">If true draw the shadow for the line. If false, draw line.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.LinePlot.Draw(Alt.Sketch.Graphics,Alt.GUI.NPlot.PhysicalAxis,Alt.GUI.NPlot.PhysicalAxis)">
            <summary>
            Draws the line plot on a GDI+ surface against the provided x and y axes.
            </summary>
            <param name="g">The GDI+ surface on which to draw.</param>
            <param name="xAxis">The X-Axis to draw against.</param>
            <param name="yAxis">The Y-Axis to draw against.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.LinePlot.SuggestXAxis">
            <summary>
            Returns an x-axis that is suitable for drawing this plot.
            </summary>
            <returns>A suitable x-axis.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.LinePlot.SuggestYAxis">
            <summary>
            Returns a y-axis that is suitable for drawing this plot.
            </summary>
            <returns>A suitable y-axis.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.LinePlot.DrawInLegend(Alt.Sketch.Graphics,Alt.Sketch.RectI)">
            <summary>
            Draws a representation of this plot in the legend.
            </summary>
            <param name="g">The graphics surface on which to draw.</param>
            <param name="startEnd">A rectangle specifying the bounds of the area in the legend set aside for drawing.</param>
        </member>
        <member name="P:Alt.GUI.NPlot.LinePlot.Shadow">
            <summary>
            If true, draw a shadow under the line.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.LinePlot.ShadowColor">
            <summary>
            Color of line shadow if drawn. Use Shadow method to turn shadow on and off.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.LinePlot.ShadowOffset">
            <summary>
            Offset of shadow line from primary line.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.LinePlot.Pen">
            <summary>
            The pen used to draw the plot
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.LinePlot.Color">
            <summary>
            The color of the pen used to draw lines in this plot.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.LogAxis">
            <summary>
            The class implementing logarithmic axes.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.LogAxis.Clone">
            <summary>
            Deep Copy of the LogAxis.
            </summary>
            <returns>A Copy of the LogAxis Class.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.LogAxis.DoClone(Alt.GUI.NPlot.LogAxis,Alt.GUI.NPlot.LogAxis)">
            <summary>
            Helper method for Clone (actual implementation)
            </summary>
            <param name="a">The original object to clone.</param>
            <param name="b">The cloned object.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.LogAxis.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.LogAxis.#ctor(Alt.GUI.NPlot.Axis)">
            <summary>
            Copy Constructor
            </summary>
            <param name="a">The Axis to clone.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.LogAxis.#ctor(System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="worldMin">Minimum World value for the axis.</param>
            <param name="worldMax">Maximum World value for the axis.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.LogAxis.DrawTicks(Alt.Sketch.Graphics,Alt.Sketch.PointI,Alt.Sketch.PointI,System.Object@,System.Object@)">
            <summary>
            Draw the ticks.
            </summary>
            <param name="g">The drawing surface on which to draw.</param>
            <param name="physicalMin">The minimum physical extent of the axis.</param>
            <param name="physicalMax">The maximum physical extent of the axis.</param>
            <param name="boundingBox">out: smallest box that completely encompasses all of the ticks and tick labels.</param>
            <param name="labelOffset">out: a suitable offset from the axis to draw the axis label.</param>
            <returns> An ArrayList containing the offset from the axis required for an axis label
            to miss this tick, followed by a bounding rectangle for the tick and tickLabel drawn.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.LogAxis.WorldTickPositions_SecondPass(Alt.Sketch.PointI,Alt.Sketch.PointI,Alt.Collections.ArrayList,Alt.Collections.ArrayList@)">
            <summary>
            Determines the positions, in world coordinates, of the small ticks
            if they have not already been generated.
            </summary>
            <param name="physicalMin">The physical position corresponding to the world minimum of the axis.</param>
            <param name="physicalMax">The physical position corresponding to the world maximum of the axis.</param>
            <param name="largeTickPositions">The positions of the large ticks, unchanged</param>
            <param name="smallTickPositions">If null, small tick positions are returned via this parameter. Otherwise this function does nothing.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.LogAxis.WorldTickPositions_FirstPass(Alt.Sketch.PointI,Alt.Sketch.PointI,Alt.Collections.ArrayList@,Alt.Collections.ArrayList@)">
            <summary>
            Determines the positions, in world coordinates, of the log spaced large ticks. 
            </summary>
            <param name="physicalMin">The physical position corresponding to the world minimum of the axis.</param>
            <param name="physicalMax">The physical position corresponding to the world maximum of the axis.</param>
            <param name="largeTickPositions">ArrayList containing the positions of the large ticks.</param>
            <param name="smallTickPositions">null</param>
        </member>
        <member name="M:Alt.GUI.NPlot.LogAxis.DetermineTickSpacing">
            <summary>
            Determines the tick spacing.
            </summary>
            <returns>The tick spacing (in decades!)</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.LogAxis.DetermineNumberSmallTicks(System.Double)">
            <summary>
            Determines the number of small ticks between two large ticks.
            </summary>
            <param name="bigTickDist">The distance between two large ticks.</param>
            <returns>The number of small ticks.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.LogAxis.WorldToPhysical(System.Double,Alt.Sketch.Point,Alt.Sketch.Point,System.Boolean)">
            <summary>
            World to physical coordinate transform.
            </summary>
            <param name="coord">The coordinate value to transform.</param>
            <param name="physicalMin">The physical position corresponding to the world minimum of the axis.</param>
            <param name="physicalMax">The physical position corresponding to the world maximum of the axis.</param>
            <param name="clip">if false, then physical value may extend outside worldMin / worldMax. If true, the physical value returned will be clipped to physicalMin or physicalMax if it lies outside this range.</param>
            <returns>The transformed coordinates.</returns>
            <remarks>TODO: make Reversed property work for this.</remarks>
        </member>
        <member name="M:Alt.GUI.NPlot.LogAxis.PhysicalToWorld(Alt.Sketch.Point,Alt.Sketch.Point,Alt.Sketch.Point,System.Boolean)">
            <summary>
            Return the world coordinate of the projection of the point p onto
            the axis.
            </summary>
            <param name="p">The point to project onto the axis</param>
            <param name="physicalMin">The physical position corresponding to the world minimum of the axis.</param>
            <param name="physicalMax">The physical position corresponding to the world maximum of the axis.</param>
            <param name="clip">If true, the world value will be clipped to WorldMin or WorldMax as appropriate if it lies outside this range.</param>
            <returns>The world value corresponding to the projection of the point p onto the axis.</returns>
        </member>
        <member name="P:Alt.GUI.NPlot.LogAxis.LargeTickStep">
            <summary>
            The step between large ticks, expressed in decades for the Log scale.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.LogAxis.LargeTickValue">
            <summary>
            Position of one of the large ticks [other positions will be calculated relative to this one].
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.LogAxis.NumberSmallTicks">
            <summary>
            The number of small ticks between large ticks.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.LogAxis.WorldMin">
            <summary>
            The minimum world extent of the axis. Must be greater than zero.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.LogAxis.WorldMax">
            <summary>
            The maximum world extent of the axis. Must be greater than zero.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.LogAxis.IsLinear">
            <summary>
            Get whether or not this axis is linear. It is not.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.Marker">
            <summary>
            Encapsulates functionality relating to markers used by the PointPlot class.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.Marker.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.Marker.#ctor(Alt.GUI.NPlot.Marker.MarkerType)">
            <summary>
            Constructor
            </summary>
            <param name="markertype">The marker type.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.Marker.#ctor(Alt.GUI.NPlot.Marker.MarkerType,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="markertype">The marker type.</param>
            <param name="size">The marker size.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.Marker.#ctor(Alt.GUI.NPlot.Marker.MarkerType,System.Int32,Alt.Sketch.Color)">
            <summary>
            Constructor
            </summary>
            <param name="markertype">The marker type.</param>
            <param name="size">The marker size.</param>
            <param name="color">The marker color.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.Marker.#ctor(Alt.GUI.NPlot.Marker.MarkerType,System.Int32,Alt.Sketch.Pen)">
            <summary>
            Constructor
            </summary>
            <param name="markertype">The marker type.</param>
            <param name="size">The marker size.</param>
            <param name="pen">The marker Pen.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.Marker.#ctor(Alt.GUI.NPlot.Marker.MarkerType,System.Int32,Alt.Sketch.Pen,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="markertype">The marker type.</param>
            <param name="size">The marker size.</param>
            <param name="pen">The marker Pen.</param>
            <param name="fill">The fill flag.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.Marker.Draw(Alt.Sketch.Graphics,System.Int32,System.Int32)">
            <summary>
            Draws the marker at the given position
            </summary>
            <param name="g">The graphics surface on which to draw.</param>
            <param name="x">The [physical] x position to draw the marker.</param>
            <param name="y">The [physical] y position to draw the marker.</param>
        </member>
        <member name="P:Alt.GUI.NPlot.Marker.Type">
            <summary>
            The type of marker.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Marker.DropLine">
            <summary>
            Whether or not to draw a dropline.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Marker.Size">
            <summary>
            The marker size.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Marker.FillBrush">
            <summary>
            The brush used to fill the marker.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Marker.Filled">
            <summary>
            Fill with color.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Marker.Color">
            <summary>
            Sets the pen color and fill brush to be solid with the specified color.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.Marker.Pen">
            <summary>
            The Pen used to draw the marker.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.Marker.MarkerType">
            <summary>
            Enumeration of all different types of marker.
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.Marker.MarkerType.Cross1">
            <summary>
            A simple cross marker (x).
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.Marker.MarkerType.Cross2">
            <summary>
            Another simple cross marker (+).
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.Marker.MarkerType.Circle">
            <summary>
            A circle marker.
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.Marker.MarkerType.Square">
            <summary>
            A square marker.
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.Marker.MarkerType.Triangle">
            <summary>
            A triangle marker (upwards).
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.Marker.MarkerType.TriangleUp">
            <summary>
            A triangle marker (upwards).
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.Marker.MarkerType.TriangleDown">
            <summary>
            A triangle marker (upwards).
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.Marker.MarkerType.Diamond">
            <summary>
            A diamond,
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.Marker.MarkerType.FilledCircle">
            <summary>
            A filled circle
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.Marker.MarkerType.FilledSquare">
            <summary>
            A filled square
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.Marker.MarkerType.FilledTriangle">
            <summary>
            A filled triangle
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.Marker.MarkerType.Flag">
            <summary>
            A small flag (up)
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.Marker.MarkerType.FlagUp">
            <summary>
            A small flag (up)
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.Marker.MarkerType.FlagDown">
            <summary>
            A small flag (down)
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.Marker.MarkerType.None">
            <summary>
            No marker
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.MarkerItem">
            <summary>
            Class for placement of a single marker.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.MarkerItem.#ctor(Alt.GUI.NPlot.PointD)">
            <summary>
            Constructs a square marker at the (world) point point.
            </summary>
            <param name="point">the world position at which to place the marker</param>
        </member>
        <member name="M:Alt.GUI.NPlot.MarkerItem.#ctor(System.Double,System.Double)">
            <summary>
            Default constructor - a square black marker.
            </summary>
            <param name="x">The world x position of the marker</param>
            <param name="y">The world y position of the marker</param>
        </member>
        <member name="M:Alt.GUI.NPlot.MarkerItem.#ctor(Alt.GUI.NPlot.Marker,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="marker">The marker to place on the chart.</param>
            <param name="x">The world x position of the marker</param>
            <param name="y">The world y position of the marker</param>
        </member>
        <member name="M:Alt.GUI.NPlot.MarkerItem.#ctor(Alt.GUI.NPlot.Marker,Alt.GUI.NPlot.PointD)">
            <summary>
            Constructor
            </summary>
            <param name="marker">The marker to place on the chart.</param>
            <param name="point">The world position of the marker</param>
        </member>
        <member name="M:Alt.GUI.NPlot.MarkerItem.Draw(Alt.Sketch.Graphics,Alt.GUI.NPlot.PhysicalAxis,Alt.GUI.NPlot.PhysicalAxis)">
            <summary>
            Draws the marker on a plot surface.
            </summary>
            <param name="g">graphics surface on which to draw</param>
            <param name="xAxis">The X-Axis to draw against.</param>
            <param name="yAxis">The Y-Axis to draw against.</param>
        </member>
        <member name="T:Alt.GUI.NPlot.NPlotException">
            <summary>
            All exceptions thrown by NPlot are of this type.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.NPlotException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.NPlotException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.NPlotException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.PageAlignedPhysicalAxis">
            <summary>
            The bare minimum needed to do world->physical and physical->world transforms for
            vertical axes. Also includes tick placements. Built for speed.
            </summary>
            <remarks>currently unused</remarks>
        </member>
        <member name="M:Alt.GUI.NPlot.PageAlignedPhysicalAxis.#ctor(Alt.GUI.NPlot.PhysicalAxis)">
            <summary>
            Construct from a fully-blown physical axis.
            </summary>
            <param name="physicalAxis">the physical axis to get initial values from.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PageAlignedPhysicalAxis.WorldToPhysical(System.Double)">
            <summary>
            return the physical coordinate corresponding to the supplied world coordinate.
            </summary>
            <param name="world">world coordinate to determine physical coordinate for.</param>
            <returns>the physical coordinate corresoindng to the supplied world coordinate.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.PageAlignedPhysicalAxis.WorldToPhysicalClipped(System.Double)">
            <summary>
            return the physical coordinate corresponding to the supplied world coordinate,
            clipped if it is outside the bounds of the axis
            </summary>
            <param name="world">world coordinate to determine physical coordinate for.</param>
            <returns>the physical coordinate corresoindng to the supplied world coordinate.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.PageAlignedPhysicalAxis.PhysicalToWorld(System.Single)">
            <summary>
            return the world coordinate corresponding to the supplied physical coordinate.
            </summary>
            <param name="physical">physical coordinate to determine world coordinate for.</param>
            <returns>the world coordinate corresponding to the supplied </returns>
        </member>
        <member name="T:Alt.GUI.NPlot.PhysicalAxis">
            <summary>
            This class adds physical positioning information [PhysicalMin, PhysicalMax]
            and related functionality on top of a specific Axis class. 
            
            It's an interesting
            question where to put this information. It belongs with every specific axis
            type, but on the other hand, users of the library as it is normally used 
            should not see it because
            positioning of axes is handled internally by PlotSurface2D. Therefore it doesn't make sense
            to put it in the Axis class unless it is internal. But if this were done it would restrict
            use of this information outside the library always, which is not what is wanted.
            The main disadvantage with the method chosen is that there is a lot of passing
            of the positional information between physical axis and the underlying logical
            axis type.
            
            C# doesn't have templates. If it did, I might derive PhysicalAxis from the 
            templated Axis type (LinearAxis etc). Instead, have used a has-a relationship
            with an Axis superclass.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.PhysicalAxis.#ctor">
            <summary>
            Prevent default construction.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.PhysicalAxis.#ctor(Alt.GUI.NPlot.Axis,Alt.Sketch.PointI,Alt.Sketch.PointI)">
            <summary>
            Construct
            </summary>
            <param name="a">The axis this is a physical representation of.</param>
            <param name="physicalMin">the physical position of the world minimum axis value.</param>
            <param name="physicalMax">the physical position of the world maximum axis value.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PhysicalAxis.GetBoundingBox">
            <summary>
            Returns the smallest rectangle that completely contains all parts of the axis [including ticks and label].
            </summary>
            <returns>the smallest rectangle that completely contains all parts of the axis [including ticks and label].</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.PhysicalAxis.Draw(Alt.Sketch.Graphics,Alt.Sketch.RectI@)">
            <summary>
            Draws the axis on the given graphics surface.
            </summary>
            <param name="g">The graphics surface on which to draw.</param>
            <param name="boundingBox">out: the axis bounding box - the smallest rectangle that
            completely contains all parts of the axis [including ticks and label].</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PhysicalAxis.WorldToPhysical(System.Double,System.Boolean)">
            <summary>
            Given a world coordinate value, returns the physical position of the 
            coordinate along the axis.
            </summary>
            <param name="coord">the world coordinate</param>
            <param name="clip">if true, the physical position returned will be clipped to the physical max / min position as appropriate if the world value is outside the limits of the axis.</param>
            <returns>the physical position of the coordinate along the axis.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.PhysicalAxis.PhysicalToWorld(Alt.Sketch.PointI,System.Boolean)">
            <summary>
            Given a physical point on the graphics surface, returns the world
            value of it's projection onto the axis [i.e. closest point on the axis]. 
            The function is implemented for axes of arbitrary orientation.
            </summary>
            <param name="p">Physical point to find corresponding world value of.</param>
            <param name="clip">if true, returns a world position outside WorldMin / WorldMax
            range if this is closer to the axis line. If false, such values will
            be clipped to be either WorldMin or WorldMax as appropriate.</param>
            <returns>the world value of the point's projection onto the axis.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.PhysicalAxis.SetWorldLimitsFromPhysical(Alt.Sketch.PointI,Alt.Sketch.PointI)">
            <summary>
            This sets new world limits for the axis from two physical points
            selected within the plot area.
            </summary>
            <param name="min">The upper left point of the selection.</param>
            <param name="max">The lower right point of the selection.</param>
        </member>
        <member name="P:Alt.GUI.NPlot.PhysicalAxis.PhysicalMin">
            <summary>
            The physical position corresponding to WorldMin.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PhysicalAxis.PhysicalMax">
            <summary>
            The physical position corresponding to WorldMax.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PhysicalAxis.Axis">
            <summary>
            The axis this object adds physical extents to.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PhysicalAxis.PhysicalLength">
            <summary>
            The length in pixels of the axis.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PhysicalAxis.PixelWorldLength">
            <summary>
            The length in world coordinates of one pixel. 
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.PiAxis">
            <summary>
            Axis with labels in multiples of Pi. Maybe needs a better name.
            Lots of functionality still to be added - currently only puts labels
            at whole increments of pi, want arbitrary increments, automatically
            determined and dependance on physical length. 
            Volunteers? 
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.PiAxis.Clone">
            <summary>
            Deep copy of PiAxis.
            </summary>
            <returns>A copy of the LinearAxis Class.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.PiAxis.DoClone(Alt.GUI.NPlot.PiAxis,Alt.GUI.NPlot.PiAxis)">
            <summary>
            Helper method for Clone.
            </summary>
            <param name="a">The original object to clone.</param>
            <param name="b">The cloned object.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PiAxis.Init">
            <summary>
            Initialise PiAxis to default state.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.PiAxis.#ctor(Alt.GUI.NPlot.Axis)">
            <summary>
            Copy constructor
            </summary>
            <param name="a">The Axis to clone.</param>
            <remarks>TODO: [review notes] I don't think this will work as desired.</remarks>
        </member>
        <member name="M:Alt.GUI.NPlot.PiAxis.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.PiAxis.#ctor(System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="worldMin">Minimum world value</param>
            <param name="worldMax">Maximum world value</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PiAxis.DrawTicks(Alt.Sketch.Graphics,Alt.Sketch.PointI,Alt.Sketch.PointI,System.Object@,System.Object@)">
            <summary>
            Given Graphics surface, and physical extents of axis, draw ticks and
            associated labels.
            </summary>
            <param name="g">The GDI+ Graphics surface on which to draw.</param>
            <param name="physicalMin">The physical location of the world min point</param>
            <param name="physicalMax">The physical location of the world max point</param>
            <param name="boundingBox">out: smallest box that completely encompasses all of the ticks and tick labels.</param>
            <param name="labelOffset">out: a suitable offset from the axis to draw the axis label.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PiAxis.WorldTickPositions_FirstPass(Alt.Sketch.PointI,Alt.Sketch.PointI,Alt.Collections.ArrayList@,Alt.Collections.ArrayList@)">
            <summary>
            Determines the positions, in world coordinates, of the large ticks. 
            
            Label axes do not have small ticks.
            </summary>
            <param name="physicalMin">The physical position corresponding to the world minimum of the axis.</param>
            <param name="physicalMax">The physical position corresponding to the world maximum of the axis.</param>
            <param name="largeTickPositions">ArrayList containing the positions of the large ticks.</param>
            <param name="smallTickPositions">null</param>
        </member>
        <member name="T:Alt.GUI.NPlot.PlotSurface2D">
            <summary>
            Implements the surface on which IDrawables are drawn. Is extended
            by Bitmap.PlotSurface2D, Windows.PlotSurface2D etc. TODO: better explanation.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2D.HitTest(Alt.Sketch.PointI)">
            <summary>
            Performs a hit test with the given point and returns information 
            about the object being hit.
            </summary>
            <param name="p">The point to test.</param>
            <returns></returns>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2D.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2D.Add(Alt.GUI.NPlot.IDrawable)">
            <summary>
            Adds a drawable object to the plot surface with z-order 0. If the object is an IPlot,
            the PlotSurface2D axes will also be updated. 
            </summary>
            <param name="p">The IDrawable object to add to the plot surface.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2D.Add(Alt.GUI.NPlot.IDrawable,System.Int32)">
            <summary>
            Adds a drawable object to the plot surface. If the object is an IPlot, 
            the PlotSurface2D axes will also be updated.
            </summary>
            <param name="p">The IDrawable object to add to the plot surface.</param>
            <param name="zOrder">The z-ordering when drawing (objects with lower numbers are drawn first)</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2D.Add(Alt.GUI.NPlot.IDrawable,Alt.GUI.NPlot.PlotSurface2D.XAxisPosition,Alt.GUI.NPlot.PlotSurface2D.YAxisPosition)">
            <summary>
            Adds a drawable object to the plot surface against the specified axes with
            z-order of 0. If the object is an IPlot, the PlotSurface2D axes will also
            be updated.
            </summary>
            <param name="p">the IDrawable object to add to the plot surface</param>
            <param name="xp">the x-axis to add the plot against.</param>
            <param name="yp">the y-axis to add the plot against.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2D.Add(Alt.GUI.NPlot.IDrawable,Alt.GUI.NPlot.PlotSurface2D.XAxisPosition,Alt.GUI.NPlot.PlotSurface2D.YAxisPosition,System.Int32)">
            <summary>
            Adds a drawable object to the plot surface against the specified axes. If
            the object is an IPlot, the PlotSurface2D axes will also be updated.
            </summary>
            <param name="p">the IDrawable object to add to the plot surface</param>
            <param name="xp">the x-axis to add the plot against.</param>
            <param name="yp">the y-axis to add the plot against.</param>
            <param name="zOrder">The z-ordering when drawing (objects with lower numbers are drawn first)</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2D.Draw(Alt.Sketch.Graphics,Alt.Sketch.RectI)">
            <summary>
            Draw the the PlotSurface2D and all contents [axes, drawables, and legend] on the 
            supplied graphics surface.
            </summary>
            <param name="g">The graphics surface on which to draw.</param>
            <param name="bounds">A bounding box on this surface that denotes the area on the
            surface to confine drawing to.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2D.Clear">
            <summary>
            Clears the plot and resets all state to the default.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2D.AddAxesConstraint(Alt.GUI.NPlot.AxesConstraint)">
            <summary>
            Add an axis constraint to the plot surface. Axes constraints give you 
            control over where NPlot positions each axes, and the world - pixel
            ratio.
            </summary>
            <param name="constraint">The axis constraint to add.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2D.Remove(Alt.GUI.NPlot.IDrawable,System.Boolean)">
            <summary>
            Remove a drawable object. 
            Note that axes are not updated.
            </summary>
            <param name="p">Drawable to remove.</param>
            <param name="updateAxes">if true, the axes are updated.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2D.RefreshZOrdering">
            <summary>
            If a plot is removed, then the ordering_ list needs to be 
            recalculated. 
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2D.WhichXAxis(Alt.GUI.NPlot.IPlot)">
            <summary>
            Returns the x-axis associated with a given plot.
            </summary>
            <param name="plot">the plot to get associated x-axis.</param>
            <returns>the axis associated with the plot.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.PlotSurface2D.WhichYAxis(Alt.GUI.NPlot.IPlot)">
            <summary>
            Returns the y-axis associated with a given plot.
            </summary>
            <param name="plot">the plot to get associated y-axis.</param>
            <returns>the axis associated with the plot.</returns>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2D.PlotAreaBoundingBoxCache">
            <summary>
            The physical bounding box of the last drawn plot surface area is available here.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2D.XAxis1">
            <summary>
            The bottom abscissa axis.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2D.YAxis1">
            <summary>
            The left ordinate axis.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2D.XAxis2">
            <summary>
            The top abscissa axis.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2D.YAxis2">
            <summary>
            The right ordinate axis.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2D.PhysicalXAxis1Cache">
            <summary>
            The physical XAxis1 that was last drawn.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2D.PhysicalYAxis1Cache">
            <summary>
            The physical YAxis1 that was last drawn.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2D.PhysicalXAxis2Cache">
            <summary>
            The physical XAxis2 that was last drawn.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2D.PhysicalYAxis2Cache">
            <summary>
            The physical YAxis2 that was last drawn.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2D.Title">
            <summary>
            The chart title.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2D.TitleFont">
            <summary>
            The plot title font.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2D.SurfacePadding">
            <summary>
            The distance in pixels to leave between of the edge of the bounding rectangle
            supplied to the Draw method, and the markings that make up the plot.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2D.TitleColor">
            <summary>
            Sets the title to be drawn using a solid brush of this color.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2D.TitleBrush">
            <summary>
            The brush used for drawing the title.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2D.PlotBackColor">
            <summary>
            A color used to paint the plot background. Mutually exclusive with PlotBackImage and PlotBackBrush
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2D.PlotBackImage">
            <summary>
            An imaged used to paint the plot background. Mutually exclusive with PlotBackColor and PlotBackBrush
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2D.PlotBackBrush">
            <summary>
            A Rectangle brush used to paint the plot background. Mutually exclusive with PlotBackColor and PlotBackBrush
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2D.SmoothingMode">
            <summary>
            Smoothing mode to use when drawing plots.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2D.Legend">
            <summary>
            Legend to use. If this property is null [default], then the plot
            surface will have no corresponding legend.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2D.AutoScaleTitle">
            <summary>
            Whether or not the title will be scaled according to size of the plot surface.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2D.AutoScaleAutoGeneratedAxes">
            <summary>
            When plots are added to the plot surface, the axes they are attached to
            are immediately modified to reflect data of the plot. If 
            AutoScaleAutoGeneratedAxes is true when a plot is added, the axes will
            be turned in to auto scaling ones if they are not already [tick marks,
            tick text and label size scaled to size of plot surface]. If false,
            axes will not be autoscaling.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2D.Drawables">
            <summary>
            Gets an array list containing all drawables currently added to the PlotSurface2D.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.PlotSurface2D.LegendZOrder">
            <summary>
            Setting this value determines the order (relative to IDrawables added to the plot surface)
            that the legend is drawn.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.PlotSurface2D.XAxisPosition">
            <summary>
            Possible positions of the X axis.
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.PlotSurface2D.XAxisPosition.Top">
            <summary>
            X axis is on the top.
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.PlotSurface2D.XAxisPosition.Bottom">
            <summary>
            X axis is on the bottom.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.PlotSurface2D.YAxisPosition">
            <summary>
            Possible positions of the Y axis.
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.PlotSurface2D.YAxisPosition.Left">
            <summary>
            Y axis on the left.
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.PlotSurface2D.YAxisPosition.Right">
            <summary>
            Y axis on the right.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.PointD">
            <summary>
            Represtents a point in two-dimensional space. Used for representation
            of points world coordinates.
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.PointD.X">
            <summary>
            X-Coordinate of the point.
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.PointD.Y">
            <summary>
            Y-Coordinate of the point.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.PointD.#ctor(System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="x">X-Coordinate of the point.</param>
            <param name="y">Y-Coordinate of the point.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.PointD.ToString">
            <summary>
            returns a string representation of the point.
            </summary>
            <returns>string representation of the point.</returns>
        </member>
        <member name="T:Alt.GUI.NPlot.IRectangleBrush">
            <summary>
            Classes that implement this interface can provide a brush 
            sized according to a given rectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.IRectangleBrush.Get(Alt.Sketch.RectI)">
            <summary>
            Gets a brush according to the supplied rectangle.
            </summary>
            <param name="rectangle">the rectangle used to construct the brush</param>
            <returns>The brush</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.IRectangleBrush.Get(Alt.Sketch.Rect)">
            <summary>
            Gets a brush according to the supplied rectangle.
            </summary>
            <param name="rectangle">the rectangle used to construct the brush</param>
            <returns>The brush</returns>
        </member>
        <member name="T:Alt.GUI.NPlot.RectangleBrushes">
            <summary>
            Collection of useful brushes.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.RectangleBrushes.Solid">
            <summary>
            A solid brush
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.RectangleBrushes.Solid.#ctor(Alt.Sketch.Color)">
            <summary>
            Constructor
            </summary>
            <param name="c">brush color</param>
        </member>
        <member name="M:Alt.GUI.NPlot.RectangleBrushes.Solid.Get(Alt.Sketch.RectI)">
            <summary>
            Gets a brush according to the supplied rectangle.
            </summary>
            <param name="rectangle">the rectangle used to construct the brush</param>
            <returns>The solid brush</returns>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.AliceBlue">
            <summary>
            AliceBlue solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.AntiqueWhite">
            <summary>
            AntiqueWhite solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Aqua">
            <summary>
            Aqua solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Aquamarine">
            <summary>
            Aquamarine solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Azure">
            <summary>
            Azure solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Beige">
            <summary>
            Beige solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Bisque">
            <summary>
            Bisque solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Black">
            <summary>
            Black solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.BlanchedAlmond">
            <summary>
            BlanchedAlmond solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Blue">
            <summary>
            Blue solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.BlueViolet">
            <summary>
            BlueViolet solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Brown">
            <summary>
            Brown solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.BurlyWood">
            <summary>
            BurlyWood solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.CadetBlue">
            <summary>
            CadetBlue solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Chartreuse">
            <summary>
            Chartreuse solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Chocolate">
            <summary>
            Chocolate solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Coral">
            <summary>
            Coral solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.CornflowerBlue">
            <summary>
            CornflowerBlue solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Cornsilk">
            <summary>
            Cornsilk solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Crimson">
            <summary>
            Crimson solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Cyan">
            <summary>
            Cyan solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.DarkBlue">
            <summary>
            DarkBlue solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.DarkCyan">
            <summary>
            DarkCyan solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.DarkGoldenrod">
            <summary>
            DarkGoldenrod solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.DarkGray">
            <summary>
            DarkGray solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.DarkGreen">
            <summary>
            DarkGreen solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.DarkKhaki">
            <summary>
            DarkKhaki solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.DarkMagenta">
            <summary>
            DarkMagenta solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.DarkOliveGreen">
            <summary>
            DarkOliveGreen solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.DarkOrange">
            <summary>
            DarkOrange solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.DarkOrchid">
            <summary>
            DarkOrchid solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.DarkRed">
            <summary>
            DarkRed solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.DarkSalmon">
            <summary>
            DarkSalmon solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.DarkSeaGreen">
            <summary>
            DarkSeaGreen solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.DarkSlateBlue">
            <summary>
            DarkSlateBlue solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.DarkSlateGray">
            <summary>
            DarkSlateGray solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.DarkTurquoise">
            <summary>
            DarkTurquoise solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.DarkViolet">
            <summary>
            DarkViolet solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.DeepPink">
            <summary>
            DeepPink solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.DeepSkyBlue">
            <summary>
            DeepSkyBlue solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.DimGray">
            <summary>
            DimGray solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.DodgerBlue">
            <summary>
            DodgerBlue solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Firebrick">
            <summary>
            Firebrick solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.FloralWhite">
            <summary>
            FloralWhite solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.ForestGreen">
            <summary>
            ForestGreen solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Fuchsia">
            <summary>
            Fuchsia solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Gainsboro">
            <summary>
            Gainsboro solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.GhostWhite">
            <summary>
            GhostWhite solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Gold">
            <summary>
            Gold solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Goldenrod">
            <summary>
            Goldenrod solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Gray">
            <summary>
            Gray  solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Green">
            <summary>
            Green solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.GreenYellow">
            <summary>
            GreenYellow solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Honeydew">
            <summary>
            Honeydew solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.HotPink">
            <summary>
            HotPink solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.IndianRed">
            <summary>
            IndianRed solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Indigo">
            <summary>
            Indigo solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Ivory">
            <summary>
            Ivory solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Khaki">
            <summary>
            Khaki solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Lavender">
            <summary>
            Lavender solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.LavenderBlush">
            <summary>
            LavenderBlush solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.LawnGreen">
            <summary>
            LawnGreen solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.LemonChiffon">
            <summary>
            LemonChiffon solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.LightBlue">
            <summary>
            LightBlue solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.LightCoral">
            <summary>
            LightCoral solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.LightCyan">
            <summary>
            LightCyan solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.LightGoldenrodYellow">
            <summary>
            LightGoldenrodYellow solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.LightGray">
            <summary>
            LightGray solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.LightGreen">
            <summary>
            LightGreen solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.LightPink">
            <summary>
            LightPink solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.LightSalmon">
            <summary>
            LightSalmon solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.LightSeaGreen">
            <summary>
            LightSeaGreen solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.LightSkyBlue">
            <summary>
            LightSkyBlue solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.LightSlateGray">
            <summary>
            LightSlateGray solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.LightSteelBlue">
            <summary>
            LightSteelBlue solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.LightYellow">
            <summary>
            LightYellow solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Lime">
            <summary>
            Lime solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.LimeGreen">
            <summary>
            LimeGreen solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Linen">
            <summary>
            Color.Linen solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Magenta">
            <summary>
            Color.Magenta solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Maroon">
            <summary>
            Maroon solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.MediumAquamarine">
            <summary>
            MediumAquamarine solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.MediumBlue">
            <summary>
            MediumBlue solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.MediumOrchid">
            <summary>
            MediumOrchid  solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.MediumPurple">
            <summary>
            MediumPurple solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.MediumSeaGreen">
            <summary>
            MediumSeaGreen solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.MediumSlateBlue">
            <summary>
            MediumSlateBlue solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.MediumSpringGreen">
            <summary>
            MediumSpringGreen solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.MediumTurquoise">
            <summary>
            MediumTurquoise solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.MediumVioletRed">
            <summary>
            MediumVioletRed solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.MidnightBlue">
            <summary>
            MidnightBlue  solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.MintCream">
            <summary>
            MintCream solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.MistyRose">
            <summary>
            MistyRose solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Moccasin">
            <summary>
            Moccasin solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.NavajoWhite">
            <summary>
            NavajoWhite solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Navy">
            <summary>
            Navy solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.OldLace">
            <summary>
            OldLace solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Olive">
            <summary>
            Olive solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.OliveDrab">
            <summary>
            OliveDrab solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Orange">
            <summary>
            Orange solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.OrangeRed">
            <summary>
            OrangeRed solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Orchid">
            <summary>
            Orchid solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.PaleGoldenrod">
            <summary>
            PaleGoldenrod solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.PaleGreen">
            <summary>
            PaleGreen solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.PaleTurquoise">
            <summary>
            PaleTurquoise solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.PaleVioletRed">
            <summary>
            PaleVioletRed solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.PapayaWhip">
            <summary>
            PapayaWhip solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.PeachPuff">
            <summary>
            PeachPuff solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Peru">
            <summary>
            Peru solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Pink">
            <summary>
            Pink solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Plum">
            <summary>
            Plum solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.PowderBlue">
            <summary>
            PowderBlue solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Purple">
            <summary>
            Purple solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Red">
            <summary>
            Red solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.RosyBrown">
            <summary>
            RosyBrown solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.RoyalBlue">
            <summary>
            RoyalBlue solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.SaddleBrown">
            <summary>
            SaddleBrown solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Salmon">
            <summary>
            Salmon solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.SandyBrown">
            <summary>
            SandyBrown solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.SeaGreen">
            <summary>
            SeaGreen solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.SeaShell">
            <summary>
            SeaShell solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Sienna">
            <summary>
            Sienna solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Silver">
            <summary>
            Silver solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.SkyBlue">
            <summary>
            SkyBlue solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.SlateBlue">
            <summary>
            SlateBlue solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.SlateGray">
            <summary>
            SlateGray solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Snow">
            <summary>
            Snow solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.SpringGreen">
            <summary>
            SpringGreen solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.SteelBlue">
            <summary>
            SteelBlue solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Tan">
            <summary>
            Tan solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Teal">
            <summary>
            Teal solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Thistle">
            <summary>
            Thistle solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Tomato">
            <summary>
            Tomato solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Transparent">
            <summary>
            Transparent solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Turquoise">
            <summary>
            Turquoise solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Violet">
            <summary>
            Violet solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Wheat">
            <summary>
            Wheat solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.White">
            <summary>
            White solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.WhiteSmoke">
            <summary>
            WhiteSmoke solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.Yellow">
            <summary>
            Yellow solid brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Solid.YellowGreen">
            <summary>
            YellowGreen solid brush.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.RectangleBrushes.Horizontal">
            <summary>
            A brush with horizontal gradient.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.RectangleBrushes.Horizontal.#ctor(Alt.Sketch.Color,Alt.Sketch.Color)">
            <summary>
            Constructor
            </summary>
            <param name="c1">Color on left.</param>
            <param name="c2">Color on right.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.RectangleBrushes.Horizontal.Get(Alt.Sketch.RectI)">
            <summary>
            Gets a brush according to the supplied rectangle.
            </summary>
            <param name="rectangle">the rectangle used to construct the brush</param>
            <returns>The horizontal brush</returns>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Horizontal.FaintBlueFade">
            <summary>
            Default brush - fades from faint blue to white.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Horizontal.FaintRedFade">
            <summary>
            Default brush - fades from faint red to white.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Horizontal.FaintGreenFade">
            <summary>
            Default brush - fades from faint red to white.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.RectangleBrushes.Vertical">
            <summary>
            A brush with vertical gradient.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.RectangleBrushes.Vertical.#ctor(Alt.Sketch.Color,Alt.Sketch.Color)">
            <summary>
            Constructor
            </summary>
            <param name="c1">top color [or bottom?]</param>
            <param name="c2">bottom color [or top?]</param>
        </member>
        <member name="M:Alt.GUI.NPlot.RectangleBrushes.Vertical.Get(Alt.Sketch.RectI)">
            <summary>
            Gets a brush according to the supplied rectangle.
            </summary>
            <param name="rectangle">the rectangle used to construct the brush</param>
            <returns>The vertical brush</returns>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Vertical.FaintBlueFade">
            <summary>
            Default brush - fades from faint blue to white.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Vertical.FaintRedFade">
            <summary>
            Default brush - fades from faint red to white.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.Vertical.FaintGreenFade">
            <summary>
            Default brush - fades from faint red to white.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.RectangleBrushes.HorizontalCenterFade">
            <summary>
            A brush with horizontal gradient that fades into center then out again.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.RectangleBrushes.HorizontalCenterFade.#ctor(Alt.Sketch.Color,Alt.Sketch.Color)">
            <summary>
            Constructor
            </summary>
            <param name="c1">inner color</param>
            <param name="c2">outer color</param>
        </member>
        <member name="M:Alt.GUI.NPlot.RectangleBrushes.HorizontalCenterFade.Get(Alt.Sketch.RectI)">
            <summary>
            Gets a brush according to the supplied rectangle.
            </summary>
            <param name="rectangle">the rectangle used to construct the brush</param>
            <returns>The horizontal center fade brush</returns>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.HorizontalCenterFade.FaintBlueFade">
            <summary>
            Default brush - fades from faint blue to white.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.HorizontalCenterFade.FaintRedFade">
            <summary>
            Default brush - fades from faint red to white.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.HorizontalCenterFade.FaintGreenFade">
            <summary>
            Default brush - fades from faint red to white.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.RectangleBrushes.VerticalCenterFade">
            <summary>
            Brush with vertical gradient that fades into center then out again.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.RectangleBrushes.VerticalCenterFade.#ctor(Alt.Sketch.Color,Alt.Sketch.Color)">
            <summary>
            Constructor
            </summary>
            <param name="c1">inner color</param>
            <param name="c2">outer color</param>
        </member>
        <member name="M:Alt.GUI.NPlot.RectangleBrushes.VerticalCenterFade.Get(Alt.Sketch.RectI)">
            <summary>
            Gets a brush according to the supplied rectangle.
            </summary>
            <param name="rectangle">the rectangle used to construct the brush</param>
            <returns>The vertical center fade brush</returns>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.VerticalCenterFade.FaintBlueFade">
            <summary>
            Default brush - fades from faint blue to white.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.VerticalCenterFade.FaintRedFade">
            <summary>
            Default brush - fades from faint red to white.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleBrushes.VerticalCenterFade.FaintGreenFade">
            <summary>
            Default brush - fades from faint red to white.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.RectangleD">
            <summary>
            Stores a set of four double numbers that represent the location and size of
            a rectangle. TODO: implement more functionality similar to Drawing.Rect.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.RectangleD.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleD.Height">
            <summary>
            The rectangle height.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleD.Width">
            <summary>
            The rectangle width.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleD.X">
            <summary>
            The minimum x coordinate of the rectangle.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.RectangleD.Y">
            <summary>
            The minimum y coordinate of the rectangle.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.SequenceAdapter">
            <summary>
            This class is responsible for interpreting the various ways you can 
            specify data to plot objects using the DataSource, DataMember, ordinateData
            and AbscissaData properties. It is a bridge that provides access to this
            data via a single interface.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.SequenceAdapter.#ctor(System.Object,System.String,System.Object,System.Object)">
            <summary>
            Constructor. The data source specifiers must be specified here.
            </summary>
            <param name="dataSource">The source containing a list of values to plot.</param>
            <param name="dataMember">The specific data member in a multimember data source to get data from.</param>
            <param name="ordinateData">The source containing a list of values to plot on the ordinate axis, or a the name of the column to use for this data.</param>
            <param name="abscissaData">The source containing a list of values to plot on the abscissa axis, or a the name of the column to use for this data.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.SequenceAdapter.SuggestXAxis">
            <summary>
            Returns an x-axis that is suitable for drawing the data.
            </summary>
            <returns>A suitable x-axis.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.SequenceAdapter.SuggestYAxis">
            <summary>
            Returns a y-axis that is suitable for drawing the data.
            </summary>
            <returns>A suitable y-axis.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.SequenceAdapter.WriteData(System.Text.StringBuilder,Alt.GUI.NPlot.RectangleD,System.Boolean)">
            <summary>
            Writes data out as text. 
            </summary>
            <param name="sb">StringBuilder to write to.</param>
            <param name="region">Only write out data in this region if onlyInRegion is true.</param>
            <param name="onlyInRegion">If true, only data in region is written, else all data is written.</param>
        </member>
        <member name="P:Alt.GUI.NPlot.SequenceAdapter.Count">
            <summary>
            Returns the number of points.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.SequenceAdapter.Item(System.Int32)">
            <summary>
            Returns the ith point.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.StartStep">
            <summary>
            Encapsulates a Start and Step value. This is useful for specifying a regularly spaced set of 
            abscissa values.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.StartStep.#ctor(System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="start">the first value of the set of points specified by this object.</param>
            <param name="step">the step that specifies the separation between successive points.</param>
        </member>
        <member name="P:Alt.GUI.NPlot.StartStep.Start">
            <summary>
            The first value of the set of points specified by this object.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.StartStep.Step">
            <summary>
            The step that specifies the separation between successive points.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.StepGradient">
            <summary>
            Class for creating a rainbow legend.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.StepGradient.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.StepGradient.#ctor(Alt.GUI.NPlot.StepGradient.Type)">
            <summary>
            Constructor
            </summary>
            <param name="stepType">type of gradient</param>
        </member>
        <member name="M:Alt.GUI.NPlot.StepGradient.GetColor(System.Double)">
            <summary>
            Gets a color corresponding to a number between 0.0 and 1.0 inclusive. The color will
            be a linear interpolation of the min and max colors.
            </summary>
            <param name="prop">the number to get corresponding color for (between 0.0 and 1.0)</param>
            <returns>The color corresponding to the supplied number.</returns>
        </member>
        <member name="P:Alt.GUI.NPlot.StepGradient.StepType">
            <summary>
            Sets the type of step gradient.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.StepGradient.Type">
            <summary>
            Types of step gradient defined.
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.StepGradient.Type.Rainbow">
            <summary>
            Rainbow gradient type (colors of the rainbow)
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.StepGradient.Type.RGB">
            <summary>
            RGB gradient type (red, green blud).
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.StepPlot">
            <summary>
            Encapsulates functionality for plotting data as a stepped line.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.StepPlot.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.StepPlot.Draw(Alt.Sketch.Graphics,Alt.GUI.NPlot.PhysicalAxis,Alt.GUI.NPlot.PhysicalAxis)">
            <summary>
            Draws the step plot on a GDI+ surface against the provided x and y axes.
            </summary>
            <param name="g">The GDI+ surface on which to draw.</param>
            <param name="xAxis">The X-Axis to draw against.</param>
            <param name="yAxis">The Y-Axis to draw against.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.StepPlot.SuggestXAxis">
            <summary>
            Returns an X-axis suitable for use by this plot. The axis will be one that is just long
            enough to show all data.
            </summary>
            <returns>X-axis suitable for use by this plot.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.StepPlot.SuggestYAxis">
            <summary>
            Returns an Y-axis suitable for use by this plot. The axis will be one that is just long
            enough to show all data.
            </summary>
            <returns>Y-axis suitable for use by this plot.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.StepPlot.DrawInLegend(Alt.Sketch.Graphics,Alt.Sketch.RectI)">
            <summary>
            Draws a representation of this plot in the legend.
            </summary>
            <param name="g">The graphics surface on which to draw.</param>
            <param name="startEnd">A rectangle specifying the bounds of the area in the legend set aside for drawing.</param>
        </member>
        <member name="P:Alt.GUI.NPlot.StepPlot.Center">
            <summary>
            Gets or sets whether or not steps should be centered. If true, steps will be centered on the
            X abscissa values. If false, the step corresponding to a given x-value will be drawn between 
            this x-value and the next x-value at the current y-height.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.StepPlot.Pen">
            <summary>
            The pen used to draw the plot
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.StepPlot.Color">
            <summary>
            The color of the pen used to draw lines in this plot.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.StepPlot.HideVerticalSegments">
            <summary>
            If true, then vertical lines are hidden.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.StepPlot.HideHorizontalSegments">
            <summary>
            If true, then vertical lines are hidden.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.StepPlot.WidthScale">
            <summary>
            The horizontal line length is multiplied by this amount. Default
            corresponds to a value of 1.0.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.TextItem">
            <summary>
            This class implements drawing text against two physical axes.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.TextItem.#ctor(Alt.GUI.NPlot.PointD,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="position">The position the text starts.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.TextItem.Draw(Alt.Sketch.Graphics,Alt.GUI.NPlot.PhysicalAxis,Alt.GUI.NPlot.PhysicalAxis)">
            <summary>
            Draws the text on a plot surface.
            </summary>
            <param name="g">graphics surface on which to draw</param>
            <param name="xAxis">The X-Axis to draw against.</param>
            <param name="yAxis">The Y-Axis to draw against.</param>
        </member>
        <member name="P:Alt.GUI.NPlot.TextItem.Text">
            <summary>
            Text associated.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.TextItem.Start">
            <summary>
            The starting point for the text.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.TextItem.TextBrush">
            <summary>
            The brush used to draw the text.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.TextItem.TextColor">
            <summary>
            Set the text to be drawn with a solid brush of this color.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.TextItem.TextFont">
            <summary>
            The font used to draw the text associated with the arrow.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.TradingDateTimeAxis">
            <summary>
            Provides a DateTime axis that removes non-trading days.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.TradingDateTimeAxis.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.TradingDateTimeAxis.#ctor(Alt.GUI.NPlot.Axis)">
            <summary>
            Copy Constructor
            </summary>
            <param name="a">construct a TradingDateTimeAxis based on this provided axis.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.TradingDateTimeAxis.Init">
            <summary>
            Helper function for constructors.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.TradingDateTimeAxis.Clone">
            <summary>
            Deep copy of DateTimeAxis.
            </summary>
            <returns>A copy of the DateTimeAxis Class.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.TradingDateTimeAxis.DoClone(Alt.GUI.NPlot.TradingDateTimeAxis,Alt.GUI.NPlot.TradingDateTimeAxis)">
            <summary>
            Helper method for Clone.
            </summary>
            <param name="a">The cloned target object.</param>
            <param name="b">The cloned source object.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.TradingDateTimeAxis.WorldToPhysical(System.Double,Alt.Sketch.Point,Alt.Sketch.Point,System.Boolean)">
            <summary>
            World to physical coordinate transform.
            </summary>
            <param name="coord">The coordinate value to transform.</param>
            <param name="physicalMin">The physical position corresponding to the world minimum of the axis.</param>
            <param name="physicalMax">The physical position corresponding to the world maximum of the axis.</param>
            <param name="clip">if false, then physical value may extend outside worldMin / worldMax. If true, the physical value returned will be clipped to physicalMin or physicalMax if it lies outside this range.</param>
            <returns>The transformed coordinates.</returns>
            <remarks>Not sure how much time is spent in this often called function. If it's lots, then
            worth optimizing (there is scope to do so).</remarks>
        </member>
        <member name="M:Alt.GUI.NPlot.TradingDateTimeAxis.PhysicalToWorld(Alt.Sketch.Point,Alt.Sketch.Point,Alt.Sketch.Point,System.Boolean)">
            <summary>
            Transforms a physical coordinate to an axis world 
            coordinate given the physical extremites of the axis.
            </summary>
            <param name="p">the point to convert</param>
            <param name="physicalMin">the physical minimum extremity of the axis</param>
            <param name="physicalMax">the physical maximum extremity of the axis</param>
            <param name="clip">whether or not to clip the world value to lie in the range of the axis if it is outside.</param>
            <returns></returns>
        </member>
        <member name="M:Alt.GUI.NPlot.TradingDateTimeAxis.SparseWorldRemap(System.Double)">
            <summary>
            Remap a world coordinate into a "virtual" world, where non-trading dates and times are collapsed.
            </summary>
            <remarks>
            This code works under asumption that there are exactly 24*60*60 seconds in a day
            This is strictly speaking not correct but apparently .NET 2.0 does not count leap seconds.
            Luckilly, Ticks == 0  =~= 0001-01-01T00:00 =~= Monday
            First tried a version fully on floating point arithmetic,
            but failed hopelessly due to rounding errors.
            </remarks>
            <param name="coord">world coordinate to transform.</param>
            <returns>equivalent virtual world coordinate.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.TradingDateTimeAxis.ReverseSparseWorldRemap(System.Double)">
            <summary>
            Remaps a "virtual" world coordinates back to true world coordinates.
            </summary>
            <param name="coord">virtual world coordinate to transform.</param>
            <returns>equivalent world coordinate.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.TradingDateTimeAxis.SparseWorldAdd(System.Double,System.Double)">
            <summary>
            Adds a delta amount to the given world coordinate in such a way that
            all "sparse gaps" are skipped.  In other words, the returned value is
            in delta distance from the given in the "virtual" world.
            </summary>
            <param name="coord">world coordinate to shift.</param>
            <param name="delta">shif amount in "virtual" units.</param>
            <returns></returns>
        </member>
        <member name="M:Alt.GUI.NPlot.TradingDateTimeAxis.WithinTradingHours(System.Double)">
            <summary>
            Check whether the given coordinate falls within defined trading hours.
            </summary>
            <param name="coord">world coordinate in ticks to check.</param>
            <returns>true if in trading hours, false if in non-trading gap.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.TradingDateTimeAxis.OnTradingDays(System.Double)">
            <summary>
            Check whether the given coordinate falls on trading days.
            </summary>
            <param name="coord">world coordinate in ticks to check.</param>
            <returns>true if on Mon - Fri.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.TradingDateTimeAxis.WorldTickPositions_FirstPass(Alt.Sketch.PointI,Alt.Sketch.PointI,Alt.Collections.ArrayList@,Alt.Collections.ArrayList@)">
            <summary>
            Determines the positions of all Large and Small ticks.
            </summary>
            <remarks>
            The method WorldTickPositions_FirstPass() from the base works just fine, except that it
            does not account for non-trading gaps in time, therefore, when less than two days are visible
            an own algorithm is used (to show intraday time).  Otherwise the base class implementation is used
            but the output is corrected to remove ticks on non-trading days (Sat, Sun).
            </remarks>
            <param name="physicalMin">The physical position corresponding to the world minimum of the axis.</param>
            <param name="physicalMax">The physical position corresponding to the world maximum of the axis.</param>
            <param name="largeTickPositions">ArrayList containing the positions of the large ticks.</param>
            <param name="smallTickPositions">null</param>
        </member>
        <member name="M:Alt.GUI.NPlot.TradingDateTimeAxis.LargeTickLabel(System.DateTime)">
            <summary>
            Get an appropriate label name, given the DateTime of a label
            </summary>
            <param name="tickDate">the DateTime to get the label name for</param>
            <returns>A label name appropriate to the supplied DateTime.</returns>
        </member>
        <member name="P:Alt.GUI.NPlot.TradingDateTimeAxis.WorldMin">
            <summary>
            The axis world min value.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.TradingDateTimeAxis.WorldMax">
            <summary>
            The axis world max value.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.TradingDateTimeAxis.StartTradingTime">
            <summary>
            Optional time at which trading begins.
            All data points earlied than that (same day) will be collapsed.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.TradingDateTimeAxis.EndTradingTime">
            <summary>
            Optional time at which trading ends.
            All data points later than that (same day) will be collapsed.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.TradingDateTimeAxis.IsLinear">
            <summary>
            Get whether or not this axis is linear.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.TradingDateTimeAxis.SparseWorldLength">
            <summary>
            World extent in virtual (sparse) units.
            </summary>
        </member>
        <member name="T:Alt.GUI.NPlot.Transform2D">
            <summary>
            Encapsulates functionality for transforming world to physical coordinates optimally.
            </summary>
            <remarks>The existence of the whole ITransform2D thing might need revising. Not convinced it's the best way.</remarks>
        </member>
        <member name="M:Alt.GUI.NPlot.Transform2D.GetTransformer(Alt.GUI.NPlot.PhysicalAxis,Alt.GUI.NPlot.PhysicalAxis)">
            <summary>
            Constructs the optimal ITransform2D object for the supplied x and y axes.
            </summary>
            <param name="xAxis">The xAxis to use for the world to physical transform.</param>
            <param name="yAxis">The yAxis to use for the world to physical transform.</param>
            <returns>An ITransform2D derived object for converting from world to physical coordinates.</returns>
        </member>
        <member name="T:Alt.GUI.NPlot.Transform2D.DefaultTransform2D">
            <summary>
            This class does world -> physical transforms for the general case
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.Transform2D.DefaultTransform2D.#ctor(Alt.GUI.NPlot.PhysicalAxis,Alt.GUI.NPlot.PhysicalAxis)">
            <summary>
            Constructor
            </summary>
            <param name="xAxis">The x-axis to use for transforms</param>
            <param name="yAxis">The y-axis to use for transforms</param>
        </member>
        <member name="M:Alt.GUI.NPlot.Transform2D.DefaultTransform2D.Transform(System.Double,System.Double)">
            <summary>
            Transforms the given world point to physical coordinates
            </summary>
            <param name="x">x coordinate of world point to transform.</param>
            <param name="y">y coordinate of world point to transform.</param>
            <returns>the corresponding physical point.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.Transform2D.DefaultTransform2D.Transform(Alt.GUI.NPlot.PointD)">
            <summary>
            Transforms the given world point to physical coordinates
            </summary>
            <param name="worldPoint">the world point to transform</param>
            <returns>the corresponding physical point</returns>
        </member>
        <member name="T:Alt.GUI.NPlot.Transform2D.FastTransform2D">
            <summary>
            This class does highly efficient world->physical and physical->world transforms
            for linear axes. 
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.Transform2D.FastTransform2D.#ctor(Alt.GUI.NPlot.PhysicalAxis,Alt.GUI.NPlot.PhysicalAxis)">
            <summary>
            Constructor
            </summary>
            <param name="xAxis">The x-axis to use for transforms</param>
            <param name="yAxis">The y-axis to use for transforms</param>
        </member>
        <member name="M:Alt.GUI.NPlot.Transform2D.FastTransform2D.Transform(System.Double,System.Double)">
            <summary>
            Transforms the given world point to physical coordinates
            </summary>
            <param name="x">x coordinate of world point to transform.</param>
            <param name="y">y coordinate of world point to transform.</param>
            <returns>the corresponding physical point.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.Transform2D.FastTransform2D.Transform(Alt.GUI.NPlot.PointD)">
            <summary>
            Transforms the given world point to physical coordinates
            </summary>
            <param name="worldPoint">the world point to transform</param>
            <returns>the corresponding physical point</returns>
        </member>
        <member name="T:Alt.GUI.NPlot.Utils">
            <summary>
            General purpose utility functions used internally.
            </summary>
        </member>
        <member name="F:Alt.GUI.NPlot.Utils.Epsilon">
            <summary>
            Numbers less than this are considered insignificant. This number is
            bigger than double.Epsilon.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.Utils.DoubleEqual(System.Double,System.Double)">
            <summary>
            Returns true if the absolute difference between parameters is less than Epsilon
            </summary>
            <param name="a">first number to compare</param>
            <param name="b">second number to compare</param>
            <returns>true if equal, false otherwise</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.Utils.Swap(System.Double@,System.Double@)">
            <summary>
            Swaps the value of two doubles.
            </summary>
            <param name="a">first value to swap.</param>
            <param name="b">second value to swap.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.Utils.Distance(Alt.Sketch.Point,Alt.Sketch.Point)">
            <summary>
            Calculate the distance between two points, a and b.
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>Distance between points a and b</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.Utils.Distance(Alt.Sketch.PointI,Alt.Sketch.PointI)">
            <summary>
            Calculate the distance between two points, a and b.
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>Distance between points a and b</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.Utils.ToDouble(System.Object)">
            <summary>
            Converts an object of type DateTime or IConvertible to double representation. 
            Mapping is 1:1. Note: the System.Convert.ToDouble method can not convert a boxed 
            DateTime to double. This implementation can - but the "is" check probably makes
            it much slower.
            </summary>
            <remarks>Compare speed with System.Convert.ToDouble and revise code that calls this if significant speed difference.</remarks>
            <param name="o">The object to convert to double.</param>
            <returns>double value associated with the object.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.Utils.ArrayMinMax(System.Collections.IList,System.Double@,System.Double@)">
            <summary>
            Returns the minimum and maximum values in an IList. The members of the list
            can be of different types - any type for which the function Utils.ConvertToDouble
            knows how to convert into a double.
            </summary>
            <param name="a">The IList to search.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>true if min max set, false otherwise (a == null or zero length).</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.Utils.RowArrayMinMax(Alt.Data.DataRowCollection,System.Double@,System.Double@,System.String)">
            <summary>
            Returns the minimum and maximum values in a DataRowCollection.
            </summary>
            <param name="rows">The row collection to search.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="columnName">The name of the column in the row collection to search over.</param>
            <returns>true is min max set, false otherwise (a = null or zero length).</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.Utils.DataViewArrayMinMax(Alt.Data.DataView,System.Double@,System.Double@,System.String)">
            <summary>
            Returns the minimum and maximum values in a DataView.
            </summary>
            <param name="data">The DataView to search.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="columnName">The name of the column in the row collection to search over.</param>
            <returns>true is min max set, false otherwise (a = null or zero length).</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.Utils.UnitVector(Alt.Sketch.Point,Alt.Sketch.Point)">
            <summary>
            Returns unit vector along the line  a->b.
            </summary>
            <param name="a">line start point.</param>
            <param name="b">line end point.</param>
            <returns>The unit vector along the specified line.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.Utils.ScaleFont(Alt.Sketch.Font,System.Double)">
            <summary>
            Get a Font exactly the same as the passed in one, except for scale factor.
            </summary>
            <param name="initial">The font to scale.</param>
            <param name="scale">Scale by this factor.</param>
            <returns>The scaled font.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.Utils.TiledImage(Alt.Sketch.Bitmap,Alt.Sketch.SizeI)">
            <summary>
            Creates a bitmap from another that is tiled size times in each direction.
            </summary>
            <param name="image">bitmap to tile</param>
            <param name="size">number of times to tile in each direction.</param>
            <returns>the tiled bitmap.</returns>
        </member>
        <member name="T:Alt.GUI.NPlot.VerticalLine">
            <summary>
            Encapsulates functionality for drawing a vertical line on a plot surface.
            </summary>
        </member>
        <member name="M:Alt.GUI.NPlot.VerticalLine.#ctor(System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="abscissaValue">abscissa (X) value of line.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.VerticalLine.#ctor(System.Double,Alt.Sketch.Color)">
            <summary>
            Constructor
            </summary>
            <param name="abscissaValue">abscissa (X) value of line.</param>
            <param name="color">draw the line using this color.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.VerticalLine.#ctor(System.Double,Alt.Sketch.Pen)">
            <summary>
            Constructor
            </summary>
            <param name="abscissaValue">abscissa (X) value of line.</param>
            <param name="pen">Pen to use to draw the line.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.VerticalLine.DrawInLegend(Alt.Sketch.Graphics,Alt.Sketch.RectI)">
            <summary>
            Draws a representation of the line in the legend
            </summary>
            <param name="g">The graphics surface on which to draw.</param>
            <param name="startEnd">A rectangle specifying the bounds of the area in the legend set aside for drawing.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.VerticalLine.SuggestXAxis">
            <summary>
            Returns an x-axis that is suitable for drawing this plot.
            </summary>
            <returns>A suitable x-axis.</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.VerticalLine.SuggestYAxis">
            <summary>
            Returns null indicating that y extremities of the line are variable.
            </summary>
            <returns>null</returns>
        </member>
        <member name="M:Alt.GUI.NPlot.VerticalLine.WriteData(System.Text.StringBuilder,Alt.GUI.NPlot.RectangleD,System.Boolean)">
            <summary>
            Writes text data describing the vertical line object to the supplied string builder. It is 
            possible to specify that the data will be written only if the line is in the specified 
            region.
            </summary>
            <param name="sb">the StringBuilder object to write to.</param>
            <param name="region">a region used if onlyInRegion is true.</param>
            <param name="onlyInRegion">If true, data will be written only if the line is in the specified region.</param>
        </member>
        <member name="M:Alt.GUI.NPlot.VerticalLine.Draw(Alt.Sketch.Graphics,Alt.GUI.NPlot.PhysicalAxis,Alt.GUI.NPlot.PhysicalAxis)">
            <summary>
            Draws the vertical line plot on a GDI+ surface against the provided x and y axes.
            </summary>
            <param name="g">The GDI+ surface on which to draw.</param>
            <param name="xAxis">The X-Axis to draw against.</param>
            <param name="yAxis">The Y-Axis to draw against.</param>
        </member>
        <member name="P:Alt.GUI.NPlot.VerticalLine.Label">
            <summary>
            A label to associate with the plot - used in the legend.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.VerticalLine.ShowInLegend">
            <summary>
            Whether or not to include an entry for this plot in the legend if it exists.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.VerticalLine.AbscissaValue">
            <summary>
            abscissa (X) value to draw horizontal line at.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.VerticalLine.Pen">
            <summary>
            Pen to use to draw the horizontal line.
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.VerticalLine.PixelIndent">
            <summary>
            Each end of the line is indented by this many pixels. 
            </summary>
        </member>
        <member name="P:Alt.GUI.NPlot.VerticalLine.LengthScale">
            <summary>
            The line length is multiplied by this amount. Default
            corresponds to a value of 1.0.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.ColorComboBox">
            <summary>
            A combo box control for selection XColor values.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.ColorComboBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.ColorComboBox"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.ColorComboBox.OnDropDownStyleChanged(System.EventArgs)">
            <summary>
            Keep control a drop down combo box.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.ColorComboBox.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
            Sets the color with the selected item.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.ColorComboBox.OnDrawItem(Alt.GUI.DrawItemEventArgs)">
            <summary>
            Draw a color entry.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.ColorComboBox.Color">
            <summary>
            Gets or sets the custom color.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.ColorComboBox.ColorItem">
            <summary>
            Represents a combo box item.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.RenderMode">
            <summary>
            Specifies how to reander the preview.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.RenderMode.Direct">
            <summary>
            Draw immediately.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.RenderMode.Metafile">
            <summary>
            Draw using a metafile
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.RenderMode.Bitmap">
            <summary>
            Draw using a bitmap image.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Zoom">
            <summary>
            Defines a zoom factor used in the preview control.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Zoom.Mininum">
            <summary>
            The smallest possible zoom factor.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Zoom.Maximum">
            <summary>
            The largest possible zoom factor.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Zoom.Percent800">
            <summary>
            A pre-defined zoom factor.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Zoom.Percent600">
            <summary>
            A pre-defined zoom factor.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Zoom.Percent400">
            <summary>
            A pre-defined zoom factor.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Zoom.Percent200">
            <summary>
            A pre-defined zoom factor.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Zoom.Percent150">
            <summary>
            A pre-defined zoom factor.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Zoom.Percent100">
            <summary>
            A pre-defined zoom factor.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Zoom.Percent75">
            <summary>
            A pre-defined zoom factor.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Zoom.Percent50">
            <summary>
            A pre-defined zoom factor.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Zoom.Percent25">
            <summary>
            A pre-defined zoom factor.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Zoom.Percent10">
            <summary>
            A pre-defined zoom factor.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Zoom.BestFit">
            <summary>
            Sets the zoom factor so that the document fits horizontally into the window.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Zoom.TextFit">
            <summary>
            Sets the zoom factor so that the printable area of the document fits horizontally into the window.
            Currently not yet implemented and the same as ZoomBestFit.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Zoom.FullPage">
            <summary>
            Sets the zoom factor so that the whole document fits completely into the window.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Zoom.OriginalSize">
            <summary>
            Sets the zoom factor so that the document is displayed in its real physical size (based on the DPI information returned from the OS for the current monitor).
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.PagePreview">
            <summary>
            Represents a preview control for an XGraphics page. Can be used as an alternative to
            System.Windows.Forms.PrintPreviewControl.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.PagePreview.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.PagePreview"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.PagePreview.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.PagePreview.SetRenderEvent(Alt.GUI.PdfSharp.PagePreview.RenderEvent)">
            <summary>
            Sets a delagate that is invoked when the preview wants to be painted.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.PagePreview.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.PagePreview.OnZoomChanged(System.EventArgs)">
            <summary>
            Raises the ZoomChanged event when the zoom factor changed.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.PagePreview.OnPaintBackground(Alt.GUI.PaintEventArgs)">
            <summary>
            Paints the background with the sheet of paper.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.PagePreview.OnSizeChanged(System.EventArgs)">
            <summary>
            Recalculates the preview dimension.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.PagePreview.OnInvalidated(Alt.GUI.InvalidateEventArgs)">
            <summary>
            Invalidates the canvas.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.PagePreview.OnLayout(Alt.GUI.LayoutEventArgs)">
            <summary>
            Layouts the child controls.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.PagePreview.CalculatePreviewDimension(System.Boolean@)">
            <summary>
            Calculates all values for drawing the page preview.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.PagePreview.PaintBackground(Alt.Sketch.Graphics)">
            <summary>
            Paints the background and the empty page.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.PagePreview.DrawDash(Alt.Sketch.Graphics,Alt.Sketch.RectI)">
            <summary>
            Check clipping rectangle calculations.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.PagePreview.SetScrollBarRange">
            <summary>
            Adjusts scroll bars.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PagePreview.posOffset">
            <summary>
            Upper left corner of scroll area.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PagePreview.pageSize">
            <summary>
            Real page size in point.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PagePreview.virtualPage">
            <summary>
            Page in pixel relative to virtual canvas.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PagePreview.virtualCanvas">
            <summary>
            The size in pixel of an area that completely contains the virtual page and at leat a small 
            border around it. If this area is larger than the canvas window, it is scrolled.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PagePreview.printableArea">
            <summary>
            Printable area in point.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.PagePreview.BorderStyle">
            <summary>
            Gets or sets the border style of the control.
            </summary>
            <value></value>
        </member>
        <member name="P:Alt.GUI.PdfSharp.PagePreview.Zoom">
            <summary>
            Gets or sets a predefined zoom factor.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.PagePreview.ZoomPercent">
            <summary>
            Gets or sets an arbitrary zoom factor. The range is from 10 to 800.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.PagePreview.PageColor">
            <summary>
            Gets or sets the color of the page.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.PagePreview.DesktopColor">
            <summary>
            Gets or sets the color of the desktop.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.PagePreview.ShowScrollbars">
            <summary>
            Gets or sets a value indicating whether the scrollbars are visilbe.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.PagePreview.ShowPage">
            <summary>
            Gets or sets a value indicating whether the page is visilbe.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.PagePreview.PageSize">
            <summary>
            Gets or sets the page size in point.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.PagePreview.PageSizeF">
            <summary>
            This is a hack for Visual Studio 2008. The designer uses reflection for setting the PageSize property.
            This fails, even an implicit operator that converts Size to XSize exits.
            </summary>
        </member>
        <member name="E:Alt.GUI.PdfSharp.PagePreview.ZoomChanged">
            <summary>
            Occurs when the zoom factor changed.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.PagePreview.RenderEvent">
            <summary>
            A delegate for invoking the render function.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.PagePreviewCanvas">
            <summary>
            Implements the control that previews the page.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.AreaChartRenderer">
            <summary>
            Represents an area chart renderer.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.ColumnLikeChartRenderer">
            <summary>
            Represents column like chart renderer.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.ChartRenderer">
            <summary>
            Represents the base class for all chart renderers.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.Renderer">
            <summary>
            Base class of all renderers.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.Renderer.#ctor(Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters)">
            <summary>
            Initializes a new instance of the Renderer class with the specified renderer parameters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.Renderer.Init">
            <summary>
            Derived renderer should return an initialized and renderer specific rendererInfo,
            e. g. XAxisRenderer returns an new instance of AxisRendererInfo class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.Renderer.Format">
            <summary>
            Layouts and calculates the space used by the renderer's drawing item.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.Renderer.Draw">
            <summary>
            Draws the item.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.Renderers.Renderer.rendererParms">
            <summary>
            Holds all necessary rendering information.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.Renderers.ChartRenderer.LegendSpacing">
            <summary>
            Used to separate the legend from the plot area.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.ChartRenderer.#ctor(Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters)">
            <summary>
            Initializes a new instance of the ChartRenderer class with the specified renderer parameters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.ChartRenderer.LayoutLegend">
            <summary>
            Calculates the space used by the legend and returns the remaining space available for the
            other parts of the chart.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.Renderers.ChartRenderer.DefaultSeriesLineWidth">
            <summary>
            Represents the default width for all series lines, like borders in column/bar charts.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.ColumnLikeChartRenderer.#ctor(Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters)">
            <summary>
            Initializes a new instance of the ColumnLikeChartRenderer class with the
            specified renderer parameters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.ColumnLikeChartRenderer.CalcLayout">
            <summary>
            Calculates the chart layout.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.AreaChartRenderer.#ctor(Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters)">
            <summary>
            Initializes a new instance of the AreaChartRenderer class with the
            specified renderer parameters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.AreaChartRenderer.Init">
            <summary>
            Returns an initialized and renderer specific rendererInfo.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.AreaChartRenderer.Format">
            <summary>
            Layouts and calculates the space used by the line chart.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.AreaChartRenderer.Draw">
            <summary>
            Draws the column chart.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.AreaChartRenderer.InitSeriesRendererInfo">
            <summary>
            Initializes all necessary data to draw a series for a area chart.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.AreaChartRenderer.InitSeries">
            <summary>
            Initializes all necessary data to draw a series for a area chart.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.AreaPlotAreaRenderer">
            <summary>
            Represents a plot area renderer of areas.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.ColumnLikePlotAreaRenderer">
            <summary>
            Base class for all plot area renderers.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.PlotAreaRenderer">
            <summary>
            Base class for all plot area renderers.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.Renderers.PlotAreaRenderer.DefaultLineWidth">
            <summary>
            Represents the default line width for the plot area's border.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.PlotAreaRenderer.#ctor(Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters)">
            <summary>
            Initializes a new instance of the PlotAreaRenderer class with the specified renderer parameters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.PlotAreaRenderer.Init">
            <summary>
            Returns an initialized PlotAreaRendererInfo.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.PlotAreaRenderer.InitLineFormat(Alt.GUI.PdfSharp.Charting.Renderers.PlotAreaRendererInfo)">
            <summary>
            Initializes the plot area's line format common to all derived plot area renderers.
            If line format is given all uninitialized values will be set.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.PlotAreaRenderer.InitFillFormat(Alt.GUI.PdfSharp.Charting.Renderers.PlotAreaRendererInfo)">
            <summary>
            Initializes the plot area's fill format common to all derived plot area renderers.
            If fill format is given all uninitialized values will be set.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.ColumnLikePlotAreaRenderer.#ctor(Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters)">
            <summary>
            Initializes a new instance of the ColumnLikePlotAreaRenderer class with the
            specified renderer parameters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.ColumnLikePlotAreaRenderer.Format">
            <summary>
            Layouts and calculates the space for column like plot areas.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.AreaPlotAreaRenderer.#ctor(Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters)">
            <summary>
            Initializes a new instance of the AreaPlotAreaRenderer class
            with the specified renderer parameters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.AreaPlotAreaRenderer.Draw">
            <summary>
            Draws the content of the area plot area.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.AxisRenderer">
            <summary>
            Represents the base for all specialized axis renderer. Initialization common too all
            axis renderer should come here.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.Renderers.AxisRenderer.DefaultLineWidth">
            <summary>
            Default width for a variety of lines.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.Renderers.AxisRenderer.DefaultGridLineWidth">
            <summary>
            Default width for a gridlines.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.Renderers.AxisRenderer.DefaultMajorTickMarkLineWidth">
            <summary>
            Default width for major tick marks.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.Renderers.AxisRenderer.DefaultMinorTickMarkLineWidth">
            <summary>
            Default width for minor tick marks.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.Renderers.AxisRenderer.DefaultMajorTickMarkWidth">
            <summary>
            Default width of major tick marks.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.Renderers.AxisRenderer.DefaultMinorTickMarkWidth">
            <summary>
            Default width of minor tick marks.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.Renderers.AxisRenderer.SpaceBetweenLabelAndTickmark">
            <summary>
            Default width of space between label and tick mark.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.AxisRenderer.#ctor(Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters)">
            <summary>
            Initializes a new instance of the AxisRenderer class with the specified renderer parameters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.AxisRenderer.InitAxisTitle(Alt.GUI.PdfSharp.Charting.Renderers.AxisRendererInfo,Alt.GUI.PdfSharp.Drawing.XFont)">
            <summary>
            Initializes the axis title of the rendererInfo. All missing font attributes will be taken
            from the specified defaultFont.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.AxisRenderer.InitTickLabels(Alt.GUI.PdfSharp.Charting.Renderers.AxisRendererInfo,Alt.GUI.PdfSharp.Drawing.XFont)">
            <summary>
            Initializes the tick labels of the rendererInfo. All missing font attributes will be taken
            from the specified defaultFont.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.AxisRenderer.InitAxisLineFormat(Alt.GUI.PdfSharp.Charting.Renderers.AxisRendererInfo)">
            <summary>
            Initializes the line format of the rendererInfo.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.AxisRenderer.InitGridlines(Alt.GUI.PdfSharp.Charting.Renderers.AxisRendererInfo)">
            <summary>
            Initializes the gridlines of the rendererInfo.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.AxisTitleRenderer">
            <summary>
            Represents a axis title renderer used for x and y axis titles.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.AxisTitleRenderer.#ctor(Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters)">
            <summary>
            Initializes a new instance of the AxisTitleRenderer class with the
            specified renderer parameters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.AxisTitleRenderer.Format">
            <summary>
            Calculates the space used for the axis title.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.AxisTitleRenderer.Draw">
            <summary>
            Draws the axis title.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.BarChartRenderer">
            <summary>
            Represents a bar chart renderer.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.BarChartRenderer.#ctor(Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters)">
            <summary>
            Initializes a new instance of the BarChartRenderer class with the
            specified renderer parameters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.BarChartRenderer.Init">
            <summary>
            Returns an initialized and renderer specific rendererInfo.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.BarChartRenderer.Format">
            <summary>
            Layouts and calculates the space used by the column chart.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.BarChartRenderer.Draw">
            <summary>
            Draws the column chart.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.BarChartRenderer.GetPlotAreaRenderer">
            <summary>
            Returns the specific plot area renderer.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.BarChartRenderer.GetLegendRenderer">
            <summary>
            Returns the specific legend renderer.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.BarChartRenderer.GetYAxisRenderer">
            <summary>
            Returns the specific plot area renderer.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.BarChartRenderer.InitSeriesRendererInfo">
            <summary>
            Initializes all necessary data to draw all series for a column chart.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.BarChartRenderer.InitSeries">
            <summary>
            Initializes all necessary data to draw all series for a column chart.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.BarClusteredLegendRenderer">
            <summary>
            Represents the legend renderer specific to bar charts.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.ColumnLikeLegendRenderer">
            <summary>
            Represents the legend renderer specific to charts like column, line, or bar.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.LegendRenderer">
            <summary>
            Represents the legend renderer for all chart types.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.Renderers.LegendRenderer.LeftPadding">
            <summary>
            Used to insert a padding on the left.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.Renderers.LegendRenderer.RightPadding">
            <summary>
            Used to insert a padding on the right.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.Renderers.LegendRenderer.TopPadding">
            <summary>
            Used to insert a padding at the top.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.Renderers.LegendRenderer.BottomPadding">
            <summary>
            Used to insert a padding at the bottom.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.Renderers.LegendRenderer.EntrySpacing">
            <summary>
            Used to insert a padding between entries.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.Renderers.LegendRenderer.DefaultLineWidth">
            <summary>
            Default line width used for the legend's border.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.LegendRenderer.#ctor(Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters)">
            <summary>
            Initializes a new instance of the LegendRenderer class with the specified renderer parameters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.LegendRenderer.Format">
            <summary>
            Layouts and calculates the space used by the legend.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.LegendRenderer.Draw">
            <summary>
            Draws the legend.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.ColumnLikeLegendRenderer.#ctor(Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters)">
            <summary>
            Initializes a new instance of the ColumnLikeLegendRenderer class with the
            specified renderer parameters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.ColumnLikeLegendRenderer.Init">
            <summary>
            Initializes the legend's renderer info. Each data series will be represented through
            a legend entry renderer info.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.BarClusteredLegendRenderer.#ctor(Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters)">
            <summary>
            Initializes a new instance of the BarClusteredLegendRenderer class with the
            specified renderer parameters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.BarClusteredLegendRenderer.Draw">
            <summary>
            Draws the legend.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.BarClusteredPlotAreaRenderer">
            <summary>
            Represents a plot area renderer of clustered bars, i. e. all bars are drawn side by side.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.BarPlotAreaRenderer">
            <summary>
            Represents a plot area renderer for bars.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.BarPlotAreaRenderer.#ctor(Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters)">
            <summary>
            Initializes a new instance of the BarPlotAreaRenderer class with the
            specified renderer parameters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.BarPlotAreaRenderer.Format">
            <summary>
            Layouts and calculates the space for each bar.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.BarPlotAreaRenderer.Draw">
            <summary>
            Draws the content of the bar plot area.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.BarPlotAreaRenderer.CalcBars">
            <summary>
            Calculates the position, width and height of each bar of all series.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.BarPlotAreaRenderer.IsDataInside(System.Double,System.Double,System.Double)">
            <summary>
            If yValue is within the range from yMin to yMax returns true, otherwise false.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.BarClusteredPlotAreaRenderer.#ctor(Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters)">
            <summary>
            Initializes a new instance of the BarClusteredPlotAreaRenderer class with the
            specified renderer parameters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.BarClusteredPlotAreaRenderer.CalcBars">
            <summary>
            Calculates the position, width and height of each bar of all series.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.BarClusteredPlotAreaRenderer.IsDataInside(System.Double,System.Double,System.Double)">
            <summary>
            If yValue is within the range from yMin to yMax returns true, otherwise false.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.BarDataLabelRenderer">
            <summary>
            Represents a data label renderer for bar charts.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.DataLabelRenderer">
            <summary>
            Represents a data label renderer.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.DataLabelRenderer.#ctor(Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters)">
            <summary>
            Initializes a new instance of the DataLabelRenderer class with the
            specified renderer parameters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.DataLabelRenderer.Init">
            <summary>
            Creates a data label rendererInfo.
            Does not return any renderer info.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.DataLabelRenderer.CalcPositions">
            <summary>
            Calculates the specific positions for each data label.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.BarDataLabelRenderer.#ctor(Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters)">
            <summary>
            Initializes a new instance of the BarDataLabelRenderer class with the
            specified renderer parameters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.BarDataLabelRenderer.Format">
            <summary>
            Calculates the space used by the data labels.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.BarDataLabelRenderer.Draw">
            <summary>
            Draws the data labels of the bar chart.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.BarDataLabelRenderer.CalcPositions">
            <summary>
            Calculates the data label positions specific for column charts.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.BarGridlinesRenderer">
            <summary>
            Represents gridlines used by bar charts, i. e. X axis grid will be rendered
            from left to right and Y axis grid will be rendered from top to bottom of the plot area.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.GridlinesRenderer">
            <summary>
            Base class for all renderers used to draw gridlines.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.GridlinesRenderer.#ctor(Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters)">
            <summary>
            Initializes a new instance of the GridlinesRenderer class with the specified renderer parameters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.BarGridlinesRenderer.#ctor(Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters)">
            <summary>
            Initializes a new instance of the BarGridlinesRenderer class with the
            specified renderer parameters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.BarGridlinesRenderer.Draw">
            <summary>
            Draws the gridlines into the plot area.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.BarStackedPlotAreaRenderer">
            <summary>
            Represents a plot area renderer of stacked bars, i. e. all bars are drawn one on another.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.BarStackedPlotAreaRenderer.#ctor(Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters)">
            <summary>
            Initializes a new instance of the BarStackedPlotAreaRenderer class with the
            specified renderer parameters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.BarStackedPlotAreaRenderer.CalcBars">
            <summary>
            Calculates the position, width and height of each bar of all series.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.BarStackedPlotAreaRenderer.IsDataInside(System.Double,System.Double,System.Double)">
            <summary>
            If yValue is within the range from yMin to yMax returns true, otherwise false.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.ColumnColors">
            <summary>
            Represents the predefined column/bar chart colors.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.ColumnColors.Item(System.Int32)">
            <summary>
            Gets the color for column/bar charts from the specified index.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.Renderers.ColumnColors.seriesColors">
            <summary>
            Colors for column/bar charts taken from Excel.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.LineColors">
            <summary>
            Represents the predefined line chart colors.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.LineColors.Item(System.Int32)">
            <summary>
            Gets the color for line charts from the specified index.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.Renderers.LineColors.lineColors">
            <summary>
            Colors for line charts taken from Excel.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.PieColors">
            <summary>
            Represents the predefined pie chart colors.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.PieColors.Item(System.Int32)">
            <summary>
            Gets the color for pie charts from the specified index.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.Renderers.PieColors.sectorColors">
            <summary>
            Colors for pie charts taken from Excel.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.ColumnChartRenderer">
            <summary>
            Represents a column chart renderer.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.ColumnChartRenderer.#ctor(Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters)">
            <summary>
            Initializes a new instance of the ColumnChartRenderer class with the
            specified renderer parameters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.ColumnChartRenderer.Init">
            <summary>
            Returns an initialized and renderer specific rendererInfo.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.ColumnChartRenderer.Format">
            <summary>
            Layouts and calculates the space used by the column chart.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.ColumnChartRenderer.Draw">
            <summary>
            Draws the column chart.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.ColumnChartRenderer.GetPlotAreaRenderer">
            <summary>
            Returns the specific plot area renderer.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.ColumnChartRenderer.GetYAxisRenderer">
            <summary>
            Returns the specific y axis renderer.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.ColumnChartRenderer.InitSeriesRendererInfo">
            <summary>
            Initializes all necessary data to draw all series for a column chart.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.ColumnChartRenderer.InitSeries">
            <summary>
            Initializes all necessary data to draw all series for a column chart.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.ColumnClusteredPlotAreaRenderer">
            <summary>
            Represents a plot area renderer of clustered columns, i. e. all columns are drawn side by side.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.ColumnPlotAreaRenderer">
            <summary>
            Represents a plot area renderer of clustered columns, i. e. all columns are drawn side by side.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.ColumnPlotAreaRenderer.#ctor(Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters)">
            <summary>
            Initializes a new instance of the ColumnPlotAreaRenderer class with the
            specified renderer parameters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.ColumnPlotAreaRenderer.Format">
            <summary>
            Layouts and calculates the space for each column.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.ColumnPlotAreaRenderer.Draw">
            <summary>
            Draws the content of the column plot area.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.ColumnPlotAreaRenderer.CalcColumns">
            <summary>
            Calculates the position, width and height of each column of all series.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.ColumnPlotAreaRenderer.IsDataInside(System.Double,System.Double,System.Double)">
            <summary>
            If yValue is within the range from yMin to yMax returns true, otherwise false.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.ColumnClusteredPlotAreaRenderer.#ctor(Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters)">
            <summary>
            Initializes a new instance of the ColumnClusteredPlotAreaRenderer class with the
            specified renderer parameters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.ColumnClusteredPlotAreaRenderer.CalcColumns">
            <summary>
            Calculates the position, width and height of each column of all series.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.ColumnClusteredPlotAreaRenderer.IsDataInside(System.Double,System.Double,System.Double)">
            <summary>
            If yValue is within the range from yMin to yMax returns true, otherwise false.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.ColumnDataLabelRenderer">
            <summary>
            Represents a data label renderer for column charts.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.ColumnDataLabelRenderer.#ctor(Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters)">
            <summary>
            Initializes a new instance of the ColumnDataLabelRenderer class with the
            specified renderer parameters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.ColumnDataLabelRenderer.Format">
            <summary>
            Calculates the space used by the data labels.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.ColumnDataLabelRenderer.Draw">
            <summary>
            Draws the data labels of the column chart.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.ColumnDataLabelRenderer.CalcPositions">
            <summary>
            Calculates the data label positions specific for column charts.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.ColumnLikeGridlinesRenderer">
            <summary>
            Represents gridlines used by column or line charts, i. e. X axis grid will be rendered
            from top to bottom and Y axis grid will be rendered from left to right of the plot area.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.ColumnLikeGridlinesRenderer.#ctor(Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters)">
            <summary>
            Initializes a new instance of the ColumnLikeGridlinesRenderer class with the
            specified renderer parameters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.ColumnLikeGridlinesRenderer.Draw">
            <summary>
            Draws the gridlines into the plot area.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.ColumnStackedPlotAreaRenderer">
            <summary>
            Represents a plot area renderer of stacked columns, i. e. all columns are drawn one on another.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.ColumnStackedPlotAreaRenderer.#ctor(Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters)">
            <summary>
            Initializes a new instance of the ColumnStackedPlotAreaRenderer class with the
            specified renderer parameters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.ColumnStackedPlotAreaRenderer.CalcColumns">
            <summary>
            Calculates the position, width and height of each column of all series.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.ColumnStackedPlotAreaRenderer.IsDataInside(System.Double,System.Double,System.Double)">
            <summary>
            Stacked columns are always inside.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.CombinationChartRenderer">
            <summary>
            Represents a renderer for combinations of charts.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.CombinationChartRenderer.#ctor(Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters)">
            <summary>
            Initializes a new instance of the CombinationChartRenderer class with the
            specified renderer parameters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.CombinationChartRenderer.Init">
            <summary>
            Returns an initialized and renderer specific rendererInfo.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.CombinationChartRenderer.Format">
            <summary>
            Layouts and calculates the space used by the combination chart.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.CombinationChartRenderer.Draw">
            <summary>
            Draws the column chart.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.CombinationChartRenderer.InitSeriesRendererInfo">
            <summary>
            Initializes all necessary data to draw series for a combination chart.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.CombinationChartRenderer.DistributeSeries">
            <summary>
            Sort all series renderer info dependent on their chart type.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.Converter">
            <summary>
            Provides functions which converts Charting.DOM objects into PdfSharp.Drawing objects.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.Converter.ToXFont(Alt.GUI.PdfSharp.Charting.Font,Alt.GUI.PdfSharp.Drawing.XFont)">
            <summary>
            Creates a XFont based on the font. Missing attributes will be taken from the defaultFont
            parameter.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.Converter.ToXPen(Alt.GUI.PdfSharp.Charting.LineFormat,Alt.GUI.PdfSharp.Drawing.XColor,System.Double)">
            <summary>
            Creates a XPen based on the specified line format. If not specified color and width will be taken
            from the defaultColor and defaultWidth parameter.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.Converter.ToXPen(Alt.GUI.PdfSharp.Charting.LineFormat,Alt.GUI.PdfSharp.Drawing.XPen)">
            <summary>
            Creates a XPen based on the specified line format. If not specified color and width will be taken
            from the defaultPen parameter.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.Converter.ToXPen(Alt.GUI.PdfSharp.Charting.LineFormat,Alt.GUI.PdfSharp.Drawing.XColor,System.Double,Alt.GUI.PdfSharp.Drawing.XDashStyle)">
            <summary>
            Creates a XPen based on the specified line format. If not specified color, width and dash style
            will be taken from the defaultColor, defaultWidth and defaultDashStyle parameters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.Converter.ToXBrush(Alt.GUI.PdfSharp.Charting.FillFormat,Alt.GUI.PdfSharp.Drawing.XColor)">
            <summary>
            Creates a XBrush based on the specified fill format. If not specified, color will be taken
            from the defaultColor parameter.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.Converter.ToXBrush(Alt.GUI.PdfSharp.Charting.Font,Alt.GUI.PdfSharp.Drawing.XColor)">
            <summary>
            Creates a XBrush based on the specified font color. If not specified, color will be taken
            from the defaultColor parameter.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.HorizontalStackedYAxisRenderer">
            <summary>
            Represents a Y axis renderer used for charts of type BarStacked2D.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.HorizontalYAxisRenderer">
            <summary>
            Represents a Y axis renderer used for charts of type Bar2D.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.YAxisRenderer">
            <summary>
            Represents the base class for all Y axis renderer.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.YAxisRenderer.#ctor(Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters)">
            <summary>
            Initializes a new instance of the YAxisRenderer class with the specified renderer parameters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.YAxisRenderer.FineTuneYAxis(Alt.GUI.PdfSharp.Charting.Renderers.AxisRendererInfo,System.Double,System.Double)">
            <summary>
            Calculates optimal minimum/maximum scale and minor/major tick based on yMin and yMax.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.YAxisRenderer.GetDefaultTickLabelsFormat">
            <summary>
            Returns the default tick labels format string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.HorizontalYAxisRenderer.#ctor(Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters)">
            <summary>
            Initializes a new instance of the HorizontalYAxisRenderer class with the
            specified renderer parameters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.HorizontalYAxisRenderer.Init">
            <summary>
            Returns a initialized rendererInfo based on the Y axis.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.HorizontalYAxisRenderer.Format">
            <summary>
            Calculates the space used for the Y axis.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.HorizontalYAxisRenderer.Draw">
            <summary>
            Draws the vertical Y axis.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.HorizontalYAxisRenderer.InitScale(Alt.GUI.PdfSharp.Charting.Renderers.AxisRendererInfo)">
            <summary>
            Calculates all values necessary for scaling the axis like minimum/maximum scale or
            minor/major tick.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.HorizontalYAxisRenderer.GetTickMarkPos(Alt.GUI.PdfSharp.Charting.Renderers.AxisRendererInfo,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Gets the top and bottom position of the major and minor tick marks depending on the
            tick mark type.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.HorizontalYAxisRenderer.CalcYAxis(System.Double@,System.Double@)">
            <summary>
            Determines the smallest and the largest number from all series of the chart.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.HorizontalStackedYAxisRenderer.#ctor(Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters)">
            <summary>
            Initializes a new instance of the HorizontalStackedYAxisRenderer class with the
            specified renderer parameters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.HorizontalStackedYAxisRenderer.CalcYAxis(System.Double@,System.Double@)">
            <summary>
            Determines the sum of the smallest and the largest stacked bar
            from all series of the chart.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.HorizontalXAxisRenderer">
            <summary>
            Represents an axis renderer used for charts of type Column2D or Line.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.XAxisRenderer">
            <summary>
            Represents the base class for all X axis renderer.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.XAxisRenderer.#ctor(Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters)">
            <summary>
            Initializes a new instance of the XAxisRenderer class with the specified renderer parameters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.XAxisRenderer.GetDefaultTickLabelsFormat">
            <summary>
            Returns the default tick labels format string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.HorizontalXAxisRenderer.#ctor(Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters)">
            <summary>
            Initializes a new instance of the HorizontalXAxisRenderer class with the specified renderer parameters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.HorizontalXAxisRenderer.Init">
            <summary>
            Returns an initialized rendererInfo based on the X axis.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.HorizontalXAxisRenderer.Format">
            <summary>
            Calculates the space used for the X axis.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.HorizontalXAxisRenderer.Draw">
            <summary>
            Draws the horizontal X axis.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.HorizontalXAxisRenderer.CalculateXAxisValues(Alt.GUI.PdfSharp.Charting.Renderers.AxisRendererInfo)">
            <summary>
            Calculates the X axis describing values like minimum/maximum scale, major/minor tick and
            major/minor tick mark width.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.HorizontalXAxisRenderer.InitXValues(Alt.GUI.PdfSharp.Charting.Renderers.AxisRendererInfo)">
            <summary>
            Initializes the rendererInfo's xvalues. If not set by the user xvalues will be simply numbers
            from minimum scale + 1 to maximum scale.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.HorizontalXAxisRenderer.GetTickMarkPos(Alt.GUI.PdfSharp.Charting.Renderers.AxisRendererInfo,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Calculates the starting and ending y position for the minor and major tick marks.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.LegendEntryRenderer">
            <summary>
            Represents the renderer for a legend entry.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.Renderers.LegendEntryRenderer.MarkerWidth">
            <summary>
            Absolute width for markers (including line) in point.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.Renderers.LegendEntryRenderer.MaxLegendMarkerWidth">
            <summary>
            Maximum legend marker width in point.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.Renderers.LegendEntryRenderer.MaxLegendMarkerHeight">
            <summary>
            Maximum legend marker height in point.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.Renderers.LegendEntryRenderer.SpacingBetweenMarkerAndText">
            <summary>
            Insert spacing between marker and text in point.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.LegendEntryRenderer.#ctor(Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters)">
            <summary>
            Initializes a new instance of the LegendEntryRenderer class with the specified renderer
            parameters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.LegendEntryRenderer.Format">
            <summary>
            Calculates the space used by the legend entry.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.LegendEntryRenderer.Draw">
            <summary>
            Draws one legend entry.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.LineChartRenderer">
            <summary>
            Represents a line chart renderer.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.LineChartRenderer.#ctor(Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters)">
            <summary>
            Initializes a new instance of the LineChartRenderer class with the specified renderer parameters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.LineChartRenderer.Init">
            <summary>
            Returns an initialized and renderer specific rendererInfo.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.LineChartRenderer.Format">
            <summary>
            Layouts and calculates the space used by the line chart.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.LineChartRenderer.Draw">
            <summary>
            Draws the line chart.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.LineChartRenderer.InitSeriesRendererInfo">
            <summary>
            Initializes all necessary data to draw a series for a line chart.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.LineChartRenderer.InitSeries">
            <summary>
            Initializes all necessary data to draw a series for a line chart.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.LineFormatRenderer">
            <summary>
            Represents a renderer specialized to draw lines in various styles, colors and widths.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.LineFormatRenderer.#ctor(Alt.GUI.PdfSharp.Drawing.XGraphics,Alt.GUI.PdfSharp.Charting.LineFormat,System.Double)">
            <summary>
            Initializes a new instance of the LineFormatRenderer class with the specified graphics, line format
            and default width.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.LineFormatRenderer.#ctor(Alt.GUI.PdfSharp.Drawing.XGraphics,Alt.GUI.PdfSharp.Charting.LineFormat)">
            <summary>
            Initializes a new instance of the LineFormatRenderer class with the specified graphics and
            line format.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.LineFormatRenderer.#ctor(Alt.GUI.PdfSharp.Drawing.XGraphics,Alt.GUI.PdfSharp.Drawing.XPen)">
            <summary>
            Initializes a new instance of the LineFormatRenderer class with the specified graphics and pen.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.LineFormatRenderer.DrawLine(Alt.GUI.PdfSharp.Drawing.XPoint,Alt.GUI.PdfSharp.Drawing.XPoint)">
            <summary>
            Draws a line from point pt0 to point pt1.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.LineFormatRenderer.DrawRectangle(Alt.GUI.PdfSharp.Drawing.XRect)">
            <summary>
            Draws a line specified by rect.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.LineFormatRenderer.DrawPath(Alt.GUI.PdfSharp.Drawing.XGraphicsPath)">
            <summary>
            Draws a line specified by path.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.Renderers.LineFormatRenderer.gfx">
            <summary>
            Surface to draw the line.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.Renderers.LineFormatRenderer.pen">
            <summary>
            Pen used to draw the line.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.LinePlotAreaRenderer">
            <summary>
            Renders the plot area used by line charts. 
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.LinePlotAreaRenderer.#ctor(Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters)">
            <summary>
            Initializes a new instance of the LinePlotAreaRenderer class with the
            specified renderer parameters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.LinePlotAreaRenderer.Draw">
            <summary>
            Draws the content of the line plot area.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.LinePlotAreaRenderer.DrawMarker(Alt.GUI.PdfSharp.Drawing.XGraphics,Alt.GUI.PdfSharp.Drawing.XPoint[],Alt.GUI.PdfSharp.Charting.Renderers.SeriesRendererInfo)">
            <summary>
            Draws all markers given in rendererInfo at the positions specified by points.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.MarkerRenderer">
            <summary>
            Represents a renderer for markers in line charts and legends.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.MarkerRenderer.Draw(Alt.GUI.PdfSharp.Drawing.XGraphics,Alt.GUI.PdfSharp.Drawing.XPoint,Alt.GUI.PdfSharp.Charting.Renderers.MarkerRendererInfo)">
            <summary>
            Draws the marker given through rendererInfo at the specified position. Position specifies
            the center of the marker.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.PieChartRenderer">
            <summary>
            Represents a pie chart renderer.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.PieChartRenderer.#ctor(Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters)">
            <summary>
            Initializes a new instance of the PieChartRenderer class with the
            specified renderer parameters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.PieChartRenderer.Init">
            <summary>
            Returns an initialized and renderer specific rendererInfo.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.PieChartRenderer.Format">
            <summary>
            Layouts and calculates the space used by the pie chart.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.PieChartRenderer.Draw">
            <summary>
            Draws the pie chart.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.PieChartRenderer.GetPlotAreaRenderer">
            <summary>
            Returns the specific plot area renderer.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.PieChartRenderer.InitSeries(Alt.GUI.PdfSharp.Charting.Renderers.ChartRendererInfo)">
            <summary>
            Initializes all necessary data to draw a series for a pie chart.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.PieClosedPlotAreaRenderer">
            <summary>
            Represents a closed pie plot area renderer.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.PiePlotAreaRenderer">
            <summary>
            Represents the base for all pie plot area renderer.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.PiePlotAreaRenderer.#ctor(Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters)">
            <summary>
            Initializes a new instance of the PiePlotAreaRenderer class
            with the specified renderer parameters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.PiePlotAreaRenderer.Format">
            <summary>
            Layouts and calculates the space used by the pie plot area.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.PiePlotAreaRenderer.Draw">
            <summary>
            Draws the content of the pie plot area.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.PiePlotAreaRenderer.CalcSectors">
            <summary>
            Calculates the specific positions for each sector.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.PieClosedPlotAreaRenderer.#ctor(Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters)">
            <summary>
            Initializes a new instance of the PiePlotAreaRenderer class
            with the specified renderer parameters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.PieClosedPlotAreaRenderer.CalcSectors">
            <summary>
            Calculate angles for each sector.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.PieDataLabelRenderer">
            <summary>
            Represents a data label renderer for pie charts.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.PieDataLabelRenderer.#ctor(Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters)">
            <summary>
            Initializes a new instance of the PieDataLabelRenderer class with the
            specified renderer parameters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.PieDataLabelRenderer.Format">
            <summary>
            Calculates the space used by the data labels.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.PieDataLabelRenderer.Draw">
            <summary>
            Draws the data labels of the pie chart.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.PieDataLabelRenderer.CalcPositions">
            <summary>
            Calculates the data label positions specific for pie charts.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.PieExplodedPlotAreaRenderer">
            <summary>
            Represents a exploded pie plot area renderer.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.PieExplodedPlotAreaRenderer.#ctor(Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters)">
            <summary>
            Initializes a new instance of the PieExplodedPlotAreaRenderer class
            with the specified renderer parameters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.PieExplodedPlotAreaRenderer.CalcSectors">
            <summary>
            Calculate angles for each sector.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.PieLegendRenderer">
            <summary>
            Represents the legend renderer specific to pie charts.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.PieLegendRenderer.#ctor(Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters)">
            <summary>
            Initializes a new instance of the PieLegendRenderer class with the specified renderer
            parameters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.PieLegendRenderer.Init">
            <summary>
            Initializes the legend's renderer info. Each data point will be represented through
            a legend entry renderer info.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.PlotAreaBorderRenderer">
            <summary>
            Represents the border renderer for plot areas.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.PlotAreaBorderRenderer.#ctor(Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters)">
            <summary>
            Initializes a new instance of the PlotAreaBorderRenderer class with the specified
            renderer parameters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.PlotAreaBorderRenderer.Draw">
            <summary>
            Draws the border around the plot area.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.RendererInfo">
            <summary>
            Represents the base class of all renderer infos.
            Renderer infos are used to hold all necessary information and time consuming calculations
            between rendering cycles.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.AreaRendererInfo">
            <summary>
            Base class for all renderer infos which defines an area.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Renderers.AreaRendererInfo.X">
            <summary>
            Gets or sets the x coordinate of this rectangle.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Renderers.AreaRendererInfo.Y">
            <summary>
            Gets or sets the y coordinate of this rectangle.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Renderers.AreaRendererInfo.Width">
            <summary>
            Gets or sets the width of this rectangle.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Renderers.AreaRendererInfo.Height">
            <summary>
            Gets or sets the height of this rectangle.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Renderers.AreaRendererInfo.Size">
            <summary>
            Gets the area's size.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Renderers.AreaRendererInfo.Rect">
            <summary>
            Gets the area's rectangle.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.ChartRendererInfo">
            <summary>
            A ChartRendererInfo stores information of all main parts of a chart like axis renderer info or
            plotarea renderer info.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Renderers.ChartRendererInfo.DefaultFont">
            <summary>
            Gets the chart's default font for rendering.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Renderers.ChartRendererInfo.DefaultDataLabelFont">
            <summary>
            Gets the chart's default font for rendering data labels.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.CombinationRendererInfo">
            <summary>
            A CombinationRendererInfo stores information for rendering combination of charts.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.PointRendererInfo">
            <summary>
            PointRendererInfo is used to render one single data point which is part of a data series.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.SectorRendererInfo">
            <summary>
            Represents one sector of a series used by a pie chart.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.ColumnRendererInfo">
            <summary>
            Represents one data point of a series and the corresponding rectangle.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.DataLabelEntryRendererInfo">
            <summary>
            Stores rendering specific information for one data label entry.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.DataLabelRendererInfo">
            <summary>
            Stores data label specific rendering information.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.SeriesRendererInfo">
            <summary>
            SeriesRendererInfo holds all data series specific rendering information.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Renderers.SeriesRendererInfo.SumOfPoints">
            <summary>
            Gets the sum of all points in PointRendererInfo.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.MarkerRendererInfo">
            <summary>
            Represents a description of a marker for a line chart.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.AxisRendererInfo">
            <summary>
            An AxisRendererInfo holds all axis specific rendering information.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Renderers.AxisRendererInfo.X">
            <summary>
            Sets the x coordinate of the inner rectangle.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Renderers.AxisRendererInfo.Y">
            <summary>
            Sets the y coordinate of the inner rectangle.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Renderers.AxisRendererInfo.Height">
            <summary>
            Sets the height of the inner rectangle.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Renderers.AxisRendererInfo.Width">
            <summary>
            Sets the width of the inner rectangle.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.LegendEntryRendererInfo">
            <summary>
            Represents one description of a legend entry.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.Renderers.LegendEntryRendererInfo.MarkerSize">
            <summary>
            Size for the marker only.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.Renderers.LegendEntryRendererInfo.MarkerArea">
            <summary>
            Width for marker area. Extra spacing for line charts are considered.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.Renderers.LegendEntryRendererInfo.TextSize">
            <summary>
            Size for text area.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.LegendRendererInfo">
            <summary>
            Stores legend specific rendering information.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.PlotAreaRendererInfo">
            <summary>
            Stores rendering information common to all plot area renderers.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.Renderers.PlotAreaRendererInfo.matrix">
            <summary>
            Saves the plot area's matrix.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters">
            <summary>
            Represents the necessary data for chart rendering.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters.#ctor">
            <summary>
            Initializes a new instance of the RendererParameters class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters.#ctor(Alt.GUI.PdfSharp.Drawing.XGraphics,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the RendererParameters class with the specified graphics and
            coordinates.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters.#ctor(Alt.GUI.PdfSharp.Drawing.XGraphics,Alt.GUI.PdfSharp.Drawing.XRect)">
            <summary>
            Initializes a new instance of the RendererParameters class with the specified graphics and
            rectangle.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters.Graphics">
            <summary>
            Gets or sets the graphics object.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters.DrawingItem">
            <summary>
            Gets or sets the item to draw.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters.Box">
            <summary>
            Gets or sets the rectangle for the drawing item.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters.RendererInfo">
            <summary>
            Gets or sets the RendererInfo.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.VerticalStackedYAxisRenderer">
            <summary>
            Represents a Y axis renderer used for charts of type Column2D or Line.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.VerticalYAxisRenderer">
            <summary>
            Represents a Y axis renderer used for charts of type Column2D or Line.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.VerticalYAxisRenderer.#ctor(Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters)">
            <summary>
            Initializes a new instance of the VerticalYAxisRenderer class with the
            specified renderer parameters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.VerticalYAxisRenderer.Init">
            <summary>
            Returns a initialized rendererInfo based on the Y axis.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.VerticalYAxisRenderer.Format">
            <summary>
            Calculates the space used for the Y axis.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.VerticalYAxisRenderer.Draw">
            <summary>
            Draws the vertical Y axis.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.VerticalYAxisRenderer.InitScale(Alt.GUI.PdfSharp.Charting.Renderers.AxisRendererInfo)">
            <summary>
            Calculates all values necessary for scaling the axis like minimum/maximum scale or
            minor/major tick.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.VerticalYAxisRenderer.GetTickMarkPos(Alt.GUI.PdfSharp.Charting.Renderers.AxisRendererInfo,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Gets the top and bottom position of the major and minor tick marks depending on the
            tick mark type.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.VerticalYAxisRenderer.CalcYAxis(System.Double@,System.Double@)">
            <summary>
            Determines the smallest and the largest number from all series of the chart.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.VerticalStackedYAxisRenderer.#ctor(Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters)">
            <summary>
            Initializes a new instance of the VerticalYAxisRenderer class with the
            specified renderer parameters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.VerticalStackedYAxisRenderer.CalcYAxis(System.Double@,System.Double@)">
            <summary>
            Determines the sum of the smallest and the largest stacked column
            from all series of the chart.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.VerticalXAxisRenderer">
            <summary>
            Represents an axis renderer used for charts of type Bar2D.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.VerticalXAxisRenderer.#ctor(Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters)">
            <summary>
            Initializes a new instance of the VerticalXAxisRenderer class with the specified renderer parameters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.VerticalXAxisRenderer.Init">
            <summary>
            Returns an initialized rendererInfo based on the X axis.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.VerticalXAxisRenderer.Format">
            <summary>
            Calculates the space used for the X axis.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.VerticalXAxisRenderer.Draw">
            <summary>
            Draws the horizontal X axis.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.VerticalXAxisRenderer.CalculateXAxisValues(Alt.GUI.PdfSharp.Charting.Renderers.AxisRendererInfo)">
            <summary>
            Calculates the X axis describing values like minimum/maximum scale, major/minor tick and
            major/minor tick mark width.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.VerticalXAxisRenderer.InitXValues(Alt.GUI.PdfSharp.Charting.Renderers.AxisRendererInfo)">
            <summary>
            Initializes the rendererInfo's xvalues. If not set by the user xvalues will be simply numbers
            from minimum scale + 1 to maximum scale.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.VerticalXAxisRenderer.GetTickMarkPos(Alt.GUI.PdfSharp.Charting.Renderers.AxisRendererInfo,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Calculates the starting and ending y position for the minor and major tick marks.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Renderers.WallRenderer">
            <summary>
            Represents a renderer for the plot area background.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.WallRenderer.#ctor(Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters)">
            <summary>
            Initializes a new instance of the WallRenderer class with the specified renderer parameters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Renderers.WallRenderer.Draw">
            <summary>
            Draws the wall.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Axis">
            <summary>
            This class represents an axis in a chart.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.ChartObject">
            <summary>
            Base class for all chart classes.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.DocumentObject">
            <summary>
            Base class for all chart classes.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.DocumentObject.#ctor">
            <summary>
            Initializes a new instance of the DocumentObject class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.DocumentObject.#ctor(Alt.GUI.PdfSharp.Charting.DocumentObject)">
            <summary>
            Initializes a new instance of the DocumentObject class with the specified parent.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.DocumentObject.Clone">
            <summary>
            Creates a deep copy of the DocumentObject. The parent of the new object is null.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.DocumentObject.DeepCopy">
            <summary>
            Implements the deep copy of the object.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.DocumentObject.parent">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.DocumentObject.Parent">
            <summary>
            Gets the parent object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.ChartObject.#ctor">
            <summary>
            Initializes a new instance of the ChartObject class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.ChartObject.#ctor(Alt.GUI.PdfSharp.Charting.DocumentObject)">
            <summary>
            Initializes a new instance of the ChartObject class with the specified parent.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Axis.#ctor(Alt.GUI.PdfSharp.Charting.DocumentObject)">
            <summary>
            Initializes a new instance of the Axis class with the specified parent.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Axis.Clone">
            <summary>
            Creates a deep copy of this object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Axis.DeepCopy">
            <summary>
            Implements the deep copy of the object.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Axis.Title">
            <summary>
            Gets the title of the axis.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Axis.MinimumScale">
            <summary>
            Gets or sets the minimum value of the axis.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Axis.MaximumScale">
            <summary>
            Gets or sets the maximum value of the axis.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Axis.MajorTick">
            <summary>
            Gets or sets the interval of the primary tick.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Axis.MinorTick">
            <summary>
            Gets or sets the interval of the secondary tick.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Axis.MajorTickMark">
            <summary>
            Gets or sets the type of the primary tick mark.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Axis.MinorTickMark">
            <summary>
            Gets or sets the type of the secondary tick mark.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Axis.TickLabels">
            <summary>
            Gets the label of the primary tick.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Axis.LineFormat">
            <summary>
            Gets the format of the axis line.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Axis.MajorGridlines">
            <summary>
            Gets the primary gridline object.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Axis.MinorGridlines">
            <summary>
            Gets the secondary gridline object.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Axis.HasMajorGridlines">
            <summary>
            Gets or sets, whether the axis has a primary gridline object.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Axis.HasMinorGridlines">
            <summary>
            Gets or sets, whether the axis has a secondary gridline object.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.AxisTitle">
            <summary>
            Represents the title of an axis.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.AxisTitle.#ctor">
            <summary>
            Initializes a new instance of the AxisTitle class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.AxisTitle.#ctor(Alt.GUI.PdfSharp.Charting.DocumentObject)">
            <summary>
            Initializes a new instance of the AxisTitle class with the specified parent.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.AxisTitle.Clone">
            <summary>
            Creates a deep copy of this object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.AxisTitle.DeepCopy">
            <summary>
            Implements the deep copy of the object.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.AxisTitle.Caption">
            <summary>
            Gets or sets the caption of the title.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.AxisTitle.Font">
            <summary>
            Gets the font of the title.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.AxisTitle.Orientation">
            <summary>
            Gets or sets the orientation of the caption.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.AxisTitle.Alignment">
            <summary>
            Gets or sets the horizontal alignment of the caption.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.AxisTitle.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of the caption.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Chart">
            <summary>
            Represents charts with different types.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Chart.#ctor">
            <summary>
            Initializes a new instance of the Chart class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Chart.#ctor(Alt.GUI.PdfSharp.Charting.DocumentObject)">
            <summary>
            Initializes a new instance of the Chart class with the specified parent.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Chart.#ctor(Alt.GUI.PdfSharp.Charting.ChartType)">
            <summary>
            Initializes a new instance of the Chart class with the specified chart type.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Chart.Clone">
            <summary>
            Creates a deep copy of this object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Chart.DeepCopy">
            <summary>
            Implements the deep copy of the object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Chart.CheckAxis(Alt.GUI.PdfSharp.Charting.Axis)">
            <summary>
            Determines the type of the given axis.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Chart.Type">
            <summary>
            Gets or sets the base type of the chart.
            ChartType of the series can be overwritten.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Chart.Font">
            <summary>
            Gets or sets the font for the chart. This will be the default font for all objects which are
            part of the chart.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Chart.Legend">
            <summary>
            Gets the legend of the chart.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Chart.XAxis">
            <summary>
            Gets the X-Axis of the Chart.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Chart.YAxis">
            <summary>
            Gets the Y-Axis of the Chart.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Chart.ZAxis">
            <summary>
            Gets the Z-Axis of the Chart.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Chart.SeriesCollection">
            <summary>
            Gets the collection of the data series.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Chart.XValues">
            <summary>
            Gets the collection of the values written on the X-Axis.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Chart.PlotArea">
            <summary>
            Gets the plot (drawing) area of the chart.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Chart.DisplayBlanksAs">
            <summary>
            Gets or sets a value defining how blanks in the data series should be shown.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Chart.DataLabel">
            <summary>
            Gets the DataLabel of the chart.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Chart.HasDataLabel">
            <summary>
            Gets or sets whether the chart has a DataLabel.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.ChartFrame">
            <summary>
            Represents the frame which holds one or more charts.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.ChartFrame.#ctor">
            <summary>
            Initializes a new instance of the ChartFrame class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.ChartFrame.#ctor(Alt.GUI.PdfSharp.Drawing.XRect)">
            <summary>
            Initializes a new instance of the ChartFrame class with the specified rectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.ChartFrame.Add(Alt.GUI.PdfSharp.Charting.Chart)">
            <summary>
            Adds a chart to the ChartFrame.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.ChartFrame.Draw(Alt.GUI.PdfSharp.Drawing.XGraphics)">
            <summary>
            Draws all charts inside the ChartFrame.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.ChartFrame.DrawChart(Alt.GUI.PdfSharp.Drawing.XGraphics)">
            <summary>
            Draws first chart only.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.ChartFrame.GetChartRenderer(Alt.GUI.PdfSharp.Charting.Chart,Alt.GUI.PdfSharp.Charting.Renderers.RendererParameters)">
            <summary>
            Returns the chart renderer appropriate for the chart.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.ChartFrame.chartList">
            <summary>
            Holds the charts which will be drawn inside the ChartFrame.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.ChartFrame.Location">
            <summary>
            Gets or sets the location of the ChartFrame.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.ChartFrame.Size">
            <summary>
            Gets or sets the size of the ChartFrame.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.DataLabel">
            <summary>
            Represents a DataLabel of a Series
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.DataLabel.#ctor">
            <summary>
            Initializes a new instance of the DataLabel class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.DataLabel.#ctor(Alt.GUI.PdfSharp.Charting.DocumentObject)">
            <summary>
            Initializes a new instance of the DataLabel class with the specified parent.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.DataLabel.Clone">
            <summary>
            Creates a deep copy of this object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.DataLabel.DeepCopy">
            <summary>
            Implements the deep copy of the object.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.DataLabel.Format">
            <summary>
            Gets or sets a numeric format string for the DataLabel.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.DataLabel.Font">
            <summary>
            Gets the Font for the DataLabel.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.DataLabel.Position">
            <summary>
            Gets or sets the position of the DataLabel.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.DataLabel.Type">
            <summary>
            Gets or sets the type of the DataLabel.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.DocumentObjectCollection">
            <summary>
            Base class of all collections.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.DocumentObjectCollection.#ctor">
            <summary>
            Initializes a new instance of the DocumentObjectCollection class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.DocumentObjectCollection.#ctor(Alt.GUI.PdfSharp.Charting.DocumentObject)">
            <summary>
            Initializes a new instance of the DocumentObjectCollection class with the specified parent.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.DocumentObjectCollection.Clone">
            <summary>
            Creates a deep copy of this object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.DocumentObjectCollection.DeepCopy">
            <summary>
            Implements the deep copy of the object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.DocumentObjectCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the ArrayList or a portion of it to a one-dimensional array.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.DocumentObjectCollection.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.DocumentObjectCollection.InsertObject(System.Int32,Alt.GUI.PdfSharp.Charting.DocumentObject)">
            <summary>
            Inserts an element into the collection at the specified position.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.DocumentObjectCollection.IndexOf(Alt.GUI.PdfSharp.Charting.DocumentObject)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.DocumentObjectCollection.RemoveObjectAt(System.Int32)">
            <summary>
            Removes the element at the specified index.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.DocumentObjectCollection.Add(Alt.GUI.PdfSharp.Charting.DocumentObject)">
            <summary>
            Adds the specified document object to the collection.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.DocumentObjectCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.DocumentObjectCollection.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.DocumentObjectCollection.Count">
            <summary>
            Gets the number of elements actually contained in the collection.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.DocumentObjectCollection.First">
            <summary>
            Gets the first value in the collection, if there is any, otherwise null.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.DocumentObjectCollection.LastObject">
            <summary>
            Gets the last element or null, if no such element exists.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.BlankType">
            <summary>
            Determines how null values will be handled in a chart.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.BlankType.NotPlotted">
            <summary>
            Null value is not plotted.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.BlankType.Interpolated">
            <summary>
            Null value will be interpolated.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.BlankType.Zero">
            <summary>
            Null value will be handled as zero.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.ChartType">
            <summary>
            Specifies with type of chart will be drawn.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.ChartType.Line">
            <summary>
            A line chart.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.ChartType.Column2D">
            <summary>
            A clustered 2d column chart.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.ChartType.ColumnStacked2D">
            <summary>
            A stacked 2d column chart.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.ChartType.Area2D">
            <summary>
            A 2d area chart.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.ChartType.Bar2D">
            <summary>
            A clustered 2d bar chart.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.ChartType.BarStacked2D">
            <summary>
            A stacked 2d bar chart.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.ChartType.Pie2D">
            <summary>
            A 2d pie chart.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.ChartType.PieExploded2D">
            <summary>
            An exploded 2d pie chart.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.DataLabelPosition">
            <summary>
            Determines where the data label will be positioned.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.DataLabelPosition.Center">
            <summary>
            DataLabel will be centered inside the bar or pie.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.DataLabelPosition.InsideBase">
            <summary>
            Inside the bar or pie at the origin.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.DataLabelPosition.InsideEnd">
            <summary>
            Inside the bar or pie at the edge.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.DataLabelPosition.OutsideEnd">
            <summary>
            Outside the bar or pie.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.DataLabelType">
            <summary>
            Determines the type of the data label.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.DataLabelType.None">
            <summary>
            No DataLabel.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.DataLabelType.Percent">
            <summary>
            Percentage of the data. For pie charts only.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.DataLabelType.Value">
            <summary>
            Value of the data.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.DockingType">
            <summary>
            Specifies the legend's position inside the chart.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.DockingType.Top">
            <summary>
            Above the chart.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.DockingType.Bottom">
            <summary>
            Below the chart.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.DockingType.Left">
            <summary>
            Left from the chart.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.DockingType.Right">
            <summary>
            Right from the chart.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.FontProperties">
            <summary>
            Specifies the properties for the font.
            FOR INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.HorizontalAlignment">
            <summary>
            Used to determine the horizontal alignment of the axis title.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.HorizontalAlignment.Left">
            <summary>
            Axis title will be left aligned.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.HorizontalAlignment.Right">
            <summary>
            Axis title will be right aligned.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.HorizontalAlignment.Center">
            <summary>
            Axis title will be centered.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.LineStyle">
            <summary>
            Specifies the line style of the LineFormat object.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.LineStyle.Single">
            <summary>
            
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.MarkerStyle">
            <summary>
            Symbols of a data point in a line chart.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.MarkerStyle.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.MarkerStyle.Circle">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.MarkerStyle.Dash">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.MarkerStyle.Diamond">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.MarkerStyle.Dot">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.MarkerStyle.Plus">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.MarkerStyle.Square">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.MarkerStyle.Star">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.MarkerStyle.Triangle">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.MarkerStyle.X">
            <summary>
            
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.TickMarkType">
            <summary>
            Determines the position where the Tickmarks will be rendered.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.TickMarkType.None">
            <summary>
            Tickmarks are not rendered.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.TickMarkType.Inside">
            <summary>
            Tickmarks are rendered inside the plot area.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.TickMarkType.Outside">
            <summary>
            Tickmarks are rendered outside the plot area.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.TickMarkType.Cross">
            <summary>
            Tickmarks are rendered inside and outside the plot area.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Underline">
            <summary>
            Specifies the underline type for the font.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.Underline.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.Underline.Single">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.Underline.Words">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.Underline.Dotted">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.Underline.Dash">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.Underline.DotDash">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.Underline.DotDotDash">
            <summary>
            
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.VerticalAlignment">
            <summary>
            Used to determine the vertical alignment of the axis title.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.VerticalAlignment.Top">
            <summary>
            Axis title will be top aligned.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.VerticalAlignment.Center">
            <summary>
            Axis title will be centered.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.VerticalAlignment.Bottom">
            <summary>
            Axis title will be bottom aligned.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.FillFormat">
            <summary>
            Defines the background filling of the shape.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.FillFormat.#ctor">
            <summary>
            Initializes a new instance of the FillFormat class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.FillFormat.#ctor(Alt.GUI.PdfSharp.Charting.DocumentObject)">
            <summary>
            Initializes a new instance of the FillFormat class with the specified parent.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.FillFormat.Clone">
            <summary>
            Creates a deep copy of this object.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.FillFormat.Color">
            <summary>
            Gets or sets the color of the filling.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.FillFormat.Visible">
            <summary>
            Gets or sets a value indicating whether the background color should be visible.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Font">
            <summary>
            Font represents the formatting of characters in a paragraph.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Font.#ctor">
            <summary>
            Initializes a new instance of the Font class that can be used as a template.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Font.#ctor(Alt.GUI.PdfSharp.Charting.DocumentObject)">
            <summary>
            Initializes a new instance of the Font class with the specified parent.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Font.#ctor(System.String,Alt.GUI.PdfSharp.Drawing.XUnit)">
            <summary>
            Initializes a new instance of the Font class with the specified name and size.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Font.Clone">
            <summary>
            Creates a copy of the Font.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Font.Name">
            <summary>
            Gets or sets the name of the font.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Font.Size">
            <summary>
            Gets or sets the size of the font.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Font.Bold">
            <summary>
            Gets or sets the bold property.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Font.Italic">
            <summary>
            Gets or sets the italic property.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Font.Underline">
            <summary>
            Gets or sets the underline property.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Font.Color">
            <summary>
            Gets or sets the color property.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Font.Superscript">
            <summary>
            Gets or sets the superscript property.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Font.Subscript">
            <summary>
            Gets or sets the subscript property.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Gridlines">
            <summary>
            Represents the gridlines on the axes.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Gridlines.#ctor">
            <summary>
            Initializes a new instance of the Gridlines class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Gridlines.#ctor(Alt.GUI.PdfSharp.Charting.DocumentObject)">
            <summary>
            Initializes a new instance of the Gridlines class with the specified parent.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Gridlines.Clone">
            <summary>
            Creates a deep copy of this object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Gridlines.DeepCopy">
            <summary>
            Implements the deep copy of the object.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Gridlines.LineFormat">
            <summary>
            Gets the line format of the grid.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Legend">
            <summary>
            Represents a legend of a chart.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Legend.#ctor">
            <summary>
            Initializes a new instance of the Legend class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Legend.#ctor(Alt.GUI.PdfSharp.Charting.DocumentObject)">
            <summary>
            Initializes a new instance of the Legend class with the specified parent.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Legend.Clone">
            <summary>
            Creates a deep copy of this object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Legend.DeepCopy">
            <summary>
            Implements the deep copy of the object.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Legend.LineFormat">
            <summary>
            Gets the line format of the legend's border.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Legend.Font">
            <summary>
            Gets the font of the legend.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Legend.Docking">
            <summary>
            Gets or sets the docking type.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.LineFormat">
            <summary>
            Defines the format of a line in a shape object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.LineFormat.#ctor">
            <summary>
            Initializes a new instance of the LineFormat class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.LineFormat.#ctor(Alt.GUI.PdfSharp.Charting.DocumentObject)">
            <summary>
            Initializes a new instance of the LineFormat class with the specified parent.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.LineFormat.Clone">
            <summary>
            Creates a deep copy of this object.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.LineFormat.Visible">
            <summary>
            Gets or sets a value indicating whether the line should be visible.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.LineFormat.Width">
            <summary>
            Gets or sets the width of the line in XUnit.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.LineFormat.Color">
            <summary>
            Gets or sets the color of the line.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.LineFormat.DashStyle">
            <summary>
            Gets or sets the dash style of the line.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.LineFormat.Style">
            <summary>
            Gets or sets the style of the line.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.PlotArea">
            <summary>
            Represents the area where the actual chart is drawn.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.PlotArea.#ctor">
            <summary>
            Initializes a new instance of the PlotArea class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.PlotArea.#ctor(Alt.GUI.PdfSharp.Charting.DocumentObject)">
            <summary>
            Initializes a new instance of the PlotArea class with the specified parent.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.PlotArea.Clone">
            <summary>
            Creates a deep copy of this object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.PlotArea.DeepCopy">
            <summary>
            Implements the deep copy of the object.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.PlotArea.LineFormat">
            <summary>
            Gets the line format of the plot area's border.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.PlotArea.FillFormat">
            <summary>
            Gets the background filling of the plot area.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.PlotArea.LeftPadding">
            <summary>
            Gets or sets the left padding of the area.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.PlotArea.RightPadding">
            <summary>
            Gets or sets the right padding of the area.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.PlotArea.TopPadding">
            <summary>
            Gets or sets the top padding of the area.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.PlotArea.BottomPadding">
            <summary>
            Gets or sets the bottom padding of the area.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Point">
            <summary>
            Represents a formatted value on the data series.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Point.#ctor">
            <summary>
            Initializes a new instance of the Point class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Point.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the Point class with a real value.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Point.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Point class with a real value.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Point.Clone">
            <summary>
            Creates a deep copy of this object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Point.DeepCopy">
            <summary>
            Implements the deep copy of the object.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Point.LineFormat">
            <summary>
            Gets the line format of the data point's border.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Point.FillFormat">
            <summary>
            Gets the filling format of the data point.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Point.Value">
            <summary>
            The actual value of the data point.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.PSCSR">
            <summary>
            The Pdf-Sharp-Charting-String-Resources.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.Series">
            <summary>
            Represents a series of data on the chart.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Series.#ctor">
            <summary>
            Initializes a new instance of the Series class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Series.Clone">
            <summary>
            Creates a deep copy of this object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Series.DeepCopy">
            <summary>
            Implements the deep copy of the object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Series.AddBlank">
            <summary>
            Adds a blank to the series.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Series.Add(System.Double)">
            <summary>
            Adds a real value to the series.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.Series.Add(System.Double[])">
            <summary>
            Adds an array of real values to the series.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Series.Elements">
            <summary>
            The actual value container of the series.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Series.Name">
            <summary>
            Gets or sets the name of the series which will be used in the legend.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Series.LineFormat">
            <summary>
            Gets the line format of the border of each data.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Series.FillFormat">
            <summary>
            Gets the background filling of the data.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Series.MarkerSize">
            <summary>
            Gets or sets the size of the marker in a line chart.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Series.MarkerStyle">
            <summary>
            Gets or sets the style of the marker in a line chart.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Series.MarkerForegroundColor">
            <summary>
            Gets or sets the foreground color of the marker in a line chart.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Series.MarkerBackgroundColor">
            <summary>
            Gets or sets the background color of the marker in a line chart.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Series.ChartType">
            <summary>
            Gets or sets the chart type of the series if it's intended to be different than the
            global chart type.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Series.DataLabel">
            <summary>
            Gets the DataLabel of the series.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Series.HasDataLabel">
            <summary>
            Gets or sets whether the series has a DataLabel.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.Series.Count">
            <summary>
            Gets the element count of the series.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.SeriesCollection">
            <summary>
            The collection of data series.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.SeriesCollection.#ctor">
            <summary>
            Initializes a new instance of the SeriesCollection class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.SeriesCollection.#ctor(Alt.GUI.PdfSharp.Charting.DocumentObject)">
            <summary>
            Initializes a new instance of the SeriesCollection class with the specified parent.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.SeriesCollection.Clone">
            <summary>
            Creates a deep copy of this object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.SeriesCollection.AddSeries">
            <summary>
            Adds a new series to the collection.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.SeriesCollection.Item(System.Int32)">
            <summary>
            Gets a series by it's index.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.SeriesElements">
            <summary>
            Represents the collection of the values in a data series.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.SeriesElements.#ctor">
            <summary>
            Initializes a new instance of the SeriesElements class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.SeriesElements.#ctor(Alt.GUI.PdfSharp.Charting.DocumentObject)">
            <summary>
            Initializes a new instance of the SeriesElements class with the specified parent.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.SeriesElements.Clone">
            <summary>
            Creates a deep copy of this object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.SeriesElements.AddBlank">
            <summary>
            Adds a blank to the series.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.SeriesElements.Add(System.Double)">
            <summary>
            Adds a new point with a real value to the series.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.SeriesElements.Add(System.Double[])">
            <summary>
            Adds an array of new points with real values to the series.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.SeriesElements.Item(System.Int32)">
            <summary>
            Gets a point by it's index.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.TickLabels">
            <summary>
            Represents the format of the label of each value on the axis.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.TickLabels.#ctor">
            <summary>
            Initializes a new instance of the TickLabels class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.TickLabels.#ctor(Alt.GUI.PdfSharp.Charting.DocumentObject)">
            <summary>
            Initializes a new instance of the TickLabels class with the specified parent.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.TickLabels.Clone">
            <summary>
            Creates a deep copy of this object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.TickLabels.DeepCopy">
            <summary>
            Implements the deep copy of the object.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.TickLabels.Format">
            <summary>
            Gets or sets the label's number format.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.TickLabels.Font">
            <summary>
            Gets the font of the label.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.XSeries">
            <summary>
            Represents a series of data on the X-Axis.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.XSeries.#ctor">
            <summary>
            Initializes a new instance of the XSeries class.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.XSeries.xSeriesElements">
            <summary>
            The actual value container of the XSeries.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.XSeries.Clone">
            <summary>
            Creates a deep copy of this object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.XSeries.DeepCopy">
            <summary>
            Implements the deep copy of the object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.XSeries.AddBlank">
            <summary>
            Adds a blank to the XSeries.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.XSeries.Add(System.String)">
            <summary>
            Adds a value to the XSeries.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.XSeries.Add(System.String[])">
            <summary>
            Adds an array of values to the XSeries.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.XSeries.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.XSeries.Item(System.Int32)">
            <summary>
            Gets the xvalue at the specified index.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.XSeries.Count">
            <summary>
            Gets the number of xvalues actually contained in the xseries.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.XSeriesElements">
            <summary>
            Represents the collection of the value in an XSeries.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.XSeriesElements.#ctor">
            <summary>
            Initializes a new instance of the XSeriesElements class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.XSeriesElements.Clone">
            <summary>
            Creates a deep copy of this object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.XSeriesElements.AddBlank">
            <summary>
            Adds a blank to the XSeries.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.XSeriesElements.Add(System.String)">
            <summary>
            Adds a value to the XSeries.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.XSeriesElements.Add(System.String[])">
            <summary>
            Adds an array of values to the XSeries.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.XValue">
            <summary>
            Represents the actual value on the XSeries.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.XValue.#ctor">
            <summary>
            Initializes a new instance of the XValue class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.XValue.#ctor(System.String)">
            <summary>
            Initializes a new instance of the XValue class with the specified value.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Charting.XValue.Value">
            <summary>
            The actual value of the XValue.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.XValue.Clone">
            <summary>
            Creates a deep copy of this object.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Charting.XValues">
            <summary>
            Represents the collection of values on the X-Axis.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.XValues.#ctor">
            <summary>
            Initializes a new instance of the XValues class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.XValues.#ctor(Alt.GUI.PdfSharp.Charting.DocumentObject)">
            <summary>
            Initializes a new instance of the XValues class with the specified parent.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.XValues.Clone">
            <summary>
            Creates a deep copy of this object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Charting.XValues.AddXSeries">
            <summary>
            Adds a new XSeries to the collection.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Charting.XValues.Item(System.Int32)">
            <summary>
            Gets an XSeries by its index.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.BarCodes.BarCode">
            <summary>
            Represents the base class of all bar codes.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.BarCodes.CodeBase">
            <summary>
            Represents the base class of all codes.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.CodeBase.#ctor(System.String,Alt.GUI.PdfSharp.Drawing.XSize,Alt.GUI.PdfSharp.Drawing.BarCodes.CodeDirection)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Drawing.BarCodes.CodeBase"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.CodeBase.CheckCode(System.String)">
            <summary>
            When implemented in a derived class, determines whether the specified string can be used as Text
            for this bar code type.
            </summary>
            <param name="text">The code string to check.</param>
            <returns>True if the text can be used for the actual barcode.</returns>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.CodeBase.CalcDistance(Alt.GUI.PdfSharp.Drawing.BarCodes.AnchorType,Alt.GUI.PdfSharp.Drawing.BarCodes.AnchorType,Alt.GUI.PdfSharp.Drawing.XSize)">
            <summary>
            Calculates the distance between an old anchor point and a new anchor point.
            </summary>
            <param name="oldType"></param>
            <param name="newType"></param>
            <param name="size"></param>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.BarCodes.CodeBase.Size">
            <summary>
            Gets or sets the size.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.BarCodes.CodeBase.Text">
            <summary>
            Gets or sets the text the bar code shall represent.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.BarCodes.CodeBase.Anchor">
            <summary>
            Always MiddleCenter.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.BarCodes.CodeBase.Direction">
            <summary>
            Gets or sets the drawing direction.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.BarCode.#ctor(System.String,Alt.GUI.PdfSharp.Drawing.XSize,Alt.GUI.PdfSharp.Drawing.BarCodes.CodeDirection)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Drawing.BarCodes.BarCode"/> class.
            </summary>
            <param name="text"></param>
            <param name="size"></param>
            <param name="direction"></param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.BarCode.FromType(Alt.GUI.PdfSharp.Drawing.BarCodes.CodeType,System.String,Alt.GUI.PdfSharp.Drawing.XSize,Alt.GUI.PdfSharp.Drawing.BarCodes.CodeDirection)">
            <summary>
            Creates a bar code from the specified code type.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.BarCode.FromType(Alt.GUI.PdfSharp.Drawing.BarCodes.CodeType,System.String,Alt.GUI.PdfSharp.Drawing.XSize)">
            <summary>
            Creates a bar code from the specified code type.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.BarCode.FromType(Alt.GUI.PdfSharp.Drawing.BarCodes.CodeType,System.String)">
            <summary>
            Creates a bar code from the specified code type.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.BarCode.FromType(Alt.GUI.PdfSharp.Drawing.BarCodes.CodeType)">
            <summary>
            Creates a bar code from the specified code type.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.BarCode.Render(Alt.GUI.PdfSharp.Drawing.XGraphics,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.GUI.PdfSharp.Drawing.XFont,Alt.GUI.PdfSharp.Drawing.XPoint)">
            <summary>
            When defined in a derived class renders the code.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.BarCodes.BarCode.WideNarrowRatio">
            <summary>
            When overridden in a derived class gets or sets the wide narrow ratio.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.BarCodes.BarCode.TextLocation">
            <summary>
            Gets or sets the location of the text next to the bar code.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.BarCodes.BarCode.DataLength">
            <summary>
            Gets or sets the length of the data that defines the bar code.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.BarCodes.BarCode.StartChar">
            <summary>
            Gets or sets the optional start character.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.BarCodes.BarCode.EndChar">
            <summary>
            Gets or sets the optional end character.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.BarCodes.BarCode.TurboBit">
            <summary>
            Gets or sets a value indicating whether the turbo bit is to be drawn.
            (A turbo bit is something special to Kern (computer output processing) company (as far as I know))
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.BarCodes.BarCodeRenderInfo">
            <summary>
            Holds all temporary information needed during rendering.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.BarCodes.BcgSR">
            <summary>
            String resources for the empira barcode renderer.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.BarCodes.Code2of5Interleaved">
            <summary>
            Implementation of the Code 2 of 5 bar code.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.BarCodes.ThickThinBarCode">
            <summary>
            Internal base class for several bar code types.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.ThickThinBarCode.#ctor(System.String,Alt.GUI.PdfSharp.Drawing.XSize,Alt.GUI.PdfSharp.Drawing.BarCodes.CodeDirection)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Drawing.BarCodes.ThickThinBarCode"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.ThickThinBarCode.RenderBar(Alt.GUI.PdfSharp.Drawing.BarCodes.BarCodeRenderInfo,System.Boolean)">
            <summary>
            Renders a thick or thin line for the bar code.
            </summary>
            <param name="info"></param>
            <param name="isThick">Determines whether a thick or a thin line is about to be rendered.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.ThickThinBarCode.RenderGap(Alt.GUI.PdfSharp.Drawing.BarCodes.BarCodeRenderInfo,System.Boolean)">
            <summary>
            Renders a thick or thin gap for the bar code.
            </summary>
            <param name="info"></param>
            <param name="isThick">Determines whether a thick or a thin gap is about to be rendered.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.ThickThinBarCode.RenderTurboBit(Alt.GUI.PdfSharp.Drawing.BarCodes.BarCodeRenderInfo,System.Boolean)">
            <summary>
            Renders a thick bar before or behind the code.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.ThickThinBarCode.GetBarWidth(Alt.GUI.PdfSharp.Drawing.BarCodes.BarCodeRenderInfo,System.Boolean)">
            <summary>
            Gets the width of a thick or a thin line (or gap). CalcLineWidth must have been called before.
            </summary>
            <param name="info"></param>
            <param name="isThick">Determines whether a thick line's with shall be returned.</param>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.BarCodes.ThickThinBarCode.WideNarrowRatio">
            <summary>
            Gets or sets the ration between thick an thin lines. Must be between 2 and 3.
            Optimal and also default value is 2.6.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.Code2of5Interleaved.#ctor">
            <summary>
            Initializes a new instance of Interleaved2of5.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.Code2of5Interleaved.#ctor(System.String)">
            <summary>
            Initializes a new instance of Interleaved2of5.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.Code2of5Interleaved.#ctor(System.String,Alt.GUI.PdfSharp.Drawing.XSize)">
            <summary>
            Initializes a new instance of Interleaved2of5.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.Code2of5Interleaved.#ctor(System.String,Alt.GUI.PdfSharp.Drawing.XSize,Alt.GUI.PdfSharp.Drawing.BarCodes.CodeDirection)">
            <summary>
            Initializes a new instance of Interleaved2of5.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.Code2of5Interleaved.ThickAndThinLines(System.Int32)">
            <summary>
            Returns an array of size 5 that represents the thick (true) and thin (false) lines or spaces
            representing the specified digit.
            </summary>
            <param name="digit">The digit to represent.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.Code2of5Interleaved.Render(Alt.GUI.PdfSharp.Drawing.XGraphics,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.GUI.PdfSharp.Drawing.XFont,Alt.GUI.PdfSharp.Drawing.XPoint)">
            <summary>
            Renders the bar code.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.Code2of5Interleaved.CalcThinBarWidth(Alt.GUI.PdfSharp.Drawing.BarCodes.BarCodeRenderInfo)">
            <summary>
            Calculates the thick and thin line widths,
            taking into account the required rendering size.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.Code2of5Interleaved.RenderNextPair(Alt.GUI.PdfSharp.Drawing.BarCodes.BarCodeRenderInfo)">
            <summary>
            Renders the next digit pair as bar code element.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.Code2of5Interleaved.CheckCode(System.String)">
            <summary>
            Checks the code to be convertible into an interleaved 2 of 5 bar code.
            </summary>
            <param name="text">The code to be checked.</param>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.BarCodes.Code3of9Standard">
            <summary>
            Imlpementation of the Code 3 of 9 bar code.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.Code3of9Standard.#ctor">
            <summary>
            Initializes a new instance of Standard3of9.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.Code3of9Standard.#ctor(System.String)">
            <summary>
            Initializes a new instance of Standard3of9.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.Code3of9Standard.#ctor(System.String,Alt.GUI.PdfSharp.Drawing.XSize)">
            <summary>
            Initializes a new instance of Standard3of9.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.Code3of9Standard.#ctor(System.String,Alt.GUI.PdfSharp.Drawing.XSize,Alt.GUI.PdfSharp.Drawing.BarCodes.CodeDirection)">
            <summary>
            Initializes a new instance of Standard3of9.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.Code3of9Standard.ThickThinLines(System.Char)">
            <summary>
            Returns an array of size 9 that represents the thick (true) and thin (false) lines and spaces
            representing the specified digit.
            </summary>
            <param name="ch">The character to represent.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.Code3of9Standard.CalcThinBarWidth(Alt.GUI.PdfSharp.Drawing.BarCodes.BarCodeRenderInfo)">
            <summary>
            Calculates the thick and thin line widths,
            taking into account the required rendering size.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.Code3of9Standard.CheckCode(System.String)">
            <summary>
            Checks the code to be convertible into an standard 3 of 9 bar code.
            </summary>
            <param name="text">The code to be checked.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.Code3of9Standard.Render(Alt.GUI.PdfSharp.Drawing.XGraphics,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.GUI.PdfSharp.Drawing.XFont,Alt.GUI.PdfSharp.Drawing.XPoint)">
            <summary>
            Renders the bar code.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.BarCodes.CodeDataMatrix">
            <summary>
            Defines the DataMatrix 2D barcode. THIS IS AN EMPIRA INTERNAL IMPLEMENTATION. THE CODE IN
            THE OPEN SOURCE VERSION IS A FAKE.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.BarCodes.MatrixCode">
            <summary>
            Represents the base class of all 2D codes.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.MatrixCode.#ctor(System.String,System.String,System.Int32,System.Int32,Alt.GUI.PdfSharp.Drawing.XSize)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Drawing.BarCodes.MatrixCode"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.MatrixCode.Render(Alt.GUI.PdfSharp.Drawing.XGraphics,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.GUI.PdfSharp.Drawing.XPoint)">
            <summary>
            When implemented in a derived class renders the 2D code.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.MatrixCode.CheckCode(System.String)">
            <summary>
            Determines whether the specified string can be used as Text for this matrix code type.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.BarCodes.MatrixCode.Encoding">
            <summary>
            Gets or sets the encoding. docDaSt
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.BarCodes.MatrixCode.Columns">
            <summary>
            docDaSt
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.BarCodes.MatrixCode.Rows">
            <summary>
            docDaSt
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.BarCodes.MatrixCode.Text">
            <summary>
            docDaSt
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.CodeDataMatrix.#ctor">
            <summary>
            Initializes a new instance of CodeDataMatrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.CodeDataMatrix.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of CodeDataMatrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.CodeDataMatrix.#ctor(System.String,System.Int32,Alt.GUI.PdfSharp.Drawing.XSize)">
            <summary>
            Initializes a new instance of CodeDataMatrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.CodeDataMatrix.#ctor(System.String,Alt.GUI.PdfSharp.Drawing.BarCodes.DataMatrixEncoding,System.Int32,Alt.GUI.PdfSharp.Drawing.XSize)">
            <summary>
            Initializes a new instance of CodeDataMatrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.CodeDataMatrix.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of CodeDataMatrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.CodeDataMatrix.#ctor(System.String,System.Int32,System.Int32,Alt.GUI.PdfSharp.Drawing.XSize)">
            <summary>
            Initializes a new instance of CodeDataMatrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.CodeDataMatrix.#ctor(System.String,Alt.GUI.PdfSharp.Drawing.BarCodes.DataMatrixEncoding,System.Int32,System.Int32,Alt.GUI.PdfSharp.Drawing.XSize)">
            <summary>
            Initializes a new instance of CodeDataMatrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.CodeDataMatrix.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of CodeDataMatrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.CodeDataMatrix.#ctor(System.String,System.String,System.Int32,System.Int32,System.Int32,Alt.GUI.PdfSharp.Drawing.XSize)">
            <summary>
            Initializes a new instance of CodeDataMatrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.CodeDataMatrix.SetEncoding(Alt.GUI.PdfSharp.Drawing.BarCodes.DataMatrixEncoding)">
            <summary>
            Sets the encoding of the DataMatrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.CodeDataMatrix.Render(Alt.GUI.PdfSharp.Drawing.XGraphics,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.GUI.PdfSharp.Drawing.XPoint)">
            <summary>
            Renders the matrix code.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.CodeDataMatrix.CheckCode(System.String)">
            <summary>
            Determines whether the specified string can be used as data in the DataMatrix.
            </summary>
            <param name="text">The code to be checked.</param>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.BarCodes.CodeDataMatrix.QuietZone">
            <summary>
            Gets or sets the size of the Matrix' Quiet Zone.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.BarCodes.CodeOmr">
            <summary>
            Represents an OMR code.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.CodeOmr.#ctor(System.String,Alt.GUI.PdfSharp.Drawing.XSize,Alt.GUI.PdfSharp.Drawing.BarCodes.CodeDirection)">
            <summary>
            initializes a new OmrCode with the given data.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.CodeOmr.Render(Alt.GUI.PdfSharp.Drawing.XGraphics,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.GUI.PdfSharp.Drawing.XFont,Alt.GUI.PdfSharp.Drawing.XPoint)">
            <summary>
            Renders the OMR code.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.CodeOmr.CheckCode(System.String)">
            <summary>
            Determines whether the specified string can be used as Text for the OMR code.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.BarCodes.CodeOmr.SynchronizeCode">
            <summary>
            Gets or sets a value indicating whether a synchronize mark is rendered.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.BarCodes.CodeOmr.MakerDistance">
            <summary>
            Gets or sets the distance of the markers.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.BarCodes.CodeOmr.MakerThickness">
            <summary>
            Gets or sets the thickness of the makers.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.BarCodes.DataMatrixImage">
            <summary>
            Creates the XImage object for a DataMatrix.
            Important note for OpenSource version of PDFsharp:
              The generated image object only contains random data.
              If you need the correct implementation as defined in the ISO/IEC 16022:2000 specification,
              please contact empira Software GmbH via www.pdfsharp.com.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.BarCodes.DataMatrixImage.ecc200Sizes">
            <summary>
            Possible ECC200 Matrixes
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.DataMatrixImage.DataMatrix">
            <summary>
            Creates the DataMatrix code.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.DataMatrixImage.Iec16022Ecc200(System.Int32,System.Int32,System.String,System.Int32,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Encodes the DataMatrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.DataMatrixImage.CreateImage(System.Char[],System.Int32)">
            <summary>
            Creates a DataMatrix image object.
            </summary>
            <param name="code">A hex string like "AB 08 C3...".</param>
            <param name="size">I.e. 26 for a 26x26 matrix</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.DataMatrixImage.CreateImage(System.Char[],System.Int32,System.Int32)">
            <summary>
            Creates a DataMatrix image object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.BarCodes.DataMatrixImage.CreateImage(System.Char[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a DataMatrix image object.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.BarCodes.AnchorType">
            <summary>
            Specifies whether and how the text is displayed at the code area.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.BarCodes.AnchorType.TopLeft">
            <summary>
            The anchor is located top left.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.BarCodes.AnchorType.TopCenter">
            <summary>
            The anchor is located top center.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.BarCodes.AnchorType.TopRight">
            <summary>
            The anchor is located top right.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.BarCodes.AnchorType.MiddleLeft">
            <summary>
            The anchor is located middle left.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.BarCodes.AnchorType.MiddleCenter">
            <summary>
            The anchor is located middle center.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.BarCodes.AnchorType.MiddleRight">
            <summary>
            The anchor is located middle right.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.BarCodes.AnchorType.BottomLeft">
            <summary>
            The anchor is located bottom left.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.BarCodes.AnchorType.BottomCenter">
            <summary>
            The anchor is located bottom center.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.BarCodes.AnchorType.BottomRight">
            <summary>
            The anchor is located bottom right.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.BarCodes.CodeDirection">
            <summary>
            Specifies the drawing direction of the code.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.BarCodes.CodeDirection.LeftToRight">
            <summary>
            Does not rotate the code.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.BarCodes.CodeDirection.BottomToTop">
            <summary>
            Rotates the code 180° at the anchor position.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.BarCodes.CodeDirection.RightToLeft">
            <summary>
            Rotates the code 180° at the anchor position.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.BarCodes.CodeDirection.TopToBottom">
            <summary>
            Rotates the code 180° at the anchor position.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.BarCodes.CodeType">
            <summary>
            Specifies the type of the bar code.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.BarCodes.CodeType.Code2of5Interleaved">
            <summary>
            The standard 2 of 5 interleaved bar code.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.BarCodes.CodeType.Code3of9Standard">
            <summary>
            The standard 3 of 9 bar code.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.BarCodes.CodeType.Omr">
            <summary>
            The OMR code.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.BarCodes.CodeType.DataMatrix">
            <summary>
            The data matrix code.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.BarCodes.DataMatrixEncoding">
            <summary>
            docDaSt
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.BarCodes.DataMatrixEncoding.Ascii">
            <summary>
            docDaSt
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.BarCodes.DataMatrixEncoding.C40">
            <summary>
            docDaSt
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.BarCodes.DataMatrixEncoding.Text">
            <summary>
            docDaSt
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.BarCodes.DataMatrixEncoding.X12">
            <summary>
            docDaSt
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.BarCodes.DataMatrixEncoding.EDIFACT">
            <summary>
            docDaSt
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.BarCodes.DataMatrixEncoding.Base256">
            <summary>
            docDaSt
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.BarCodes.TextLocation">
            <summary>
            Specifies whether and how the text is displayed at the code.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.BarCodes.TextLocation.None">
            <summary>
            No text is drawn.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.BarCodes.TextLocation.Above">
            <summary>
            The text is located above the code.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.BarCodes.TextLocation.Below">
            <summary>
            The text is located below the code.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.BarCodes.TextLocation.AboveEmbedded">
            <summary>
            The text is located above within the code.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.BarCodes.TextLocation.BelowEmbedded">
            <summary>
            The text is located below within the code.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.Layout.XParagraphAlignment">
            <summary>
            Specifies the alignment of a paragraph.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.Layout.XParagraphAlignment.Default">
            <summary>
            Default alignment, typically left alignment.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.Layout.XParagraphAlignment.Left">
            <summary>
            The paragraph is rendered left aligned.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.Layout.XParagraphAlignment.Center">
            <summary>
            The paragraph is rendered centered.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.Layout.XParagraphAlignment.Right">
            <summary>
            The paragraph is rendered right aligned.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.Layout.XParagraphAlignment.Justify">
            <summary>
            The paragraph is rendered justified.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.Layout.XTextFormatter">
            <summary>
            Represents a very simple text formatter.
            If this class does not satisfy your needs on formatting paragraphs I recommend to take a look
            at MigraDoc Foundation. Alternatively you should copy this class in your own source code and modify it.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.Layout.XTextFormatter.#ctor(Alt.GUI.PdfSharp.Drawing.XGraphics)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Drawing.Layout.XTextFormatter"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.Layout.XTextFormatter.DrawString(System.String,Alt.GUI.PdfSharp.Drawing.XFont,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.GUI.PdfSharp.Drawing.XRect)">
            <summary>
            Draws the text.
            </summary>
            <param name="text">The text to be drawn.</param>
            <param name="font">The font.</param>
            <param name="brush">The text brush.</param>
            <param name="layoutRectangle">The layout rectangle.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.Layout.XTextFormatter.DrawString(System.String,Alt.GUI.PdfSharp.Drawing.XFont,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.GUI.PdfSharp.Drawing.XRect,Alt.GUI.PdfSharp.Drawing.XStringFormat)">
            <summary>
            Draws the text.
            </summary>
            <param name="text">The text to be drawn.</param>
            <param name="font">The font.</param>
            <param name="brush">The text brush.</param>
            <param name="layoutRectangle">The layout rectangle.</param>
            <param name="format">The format. Must be <c>XStringFormat.TopLeft</c></param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.Layout.XTextFormatter.AlignLine(System.Int32,System.Int32,System.Double)">
            <summary>
            Align center, right or justify.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.Layout.XTextFormatter.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.Layout.XTextFormatter.Font">
            <summary>
            Gets or sets the font.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.Layout.XTextFormatter.LayoutRectangle">
            <summary>
            Gets or sets the bounding box of the layout.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.Layout.XTextFormatter.Alignment">
            <summary>
            Gets or sets the alignment of the text.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.Layout.XTextFormatter.Block">
            <summary>
            Represents a single word.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.Layout.XTextFormatter.Block.#ctor(System.String,Alt.GUI.PdfSharp.Drawing.Layout.XTextFormatter.BlockType,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Drawing.Layout.XTextFormatter.Block"/> class.
            </summary>
            <param name="text">The text of the block.</param>
            <param name="type">The type of the block.</param>
            <param name="width">The width of the text.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.Layout.XTextFormatter.Block.#ctor(Alt.GUI.PdfSharp.Drawing.Layout.XTextFormatter.BlockType)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Drawing.Layout.XTextFormatter.Block"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.Layout.XTextFormatter.Block.Text">
            <summary>
            The text represented by this block.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.Layout.XTextFormatter.Block.Type">
            <summary>
            The type of the block.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.Layout.XTextFormatter.Block.Width">
            <summary>
            The width of the text.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.Layout.XTextFormatter.Block.Location">
            <summary>
            The location relative to the upper left corner of the layout rectangle.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.Layout.XTextFormatter.Block.Alignment">
            <summary>
            The alignment of this line.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.Layout.XTextFormatter.Block.Stop">
            <summary>
            A flag indicating that this is the last bock that fits in the layout rectangle.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.Pdf.StreamMode">
            <summary>
            Indicates whether we are within a BT/ET block.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.Pdf.StreamMode.Graphic">
            <summary>
            Graphic mode. This is default.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.Pdf.StreamMode.Text">
            <summary>
            Text mode.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.Pdf.PdfGraphicsState">
            <summary>
            Represents the current PDF graphics state.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.Pdf.PdfGraphicsState.realizedCtm">
            <summary>
            The realized current transformation matrix.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.Pdf.PdfGraphicsState.unrealizedCtm">
            <summary>
            The unrealized current transformation matrix.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.Pdf.PdfGraphicsState.MustRealizeCtm">
            <summary>
            A flag indicating whether the CTM must be realized.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.Pdf.PdfGraphicsState.MultiplyTransform(Alt.GUI.PdfSharp.Drawing.XMatrix,Alt.GUI.PdfSharp.Drawing.XMatrixOrder)">
            <summary>
            Modifies the current transformation matrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.Pdf.PdfGraphicsState.RealizeCtm">
            <summary>
            Realizes the CTM.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.Pdf.XGraphicsPdfRenderer">
            <summary>
            Represents a drawing surface for PdfPages.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.IXGraphicsRenderer">
            <summary>
            Represents an abstract drawing surface for PdfPages.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.IXGraphicsRenderer.Clear(Alt.GUI.PdfSharp.Drawing.XColor)">
            <summary>
            Fills the entire drawing surface with the specified color.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.IXGraphicsRenderer.DrawLine(Alt.GUI.PdfSharp.Drawing.XPen,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws a straight line.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.IXGraphicsRenderer.DrawLines(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XPoint[])">
            <summary>
            Draws a series of straight lines.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.IXGraphicsRenderer.DrawBezier(Alt.GUI.PdfSharp.Drawing.XPen,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws a Bйzier spline.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.IXGraphicsRenderer.DrawBeziers(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XPoint[])">
            <summary>
            Draws a series of Bйzier splines.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.IXGraphicsRenderer.DrawCurve(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XPoint[],System.Double)">
            <summary>
            Draws a cardinal spline.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.IXGraphicsRenderer.DrawArc(Alt.GUI.PdfSharp.Drawing.XPen,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws an arc.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.IXGraphicsRenderer.DrawRectangle(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XBrush,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws a rectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.IXGraphicsRenderer.DrawRectangles(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.GUI.PdfSharp.Drawing.XRect[])">
            <summary>
            Draws a series of rectangles.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.IXGraphicsRenderer.DrawRoundedRectangle(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XBrush,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws a rectangle with rounded corners.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.IXGraphicsRenderer.DrawEllipse(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XBrush,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws an ellipse.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.IXGraphicsRenderer.DrawPolygon(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.GUI.PdfSharp.Drawing.XPoint[],Alt.GUI.PdfSharp.Drawing.XFillMode)">
            <summary>
            Draws a polygon.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.IXGraphicsRenderer.DrawPie(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XBrush,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws a pie.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.IXGraphicsRenderer.DrawClosedCurve(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.GUI.PdfSharp.Drawing.XPoint[],System.Double,Alt.GUI.PdfSharp.Drawing.XFillMode)">
            <summary>
            Draws a cardinal spline.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.IXGraphicsRenderer.DrawPath(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.GUI.PdfSharp.Drawing.XGraphicsPath)">
            <summary>
            Draws a graphical path.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.IXGraphicsRenderer.DrawString(System.String,Alt.GUI.PdfSharp.Drawing.XFont,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.GUI.PdfSharp.Drawing.XRect,Alt.GUI.PdfSharp.Drawing.XStringFormat)">
            <summary>
            Draws a series of glyphs identified by the specified text and font.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.IXGraphicsRenderer.DrawImage(Alt.GUI.PdfSharp.Drawing.XImage,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws an image.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.IXGraphicsRenderer.Save(Alt.GUI.PdfSharp.Drawing.XGraphicsState)">
            <summary>
            Saves the current graphics state without changing it.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.IXGraphicsRenderer.Restore(Alt.GUI.PdfSharp.Drawing.XGraphicsState)">
            <summary>
            Restores the specified graphics state.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.IXGraphicsRenderer.BeginContainer(Alt.GUI.PdfSharp.Drawing.XGraphicsContainer,Alt.GUI.PdfSharp.Drawing.XRect,Alt.GUI.PdfSharp.Drawing.XRect,Alt.GUI.PdfSharp.Drawing.XGraphicsUnit)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.IXGraphicsRenderer.EndContainer(Alt.GUI.PdfSharp.Drawing.XGraphicsContainer)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.IXGraphicsRenderer.SetPageTransform(Alt.GUI.PdfSharp.Drawing.XPageDirection,Alt.GUI.PdfSharp.Drawing.XPoint,Alt.GUI.PdfSharp.Drawing.XGraphicsUnit)">
            <summary>
            Sets all values that influence the page transformation.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.IXGraphicsRenderer.WriteComment(System.String)">
            <summary>
            Writes a comment to the output stream. Comments have no effect on the rendering of the output.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.IXGraphicsRenderer.Transform">
            <summary>
            Gets or sets the transformation matrix.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.Pdf.XGraphicsPdfRenderer.GraphicsStackLevelInitial">
            <summary>
            The q/Q nesting level is 0.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.Pdf.XGraphicsPdfRenderer.GraphicsStackLevelPageSpace">
            <summary>
            The q/Q nesting level is 1.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.Pdf.XGraphicsPdfRenderer.GraphicsStackLevelWorldSpace">
            <summary>
            The q/Q nesting level is 2.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.Pdf.XGraphicsPdfRenderer.GetContent">
            <summary>
            Gets the content created by this renderer.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.Pdf.XGraphicsPdfRenderer.DrawLine(Alt.GUI.PdfSharp.Drawing.XPen,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Strokes a single connection of two points.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.Pdf.XGraphicsPdfRenderer.DrawLines(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XPoint[])">
            <summary>
            Strokes a series of connected points.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.Pdf.XGraphicsPdfRenderer.Save(Alt.GUI.PdfSharp.Drawing.XGraphicsState)">
            <summary>
            Clones the current graphics state and push it on a stack.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.Pdf.XGraphicsPdfRenderer.ResetClip">
            <summary>
            Sets the clip path empty. Only possible if graphic state level has the same value as it has when
            the first time SetClip was invoked.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.Pdf.XGraphicsPdfRenderer.clipLevel">
            <summary>
            The nesting level of the PDF graphics state stack when the clip region was set to non empty.
            Because of the way PDF is made the clip region can only be reset at this level.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.Pdf.XGraphicsPdfRenderer.WriteComment(System.String)">
            <summary>
            Writes a comment to the PDF content stream. May be useful for debugging purposes.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.Pdf.XGraphicsPdfRenderer.AppendPartialArc(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,Alt.GUI.PdfSharp.Drawing.PathStart,Alt.GUI.PdfSharp.Drawing.XMatrix)">
            <summary>
            Appends one or up to five Bézier curves that interpolate the arc.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.Pdf.XGraphicsPdfRenderer.Quatrant(System.Double,System.Boolean,System.Boolean)">
            <summary>
            Gets the quadrant (0 through 3) of the specified angle. If the angle lies on an edge
            (0, 90, 180, etc.) the result depends on the details how the angle is used.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.Pdf.XGraphicsPdfRenderer.AppendPartialArcQuadrant(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,Alt.GUI.PdfSharp.Drawing.PathStart,Alt.GUI.PdfSharp.Drawing.XMatrix)">
            <summary>
            Appends a Bézier curve for an arc within a quadrant.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.Pdf.XGraphicsPdfRenderer.AppendCurveSegment(Alt.GUI.PdfSharp.Drawing.XPoint,Alt.GUI.PdfSharp.Drawing.XPoint,Alt.GUI.PdfSharp.Drawing.XPoint,Alt.GUI.PdfSharp.Drawing.XPoint,System.Double)">
            <summary>
            Appends a Bézier curve for a cardinal spline through pt1 and pt2.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.Pdf.XGraphicsPdfRenderer.AppendPath(Alt.Sketch.GraphicsPath)">
            <summary>
            Appends the content of a GraphicsPath object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.Pdf.XGraphicsPdfRenderer.BeginPage">
            <summary>
            Initializes the default view transformation, i.e. the transformation from the user page
            space to the PDF page space.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.Pdf.XGraphicsPdfRenderer.EndPage">
            <summary>
            Ends the content stream, i.e. ends the text mode and balances the graphic state stack.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.Pdf.XGraphicsPdfRenderer.BeginGraphic">
            <summary>
            Begins the graphic mode (i.e. ends the text mode).
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.Pdf.XGraphicsPdfRenderer.Realize(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XBrush)">
            <summary>
            Makes the specified pen and brush to the current graphics objects.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.Pdf.XGraphicsPdfRenderer.Realize(Alt.GUI.PdfSharp.Drawing.XPen)">
            <summary>
            Makes the specified pen to the current graphics object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.Pdf.XGraphicsPdfRenderer.Realize(Alt.GUI.PdfSharp.Drawing.XBrush)">
            <summary>
            Makes the specified brush to the current graphics object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.Pdf.XGraphicsPdfRenderer.Realize(Alt.GUI.PdfSharp.Drawing.XFont,Alt.GUI.PdfSharp.Drawing.XBrush,System.Int32)">
            <summary>
            Makes the specified font and brush to the current graphics objects.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.Pdf.XGraphicsPdfRenderer.Realize(Alt.GUI.PdfSharp.Drawing.XImage)">
            <summary>
            Makes the specified image to the current graphics object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.Pdf.XGraphicsPdfRenderer.RealizeTransform">
            <summary>
            Realizes the current transformation matrix, if necessary.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.Pdf.XGraphicsPdfRenderer.GetFontName(Alt.GUI.PdfSharp.Drawing.XFont,Alt.GUI.PdfSharp.Pdf.Advanced.PdfFont@)">
            <summary>
            Gets the resource name of the specified font within this page or form.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.Pdf.XGraphicsPdfRenderer.GetImageName(Alt.GUI.PdfSharp.Drawing.XImage)">
            <summary>
            Gets the resource name of the specified image within this page or form.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.Pdf.XGraphicsPdfRenderer.GetFormName(Alt.GUI.PdfSharp.Drawing.XForm)">
            <summary>
            Gets the resource name of the specified form within this page or form.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.Pdf.XGraphicsPdfRenderer.SaveState">
            <summary>
            Saves the current graphical state.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.Pdf.XGraphicsPdfRenderer.RestoreState">
            <summary>
            Restores the previous graphical state.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.Pdf.XGraphicsPdfRenderer.gfxState">
            <summary>
            The current graphical state.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.Pdf.XGraphicsPdfRenderer.gfxStateStack">
            <summary>
            The graphical state stack.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.Pdf.XGraphicsPdfRenderer.defaultViewMatrix">
            <summary>
            The final transformation from the world space to the default page space.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.Pdf.XGraphicsPdfRenderer.Owner">
            <summary>
            Gets the owning PdfDocument of this page or form.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.Pdf.XGraphicsPdfRenderer.Resources">
            <summary>
            Gets the PdfResources of this page or form.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.Pdf.XGraphicsPdfRenderer.Size">
            <summary>
            Gets the size of this page or form.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.PathStart">
            <summary>
            Indicates how to handle the first point of a path.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.PathStart.MoveTo1st">
            <summary>
            Set the current position to the first point.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.PathStart.LineTo1st">
            <summary>
            Draws a line to the first point.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.PathStart.Ignore1st">
            <summary>
            Ignores the first point.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XColorSpace">
            <summary>
             Currently not used. Only DeviceRGB is rendered in PDF.
             </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XColorSpace.Rgb">
            <summary>
            Identifies the RGB color space.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XColorSpace.Cmyk">
            <summary>
            Identifies the CMYK color space.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XColorSpace.GrayScale">
            <summary>
            Identifies the gray scale color space.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XCombineMode">
            <summary>
            Specifies how different clipping regions can be combined.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XCombineMode.Replace">
            <summary>
            One clipping region is replaced by another.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XCombineMode.Intersect">
            <summary>
            Two clipping regions are combined by taking their intersection.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XCombineMode.Union">
            <summary>
            Not yet implemented in PDFsharp.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XCombineMode.Xor">
            <summary>
            Not yet implemented in PDFsharp.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XCombineMode.Exclude">
            <summary>
            Not yet implemented in PDFsharp.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XCombineMode.Complement">
            <summary>
            Not yet implemented in PDFsharp.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XDashStyle">
            <summary>
            Specifies the style of dashed lines drawn with an XPen object.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XDashStyle.Solid">
            <summary>
            Specifies a solid line.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XDashStyle.Dash">
            <summary>
            Specifies a line consisting of dashes.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XDashStyle.Dot">
            <summary>
            Specifies a line consisting of dots.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XDashStyle.DashDot">
            <summary>
            Specifies a line consisting of a repeating pattern of dash-dot.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XDashStyle.DashDotDot">
            <summary>
            Specifies a line consisting of a repeating pattern of dash-dot-dot.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XDashStyle.Custom">
            <summary>
            Specifies a user-defined custom dash style.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XFillMode">
            <summary>
            Specifies how the interior of a closed path is filled.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XFillMode.Alternate">
            <summary>
            Specifies the alternate fill mode. Called the 'odd-even rule' in PDF terminology.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XFillMode.Winding">
            <summary>
            Specifies the winding fill mode. Called the 'nonzero winding number rule' in PDF terminology.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XFontStyle">
            <summary>
            Specifies style information applied to text.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XFontStyle.Regular">
            <summary>
            Normal text.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XFontStyle.Bold">
            <summary>
            Bold text.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XFontStyle.Italic">
            <summary>
            Italic text.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XFontStyle.BoldItalic">
            <summary>
            Bold and italic text. 
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XFontStyle.Underline">
            <summary>
            Underlined text.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XFontStyle.Strikeout">
            <summary>
            Text with a line through the middle.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XGraphicTargetContext">
            <summary>
             Determines whether rendering based on GDI+ or WPF. For internal use only.
             </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XGraphicTargetContext.GDI">
            <summary>
            Renders using GDI+.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XGraphicTargetContext.WPF">
            <summary>
            Renders using WPF (including Silverlight).
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XGraphicsPathItemType">
            <summary>
            Type of the path data.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XGraphicsPdfPageOptions">
            <summary>
            Specifies how the content of an existing PDF page and new content is combined.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XGraphicsPdfPageOptions.Append">
            <summary>
            The new content is inserted behind the old content and any subsequent drawing in done above the existing graphic.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XGraphicsPdfPageOptions.Prepend">
            <summary>
            The new content is inserted before the old content and any subsequent drawing in done beneath the existing graphic.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XGraphicsPdfPageOptions.Replace">
            <summary>
            The new content entirely replaces the old content and any subsequent drawing in done on a blank page.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XGraphicsUnit">
            <summary>
            Specifies the unit of measure.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XGraphicsUnit.Point">
            <summary>
            Specifies a printer's point (1/72 inch) as the unit of measure.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XGraphicsUnit.Inch">
            <summary>
            Specifies the inch (2.54 cm) as the unit of measure.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XGraphicsUnit.Millimeter">
            <summary>
            Specifies the millimeter as the unit of measure.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XGraphicsUnit.Centimeter">
            <summary>
            Specifies the centimeter as the unit of measure.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XGraphicsUnit.Presentation">
            <summary>
            Specifies a presentation point (1/96 inch) as the unit of measure.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XKnownColor">
            <summary>
             Specifies all pre-defined colors. Used to identify the pre-defined colors and to 
             localize their names.
             </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.AliceBlue">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.AntiqueWhite">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Aqua">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Aquamarine">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Azure">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Beige">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Bisque">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Black">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.BlanchedAlmond">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Blue">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.BlueViolet">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Brown">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.BurlyWood">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.CadetBlue">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Chartreuse">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Chocolate">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Coral">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.CornflowerBlue">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Cornsilk">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Crimson">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Cyan">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.DarkBlue">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.DarkCyan">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.DarkGoldenrod">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.DarkGray">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.DarkGreen">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.DarkKhaki">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.DarkMagenta">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.DarkOliveGreen">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.DarkOrange">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.DarkOrchid">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.DarkRed">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.DarkSalmon">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.DarkSeaGreen">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.DarkSlateBlue">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.DarkSlateGray">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.DarkTurquoise">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.DarkViolet">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.DeepPink">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.DeepSkyBlue">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.DimGray">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.DodgerBlue">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Firebrick">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.FloralWhite">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.ForestGreen">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Fuchsia">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Gainsboro">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.GhostWhite">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Gold">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Goldenrod">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Gray">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Green">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.GreenYellow">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Honeydew">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.HotPink">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.IndianRed">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Indigo">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Ivory">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Khaki">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Lavender">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.LavenderBlush">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.LawnGreen">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.LemonChiffon">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.LightBlue">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.LightCoral">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.LightCyan">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.LightGoldenrodYellow">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.LightGray">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.LightGreen">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.LightPink">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.LightSalmon">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.LightSeaGreen">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.LightSkyBlue">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.LightSlateGray">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.LightSteelBlue">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.LightYellow">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Lime">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.LimeGreen">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Linen">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Magenta">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Maroon">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.MediumAquamarine">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.MediumBlue">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.MediumOrchid">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.MediumPurple">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.MediumSeaGreen">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.MediumSlateBlue">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.MediumSpringGreen">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.MediumTurquoise">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.MediumVioletRed">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.MidnightBlue">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.MintCream">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.MistyRose">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Moccasin">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.NavajoWhite">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Navy">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.OldLace">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Olive">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.OliveDrab">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Orange">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.OrangeRed">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Orchid">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.PaleGoldenrod">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.PaleGreen">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.PaleTurquoise">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.PaleVioletRed">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.PapayaWhip">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.PeachPuff">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Peru">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Pink">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Plum">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.PowderBlue">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Purple">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Red">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.RosyBrown">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.RoyalBlue">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.SaddleBrown">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Salmon">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.SandyBrown">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.SeaGreen">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.SeaShell">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Sienna">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Silver">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.SkyBlue">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.SlateBlue">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.SlateGray">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Snow">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.SpringGreen">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.SteelBlue">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Tan">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Teal">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Thistle">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Tomato">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Transparent">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Turquoise">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Violet">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Wheat">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.White">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.WhiteSmoke">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.Yellow">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XKnownColor.YellowGreen">
            <summary>A pre-defined color.</summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XLineAlignment">
            <summary>
            Specifies the alignment of a text string relative to its layout rectangle
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XLineAlignment.Near">
            <summary>
            Specifies the text be aligned near the layout.
            In a left-to-right layout, the near position is left. In a right-to-left layout, the near
            position is right.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XLineAlignment.Center">
            <summary>
            Specifies that text is aligned in the center of the layout rectangle.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XLineAlignment.Far">
            <summary>
            Specifies that text is aligned far from the origin position of the layout rectangle.
            In a left-to-right layout, the far position is right. In a right-to-left layout, the far
            position is left. 
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XLineAlignment.BaseLine">
            <summary>
            Specifies that text is aligned relative to its base line.
            With this option the layout rectangle must have a height of 0.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XLinearGradientMode">
            <summary>
            Specifies the direction of a linear gradient.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XLinearGradientMode.Horizontal">
            <summary>
            Specifies a gradient from left to right.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XLinearGradientMode.Vertical">
            <summary>
            Specifies a gradient from top to bottom.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XLinearGradientMode.ForwardDiagonal">
            <summary>
            Specifies a gradient from upper left to lower right.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XLinearGradientMode.BackwardDiagonal">
            <summary>
            Specifies a gradient from upper right to lower left.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XLineCap">
            <summary>
            Specifies the available cap styles with which an XPen object can start and end a line.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XLineCap.Flat">
            <summary>
            Specifies a flat line cap.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XLineCap.Round">
            <summary>
            Specifies a round line cap.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XLineCap.Square">
            <summary>
            Specifies a square line cap.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XLineJoin">
            <summary>
            Specifies how to join consecutive line or curve segments in a figure or subpath.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XLineJoin.Miter">
            <summary>
            Specifies a mitered join. This produces a sharp corner or a clipped corner,
            depending on whether the length of the miter exceeds the miter limit
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XLineJoin.Round">
            <summary>
            Specifies a circular join. This produces a smooth, circular arc between the lines.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XLineJoin.Bevel">
            <summary>
            Specifies a beveled join. This produces a diagonal corner.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XMatrixOrder">
            <summary>
            Specifies the order for matrix transform operations.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XMatrixOrder.Prepend">
            <summary>
            The new operation is applied before the old operation.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XMatrixOrder.Append">
            <summary>
            The new operation is applied after the old operation.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XPageDirection">
            <summary>
            Specifies the direction of the y-axis.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XPageDirection.Downwards">
            <summary>
            Increasing Y values go downwards. This is the default.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XPageDirection.Upwards">
            <summary>
            Increasing Y values go upwards. This is only possible when drawing on a PDF page.
            It is not implemented when drawing on a Alt.Sketch.Graphics object.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XSmoothingMode">
            <summary>
            Specifies whether smoothing (or antialiasing) is applied to lines and curves
            and the edges of filled areas.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XSmoothingMode.Invalid">
            <summary>
            Specifies an invalid mode.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XSmoothingMode.Default">
            <summary>
            Specifies the default mode.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XSmoothingMode.HighSpeed">
            <summary>
            Specifies high speed, low quality rendering.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XSmoothingMode.HighQuality">
            <summary>
            Specifies high quality, low speed rendering.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XSmoothingMode.None">
            <summary>
            Specifies no antialiasing.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XSmoothingMode.AntiAlias">
            <summary>
            Specifies antialiased rendering.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XStringAlignment">
            <summary>
            Specifies the alignment of a text string relative to its layout rectangle.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XStringAlignment.Near">
            <summary>
            Specifies the text be aligned near the layout.
            In a left-to-right layout, the near position is left. In a right-to-left layout, the near
            position is right.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XStringAlignment.Center">
            <summary>
            Specifies that text is aligned in the center of the layout rectangle.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XStringAlignment.Far">
            <summary>
            Specifies that text is aligned far from the origin position of the layout rectangle.
            In a left-to-right layout, the far position is right. In a right-to-left layout, the far
            position is left. 
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.GeometryHelper">
            <summary>
            Helper class for Geometry paths.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.GeometryHelper.BezierCurveFromArc(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,Alt.GUI.PdfSharp.Drawing.PathStart,Alt.GUI.PdfSharp.Drawing.XMatrix@)">
            <summary>
            Creates between 1 and 5 Béziers curves from parameters specified like in GDI+.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.GeometryHelper.Quatrant(System.Double,System.Boolean,System.Boolean)">
            <summary>
            Calculates the quadrant (0 through 3) of the specified angle. If the angle lies on an edge
            (0, 90, 180, etc.) the result depends on the details how the angle is used.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.GeometryHelper.AppendPartialArcQuadrant(System.Collections.Generic.List{Alt.GUI.PdfSharp.Drawing.XPoint},System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,Alt.GUI.PdfSharp.Drawing.PathStart,Alt.GUI.PdfSharp.Drawing.XMatrix)">
            <summary>
            Appends a Bézier curve for an arc within a full quadrant.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.GeometryHelper.BezierCurveFromArc(Alt.GUI.PdfSharp.Drawing.XPoint,Alt.GUI.PdfSharp.Drawing.XPoint,System.Double,Alt.GUI.PdfSharp.Drawing.XSize,System.Boolean,System.Boolean,Alt.GUI.PdfSharp.Drawing.PathStart)">
            <summary>
            Creates between 1 and 5 Béziers curves from parameters specified like in WPF.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.GraphicsStateStack">
            <summary>
            Represents a stack of XGraphicsState and XGraphicsContainer objects.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.ImageHelper">
            <summary>
            Helper class for processing image files.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.InternalGraphicsState">
            <summary>
            Represents the internal state of an XGraphics object.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.InternalGraphicsState.Transform">
            <summary>
            Gets or sets the current transformation matrix.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XPdfFontOptions">
            <summary>
            Specifies details about how the font is used in PDF creation.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPdfFontOptions.#ctor(Alt.GUI.PdfSharp.Pdf.PdfFontEncoding,Alt.GUI.PdfSharp.Pdf.PdfFontEmbedding)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Drawing.XPdfFontOptions"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPdfFontOptions.#ctor(Alt.GUI.PdfSharp.Pdf.PdfFontEncoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Drawing.XPdfFontOptions"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPdfFontOptions.#ctor(Alt.GUI.PdfSharp.Pdf.PdfFontEmbedding)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Drawing.XPdfFontOptions"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPdfFontOptions.#ctor(System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Drawing.XPdfFontOptions"/> class.
            </summary>
            <param name="embed">If set to <c>true</c> the font is embedded.</param>
            <param name="unicode">If set to <c>true</c> Unicode encoding is used.</param>
            <param name="baseFont">Not yet implemented. Should be "".</param>
            <param name="fontFile">Not yet implemented. Should be "".</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPdfFontOptions.#ctor(System.Boolean,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Drawing.XPdfFontOptions"/> class.
            </summary>
            <param name="unicode">If set to <c>true</c> Unicode encoding is used.</param>
            <param name="fontData">User supplied font data.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPdfFontOptions.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Drawing.XPdfFontOptions"/> class.
            </summary>
            <param name="embed">If set to <c>true</c> the font is embedded.</param>
            <param name="baseFont">Not yet implemented. Should be "".</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPdfFontOptions.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Drawing.XPdfFontOptions"/> class.
            </summary>
            <param name="embed">If set to <c>true</c> the font is embedded.</param>
            <param name="unicode">If set to <c>true</c> Unicode encoding is used.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPdfFontOptions.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Drawing.XPdfFontOptions"/> class.
            </summary>
            <param name="embed">If set to <c>true</c> the font is embedded.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPdfFontOptions.#ctor(Alt.GUI.PdfSharp.Pdf.PdfFontEmbedding,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Drawing.XPdfFontOptions"/> class.
            </summary>
            <param name="fontEmbedding">Indicates how font is embedded.</param>
            <param name="unicode">If set to <c>true</c> Unicode encoding is used.</param>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPdfFontOptions.Embed">
            <summary>
            Gets a value indicating whether the gets embedded in the PDF file.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPdfFontOptions.FontEmbedding">
            <summary>
            Gets a value indicating the font embedding.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPdfFontOptions.Unicode">
            <summary>
            Gets a value indicating whether the font is encoded as Unicode.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPdfFontOptions.FontEncoding">
            <summary>
            Gets a value indicating how the font is encoded.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPdfFontOptions.BaseFont">
            <summary>
            Not yet implemented.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPdfFontOptions.FontFile">
            <summary>
            Not yet implemented.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPdfFontOptions.FontData">
            <summary>
            Gets the font image.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XBrush">
            <summary>
            Classes derived from this abstract base class define objects used to fill the 
            interiors of paths.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XBrush.op_Implicit(Alt.Sketch.Brush)~Alt.GUI.PdfSharp.Drawing.XBrush">
            <summary>
            Converts from a Alt.Sketch.Brush.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XBrushes">
            <summary>
            Brushes for all the pre-defined colors.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.AliceBlue">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.AntiqueWhite">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Aqua">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Aquamarine">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Azure">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Beige">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Bisque">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Black">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.BlanchedAlmond">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Blue">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.BlueViolet">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Brown">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.BurlyWood">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.CadetBlue">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Chartreuse">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Chocolate">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Coral">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.CornflowerBlue">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Cornsilk">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Crimson">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Cyan">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.DarkBlue">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.DarkCyan">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.DarkGoldenrod">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.DarkGray">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.DarkGreen">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.DarkKhaki">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.DarkMagenta">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.DarkOliveGreen">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.DarkOrange">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.DarkOrchid">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.DarkRed">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.DarkSalmon">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.DarkSeaGreen">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.DarkSlateBlue">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.DarkSlateGray">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.DarkTurquoise">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.DarkViolet">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.DeepPink">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.DeepSkyBlue">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.DimGray">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.DodgerBlue">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Firebrick">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.FloralWhite">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.ForestGreen">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Fuchsia">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Gainsboro">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.GhostWhite">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Gold">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Goldenrod">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Gray">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Green">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.GreenYellow">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Honeydew">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.HotPink">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.IndianRed">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Indigo">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Ivory">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Khaki">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Lavender">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.LavenderBlush">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.LawnGreen">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.LemonChiffon">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.LightBlue">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.LightCoral">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.LightCyan">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.LightGoldenrodYellow">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.LightGray">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.LightGreen">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.LightPink">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.LightSalmon">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.LightSeaGreen">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.LightSkyBlue">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.LightSlateGray">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.LightSteelBlue">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.LightYellow">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Lime">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.LimeGreen">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Linen">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Magenta">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Maroon">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.MediumAquamarine">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.MediumBlue">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.MediumOrchid">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.MediumPurple">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.MediumSeaGreen">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.MediumSlateBlue">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.MediumSpringGreen">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.MediumTurquoise">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.MediumVioletRed">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.MidnightBlue">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.MintCream">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.MistyRose">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Moccasin">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.NavajoWhite">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Navy">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.OldLace">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Olive">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.OliveDrab">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Orange">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.OrangeRed">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Orchid">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.PaleGoldenrod">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.PaleGreen">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.PaleTurquoise">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.PaleVioletRed">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.PapayaWhip">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.PeachPuff">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Peru">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Pink">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Plum">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.PowderBlue">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Purple">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Red">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.RosyBrown">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.RoyalBlue">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.SaddleBrown">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Salmon">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.SandyBrown">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.SeaGreen">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.SeaShell">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Sienna">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Silver">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.SkyBlue">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.SlateBlue">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.SlateGray">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Snow">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.SpringGreen">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.SteelBlue">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Tan">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Teal">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Thistle">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Tomato">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Transparent">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Turquoise">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Violet">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Wheat">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.White">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.WhiteSmoke">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.Yellow">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XBrushes.YellowGreen">
            <summary>Gets a pre-defined XBrush object.</summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XColor">
            <summary>
             Represents a RGB, CMYK, or gray scale color.
             </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XColor.FromArgb(System.Int32)">
            <summary>
            Creates an XColor structure from a 32-bit ARGB value.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XColor.FromArgb(System.UInt32)">
            <summary>
            Creates an XColor structure from a 32-bit ARGB value.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XColor.FromArgb(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an XColor structure from the specified 8-bit color values (red, green, and blue).
            The alpha value is implicitly 255 (fully opaque).
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XColor.FromArgb(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an XColor structure from the four ARGB component (alpha, red, green, and blue) values.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XColor.FromArgb(Alt.Sketch.Color)">
            <summary>
            Creates an XColor structure from the specified Alt.Sketch.Color.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XColor.FromArgb(System.Int32,Alt.GUI.PdfSharp.Drawing.XColor)">
            <summary>
            Creates an XColor structure from the specified alpha value and color.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XColor.FromArgb(System.Int32,Alt.Sketch.Color)">
            <summary>
            Creates an XColor structure from the specified alpha value and color.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XColor.FromCmyk(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates an XColor structure from the specified CMYK values.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XColor.FromCmyk(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates an XColor structure from the specified CMYK values.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XColor.FromGrayScale(System.Double)">
            <summary>
            Creates an XColor structure from the specified gray value.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XColor.FromKnownColor(Alt.GUI.PdfSharp.Drawing.XKnownColor)">
            <summary>
            Creates an XColor from the specified pre-defined color.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XColor.FromKnownColor(Alt.Sketch.KnownColor)">
            <summary>
            Creates an XColor from the specified pre-defined color.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XColor.FromName(System.String)">
            <summary>
            Creates an XColor from the specified name of a pre-defined color.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XColor.op_Implicit(Alt.Sketch.Color)~Alt.GUI.PdfSharp.Drawing.XColor">
            <summary>
            Implicit conversion from Color to XColor
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XColor.ToGdiColor">
            <summary>
             Creates a Alt.Sketch.Color object from this color.
             </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XColor.Equals(System.Object)">
            <summary>
            Determines whether the specified object is a Color structure and is equivalent to this 
            Color structure.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XColor.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XColor.op_Equality(Alt.GUI.PdfSharp.Drawing.XColor,Alt.GUI.PdfSharp.Drawing.XColor)">
            <summary>
            Determines whether two colors are equal.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XColor.op_Inequality(Alt.GUI.PdfSharp.Drawing.XColor,Alt.GUI.PdfSharp.Drawing.XColor)">
            <summary>
            Determines whether two colors are not equal.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XColor.GetHue">
            <summary>
            Gets the hue-saturation-brightness (HSB) hue value, in degrees, for this color.
            </summary>
            <returns>The hue, in degrees, of this color. The hue is measured in degrees, ranging from 0 through 360, in HSB color space.</returns>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XColor.GetSaturation">
            <summary>
            Gets the hue-saturation-brightness (HSB) saturation value for this color.
            </summary>
            <returns>The saturation of this color. The saturation ranges from 0 through 1, where 0 is grayscale and 1 is the most saturated.</returns>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XColor.GetBrightness">
            <summary>
            Gets the hue-saturation-brightness (HSB) brightness value for this color.
            </summary>
            <returns>The brightness of this color. The brightness ranges from 0 through 1, where 0 represents black and 1 represents white.</returns>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XColor.RgbChanged">
            <summary>
             One of the RGB values changed; recalculate other color representations.
             </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XColor.CmykChanged">
            <summary>
             One of the CMYK values changed; recalculate other color representations.
             </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XColor.GrayChanged">
            <summary>
             The gray scale value changed; recalculate other color representations.
             </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XColor.Empty">
            <summary>
            Represents the null color.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColor.ColorSpace">
            <summary>
            Gets or sets the color space to be used for PDF generation.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColor.IsEmpty">
            <summary>
            Indicates whether this XColor structure is uninitialized.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColor.IsKnownColor">
            <summary>
            Gets a value indicating whether this color is a known color.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColor.A">
            <summary>
            Gets or sets the alpha value the specifies the transparency. 
            The value is in the range from 1 (opaque) to 0 (completely transparent).
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColor.R">
            <summary>
            Gets or sets the red value.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColor.G">
            <summary>
            Gets or sets the green value.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColor.B">
            <summary>
            Gets or sets the blue value.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColor.Rgb">
            <summary>
            Gets the RGB part value of the color. Internal helper function.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColor.Argb">
            <summary>
            Gets the ARGB part value of the color. Internal helper function.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColor.C">
            <summary>
            Gets or sets the cyan value.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColor.M">
            <summary>
            Gets or sets the magenta value.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColor.Y">
            <summary>
            Gets or sets the yellow value.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColor.K">
            <summary>
            Gets or sets the black (or key) value.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColor.GS">
            <summary>
            Gets or sets the gray scale value.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColor.RgbCmykG">
            <summary>
             Special property for XmlSerializer only.
             </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XColorResourceManager">
            <summary>
            Manages the localization of the color class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XColorResourceManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Drawing.XColorResourceManager"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XColorResourceManager.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Drawing.XColorResourceManager"/> class.
            </summary>
            <param name="cultureInfo">The culture info.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XColorResourceManager.GetKnownColor(System.UInt32)">
            <summary>
            Gets a known color from an ARGB value. Throws an ArgumentException if the value is not a known color.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XColorResourceManager.GetKnownColors(System.Boolean)">
            <summary>
            Gets all known colors.
            </summary>
            <param name="includeTransparent">Indicates whether to include the color Transparent.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XColorResourceManager.ToColorName(Alt.GUI.PdfSharp.Drawing.XKnownColor)">
            <summary>
            Converts a known color to a localized color name.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XColorResourceManager.ToColorName(Alt.GUI.PdfSharp.Drawing.XColor)">
            <summary>
            Converts a color to a localized color name or an ARGB value.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XColors">
            <summary>
             Represents a set of 141 pre-defined RGB colors. Incidentally the values are the same
             as in Alt.Sketch.Color.
             </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.AliceBlue">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.AntiqueWhite">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Aqua">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Aquamarine">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Azure">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Beige">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Bisque">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Black">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.BlanchedAlmond">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Blue">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.BlueViolet">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Brown">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.BurlyWood">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.CadetBlue">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Chartreuse">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Chocolate">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Coral">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.CornflowerBlue">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Cornsilk">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Crimson">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Cyan">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.DarkBlue">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.DarkCyan">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.DarkGoldenrod">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.DarkGray">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.DarkGreen">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.DarkKhaki">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.DarkMagenta">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.DarkOliveGreen">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.DarkOrange">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.DarkOrchid">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.DarkRed">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.DarkSalmon">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.DarkSeaGreen">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.DarkSlateBlue">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.DarkSlateGray">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.DarkTurquoise">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.DarkViolet">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.DeepPink">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.DeepSkyBlue">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.DimGray">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.DodgerBlue">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Firebrick">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.FloralWhite">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.ForestGreen">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Fuchsia">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Gainsboro">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.GhostWhite">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Gold">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Goldenrod">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Gray">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Green">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.GreenYellow">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Honeydew">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.HotPink">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.IndianRed">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Indigo">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Ivory">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Khaki">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Lavender">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.LavenderBlush">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.LawnGreen">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.LemonChiffon">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.LightBlue">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.LightCoral">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.LightCyan">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.LightGoldenrodYellow">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.LightGray">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.LightGreen">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.LightPink">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.LightSalmon">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.LightSeaGreen">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.LightSkyBlue">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.LightSlateGray">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.LightSteelBlue">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.LightYellow">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Lime">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.LimeGreen">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Linen">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Magenta">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Maroon">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.MediumAquamarine">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.MediumBlue">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.MediumOrchid">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.MediumPurple">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.MediumSeaGreen">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.MediumSlateBlue">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.MediumSpringGreen">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.MediumTurquoise">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.MediumVioletRed">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.MidnightBlue">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.MintCream">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.MistyRose">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Moccasin">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.NavajoWhite">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Navy">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.OldLace">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Olive">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.OliveDrab">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Orange">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.OrangeRed">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Orchid">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.PaleGoldenrod">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.PaleGreen">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.PaleTurquoise">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.PaleVioletRed">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.PapayaWhip">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.PeachPuff">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Peru">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Pink">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Plum">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.PowderBlue">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Purple">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Red">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.RosyBrown">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.RoyalBlue">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.SaddleBrown">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Salmon">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.SandyBrown">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.SeaGreen">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.SeaShell">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Sienna">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Silver">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.SkyBlue">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.SlateBlue">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.SlateGray">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Snow">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.SpringGreen">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.SteelBlue">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Tan">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Teal">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Thistle">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Tomato">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Transparent">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Turquoise">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Violet">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Wheat">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.White">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.WhiteSmoke">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.Yellow">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XColors.YellowGreen">
            <summary>Gets a predefined color.</summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XConvert">
            <summary>
            Converts XGraphics enums to GDI+ enums.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XConvert.ToLineJoin(Alt.GUI.PdfSharp.Drawing.XLineJoin)">
            <summary>
            Converts XLineJoin to LineJoin.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XConvert.ToLineCap(Alt.GUI.PdfSharp.Drawing.XLineCap)">
            <summary>
            Converts XLineCap to LineCap.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XFont">
            <summary>
            Defines an object used to draw text.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XFont.#ctor(System.String,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Drawing.XFont"/> class.
            </summary>
            <param name="familyName">Name of the font family.</param>
            <param name="emSize">The em size.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XFont.#ctor(System.String,System.Double,Alt.GUI.PdfSharp.Drawing.XFontStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Drawing.XFont"/> class.
            </summary>
            <param name="familyName">Name of the font family.</param>
            <param name="emSize">The em size.</param>
            <param name="style">The font style.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XFont.#ctor(System.String,System.Double,Alt.GUI.PdfSharp.Drawing.XFontStyle,Alt.GUI.PdfSharp.Drawing.XPdfFontOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Drawing.XFont"/> class.
            </summary>
            <param name="familyName">Name of the font family.</param>
            <param name="emSize">The em size.</param>
            <param name="style">The font style.</param>
            <param name="pdfOptions">Additional PDF options.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XFont.#ctor(Alt.Sketch.FontFamily,System.Double,Alt.GUI.PdfSharp.Drawing.XFontStyle,Alt.GUI.PdfSharp.Drawing.XPdfFontOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Drawing.XFont"/> class.
            </summary>
            <param name="family">The font family.</param>
            <param name="emSize">The em size.</param>
            <param name="style">The font style.</param>
            <param name="pdfOptions">Additional PDF options.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XFont.#ctor(Alt.Sketch.Font,Alt.GUI.PdfSharp.Drawing.XPdfFontOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Drawing.XFont"/> class from a Alt.Sketch.Font.
            </summary>
            <param name="font">A Alt.Sketch.Font.</param>
            <param name="pdfOptions">Additional PDF options.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XFont.Initialize">
            <summary>
            Connects the specifications of a font from XFont to a real glyph type face.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XFont.GetHeight">
            <summary>
            Returns the line spacing, in pixels, of this font. The line spacing is the vertical distance
            between the base lines of two consecutive lines of text. Thus, the line spacing includes the
            blank space between lines along with the height of the character itself.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XFont.GetHeight(Alt.GUI.PdfSharp.Drawing.XGraphics)">
            <summary>
            Returns the line spacing, in the current unit of a specified Graphics object, of this font.
            The line spacing is the vertical distance between the base lines of two consecutive lines of
            text. Thus, the line spacing includes the blank space between lines along with the height of
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XFont.op_Implicit(Alt.Sketch.Font)~Alt.GUI.PdfSharp.Drawing.XFont">
            <summary>
            Implicit conversion form Font to XFont
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XFont.selector">
            <summary>
            Cache PdfFontTable.FontSelector to speed up finding the right PdfFont
            if this font is used more than once.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XFont.GdiFamily">
            <summary>
            Gets the GDI family.
            </summary>
            <value>The GDI family.</value>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XFont.FontFamily">
            <summary>
            Gets the XFontFamily object associated with this XFont object.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XFont.Name">
            <summary>
            Gets the face name of this Font object.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XFont.Size">
            <summary>
            Gets the em-size of this Font object measured in the unit of this Font object.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XFont.Height">
            <summary>
            Gets the line spacing of this font.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XFont.Style">
            <summary>
            Gets style information for this Font object.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XFont.Bold">
            <summary>
            Indicates whether this XFont object is bold.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XFont.Italic">
            <summary>
            Indicates whether this XFont object is italic.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XFont.Strikeout">
            <summary>
            Indicates whether this XFont object is stroke out.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XFont.Underline">
            <summary>
            Indicates whether this XFont object is underlined.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XFont.IsVertical">
            <summary>
            Temporary HACK for XPS to PDF converter.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XFont.PdfOptions">
            <summary>
            Gets the PDF options of the font.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XFont.Unicode">
            <summary>
            Indicates whether this XFont is encoded as Unicode.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XFont.Metrics">
            <summary>
            Gets the metrics.
            </summary>
            <value>The metrics.</value>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XFontFamily">
            <summary>
            Defines a group of type faces having a similar basic design and certain variations in styles.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XFontFamily.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Drawing.XFontFamily"/> class.
            </summary>
            <param name="name">The family name of a font.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XFontFamily.GetCellAscent(Alt.GUI.PdfSharp.Drawing.XFontStyle)">
            <summary>
            Returns the cell ascent, in design units, of the XFontFamily object of the specified style.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XFontFamily.GetCellDescent(Alt.GUI.PdfSharp.Drawing.XFontStyle)">
            <summary>
            Returns the cell descent, in design units, of the XFontFamily object of the specified style.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XFontFamily.GetEmHeight(Alt.GUI.PdfSharp.Drawing.XFontStyle)">
            <summary>
            Gets the height, in font design units, of the em square for the specified style.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XFontFamily.GetLineSpacing(Alt.GUI.PdfSharp.Drawing.XFontStyle)">
            <summary>
            Returns the line spacing, in design units, of the FontFamily object of the specified style.
            The line spacing is the vertical distance between the base lines of two consecutive lines of text.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XFontFamily.IsStyleAvailable(Alt.GUI.PdfSharp.Drawing.XFontStyle)">
            <summary>
            Indicates whether the specified FontStyle enumeration is available.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XFontFamily.GetFamilies(Alt.GUI.PdfSharp.Drawing.XGraphics)">
            <summary>
            Returns an array that contains all the FontFamily objects available for the specified 
            graphics context.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XFontFamily.gdiFamily">
            <summary>
            GDI+ object.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XFontFamily.Name">
            <summary>
            Gets the name of the font family.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XFontFamily.Families">
            <summary>
            Returns an array that contains all the FontFamily objects associated with the current graphics context.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XFontMetrics">
            <summary>
            Collects information of a font.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XFontMetrics.Name">
            <summary>
            Gets the font name.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XFontMetrics.UnitsPerEm">
            <summary>
            Gets the ascent value.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XFontMetrics.Ascent">
            <summary>
            Gets the ascent value.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XFontMetrics.Descent">
            <summary>
            Gets the descent value.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XFontMetrics.AverageWidth">
            <summary>
            Gets the average width.
            </summary>
            <value>The average width.</value>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XFontMetrics.CapHeight">
            <summary>
            Gets the height of capital letters.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XFontMetrics.Leading">
            <summary>
            Gets the leading value.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XFontMetrics.MaxWidth">
            <summary>
            Gets the maximum width of a character.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XFontMetrics.StemH">
            <summary>
            Gets an internal value.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XFontMetrics.StemV">
            <summary>
            Gets an internal value.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XFontMetrics.XHeight">
            <summary>
            Gets the height of a character.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XFontStretch">
            <summary>
            NYI. Reserved for future extensions of PDFsharp.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XFontWeight">
            <summary>
            Defines the density of a typeface, in terms of the lightness or heaviness of the strokes.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XFontWeight.Compare(Alt.GUI.PdfSharp.Drawing.XFontWeight,Alt.GUI.PdfSharp.Drawing.XFontWeight)">
            <summary>
            Compares the specified font weights.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XFontWeight.op_LessThan(Alt.GUI.PdfSharp.Drawing.XFontWeight,Alt.GUI.PdfSharp.Drawing.XFontWeight)">
            <summary>
            Implements the operator &lt;.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XFontWeight.op_LessThanOrEqual(Alt.GUI.PdfSharp.Drawing.XFontWeight,Alt.GUI.PdfSharp.Drawing.XFontWeight)">
            <summary>
            Implements the operator &lt;=.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XFontWeight.op_GreaterThan(Alt.GUI.PdfSharp.Drawing.XFontWeight,Alt.GUI.PdfSharp.Drawing.XFontWeight)">
            <summary>
            Implements the operator &gt;.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XFontWeight.op_GreaterThanOrEqual(Alt.GUI.PdfSharp.Drawing.XFontWeight,Alt.GUI.PdfSharp.Drawing.XFontWeight)">
            <summary>
            Implements the operator &gt;=.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XFontWeight.op_Equality(Alt.GUI.PdfSharp.Drawing.XFontWeight,Alt.GUI.PdfSharp.Drawing.XFontWeight)">
            <summary>
            Implements the operator ==.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XFontWeight.op_Inequality(Alt.GUI.PdfSharp.Drawing.XFontWeight,Alt.GUI.PdfSharp.Drawing.XFontWeight)">
            <summary>
            Implements the operator !=.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XFontWeight.Equals(Alt.GUI.PdfSharp.Drawing.XFontWeight)">
            <summary>
            Determines whether the specified <see cref="T:Alt.GUI.PdfSharp.Drawing.XFontWeight"/> is equal to the current <see cref="T:Alt.GUI.PdfSharp.Drawing.XFontWeight"/>.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XFontWeight.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XFontWeight.GetHashCode">
            <summary>
            Serves as a hash function for this type.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XFontWeight.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XFontWeight.Weight">
            <summary>
            Gets the weight of the font, a value between 1 and 999.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XFontWeights">
            <summary>
            Defines a set of static predefined XFontWeight values.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XFontWeights.Thin">
            <summary>
            Specifies a "Thin" font weight.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XFontWeights.ExtraLight">
            <summary>
            Specifies a "ExtraLight" font weight.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XFontWeights.UltraLight">
            <summary>
            Specifies a "UltraLight" font weight.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XFontWeights.Light">
            <summary>
            Specifies a "Light" font weight.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XFontWeights.Normal">
            <summary>
            Specifies a "Normal" font weight.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XFontWeights.Regular">
            <summary>
            Specifies a "Regular" font weight.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XFontWeights.Medium">
            <summary>
            Specifies a "Medium" font weight.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XFontWeights.SemiBold">
            <summary>
            Specifies a "SemiBold" font weight.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XFontWeights.DemiBold">
            <summary>
            Specifies a "DemiBold" font weight.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XFontWeights.Bold">
            <summary>
            Specifies a "Bold" font weight.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XFontWeights.ExtraBold">
            <summary>
            Specifies a "ExtraBold" font weight.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XFontWeights.UltraBold">
            <summary>
            Specifies a "UltraBold" font weight.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XFontWeights.Heavy">
            <summary>
            Specifies a "Heavy" font weight.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XFontWeights.Black">
            <summary>
            Specifies a "Black" font weight.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XFontWeights.ExtraBlack">
            <summary>
            Specifies a "ExtraBlack" font weight.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XFontWeights.UltraBlack">
            <summary>
            Specifies a "UltraBlack" font weight.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XForm">
            <summary>
            Represents a graphical object that can be used to render retained graphics on it.
            In GDI+ it is represented by a Metafile, in WPF by a DrawingVisual, and in PDF by a Form XObjects.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XImage">
            <summary>
            Defines an object used to draw image files (bmp, png, jpeg, gif) and PDF forms.
            An abstract base class that provides functionality for the Bitmap and Metafile descended classes.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XImage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Drawing.XImage"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XImage.#ctor(Alt.Sketch.ImageSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Drawing.XImage"/> class from a GDI+ image.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XImage.op_Implicit(Alt.Sketch.Bitmap)~Alt.GUI.PdfSharp.Drawing.XImage">
            <summary>
            Implicit conversion from Image to XImage.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XImage.FromAltSketchImage(Alt.Sketch.ImageSource)">
            <summary>
            Conversion from Image to XImage.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XImage.FromFile(System.String)">
            <summary>
            Creates an image from the specified file.
            </summary>
            <param name="path">The path to a BMP, PNG, GIF, JPEG, TIFF, or PDF file.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XImage.ExistsFile(System.String)">
            <summary>
            Tests if a file exist. Supports PDF files with page number suffix.
            </summary>
            <param name="path">The path to a BMP, PNG, GIF, JPEG, TIFF, or PDF file.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XImage.Dispose">
            <summary>
            Under construction
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XImage.Dispose(System.Boolean)">
            <summary>
            Disposes underlying GDI+ object.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XImage.path">
            <summary>
            If path starts with '*' the image is created from a stream and the path is a GUID.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XImage.selector">
            <summary>
            Cache PdfImageTable.ImageSelector to speed up finding the right PdfImage
            if this image is used more than once.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XImage.Width">
            <summary>
            Gets the width of the image.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XImage.Height">
            <summary>
            Gets the height of the image.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XImage.PointWidth">
            <summary>
            Gets the width of the image in point.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XImage.PointHeight">
            <summary>
            Gets the height of the image in point.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XImage.PixelWidth">
            <summary>
            Gets the width of the image in pixels.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XImage.PixelHeight">
            <summary>
            Gets the height of the image in pixels.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XImage.Size">
            <summary>
            Gets the size in point of the image.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XImage.HorizontalResolution">
            <summary>
            Gets the horizontal resolution of the image.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XImage.VerticalResolution">
            <summary>
            Gets the vertical resolution of the image.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XImage.Interpolate">
            <summary>
            Gets or sets a flag indicating whether image interpolation is to be performed. 
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XImage.Format">
            <summary>
            Gets the format of the image.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XForm.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Drawing.XForm"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XForm.#ctor(Alt.GUI.PdfSharp.Drawing.XGraphics,Alt.GUI.PdfSharp.Drawing.XSize)">
            <summary>
            Initializes a new instance of the XForm class such that it can be drawn on the specified graphics
            object.
            </summary>
            <param name="gfx">The graphics object that later is used to draw this form.</param>
            <param name="size">The size in points of the form.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XForm.#ctor(Alt.GUI.PdfSharp.Drawing.XGraphics,Alt.GUI.PdfSharp.Drawing.XUnit,Alt.GUI.PdfSharp.Drawing.XUnit)">
            <summary>
            Initializes a new instance of the XForm class such that it can be drawn on the specified graphics
            object.
            </summary>
            <param name="gfx">The graphics object that later is used to draw this form.</param>
            <param name="width">The width of the form.</param>
            <param name="height">The height of the form.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XForm.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument,Alt.GUI.PdfSharp.Drawing.XRect)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Drawing.XForm"/> class that represents a page of a PDF document.
            </summary>
            <param name="document">The PDF document.</param>
            <param name="viewBox">The view box of the page.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XForm.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument,Alt.GUI.PdfSharp.Drawing.XSize)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Drawing.XForm"/> class that represents a page of a PDF document.
            </summary>
            <param name="document">The PDF document.</param>
            <param name="size">The size of the page.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XForm.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument,Alt.GUI.PdfSharp.Drawing.XUnit,Alt.GUI.PdfSharp.Drawing.XUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Drawing.XForm"/> class that represents a page of a PDF document.
            </summary>
            <param name="document">The PDF document.</param>
            <param name="width">The width of the page.</param>
            <param name="height">The height of the page</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XForm.DrawingFinished">
            <summary>
            This function should be called when drawing the content of this form is finished.
            The XGraphics object used for drawing the content is disposed by this function and 
            cannot be used for any further drawing operations.
            PDFsharp automatically calls this function when this form was used the first time
            in a DrawImage function. 
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XForm.AssociateGraphics(Alt.GUI.PdfSharp.Drawing.XGraphics)">
            <summary>
            Called from XGraphics constructor that creates an instance that work on this form.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XForm.Dispose(System.Boolean)">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XForm.Finish">
            <summary>
            Sets the form in the state FormState.Finished.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XForm.GetFontName(Alt.GUI.PdfSharp.Drawing.XFont,Alt.GUI.PdfSharp.Pdf.Advanced.PdfFont@)">
            <summary>
            Gets the resource name of the specified font within this form.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XForm.TryGetFontName(System.String,Alt.GUI.PdfSharp.Pdf.Advanced.PdfFont@)">
            <summary>
            Tries to get the resource name of the specified font data within this form.
            Returns null if no such font exists.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XForm.GetFontName(System.String,System.Byte[],Alt.GUI.PdfSharp.Pdf.Advanced.PdfFont@)">
            <summary>
            Gets the resource name of the specified font data within this form.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XForm.GetImageName(Alt.GUI.PdfSharp.Drawing.XImage)">
            <summary>
            Gets the resource name of the specified image within this form.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XForm.Alt#GUI#PdfSharp#Pdf#Advanced#IContentStream#GetImageName(Alt.GUI.PdfSharp.Drawing.XImage)">
            <summary>
            Implements the interface because the primary function is internal.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XForm.GetFormName(Alt.GUI.PdfSharp.Drawing.XForm)">
            <summary>
            Gets the resource name of the specified form within this form.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XForm.Alt#GUI#PdfSharp#Pdf#Advanced#IContentStream#GetFormName(Alt.GUI.PdfSharp.Drawing.XForm)">
            <summary>
            Implements the interface because the primary function is internal.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XForm.pdfForm">
            <summary>
            The PdfFormXObject gets invalid when PageNumber or transform changed. This is because a modification
            of an XPdfForm must not change objects that are already been drawn.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XForm.Owner">
            <summary>
            Gets the owning document.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XForm.ColorMode">
            <summary>
            Gets the color model used in the underlying PDF document.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XForm.IsTemplate">
            <summary>
            Gets a value indicating whether this instance is a template.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XForm.Width">
            <summary>
            Get the width of the page identified by the property PageNumber.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XForm.Height">
            <summary>
            Get the width of the page identified by the property PageNumber.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XForm.PointWidth">
            <summary>
            Get the width in point of this image.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XForm.PointHeight">
            <summary>
            Get the height in point of this image.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XForm.PixelWidth">
            <summary>
            Get the width of the page identified by the property PageNumber.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XForm.PixelHeight">
            <summary>
            Get the height of the page identified by the property PageNumber.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XForm.Size">
            <summary>
            Get the size of the page identified by the property PageNumber.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XForm.ViewBox">
            <summary>
            Gets the view box of the form.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XForm.HorizontalResolution">
            <summary>
            Gets 72, the horizontal resolution by design of a form object.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XForm.VerticalResolution">
            <summary>
            Gets 72 always, the vertical resolution by design of a form object.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XForm.BoundingBox">
            <summary>
            Gets or sets the bounding box.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XForm.Transform">
            <summary>
            Gets or sets the transformation matrix.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XForm.Alt#GUI#PdfSharp#Pdf#Advanced#IContentStream#Resources">
            <summary>
            Implements the interface because the primary function is internal.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XForm.FormState.NotATemplate">
            <summary>
            The form is an imported PDF page.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XForm.FormState.Created">
            <summary>
            The template is just created.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XForm.FormState.UnderConstruction">
            <summary>
            XGraphics.FromForm() was called.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XForm.FormState.Finished">
            <summary>
            The form was drawn at least once and is 'frozen' now.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XGlyphTypeface">
            <summary>
            Specifies a physical font face that corresponds to a font file on the disk.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGlyphTypeface.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Drawing.XGlyphTypeface"/> class from the specified font file.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGlyphTypeface.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Drawing.XGlyphTypeface"/> class from the specified font bytes.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XGlyphTypeface.FamilyName">
            <summary>
            Gets the English family name of the font.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XGlyphTypeface.IsBold">
            <summary>
            Gets a value indicating whether the font weight is bold.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XGlyphTypeface.IsItalic">
            <summary>
            Gets a value indicating whether the font style is italic.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XGraphics">
            <summary>
            Represents a drawing surface (or canvas) for a fixed size page.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.#ctor(Alt.Sketch.Graphics,Alt.GUI.PdfSharp.Drawing.XSize,Alt.GUI.PdfSharp.Drawing.XGraphicsUnit,Alt.GUI.PdfSharp.Drawing.XPageDirection)">
            <summary>
            Initializes a new instance of the XGraphics class.
            </summary>
            <param name="gfx">The gfx.</param>
            <param name="size">The size.</param>
            <param name="pageUnit">The page unit.</param>
            <param name="pageDirection">The page direction.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.#ctor(Alt.GUI.PdfSharp.Pdf.PdfPage,Alt.GUI.PdfSharp.Drawing.XGraphicsPdfPageOptions,Alt.GUI.PdfSharp.Drawing.XGraphicsUnit,Alt.GUI.PdfSharp.Drawing.XPageDirection)">
            <summary>
            Initializes a new instance of the XGraphics class for drawing on a PDF page.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.#ctor(Alt.GUI.PdfSharp.Drawing.XForm)">
            <summary>
            Initializes a new instance of the XGraphics class used for drawing on a form.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.CreateMeasureContext(Alt.GUI.PdfSharp.Drawing.XSize,Alt.GUI.PdfSharp.Drawing.XGraphicsUnit,Alt.GUI.PdfSharp.Drawing.XPageDirection)">
            <summary>
            Creates the measure context. This is a graphics context created only for querying measures of text.
            Drawing on a measure context has no effect.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.FromGraphics(Alt.Sketch.Graphics,Alt.GUI.PdfSharp.Drawing.XSize)">
            <summary>
            Creates a new instance of the XGraphics class from a Alt.Sketch.Graphics object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.FromGraphics(Alt.Sketch.Graphics,Alt.GUI.PdfSharp.Drawing.XSize,Alt.GUI.PdfSharp.Drawing.XGraphicsUnit)">
            <summary>
            Creates a new instance of the XGraphics class from a Alt.Sketch.Graphics object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.FromPdfPage(Alt.GUI.PdfSharp.Pdf.PdfPage)">
            <summary>
            Creates a new instance of the XGraphics class from a PdfSharp.Pdf.PdfPage object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.FromPdfPage(Alt.GUI.PdfSharp.Pdf.PdfPage,Alt.GUI.PdfSharp.Drawing.XGraphicsUnit)">
            <summary>
            Creates a new instance of the XGraphics class from a PdfSharp.Pdf.PdfPage object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.FromPdfPage(Alt.GUI.PdfSharp.Pdf.PdfPage,Alt.GUI.PdfSharp.Drawing.XPageDirection)">
            <summary>
            Creates a new instance of the XGraphics class from a PdfSharp.Pdf.PdfPage object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.FromPdfPage(Alt.GUI.PdfSharp.Pdf.PdfPage,Alt.GUI.PdfSharp.Drawing.XGraphicsPdfPageOptions)">
            <summary>
            Creates a new instance of the XGraphics class from a PdfSharp.Pdf.PdfPage object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.FromPdfPage(Alt.GUI.PdfSharp.Pdf.PdfPage,Alt.GUI.PdfSharp.Drawing.XGraphicsPdfPageOptions,Alt.GUI.PdfSharp.Drawing.XPageDirection)">
            <summary>
            Creates a new instance of the XGraphics class from a PdfSharp.Pdf.PdfPage object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.FromPdfPage(Alt.GUI.PdfSharp.Pdf.PdfPage,Alt.GUI.PdfSharp.Drawing.XGraphicsPdfPageOptions,Alt.GUI.PdfSharp.Drawing.XGraphicsUnit)">
            <summary>
            Creates a new instance of the XGraphics class from a PdfSharp.Pdf.PdfPage object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.FromPdfPage(Alt.GUI.PdfSharp.Pdf.PdfPage,Alt.GUI.PdfSharp.Drawing.XGraphicsPdfPageOptions,Alt.GUI.PdfSharp.Drawing.XGraphicsUnit,Alt.GUI.PdfSharp.Drawing.XPageDirection)">
            <summary>
            Creates a new instance of the XGraphics class from a PdfSharp.Pdf.PdfPage object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.FromPdfForm(Alt.GUI.PdfSharp.Drawing.XPdfForm)">
            <summary>
            Creates a new instance of the XGraphics class from a PdfSharp.Drawing.XPdfForm object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.FromForm(Alt.GUI.PdfSharp.Drawing.XForm)">
            <summary>
            Creates a new instance of the XGraphics class from a PdfSharp.Drawing.XForm object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.Initialize">
            <summary>
            Internal setup.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XGraphics.targetContext">
            <summary>
            A value indicating whether GDI+ or WPF is used as context.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.Clear(Alt.GUI.PdfSharp.Drawing.XColor)">
            <summary>
            Fills the entire drawing surface with the specified color. The functions works only if
            the current transformation is identity, i.e. the function should be called only immediately
            after the XGraphics object was created.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawLine(Alt.GUI.PdfSharp.Drawing.XPen,Alt.Sketch.PointI,Alt.Sketch.PointI)">
            <summary>
            Draws a line connecting two Point structures.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawLine(Alt.GUI.PdfSharp.Drawing.XPen,Alt.Sketch.Point,Alt.Sketch.Point)">
            <summary>
            Draws a line connecting two Alt.Sketch.Point structures.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawLine(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XPoint,Alt.GUI.PdfSharp.Drawing.XPoint)">
            <summary>
            Draws a line connecting two XPoint structures.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawLine(Alt.GUI.PdfSharp.Drawing.XPen,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a line connecting the two points specified by coordinate pairs.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawLine(Alt.GUI.PdfSharp.Drawing.XPen,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws a line connecting the two points specified by coordinate pairs.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawLines(Alt.GUI.PdfSharp.Drawing.XPen,Alt.Sketch.PointI[])">
            <summary>
            Draws a series of line segments that connect an array of points.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawLines(Alt.GUI.PdfSharp.Drawing.XPen,Alt.Sketch.Point[])">
            <summary>
            Draws a series of line segments that connect an array of points.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawLines(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XPoint[])">
            <summary>
            Draws a series of line segments that connect an array of points.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawLines(Alt.GUI.PdfSharp.Drawing.XPen,System.Double,System.Double,System.Double[])">
            <summary>
            Draws a series of line segments that connect an array of x and y pairs.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawBezier(Alt.GUI.PdfSharp.Drawing.XPen,Alt.Sketch.PointI,Alt.Sketch.PointI,Alt.Sketch.PointI,Alt.Sketch.PointI)">
            <summary>
            Draws a Bйzier spline defined by four points.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawBezier(Alt.GUI.PdfSharp.Drawing.XPen,Alt.Sketch.Point,Alt.Sketch.Point,Alt.Sketch.Point,Alt.Sketch.Point)">
            <summary>
            Draws a Bйzier spline defined by four points.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawBezier(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XPoint,Alt.GUI.PdfSharp.Drawing.XPoint,Alt.GUI.PdfSharp.Drawing.XPoint,Alt.GUI.PdfSharp.Drawing.XPoint)">
            <summary>
            Draws a Bйzier spline defined by four points.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawBezier(Alt.GUI.PdfSharp.Drawing.XPen,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws a Bйzier spline defined by four points.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawBeziers(Alt.GUI.PdfSharp.Drawing.XPen,Alt.Sketch.PointI[])">
            <summary>
            Draws a series of Bйzier splines from an array of points.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawBeziers(Alt.GUI.PdfSharp.Drawing.XPen,Alt.Sketch.Point[])">
            <summary>
            Draws a series of Bйzier splines from an array of points.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawBeziers(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XPoint[])">
            <summary>
            Draws a series of Bйzier splines from an array of points.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawCurve(Alt.GUI.PdfSharp.Drawing.XPen,Alt.Sketch.PointI[])">
            <summary>
            Draws a cardinal spline through a specified array of points.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawCurve(Alt.GUI.PdfSharp.Drawing.XPen,Alt.Sketch.Point[])">
            <summary>
            Draws a cardinal spline through a specified array of points.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawCurve(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XPoint[])">
            <summary>
            Draws a cardinal spline through a specified array of points.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawCurve(Alt.GUI.PdfSharp.Drawing.XPen,Alt.Sketch.PointI[],System.Double)">
            <summary>
            Draws a cardinal spline through a specified array of points using a specified tension. 
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawCurve(Alt.GUI.PdfSharp.Drawing.XPen,Alt.Sketch.Point[],System.Double)">
            <summary>
            Draws a cardinal spline through a specified array of points using a specified tension. 
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawCurve(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XPoint[],System.Double)">
            <summary>
            Draws a cardinal spline through a specified array of points using a specified tension. 
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawArc(Alt.GUI.PdfSharp.Drawing.XPen,Alt.Sketch.RectI,System.Double,System.Double)">
            <summary>
            Draws an arc representing a portion of an ellipse.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawArc(Alt.GUI.PdfSharp.Drawing.XPen,Alt.Sketch.Rect,System.Double,System.Double)">
            <summary>
            Draws an arc representing a portion of an ellipse.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawArc(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XRect,System.Double,System.Double)">
            <summary>
            Draws an arc representing a portion of an ellipse.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawArc(Alt.GUI.PdfSharp.Drawing.XPen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws an arc representing a portion of an ellipse.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawArc(Alt.GUI.PdfSharp.Drawing.XPen,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws an arc representing a portion of an ellipse.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawRectangle(Alt.GUI.PdfSharp.Drawing.XPen,Alt.Sketch.RectI)">
            <summary>
            Draws a rectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawRectangle(Alt.GUI.PdfSharp.Drawing.XPen,Alt.Sketch.Rect)">
            <summary>
            Draws a rectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawRectangle(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XRect)">
            <summary>
            Draws a rectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawRectangle(Alt.GUI.PdfSharp.Drawing.XPen,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a rectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawRectangle(Alt.GUI.PdfSharp.Drawing.XPen,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws a rectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawRectangle(Alt.GUI.PdfSharp.Drawing.XBrush,Alt.Sketch.RectI)">
            <summary>
            Draws a rectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawRectangle(Alt.GUI.PdfSharp.Drawing.XBrush,Alt.Sketch.Rect)">
            <summary>
            Draws a rectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawRectangle(Alt.GUI.PdfSharp.Drawing.XBrush,Alt.GUI.PdfSharp.Drawing.XRect)">
            <summary>
            Draws a rectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawRectangle(Alt.GUI.PdfSharp.Drawing.XBrush,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a rectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawRectangle(Alt.GUI.PdfSharp.Drawing.XBrush,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws a rectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawRectangle(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.Sketch.RectI)">
            <summary>
            Draws a rectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawRectangle(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.Sketch.Rect)">
            <summary>
            Draws a rectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawRectangle(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.GUI.PdfSharp.Drawing.XRect)">
            <summary>
            Draws a rectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawRectangle(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XBrush,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a rectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawRectangle(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XBrush,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws a rectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawRectangles(Alt.GUI.PdfSharp.Drawing.XPen,Alt.Sketch.RectI[])">
            <summary>
            Draws a series of rectangles.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawRectangles(Alt.GUI.PdfSharp.Drawing.XPen,Alt.Sketch.Rect[])">
            <summary>
            Draws a series of rectangles.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawRectangles(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XRect[])">
            <summary>
            Draws a series of rectangles.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawRectangles(Alt.GUI.PdfSharp.Drawing.XBrush,Alt.Sketch.RectI[])">
            <summary>
            Draws a series of rectangles.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawRectangles(Alt.GUI.PdfSharp.Drawing.XBrush,Alt.Sketch.Rect[])">
            <summary>
            Draws a series of rectangles.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawRectangles(Alt.GUI.PdfSharp.Drawing.XBrush,Alt.GUI.PdfSharp.Drawing.XRect[])">
            <summary>
            Draws a series of rectangles.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawRectangles(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.Sketch.RectI[])">
            <summary>
            Draws a series of rectangles.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawRectangles(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.Sketch.Rect[])">
            <summary>
            Draws a series of rectangles.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawRectangles(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.GUI.PdfSharp.Drawing.XRect[])">
            <summary>
            Draws a series of rectangles.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawRoundedRectangle(Alt.GUI.PdfSharp.Drawing.XPen,Alt.Sketch.RectI,Alt.Sketch.SizeI)">
            <summary>
            Draws a rectangles with round corners.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawRoundedRectangle(Alt.GUI.PdfSharp.Drawing.XPen,Alt.Sketch.Rect,Alt.Sketch.Size)">
            <summary>
            Draws a rectangles with round corners.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawRoundedRectangle(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XRect,Alt.GUI.PdfSharp.Drawing.XSize)">
            <summary>
            Draws a rectangles with round corners.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawRoundedRectangle(Alt.GUI.PdfSharp.Drawing.XPen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a rectangles with round corners.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawRoundedRectangle(Alt.GUI.PdfSharp.Drawing.XPen,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws a rectangles with round corners.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawRoundedRectangle(Alt.GUI.PdfSharp.Drawing.XBrush,Alt.Sketch.RectI,Alt.Sketch.SizeI)">
            <summary>
            Draws a rectangles with round corners.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawRoundedRectangle(Alt.GUI.PdfSharp.Drawing.XBrush,Alt.Sketch.Rect,Alt.Sketch.Size)">
            <summary>
            Draws a rectangles with round corners.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawRoundedRectangle(Alt.GUI.PdfSharp.Drawing.XBrush,Alt.GUI.PdfSharp.Drawing.XRect,Alt.GUI.PdfSharp.Drawing.XSize)">
            <summary>
            Draws a rectangles with round corners.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawRoundedRectangle(Alt.GUI.PdfSharp.Drawing.XBrush,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a rectangles with round corners.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawRoundedRectangle(Alt.GUI.PdfSharp.Drawing.XBrush,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws a rectangles with round corners.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawRoundedRectangle(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.Sketch.RectI,Alt.Sketch.SizeI)">
            <summary>
            Draws a rectangles with round corners.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawRoundedRectangle(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.Sketch.Rect,Alt.Sketch.Size)">
            <summary>
            Draws a rectangles with round corners.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawRoundedRectangle(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.GUI.PdfSharp.Drawing.XRect,Alt.GUI.PdfSharp.Drawing.XSize)">
            <summary>
            Draws a rectangles with round corners.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawRoundedRectangle(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XBrush,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a rectangles with round corners.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawRoundedRectangle(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XBrush,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws a rectangles with round corners.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawEllipse(Alt.GUI.PdfSharp.Drawing.XPen,Alt.Sketch.RectI)">
            <summary>
            Draws an ellipse defined by a bounding rectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawEllipse(Alt.GUI.PdfSharp.Drawing.XPen,Alt.Sketch.Rect)">
            <summary>
            Draws an ellipse defined by a bounding rectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawEllipse(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XRect)">
            <summary>
            Draws an ellipse defined by a bounding rectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawEllipse(Alt.GUI.PdfSharp.Drawing.XPen,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws an ellipse defined by a bounding rectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawEllipse(Alt.GUI.PdfSharp.Drawing.XPen,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws an ellipse defined by a bounding rectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawEllipse(Alt.GUI.PdfSharp.Drawing.XBrush,Alt.Sketch.RectI)">
            <summary>
            Draws an ellipse defined by a bounding rectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawEllipse(Alt.GUI.PdfSharp.Drawing.XBrush,Alt.Sketch.Rect)">
            <summary>
            Draws an ellipse defined by a bounding rectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawEllipse(Alt.GUI.PdfSharp.Drawing.XBrush,Alt.GUI.PdfSharp.Drawing.XRect)">
            <summary>
            Draws an ellipse defined by a bounding rectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawEllipse(Alt.GUI.PdfSharp.Drawing.XBrush,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws an ellipse defined by a bounding rectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawEllipse(Alt.GUI.PdfSharp.Drawing.XBrush,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws an ellipse defined by a bounding rectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawEllipse(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.Sketch.RectI)">
            <summary>
            Draws an ellipse defined by a bounding rectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawEllipse(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.Sketch.Rect)">
            <summary>
            Draws an ellipse defined by a bounding rectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawEllipse(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.GUI.PdfSharp.Drawing.XRect)">
            <summary>
            Draws an ellipse defined by a bounding rectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawEllipse(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XBrush,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws an ellipse defined by a bounding rectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawEllipse(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XBrush,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws an ellipse defined by a bounding rectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawPolygon(Alt.GUI.PdfSharp.Drawing.XPen,Alt.Sketch.PointI[])">
            <summary>
            Draws a polygon defined by an array of points.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawPolygon(Alt.GUI.PdfSharp.Drawing.XPen,Alt.Sketch.Point[])">
            <summary>
            Draws a polygon defined by an array of points.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawPolygon(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XPoint[])">
            <summary>
            Draws a polygon defined by an array of points.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawPolygon(Alt.GUI.PdfSharp.Drawing.XBrush,Alt.Sketch.PointI[],Alt.GUI.PdfSharp.Drawing.XFillMode)">
            <summary>
            Draws a polygon defined by an array of points.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawPolygon(Alt.GUI.PdfSharp.Drawing.XBrush,Alt.Sketch.Point[],Alt.GUI.PdfSharp.Drawing.XFillMode)">
            <summary>
            Draws a polygon defined by an array of points.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawPolygon(Alt.GUI.PdfSharp.Drawing.XBrush,Alt.GUI.PdfSharp.Drawing.XPoint[],Alt.GUI.PdfSharp.Drawing.XFillMode)">
            <summary>
            Draws a polygon defined by an array of points.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawPolygon(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.Sketch.PointI[],Alt.GUI.PdfSharp.Drawing.XFillMode)">
            <summary>
            Draws a polygon defined by an array of points.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawPolygon(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.Sketch.Point[],Alt.GUI.PdfSharp.Drawing.XFillMode)">
            <summary>
            Draws a polygon defined by an array of points.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawPolygon(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.GUI.PdfSharp.Drawing.XPoint[],Alt.GUI.PdfSharp.Drawing.XFillMode)">
            <summary>
            Draws a polygon defined by an array of points.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawPie(Alt.GUI.PdfSharp.Drawing.XPen,Alt.Sketch.RectI,System.Double,System.Double)">
            <summary>
            Draws a pie defined by an ellipse.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawPie(Alt.GUI.PdfSharp.Drawing.XPen,Alt.Sketch.Rect,System.Double,System.Double)">
            <summary>
            Draws a pie defined by an ellipse.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawPie(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XRect,System.Double,System.Double)">
            <summary>
            Draws a pie defined by an ellipse.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawPie(Alt.GUI.PdfSharp.Drawing.XPen,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a pie defined by an ellipse.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawPie(Alt.GUI.PdfSharp.Drawing.XPen,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws a pie defined by an ellipse.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawPie(Alt.GUI.PdfSharp.Drawing.XBrush,Alt.Sketch.RectI,System.Double,System.Double)">
            <summary>
            Draws a pie defined by an ellipse.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawPie(Alt.GUI.PdfSharp.Drawing.XBrush,Alt.Sketch.Rect,System.Double,System.Double)">
            <summary>
            Draws a pie defined by an ellipse.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawPie(Alt.GUI.PdfSharp.Drawing.XBrush,Alt.GUI.PdfSharp.Drawing.XRect,System.Double,System.Double)">
            <summary>
            Draws a pie defined by an ellipse.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawPie(Alt.GUI.PdfSharp.Drawing.XBrush,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a pie defined by an ellipse.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawPie(Alt.GUI.PdfSharp.Drawing.XBrush,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws a pie defined by an ellipse.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawPie(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.Sketch.RectI,System.Double,System.Double)">
            <summary>
            Draws a pie defined by an ellipse.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawPie(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.Sketch.Rect,System.Double,System.Double)">
            <summary>
            Draws a pie defined by an ellipse.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawPie(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.GUI.PdfSharp.Drawing.XRect,System.Double,System.Double)">
            <summary>
            Draws a pie defined by an ellipse.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawPie(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XBrush,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a pie defined by an ellipse.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawPie(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XBrush,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws a pie defined by an ellipse.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawClosedCurve(Alt.GUI.PdfSharp.Drawing.XPen,Alt.Sketch.PointI[])">
            <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawClosedCurve(Alt.GUI.PdfSharp.Drawing.XPen,Alt.Sketch.Point[])">
            <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawClosedCurve(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XPoint[])">
            <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawClosedCurve(Alt.GUI.PdfSharp.Drawing.XPen,Alt.Sketch.PointI[],System.Double)">
            <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawClosedCurve(Alt.GUI.PdfSharp.Drawing.XPen,Alt.Sketch.Point[],System.Double)">
            <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawClosedCurve(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XPoint[],System.Double)">
            <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawClosedCurve(Alt.GUI.PdfSharp.Drawing.XBrush,Alt.Sketch.PointI[])">
            <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawClosedCurve(Alt.GUI.PdfSharp.Drawing.XBrush,Alt.Sketch.Point[])">
            <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawClosedCurve(Alt.GUI.PdfSharp.Drawing.XBrush,Alt.GUI.PdfSharp.Drawing.XPoint[])">
            <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawClosedCurve(Alt.GUI.PdfSharp.Drawing.XBrush,Alt.Sketch.PointI[],Alt.GUI.PdfSharp.Drawing.XFillMode)">
            <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawClosedCurve(Alt.GUI.PdfSharp.Drawing.XBrush,Alt.Sketch.Point[],Alt.GUI.PdfSharp.Drawing.XFillMode)">
            <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawClosedCurve(Alt.GUI.PdfSharp.Drawing.XBrush,Alt.GUI.PdfSharp.Drawing.XPoint[],Alt.GUI.PdfSharp.Drawing.XFillMode)">
            <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawClosedCurve(Alt.GUI.PdfSharp.Drawing.XBrush,Alt.Sketch.PointI[],Alt.GUI.PdfSharp.Drawing.XFillMode,System.Double)">
            <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawClosedCurve(Alt.GUI.PdfSharp.Drawing.XBrush,Alt.Sketch.Point[],Alt.GUI.PdfSharp.Drawing.XFillMode,System.Double)">
            <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawClosedCurve(Alt.GUI.PdfSharp.Drawing.XBrush,Alt.GUI.PdfSharp.Drawing.XPoint[],Alt.GUI.PdfSharp.Drawing.XFillMode,System.Double)">
            <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawClosedCurve(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.Sketch.PointI[])">
            <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawClosedCurve(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.Sketch.Point[])">
            <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawClosedCurve(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.GUI.PdfSharp.Drawing.XPoint[])">
            <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawClosedCurve(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.Sketch.PointI[],Alt.GUI.PdfSharp.Drawing.XFillMode)">
            <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawClosedCurve(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.Sketch.Point[],Alt.GUI.PdfSharp.Drawing.XFillMode)">
            <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawClosedCurve(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.GUI.PdfSharp.Drawing.XPoint[],Alt.GUI.PdfSharp.Drawing.XFillMode)">
            <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawClosedCurve(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.Sketch.PointI[],Alt.GUI.PdfSharp.Drawing.XFillMode,System.Double)">
            <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawClosedCurve(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.Sketch.Point[],Alt.GUI.PdfSharp.Drawing.XFillMode,System.Double)">
            <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawClosedCurve(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.GUI.PdfSharp.Drawing.XPoint[],Alt.GUI.PdfSharp.Drawing.XFillMode,System.Double)">
            <summary>
            Draws a closed cardinal spline defined by an array of points.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawPath(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XGraphicsPath)">
            <summary>
            Draws a graphical path.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawPath(Alt.GUI.PdfSharp.Drawing.XBrush,Alt.GUI.PdfSharp.Drawing.XGraphicsPath)">
            <summary>
            Draws a graphical path.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawPath(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.GUI.PdfSharp.Drawing.XGraphicsPath)">
            <summary>
            Draws a graphical path.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawString(System.String,Alt.GUI.PdfSharp.Drawing.XFont,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.Sketch.Point)">
            <summary>
            Draws the specified text string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawString(System.String,Alt.GUI.PdfSharp.Drawing.XFont,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.GUI.PdfSharp.Drawing.XPoint)">
            <summary>
            Draws the specified text string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawString(System.String,Alt.GUI.PdfSharp.Drawing.XFont,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.Sketch.Point,Alt.GUI.PdfSharp.Drawing.XStringFormat)">
            <summary>
            Draws the specified text string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawString(System.String,Alt.GUI.PdfSharp.Drawing.XFont,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.GUI.PdfSharp.Drawing.XPoint,Alt.GUI.PdfSharp.Drawing.XStringFormat)">
            <summary>
            Draws the specified text string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawString(System.String,Alt.GUI.PdfSharp.Drawing.XFont,Alt.GUI.PdfSharp.Drawing.XBrush,System.Double,System.Double)">
            <summary>
            Draws the specified text string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawString(System.String,Alt.GUI.PdfSharp.Drawing.XFont,Alt.GUI.PdfSharp.Drawing.XBrush,System.Double,System.Double,Alt.GUI.PdfSharp.Drawing.XStringFormat)">
            <summary>
            Draws the specified text string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawString(System.String,Alt.GUI.PdfSharp.Drawing.XFont,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.Sketch.Rect)">
            <summary>
            Draws the specified text string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawString(System.String,Alt.GUI.PdfSharp.Drawing.XFont,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.GUI.PdfSharp.Drawing.XRect)">
            <summary>
            Draws the specified text string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawString(System.String,Alt.GUI.PdfSharp.Drawing.XFont,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.Sketch.Rect,Alt.GUI.PdfSharp.Drawing.XStringFormat)">
            <summary>
            Draws the specified text string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawString(System.String,Alt.GUI.PdfSharp.Drawing.XFont,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.GUI.PdfSharp.Drawing.XRect,Alt.GUI.PdfSharp.Drawing.XStringFormat)">
            <summary>
            Draws the specified text string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.MeasureString(System.String,Alt.GUI.PdfSharp.Drawing.XFont,Alt.GUI.PdfSharp.Drawing.XStringFormat)">
            <summary>
            Measures the specified string when drawn with the specified font.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.MeasureString(System.String,Alt.GUI.PdfSharp.Drawing.XFont)">
            <summary>
            Measures the specified string when drawn with the specified font.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawImage(Alt.GUI.PdfSharp.Drawing.XImage,Alt.Sketch.PointI)">
            <summary>
            Draws the specified image.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawImage(Alt.GUI.PdfSharp.Drawing.XImage,Alt.Sketch.Point)">
            <summary>
            Draws the specified image.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawImage(Alt.GUI.PdfSharp.Drawing.XImage,Alt.GUI.PdfSharp.Drawing.XPoint)">
            <summary>
            Draws the specified image.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawImage(Alt.GUI.PdfSharp.Drawing.XImage,System.Int32,System.Int32)">
            <summary>
            Draws the specified image.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawImage(Alt.GUI.PdfSharp.Drawing.XImage,System.Double,System.Double)">
            <summary>
            Draws the specified image.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawImage(Alt.GUI.PdfSharp.Drawing.XImage,Alt.Sketch.RectI)">
            <summary>
            Draws the specified image.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawImage(Alt.GUI.PdfSharp.Drawing.XImage,Alt.Sketch.Rect)">
            <summary>
            Draws the specified image.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawImage(Alt.GUI.PdfSharp.Drawing.XImage,Alt.GUI.PdfSharp.Drawing.XRect)">
            <summary>
            Draws the specified image.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawImage(Alt.GUI.PdfSharp.Drawing.XImage,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws the specified image.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawImage(Alt.GUI.PdfSharp.Drawing.XImage,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draws the specified image.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawImage(Alt.GUI.PdfSharp.Drawing.XImage,Alt.Sketch.RectI,Alt.Sketch.RectI,Alt.GUI.PdfSharp.Drawing.XGraphicsUnit)">
            <summary>
            Draws the specified image.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawImage(Alt.GUI.PdfSharp.Drawing.XImage,Alt.Sketch.Rect,Alt.Sketch.Rect,Alt.GUI.PdfSharp.Drawing.XGraphicsUnit)">
            <summary>
            Draws the specified image.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawImage(Alt.GUI.PdfSharp.Drawing.XImage,Alt.GUI.PdfSharp.Drawing.XRect,Alt.GUI.PdfSharp.Drawing.XRect,Alt.GUI.PdfSharp.Drawing.XGraphicsUnit)">
            <summary>
            Draws the specified image.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.CheckXPdfFormConsistence(Alt.GUI.PdfSharp.Drawing.XImage)">
            <summary>
            Checks whether drawing is allowed and disposes the XGraphics object, if necessary.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawBarCode(Alt.GUI.PdfSharp.Drawing.BarCodes.BarCode,Alt.GUI.PdfSharp.Drawing.XPoint)">
            <summary>
            Draws the specified bar code.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawBarCode(Alt.GUI.PdfSharp.Drawing.BarCodes.BarCode,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.GUI.PdfSharp.Drawing.XPoint)">
            <summary>
            Draws the specified bar code.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawBarCode(Alt.GUI.PdfSharp.Drawing.BarCodes.BarCode,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.GUI.PdfSharp.Drawing.XFont,Alt.GUI.PdfSharp.Drawing.XPoint)">
            <summary>
            Draws the specified bar code.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawMatrixCode(Alt.GUI.PdfSharp.Drawing.BarCodes.MatrixCode,Alt.GUI.PdfSharp.Drawing.XPoint)">
            <summary>
            Draws the specified data matrix code.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.DrawMatrixCode(Alt.GUI.PdfSharp.Drawing.BarCodes.MatrixCode,Alt.GUI.PdfSharp.Drawing.XBrush,Alt.GUI.PdfSharp.Drawing.XPoint)">
            <summary>
            Draws the specified data matrix code.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.Save">
            <summary>
            Saves the current state of this XGraphics object and identifies the saved state with the
            returned XGraphicsState object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.Restore(Alt.GUI.PdfSharp.Drawing.XGraphicsState)">
            <summary>
            Restores the state of this XGraphics object to the state represented by the specified 
            XGraphicsState object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.Restore">
            <summary>
            Restores the state of this XGraphics object to the state before the most recently call of Save.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.BeginContainer">
            <summary>
            Saves a graphics container with the current state of this XGraphics and 
            opens and uses a new graphics container.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.BeginContainer(Alt.Sketch.RectI,Alt.Sketch.RectI,Alt.GUI.PdfSharp.Drawing.XGraphicsUnit)">
            <summary>
            Saves a graphics container with the current state of this XGraphics and 
            opens and uses a new graphics container.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.BeginContainer(Alt.Sketch.Rect,Alt.Sketch.Rect,Alt.GUI.PdfSharp.Drawing.XGraphicsUnit)">
            <summary>
            Saves a graphics container with the current state of this XGraphics and 
            opens and uses a new graphics container.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.BeginContainer(Alt.GUI.PdfSharp.Drawing.XRect,Alt.GUI.PdfSharp.Drawing.XRect,Alt.GUI.PdfSharp.Drawing.XGraphicsUnit)">
            <summary>
            Saves a graphics container with the current state of this XGraphics and 
            opens and uses a new graphics container.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.EndContainer(Alt.GUI.PdfSharp.Drawing.XGraphicsContainer)">
            <summary>
            Closes the current graphics container and restores the state of this XGraphics 
            to the state saved by a call to the BeginContainer method.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.TranslateTransform(System.Double,System.Double)">
            <summary>
            Applies the specified translation operation to the transformation matrix of this object by 
            prepending it to the object's transformation matrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.TranslateTransform(System.Double,System.Double,Alt.GUI.PdfSharp.Drawing.XMatrixOrder)">
            <summary>
            Applies the specified translation operation to the transformation matrix of this object
            in the specified order.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.ScaleTransform(System.Double,System.Double)">
            <summary>
            Applies the specified scaling operation to the transformation matrix of this object by 
            prepending it to the object's transformation matrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.ScaleTransform(System.Double,System.Double,Alt.GUI.PdfSharp.Drawing.XMatrixOrder)">
            <summary>
            Applies the specified scaling operation to the transformation matrix of this object
            in the specified order.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.ScaleTransform(System.Double)">
            <summary>
            Applies the specified scaling operation to the transformation matrix of this object by 
            prepending it to the object's transformation matrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.ScaleTransform(System.Double,Alt.GUI.PdfSharp.Drawing.XMatrixOrder)">
            <summary>
            Applies the specified scaling operation to the transformation matrix of this object
            in the specified order.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.RotateTransform(System.Double)">
            <summary>
            Applies the specified rotation operation to the transformation matrix of this object by 
            prepending it to the object's transformation matrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.RotateTransform(System.Double,Alt.GUI.PdfSharp.Drawing.XMatrixOrder)">
            <summary>
            Applies the specified rotation operation to the transformation matrix of this object
            in the specified order. The angle unit of measure is degree.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.RotateAtTransform(System.Double,Alt.GUI.PdfSharp.Drawing.XPoint)">
            <summary>
            Applies the specified rotation operation to the transformation matrix of this object by 
            prepending it to the object's transformation matrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.RotateAtTransform(System.Double,Alt.GUI.PdfSharp.Drawing.XPoint,Alt.GUI.PdfSharp.Drawing.XMatrixOrder)">
            <summary>
            Applies the specified rotation operation to the transformation matrix of this object by 
            prepending it to the object's transformation matrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.ShearTransform(System.Double,System.Double)">
            <summary>
            Applies the specified shearing operation to the transformation matrix of this object by 
            prepending it to the object's transformation matrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.ShearTransform(System.Double,System.Double,Alt.GUI.PdfSharp.Drawing.XMatrixOrder)">
            <summary>
            Applies the specified shearing operation to the transformation matrix of this object
            in the specified order.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.MultiplyTransform(Alt.GUI.PdfSharp.Drawing.XMatrix)">
            <summary>
            Multiplies the transformation matrix of this object and specified matrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.MultiplyTransform(Alt.GUI.PdfSharp.Drawing.XMatrix,Alt.GUI.PdfSharp.Drawing.XMatrixOrder)">
            <summary>
            Multiplies the transformation matrix of this object and specified matrix in the specified order.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.AddTransform(Alt.GUI.PdfSharp.Drawing.XMatrix,Alt.GUI.PdfSharp.Drawing.XMatrixOrder)">
            <summary>
            Gets or sets the transformation matrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.ResetTransform">
            <summary>
            Resets the transformation matrix of this object to the identity matrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.SetClip(Alt.Sketch.RectI)">
            <summary>
            Sets the clipping region to the specified rectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.SetClip(Alt.Sketch.Rect)">
            <summary>
            Sets the clipping region to the specified rectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.SetClip(Alt.GUI.PdfSharp.Drawing.XRect)">
            <summary>
            Sets the clipping region to the specified rectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.SetClip(Alt.GUI.PdfSharp.Drawing.XGraphicsPath)">
            <summary>
            Sets the clipping region to the specified graphical path.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.SetClip(Alt.GUI.PdfSharp.Drawing.XRect,Alt.GUI.PdfSharp.Drawing.XCombineMode)">
            <summary>
            Sets the clipping region to the specified graphical path.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.SetClip(Alt.GUI.PdfSharp.Drawing.XGraphicsPath,Alt.GUI.PdfSharp.Drawing.XCombineMode)">
            <summary>
            Sets the clipping region to the specified graphical path.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.IntersectClip(Alt.Sketch.RectI)">
            <summary>
            Updates the clip region of this XGraphics to the intersection of the 
            current clip region and the specified rectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.IntersectClip(Alt.Sketch.Rect)">
            <summary>
            Updates the clip region of this XGraphics to the intersection of the 
            current clip region and the specified rectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.IntersectClip(Alt.GUI.PdfSharp.Drawing.XRect)">
            <summary>
            Updates the clip region of this XGraphics to the intersection of the 
            current clip region and the specified rectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.IntersectClip(Alt.GUI.PdfSharp.Drawing.XGraphicsPath)">
            <summary>
            Updates the clip region of this XGraphics to the intersection of the 
            current clip region and the specified graphical path.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.ResetClip">
            <summary>
            Resets the clip region of this XGraphics to an infinite region, 
            i.e. no clipping takes place.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.WriteComment(System.String)">
            <summary>
            Writes a comment to the output stream. Comments have no effect on the rendering of the output.
            They may be useful to mark a position in a content stream of a PDF document.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.MakePointFArray(Alt.Sketch.PointI[])">
            <summary>
            Converts a Point[] into a Alt.Sketch.Point[].
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.MakePointFArray(Alt.GUI.PdfSharp.Drawing.XPoint[])">
            <summary>
            Converts a XPoint[] into a Alt.Sketch.Point[].
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.MakeXPointArray(Alt.Sketch.PointI[])">
            <summary>
            Converts a Point[] into a XPoint[].
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.MakeXPointArray(Alt.Sketch.Point[])">
            <summary>
            Converts a Alt.Sketch.Point[] into a XPoint[].
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XGraphics.gfx">
            <summary>
            Always defined Alt.Sketch.Graphics object. Used as 'query context' for PDF pages.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XGraphics.defaultViewMatrix">
            <summary>
            The transformation matrix from the XGraphics page space to the Graphics world space.
            (The name 'default view matrix' comes from Microsoft OS/2 Presentation Manager. I choose
            this name because I have no better one.)
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XGraphics.drawGraphics">
            <summary>
            Indicates whether to send drawing operations to this.gfx or this.dc.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XGraphics.renderer">
            <summary>
            Interface to an (optional) renderer. Currently it is the XGraphicsPdfRenderer, if defined.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XGraphics.transform">
            <summary>
            The transformation matrix from XGraphics world space to page unit space.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XGraphics.gsStack">
            <summary>
            The graphics state stack.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XGraphics.MUH">
            <summary>
            Internal hack for MigraDoc. Will be removed in further releases.
            Unicode support requires a global refactoring of MigraDoc and will be done in further releases.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XGraphics.MFEH">
            <summary>
            Internal hack for MigraDoc. Will be removed in further releases.
            Font embedding support requires a global refactoring of MigraDoc and will be done in further releases.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XGraphics.PageUnit">
            <summary>
            Gets or sets the unit of measure used for page coordinates.
            CURRENTLY ONLY POINT IS IMPLEMENTED.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XGraphics.PageDirection">
            <summary>
            Gets or sets the a value indicating in which direction y-value grow.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XGraphics.PageOrigin">
            <summary>
            Gets the current page origin. Setting the origin is not yet implemented.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XGraphics.PageSize">
            <summary>
            Gets the current size of the page.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XGraphics.GraphicsStateLevel">
            <summary>
            Gets the current graphics state level. The default value is 0. Each call of Save or BeginContainer
            increased and each call of Restore or EndContainer decreased the value by 1.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XGraphics.SmoothingMode">
            <summary>
            Gets or sets the smoothing mode.
            </summary>
            <value>The smoothing mode.</value>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XGraphics.Transform">
            <summary>
            Gets or sets the transformation matrix.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XGraphics.Internals">
            <summary>
            Permits access to internal data.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XGraphics.Transformer">
            <summary>
            (Under construction. May change in future versions.)
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XGraphics.PdfPage">
            <summary>
            Gets the PDF page that serves as drawing surface if PDF is rendered, otherwise null.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XGraphics.Graphics">
            <summary>
            Gets the Alt.Sketch.Graphics objects that serves as drawing surface if no PDF is rendered,
            or null, if no such object exists.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XGraphics.XGraphicsInternals">
            <summary>
            Provides access to internal data structures of the XGraphics class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.XGraphicsInternals.SetPdfTz(System.Double)">
            <summary>
            If PDF is rendered, sets the tz value.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XGraphics.XGraphicsInternals.Graphics">
            <summary>
            Gets the underlying Graphics object.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XGraphics.SpaceTransformer">
            <summary>
            (This class is under construction.)
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphics.SpaceTransformer.WorldToDefaultPage(Alt.GUI.PdfSharp.Drawing.XRect)">
            <summary>
            Gets the smallest rectangle in default page space units that completely encloses the specified rect
            in world space units.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XGraphicsContainer">
            <summary>
            Represents the internal state of an XGraphics object.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XGraphicsPath">
            <summary>
            Represents a series of connected lines and curves.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Drawing.XGraphicsPath"/> class.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.gdipPath">
            <summary>
            Gets access to underlying GDI+ path.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.Clone">
            <summary>
            Clones this instance.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddLine(Alt.Sketch.PointI,Alt.Sketch.PointI)">
            <summary>
            Adds a line segment to current figure.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddLine(Alt.Sketch.Point,Alt.Sketch.Point)">
            <summary>
            Adds  a line segment to current figure.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddLine(Alt.GUI.PdfSharp.Drawing.XPoint,Alt.GUI.PdfSharp.Drawing.XPoint)">
            <summary>
            Adds  a line segment to current figure.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddLine(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds  a line segment to current figure.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddLine(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds  a line segment to current figure.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddLines(Alt.Sketch.PointI[])">
            <summary>
            Adds a series of connected line segments to current figure.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddLines(Alt.Sketch.Point[])">
            <summary>
            Adds a series of connected line segments to current figure.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddLines(Alt.GUI.PdfSharp.Drawing.XPoint[])">
            <summary>
            Adds a series of connected line segments to current figure.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddBezier(Alt.Sketch.PointI,Alt.Sketch.PointI,Alt.Sketch.PointI,Alt.Sketch.PointI)">
            <summary>
            Adds a cubic Bйzier curve to the current figure.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddBezier(Alt.Sketch.Point,Alt.Sketch.Point,Alt.Sketch.Point,Alt.Sketch.Point)">
            <summary>
            Adds a cubic Bйzier curve to the current figure.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddBezier(Alt.GUI.PdfSharp.Drawing.XPoint,Alt.GUI.PdfSharp.Drawing.XPoint,Alt.GUI.PdfSharp.Drawing.XPoint,Alt.GUI.PdfSharp.Drawing.XPoint)">
            <summary>
            Adds a cubic Bйzier curve to the current figure.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddBezier(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a cubic Bйzier curve to the current figure.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddBezier(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds a cubic Bйzier curve to the current figure.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddBeziers(Alt.Sketch.PointI[])">
            <summary>
            Adds a sequence of connected cubic Bйzier curves to the current figure.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddBeziers(Alt.Sketch.Point[])">
            <summary>
            Adds a sequence of connected cubic Bйzier curves to the current figure.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddBeziers(Alt.GUI.PdfSharp.Drawing.XPoint[])">
            <summary>
            Adds a sequence of connected cubic Bйzier curves to the current figure.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddCurve(Alt.Sketch.PointI[])">
            <summary>
            Adds a spline curve to the current figure.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddCurve(Alt.Sketch.Point[])">
            <summary>
            Adds a spline curve to the current figure.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddCurve(Alt.GUI.PdfSharp.Drawing.XPoint[])">
            <summary>
            Adds a spline curve to the current figure.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddCurve(Alt.Sketch.PointI[],System.Double)">
            <summary>
            Adds a spline curve to the current figure.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddCurve(Alt.Sketch.Point[],System.Double)">
            <summary>
            Adds a spline curve to the current figure.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddCurve(Alt.GUI.PdfSharp.Drawing.XPoint[],System.Double)">
            <summary>
            Adds a spline curve to the current figure.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddCurve(Alt.Sketch.PointI[],System.Int32,System.Int32,System.Single)">
            <summary>
            Adds a spline curve to the current figure.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddCurve(Alt.Sketch.Point[],System.Int32,System.Int32,System.Single)">
            <summary>
            Adds a spline curve to the current figure.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddCurve(Alt.GUI.PdfSharp.Drawing.XPoint[],System.Int32,System.Int32,System.Double)">
            <summary>
            Adds a spline curve to the current figure.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddArc(Alt.Sketch.RectI,System.Double,System.Double)">
            <summary>
            Adds an elliptical arc to the current figure.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddArc(Alt.Sketch.Rect,System.Double,System.Double)">
            <summary>
            Adds an elliptical arc to the current figure.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddArc(Alt.GUI.PdfSharp.Drawing.XRect,System.Double,System.Double)">
            <summary>
            Adds an elliptical arc to the current figure.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddArc(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds an elliptical arc to the current figure.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddArc(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds an elliptical arc to the current figure.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddRectangle(Alt.Sketch.RectI)">
            <summary>
            Adds a rectangle to this path.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddRectangle(Alt.Sketch.Rect)">
            <summary>
            Adds a rectangle to this path.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddRectangle(Alt.GUI.PdfSharp.Drawing.XRect)">
            <summary>
            Adds a rectangle to this path.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a rectangle to this path.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddRectangle(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds a rectangle to this path.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddRectangles(Alt.Sketch.RectI[])">
            <summary>
            Adds a series of rectangles to this path.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddRectangles(Alt.Sketch.Rect[])">
            <summary>
            Adds a series of rectangles to this path.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddRectangles(Alt.GUI.PdfSharp.Drawing.XRect[])">
            <summary>
            Adds a series of rectangles to this path.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddRoundedRectangle(Alt.Sketch.RectI,Alt.Sketch.SizeI)">
            <summary>
            Adds a rectangle with rounded corners to this path.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddRoundedRectangle(Alt.Sketch.Rect,Alt.Sketch.Size)">
            <summary>
            Adds a rectangle with rounded corners to this path.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddRoundedRectangle(Alt.GUI.PdfSharp.Drawing.XRect,Alt.Sketch.Size)">
            <summary>
            Adds a rectangle with rounded corners to this path.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddRoundedRectangle(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a rectangle with rounded corners to this path.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddRoundedRectangle(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds a rectangle with rounded corners to this path.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddEllipse(Alt.Sketch.RectI)">
            <summary>
            Adds an ellipse to the current path.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddEllipse(Alt.Sketch.Rect)">
            <summary>
            Adds an ellipse to the current path.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddEllipse(Alt.GUI.PdfSharp.Drawing.XRect)">
            <summary>
            Adds an ellipse to the current path.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddEllipse(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds an ellipse to the current path.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddEllipse(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds an ellipse to the current path.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddPolygon(Alt.Sketch.PointI[])">
            <summary>
            Adds a polygon to this path.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddPolygon(Alt.Sketch.Point[])">
            <summary>
            Adds a polygon to this path.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddPolygon(Alt.GUI.PdfSharp.Drawing.XPoint[])">
            <summary>
            Adds a polygon to this path.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddPie(Alt.Sketch.RectI,System.Double,System.Double)">
            <summary>
            Adds the outline of a pie shape to this path.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddPie(Alt.Sketch.Rect,System.Double,System.Double)">
            <summary>
            Adds the outline of a pie shape to this path.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddPie(Alt.GUI.PdfSharp.Drawing.XRect,System.Double,System.Double)">
            <summary>
            Adds the outline of a pie shape to this path.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddPie(System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Adds the outline of a pie shape to this path.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddPie(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds the outline of a pie shape to this path.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddClosedCurve(Alt.Sketch.PointI[])">
            <summary>
            Adds a closed curve to this path.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddClosedCurve(Alt.Sketch.Point[])">
            <summary>
            Adds a closed curve to this path.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddClosedCurve(Alt.GUI.PdfSharp.Drawing.XPoint[])">
            <summary>
            Adds a closed curve to this path.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddClosedCurve(Alt.Sketch.PointI[],System.Double)">
            <summary>
            Adds a closed curve to this path.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddClosedCurve(Alt.Sketch.Point[],System.Double)">
            <summary>
            Adds a closed curve to this path.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddClosedCurve(Alt.GUI.PdfSharp.Drawing.XPoint[],System.Double)">
            <summary>
            Adds a closed curve to this path.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddPath(Alt.GUI.PdfSharp.Drawing.XGraphicsPath,System.Boolean)">
            <summary>
            Adds the specified path to this path.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddString(System.String,Alt.GUI.PdfSharp.Drawing.XFontFamily,Alt.GUI.PdfSharp.Drawing.XFontStyle,System.Double,Alt.Sketch.PointI,Alt.GUI.PdfSharp.Drawing.XStringFormat)">
            <summary>
            Adds a text string to this path.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddString(System.String,Alt.GUI.PdfSharp.Drawing.XFontFamily,Alt.GUI.PdfSharp.Drawing.XFontStyle,System.Double,Alt.Sketch.Point,Alt.GUI.PdfSharp.Drawing.XStringFormat)">
            <summary>
            Adds a text string to this path.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddString(System.String,Alt.GUI.PdfSharp.Drawing.XFontFamily,Alt.GUI.PdfSharp.Drawing.XFontStyle,System.Double,Alt.GUI.PdfSharp.Drawing.XPoint,Alt.GUI.PdfSharp.Drawing.XStringFormat)">
            <summary>
            Adds a text string to this path.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddString(System.String,Alt.GUI.PdfSharp.Drawing.XFontFamily,Alt.GUI.PdfSharp.Drawing.XFontStyle,System.Double,Alt.Sketch.RectI,Alt.GUI.PdfSharp.Drawing.XStringFormat)">
            <summary>
            Adds a text string to this path.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddString(System.String,Alt.GUI.PdfSharp.Drawing.XFontFamily,Alt.GUI.PdfSharp.Drawing.XFontStyle,System.Double,Alt.Sketch.Rect,Alt.GUI.PdfSharp.Drawing.XStringFormat)">
            <summary>
            Adds a text string to this path.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.AddString(System.String,Alt.GUI.PdfSharp.Drawing.XFontFamily,Alt.GUI.PdfSharp.Drawing.XFontStyle,System.Double,Alt.GUI.PdfSharp.Drawing.XRect,Alt.GUI.PdfSharp.Drawing.XStringFormat)">
            <summary>
            Adds a text string to this path.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.CloseFigure">
            <summary>
            Closes the current figure and starts a new figure.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.StartFigure">
            <summary>
            Starts a new figure without closing the current figure.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.Flatten">
            <summary>
            Converts each curve in this XGraphicsPath into a sequence of connected line segments. 
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.Flatten(Alt.GUI.PdfSharp.Drawing.XMatrix)">
            <summary>
            Converts each curve in this XGraphicsPath into a sequence of connected line segments. 
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.Flatten(Alt.GUI.PdfSharp.Drawing.XMatrix,System.Double)">
            <summary>
            Converts each curve in this XGraphicsPath into a sequence of connected line segments. 
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.Widen(Alt.GUI.PdfSharp.Drawing.XPen)">
            <summary>
            Replaces this path with curves that enclose the area that is filled when this path is drawn 
            by the specified pen.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.Widen(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XMatrix)">
            <summary>
            Replaces this path with curves that enclose the area that is filled when this path is drawn 
            by the specified pen.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.Widen(Alt.GUI.PdfSharp.Drawing.XPen,Alt.GUI.PdfSharp.Drawing.XMatrix,System.Double)">
            <summary>
            Replaces this path with curves that enclose the area that is filled when this path is drawn 
            by the specified pen.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.FillMode">
            <summary>
            Gets or sets an XFillMode that determines how the interiors of shapes are filled.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XGraphicsPath.Internals">
            <summary>
            Grants access to internal objects of this class.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XGraphicsPathInternals">
            <summary>
            Provides access to the internal data structures of XGraphicsPath.
            This class prevents the public interface from pollution with internal functions.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XGraphicsPathInternals.GdiPath">
            <summary>
            Gets the underlying GDI+ path object.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XGraphicsPathItem">
            <summary>
            Represents a segment of a path defined by a type and a set of points.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XGraphicsState">
            <summary>
            Represents the internal state of an XGraphics object.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XImageFormat">
            <summary>
            Specifies the format of the image.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XImageFormat.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XImageFormat.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XImageFormat.Png">
            <summary>
            Gets the Portable Network Graphics (PNG) image format. 
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XImageFormat.Gif">
            <summary>
            Gets the Graphics Interchange Format (GIF) image format.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XImageFormat.Jpeg">
            <summary>
            Gets the Joint Photographic Experts Group (JPEG) image format.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XImageFormat.Tiff">
            <summary>
            Gets the Tag Image File Format (TIFF) image format.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XImageFormat.Pdf">
            <summary>
            Gets the Portable Document Format (PDF) image format
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XImageFormat.Icon">
            <summary>
            Gets the Windows icon image format.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XLinearGradientBrush">
            <summary>
            Defines a Brush with a linear gradient.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XLinearGradientBrush.#ctor(Alt.Sketch.PointI,Alt.Sketch.PointI,Alt.GUI.PdfSharp.Drawing.XColor,Alt.GUI.PdfSharp.Drawing.XColor)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Drawing.XLinearGradientBrush"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XLinearGradientBrush.#ctor(Alt.Sketch.Point,Alt.Sketch.Point,Alt.GUI.PdfSharp.Drawing.XColor,Alt.GUI.PdfSharp.Drawing.XColor)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Drawing.XLinearGradientBrush"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XLinearGradientBrush.#ctor(Alt.GUI.PdfSharp.Drawing.XPoint,Alt.GUI.PdfSharp.Drawing.XPoint,Alt.GUI.PdfSharp.Drawing.XColor,Alt.GUI.PdfSharp.Drawing.XColor)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Drawing.XLinearGradientBrush"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XLinearGradientBrush.#ctor(Alt.Sketch.RectI,Alt.GUI.PdfSharp.Drawing.XColor,Alt.GUI.PdfSharp.Drawing.XColor,Alt.GUI.PdfSharp.Drawing.XLinearGradientMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Drawing.XLinearGradientBrush"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XLinearGradientBrush.#ctor(Alt.Sketch.Rect,Alt.GUI.PdfSharp.Drawing.XColor,Alt.GUI.PdfSharp.Drawing.XColor,Alt.GUI.PdfSharp.Drawing.XLinearGradientMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Drawing.XLinearGradientBrush"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XLinearGradientBrush.#ctor(Alt.GUI.PdfSharp.Drawing.XRect,Alt.GUI.PdfSharp.Drawing.XColor,Alt.GUI.PdfSharp.Drawing.XColor,Alt.GUI.PdfSharp.Drawing.XLinearGradientMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Drawing.XLinearGradientBrush"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XLinearGradientBrush.TranslateTransform(System.Double,System.Double)">
            <summary>
            Translates the brush with the specified offset.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XLinearGradientBrush.TranslateTransform(System.Double,System.Double,Alt.GUI.PdfSharp.Drawing.XMatrixOrder)">
            <summary>
            Translates the brush with the specified offset.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XLinearGradientBrush.ScaleTransform(System.Double,System.Double)">
            <summary>
            Scales the brush with the specified scalars.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XLinearGradientBrush.ScaleTransform(System.Double,System.Double,Alt.GUI.PdfSharp.Drawing.XMatrixOrder)">
            <summary>
            Scales the brush with the specified scalars.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XLinearGradientBrush.RotateTransform(System.Double)">
            <summary>
            Rotates the brush with the specified angle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XLinearGradientBrush.RotateTransform(System.Double,Alt.GUI.PdfSharp.Drawing.XMatrixOrder)">
            <summary>
            Rotates the brush with the specified angle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XLinearGradientBrush.MultiplyTransform(Alt.GUI.PdfSharp.Drawing.XMatrix)">
            <summary>
            Multiply the brush transformation matrix with the specified matrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XLinearGradientBrush.MultiplyTransform(Alt.GUI.PdfSharp.Drawing.XMatrix,Alt.GUI.PdfSharp.Drawing.XMatrixOrder)">
            <summary>
            Multiply the brush transformation matrix with the specified matrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XLinearGradientBrush.ResetTransform">
            <summary>
            Resets the brush transformation matrix with identity matrix.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XLinearGradientBrush.Transform">
            <summary>
            Gets or sets an XMatrix that defines a local geometric transform for this LinearGradientBrush.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XMatrix">
            <summary>
            Represents a 3-by-3 matrix that represents an affine 2D transformation.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the XMatrix struct.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.SetIdentity">
            <summary>
            Sets this matrix into an identity matrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.InitIdentity">
            <summary>
            Fixes a bug that XMatrixTypes.Identity is not handled correctly in some cases.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.GetElements">
            <summary>
            Gets an array of double values that represents the elements of this matrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.op_Multiply(Alt.GUI.PdfSharp.Drawing.XMatrix,Alt.GUI.PdfSharp.Drawing.XMatrix)">
            <summary>
            Multiplies two matrices.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.Multiply(Alt.GUI.PdfSharp.Drawing.XMatrix,Alt.GUI.PdfSharp.Drawing.XMatrix)">
            <summary>
            Multiplies two matrices.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.Append(Alt.GUI.PdfSharp.Drawing.XMatrix)">
            <summary>
            Appends the specified matrix to this matrix. 
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.Prepend(Alt.GUI.PdfSharp.Drawing.XMatrix)">
            <summary>
            Prepends the specified matrix to this matrix. 
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.Multiply(Alt.GUI.PdfSharp.Drawing.XMatrix)">
            <summary>
            Appends the specified matrix to this matrix. 
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.MultiplyPrepend(Alt.GUI.PdfSharp.Drawing.XMatrix)">
            <summary>
            Prepends the specified matrix to this matrix. 
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.Multiply(Alt.GUI.PdfSharp.Drawing.XMatrix,Alt.GUI.PdfSharp.Drawing.XMatrixOrder)">
            <summary>
            Multiplies this matrix with the specified matrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.Translate(System.Double,System.Double)">
            <summary>
            Appends a translation of the specified offsets to this matrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.TranslateAppend(System.Double,System.Double)">
            <summary>
            Appends a translation of the specified offsets to this matrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.TranslatePrepend(System.Double,System.Double)">
            <summary>
            Prepends a translation of the specified offsets to this matrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.Translate(System.Double,System.Double,Alt.GUI.PdfSharp.Drawing.XMatrixOrder)">
            <summary>
            Translates the matrix with the specified offsets.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.Scale(System.Double,System.Double)">
            <summary>
            Appends the specified scale vector to this matrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.ScaleAppend(System.Double,System.Double)">
            <summary>
            Appends the specified scale vector to this matrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.ScalePrepend(System.Double,System.Double)">
            <summary>
            Prepends the specified scale vector to this matrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.Scale(System.Double,System.Double,Alt.GUI.PdfSharp.Drawing.XMatrixOrder)">
            <summary>
            Scales the matrix with the specified scalars.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.Scale(System.Double)">
            <summary>
            Scales the matrix with the specified scalar.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.ScaleAppend(System.Double)">
            <summary>
            Appends the specified scale vector to this matrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.ScalePrepend(System.Double)">
            <summary>
            Prepends the specified scale vector to this matrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.Scale(System.Double,Alt.GUI.PdfSharp.Drawing.XMatrixOrder)">
            <summary>
            Scales the matrix with the specified scalar.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.ScaleAt(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Function is obsolete.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.ScaleAtAppend(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Apppends the specified scale about the specified point of this matrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.ScaleAtPrepend(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Prepends the specified scale about the specified point of this matrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.Rotate(System.Double)">
            <summary>
            Function is obsolete.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.RotateAppend(System.Double)">
            <summary>
            Appends a rotation of the specified angle to this matrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.RotatePrepend(System.Double)">
            <summary>
            Prepends a rotation of the specified angle to this matrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.Rotate(System.Double,Alt.GUI.PdfSharp.Drawing.XMatrixOrder)">
            <summary>
            Rotates the matrix with the specified angle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.RotateAt(System.Double,System.Double,System.Double)">
            <summary>
            Function is obsolete.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.RotateAtAppend(System.Double,System.Double,System.Double)">
            <summary>
            Appends a rotation of the specified angle at the specified point to this matrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.RotateAtPrepend(System.Double,System.Double,System.Double)">
            <summary>
            Prepends a rotation of the specified angle at the specified point to this matrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.RotateAt(System.Double,Alt.GUI.PdfSharp.Drawing.XPoint)">
            <summary>
            Rotates the matrix with the specified angle at the specified point.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.RotateAtAppend(System.Double,Alt.GUI.PdfSharp.Drawing.XPoint)">
            <summary>
            Appends a rotation of the specified angle at the specified point to this matrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.RotateAtPrepend(System.Double,Alt.GUI.PdfSharp.Drawing.XPoint)">
            <summary>
            Prepends a rotation of the specified angle at the specified point to this matrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.RotateAt(System.Double,Alt.GUI.PdfSharp.Drawing.XPoint,Alt.GUI.PdfSharp.Drawing.XMatrixOrder)">
            <summary>
            Rotates the matrix with the specified angle at the specified point.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.Shear(System.Double,System.Double)">
            <summary>
            Function is obsolete.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.ShearAppend(System.Double,System.Double)">
            <summary>
            Appends a skew of the specified degrees in the x and y dimensions to this matrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.ShearPrepend(System.Double,System.Double)">
            <summary>
            Prepends a skew of the specified degrees in the x and y dimensions to this matrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.Shear(System.Double,System.Double,Alt.GUI.PdfSharp.Drawing.XMatrixOrder)">
            <summary>
            Shears the matrix with the specified scalars.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.Skew(System.Double,System.Double)">
            <summary>
            Function is obsolete.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.SkewAppend(System.Double,System.Double)">
            <summary>
            Appends a skew of the specified degrees in the x and y dimensions to this matrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.SkewPrepend(System.Double,System.Double)">
            <summary>
            Prepends a skew of the specified degrees in the x and y dimensions to this matrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.Transform(Alt.GUI.PdfSharp.Drawing.XPoint)">
            <summary>
            Transforms the specified point by this matrix and returns the result.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.Transform(Alt.GUI.PdfSharp.Drawing.XPoint[])">
            <summary>
            Transforms the specified points by this matrix. 
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.TransformPoints(Alt.GUI.PdfSharp.Drawing.XPoint[])">
            <summary>
            Multiplies all points of the specified array with the this matrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.TransformPoints(Alt.Sketch.PointI[])">
            <summary>
            Multiplies all points of the specified array with the this matrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.Transform(Alt.GUI.PdfSharp.Drawing.XVector)">
            <summary>
            Transforms the specified vector by this Matrix and returns the result.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.Transform(Alt.GUI.PdfSharp.Drawing.XVector[])">
            <summary>
            Transforms the specified vectors by this matrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.TransformVectors(Alt.Sketch.Point[])">
            <summary>
            Multiplies all vectors of the specified array with the this matrix. The translation elements 
            of this matrix (third row) are ignored.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.Invert">
            <summary>
            Inverts the matrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.ToGdiMatrix">
            <summary>
            Converts this matrix to a Alt.Sketch.Matrix object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.ToGdipMatrix">
            <summary>
            Obsolete, will be deleted.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.op_Explicit(Alt.GUI.PdfSharp.Drawing.XMatrix)~Alt.Sketch.Matrix">
            <summary>
            Explicitly converts a XMatrix to a Matrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.op_Implicit(Alt.Sketch.Matrix)~Alt.GUI.PdfSharp.Drawing.XMatrix">
            <summary>
            Implicitly converts a Matrix to an XMatrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.op_Equality(Alt.GUI.PdfSharp.Drawing.XMatrix,Alt.GUI.PdfSharp.Drawing.XMatrix)">
            <summary>
            Determines whether the two matrices are equal.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.op_Inequality(Alt.GUI.PdfSharp.Drawing.XMatrix,Alt.GUI.PdfSharp.Drawing.XMatrix)">
            <summary>
            Determines whether the two matrices are not equal.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.Equals(Alt.GUI.PdfSharp.Drawing.XMatrix,Alt.GUI.PdfSharp.Drawing.XMatrix)">
            <summary>
            Determines whether the two matrices are equal.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.Equals(System.Object)">
            <summary>
            Determines whether this matrix is equal to the specified object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.Equals(Alt.GUI.PdfSharp.Drawing.XMatrix)">
            <summary>
            Determines whether this matrix is equal to the specified matrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.Parse(System.String)">
            <summary>
            Parses a matrix from a string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.ToString">
            <summary>
            Converts this XMatrix to a human readable string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.ToString(System.IFormatProvider)">
            <summary>
            Converts this XMatrix to a human readable string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.System#IFormattable#ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts this XMatrix to a human readable string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XMatrix.SetMatrix(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,Alt.GUI.PdfSharp.Drawing.XMatrix.XMatrixTypes)">
            <summary>
            Sets the matrix.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XMatrix.Identity">
            <summary>
            Gets a value that indicates whether this matrix is an identity matrix. 
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XMatrix.IsIdentity">
            <summary>
            Gets a value indicating whether this matrix instance is the identity matrix.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XMatrix.Elements">
            <summary>
            Gets an array of double values that represents the elements of this matrix.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XMatrix.Determinant">
            <summary>
            Gets the determinant of this matrix.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XMatrix.HasInverse">
            <summary>
            Gets a value that indicates whether this matrix is invertible.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XMatrix.M11">
            <summary>
            Gets or sets the value of the first row and first column of this matrix.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XMatrix.M12">
            <summary>
            Gets or sets the value of the first row and second column of this matrix.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XMatrix.M21">
            <summary>
            Gets or sets the value of the second row and first column of this matrix.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XMatrix.M22">
            <summary>
            Gets or sets the value of the second row and second column of this matrix.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XMatrix.OffsetX">
            <summary>
            Gets or sets the value of the third row and first column of this matrix.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XMatrix.OffsetY">
            <summary>
            Gets or sets the value of the third row and second  column of this matrix.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XMatrix.MatrixHelper">
            <summary>
            Internal matrix helper.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XPdfForm">
            <summary>
            Represents a so called 'PDF form external object', which is typically an imported page of an external
            PDF document. XPdfForm objects are used like images to draw an existing PDF page of an external
            document in the current document. XPdfForm objects can only be placed in PDF documents. If you try
            to draw them using a XGraphics based on an GDI+ context no action is taken if no placeholder image
            is specified. Otherwise the place holder is drawn.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPdfForm.#ctor(System.String)">
            <summary>
            Initializes a new instance of the XPdfForm class from the specified path to an external PDF document.
            Although PDFsharp internally caches XPdfForm objects it is recommended to reuse XPdfForm objects
            in your code and change the PageNumber property if more than one page is needed form the external
            document. Furthermore, because XPdfForm can occupy very much memory, it is recommended to
            dispose XPdfForm objects if not needed anymore.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPdfForm.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Drawing.XPdfForm"/> class from a stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPdfForm.FromFile(System.String)">
            <summary>
            Creates an XPdfForm from a file.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPdfForm.FromStream(System.IO.Stream)">
            <summary>
            Creates an XPdfForm from a stream.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPdfForm.Finish">
            <summary>
            Sets the form in the state FormState.Finished.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPdfForm.Dispose(System.Boolean)">
            <summary>
            Frees the memory occupied by the underlying imported PDF document, even if other XPdfForm objects
            refer to this document. A reuse of this object doesn't fail, because the underlying PDF document
            is re-imported if necessary.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPdfForm.ExtractPageNumber(System.String,System.Int32@)">
            <summary>
            Extracts the page number if the path has the form 'MyFile.pdf#123' and returns
            the actual path without the number sign and the following digits.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPdfForm.PlaceHolder">
            <summary>
            Gets or sets an image that is used for drawing if the current XGraphics object cannot handle
            PDF forms. A place holder is useful for showing a preview of a page on the display, because
            PDFsharp cannot render native PDF objects.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPdfForm.Page">
            <summary>
            Gets the underlying PdfPage (if one exists).
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPdfForm.PageCount">
            <summary>
            Gets the number of pages in the PDF form.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPdfForm.Width">
            <summary>
            Gets the width in point of the page identified by the property PageNumber.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPdfForm.Height">
            <summary>
            Gets the height in point of the page identified by the property PageNumber.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPdfForm.PointWidth">
            <summary>
            Gets the width in point of the page identified by the property PageNumber.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPdfForm.PointHeight">
            <summary>
            Gets the height in point of the page identified by the property PageNumber.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPdfForm.PixelWidth">
            <summary>
            Gets the width in point of the page identified by the property PageNumber.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPdfForm.PixelHeight">
            <summary>
            Gets the height in point of the page identified by the property PageNumber.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPdfForm.Size">
            <summary>
            Get the size of the page identified by the property PageNumber.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPdfForm.Transform">
            <summary>
            Gets or sets the transformation matrix.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPdfForm.PageNumber">
            <summary>
            Gets or sets the page number in the external PDF document this object refers to. The page number
            is one-based, i.e. it is in the range from 1 to PageCount. The default value is 1.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPdfForm.PageIndex">
            <summary>
            Gets or sets the page index in the external PDF document this object refers to. The page index
            is zero-based, i.e. it is in the range from 0 to PageCount - 1. The default value is 0.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPdfForm.ExternalDocument">
            <summary>
            Gets the underlying document from which pages are imported.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XPen">
            <summary>
            Defines an object used to draw lines and curves.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPen.#ctor(Alt.GUI.PdfSharp.Drawing.XColor)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Drawing.XPen"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPen.#ctor(Alt.GUI.PdfSharp.Drawing.XColor,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Drawing.XPen"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPen.#ctor(Alt.GUI.PdfSharp.Drawing.XPen)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Drawing.XPen"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPen.Clone">
            <summary>
            Clones this instance.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPen.op_Implicit(Alt.Sketch.Pen)~Alt.GUI.PdfSharp.Drawing.XPen">
            <summary>
            Implicit conversion from Pen to XPen
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPen.Color">
            <summary>
            Gets or sets the color.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPen.Width">
            <summary>
            Gets or sets the width.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPen.LineJoin">
            <summary>
            Gets or sets the line join.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPen.LineCap">
            <summary>
            Gets or sets the line cap.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPen.MiterLimit">
            <summary>
            Gets or sets the miter limit.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPen.DashStyle">
            <summary>
            Gets or sets the dash style.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPen.DashOffset">
            <summary>
            Gets or sets the dash offset.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPen.DashPattern">
            <summary>
            Gets or sets the dash pattern.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XPens">
            <summary>
            Pens for all the pre-defined colors.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.AliceBlue">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.AntiqueWhite">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Aqua">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Aquamarine">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Azure">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Beige">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Bisque">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Black">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.BlanchedAlmond">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Blue">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.BlueViolet">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Brown">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.BurlyWood">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.CadetBlue">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Chartreuse">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Chocolate">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Coral">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.CornflowerBlue">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Cornsilk">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Crimson">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Cyan">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.DarkBlue">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.DarkCyan">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.DarkGoldenrod">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.DarkGray">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.DarkGreen">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.DarkKhaki">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.DarkMagenta">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.DarkOliveGreen">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.DarkOrange">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.DarkOrchid">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.DarkRed">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.DarkSalmon">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.DarkSeaGreen">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.DarkSlateBlue">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.DarkSlateGray">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.DarkTurquoise">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.DarkViolet">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.DeepPink">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.DeepSkyBlue">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.DimGray">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.DodgerBlue">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Firebrick">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.FloralWhite">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.ForestGreen">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Fuchsia">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Gainsboro">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.GhostWhite">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Gold">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Goldenrod">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Gray">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Green">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.GreenYellow">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Honeydew">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.HotPink">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.IndianRed">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Indigo">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Ivory">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Khaki">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Lavender">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.LavenderBlush">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.LawnGreen">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.LemonChiffon">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.LightBlue">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.LightCoral">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.LightCyan">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.LightGoldenrodYellow">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.LightGray">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.LightGreen">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.LightPink">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.LightSalmon">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.LightSeaGreen">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.LightSkyBlue">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.LightSlateGray">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.LightSteelBlue">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.LightYellow">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Lime">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.LimeGreen">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Linen">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Magenta">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Maroon">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.MediumAquamarine">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.MediumBlue">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.MediumOrchid">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.MediumPurple">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.MediumSeaGreen">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.MediumSlateBlue">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.MediumSpringGreen">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.MediumTurquoise">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.MediumVioletRed">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.MidnightBlue">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.MintCream">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.MistyRose">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Moccasin">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.NavajoWhite">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Navy">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.OldLace">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Olive">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.OliveDrab">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Orange">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.OrangeRed">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Orchid">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.PaleGoldenrod">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.PaleGreen">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.PaleTurquoise">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.PaleVioletRed">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.PapayaWhip">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.PeachPuff">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Peru">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Pink">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Plum">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.PowderBlue">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Purple">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Red">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.RosyBrown">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.RoyalBlue">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.SaddleBrown">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Salmon">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.SandyBrown">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.SeaGreen">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.SeaShell">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Sienna">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Silver">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.SkyBlue">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.SlateBlue">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.SlateGray">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Snow">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.SpringGreen">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.SteelBlue">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Tan">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Teal">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Thistle">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Tomato">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Transparent">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Turquoise">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Violet">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Wheat">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.White">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.WhiteSmoke">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.Yellow">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPens.YellowGreen">
            <summary>Gets a pre-defined XPen object.</summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XPoint">
            <summary>
            Represents a pair of floating point x- and y-coordinates that defines a point
            in a two-dimensional plane.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPoint.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the XPoint class with the specified coordinates.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPoint.#ctor(Alt.Sketch.PointI)">
            <summary>
            Initializes a new instance of the XPoint class with the specified point.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPoint.#ctor(Alt.Sketch.Point)">
            <summary>
            Initializes a new instance of the XPoint class with the specified point.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPoint.op_Equality(Alt.GUI.PdfSharp.Drawing.XPoint,Alt.GUI.PdfSharp.Drawing.XPoint)">
            <summary>
            Determines whether two points are equal.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPoint.op_Inequality(Alt.GUI.PdfSharp.Drawing.XPoint,Alt.GUI.PdfSharp.Drawing.XPoint)">
            <summary>
            Determines whether two points are not equal.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPoint.Equals(Alt.GUI.PdfSharp.Drawing.XPoint,Alt.GUI.PdfSharp.Drawing.XPoint)">
            <summary>
            Indicates whether the specified points are equal.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPoint.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPoint.Equals(Alt.GUI.PdfSharp.Drawing.XPoint)">
            <summary>
            Indicates whether this instance and a specified point are equal.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPoint.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPoint.Parse(System.String)">
            <summary>
            Parses the point from a string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPoint.ParsePoints(System.String)">
            <summary>
            Parses an array of points from a string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPoint.ToPointF">
            <summary>
            Converts this XPoint to a PointI.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPoint.ToString">
            <summary>
            Converts this XPoint to a human readable string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPoint.ToString(System.IFormatProvider)">
            <summary>
            Converts this XPoint to a human readable string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPoint.System#IFormattable#ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts this XPoint to a human readable string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPoint.ConvertToString(System.String,System.IFormatProvider)">
            <summary>
            Implements ToString.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPoint.Offset(System.Double,System.Double)">
            <summary>
            Offsets the x and y value of this point.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPoint.op_Addition(Alt.GUI.PdfSharp.Drawing.XPoint,Alt.GUI.PdfSharp.Drawing.XVector)">
            <summary>
            Adds a point and a vector.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPoint.op_Addition(Alt.GUI.PdfSharp.Drawing.XPoint,Alt.GUI.PdfSharp.Drawing.XSize)">
            <summary>
            Adds a point and a size.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPoint.Add(Alt.GUI.PdfSharp.Drawing.XPoint,Alt.GUI.PdfSharp.Drawing.XVector)">
            <summary>
            Adds a point and a vector.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPoint.op_Subtraction(Alt.GUI.PdfSharp.Drawing.XPoint,Alt.GUI.PdfSharp.Drawing.XVector)">
            <summary>
            Subtracts a vector from a point.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPoint.Subtract(Alt.GUI.PdfSharp.Drawing.XPoint,Alt.GUI.PdfSharp.Drawing.XVector)">
            <summary>
            Subtracts a vector from a point.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPoint.op_Subtraction(Alt.GUI.PdfSharp.Drawing.XPoint,Alt.GUI.PdfSharp.Drawing.XPoint)">
            <summary>
            Subtracts a point from a point.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPoint.op_Subtraction(Alt.GUI.PdfSharp.Drawing.XPoint,Alt.GUI.PdfSharp.Drawing.XSize)">
            <summary>
            Subtracts a size from a point.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPoint.Subtract(Alt.GUI.PdfSharp.Drawing.XPoint,Alt.GUI.PdfSharp.Drawing.XPoint)">
            <summary>
            Subtracts a point from a point.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPoint.op_Multiply(Alt.GUI.PdfSharp.Drawing.XPoint,Alt.GUI.PdfSharp.Drawing.XMatrix)">
            <summary>
            Multiplies a point with a matrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPoint.Multiply(Alt.GUI.PdfSharp.Drawing.XPoint,Alt.GUI.PdfSharp.Drawing.XMatrix)">
            <summary>
            Multiplies a point with a matrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPoint.op_Multiply(Alt.GUI.PdfSharp.Drawing.XPoint,System.Double)">
            <summary>
            Multiplies a point with a scalar value.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPoint.op_Multiply(System.Double,Alt.GUI.PdfSharp.Drawing.XPoint)">
            <summary>
            Multiplies a point with a scalar value.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPoint.op_Division(Alt.GUI.PdfSharp.Drawing.XPoint,System.Double)">
            <summary>
            Divides a point by a scalar value.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPoint.op_Explicit(Alt.GUI.PdfSharp.Drawing.XPoint)~Alt.GUI.PdfSharp.Drawing.XSize">
            <summary>
            Performs an explicit conversion from XPoint to XSize.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPoint.op_Explicit(Alt.GUI.PdfSharp.Drawing.XPoint)~Alt.GUI.PdfSharp.Drawing.XVector">
            <summary>
            Performs an explicit conversion from XPoint to XVector.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XPoint.Empty">
            <summary>
            For convergence with WPF use new XPoint(), not XPoint.Empty
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPoint.X">
            <summary>
            Gets the x-coordinate of this XPoint.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPoint.Y">
            <summary>
            Gets the x-coordinate of this XPoint.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPoint.IsEmpty">
            <summary>
            Indicates whether this XPoint is empty.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XPrivateFontCollection">
            <summary>
             Makes fonts that are not installed on the system available within the current application domain.
             </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPrivateFontCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Drawing.XPrivateFontCollection"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPrivateFontCollection.Dispose">
            <summary>
            Disposes all fonts from the collection.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPrivateFontCollection.SetGlobalFontCollection(Alt.GUI.PdfSharp.Drawing.XPrivateFontCollection)">
            <summary>
            Sets a new global font collection and returns the previous one, or null if no previous one exists.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPrivateFontCollection.AddFont(System.Byte[],System.String)">
            <summary>
            Adds the font data to the font collections.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPrivateFontCollection.AddFont(System.Byte[],System.String,System.Boolean,System.Boolean)">
            <summary>
            HACK: to be removed.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPrivateFontCollection.AddFont(System.String)">
            <summary>
            Adds a font from the specified file to this collection.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XPrivateFontCollection.AddFont(System.Byte[])">
            <summary>
            Adds a font from memory to this collection.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XPrivateFontCollection.Global">
            <summary>
            Gets the global font collection.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XRect">
            <summary>
            Stores a set of four floating-point numbers that represent the location and size of a rectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XRect.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the XRect class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XRect.#ctor(Alt.GUI.PdfSharp.Drawing.XPoint,Alt.GUI.PdfSharp.Drawing.XPoint)">
            <summary>
            Initializes a new instance of the XRect class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XRect.#ctor(Alt.GUI.PdfSharp.Drawing.XPoint,Alt.GUI.PdfSharp.Drawing.XVector)">
            <summary>
            Initializes a new instance of the XRect class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XRect.#ctor(Alt.GUI.PdfSharp.Drawing.XPoint,Alt.GUI.PdfSharp.Drawing.XSize)">
            <summary>
            Initializes a new instance of the XRect class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XRect.#ctor(Alt.GUI.PdfSharp.Drawing.XSize)">
            <summary>
            Initializes a new instance of the XRect class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XRect.#ctor(Alt.Sketch.Point,Alt.Sketch.Size)">
            <summary>
            Initializes a new instance of the XRect class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XRect.#ctor(Alt.Sketch.Rect)">
            <summary>
            Initializes a new instance of the XRect class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XRect.FromLTRB(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a rectangle from for straight lines.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XRect.op_Equality(Alt.GUI.PdfSharp.Drawing.XRect,Alt.GUI.PdfSharp.Drawing.XRect)">
            <summary>
            Determines whether the two rectangles are equal.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XRect.op_Inequality(Alt.GUI.PdfSharp.Drawing.XRect,Alt.GUI.PdfSharp.Drawing.XRect)">
            <summary>
            Determines whether the two rectangles are not equal.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XRect.Equals(Alt.GUI.PdfSharp.Drawing.XRect,Alt.GUI.PdfSharp.Drawing.XRect)">
            <summary>
            Determines whether the two rectangles are equal.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XRect.Equals(System.Object)">
            <summary>
            Determines whether this instance and the specified object are equal.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XRect.Equals(Alt.GUI.PdfSharp.Drawing.XRect)">
            <summary>
            Determines whether this instance and the specified rect are equal.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XRect.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XRect.Parse(System.String)">
            <summary>
            Parses the rectangle from a string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XRect.ToString">
            <summary>
            Converts this XRect to a human readable string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XRect.ToString(System.IFormatProvider)">
            <summary>
            Converts this XRect to a human readable string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XRect.System#IFormattable#ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts this XRect to a human readable string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XRect.Contains(Alt.GUI.PdfSharp.Drawing.XPoint)">
            <summary>
            Indicates whether the rectangle contains the specified point. 
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XRect.Contains(System.Double,System.Double)">
            <summary>
            Indicates whether the rectangle contains the specified point. 
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XRect.Contains(Alt.GUI.PdfSharp.Drawing.XRect)">
            <summary>
            Indicates whether the rectangle contains the specified rectangle. 
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XRect.IntersectsWith(Alt.GUI.PdfSharp.Drawing.XRect)">
            <summary>
            Indicates whether the specified rectangle intersects with the current rectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XRect.Intersect(Alt.GUI.PdfSharp.Drawing.XRect)">
            <summary>
            Sets current rectangle to the intersection of the current rectangle and the specified rectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XRect.Intersect(Alt.GUI.PdfSharp.Drawing.XRect,Alt.GUI.PdfSharp.Drawing.XRect)">
            <summary>
            Returns the intersection of two rectangles.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XRect.Union(Alt.GUI.PdfSharp.Drawing.XRect)">
            <summary>
            Sets current rectangle to the union of the current rectangle and the specified rectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XRect.Union(Alt.GUI.PdfSharp.Drawing.XRect,Alt.GUI.PdfSharp.Drawing.XRect)">
            <summary>
            Returns the union of two rectangles.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XRect.Union(Alt.GUI.PdfSharp.Drawing.XPoint)">
            <summary>
            Sets current rectangle to the union of the current rectangle and the specified point.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XRect.Union(Alt.GUI.PdfSharp.Drawing.XRect,Alt.GUI.PdfSharp.Drawing.XPoint)">
            <summary>
            Returns the intersection of a rectangle and a point.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XRect.Offset(Alt.GUI.PdfSharp.Drawing.XVector)">
            <summary>
            Moves a rectangle by the specified amount.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XRect.Offset(System.Double,System.Double)">
            <summary>
            Moves a rectangle by the specified amount.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XRect.Offset(Alt.GUI.PdfSharp.Drawing.XRect,Alt.GUI.PdfSharp.Drawing.XVector)">
            <summary>
            Returns a rectangle that is offset from the specified rectangle by using the specified vector. 
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XRect.Offset(Alt.GUI.PdfSharp.Drawing.XRect,System.Double,System.Double)">
            <summary>
            Returns a rectangle that is offset from the specified rectangle by using specified horizontal and vertical amounts. 
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XRect.op_Addition(Alt.GUI.PdfSharp.Drawing.XRect,Alt.GUI.PdfSharp.Drawing.XPoint)">
            <summary>
            Translates the rectangle by adding the specified point.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XRect.op_Subtraction(Alt.GUI.PdfSharp.Drawing.XRect,Alt.GUI.PdfSharp.Drawing.XPoint)">
            <summary>
            Translates the rectangle by subtracting the specified point.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XRect.Inflate(Alt.GUI.PdfSharp.Drawing.XSize)">
            <summary>
            Expands the rectangle by using the specified Size, in all directions.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XRect.Inflate(System.Double,System.Double)">
            <summary>
            Expands or shrinks the rectangle by using the specified width and height amounts, in all directions.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XRect.Inflate(Alt.GUI.PdfSharp.Drawing.XRect,Alt.GUI.PdfSharp.Drawing.XSize)">
            <summary>
            Returns the rectangle that results from expanding the specified rectangle by the specified Size, in all directions.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XRect.Inflate(Alt.GUI.PdfSharp.Drawing.XRect,System.Double,System.Double)">
            <summary>
            Creates a rectangle that results from expanding or shrinking the specified rectangle by the specified width and height amounts, in all directions.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XRect.Transform(Alt.GUI.PdfSharp.Drawing.XRect,Alt.GUI.PdfSharp.Drawing.XMatrix)">
            <summary>
            Returns the rectangle that results from applying the specified matrix to the specified rectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XRect.Transform(Alt.GUI.PdfSharp.Drawing.XMatrix)">
            <summary>
            Transforms the rectangle by applying the specified matrix.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XRect.Scale(System.Double,System.Double)">
            <summary>
            Multiplies the size of the current rectangle by the specified x and y values.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XRect.ToRectangleF">
            <summary>
            Converts this instance to a Alt.Sketch.Alt.Sketch.Rect.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XRect.op_Implicit(Alt.Sketch.RectI)~Alt.GUI.PdfSharp.Drawing.XRect">
            <summary>
            Performs an implicit  conversion from a Alt.Sketch.RectI to an XRect.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XRect.op_Implicit(Alt.Sketch.Rect)~Alt.GUI.PdfSharp.Drawing.XRect">
            <summary>
            Performs an implicit  conversion from a Alt.Sketch.Alt.Sketch.Rect to an XRect.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XRect.Empty">
            <summary>
            Gets the empty rectangle.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XRect.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XRect.Location">
            <summary>
            Gets or sets the location of the rectangle.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XRect.Size">
            <summary>
            Gets or sets the size of the rectangle.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XRect.X">
            <summary>
            Gets or sets the X value of the rectangle.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XRect.Y">
            <summary>
            Gets or sets the Y value of the rectangle.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XRect.Width">
            <summary>
            Gets or sets the width of the rectangle.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XRect.Height">
            <summary>
            Gets or sets the height of the rectangle.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XRect.Left">
            <summary>
            Gets the x-axis value of the left side of the rectangle. 
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XRect.Top">
            <summary>
            Gets the y-axis value of the top side of the rectangle. 
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XRect.Right">
            <summary>
            Gets the x-axis value of the right side of the rectangle. 
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XRect.Bottom">
            <summary>
            Gets the y-axis value of the bottom side of the rectangle. 
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XRect.TopLeft">
            <summary>
            Gets the position of the top-left corner of the rectangle. 
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XRect.TopRight">
            <summary>
            Gets the position of the top-right corner of the rectangle. 
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XRect.BottomLeft">
            <summary>
            Gets the position of the bottom-left corner of the rectangle. 
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XRect.BottomRight">
            <summary>
            Gets the position of the bottom-right corner of the rectangle. 
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XRect.Center">
            <summary>
            Gets the center of the rectangle.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XSize">
            <summary>
            Represents a pair of floating-point numbers, typically the width and height of a
            graphical object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XSize.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the XPoint class with the specified values.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XSize.#ctor(Alt.GUI.PdfSharp.Drawing.XPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Drawing.XSize"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XSize.op_Equality(Alt.GUI.PdfSharp.Drawing.XSize,Alt.GUI.PdfSharp.Drawing.XSize)">
            <summary>
            Determines whether two size objects are equal.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XSize.op_Inequality(Alt.GUI.PdfSharp.Drawing.XSize,Alt.GUI.PdfSharp.Drawing.XSize)">
            <summary>
            Determines whether two size objects are not equal.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XSize.Equals(Alt.GUI.PdfSharp.Drawing.XSize,Alt.GUI.PdfSharp.Drawing.XSize)">
            <summary>
            Indicates whether this tow instance are equal.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XSize.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XSize.Equals(Alt.GUI.PdfSharp.Drawing.XSize)">
            <summary>
            Indicates whether this instance and a specified size are equal.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XSize.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XSize.Parse(System.String)">
            <summary>
            Parses the size from a string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XSize.ToPointF">
            <summary>
            Converts this XSize to a Alt.Sketch.Point.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XSize.ToXPoint">
            <summary>
            Converts this XSize to an XPoint.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XSize.ToXVector">
            <summary>
            Converts this XSize to an XVector.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XSize.ToSizeF">
            <summary>
            Converts this XSize to a Alt.Sketch.Size.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XSize.FromSize(Alt.Sketch.SizeI)">
            <summary>
            Creates an XSize from a SizeI.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XSize.op_Implicit(Alt.Sketch.SizeI)~Alt.GUI.PdfSharp.Drawing.XSize">
            <summary>
            Implicit conversion from XSize to SizeI. The conversion must be implicit because the
            WindowsForms designer uses it.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XSize.FromSizeF(Alt.Sketch.Size)">
            <summary>
            Creates an XSize from a SizeI.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XSize.ToString">
            <summary>
            Converts this XSize to a human readable string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XSize.ToString(System.IFormatProvider)">
            <summary>
            Converts this XSize to a human readable string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XSize.System#IFormattable#ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts this XSize to a human readable string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XSize.op_Explicit(Alt.GUI.PdfSharp.Drawing.XSize)~Alt.GUI.PdfSharp.Drawing.XVector">
            <summary>
            Performs an explicit conversion from XSize to XVector.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XSize.op_Explicit(Alt.GUI.PdfSharp.Drawing.XSize)~Alt.GUI.PdfSharp.Drawing.XPoint">
            <summary>
            Performs an explicit conversion from XSize to XPoint.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XSize.Empty">
            <summary>
            Returns an empty size, i.e. a size with a width or height less than 0.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XSize.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XSize.Width">
            <summary>
            Gets or sets the width.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XSize.Height">
            <summary>
            Gets or sets the height.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XSolidBrush">
            <summary>
            Defines a single color object used to fill shapes and draw text.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XSolidBrush.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Drawing.XSolidBrush"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XSolidBrush.#ctor(Alt.GUI.PdfSharp.Drawing.XColor)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Drawing.XSolidBrush"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XSolidBrush.#ctor(Alt.GUI.PdfSharp.Drawing.XSolidBrush)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Drawing.XSolidBrush"/> class.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XSolidBrush.Color">
            <summary>
            Gets or sets the color of this brush.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XStringFormatFlags">
            <summary>
            Not used in this implementation.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XStringFormatFlags.MeasureTrailingSpaces">
            <summary>
            The default value.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XStringFormat">
            <summary>
            Represents the text layout information.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XStringFormat.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Drawing.XStringFormat"/> class.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XStringFormat.Alignment">
            <summary>
            Gets or sets horizontal text alignment information.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XStringFormat.LineAlignment">
            <summary>
            Gets or sets the line alignment.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XStringFormat.Default">
            <summary>
            Gets a new XStringFormat object that aligns the text left on the base line.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XStringFormat.TopLeft">
            <summary>
            Gets a new XStringFormat object that aligns the text top left of the layout rectangle.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XStringFormat.Center">
            <summary>
            Gets a new XStringFormat object that centers the text in the middle of the layout rectangle.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XStringFormat.TopCenter">
            <summary>
            Gets a new XStringFormat object that centers the text at the top of the layout rectangle.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XStringFormat.BottomCenter">
            <summary>
            Gets a new XStringFormat object that centers the text at the bottom of the layout rectangle.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XStringFormat.FormatFlags">
            <summary>
            Gets or sets flags with format information.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XStringFormats">
            <summary>
            Represents predefined text layouts.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XStringFormats.Default">
            <summary>
            Gets a new XStringFormat object that aligns the text left on the base line.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XStringFormats.TopLeft">
            <summary>
            Gets a new XStringFormat object that aligns the text top left of the layout rectangle.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XStringFormats.Center">
            <summary>
            Gets a new XStringFormat object that centers the text in the middle of the layout rectangle.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XStringFormats.TopCenter">
            <summary>
            Gets a new XStringFormat object that centers the text at the top of the layout rectangle.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XStringFormats.BottomCenter">
            <summary>
            Gets a new XStringFormat object that centers the text at the bottom of the layout rectangle.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XTypefaceHack">
            <summary>
            Temporary hack to implement PrivateFontCollection.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XTypeface">
            <summary>
            NYI
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XUnit">
            <summary>
            Represents a value and its unit of measure. The structure converts implicitly from and to
            double with a value measured in point.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XUnit.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the XUnit class with type set to point.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XUnit.#ctor(System.Double,Alt.GUI.PdfSharp.Drawing.XGraphicsUnit)">
            <summary>
            Initializes a new instance of the XUnit class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XUnit.ToString(System.IFormatProvider)">
            <summary>
            Returns the object as string using the format information.
            The unit of measure is appended to the end of the string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XUnit.System#IFormattable#ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns the object as string using the specified format and format information.
            The unit of measure is appended to the end of the string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XUnit.ToString">
            <summary>
            Returns the object as string. The unit of measure is appended to the end of the string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XUnit.GetSuffix">
            <summary>
            Returns the unit of measure of the object as a string like 'pt', 'cm', or 'in'.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XUnit.FromPoint(System.Double)">
            <summary>
            Returns an XUnit object. Sets type to point.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XUnit.FromInch(System.Double)">
            <summary>
            Returns an XUnit object. Sets type to inch.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XUnit.FromMillimeter(System.Double)">
            <summary>
            Returns an XUnit object. Sets type to millimeters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XUnit.FromCentimeter(System.Double)">
            <summary>
            Returns an XUnit object. Sets type to centimeters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XUnit.FromPresentation(System.Double)">
            <summary>
            Returns an XUnit object. Sets type to Presentation.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XUnit.op_Implicit(System.String)~Alt.GUI.PdfSharp.Drawing.XUnit">
            <summary>
            Converts a string to an XUnit object.
            If the string contains a suffix like 'cm' or 'in' the object will be converted
            to the appropriate type, otherwise point is assumed.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XUnit.op_Implicit(System.Int32)~Alt.GUI.PdfSharp.Drawing.XUnit">
            <summary>
            Converts an int to an XUnit object with type set to point.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XUnit.op_Implicit(System.Double)~Alt.GUI.PdfSharp.Drawing.XUnit">
            <summary>
            Converts a double to an XUnit object with type set to point.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XUnit.op_Implicit(Alt.GUI.PdfSharp.Drawing.XUnit)~System.Double">
            <summary>
            Returns a double value as point.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XUnit.op_Equality(Alt.GUI.PdfSharp.Drawing.XUnit,Alt.GUI.PdfSharp.Drawing.XUnit)">
            <summary>
            Memberwise comparison. To compare by value, 
            use code like Math.Abs(a.Pt - b.Pt) &lt; 1e5.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XUnit.op_Inequality(Alt.GUI.PdfSharp.Drawing.XUnit,Alt.GUI.PdfSharp.Drawing.XUnit)">
            <summary>
            Memberwise comparison. To compare by value, 
            use code like Math.Abs(a.Pt - b.Pt) &lt; 1e5.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XUnit.Equals(System.Object)">
            <summary>
            Calls base class Equals.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XUnit.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XUnit.Parse(System.String)">
            <summary>
            This member is intended to be used by XmlDomainObjectReader only.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Drawing.XUnit.ConvertType(Alt.GUI.PdfSharp.Drawing.XGraphicsUnit)">
            <summary>
            Converts an existing object from one unit into another unit type.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Drawing.XUnit.Zero">
            <summary>
            Represents a unit with all values zero.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XUnit.Value">
            <summary>
            Gets the raw value of the object without any conversion.
            To determine the XGraphicsUnit use property <code>Type</code>.
            To get the value in point use the implicit conversion to double.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XUnit.Type">
            <summary>
            Gets the unit of measure.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XUnit.Point">
            <summary>
            Gets or sets the value in point.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XUnit.Inch">
            <summary>
            Gets or sets the value in inch.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XUnit.Millimeter">
            <summary>
            Gets or sets the value in millimeter.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XUnit.Centimeter">
            <summary>
            Gets or sets the value in centimeter.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Drawing.XUnit.Presentation">
            <summary>
            Gets or sets the value in presentation units (1/96 inch).
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Drawing.XVector">
            <summary>
            Represents a two-dimensional vector specified by x- and y-coordinates.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Fonts.OpenType.FontTechnology">
            <summary>
            Identifies the technology of an OpenType font file.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.OpenType.FontTechnology.PostscriptOutlines">
            <summary>
            Font is Adobe Postscript font in CFF.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.OpenType.FontTechnology.TrueTypeOutlines">
            <summary>
            Font is a TrueType font.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.OpenType.FontTechnology.TrueTypeCollection">
            <summary>
            Font is a TrueType font collection.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Fonts.OpenType.TableTagNames">
            <summary>
            TrueType font table names.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.OpenType.TableTagNames.CMap">
            <summary>
            Character to glyph mapping.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.OpenType.TableTagNames.Head">
            <summary>
            Font header .
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.OpenType.TableTagNames.HHea">
            <summary>
            Horizontal header.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.OpenType.TableTagNames.HMtx">
            <summary>
            Horizontal metrics.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.OpenType.TableTagNames.MaxP">
            <summary>
            Maximum profile.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.OpenType.TableTagNames.Name">
            <summary>
            Naming table.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.OpenType.TableTagNames.OS2">
            <summary>
            OS/2 and Windows specific metrics.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.OpenType.TableTagNames.Post">
            <summary>
            PostScript information.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.OpenType.TableTagNames.Cvt">
            <summary>
            Control Value Table.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.OpenType.TableTagNames.Fpgm">
            <summary>
            Font program.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.OpenType.TableTagNames.Glyf">
            <summary>
            Glyph data.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.OpenType.TableTagNames.Loca">
            <summary>
            Index to location.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.OpenType.TableTagNames.Prep">
            <summary>
            CVT Program.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.OpenType.TableTagNames.Cff">
            <summary>
            PostScript font program (compact font format).
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.OpenType.TableTagNames.VOrg">
            <summary>
            Vertical Origin.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.OpenType.TableTagNames.EBDT">
            <summary>
            Embedded bitmap data.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.OpenType.TableTagNames.EBLC">
            <summary>
            Embedded bitmap location data.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.OpenType.TableTagNames.EBSC">
            <summary>
            Embedded bitmap scaling data.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.OpenType.TableTagNames.BASE">
            <summary>
            Baseline data.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.OpenType.TableTagNames.GDEF">
            <summary>
            Glyph definition data.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.OpenType.TableTagNames.GPOS">
            <summary>
            Glyph positioning data.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.OpenType.TableTagNames.GSUB">
            <summary>
            Glyph substitution data.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.OpenType.TableTagNames.JSTF">
            <summary>
            Justification data.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.OpenType.TableTagNames.DSIG">
            <summary>
            Digital signature.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.OpenType.TableTagNames.Gasp">
            <summary>
            Grid-fitting/Scan-conversion.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.OpenType.TableTagNames.Hdmx">
            <summary>
            Horizontal device metrics.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.OpenType.TableTagNames.Kern">
            <summary>
            Kerning.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.OpenType.TableTagNames.LTSH">
            <summary>
            Linear threshold data.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.OpenType.TableTagNames.PCLT">
            <summary>
            PCL 5 data.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.OpenType.TableTagNames.VDMX">
            <summary>
            Vertical device metrics.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.OpenType.TableTagNames.VHea">
            <summary>
            Vertical Header.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.OpenType.TableTagNames.VMtx">
            <summary>
            Vertical Metrics.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Fonts.OpenType.ExternalHelper">
            <summary>
            PDFsharp internal stuff.
            For more information see Andrew Schulman "Undocumented PDFsharp"  :-))
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.ExternalHelper.F74167FFE4044F53B28A4AF049E9EF25(Alt.GUI.PdfSharp.Drawing.XFont,Alt.GUI.PdfSharp.Drawing.XPdfFontOptions,System.Boolean)">
            <summary>
            This is an external helper function.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Fonts.OpenType.FontData">
            <summary>
            Represents an Open Type Font font in memory.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.FontData.#ctor(Alt.GUI.PdfSharp.Fonts.OpenType.FontData)">
            <summary>
            Shallow copy for font subset.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.FontData.#ctor(Alt.GUI.PdfSharp.Drawing.XFont,Alt.GUI.PdfSharp.Drawing.XPdfFontOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Fonts.OpenType.FontData"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.FontData.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Fonts.OpenType.FontData"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.FontData.CreateGdiFontImage(Alt.GUI.PdfSharp.Drawing.XFont,Alt.GUI.PdfSharp.Drawing.XPdfFontOptions)">
            <summary>
            Create the font image using GDI+ functionality.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.OpenType.FontData.tableDictionary">
            <summary>
            The dictionary of all font tables.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.FontData.AddTable(Alt.GUI.PdfSharp.Fonts.OpenType.OpenTypeFontTable)">
            <summary>
            Adds the specified table to this font image.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.FontData.Read">
            <summary>
            Reads all required tables from the font data.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.FontData.CreateFontSubSet(System.Collections.Generic.Dictionary{System.Int32,System.Object},System.Boolean)">
            <summary>
            Creates a new font image that is a subset of this font image containing only the specified glyphs.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.FontData.Compile">
            <summary>
            Compiles the font to its binary representation.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.FontData.ReadByte">
            <summary>
            Reads a System.Byte.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.FontData.ReadShort">
            <summary>
            Reads a System.Int16.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.FontData.ReadUShort">
            <summary>
            Reads a System.UInt16.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.FontData.ReadLong">
            <summary>
            Reads a System.Int32.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.FontData.ReadULong">
            <summary>
            Reads a System.UInt32.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.FontData.ReadFixed">
            <summary>
            Reads a System.Int32.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.FontData.ReadFWord">
            <summary>
            Reads a System.Int16.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.FontData.ReadUFWord">
            <summary>
            Reads a System.UInt16.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.FontData.ReadLongDate">
            <summary>
            Reads a System.Int64.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.FontData.ReadString(System.Int32)">
            <summary>
            Reads a System.String with the specified size.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.FontData.ReadBytes(System.Int32)">
            <summary>
            Reads a System.Byte[] with the specified size.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.FontData.Read(System.Byte[])">
            <summary>
            Reads the specified buffer.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.FontData.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the specified buffer.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.FontData.ReadTag">
            <summary>
            Reads a System.Char[4] as System.String.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Fonts.OpenType.FontData.Data">
            <summary>
            Gets the bytes that represents the font data.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Fonts.OpenType.FontData.OffsetTable">
            <summary>
            Represents the font offset table.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.OpenType.FontData.OffsetTable.Version">
            <summary>
            0x00010000 for version 1.0.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.OpenType.FontData.OffsetTable.TableCount">
            <summary>
            Number of tables.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.OpenType.FontData.OffsetTable.SearchRange">
            <summary>
            (Maximum power of 2 ≤ numTables) x 16.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.OpenType.FontData.OffsetTable.EntrySelector">
            <summary>
            Log2(maximum power of 2 ≤ numTables).
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.OpenType.FontData.OffsetTable.RangeShift">
            <summary>
            NumTables x 16-searchRange.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.FontData.OffsetTable.Write(Alt.GUI.PdfSharp.Fonts.OpenType.OpenTypeFontWriter)">
            <summary>
            Writes the offset table.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Fonts.OpenType.FontDataStock">
            <summary>
            Global table of TrueType font faces.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.FontDataStock.CalcChecksum(System.Byte[])">
            <summary>
            Calculates an Adler32 checksum.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Fonts.OpenType.FontDataStock.Global">
            <summary>
            Gets the singleton.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Fonts.OpenType.GenericFontTable">
            <summary>
            Generic font table. Not yet used
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Fonts.OpenType.OpenTypeFontTable">
            <summary>
            Base class for all OpenType fonts.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.OpenTypeFontTable.Clone">
            <summary>
            Creates a deep copy of the current instance.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.OpenTypeFontTable.PrepareForCompilation">
            <summary>
            When overridden in a derived class, prepares the font table to be compiled into its binary representation.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.OpenTypeFontTable.Write(Alt.GUI.PdfSharp.Fonts.OpenType.OpenTypeFontWriter)">
            <summary>
            When overridden in a derived class, converts the font into its binary representation.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.OpenTypeFontTable.CalcChecksum(System.Byte[])">
            <summary>
            Calculates the checksum of a table represented by its bytes.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Fonts.OpenType.OpenTypeFontTable.FontData">
            <summary>
            Gets the font image the table belongs to.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Fonts.OpenType.GlyphDataTable">
            <summary>
            This table contains information that describes the glyphs in the font in the TrueType outline format.
            Information regarding the rasterizer (scaler) refers to the TrueType rasterizer. 
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.GlyphDataTable.Read">
            <summary>
            Converts the bytes in a handy representation
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.GlyphDataTable.GetGlyphData(System.Int32)">
            <summary>
            Gets the data of the specified glyph.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.GlyphDataTable.GetGlyphSize(System.Int32)">
            <summary>
            Gets the size of the byte array that defines the glyph.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.GlyphDataTable.GetOffset(System.Int32)">
            <summary>
            Gets the offset of the specified glyph relative to the first byte of the font image.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.GlyphDataTable.CompleteGlyphClosure(System.Collections.Generic.Dictionary{System.Int32,System.Object})">
            <summary>
            Adds for all composite glyphs the glyphs the composite one is made of.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.GlyphDataTable.AddCompositeGlyphs(System.Collections.Generic.Dictionary{System.Int32,System.Object},System.Int32)">
            <summary>
            If the specified glyph is a composite glyph add the glyphs it is made of to the glyph table.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.GlyphDataTable.PrepareForCompilation">
            <summary>
            Prepares the font table to be compiled into its binary representation.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.GlyphDataTable.Write(Alt.GUI.PdfSharp.Fonts.OpenType.OpenTypeFontWriter)">
            <summary>
            Converts the font into its binary representation.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Fonts.OpenType.IndexToLocationTable">
            <summary>
            The indexToLoc table stores the offsets to the locations of the glyphs in the font,
            relative to the beginning of the glyphData table. In order to compute the length of
            the last glyph element, there is an extra entry after the last valid index. 
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.IndexToLocationTable.Read">
            <summary>
            Converts the bytes in a handy representation
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.IndexToLocationTable.PrepareForCompilation">
            <summary>
            Prepares the font table to be compiled into its binary representation.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.IndexToLocationTable.Write(Alt.GUI.PdfSharp.Fonts.OpenType.OpenTypeFontWriter)">
            <summary>
            Converts the font into its binary representation.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Fonts.OpenType.IRefFontTable">
            <summary>
            Represents an indirect reference to an existing font table in a font image.
            Used to create binary copies of an existing font table that is not modified.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.IRefFontTable.PrepareForCompilation">
            <summary>
            Prepares the font table to be compiled into its binary representation.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.IRefFontTable.Write(Alt.GUI.PdfSharp.Fonts.OpenType.OpenTypeFontWriter)">
            <summary>
            Converts the font into its binary representation.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Fonts.OpenType.OpenTypeDescriptor">
            <summary>
            The OpenType font descriptor.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Fonts.FontDescriptor">
            <summary>
            Base class for all font descriptors.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Fonts.FontDescriptor.FontFile">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Fonts.FontDescriptor.FontType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Fonts.FontDescriptor.FontName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Fonts.FontDescriptor.FullName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Fonts.FontDescriptor.FamilyName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Fonts.FontDescriptor.Weight">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Fonts.FontDescriptor.IsBoldFace">
            <summary>
            Gets a value indicating whether this instance belongs to a bold font.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Fonts.FontDescriptor.ItalicAngle">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Fonts.FontDescriptor.IsItalicFace">
            <summary>
            Gets a value indicating whether this instance belongs to an italic font.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Fonts.FontDescriptor.XMin">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Fonts.FontDescriptor.YMin">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Fonts.FontDescriptor.XMax">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Fonts.FontDescriptor.YMax">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Fonts.FontDescriptor.IsFixedPitch">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Fonts.FontDescriptor.UnderlinePosition">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Fonts.FontDescriptor.UnderlineThickness">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Fonts.FontDescriptor.StrikeoutPosition">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Fonts.FontDescriptor.StrikeoutSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Fonts.FontDescriptor.Version">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Fonts.FontDescriptor.EncodingScheme">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Fonts.FontDescriptor.UnitsPerEm">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Fonts.FontDescriptor.CapHeight">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Fonts.FontDescriptor.XHeight">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Fonts.FontDescriptor.Ascender">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Fonts.FontDescriptor.Descender">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Fonts.FontDescriptor.Leading">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Fonts.FontDescriptor.Flags">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Fonts.FontDescriptor.StemV">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Fonts.FontDescriptor.FontMetrics">
            <summary>
            Under Construction
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.OpenTypeDescriptor.CharCodeToGlyphIndex(System.Char)">
            <summary>
            Maps a unicode to the index of the corresponding glyph.
            See OpenType spec "cmap - Character To Glyph Index Mapping Table / Format 4: Segment mapping to delta values"
            for details about this a little bit strange looking algorithm.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.OpenTypeDescriptor.GlyphIndexToPdfWidth(System.Int32)">
            <summary>
            Converts the width of a glyph identified by its index to PDF design units.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.OpenTypeDescriptor.GlyphIndexToWidth(System.Int32)">
            <summary>
              //Converts the width of a glyph identified by its index to PDF design units.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Fonts.OpenType.OpenTypeDescriptor.IsBoldFace">
            <summary>
            Gets a value indicating whether this instance belongs to a bold font.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Fonts.OpenType.OpenTypeDescriptor.IsItalicFace">
            <summary>
            Gets a value indicating whether this instance belongs to an italic font.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Fonts.OpenType.OpenTypeFontWriter">
            <summary>
            Represents a writer for True Type font files. 
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Fonts.FontWriter">
            <summary>
            Represents a writer for generation of font file streams. 
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.FontWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Fonts.FontWriter"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.FontWriter.Close(System.Boolean)">
            <summary>
            Closes the writer and, if specified, the underlying stream.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.FontWriter.Close">
            <summary>
            Closes the writer and the underlying stream.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.FontWriter.WriteByte(System.Byte)">
            <summary>
            Writes the specified value to the font stream.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.FontWriter.WriteByte(System.Int32)">
            <summary>
            Writes the specified value to the font stream.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.FontWriter.WriteShort(System.Int16)">
            <summary>
            Writes the specified value to the font stream using big-endian.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.FontWriter.WriteShort(System.Int32)">
            <summary>
            Writes the specified value to the font stream using big-endian.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.FontWriter.WriteUShort(System.UInt16)">
            <summary>
            Writes the specified value to the font stream using big-endian.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.FontWriter.WriteUShort(System.Int32)">
            <summary>
            Writes the specified value to the font stream using big-endian.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.FontWriter.WriteInt(System.Int32)">
            <summary>
            Writes the specified value to the font stream using big-endian.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.FontWriter.WriteUInt(System.UInt32)">
            <summary>
            Writes the specified value to the font stream using big-endian.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Fonts.FontWriter.Position">
            <summary>
            Gets or sets the position within the stream.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Fonts.FontWriter.Stream">
            <summary>
            Gets the underlying stream.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.OpenTypeFontWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Fonts.OpenType.OpenTypeFontWriter"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.OpenTypeFontWriter.WriteTag(System.String)">
            <summary>
            Writes a table name.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Fonts.OpenType.WinEncodingId">
            <summary>
            Only Symbol and Unicode is used by PDFsharp.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Fonts.OpenType.CMap4">
            <summary>
            CMap format 4: Segment mapping to delta values.
            The Windows standard format.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Fonts.OpenType.CMapTable">
            <summary>
            This table defines the mapping of character codes to the glyph index values used in the font.
            It may contain more than one subtable, in order to support more than one character encoding scheme.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.OpenType.CMapTable.symbol">
            <summary>
            Is true for symbol font encoding.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.CMapTable.#ctor(Alt.GUI.PdfSharp.Fonts.OpenType.FontData)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Fonts.OpenType.CMapTable"/> class.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Fonts.OpenType.FontHeaderTable">
            <summary>
            This table gives global information about the font. The bounding box values should be computed using 
            only glyphs that have contours. Glyphs with no contours should be ignored for the purposes of these calculations.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Fonts.OpenType.HorizontalHeaderTable">
            <summary>
            This table contains information for horizontal layout. The values in the minRightSidebearing, 
            minLeftSideBearing and xMaxExtent should be computed using only glyphs that have contours.
            Glyphs with no contours should be ignored for the purposes of these calculations.
            All reserved areas must be set to 0. 
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Fonts.OpenType.HorizontalMetricsTable">
            <summary>
            The type longHorMetric is defined as an array where each element has two parts:
            the advance width, which is of type USHORT, and the left side bearing, which is of type SHORT.
            These fields are in font design units.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Fonts.OpenType.VerticalMetricsTable">
            <summary>
            The vertical metrics table allows you to specify the vertical spacing for each glyph in a
            vertical font. This table consists of either one or two arrays that contain metric
            information (the advance heights and top sidebearings) for the vertical layout of each
            of the glyphs in the font.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Fonts.OpenType.MaximumProfileTable">
            <summary>
            This table establishes the memory requirements for this font.
            Fonts with CFF data must use Version 0.5 of this table, specifying only the numGlyphs field.
            Fonts with TrueType outlines must use Version 1.0 of this table, where all data is required.
            Both formats of OpenType require a 'maxp' table because a number of applications call the 
            Windows GetFontData() API on the 'maxp' table to determine the number of glyphs in the font.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Fonts.OpenType.NameTable">
             <summary>
             The naming table allows multilingual strings to be associated with the OpenTypeTM font file.
             These strings can represent copyright notices, font names, family names, style names, and so on.
             To keep this table short, the font manufacturer may wish to make a limited set of entries in some
             small set of languages; later, the font can be "localized" and the strings translated or added.
             Other parts of the OpenType font file that require these strings can then refer to them simply by
             their index number. Clients that need a particular string can look it up by its platform ID, character
             encoding ID, language ID and name ID. Note that some platforms may require single byte character
             strings, while others may require double byte strings. 
            
             For historical reasons, some applications which install fonts perform version control using Macintosh
             platform (platform ID 1) strings from the 'name' table. Because of this, we strongly recommend that
             the 'name' table of all fonts include Macintosh platform strings and that the syntax of the version
             number (name id 5) follows the guidelines given in this document.
             </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Fonts.OpenType.OS2Table">
            <summary>
            The OS/2 table consists of a set of metrics that are required in OpenType fonts. 
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Fonts.OpenType.PostScriptTable">
            <summary>
            This table contains additional information needed to use TrueType or OpenTypeTM fonts
            on PostScript printers. 
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Fonts.OpenType.ControlValueTable">
            <summary>
            This table contains a list of values that can be referenced by instructions.
            They can be used, among other things, to control characteristics for different glyphs.
            The length of the table must be an integral number of FWORD units. 
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Fonts.OpenType.FontProgram">
            <summary>
            This table is similar to the CVT Program, except that it is only run once, when the font is first used.
            It is used only for FDEFs and IDEFs. Thus the CVT Program need not contain function definitions.
            However, the CVT Program may redefine existing FDEFs or IDEFs. 
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Fonts.OpenType.ControlValueProgram">
            <summary>
            The Control Value Program consists of a set of TrueType instructions that will be executed whenever the font or 
            point size or transformation matrix change and before each glyph is interpreted. Any instruction is legal in the
            CVT Program but since no glyph is associated with it, instructions intended to move points within a particular
            glyph outline cannot be used in the CVT Program. The name 'prep' is anachronistic. 
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Fonts.OpenType.GlyphSubstitutionTable">
            <summary>
            This table contains information that describes the glyphs in the font in the TrueType outline format.
            Information regarding the rasterizer (scaler) refers to the TrueType rasterizer. 
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Fonts.OpenType.TableDirectoryEntry">
            <summary>
            Represents an entry in the fonts table dictionary.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.TableDirectoryEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Fonts.OpenType.TableDirectoryEntry"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.TableDirectoryEntry.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Fonts.OpenType.TableDirectoryEntry"/> class.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.OpenType.TableDirectoryEntry.Tag">
            <summary>
            4 -byte identifier.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.OpenType.TableDirectoryEntry.CheckSum">
            <summary>
            CheckSum for this table.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.OpenType.TableDirectoryEntry.Offset">
            <summary>
            Offset from beginning of TrueType font file.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.OpenType.TableDirectoryEntry.Length">
            <summary>
            Actual length of this table in bytes.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.OpenType.TableDirectoryEntry.FontTable">
            <summary>
            Associated font table.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.OpenType.TableDirectoryEntry.ReadFrom(Alt.GUI.PdfSharp.Fonts.OpenType.FontData)">
            <summary>
            Creates and reads a TableDirectoryEntry from the font image.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Fonts.OpenType.TableDirectoryEntry.PaddedLength">
            <summary>
            Gets the length rounded up to a multiple of four bytes.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts">
            <summary>
            Testing only
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.A">
            <summary>
            LATIN CAPITAL LETTER A
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.AE">
            <summary>
            LATIN CAPITAL LETTER AE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.AEacute">
            <summary>
            LATIN CAPITAL LETTER AE WITH ACUTE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Aacute">
            <summary>
            LATIN CAPITAL LETTER A WITH ACUTE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Abreve">
            <summary>
            LATIN CAPITAL LETTER A WITH BREVE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Acircumflex">
            <summary>
            LATIN CAPITAL LETTER A WITH CIRCUMFLEX
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Adieresis">
            <summary>
            LATIN CAPITAL LETTER A WITH DIAERESIS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Agrave">
            <summary>
            LATIN CAPITAL LETTER A WITH GRAVE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Alpha">
            <summary>
            GREEK CAPITAL LETTER ALPHA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Alphatonos">
            <summary>
            GREEK CAPITAL LETTER ALPHA WITH TONOS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Amacron">
            <summary>
            LATIN CAPITAL LETTER A WITH MACRON
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Aogonek">
            <summary>
            LATIN CAPITAL LETTER A WITH OGONEK
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Aring">
            <summary>
            LATIN CAPITAL LETTER A WITH RING ABOVE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Aringacute">
            <summary>
            LATIN CAPITAL LETTER A WITH RING ABOVE AND ACUTE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Atilde">
            <summary>
            LATIN CAPITAL LETTER A WITH TILDE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.B">
            <summary>
            LATIN CAPITAL LETTER B
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Beta">
            <summary>
            GREEK CAPITAL LETTER BETA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.C">
            <summary>
            LATIN CAPITAL LETTER C
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Cacute">
            <summary>
            LATIN CAPITAL LETTER C WITH ACUTE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Ccaron">
            <summary>
            LATIN CAPITAL LETTER C WITH CARON
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Ccedilla">
            <summary>
            LATIN CAPITAL LETTER C WITH CEDILLA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Ccircumflex">
            <summary>
            LATIN CAPITAL LETTER C WITH CIRCUMFLEX
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Cdotaccent">
            <summary>
            LATIN CAPITAL LETTER C WITH DOT ABOVE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Chi">
            <summary>
            GREEK CAPITAL LETTER CHI
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.D">
            <summary>
            LATIN CAPITAL LETTER D
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Dcaron">
            <summary>
            LATIN CAPITAL LETTER D WITH CARON
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Dcroat">
            <summary>
            LATIN CAPITAL LETTER D WITH STROKE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Delta">
            <summary>
            INCREMENT
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.E">
            <summary>
            LATIN CAPITAL LETTER E
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Eacute">
            <summary>
            LATIN CAPITAL LETTER E WITH ACUTE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Ebreve">
            <summary>
            LATIN CAPITAL LETTER E WITH BREVE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Ecaron">
            <summary>
            LATIN CAPITAL LETTER E WITH CARON
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Ecircumflex">
            <summary>
            LATIN CAPITAL LETTER E WITH CIRCUMFLEX
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Edieresis">
            <summary>
            LATIN CAPITAL LETTER E WITH DIAERESIS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Edotaccent">
            <summary>
            LATIN CAPITAL LETTER E WITH DOT ABOVE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Egrave">
            <summary>
            LATIN CAPITAL LETTER E WITH GRAVE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Emacron">
            <summary>
            LATIN CAPITAL LETTER E WITH MACRON
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Eng">
            <summary>
            LATIN CAPITAL LETTER ENG
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Eogonek">
            <summary>
            LATIN CAPITAL LETTER E WITH OGONEK
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Epsilon">
            <summary>
            GREEK CAPITAL LETTER EPSILON
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Epsilontonos">
            <summary>
            GREEK CAPITAL LETTER EPSILON WITH TONOS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Eta">
            <summary>
            GREEK CAPITAL LETTER ETA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Etatonos">
            <summary>
            GREEK CAPITAL LETTER ETA WITH TONOS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Eth">
            <summary>
            LATIN CAPITAL LETTER ETH
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Euro">
            <summary>
            EURO SIGN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.F">
            <summary>
            LATIN CAPITAL LETTER F
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.G">
            <summary>
            LATIN CAPITAL LETTER G
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Gamma">
            <summary>
            GREEK CAPITAL LETTER GAMMA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Gbreve">
            <summary>
            LATIN CAPITAL LETTER G WITH BREVE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Gcaron">
            <summary>
            LATIN CAPITAL LETTER G WITH CARON
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Gcircumflex">
            <summary>
            LATIN CAPITAL LETTER G WITH CIRCUMFLEX
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Gcommaaccent">
            <summary>
            LATIN CAPITAL LETTER G WITH CEDILLA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Gdotaccent">
            <summary>
            LATIN CAPITAL LETTER G WITH DOT ABOVE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.H">
            <summary>
            LATIN CAPITAL LETTER H
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.H18533">
            <summary>
            BLACK CIRCLE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.H18543">
            <summary>
            BLACK SMALL SQUARE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.H18551">
            <summary>
            WHITE SMALL SQUARE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.H22073">
            <summary>
            WHITE SQUARE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Hbar">
            <summary>
            LATIN CAPITAL LETTER H WITH STROKE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Hcircumflex">
            <summary>
            LATIN CAPITAL LETTER H WITH CIRCUMFLEX
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.I">
            <summary>
            LATIN CAPITAL LETTER I
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.IJ">
            <summary>
            LATIN CAPITAL LIGATURE IJ
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Iacute">
            <summary>
            LATIN CAPITAL LETTER I WITH ACUTE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Ibreve">
            <summary>
            LATIN CAPITAL LETTER I WITH BREVE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Icircumflex">
            <summary>
            LATIN CAPITAL LETTER I WITH CIRCUMFLEX
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Idieresis">
            <summary>
            LATIN CAPITAL LETTER I WITH DIAERESIS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Idotaccent">
            <summary>
            LATIN CAPITAL LETTER I WITH DOT ABOVE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Ifraktur">
            <summary>
            BLACK-LETTER CAPITAL I
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Igrave">
            <summary>
            LATIN CAPITAL LETTER I WITH GRAVE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Imacron">
            <summary>
            LATIN CAPITAL LETTER I WITH MACRON
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Iogonek">
            <summary>
            LATIN CAPITAL LETTER I WITH OGONEK
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Iota">
            <summary>
            GREEK CAPITAL LETTER IOTA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Iotadieresis">
            <summary>
            GREEK CAPITAL LETTER IOTA WITH DIALYTIKA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Iotatonos">
            <summary>
            GREEK CAPITAL LETTER IOTA WITH TONOS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Itilde">
            <summary>
            LATIN CAPITAL LETTER I WITH TILDE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.J">
            <summary>
            LATIN CAPITAL LETTER J
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Jcircumflex">
            <summary>
            LATIN CAPITAL LETTER J WITH CIRCUMFLEX
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.K">
            <summary>
            LATIN CAPITAL LETTER K
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Kappa">
            <summary>
            GREEK CAPITAL LETTER KAPPA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Kcommaaccent">
            <summary>
            LATIN CAPITAL LETTER K WITH CEDILLA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.L">
            <summary>
            LATIN CAPITAL LETTER L
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Lacute">
            <summary>
            LATIN CAPITAL LETTER L WITH ACUTE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Lambda">
            <summary>
            GREEK CAPITAL LETTER LAMDA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Lcaron">
            <summary>
            LATIN CAPITAL LETTER L WITH CARON
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Lcommaaccent">
            <summary>
            LATIN CAPITAL LETTER L WITH CEDILLA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Ldot">
            <summary>
            LATIN CAPITAL LETTER L WITH MIDDLE DOT
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Lslash">
            <summary>
            LATIN CAPITAL LETTER L WITH STROKE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.M">
            <summary>
            LATIN CAPITAL LETTER M
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Mu">
            <summary>
            GREEK CAPITAL LETTER MU
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.N">
            <summary>
            LATIN CAPITAL LETTER N
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Nacute">
            <summary>
            LATIN CAPITAL LETTER N WITH ACUTE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Ncaron">
            <summary>
            LATIN CAPITAL LETTER N WITH CARON
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Ncommaaccent">
            <summary>
            LATIN CAPITAL LETTER N WITH CEDILLA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Ntilde">
            <summary>
            LATIN CAPITAL LETTER N WITH TILDE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Nu">
            <summary>
            GREEK CAPITAL LETTER NU
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.O">
            <summary>
            LATIN CAPITAL LETTER O
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.OE">
            <summary>
            LATIN CAPITAL LIGATURE OE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Oacute">
            <summary>
            LATIN CAPITAL LETTER O WITH ACUTE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Obreve">
            <summary>
            LATIN CAPITAL LETTER O WITH BREVE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Ocircumflex">
            <summary>
            LATIN CAPITAL LETTER O WITH CIRCUMFLEX
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Odieresis">
            <summary>
            LATIN CAPITAL LETTER O WITH DIAERESIS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Ograve">
            <summary>
            LATIN CAPITAL LETTER O WITH GRAVE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Ohorn">
            <summary>
            LATIN CAPITAL LETTER O WITH HORN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Ohungarumlaut">
            <summary>
            LATIN CAPITAL LETTER O WITH DOUBLE ACUTE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Omacron">
            <summary>
            LATIN CAPITAL LETTER O WITH MACRON
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Omega">
            <summary>
            OHM SIGN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Omegatonos">
            <summary>
            GREEK CAPITAL LETTER OMEGA WITH TONOS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Omicron">
            <summary>
            GREEK CAPITAL LETTER OMICRON
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Omicrontonos">
            <summary>
            GREEK CAPITAL LETTER OMICRON WITH TONOS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Oslash">
            <summary>
            LATIN CAPITAL LETTER O WITH STROKE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Oslashacute">
            <summary>
            LATIN CAPITAL LETTER O WITH STROKE AND ACUTE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Otilde">
            <summary>
            LATIN CAPITAL LETTER O WITH TILDE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.P">
            <summary>
            LATIN CAPITAL LETTER P
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Phi">
            <summary>
            GREEK CAPITAL LETTER PHI
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Pi">
            <summary>
            GREEK CAPITAL LETTER PI
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Psi">
            <summary>
            GREEK CAPITAL LETTER PSI
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Q">
            <summary>
            LATIN CAPITAL LETTER Q
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.R">
            <summary>
            LATIN CAPITAL LETTER R
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Racute">
            <summary>
            LATIN CAPITAL LETTER R WITH ACUTE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Rcaron">
            <summary>
            LATIN CAPITAL LETTER R WITH CARON
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Rcommaaccent">
            <summary>
            LATIN CAPITAL LETTER R WITH CEDILLA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Rfraktur">
            <summary>
            BLACK-LETTER CAPITAL R
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Rho">
            <summary>
            GREEK CAPITAL LETTER RHO
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.S">
            <summary>
            LATIN CAPITAL LETTER S
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.SF010000">
            <summary>
            BOX DRAWINGS LIGHT DOWN AND RIGHT
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.SF020000">
            <summary>
            BOX DRAWINGS LIGHT UP AND RIGHT
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.SF030000">
            <summary>
            BOX DRAWINGS LIGHT DOWN AND LEFT
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.SF040000">
            <summary>
            BOX DRAWINGS LIGHT UP AND LEFT
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.SF050000">
            <summary>
            BOX DRAWINGS LIGHT VERTICAL AND HORIZONTAL
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.SF060000">
            <summary>
            BOX DRAWINGS LIGHT DOWN AND HORIZONTAL
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.SF070000">
            <summary>
            BOX DRAWINGS LIGHT UP AND HORIZONTAL
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.SF080000">
            <summary>
            BOX DRAWINGS LIGHT VERTICAL AND RIGHT
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.SF090000">
            <summary>
            BOX DRAWINGS LIGHT VERTICAL AND LEFT
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.SF100000">
            <summary>
            BOX DRAWINGS LIGHT HORIZONTAL
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.SF110000">
            <summary>
            BOX DRAWINGS LIGHT VERTICAL
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.SF190000">
            <summary>
            BOX DRAWINGS VERTICAL SINGLE AND LEFT DOUBLE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.SF200000">
            <summary>
            BOX DRAWINGS VERTICAL DOUBLE AND LEFT SINGLE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.SF210000">
            <summary>
            BOX DRAWINGS DOWN DOUBLE AND LEFT SINGLE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.SF220000">
            <summary>
            BOX DRAWINGS DOWN SINGLE AND LEFT DOUBLE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.SF230000">
            <summary>
            BOX DRAWINGS DOUBLE VERTICAL AND LEFT
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.SF240000">
            <summary>
            BOX DRAWINGS DOUBLE VERTICAL
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.SF250000">
            <summary>
            BOX DRAWINGS DOUBLE DOWN AND LEFT
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.SF260000">
            <summary>
            BOX DRAWINGS DOUBLE UP AND LEFT
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.SF270000">
            <summary>
            BOX DRAWINGS UP DOUBLE AND LEFT SINGLE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.SF280000">
            <summary>
            BOX DRAWINGS UP SINGLE AND LEFT DOUBLE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.SF360000">
            <summary>
            BOX DRAWINGS VERTICAL SINGLE AND RIGHT DOUBLE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.SF370000">
            <summary>
            BOX DRAWINGS VERTICAL DOUBLE AND RIGHT SINGLE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.SF380000">
            <summary>
            BOX DRAWINGS DOUBLE UP AND RIGHT
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.SF390000">
            <summary>
            BOX DRAWINGS DOUBLE DOWN AND RIGHT
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.SF400000">
            <summary>
            BOX DRAWINGS DOUBLE UP AND HORIZONTAL
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.SF410000">
            <summary>
            BOX DRAWINGS DOUBLE DOWN AND HORIZONTAL
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.SF420000">
            <summary>
            BOX DRAWINGS DOUBLE VERTICAL AND RIGHT
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.SF430000">
            <summary>
            BOX DRAWINGS DOUBLE HORIZONTAL
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.SF440000">
            <summary>
            BOX DRAWINGS DOUBLE VERTICAL AND HORIZONTAL
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.SF450000">
            <summary>
            BOX DRAWINGS UP SINGLE AND HORIZONTAL DOUBLE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.SF460000">
            <summary>
            BOX DRAWINGS UP DOUBLE AND HORIZONTAL SINGLE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.SF470000">
            <summary>
            BOX DRAWINGS DOWN SINGLE AND HORIZONTAL DOUBLE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.SF480000">
            <summary>
            BOX DRAWINGS DOWN DOUBLE AND HORIZONTAL SINGLE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.SF490000">
            <summary>
            BOX DRAWINGS UP DOUBLE AND RIGHT SINGLE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.SF500000">
            <summary>
            BOX DRAWINGS UP SINGLE AND RIGHT DOUBLE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.SF510000">
            <summary>
            BOX DRAWINGS DOWN SINGLE AND RIGHT DOUBLE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.SF520000">
            <summary>
            BOX DRAWINGS DOWN DOUBLE AND RIGHT SINGLE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.SF530000">
            <summary>
            BOX DRAWINGS VERTICAL DOUBLE AND HORIZONTAL SINGLE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.SF540000">
            <summary>
            BOX DRAWINGS VERTICAL SINGLE AND HORIZONTAL DOUBLE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Sacute">
            <summary>
            LATIN CAPITAL LETTER S WITH ACUTE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Scaron">
            <summary>
            LATIN CAPITAL LETTER S WITH CARON
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Scedilla">
            <summary>
            LATIN CAPITAL LETTER S WITH CEDILLA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Scircumflex">
            <summary>
            LATIN CAPITAL LETTER S WITH CIRCUMFLEX
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Scommaaccent">
            <summary>
            LATIN CAPITAL LETTER S WITH COMMA BELOW
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Sigma">
            <summary>
            GREEK CAPITAL LETTER SIGMA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.T">
            <summary>
            LATIN CAPITAL LETTER T
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Tau">
            <summary>
            GREEK CAPITAL LETTER TAU
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Tbar">
            <summary>
            LATIN CAPITAL LETTER T WITH STROKE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Tcaron">
            <summary>
            LATIN CAPITAL LETTER T WITH CARON
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Tcommaaccent">
            <summary>
            LATIN CAPITAL LETTER T WITH CEDILLA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Theta">
            <summary>
            GREEK CAPITAL LETTER THETA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Thorn">
            <summary>
            LATIN CAPITAL LETTER THORN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.U">
            <summary>
            LATIN CAPITAL LETTER U
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Uacute">
            <summary>
            LATIN CAPITAL LETTER U WITH ACUTE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Ubreve">
            <summary>
            LATIN CAPITAL LETTER U WITH BREVE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Ucircumflex">
            <summary>
            LATIN CAPITAL LETTER U WITH CIRCUMFLEX
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Udieresis">
            <summary>
            LATIN CAPITAL LETTER U WITH DIAERESIS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Ugrave">
            <summary>
            LATIN CAPITAL LETTER U WITH GRAVE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Uhorn">
            <summary>
            LATIN CAPITAL LETTER U WITH HORN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Uhungarumlaut">
            <summary>
            LATIN CAPITAL LETTER U WITH DOUBLE ACUTE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Umacron">
            <summary>
            LATIN CAPITAL LETTER U WITH MACRON
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Uogonek">
            <summary>
            LATIN CAPITAL LETTER U WITH OGONEK
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Upsilon">
            <summary>
            GREEK CAPITAL LETTER UPSILON
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Upsilon1">
            <summary>
            GREEK UPSILON WITH HOOK SYMBOL
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Upsilondieresis">
            <summary>
            GREEK CAPITAL LETTER UPSILON WITH DIALYTIKA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Upsilontonos">
            <summary>
            GREEK CAPITAL LETTER UPSILON WITH TONOS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Uring">
            <summary>
            LATIN CAPITAL LETTER U WITH RING ABOVE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Utilde">
            <summary>
            LATIN CAPITAL LETTER U WITH TILDE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.V">
            <summary>
            LATIN CAPITAL LETTER V
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.W">
            <summary>
            LATIN CAPITAL LETTER W
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Wacute">
            <summary>
            LATIN CAPITAL LETTER W WITH ACUTE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Wcircumflex">
            <summary>
            LATIN CAPITAL LETTER W WITH CIRCUMFLEX
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Wdieresis">
            <summary>
            LATIN CAPITAL LETTER W WITH DIAERESIS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Wgrave">
            <summary>
            LATIN CAPITAL LETTER W WITH GRAVE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.X">
            <summary>
            LATIN CAPITAL LETTER X
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Xi">
            <summary>
            GREEK CAPITAL LETTER XI
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Y">
            <summary>
            LATIN CAPITAL LETTER Y
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Yacute">
            <summary>
            LATIN CAPITAL LETTER Y WITH ACUTE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Ycircumflex">
            <summary>
            LATIN CAPITAL LETTER Y WITH CIRCUMFLEX
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Ydieresis">
            <summary>
            LATIN CAPITAL LETTER Y WITH DIAERESIS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Ygrave">
            <summary>
            LATIN CAPITAL LETTER Y WITH GRAVE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Z">
            <summary>
            LATIN CAPITAL LETTER Z
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Zacute">
            <summary>
            LATIN CAPITAL LETTER Z WITH ACUTE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Zcaron">
            <summary>
            LATIN CAPITAL LETTER Z WITH CARON
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Zdotaccent">
            <summary>
            LATIN CAPITAL LETTER Z WITH DOT ABOVE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.Zeta">
            <summary>
            GREEK CAPITAL LETTER ZETA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.a">
            <summary>
            LATIN SMALL LETTER A
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.aacute">
            <summary>
            LATIN SMALL LETTER A WITH ACUTE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.abreve">
            <summary>
            LATIN SMALL LETTER A WITH BREVE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.acircumflex">
            <summary>
            LATIN SMALL LETTER A WITH CIRCUMFLEX
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.acute">
            <summary>
            ACUTE ACCENT
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.acutecomb">
            <summary>
            COMBINING ACUTE ACCENT
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.adieresis">
            <summary>
            LATIN SMALL LETTER A WITH DIAERESIS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.ae">
            <summary>
            LATIN SMALL LETTER AE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.aeacute">
            <summary>
            LATIN SMALL LETTER AE WITH ACUTE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii00208">
            <summary>
            HORIZONTAL BAR
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10017">
            <summary>
            CYRILLIC CAPITAL LETTER A
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10018">
            <summary>
            CYRILLIC CAPITAL LETTER BE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10019">
            <summary>
            CYRILLIC CAPITAL LETTER VE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10020">
            <summary>
            CYRILLIC CAPITAL LETTER GHE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10021">
            <summary>
            CYRILLIC CAPITAL LETTER DE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10022">
            <summary>
            CYRILLIC CAPITAL LETTER IE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10023">
            <summary>
            CYRILLIC CAPITAL LETTER IO
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10024">
            <summary>
            CYRILLIC CAPITAL LETTER ZHE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10025">
            <summary>
            CYRILLIC CAPITAL LETTER ZE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10026">
            <summary>
            CYRILLIC CAPITAL LETTER I
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10027">
            <summary>
            CYRILLIC CAPITAL LETTER SHORT I
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10028">
            <summary>
            CYRILLIC CAPITAL LETTER KA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10029">
            <summary>
            CYRILLIC CAPITAL LETTER EL
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10030">
            <summary>
            CYRILLIC CAPITAL LETTER EM
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10031">
            <summary>
            CYRILLIC CAPITAL LETTER EN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10032">
            <summary>
            CYRILLIC CAPITAL LETTER O
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10033">
            <summary>
            CYRILLIC CAPITAL LETTER PE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10034">
            <summary>
            CYRILLIC CAPITAL LETTER ER
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10035">
            <summary>
            CYRILLIC CAPITAL LETTER ES
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10036">
            <summary>
            CYRILLIC CAPITAL LETTER TE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10037">
            <summary>
            CYRILLIC CAPITAL LETTER U
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10038">
            <summary>
            CYRILLIC CAPITAL LETTER EF
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10039">
            <summary>
            CYRILLIC CAPITAL LETTER HA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10040">
            <summary>
            CYRILLIC CAPITAL LETTER TSE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10041">
            <summary>
            CYRILLIC CAPITAL LETTER CHE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10042">
            <summary>
            CYRILLIC CAPITAL LETTER SHA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10043">
            <summary>
            CYRILLIC CAPITAL LETTER SHCHA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10044">
            <summary>
            CYRILLIC CAPITAL LETTER HARD SIGN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10045">
            <summary>
            CYRILLIC CAPITAL LETTER YERU
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10046">
            <summary>
            CYRILLIC CAPITAL LETTER SOFT SIGN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10047">
            <summary>
            CYRILLIC CAPITAL LETTER E
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10048">
            <summary>
            CYRILLIC CAPITAL LETTER YU
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10049">
            <summary>
            CYRILLIC CAPITAL LETTER YA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10050">
            <summary>
            CYRILLIC CAPITAL LETTER GHE WITH UPTURN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10051">
            <summary>
            CYRILLIC CAPITAL LETTER DJE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10052">
            <summary>
            CYRILLIC CAPITAL LETTER GJE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10053">
            <summary>
            CYRILLIC CAPITAL LETTER UKRAINIAN IE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10054">
            <summary>
            CYRILLIC CAPITAL LETTER DZE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10055">
            <summary>
            CYRILLIC CAPITAL LETTER BYELORUSSIAN-UKRAINIAN I
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10056">
            <summary>
            CYRILLIC CAPITAL LETTER YI
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10057">
            <summary>
            CYRILLIC CAPITAL LETTER JE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10058">
            <summary>
            CYRILLIC CAPITAL LETTER LJE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10059">
            <summary>
            CYRILLIC CAPITAL LETTER NJE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10060">
            <summary>
            CYRILLIC CAPITAL LETTER TSHE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10061">
            <summary>
            CYRILLIC CAPITAL LETTER KJE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10062">
            <summary>
            CYRILLIC CAPITAL LETTER SHORT U
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10065">
            <summary>
            CYRILLIC SMALL LETTER A
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10066">
            <summary>
            CYRILLIC SMALL LETTER BE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10067">
            <summary>
            CYRILLIC SMALL LETTER VE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10068">
            <summary>
            CYRILLIC SMALL LETTER GHE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10069">
            <summary>
            CYRILLIC SMALL LETTER DE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10070">
            <summary>
            CYRILLIC SMALL LETTER IE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10071">
            <summary>
            CYRILLIC SMALL LETTER IO
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10072">
            <summary>
            CYRILLIC SMALL LETTER ZHE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10073">
            <summary>
            CYRILLIC SMALL LETTER ZE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10074">
            <summary>
            CYRILLIC SMALL LETTER I
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10075">
            <summary>
            CYRILLIC SMALL LETTER SHORT I
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10076">
            <summary>
            CYRILLIC SMALL LETTER KA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10077">
            <summary>
            CYRILLIC SMALL LETTER EL
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10078">
            <summary>
            CYRILLIC SMALL LETTER EM
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10079">
            <summary>
            CYRILLIC SMALL LETTER EN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10080">
            <summary>
            CYRILLIC SMALL LETTER O
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10081">
            <summary>
            CYRILLIC SMALL LETTER PE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10082">
            <summary>
            CYRILLIC SMALL LETTER ER
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10083">
            <summary>
            CYRILLIC SMALL LETTER ES
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10084">
            <summary>
            CYRILLIC SMALL LETTER TE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10085">
            <summary>
            CYRILLIC SMALL LETTER U
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10086">
            <summary>
            CYRILLIC SMALL LETTER EF
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10087">
            <summary>
            CYRILLIC SMALL LETTER HA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10088">
            <summary>
            CYRILLIC SMALL LETTER TSE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10089">
            <summary>
            CYRILLIC SMALL LETTER CHE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10090">
            <summary>
            CYRILLIC SMALL LETTER SHA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10091">
            <summary>
            CYRILLIC SMALL LETTER SHCHA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10092">
            <summary>
            CYRILLIC SMALL LETTER HARD SIGN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10093">
            <summary>
            CYRILLIC SMALL LETTER YERU
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10094">
            <summary>
            CYRILLIC SMALL LETTER SOFT SIGN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10095">
            <summary>
            CYRILLIC SMALL LETTER E
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10096">
            <summary>
            CYRILLIC SMALL LETTER YU
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10097">
            <summary>
            CYRILLIC SMALL LETTER YA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10098">
            <summary>
            CYRILLIC SMALL LETTER GHE WITH UPTURN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10099">
            <summary>
            CYRILLIC SMALL LETTER DJE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10100">
            <summary>
            CYRILLIC SMALL LETTER GJE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10101">
            <summary>
            CYRILLIC SMALL LETTER UKRAINIAN IE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10102">
            <summary>
            CYRILLIC SMALL LETTER DZE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10103">
            <summary>
            CYRILLIC SMALL LETTER BYELORUSSIAN-UKRAINIAN I
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10104">
            <summary>
            CYRILLIC SMALL LETTER YI
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10105">
            <summary>
            CYRILLIC SMALL LETTER JE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10106">
            <summary>
            CYRILLIC SMALL LETTER LJE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10107">
            <summary>
            CYRILLIC SMALL LETTER NJE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10108">
            <summary>
            CYRILLIC SMALL LETTER TSHE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10109">
            <summary>
            CYRILLIC SMALL LETTER KJE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10110">
            <summary>
            CYRILLIC SMALL LETTER SHORT U
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10145">
            <summary>
            CYRILLIC CAPITAL LETTER DZHE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10146">
            <summary>
            CYRILLIC CAPITAL LETTER YAT
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10147">
            <summary>
            CYRILLIC CAPITAL LETTER FITA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10148">
            <summary>
            CYRILLIC CAPITAL LETTER IZHITSA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10193">
            <summary>
            CYRILLIC SMALL LETTER DZHE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10194">
            <summary>
            CYRILLIC SMALL LETTER YAT
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10195">
            <summary>
            CYRILLIC SMALL LETTER FITA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10196">
            <summary>
            CYRILLIC SMALL LETTER IZHITSA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii10846">
            <summary>
            CYRILLIC SMALL LETTER SCHWA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii299">
            <summary>
            LEFT-TO-RIGHT MARK
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii300">
            <summary>
            RIGHT-TO-LEFT MARK
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii301">
            <summary>
            ZERO WIDTH JOINER
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57381">
            <summary>
            ARABIC PERCENT SIGN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57388">
            <summary>
            ARABIC COMMA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57392">
            <summary>
            ARABIC-INDIC DIGIT ZERO
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57393">
            <summary>
            ARABIC-INDIC DIGIT ONE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57394">
            <summary>
            ARABIC-INDIC DIGIT TWO
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57395">
            <summary>
            ARABIC-INDIC DIGIT THREE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57396">
            <summary>
            ARABIC-INDIC DIGIT FOUR
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57397">
            <summary>
            ARABIC-INDIC DIGIT FIVE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57398">
            <summary>
            ARABIC-INDIC DIGIT SIX
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57399">
            <summary>
            ARABIC-INDIC DIGIT SEVEN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57400">
            <summary>
            ARABIC-INDIC DIGIT EIGHT
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57401">
            <summary>
            ARABIC-INDIC DIGIT NINE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57403">
            <summary>
            ARABIC SEMICOLON
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57407">
            <summary>
            ARABIC QUESTION MARK
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57409">
            <summary>
            ARABIC LETTER HAMZA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57410">
            <summary>
            ARABIC LETTER ALEF WITH MADDA ABOVE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57411">
            <summary>
            ARABIC LETTER ALEF WITH HAMZA ABOVE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57412">
            <summary>
            ARABIC LETTER WAW WITH HAMZA ABOVE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57413">
            <summary>
            ARABIC LETTER ALEF WITH HAMZA BELOW
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57414">
            <summary>
            ARABIC LETTER YEH WITH HAMZA ABOVE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57415">
            <summary>
            ARABIC LETTER ALEF
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57416">
            <summary>
            ARABIC LETTER BEH
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57417">
            <summary>
            ARABIC LETTER TEH MARBUTA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57418">
            <summary>
            ARABIC LETTER TEH
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57419">
            <summary>
            ARABIC LETTER THEH
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57420">
            <summary>
            ARABIC LETTER JEEM
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57421">
            <summary>
            ARABIC LETTER HAH
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57422">
            <summary>
            ARABIC LETTER KHAH
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57423">
            <summary>
            ARABIC LETTER DAL
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57424">
            <summary>
            ARABIC LETTER THAL
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57425">
            <summary>
            ARABIC LETTER REH
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57426">
            <summary>
            ARABIC LETTER ZAIN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57427">
            <summary>
            ARABIC LETTER SEEN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57428">
            <summary>
            ARABIC LETTER SHEEN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57429">
            <summary>
            ARABIC LETTER SAD
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57430">
            <summary>
            ARABIC LETTER DAD
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57431">
            <summary>
            ARABIC LETTER TAH
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57432">
            <summary>
            ARABIC LETTER ZAH
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57433">
            <summary>
            ARABIC LETTER AIN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57434">
            <summary>
            ARABIC LETTER GHAIN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57440">
            <summary>
            ARABIC TATWEEL
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57441">
            <summary>
            ARABIC LETTER FEH
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57442">
            <summary>
            ARABIC LETTER QAF
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57443">
            <summary>
            ARABIC LETTER KAF
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57444">
            <summary>
            ARABIC LETTER LAM
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57445">
            <summary>
            ARABIC LETTER MEEM
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57446">
            <summary>
            ARABIC LETTER NOON
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57448">
            <summary>
            ARABIC LETTER WAW
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57449">
            <summary>
            ARABIC LETTER ALEF MAKSURA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57450">
            <summary>
            ARABIC LETTER YEH
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57451">
            <summary>
            ARABIC FATHATAN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57452">
            <summary>
            ARABIC DAMMATAN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57453">
            <summary>
            ARABIC KASRATAN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57454">
            <summary>
            ARABIC FATHA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57455">
            <summary>
            ARABIC DAMMA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57456">
            <summary>
            ARABIC KASRA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57457">
            <summary>
            ARABIC SHADDA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57458">
            <summary>
            ARABIC SUKUN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57470">
            <summary>
            ARABIC LETTER HEH
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57505">
            <summary>
            ARABIC LETTER VEH
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57506">
            <summary>
            ARABIC LETTER PEH
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57507">
            <summary>
            ARABIC LETTER TCHEH
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57508">
            <summary>
            ARABIC LETTER JEH
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57509">
            <summary>
            ARABIC LETTER GAF
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57511">
            <summary>
            ARABIC LETTER TTEH
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57512">
            <summary>
            ARABIC LETTER DDAL
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57513">
            <summary>
            ARABIC LETTER RREH
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57514">
            <summary>
            ARABIC LETTER NOON GHUNNA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57519">
            <summary>
            ARABIC LETTER YEH BARREE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57534">
            <summary>
            ARABIC LETTER AE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57636">
            <summary>
            NEW SHEQEL SIGN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57645">
            <summary>
            HEBREW PUNCTUATION MAQAF
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57658">
            <summary>
            HEBREW PUNCTUATION SOF PASUQ
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57664">
            <summary>
            HEBREW LETTER ALEF
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57665">
            <summary>
            HEBREW LETTER BET
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57666">
            <summary>
            HEBREW LETTER GIMEL
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57667">
            <summary>
            HEBREW LETTER DALET
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57668">
            <summary>
            HEBREW LETTER HE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57669">
            <summary>
            HEBREW LETTER VAV
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57670">
            <summary>
            HEBREW LETTER ZAYIN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57671">
            <summary>
            HEBREW LETTER HET
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57672">
            <summary>
            HEBREW LETTER TET
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57673">
            <summary>
            HEBREW LETTER YOD
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57674">
            <summary>
            HEBREW LETTER FINAL KAF
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57675">
            <summary>
            HEBREW LETTER KAF
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57676">
            <summary>
            HEBREW LETTER LAMED
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57677">
            <summary>
            HEBREW LETTER FINAL MEM
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57678">
            <summary>
            HEBREW LETTER MEM
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57679">
            <summary>
            HEBREW LETTER FINAL NUN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57680">
            <summary>
            HEBREW LETTER NUN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57681">
            <summary>
            HEBREW LETTER SAMEKH
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57682">
            <summary>
            HEBREW LETTER AYIN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57683">
            <summary>
            HEBREW LETTER FINAL PE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57684">
            <summary>
            HEBREW LETTER PE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57685">
            <summary>
            HEBREW LETTER FINAL TSADI
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57686">
            <summary>
            HEBREW LETTER TSADI
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57687">
            <summary>
            HEBREW LETTER QOF
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57688">
            <summary>
            HEBREW LETTER RESH
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57689">
            <summary>
            HEBREW LETTER SHIN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57690">
            <summary>
            HEBREW LETTER TAV
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57716">
            <summary>
            HEBREW LIGATURE YIDDISH DOUBLE VAV
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57717">
            <summary>
            HEBREW LIGATURE YIDDISH VAV YOD
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57718">
            <summary>
            HEBREW LIGATURE YIDDISH DOUBLE YOD
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57793">
            <summary>
            HEBREW POINT HIRIQ
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57794">
            <summary>
            HEBREW POINT TSERE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57795">
            <summary>
            HEBREW POINT SEGOL
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57796">
            <summary>
            HEBREW POINT QUBUTS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57797">
            <summary>
            HEBREW POINT QAMATS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57798">
            <summary>
            HEBREW POINT PATAH
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57799">
            <summary>
            HEBREW POINT SHEVA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57800">
            <summary>
            HEBREW POINT HATAF PATAH
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57801">
            <summary>
            HEBREW POINT HATAF SEGOL
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57802">
            <summary>
            HEBREW POINT HATAF QAMATS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57803">
            <summary>
            HEBREW POINT SIN DOT
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57804">
            <summary>
            HEBREW POINT SHIN DOT
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57806">
            <summary>
            HEBREW POINT HOLAM
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57807">
            <summary>
            HEBREW POINT DAGESH OR MAPIQ
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57839">
            <summary>
            HEBREW POINT METEG
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57841">
            <summary>
            HEBREW POINT RAFE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57842">
            <summary>
            HEBREW PUNCTUATION PASEQ
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii57929">
            <summary>
            MODIFIER LETTER APOSTROPHE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii61248">
            <summary>
            CARE OF
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii61289">
            <summary>
            SCRIPT SMALL L
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii61352">
            <summary>
            NUMERO SIGN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii61573">
            <summary>
            POP DIRECTIONAL FORMATTING
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii61574">
            <summary>
            LEFT-TO-RIGHT OVERRIDE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii61575">
            <summary>
            RIGHT-TO-LEFT OVERRIDE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii61664">
            <summary>
            ZERO WIDTH NON-JOINER
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii63167">
            <summary>
            ARABIC FIVE POINTED STAR
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.afii64937">
            <summary>
            MODIFIER LETTER REVERSED COMMA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.agrave">
            <summary>
            LATIN SMALL LETTER A WITH GRAVE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.aleph">
            <summary>
            ALEF SYMBOL
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.alpha">
            <summary>
            GREEK SMALL LETTER ALPHA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.alphatonos">
            <summary>
            GREEK SMALL LETTER ALPHA WITH TONOS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.amacron">
            <summary>
            LATIN SMALL LETTER A WITH MACRON
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.ampersand">
            <summary>
            AMPERSAND
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.angle">
            <summary>
            ANGLE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.angleleft">
            <summary>
            LEFT-POINTING ANGLE BRACKET
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.angleright">
            <summary>
            RIGHT-POINTING ANGLE BRACKET
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.anoteleia">
            <summary>
            GREEK ANO TELEIA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.aogonek">
            <summary>
            LATIN SMALL LETTER A WITH OGONEK
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.approxequal">
            <summary>
            ALMOST EQUAL TO
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.aring">
            <summary>
            LATIN SMALL LETTER A WITH RING ABOVE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.aringacute">
            <summary>
            LATIN SMALL LETTER A WITH RING ABOVE AND ACUTE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.arrowboth">
            <summary>
            LEFT RIGHT ARROW
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.arrowdblboth">
            <summary>
            LEFT RIGHT DOUBLE ARROW
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.arrowdbldown">
            <summary>
            DOWNWARDS DOUBLE ARROW
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.arrowdblleft">
            <summary>
            LEFTWARDS DOUBLE ARROW
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.arrowdblright">
            <summary>
            RIGHTWARDS DOUBLE ARROW
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.arrowdblup">
            <summary>
            UPWARDS DOUBLE ARROW
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.arrowdown">
            <summary>
            DOWNWARDS ARROW
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.arrowleft">
            <summary>
            LEFTWARDS ARROW
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.arrowright">
            <summary>
            RIGHTWARDS ARROW
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.arrowup">
            <summary>
            UPWARDS ARROW
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.arrowupdn">
            <summary>
            UP DOWN ARROW
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.arrowupdnbse">
            <summary>
            UP DOWN ARROW WITH BASE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.asciicircum">
            <summary>
            CIRCUMFLEX ACCENT                                      
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.asciitilde">
            <summary>
            TILDE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.asterisk">
            <summary>
            ASTERISK
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.asteriskmath">
            <summary>
            ASTERISK OPERATOR
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.at">
            <summary>
            COMMERCIAL AT
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.atilde">
            <summary>
            LATIN SMALL LETTER A WITH TILDE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.b">
            <summary>
            LATIN SMALL LETTER B
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.backslash">
            <summary>
            REVERSE SOLIDUS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.bar">
            <summary>
            VERTICAL LINE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.beta">
            <summary>
            GREEK SMALL LETTER BETA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.block">
            <summary>
            FULL BLOCK
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.braceleft">
            <summary>
            LEFT CURLY BRACKET
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.braceright">
            <summary>
            RIGHT CURLY BRACKET
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.bracketleft">
            <summary>
            LEFT SQUARE BRACKET
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.bracketright">
            <summary>
            RIGHT SQUARE BRACKET
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.breve">
            <summary>
            BREVE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.brokenbar">
            <summary>
            BROKEN BAR
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.bullet">
            <summary>
            BULLET
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.c">
            <summary>
            LATIN SMALL LETTER C
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.cacute">
            <summary>
            LATIN SMALL LETTER C WITH ACUTE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.caron">
            <summary>
            CARON
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.carriagereturn">
            <summary>
            DOWNWARDS ARROW WITH CORNER LEFTWARDS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.ccaron">
            <summary>
            LATIN SMALL LETTER C WITH CARON
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.ccedilla">
            <summary>
            LATIN SMALL LETTER C WITH CEDILLA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.ccircumflex">
            <summary>
            LATIN SMALL LETTER C WITH CIRCUMFLEX
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.cdotaccent">
            <summary>
            LATIN SMALL LETTER C WITH DOT ABOVE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.cedilla">
            <summary>
            CEDILLA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.cent">
            <summary>
            CENT SIGN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.chi">
            <summary>
            GREEK SMALL LETTER CHI
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.circle">
            <summary>
            WHITE CIRCLE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.circlemultiply">
            <summary>
            CIRCLED TIMES
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.circleplus">
            <summary>
            CIRCLED PLUS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.circumflex">
            <summary>
            MODIFIER LETTER CIRCUMFLEX ACCENT
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.club">
            <summary>
            BLACK CLUB SUIT
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.colon">
            <summary>
            COLON
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.colonmonetary">
            <summary>
            COLON SIGN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.comma">
            <summary>
            COMMA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.congruent">
            <summary>
            APPROXIMATELY EQUAL TO
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.copyright">
            <summary>
            COPYRIGHT SIGN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.currency">
            <summary>
            CURRENCY SIGN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.d">
            <summary>
            LATIN SMALL LETTER D
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.dagger">
            <summary>
            DAGGER
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.daggerdbl">
            <summary>
            DOUBLE DAGGER
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.dcaron">
            <summary>
            LATIN SMALL LETTER D WITH CARON
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.dcroat">
            <summary>
            LATIN SMALL LETTER D WITH STROKE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.degree">
            <summary>
            DEGREE SIGN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.delta">
            <summary>
            GREEK SMALL LETTER DELTA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.diamond">
            <summary>
            BLACK DIAMOND SUIT
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.dieresis">
            <summary>
            DIAERESIS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.dieresistonos">
            <summary>
            GREEK DIALYTIKA TONOS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.divide">
            <summary>
            DIVISION SIGN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.dkshade">
            <summary>
            DARK SHADE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.dnblock">
            <summary>
            LOWER HALF BLOCK
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.dollar">
            <summary>
            DOLLAR SIGN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.dong">
            <summary>
            DONG SIGN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.dotaccent">
            <summary>
            DOT ABOVE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.dotbelowcomb">
            <summary>
            COMBINING DOT BELOW
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.dotlessi">
            <summary>
            LATIN SMALL LETTER DOTLESS I
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.dotmath">
            <summary>
            DOT OPERATOR
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.e">
            <summary>
            LATIN SMALL LETTER E
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.eacute">
            <summary>
            LATIN SMALL LETTER E WITH ACUTE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.ebreve">
            <summary>
            LATIN SMALL LETTER E WITH BREVE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.ecaron">
            <summary>
            LATIN SMALL LETTER E WITH CARON
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.ecircumflex">
            <summary>
            LATIN SMALL LETTER E WITH CIRCUMFLEX
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.edieresis">
            <summary>
            LATIN SMALL LETTER E WITH DIAERESIS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.edotaccent">
            <summary>
            LATIN SMALL LETTER E WITH DOT ABOVE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.egrave">
            <summary>
            LATIN SMALL LETTER E WITH GRAVE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.eight">
            <summary>
            DIGIT EIGHT
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.element">
            <summary>
            ELEMENT OF
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.ellipsis">
            <summary>
            HORIZONTAL ELLIPSIS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.emacron">
            <summary>
            LATIN SMALL LETTER E WITH MACRON
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.emdash">
            <summary>
            EM DASH
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.emptyset">
            <summary>
            EMPTY SET
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.endash">
            <summary>
            EN DASH
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.eng">
            <summary>
            LATIN SMALL LETTER ENG
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.eogonek">
            <summary>
            LATIN SMALL LETTER E WITH OGONEK
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.epsilon">
            <summary>
            GREEK SMALL LETTER EPSILON
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.epsilontonos">
            <summary>
            GREEK SMALL LETTER EPSILON WITH TONOS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.equal">
            <summary>
            EQUALS SIGN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.equivalence">
            <summary>
            IDENTICAL TO
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.estimated">
            <summary>
            ESTIMATED SYMBOL
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.eta">
            <summary>
            GREEK SMALL LETTER ETA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.etatonos">
            <summary>
            GREEK SMALL LETTER ETA WITH TONOS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.eth">
            <summary>
            LATIN SMALL LETTER ETH
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.exclam">
            <summary>
            EXCLAMATION MARK
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.exclamdbl">
            <summary>
            DOUBLE EXCLAMATION MARK
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.exclamdown">
            <summary>
            INVERTED EXCLAMATION MARK
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.existential">
            <summary>
            THERE EXISTS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.f">
            <summary>
            LATIN SMALL LETTER F
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.female">
            <summary>
            FEMALE SIGN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.figuredash">
            <summary>
            FIGURE DASH
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.filledbox">
            <summary>
            BLACK SQUARE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.filledrect">
            <summary>
            BLACK RECTANGLE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.five">
            <summary>
            DIGIT FIVE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.fiveeighths">
            <summary>
            VULGAR FRACTION FIVE EIGHTHS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.florin">
            <summary>
            LATIN SMALL LETTER F WITH HOOK
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.four">
            <summary>
            DIGIT FOUR
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.fraction">
            <summary>
            FRACTION SLASH
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.franc">
            <summary>
            FRENCH FRANC SIGN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.g">
            <summary>
            LATIN SMALL LETTER G
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.gamma">
            <summary>
            GREEK SMALL LETTER GAMMA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.gbreve">
            <summary>
            LATIN SMALL LETTER G WITH BREVE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.gcaron">
            <summary>
            LATIN SMALL LETTER G WITH CARON
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.gcircumflex">
            <summary>
            LATIN SMALL LETTER G WITH CIRCUMFLEX
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.gcommaaccent">
            <summary>
            LATIN SMALL LETTER G WITH CEDILLA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.gdotaccent">
            <summary>
            LATIN SMALL LETTER G WITH DOT ABOVE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.germandbls">
            <summary>
            LATIN SMALL LETTER SHARP S
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.gradient">
            <summary>
            NABLA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.grave">
            <summary>
            GRAVE ACCENT
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.gravecomb">
            <summary>
            COMBINING GRAVE ACCENT
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.greater">
            <summary>
            GREATER-THAN SIGN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.greaterequal">
            <summary>
            GREATER-THAN OR EQUAL TO
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.guillemotleft">
            <summary>
            LEFT-POINTING DOUBLE ANGLE QUOTATION MARK
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.guillemotright">
            <summary>
            RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.guilsinglleft">
            <summary>
            SINGLE LEFT-POINTING ANGLE QUOTATION MARK
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.guilsinglright">
            <summary>
            SINGLE RIGHT-POINTING ANGLE QUOTATION MARK
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.h">
            <summary>
            LATIN SMALL LETTER H
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.hbar">
            <summary>
            LATIN SMALL LETTER H WITH STROKE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.hcircumflex">
            <summary>
            LATIN SMALL LETTER H WITH CIRCUMFLEX
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.heart">
            <summary>
            BLACK HEART SUIT
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.hookabovecomb">
            <summary>
            COMBINING HOOK ABOVE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.house">
            <summary>
            HOUSE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.hungarumlaut">
            <summary>
            DOUBLE ACUTE ACCENT
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.hyphen">
            <summary>
            HYPHEN-MINUS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.i">
            <summary>
            LATIN SMALL LETTER I
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.iacute">
            <summary>
            LATIN SMALL LETTER I WITH ACUTE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.ibreve">
            <summary>
            LATIN SMALL LETTER I WITH BREVE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.icircumflex">
            <summary>
            LATIN SMALL LETTER I WITH CIRCUMFLEX
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.idieresis">
            <summary>
            LATIN SMALL LETTER I WITH DIAERESIS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.igrave">
            <summary>
            LATIN SMALL LETTER I WITH GRAVE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.ij">
            <summary>
            LATIN SMALL LIGATURE IJ
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.imacron">
            <summary>
            LATIN SMALL LETTER I WITH MACRON
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.infinity">
            <summary>
            INFINITY
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.integral">
            <summary>
            INTEGRAL
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.integralbt">
            <summary>
            BOTTOM HALF INTEGRAL
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.integraltp">
            <summary>
            TOP HALF INTEGRAL
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.intersection">
            <summary>
            INTERSECTION
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.invbullet">
            <summary>
            INVERSE BULLET
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.invcircle">
            <summary>
            INVERSE WHITE CIRCLE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.invsmileface">
            <summary>
            BLACK SMILING FACE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.iogonek">
            <summary>
            LATIN SMALL LETTER I WITH OGONEK
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.iota">
            <summary>
            GREEK SMALL LETTER IOTA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.iotadieresis">
            <summary>
            GREEK SMALL LETTER IOTA WITH DIALYTIKA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.iotadieresistonos">
            <summary>
            GREEK SMALL LETTER IOTA WITH DIALYTIKA AND TONOS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.iotatonos">
            <summary>
            GREEK SMALL LETTER IOTA WITH TONOS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.itilde">
            <summary>
            LATIN SMALL LETTER I WITH TILDE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.j">
            <summary>
            LATIN SMALL LETTER J
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.jcircumflex">
            <summary>
            LATIN SMALL LETTER J WITH CIRCUMFLEX
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.k">
            <summary>
            LATIN SMALL LETTER K
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.kappa">
            <summary>
            GREEK SMALL LETTER KAPPA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.kcommaaccent">
            <summary>
            LATIN SMALL LETTER K WITH CEDILLA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.kgreenlandic">
            <summary>
            LATIN SMALL LETTER KRA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.l">
            <summary>
            LATIN SMALL LETTER L
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.lacute">
            <summary>
            LATIN SMALL LETTER L WITH ACUTE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.lambda">
            <summary>
            GREEK SMALL LETTER LAMDA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.lcaron">
            <summary>
            LATIN SMALL LETTER L WITH CARON
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.lcommaaccent">
            <summary>
            LATIN SMALL LETTER L WITH CEDILLA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.ldot">
            <summary>
            LATIN SMALL LETTER L WITH MIDDLE DOT
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.less">
            <summary>
            LESS-THAN SIGN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.lessequal">
            <summary>
            LESS-THAN OR EQUAL TO
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.lfblock">
            <summary>
            LEFT HALF BLOCK
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.lira">
            <summary>
            LIRA SIGN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.logicaland">
            <summary>
            LOGICAL AND
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.logicalnot">
            <summary>
            NOT SIGN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.logicalor">
            <summary>
            LOGICAL OR
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.longs">
            <summary>
            LATIN SMALL LETTER LONG S
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.lozenge">
            <summary>
            LOZENGE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.lslash">
            <summary>
            LATIN SMALL LETTER L WITH STROKE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.ltshade">
            <summary>
            LIGHT SHADE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.m">
            <summary>
            LATIN SMALL LETTER M
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.macron">
            <summary>
            MACRON
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.male">
            <summary>
            MALE SIGN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.minus">
            <summary>
            MINUS SIGN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.minute">
            <summary>
            PRIME
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.mu">
            <summary>
            MICRO SIGN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.multiply">
            <summary>
            MULTIPLICATION SIGN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.musicalnote">
            <summary>
            EIGHTH NOTE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.musicalnotedbl">
            <summary>
            BEAMED EIGHTH NOTES
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.n">
            <summary>
            LATIN SMALL LETTER N
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.nacute">
            <summary>
            LATIN SMALL LETTER N WITH ACUTE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.napostrophe">
            <summary>
            LATIN SMALL LETTER N PRECEDED BY APOSTROPHE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.ncaron">
            <summary>
            LATIN SMALL LETTER N WITH CARON
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.ncommaaccent">
            <summary>
            LATIN SMALL LETTER N WITH CEDILLA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.nine">
            <summary>
            DIGIT NINE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.notelement">
            <summary>
            NOT AN ELEMENT OF
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.notequal">
            <summary>
            NOT EQUAL TO
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.notsubset">
            <summary>
            NOT A SUBSET OF
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.ntilde">
            <summary>
            LATIN SMALL LETTER N WITH TILDE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.nu">
            <summary>
            GREEK SMALL LETTER NU
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.numbersign">
            <summary>
            NUMBER SIGN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.o">
            <summary>
            LATIN SMALL LETTER O
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.oacute">
            <summary>
            LATIN SMALL LETTER O WITH ACUTE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.obreve">
            <summary>
            LATIN SMALL LETTER O WITH BREVE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.ocircumflex">
            <summary>
            LATIN SMALL LETTER O WITH CIRCUMFLEX
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.odieresis">
            <summary>
            LATIN SMALL LETTER O WITH DIAERESIS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.oe">
            <summary>
            LATIN SMALL LIGATURE OE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.ogonek">
            <summary>
            OGONEK
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.ograve">
            <summary>
            LATIN SMALL LETTER O WITH GRAVE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.ohorn">
            <summary>
            LATIN SMALL LETTER O WITH HORN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.ohungarumlaut">
            <summary>
            LATIN SMALL LETTER O WITH DOUBLE ACUTE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.omacron">
            <summary>
            LATIN SMALL LETTER O WITH MACRON
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.omega">
            <summary>
            GREEK SMALL LETTER OMEGA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.omega1">
            <summary>
            GREEK PI SYMBOL
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.omegatonos">
            <summary>
            GREEK SMALL LETTER OMEGA WITH TONOS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.omicron">
            <summary>
            GREEK SMALL LETTER OMICRON
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.omicrontonos">
            <summary>
            GREEK SMALL LETTER OMICRON WITH TONOS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.one">
            <summary>
            DIGIT ONE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.onedotenleader">
            <summary>
            ONE DOT LEADER
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.oneeighth">
            <summary>
            VULGAR FRACTION ONE EIGHTH
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.onehalf">
            <summary>
            VULGAR FRACTION ONE HALF
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.onequarter">
            <summary>
            VULGAR FRACTION ONE QUARTER
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.onethird">
            <summary>
            VULGAR FRACTION ONE THIRD
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.openbullet">
            <summary>
            WHITE BULLET
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.ordfeminine">
            <summary>
            FEMININE ORDINAL INDICATOR
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.ordmasculine">
            <summary>
            MASCULINE ORDINAL INDICATOR
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.orthogonal">
            <summary>
            RIGHT ANGLE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.oslash">
            <summary>
            LATIN SMALL LETTER O WITH STROKE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.oslashacute">
            <summary>
            LATIN SMALL LETTER O WITH STROKE AND ACUTE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.otilde">
            <summary>
            LATIN SMALL LETTER O WITH TILDE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.p">
            <summary>
            LATIN SMALL LETTER P
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.paragraph">
            <summary>
            PILCROW SIGN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.parenleft">
            <summary>
            LEFT PARENTHESIS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.parenright">
            <summary>
            RIGHT PARENTHESIS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.partialdiff">
            <summary>
            PARTIAL DIFFERENTIAL
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.percent">
            <summary>
            PERCENT SIGN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.period">
            <summary>
            FULL STOP
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.periodcentered">
            <summary>
            MIDDLE DOT
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.perpendicular">
            <summary>
            UP TACK
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.perthousand">
            <summary>
            PER MILLE SIGN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.peseta">
            <summary>
            PESETA SIGN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.phi">
            <summary>
            GREEK SMALL LETTER PHI
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.phi1">
            <summary>
            GREEK PHI SYMBOL
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.pi">
            <summary>
            GREEK SMALL LETTER PI
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.plus">
            <summary>
            PLUS SIGN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.plusminus">
            <summary>
            PLUS-MINUS SIGN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.prescription">
            <summary>
            PRESCRIPTION TAKE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.product">
            <summary>
            N-ARY PRODUCT
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.propersubset">
            <summary>
            SUBSET OF
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.propersuperset">
            <summary>
            SUPERSET OF
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.proportional">
            <summary>
            PROPORTIONAL TO
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.psi">
            <summary>
            GREEK SMALL LETTER PSI
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.q">
            <summary>
            LATIN SMALL LETTER Q
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.question">
            <summary>
            QUESTION MARK
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.questiondown">
            <summary>
            INVERTED QUESTION MARK
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.quotedbl">
            <summary>
            QUOTATION MARK
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.quotedblbase">
            <summary>
            DOUBLE LOW-9 QUOTATION MARK
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.quotedblleft">
            <summary>
            LEFT DOUBLE QUOTATION MARK
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.quotedblright">
            <summary>
            RIGHT DOUBLE QUOTATION MARK
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.quoteleft">
            <summary>
            LEFT SINGLE QUOTATION MARK
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.quotereversed">
            <summary>
            SINGLE HIGH-REVERSED-9 QUOTATION MARK
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.quoteright">
            <summary>
            RIGHT SINGLE QUOTATION MARK
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.quotesinglbase">
            <summary>
            SINGLE LOW-9 QUOTATION MARK
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.quotesingle">
            <summary>
            APOSTROPHE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.r">
            <summary>
            LATIN SMALL LETTER R
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.racute">
            <summary>
            LATIN SMALL LETTER R WITH ACUTE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.radical">
            <summary>
            SQUARE ROOT
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.rcaron">
            <summary>
            LATIN SMALL LETTER R WITH CARON
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.rcommaaccent">
            <summary>
            LATIN SMALL LETTER R WITH CEDILLA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.reflexsubset">
            <summary>
            SUBSET OF OR EQUAL TO
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.reflexsuperset">
            <summary>
            SUPERSET OF OR EQUAL TO
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.registered">
            <summary>
            REGISTERED SIGN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.revlogicalnot">
            <summary>
            REVERSED NOT SIGN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.rho">
            <summary>
            GREEK SMALL LETTER RHO
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.ring">
            <summary>
            RING ABOVE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.rtblock">
            <summary>
            RIGHT HALF BLOCK
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.s">
            <summary>
            LATIN SMALL LETTER S
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.sacute">
            <summary>
            LATIN SMALL LETTER S WITH ACUTE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.scaron">
            <summary>
            LATIN SMALL LETTER S WITH CARON
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.scedilla">
            <summary>
            LATIN SMALL LETTER S WITH CEDILLA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.scircumflex">
            <summary>
            LATIN SMALL LETTER S WITH CIRCUMFLEX
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.scommaaccent">
            <summary>
            LATIN SMALL LETTER S WITH COMMA BELOW
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.second">
            <summary>
            DOUBLE PRIME
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.section">
            <summary>
            SECTION SIGN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.semicolon">
            <summary>
            SEMICOLON
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.seven">
            <summary>
            DIGIT SEVEN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.seveneighths">
            <summary>
            VULGAR FRACTION SEVEN EIGHTHS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.shade">
            <summary>
            MEDIUM SHADE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.sigma">
            <summary>
            GREEK SMALL LETTER SIGMA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.sigma1">
            <summary>
            GREEK SMALL LETTER FINAL SIGMA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.similar">
            <summary>
            TILDE OPERATOR
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.six">
            <summary>
            DIGIT SIX
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.slash">
            <summary>
            SOLIDUS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.smileface">
            <summary>
            WHITE SMILING FACE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.space">
            <summary>
            SPACE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.spade">
            <summary>
            BLACK SPADE SUIT
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.sterling">
            <summary>
            POUND SIGN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.suchthat">
            <summary>
            CONTAINS AS MEMBER
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.summation">
            <summary>
            N-ARY SUMMATION
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.sun">
            <summary>
            WHITE SUN WITH RAYS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.t">
            <summary>
            LATIN SMALL LETTER T
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.tau">
            <summary>
            GREEK SMALL LETTER TAU
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.tbar">
            <summary>
            LATIN SMALL LETTER T WITH STROKE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.tcaron">
            <summary>
            LATIN SMALL LETTER T WITH CARON
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.tcommaaccent">
            <summary>
            LATIN SMALL LETTER T WITH CEDILLA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.therefore">
            <summary>
            THEREFORE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.theta">
            <summary>
            GREEK SMALL LETTER THETA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.theta1">
            <summary>
            GREEK THETA SYMBOL
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.thorn">
            <summary>
            LATIN SMALL LETTER THORN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.three">
            <summary>
            DIGIT THREE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.threeeighths">
            <summary>
            VULGAR FRACTION THREE EIGHTHS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.threequarters">
            <summary>
            VULGAR FRACTION THREE QUARTERS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.tilde">
            <summary>
            SMALL TILDE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.tildecomb">
            <summary>
            COMBINING TILDE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.tonos">
            <summary>
            GREEK TONOS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.trademark">
            <summary>
            TRADE MARK SIGN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.triagdn">
            <summary>
            BLACK DOWN-POINTING TRIANGLE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.triaglf">
            <summary>
            BLACK LEFT-POINTING POINTER
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.triagrt">
            <summary>
            BLACK RIGHT-POINTING POINTER
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.triagup">
            <summary>
            BLACK UP-POINTING TRIANGLE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.two">
            <summary>
            DIGIT TWO
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.twodotenleader">
            <summary>
            TWO DOT LEADER
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.twothirds">
            <summary>
            VULGAR FRACTION TWO THIRDS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.u">
            <summary>
            LATIN SMALL LETTER U
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.uacute">
            <summary>
            LATIN SMALL LETTER U WITH ACUTE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.ubreve">
            <summary>
            LATIN SMALL LETTER U WITH BREVE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.ucircumflex">
            <summary>
            LATIN SMALL LETTER U WITH CIRCUMFLEX
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.udieresis">
            <summary>
            LATIN SMALL LETTER U WITH DIAERESIS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.ugrave">
            <summary>
            LATIN SMALL LETTER U WITH GRAVE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.uhorn">
            <summary>
            LATIN SMALL LETTER U WITH HORN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.uhungarumlaut">
            <summary>
            LATIN SMALL LETTER U WITH DOUBLE ACUTE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.umacron">
            <summary>
            LATIN SMALL LETTER U WITH MACRON
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.underscore">
            <summary>
            LOW LINE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.underscoredbl">
            <summary>
            DOUBLE LOW LINE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.union">
            <summary>
            UNION
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.universal">
            <summary>
            FOR ALL
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.uogonek">
            <summary>
            LATIN SMALL LETTER U WITH OGONEK
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.upblock">
            <summary>
            UPPER HALF BLOCK
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.upsilon">
            <summary>
            GREEK SMALL LETTER UPSILON
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.upsilondieresis">
            <summary>
            GREEK SMALL LETTER UPSILON WITH DIALYTIKA
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.upsilondieresistonos">
            <summary>
            GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND TONOS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.upsilontonos">
            <summary>
            GREEK SMALL LETTER UPSILON WITH TONOS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.uring">
            <summary>
            LATIN SMALL LETTER U WITH RING ABOVE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.utilde">
            <summary>
            LATIN SMALL LETTER U WITH TILDE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.v">
            <summary>
            LATIN SMALL LETTER V
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.w">
            <summary>
            LATIN SMALL LETTER W
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.wacute">
            <summary>
            LATIN SMALL LETTER W WITH ACUTE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.wcircumflex">
            <summary>
            LATIN SMALL LETTER W WITH CIRCUMFLEX
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.wdieresis">
            <summary>
            LATIN SMALL LETTER W WITH DIAERESIS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.weierstrass">
            <summary>
            SCRIPT CAPITAL P
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.wgrave">
            <summary>
            LATIN SMALL LETTER W WITH GRAVE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.x">
            <summary>
            LATIN SMALL LETTER X
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.xi">
            <summary>
            GREEK SMALL LETTER XI
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.y">
            <summary>
            LATIN SMALL LETTER Y
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.yacute">
            <summary>
            LATIN SMALL LETTER Y WITH ACUTE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.ycircumflex">
            <summary>
            LATIN SMALL LETTER Y WITH CIRCUMFLEX
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.ydieresis">
            <summary>
            LATIN SMALL LETTER Y WITH DIAERESIS
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.yen">
            <summary>
            YEN SIGN
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.ygrave">
            <summary>
            LATIN SMALL LETTER Y WITH GRAVE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.z">
            <summary>
            LATIN SMALL LETTER Z
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.zacute">
            <summary>
            LATIN SMALL LETTER Z WITH ACUTE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.zcaron">
            <summary>
            LATIN SMALL LETTER Z WITH CARON
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.zdotaccent">
            <summary>
            LATIN SMALL LETTER Z WITH DOT ABOVE
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.zero">
            <summary>
            DIGIT ZERO
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Fonts.AdobeGlyphListForNewFonts.zeta">
            <summary>
            GREEK SMALL LETTER ZETA
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Fonts.CMapInfo">
            <summary>
            Helper class that determines the characters used in a particular font.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.CMapInfo.AddChars(System.String)">
            <summary>
            Adds the characters of the specified string to the hashtable.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.CMapInfo.AddGlyphIndices(System.String)">
            <summary>
            Adds the glyphIndices to the hashtable.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.CMapInfo.AddAnsiChars">
            <summary>
            Adds a ANSI characters.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Fonts.FontDescriptorStock">
            <summary>
            Global table of TrueType fontdescriptor objects.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.FontDescriptorStock.FindDescriptor(Alt.GUI.PdfSharp.Fonts.FontDescriptorStock.FontSelector)">
            <summary>
            Gets the FontDescriptor identified by the specified FontSelector. Returns null if no
            such objects exists.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.FontDescriptorStock.CreateDescriptor(Alt.GUI.PdfSharp.Drawing.XFont)">
            <summary>
            Gets the FontDescriptor identified by the specified FontSelector. If no such objects 
            exists, a new FontDescriptor is created and added to the stock.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.FontDescriptorStock.CreateDescriptor(Alt.GUI.PdfSharp.Drawing.XFontFamily,Alt.GUI.PdfSharp.Drawing.XFontStyle)">
            <summary>
            Gets the FontDescriptor identified by the specified FontSelector. If no such objects 
            exists, a new FontDescriptor is created and added to the stock.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Fonts.FontDescriptorStock.FontSelector">
            <summary>
            A collection of information that uniquely identifies a particular font.
            Used to map XFont to PdfFont.
            There is a one to one relationship between a FontSelector and a TrueType/OpenType file.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Fonts.FontDescriptorStock.FontSelector.ToString">
            <summary>
            Returns a string for diagnostic purposes only.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Internal.Calc">
            <summary>
            Some static helper functions for calculations.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Internal.Calc.Deg2Rad">
            <summary>
            Degree to radiant factor.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Internal.Calc.πHalf">
            <summary>
            Half of pi.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Internal.Calc.PageSizeToSize(Alt.GUI.PdfSharp.PageSize)">
            <summary>
            Get page size in point from specified PageSize.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Internal.DoubleUtil">
            <summary>
            Some floating point utilities. Partially reflected from WPF, later equalized with original source code.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Internal.DoubleUtil.AreClose(System.Double,System.Double)">
            <summary>
            Indicates whether the values are so close that they can be considered as equal.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Internal.DoubleUtil.AreRoughlyEqual(System.Double,System.Double,System.Int32)">
            <summary>
            Indicates whether the values are so close that they can be considered as equal.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Internal.DoubleUtil.AreClose(Alt.GUI.PdfSharp.Drawing.XPoint,Alt.GUI.PdfSharp.Drawing.XPoint)">
            <summary>
            Indicates whether the values are so close that they can be considered as equal.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Internal.DoubleUtil.AreClose(Alt.GUI.PdfSharp.Drawing.XRect,Alt.GUI.PdfSharp.Drawing.XRect)">
            <summary>
            Indicates whether the values are so close that they can be considered as equal.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Internal.DoubleUtil.AreClose(Alt.GUI.PdfSharp.Drawing.XSize,Alt.GUI.PdfSharp.Drawing.XSize)">
            <summary>
            Indicates whether the values are so close that they can be considered as equal.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Internal.DoubleUtil.AreClose(Alt.GUI.PdfSharp.Drawing.XVector,Alt.GUI.PdfSharp.Drawing.XVector)">
            <summary>
            Indicates whether the values are so close that they can be considered as equal.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Internal.DoubleUtil.GreaterThan(System.Double,System.Double)">
            <summary>
            Indicates whether value1 is greater than value2 and the values are not close to each other.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Internal.DoubleUtil.GreaterThanOrClose(System.Double,System.Double)">
            <summary>
            Indicates whether value1 is greater than value2 or the values are close to each other.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Internal.DoubleUtil.LessThan(System.Double,System.Double)">
            <summary>
            Indicates whether value1 is less than value2 and the values are not close to each other.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Internal.DoubleUtil.LessThanOrClose(System.Double,System.Double)">
            <summary>
            Indicates whether value1 is less than value2 or the values are close to each other.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Internal.DoubleUtil.IsBetweenZeroAndOne(System.Double)">
            <summary>
            Indicates whether the value is between 0 and 1 or close to 0 or 1.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Internal.DoubleUtil.IsNaN(System.Double)">
            <summary>
            Indicates whether the value is not a number.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Internal.DoubleUtil.RectHasNaN(Alt.GUI.PdfSharp.Drawing.XRect)">
            <summary>
            Indicates whether at least one of the four rectangle values is not a number.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Internal.DoubleUtil.IsOne(System.Double)">
            <summary>
            Indicates whether the value is 1 or close to 1.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Internal.DoubleUtil.IsZero(System.Double)">
            <summary>
            Indicates whether the value is 0 or close to 0.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Internal.DoubleUtil.DoubleToInt(System.Double)">
            <summary>
            Converts a double to integer.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroFieldFlags">
            <summary>
            Specifies the flags of AcroForm fields.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroFieldFlags.ReadOnly">
            <summary>
            If set, the user may not change the value of the field. Any associated widget
            annotations will not interact with the user; that is, they will not respond to 
            mouse clicks or change their appearance in response to mouse motions. This
            flag is useful for fields whose values are computed or imported from a database.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroFieldFlags.Required">
            <summary>
            If set, the field must have a value at the time it is exported by a submit-form action.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroFieldFlags.NoExport">
            <summary>
            If set, the field must not be exported by a submit-form action.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroFieldFlags.Pushbutton">
            <summary>
            If set, the field is a pushbutton that does not retain a permanent value.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroFieldFlags.Radio">
            <summary>
            If set, the field is a set of radio buttons; if clear, the field is a checkbox.
            This flag is meaningful only if the Pushbutton flag is clear.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroFieldFlags.NoToggleToOff">
            <summary>
            (Radio buttons only) If set, exactly one radio button must be selected at all times;
            clicking the currently selected button has no effect. If clear, clicking
            the selected button deselects it, leaving no button selected.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroFieldFlags.Multiline">
            <summary>
            If set, the field may contain multiple lines of text; if clear, the field’s text
            is restricted to a single line.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroFieldFlags.Password">
            <summary>
            If set, the field is intended for entering a secure password that should
            not be echoed visibly to the screen. Characters typed from the keyboard
            should instead be echoed in some unreadable form, such as
            asterisks or bullet characters.
            To protect password confidentiality, viewer applications should never
            store the value of the text field in the PDF file if this flag is set.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroFieldFlags.FileSelect">
            <summary>
            (PDF 1.4) If set, the text entered in the field represents the pathname of
            a file whose contents are to be submitted as the value of the field.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroFieldFlags.DoNotSpellCheckTextField">
            <summary>
            (PDF 1.4) If set, the text entered in the field will not be spell-checked.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroFieldFlags.DoNotScroll">
            <summary>
            (PDF 1.4) If set, the field will not scroll (horizontally for single-line
            fields, vertically for multiple-line fields) to accommodate more text
            than will fit within its annotation rectangle. Once the field is full, no
            further text will be accepted.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroFieldFlags.Combo">
            <summary>
            If set, the field is a combo box; if clear, the field is a list box.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroFieldFlags.Edit">
            <summary>
            If set, the combo box includes an editable text box as well as a drop list;
            if clear, it includes only a drop list. This flag is meaningful only if the
            Combo flag is set.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroFieldFlags.Sort">
            <summary>
            If set, the field’s option items should be sorted alphabetically. This flag is
            intended for use by form authoring tools, not by PDF viewer applications;
            viewers should simply display the options in the order in which they occur 
            in the Opt array.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroFieldFlags.MultiSelect">
            <summary>
            (PDF 1.4) If set, more than one of the field’s option items may be selected
            simultaneously; if clear, no more than one item at a time may be selected.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroFieldFlags.DoNotSpellCheckChoiseField">
            <summary>
            (PDF 1.4) If set, the text entered in the field will not be spell-checked.
            This flag is meaningful only if the Combo and Edit flags are both set.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroField">
            <summary>
            Represents the base class for all interactive field dictionaries.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfDictionary">
            <summary>
            Represents a PDF dictionary object.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfObject">
            <summary>
            Base class of all composite PDF objects.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfItem">
            <summary>
            The base class of all PDF objects and simple types.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfItem.Clone">
            <summary>
            Creates a copy of this object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfItem.Copy">
            <summary>
            Implements the copy mechanism. Must be overridden in derived classes.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfItem.WriteObject(Alt.GUI.PdfSharp.Pdf.IO.PdfWriter)">
            <summary>
            When overridden in a derived class, appends a raw string representation of this object
            to the specified PdfWriter.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfObject"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfObject.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfObject"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfObject.#ctor(Alt.GUI.PdfSharp.Pdf.PdfObject)">
            <summary>
            Initializes a new instance from an existing object. Used for object type transformation.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfObject.Clone">
            <summary>
            Creates a copy of this object. The clone does not belong to a document, i.e. its owner and its iref are null.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfObject.Copy">
            <summary>
            Implements the copy mechanism. Must be overridden in derived classes.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfObject.SetObjectID(System.Int32,System.Int32)">
            <summary>
            Sets the object and generation number
            Setting the object identifier makes this object an indirect object, i.e. the object gets
            a PdfReference entry in the PdfReferenceTable.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfObject.PrepareForSave">
            <summary>
            When overridden in a derived class, prepares the object to get saved.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfObject.WriteObject(Alt.GUI.PdfSharp.Pdf.IO.PdfWriter)">
            <summary>
            Saves the stream position. 2nd Edition.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfObject.DeepCopyClosure(Alt.GUI.PdfSharp.Pdf.PdfDocument,Alt.GUI.PdfSharp.Pdf.PdfObject)">
            <param name="owner">The document that owns the cloned objects.</param>
            <param name="externalObject">The root object to be cloned.</param>
            <returns>The clone of the root object</returns>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfObject.ImportClosure(Alt.GUI.PdfSharp.Pdf.Advanced.PdfImportedObjectTable,Alt.GUI.PdfSharp.Pdf.PdfDocument,Alt.GUI.PdfSharp.Pdf.PdfObject)">
            <param name="importedObjectTable">The imported object table of the owner for the external document.</param>
            <param name="owner">The document that owns the cloned objects.</param>
            <param name="externalObject">The root object to be cloned.</param>
            <returns>The clone of the root object</returns>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfObject.FixUpObject(Alt.GUI.PdfSharp.Pdf.Advanced.PdfImportedObjectTable,Alt.GUI.PdfSharp.Pdf.PdfDocument,Alt.GUI.PdfSharp.Pdf.PdfObject)">
            <summary>
            Replace all indirect references to external objects by their cloned counterparts
            owned by the importer document.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfObject.Owner">
            <summary>
            Gets the PdfDocument this object belongs to.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfObject.Document">
            <summary>
            Gets or sets the PdfDocument this object belongs to.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfObject.IsIndirect">
            <summary>
            Indicates whether the object is an indirect object.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfObject.Internals">
            <summary>
            Gets the PdfInternals object of this document, that grants access to some internal structures
            which are not part of the public interface of PdfDocument.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfObject.ObjectID">
            <summary>
            Gets the object identifier. Returns PdfObjectID.Empty for direct objects.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfObject.ObjectNumber">
            <summary>
            Gets the object number.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfObject.GenerationNumber">
            <summary>
            Gets the generation number.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfObject.Reference">
            <summary>
            Gets the indirect reference of this object. If the value is null, this object is a direct object.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfDictionary.elements">
            <summary>
            The elements of the dictionary.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfDictionary"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfDictionary"/> class.
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDictionary)">
            <summary>
            Initializes a new instance from an existing dictionary. Used for object type transformation.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.Clone">
            <summary>
            Creates a copy of this dictionary. Direct values are deep copied. Indirect references are not
            modified.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.Copy">
            <summary>
            This function is useful for importing objects from external documents. The returned object is not
            yet complete. irefs refer to external objects and directed objects are cloned but their document
            property is null. A cloned dictionary or array needs a 'fix-up' to be a valid object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.ToString">
            <summary>
            Returns a string with the content of this object in a readable form. Useful for debugging purposes only.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.WriteDictionaryElement(Alt.GUI.PdfSharp.Pdf.IO.PdfWriter,Alt.GUI.PdfSharp.Pdf.PdfName)">
            <summary>
            Writes a key/value pair of this dictionary. This function is intended to be overridden
            in derived classes.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.WriteDictionaryStream(Alt.GUI.PdfSharp.Pdf.IO.PdfWriter)">
            <summary>
            Writes the stream of this dictionary. This function is intended to be overridden
            in a derived class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.CreateStream(System.Byte[])">
            <summary>
            Creates the stream of this dictionary and initializes it with the specified byte array.
            The function must not be called if the dictionary already has a stream.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDictionary.Elements">
            <summary>
            Gets the hashtable containing the elements of this dictionary.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDictionary.Stream">
            <summary>
            Gets or sets the PDF stream belonging to this dictionary. Returns null if the dictionary has
            no stream. To create the stream, call the CreateStream function.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDictionary.Meta">
            <summary>
            When overridden in a derived class, gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements">
            <summary>
            Represents the interface to the elements of a PDF dictionary.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.Clone">
            <summary>
            Creates a shallow copy of this object. The clone is not owned by a dictionary anymore.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.ChangeOwner(Alt.GUI.PdfSharp.Pdf.PdfDictionary)">
            <summary>
            Moves this instance to another dictionary during object type transformation.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.GetBoolean(System.String,System.Boolean)">
            <summary>
            Converts the specified value to boolean.
            If the value not exists, the function returns false.
            If the value is not convertible, the function throws an InvalidCastException.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.GetBoolean(System.String)">
            <summary>
            Converts the specified value to boolean.
            If the value not exists, the function returns false.
            If the value is not convertible, the function throws an InvalidCastException.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.SetBoolean(System.String,System.Boolean)">
            <summary>
            Sets the entry to a direct boolean value.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.GetInteger(System.String,System.Boolean)">
            <summary>
            Converts the specified value to integer.
            If the value not exists, the function returns 0.
            If the value is not convertible, the function throws an InvalidCastException.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.GetInteger(System.String)">
            <summary>
            Converts the specified value to integer.
            If the value not exists, the function returns 0.
            If the value is not convertible, the function throws an InvalidCastException.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.SetInteger(System.String,System.Int32)">
            <summary>
            Sets the entry to a direct integer value.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.GetReal(System.String,System.Boolean)">
            <summary>
            Converts the specified value to double.
            If the value not exists, the function returns 0.
            If the value is not convertible, the function throws an InvalidCastException.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.GetReal(System.String)">
            <summary>
            Converts the specified value to double.
            If the value not exists, the function returns 0.
            If the value is not convertible, the function throws an InvalidCastException.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.SetReal(System.String,System.Double)">
            <summary>
            Sets the entry to a direct double value.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.GetString(System.String,System.Boolean)">
            <summary>
            Converts the specified value to String.
            If the value not exists, the function returns the empty string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.GetString(System.String)">
            <summary>
            Converts the specified value to String.
            If the value not exists, the function returns the empty string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.SetString(System.String,System.String)">
            <summary>
            Sets the entry to a direct string value.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.GetName(System.String)">
            <summary>
            Converts the specified value to a name.
            If the value not exists, the function returns the empty string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.SetName(System.String,System.String)">
            <summary>
            Sets the specified name value.
            If the value doesn't start with a slash, it is added automatically.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.GetRectangle(System.String,System.Boolean)">
            <summary>
            Converts the specified value to PdfRectangle.
            If the value not exists, the function returns an empty rectangle.
            If the value is not convertible, the function throws an InvalidCastException.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.GetRectangle(System.String)">
            <summary>
            Converts the specified value to PdfRectangle.
            If the value not exists, the function returns an empty rectangle.
            If the value is not convertible, the function throws an InvalidCastException.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.SetRectangle(System.String,Alt.GUI.PdfSharp.Pdf.PdfRectangle)">
            <summary>
            Sets the entry to a direct rectangle value, represented by an array with four values.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.GetMatrix(System.String,System.Boolean)">
            Converts the specified value to XMatrix.
            If the value not exists, the function returns an identity matrix.
            If the value is not convertible, the function throws an InvalidCastException.
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.GetMatrix(System.String)">
            Converts the specified value to XMatrix.
            If the value not exists, the function returns an identity matrix.
            If the value is not convertible, the function throws an InvalidCastException.
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.SetMatrix(System.String,Alt.GUI.PdfSharp.Drawing.XMatrix)">
            <summary>
            Sets the entry to a direct matrix value, represented by an array with six values.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.GetDateTime(System.String,System.DateTime)">
            <summary>
            Converts the specified value to DateTime.
            If the value not exists, the function returns the specified default value.
            If the value is not convertible, the function throws an InvalidCastException.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.SetDateTime(System.String,System.DateTime)">
            <summary>
            Sets the entry to a direct datetime value.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.GetValue(System.String,Alt.GUI.PdfSharp.Pdf.VCF)">
            <summary>
            Gets the value for the specified key. If the value does not exist, it is optionally created.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.GetValue(System.String)">
            <summary>
            Short cut for GetValue(key, VCF.None).
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.GetValueType(System.String)">
            <summary>
            Returns the type of the object to be created as value of the specified key.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.SetValue(System.String,Alt.GUI.PdfSharp.Pdf.PdfItem)">
            <summary>
            Sets the entry with the specified value. DON'T USE THIS FUNCTION - IT MAY BE REMOVED.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.GetIndirectObject(System.String)">
            <summary>
            Returns the indirect object if the value of the specified key is a PdfReference.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.GetObject(System.String)">
            <summary>
            Gets the PdfObject with the specified key, or null, if no such object exists. If the key refers to
            a reference, the referenced PdfObject is returned.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.GetDictionary(System.String)">
            <summary>
            Gets the PdfArray with the specified key, or null, if no such object exists. If the key refers to
            a reference, the referenced PdfDictionary is returned.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.GetArray(System.String)">
            <summary>
            Gets the PdfArray with the specified key, or null, if no such object exists. If the key refers to
            a reference, the referenced PdfArray is returned.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.GetReference(System.String)">
            <summary>
            Gets the PdfReference with the specified key, or null, if no such object exists.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.SetObject(System.String,Alt.GUI.PdfSharp.Pdf.PdfObject)">
            <summary>
            Sets the entry to the specified object. The object must not be an indirect object,
            otherwise an exception is raised.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.SetReference(System.String,Alt.GUI.PdfSharp.Pdf.PdfObject)">
            <summary>
            Sets the entry as a reference to the specified object. The object must be an indirect object,
            otherwise an exception is raised.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IDictionaryEnumerator"></see> object for the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.Remove(System.String)">
            <summary>
            Removes the value with the specified key.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.Remove(System.Collections.Generic.KeyValuePair{System.String,Alt.GUI.PdfSharp.Pdf.PdfItem})">
            <summary>
            Removes the value with the specified key.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.Contains(System.String)">
            <summary>
            Determines whether the dictionary contains the specified name.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.ContainsKey(System.String)">
            <summary>
            Determines whether the dictionary contains the specified name.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.Contains(System.Collections.Generic.KeyValuePair{System.String,Alt.GUI.PdfSharp.Pdf.PdfItem})">
            <summary>
            Determines whether the dictionary contains a specific value.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.Clear">
            <summary>
            Removes all elements from the dictionary.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.Add(System.String,Alt.GUI.PdfSharp.Pdf.PdfItem)">
            <summary>
            Adds the specified value to the dictionary.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.Add(System.Collections.Generic.KeyValuePair{System.String,Alt.GUI.PdfSharp.Pdf.PdfItem})">
            <summary>
            Adds an item to the dictionary.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.TryGetValue(System.String,Alt.GUI.PdfSharp.Pdf.PdfItem@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.CopyTo(System.Collections.Generic.KeyValuePair{System.String,Alt.GUI.PdfSharp.Pdf.PdfItem}[],System.Int32)">
            <summary>
            Copies the elements of the dictionary to an array, starting at a particular index.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.Owner">
            <summary>
            Gets the dictionary that this elements object belongs to.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"></see> object is read-only.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.Item(System.String)">
            <summary>
            Gets or sets an entry in the dictionary. The specified key must be a valid PDF name
            starting with a slash '/'. This property provides full access to the elements of the
            PDF dictionary. Wrong use can lead to errors or corrupt PDF files.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.Item(Alt.GUI.PdfSharp.Pdf.PdfName)">
            <summary>
            Gets or sets an entry in the dictionary identified by a PdfName object.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.KeyNames">
            <summary>
            Gets all keys currently in use in this dictionary as an array of PdfName objects.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.Keys">
            <summary>
            Get all keys currently in use in this dictionary as an array of string objects.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.Values">
            <summary>
            Gets all values currently in use in this dictionary as an array of PdfItem objects.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.IsFixedSize">
            <summary>
            Return false.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.IsSynchronized">
            <summary>
            Return false.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.Count">
            <summary>
            Gets the number of elements contained in the dictionary.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDictionary.DictionaryElements.SyncRoot">
            <summary>
            The current implementation returns null.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfDictionary.PdfStream">
            <summary>
            The PDF stream objects.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfDictionary.PdfStream.owner">
            <summary>
            The dictionary the stream belongs to.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.PdfStream.#ctor(System.Byte[],Alt.GUI.PdfSharp.Pdf.PdfDictionary)">
            <summary>
            A .NET string can contain char(0) as a valid character.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.PdfStream.Clone">
            <summary>
            Clones this stream by creating a deep copy.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.PdfStream.SetOwner(Alt.GUI.PdfSharp.Pdf.PdfDictionary)">
            <summary>
            Moves this instance to another dictionary during object type transformation.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.PdfStream.TryUnfilter">
            <summary>
            Tries to unfilter the bytes of the stream. If the stream is filtered and PDFsharp knows the filter
            algorithm, the stream content is replaced by its unfiltered value and the function returns true.
            Otherwise the content remains untouched and the function returns false.
            The function is useful for analyzing existing PDF files.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.PdfStream.Zip">
            <summary>
            Compresses the stream with the FlateDecode filter.
            If a filter is already defined, the function has no effect.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.PdfStream.ToString">
            <summary>
            Returns the stream content as a raw string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDictionary.PdfStream.RawEncode(System.String)">
            <summary>
            Converts a raw encoded string into a byte array.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDictionary.PdfStream.Length">
            <summary>
            Gets the length of the stream, i.e. the actual number of bytes in the stream.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDictionary.PdfStream.Value">
            <summary>
            Get or sets the bytes of the stream as they are, i.e. if one or more filters exists the bytes are
            not unfiltered.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDictionary.PdfStream.UnfilteredValue">
            <summary>
            Gets the value of the stream unfiltered. The stream content is not modified by this operation.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfDictionary.PdfStream.Keys">
            <summary>
            Common keys for all streams.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.KeysBase">
            <summary>
            Base class for all dictionary Keys classes.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfDictionary.PdfStream.Keys.Length">
            <summary>
            (Required) The number of bytes from the beginning of the line following the keyword
            stream to the last byte just before the keyword endstream. (There may be an additional
            EOL marker, preceding endstream, that is not included in the count and is not logically
            part of the stream data.)
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfDictionary.PdfStream.Keys.Filter">
            <summary>
            (Optional) The name of a filter to be applied in processing the stream data found between
            the keywords stream and endstream, or an array of such names. Multiple filters should be
            specified in the order in which they are to be applied.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfDictionary.PdfStream.Keys.DecodeParms">
            <summary>
            (Optional) A parameter dictionary or an array of such dictionaries, used by the filters
            specified by Filter. If there is only one filter and that filter has parameters, DecodeParms
            must be set to the filter’s parameter dictionary unless all the filter’s parameters have
            their default values, in which case the DecodeParms entry may be omitted. If there are 
            multiple filters and any of the filters has parameters set to nondefault values, DecodeParms
            must be an array with one entry for each filter: either the parameter dictionary for that
            filter, or the null object if that filter has no parameters (or if all of its parameters have
            their default values). If none of the filters have parameters, or if all their parameters
            have default values, the DecodeParms entry may be omitted.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfDictionary.PdfStream.Keys.F">
            <summary>
            (Optional; PDF 1.2) The file containing the stream data. If this entry is present, the bytes
            between stream and endstream are ignored, the filters are specified by FFilter rather than
            Filter, and the filter parameters are specified by FDecodeParms rather than DecodeParms.
            However, the Length entry should still specify the number of those bytes. (Usually, there are
            no bytes and Length is 0.)
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfDictionary.PdfStream.Keys.FFilter">
            <summary>
            (Optional; PDF 1.2) The name of a filter to be applied in processing the data found in the
            stream’s external file, or an array of such names. The same rules apply as for Filter.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfDictionary.PdfStream.Keys.FDecodeParms">
            <summary>
            (Optional; PDF 1.2) A parameter dictionary, or an array of such dictionaries, used by the
            filters specified by FFilter. The same rules apply as for DecodeParms.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfDictionary.PdfStream.Keys.DL">
            <summary>
            Optional; PDF 1.5) A non-negative integer representing the number of bytes in the decoded
            (defiltered) stream. It can be used to determine, for example, whether enough disk space is
            available to write a stream to a file.
            This value should be considered a hint only; for some stream filters, it may not be possible
            to determine this value precisely.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroField.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of PdfAcroField.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroField.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroField"/> class. Used for type transformation.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroField.GetValue(System.String)">
            <summary>
            Gets a child field by name.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroField.Name">
            <summary>
            Gets the name of this field.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroField.Flags">
            <summary>
            Gets the field flags of this instance.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroField.Value">
            <summary>
            Gets or sets the value of the field.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroField.ReadOnly">
            <summary>
            Gets or sets a value indicating whether the field is read only.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroField.Item(System.String)">
            <summary>
            Gets the field with the specified name.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroField.HasKids">
            <summary>
            Indicates whether the field has child fields.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroField.DescendantNames">
            <summary>
            Gets the names of all descendants of this field.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroField.Fields">
            <summary>
            Gets the collection of fields within this field.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroField.PdfAcroFieldCollection">
            <summary>
            Holds a collection of interactive fields.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfArray">
            <summary>
            Represents a PDF array object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfArray"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfArray.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfArray"/> class.
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfArray.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument,Alt.GUI.PdfSharp.Pdf.PdfItem[])">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfArray"/> class.
            </summary>
            <param name="document">The document.</param>
            <param name="items">The items.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfArray.#ctor(Alt.GUI.PdfSharp.Pdf.PdfArray)">
            <summary>
            Initializes a new instance from an existing dictionary. Used for object type transformation.
            </summary>
            <param name="array">The array.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfArray.Clone">
            <summary>
            Creates a copy of this array. Direct elements are deep copied. Indirect references are not
            modified.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfArray.Copy">
            <summary>
            Implements the copy mechanism.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfArray.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfArray.ToString">
            <summary>
            Returns a string with the content of this object in a readable form. Useful for debugging purposes only.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfArray.Elements">
            <summary>
            Gets the collection containing the elements of this object.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfArray.ArrayElements">
            <summary>
            Represents the elements of an PdfArray.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfArray.ArrayElements.Clone">
            <summary>
            Creates a shallow copy of this object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfArray.ArrayElements.SetOwner(Alt.GUI.PdfSharp.Pdf.PdfArray)">
            <summary>
            Moves this instance to another dictionary during object type transformation.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfArray.ArrayElements.GetBoolean(System.Int32)">
            <summary>
            Converts the specified value to boolean.
            If the value not exists, the function returns false.
            If the value is not convertible, the function throws an InvalidCastException.
            If the index is out of range, the function throws an ArgumentOutOfRangeException.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfArray.ArrayElements.GetInteger(System.Int32)">
            <summary>
            Converts the specified value to integer.
            If the value not exists, the function returns 0.
            If the value is not convertible, the function throws an InvalidCastException.
            If the index is out of range, the function throws an ArgumentOutOfRangeException.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfArray.ArrayElements.GetReal(System.Int32)">
            <summary>
            Converts the specified value to double.
            If the value not exists, the function returns 0.
            If the value is not convertible, the function throws an InvalidCastException.
            If the index is out of range, the function throws an ArgumentOutOfRangeException.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfArray.ArrayElements.GetString(System.Int32)">
            <summary>
            Converts the specified value to string.
            If the value not exists, the function returns the empty string.
            If the value is not convertible, the function throws an InvalidCastException.
            If the index is out of range, the function throws an ArgumentOutOfRangeException.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfArray.ArrayElements.GetName(System.Int32)">
            <summary>
            Converts the specified value to a name.
            If the value not exists, the function returns the empty string.
            If the value is not convertible, the function throws an InvalidCastException.
            If the index is out of range, the function throws an ArgumentOutOfRangeException.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfArray.ArrayElements.GetIndirectObject(System.Int32)">
            <summary>
            Returns the indirect object if the value at the specified index is a PdfReference.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfArray.ArrayElements.GetObject(System.Int32)">
            <summary>
            Gets the PdfObject with the specified index, or null, if no such object exists. If the index refers to
            a reference, the referenced PdfObject is returned.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfArray.ArrayElements.GetDictionary(System.Int32)">
            <summary>
            Gets the PdfArray with the specified index, or null, if no such object exists. If the index refers to
            a reference, the referenced PdfArray is returned.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfArray.ArrayElements.GetArray(System.Int32)">
            <summary>
            Gets the PdfArray with the specified index, or null, if no such object exists. If the index refers to
            a reference, the referenced PdfArray is returned.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfArray.ArrayElements.GetReference(System.Int32)">
            <summary>
            Gets the PdfReference with the specified index, or null, if no such object exists.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfArray.ArrayElements.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfArray.ArrayElements.Remove(Alt.GUI.PdfSharp.Pdf.PdfItem)">
            <summary>
            Removes the first occurrence of a specific object from the array/>.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfArray.ArrayElements.Insert(System.Int32,Alt.GUI.PdfSharp.Pdf.PdfItem)">
            <summary>
            Inserts the item the specified index.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfArray.ArrayElements.Contains(Alt.GUI.PdfSharp.Pdf.PdfItem)">
            <summary>
            Determines whether the specified value is in the array.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfArray.ArrayElements.Clear">
            <summary>
            Removes all items from the array.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfArray.ArrayElements.IndexOf(Alt.GUI.PdfSharp.Pdf.PdfItem)">
            <summary>
            Gets the index of the specified item.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfArray.ArrayElements.Add(Alt.GUI.PdfSharp.Pdf.PdfItem)">
            <summary>
            Appends the specified object to the array.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfArray.ArrayElements.CopyTo(Alt.GUI.PdfSharp.Pdf.PdfItem[],System.Int32)">
            <summary>
            Copies the elements of the array to the specified array.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfArray.ArrayElements.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the array.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfArray.ArrayElements.Items">
            <summary>
            Gets all items of this array.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfArray.ArrayElements.IsReadOnly">
            <summary>
            Returns false.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfArray.ArrayElements.Item(System.Int32)">
            <summary>
            Gets or sets an item at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfArray.ArrayElements.IsFixedSize">
            <summary>
            Returns false.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfArray.ArrayElements.IsSynchronized">
            <summary>
            Returns false.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfArray.ArrayElements.Count">
            <summary>
            Gets the number of elements in the array.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfArray.ArrayElements.SyncRoot">
            <summary>
            The current implementation return null.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroField.PdfAcroFieldCollection.CreateAcroField(Alt.GUI.PdfSharp.Pdf.PdfDictionary)">
            <summary>
            Create a derived type like PdfTextField or PdfCheckBox if possible.
            If the actual cannot be guessed by PDFsharp the function returns an instance
            of PdfGenericField.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroField.PdfAcroFieldCollection.Names">
            <summary>
            Gets the names of all fields in the collection.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroField.PdfAcroFieldCollection.DescendantNames">
            <summary>
            Gets an array of all descendant names.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroField.PdfAcroFieldCollection.Item(System.Int32)">
            <summary>
            Gets a field from the collection. For your convenience an instance of a derived class like
            PdfTextField or PdfCheckBox is returned if PDFsharp can guess the actual type of the dictionary.
            If the actual type cannot be guessed by PDFsharp the function returns an instance
            of PdfGenericField.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroField.PdfAcroFieldCollection.Item(System.String)">
            <summary>
            Gets the field with the specified name.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroField.Keys">
            <summary>
            Predefined keys of this dictionary. 
            The description comes from PDF 1.4 Reference.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroField.Keys.FT">
            <summary>
            (Required for terminal fields; inheritable) The type of field that this dictionary
            describes:
              Btn           Button
              Tx            Text
              Ch            Choice
              Sig (PDF 1.3) Signature
            Note: This entry may be present in a nonterminal field (one whose descendants
            are themselves fields) in order to provide an inheritable FT value. However, a
            nonterminal field does not logically have a type of its own; it is merely a container
            for inheritable attributes that are intended for descendant terminal fields of
            any type.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroField.Keys.Parent">
            <summary>
            (Required if this field is the child of another in the field hierarchy; absent otherwise)
            The field that is the immediate parent of this one (the field, if any, whose Kids array
            includes this field). A field can have at most one parent; that is, it can be included
            in the Kids array of at most one other field.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroField.Keys.Kids">
            <summary>
            (Optional) An array of indirect references to the immediate children of this field.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroField.Keys.T">
            <summary>
            (Optional) The partial field name.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroField.Keys.TU">
            <summary>
            (Optional; PDF 1.3) An alternate field name, to be used in place of the actual
            field name wherever the field must be identified in the user interface (such as
            in error or status messages referring to the field). This text is also useful
            when extracting the document’s contents in support of accessibility to disabled
            users or for other purposes.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroField.Keys.TM">
            <summary>
            (Optional; PDF 1.3) The mapping name to be used when exporting interactive form field 
            data from the document.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroField.Keys.Ff">
            <summary>
            (Optional; inheritable) A set of flags specifying various characteristics of the field.
            Default value: 0.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroField.Keys.V">
            <summary>
            (Optional; inheritable) The field’s value, whose format varies depending on
            the field type; see the descriptions of individual field types for further information.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroField.Keys.DV">
            <summary>
            (Optional; inheritable) The default value to which the field reverts when a
            reset-form action is executed. The format of this value is the same as that of V.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroField.Keys.AA">
            <summary>
            (Optional; PDF 1.2) An additional-actions dictionary defining the field’s behavior
            in response to various trigger events. This entry has exactly the same meaning as
            the AA entry in an annotation dictionary.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroField.Keys.DR">
            <summary>
            (Required; inheritable) A resource dictionary containing default resources
            (such as fonts, patterns, or color spaces) to be used by the appearance stream.
            At a minimum, this dictionary must contain a Font entry specifying the resource
            name and font dictionary of the default font for displaying the field’s text.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroField.Keys.DA">
            <summary>
            (Required; inheritable) The default appearance string, containing a sequence of
            valid page-content graphics or text state operators defining such properties as
            the field’s text size and color.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroField.Keys.Q">
            <summary>
            (Optional; inheritable) A code specifying the form of quadding (justification)
            to be used in displaying the text:
              0 Left-justified
              1 Centered
              2 Right-justified
            Default value: 0 (left-justified).
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroForm">
            <summary>
            Represents a interactive form (or AcroForm), a collection of fields for 
            gathering information interactively from the user.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroForm.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of AcroForm.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroForm.Fields">
            <summary>
            Gets the fields collection of this form.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroForm.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroForm.Keys">
            <summary>
            Predefined keys of this dictionary. 
            The description comes from PDF 1.4 Reference.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroForm.Keys.Fields">
            <summary>
            (Required) An array of references to the document’s root fields (those with
            no ancestors in the field hierarchy).
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroForm.Keys.NeedAppearances">
            <summary>
            (Optional) A flag specifying whether to construct appearance streams and
            appearance dictionaries for all widget annotations in the document.
            Default value: false.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroForm.Keys.SigFlags">
            <summary>
            (Optional; PDF 1.3) A set of flags specifying various document-level characteristics
            related to signature fields.
            Default value: 0.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroForm.Keys.CO">
            <summary>
            (Required if any fields in the document have additional-actions dictionaries
            containing a C entry; PDF 1.3) An array of indirect references to field dictionaries
            with calculation actions, defining the calculation order in which their values will 
            be recalculated when the value of any field changes.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroForm.Keys.DR">
            <summary>
            (Optional) A document-wide default value for the DR attribute of variable text fields.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroForm.Keys.DA">
            <summary>
            (Optional) A document-wide default value for the DA attribute of variable text fields.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroForm.Keys.Q">
            <summary>
            (Optional) A document-wide default value for the Q attribute of variable text fields.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfAcroForm.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfButtonField">
            <summary>
            Represents the base class for all button fields.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfButtonField.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfButtonField"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfButtonField.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfButtonField"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfButtonField.GetNonOffValue">
            <summary>
            Gets the name which represents the opposite of /Off.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfButtonField.Keys">
            <summary>
            Predefined keys of this dictionary. 
            The description comes from PDF 1.4 Reference.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfCheckBoxField">
            <summary>
            Represents the check box field.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfCheckBoxField.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of PdfCheckBoxField.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfCheckBoxField.Checked">
            <summary>
            Indicates whether the field is checked.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfCheckBoxField.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfCheckBoxField.Keys">
            <summary>
            Predefined keys of this dictionary. 
            The description comes from PDF 1.4 Reference.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfCheckBoxField.Keys.Opt">
            <summary>
            (Optional; inheritable; PDF 1.4) A text string to be used in place of the V entry for the
            value of the field.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfCheckBoxField.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfChoiceField">
            <summary>
            Represents the base class for all choice field dictionaries.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfChoiceField.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfChoiceField"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfChoiceField.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfChoiceField"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfChoiceField.IndexInOptArray(System.String)">
            <summary>
            Gets the index of the specified string in the /Opt array or -1, if no such string exists.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfChoiceField.ValueInOptArray(System.Int32)">
            <summary>
            Gets the value from the index in the /Opt array.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfChoiceField.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfChoiceField.Keys">
            <summary>
            Predefined keys of this dictionary. 
            The description comes from PDF 1.4 Reference.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfChoiceField.Keys.Opt">
            <summary>
            (Required; inheritable) An array of options to be presented to the user. Each element of
            the array is either a text string representing one of the available options or a two-element
            array consisting of a text string together with a default appearance string for constructing
            the item’s appearance dynamically at viewing time.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfChoiceField.Keys.TI">
            <summary>
            (Optional; inheritable) For scrollable list boxes, the top index (the index in the Opt array
            of the first option visible in the list).
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfChoiceField.Keys.I">
            <summary>
            (Sometimes required, otherwise optional; inheritable; PDF 1.4) For choice fields that allow
            multiple selection (MultiSelect flag set), an array of integers, sorted in ascending order,
            representing the zero-based indices in the Opt array of the currently selected option
            items. This entry is required when two or more elements in the Opt array have different
            names but the same export value, or when the value of the choice field is an array; in
            other cases, it is permitted but not required. If the items identified by this entry differ
            from those in the V entry of the field dictionary (see below), the V entry takes precedence.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfChoiceField.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfComboBoxField">
            <summary>
            Represents the combo box field.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfComboBoxField.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of PdfComboBoxField.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfComboBoxField.SelectedIndex">
            <summary>
            Gets or sets the index of the selected item.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfComboBoxField.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfComboBoxField.Keys">
            <summary>
            Predefined keys of this dictionary. 
            The description comes from PDF 1.4 Reference.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfGenericField">
            <summary>
            Represents a generic field. Used for AcroForm dictionaries unknown to PDFsharp.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfGenericField.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of PdfGenericField.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfGenericField.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfGenericField.Keys">
            <summary>
            Predefined keys of this dictionary. 
            The description comes from PDF 1.4 Reference.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfListBoxField">
            <summary>
            Represents the list box field.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfListBoxField.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of PdfListBoxField.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfListBoxField.SelectedIndex">
            <summary>
            Gets or sets the index of the selected item
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfListBoxField.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfListBoxField.Keys">
            <summary>
            Predefined keys of this dictionary. 
            The description comes from PDF 1.4 Reference.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfPushButtonField">
            <summary>
            Represents the push button field.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfPushButtonField.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of PdfPushButtonField.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfPushButtonField.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfPushButtonField.Keys">
            <summary>
            Predefined keys of this dictionary. 
            The description comes from PDF 1.4 Reference.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfRadioButtonField">
            <summary>
            Represents the radio button field.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfRadioButtonField.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of PdfRadioButtonField.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfRadioButtonField.SelectedIndex">
            <summary>
            Gets or sets the index of the selected radio button in a radio button group.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfRadioButtonField.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfRadioButtonField.Keys">
            <summary>
            Predefined keys of this dictionary. 
            The description comes from PDF 1.4 Reference.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfRadioButtonField.Keys.Opt">
            <summary>
            (Optional; inheritable; PDF 1.4) An array of text strings to be used in
            place of the V entries for the values of the widget annotations representing
            the individual radio buttons. Each element in the array represents
            the export value of the corresponding widget annotation in the
            Kids array of the radio button field.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfRadioButtonField.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfSignatureField">
            <summary>
            Represents the signature field.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfSignatureField.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of PdfSignatureField.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfSignatureField.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfSignatureField.Keys">
            <summary>
            Predefined keys of this dictionary.
            The description comes from PDF 1.4 Reference.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfSignatureField.Keys.Type">
            <summary>
            (Optional) The type of PDF object that this dictionary describes; if present,
            must be Sig for a signature dictionary.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfSignatureField.Keys.Filter">
            <summary>
            (Required; inheritable) The name of the signature handler to be used for
            authenticating the field’s contents, such as Adobe.PPKLite, Entrust.PPKEF,
            CICI.SignIt, or VeriSign.PPKVS.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfSignatureField.Keys.SubFilter">
            <summary>
            (Optional) The name of a specific submethod of the specified handler.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfSignatureField.Keys.ByteRange">
            <summary>
            (Required) An array of pairs of integers (starting byte offset, length in bytes)
            describing the exact byte range for the digest calculation. Multiple discontinuous
            byte ranges may be used to describe a digest that does not include the
            signature token itself.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfSignatureField.Keys.Contents">
            <summary>
            (Required) The encrypted signature token.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfSignatureField.Keys.Name">
            <summary>
            (Optional) The name of the person or authority signing the document.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfSignatureField.Keys.M">
            <summary>
            (Optional) The time of signing. Depending on the signature handler, this
            may be a normal unverified computer time or a time generated in a verifiable
            way from a secure time server.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfSignatureField.Keys.Location">
            <summary>
            (Optional) The CPU host name or physical location of the signing.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfSignatureField.Keys.Reason">
            <summary>
            (Optional) The reason for the signing, such as (I agree…).
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfSignatureField.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfTextField">
            <summary>
            Represents the text field.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfTextField.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of PdfTextField.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfTextField.RenderAppearance">
            <summary>
            Creates the normal appearance form X object for the annotation that represents
            this acro form text field.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfTextField.Text">
            <summary>
            Gets or sets the text value of the text field.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfTextField.Font">
            <summary>
            Gets or sets the font used to draw the text of the field.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfTextField.ForeColor">
            <summary>
            Gets or sets the foreground color of the field.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfTextField.BackColor">
            <summary>
            Gets or sets the background color of the field.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfTextField.MaxLength">
            <summary>
            Gets or sets the maximum length of the field.
            </summary>
            <value>The length of the max.</value>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfTextField.MultiLine">
            <summary>
            Gets or sets a value indicating whether the field has multiple lines.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfTextField.Password">
            <summary>
            Gets or sets a value indicating whether this field is used for passwords.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfTextField.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfTextField.Keys">
            <summary>
            Predefined keys of this dictionary. 
            The description comes from PDF 1.4 Reference.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfTextField.Keys.MaxLen">
            <summary>
            (Optional; inheritable) The maximum length of the field’s text, in characters.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfTextField.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfNamedActionNames">
            <summary>
            Specifies the predefined PDF actions.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfNamedActionNames.NextPage">
            <summary>
            Go to next page.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfNamedActionNames.PrevPage">
            <summary>
            Go to previous page.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfNamedActionNames.FirstPage">
            <summary>
            Go to first page.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.AcroForms.PdfNamedActionNames.LastPage">
            <summary>
            Go to last page.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Actions.PdfAction">
            <summary>
            Represents the base class for all PDF actions.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Actions.PdfAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.Actions.PdfAction"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Actions.PdfAction.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.Actions.PdfAction"/> class.
            </summary>
            <param name="document">The document that owns this object.</param>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Actions.PdfAction.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Actions.PdfAction.Keys.Type">
            <summary>
            (Optional) The type of PDF object that this dictionary describes;
            if present, must be Action for an action dictionary.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Actions.PdfAction.Keys.S">
            <summary>
            (Required) The type of action that this dictionary describes.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Actions.PdfAction.Keys.Next">
            <summary>
            (Optional; PDF 1.2) The next action or sequence of actions to be performed
            after the action represented by this dictionary. The value is either a
            single action dictionary or an array of action dictionaries to be performed
            in order; see below for further discussion.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCatalog">
            <summary>
            Represents the catalog dictionary.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCatalog.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCatalog"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCatalog.PrepareForSave">
            <summary>
            Dispatches PrepareForSave to the objects that need it.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCatalog.Version">
            <summary>
            Get or sets the version of the PDF specification to which the document conforms.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCatalog.Pages">
            <summary>
            Gets the pages collection of this document.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCatalog.PageLayout">
            <summary>
            Implementation of PdfDocument.PageLayout.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCatalog.PageMode">
            <summary>
            Implementation of PdfDocument.PageMode.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCatalog.ViewerPreferences">
            <summary>
            Implementation of PdfDocument.ViewerPreferences.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCatalog.Outlines">
            <summary>
            Implementation of PdfDocument.Outlines.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCatalog.AcroForm">
            <summary>
            Gets the AcroForm dictionary of this document.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCatalog.Language">
            <summary>
            Implementation of PdfDocument.PageMode.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCatalog.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCatalog.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCatalog.Keys.Type">
            <summary>
            (Required) The type of PDF object that this dictionary describes; 
            must be Catalog for the catalog dictionary.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCatalog.Keys.Version">
            <summary>
            (Optional; PDF 1.4) The version of the PDF specification to which the document
            conforms (for example, 1.4) if later than the version specified in the file’s header.
            If the header specifies a later version, or if this entry is absent, the document 
            conforms to the version specified in the header. This entry enables a PDF producer 
            application to update the version using an incremental update.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCatalog.Keys.Pages">
            <summary>
            (Required; must be an indirect reference) The page tree node that is the root of 
            the document’s page tree.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCatalog.Keys.PageLabels">
            <summary>
            (Optional; PDF 1.3) A number tree defining the page labeling for the document. 
            The keys in this tree are page indices; the corresponding values are page label dictionaries.
            Each page index denotes the first page in a labeling range to which the specified page 
            label dictionary applies. The tree must include a value for pageindex 0.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCatalog.Keys.Names">
            <summary>
            (Optional; PDF 1.2) The document’s name dictionary.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCatalog.Keys.Dests">
            <summary>
            (Optional; PDF 1.1; must be an indirect reference) A dictionary of names and 
            corresponding destinations.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCatalog.Keys.ViewerPreferences">
            <summary>
            (Optional; PDF 1.2) A viewer preferences dictionary specifying the way the document 
            is to be displayed on the screen. If this entry is absent, applications should use
            their own current user preference settings.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCatalog.Keys.PageLayout">
            <summary>
            (Optional) A name object specifying the page layout to be used when the document is 
            opened:
            SinglePage - Display one page at a time.
            OneColumn - Display the pages in one column.
            TwoColumnLeft - Display the pages in two columns, with oddnumbered pages on the left.
            TwoColumnRight - Display the pages in two columns, with oddnumbered pages on the right.
            TwoPageLeft - (PDF 1.5) Display the pages two at a time, with odd-numbered pages on the left
            TwoPageRight - (PDF 1.5) Display the pages two at a time, with odd-numbered pages on the right.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCatalog.Keys.PageMode">
            <summary>
            (Optional) A name object specifying how the document should be displayed when opened:
            UseNone - Neither document outline nor thumbnail images visible.
            UseOutlines - Document outline visible.
            UseThumbs - Thumbnail images visible.
            FullScreen - Full-screen mode, with no menu bar, windowcontrols, or any other window visible.
            UseOC - (PDF 1.5) Optional content group panel visible.
            UseAttachments (PDF 1.6) Attachments panel visible.
            Default value: UseNone.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCatalog.Keys.Outlines">
            <summary>
            (Optional; must be an indirect reference) The outline dictionary that is the root 
            of the document’s outline hierarchy.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCatalog.Keys.Threads">
            <summary>
            (Optional; PDF 1.1; must be an indirect reference) An array of thread dictionaries 
            representing the document’s article threads.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCatalog.Keys.OpenAction">
            <summary>
            (Optional; PDF 1.1) A value specifying a destination to be displayed or an action to be 
            performed when the document is opened. The value is either an array defining a destination 
            or an action dictionary representing an action. If this entry is absent, the document
            should be opened to the top of the first page at the default magnification factor.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCatalog.Keys.AA">
            <summary>
            (Optional; PDF 1.4) An additional-actions dictionary defining the actions to be taken 
            in response to various trigger events affecting the document as a whole.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCatalog.Keys.URI">
            <summary>
            (Optional; PDF 1.1) A URI dictionary containing document-level information for URI 
            (uniform resource identifier) actions.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCatalog.Keys.AcroForm">
            <summary>
            (Optional; PDF 1.2) The document’s interactive form (AcroForm) dictionary.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCatalog.Keys.Metadata">
            <summary>
            (Optional; PDF 1.4; must be an indirect reference) A metadata stream 
            containing metadata  for the document.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCatalog.Keys.StructTreeRoot">
            <summary>
            (Optional; PDF 1.3) The document’s structure tree root dictionary.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCatalog.Keys.MarkInfo">
            <summary>
            (Optional; PDF 1.4) A mark information dictionary containing information
            about the document’s usage of Tagged PDF conventions.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCatalog.Keys.Lang">
            <summary>
            (Optional; PDF 1.4) A language identifier specifying the natural language for all 
            text in the document except where overridden by language specifications for structure 
            elements or marked content. If this entry is absent, the language is considered unknown.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCatalog.Keys.SpiderInfo">
            <summary>
            (Optional; PDF 1.3) A Web Capture information dictionary containing state information
            used by the Acrobat Web Capture (AcroSpider) plugin extension.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCatalog.Keys.OutputIntents">
            <summary>
            (Optional; PDF 1.4) An array of output intent dictionaries describing the color 
            characteristics of output devices on which the document might be rendered.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCatalog.Keys.PieceInfo">
            <summary>
            (Optional; PDF 1.4) A page-piece dictionary associated with the document.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCatalog.Keys.OCProperties">
            <summary>
            (Optional; PDF 1.5; required if a document contains optional content) The document’s 
            optional content properties dictionary.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCatalog.Keys.Perms">
            <summary>
            (Optional; PDF 1.5) A permissions dictionary that specifies user access permissions 
            for the document.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCatalog.Keys.Legal">
            <summary>
            (Optional; PDF 1.5) A dictionary containing attestations regarding the content of a 
            PDF document, as it relates to the legality of digital signatures.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCatalog.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCIDFont">
            <summary>
            Represents a CIDFont dictionary.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFont">
            <summary>
            Represents a PDF font.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFont.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFont"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFont.CreateEmbeddedFontSubsetName(System.String)">
            <summary>
            Adds a tag of exactly six uppercase letters to the font name 
            according to PDF Reference Section 5.5.3 'Font Subsets'
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFont.IsSymbolFont">
            <summary>
            Gets a value indicating whether this instance is symbol font.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFont.CMapInfo">
            <summary>
            Gets or sets the CMapInfo.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFont.ToUnicodeMap">
            <summary>
            Gets or sets ToUnicodeMap.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFont.Keys">
            <summary>
            Predefined keys common to all font dictionaries.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFont.Keys.Type">
            <summary>
            (Required) The type of PDF object that this dictionary describes;
            must be Font for a font dictionary.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFont.Keys.Subtype">
            <summary>
            (Required) The type of font.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFont.Keys.BaseFont">
            <summary>
            (Required) The PostScript name of the font.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFont.Keys.FontDescriptor">
            <summary>
            (Required except for the standard 14 fonts; must be an indirect reference)
            A font descriptor describing the font’s metrics other than its glyph widths.
            Note: For the standard 14 fonts, the entries FirstChar, LastChar, Widths, and 
            FontDescriptor must either all be present or all be absent. Ordinarily, they are
            absent; specifying them enables a standard font to be overridden.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCIDFont.PrepareForSave">
            <summary>
            Prepares the object to get saved.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCIDFont.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCIDFont.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCIDFont.Keys.Type">
            <summary>
            (Required) The type of PDF object that this dictionary describes;
            must be Font for a CIDFont dictionary.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCIDFont.Keys.Subtype">
            <summary>
            (Required) The type of CIDFont; CIDFontType0 or CIDFontType2.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCIDFont.Keys.BaseFont">
            <summary>
            (Required) The PostScript name of the CIDFont. For Type 0 CIDFonts, this
            is usually the value of the CIDFontName entry in the CIDFont program. For
            Type 2 CIDFonts, it is derived the same way as for a simple TrueType font;
            In either case, the name can have a subset prefix if appropriate.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCIDFont.Keys.CIDSystemInfo">
            <summary>
            (Required) A dictionary containing entries that define the character collection
            of the CIDFont.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCIDFont.Keys.FontDescriptor">
            <summary>
            (Required; must be an indirect reference) A font descriptor describing the
            CIDFont’s default metrics other than its glyph widths.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCIDFont.Keys.DW">
            <summary>
            (Optional) The default width for glyphs in the CIDFont.
            Default value: 1000.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCIDFont.Keys.W">
            <summary>
            (Optional) A description of the widths for the glyphs in the CIDFont. The
            array’s elements have a variable format that can specify individual widths
            for consecutive CIDs or one width for a range of CIDs.
            Default value: none (the DW value is used for all glyphs).
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCIDFont.Keys.DW2">
            <summary>
            (Optional; applies only to CIDFonts used for vertical writing) An array of two
            numbers specifying the default metrics for vertical writing.
            Default value: [880 −1000].
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCIDFont.Keys.W2">
            <summary>
            (Optional; applies only to CIDFonts used for vertical writing) A description
            of the metrics for vertical writing for the glyphs in the CIDFont.
            Default value: none (the DW2 value is used for all glyphs).
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCIDFont.Keys.CIDToGIDMap">
            <summary>
            (Optional; Type 2 CIDFonts only) A specification of the mapping from CIDs
            to glyph indices. If the value is a stream, the bytes in the stream contain the
            mapping from CIDs to glyph indices: the glyph index for a particular CID
            value c is a 2-byte value stored in bytes 2 × c and 2 × c + 1, where the first
            byte is the high-order byte. If the value of CIDToGIDMap is a name, it must
            be Identity, indicating that the mapping between CIDs and glyph indices is
            the identity mapping.
            Default value: Identity.
            This entry may appear only in a Type 2 CIDFont whose associated True-Type font 
            program is embedded in the PDF file.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfCIDFont.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfContent">
            <summary>
            Represents the content of a page. PDFsharp supports only one content stream per page.
            If an imported page has an array of content streams, the streams are concatenated to
            one single stream.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfContent.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfContent"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfContent.#ctor(Alt.GUI.PdfSharp.Pdf.PdfPage)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfContent"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfContent.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfContent"/> class.
            </summary>
            <param name="dict">The dict.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfContent.Decode">
            <summary>
            Unfilters the stream.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfContent.PreserveGraphicsState">
            <summary>
            Surround content with q/Q operations if necessary.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfContent.Compressed">
            <summary>
            Sets a value indicating whether the content is compressed with the ZIP algorithm.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfContent.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfContent.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfContent.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfContents">
            <summary>
            Represents an array of PDF content streams of a page.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfContents.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfContents"/> class.
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfContents.AppendContent">
            <summary>
            Appends a new content stream and returns it.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfContents.PrependContent">
            <summary>
            Prepends a new content stream and returns it.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfContents.CreateSingleContent">
            <summary>
            Creates a single content stream with the bytes from the array of the content streams.
            This operation does not modify any of the content streams in this array.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfDictionaryWithContentStream">
            <summary>
            Represents a base class for dictionaries with a content stream.
            Implement IContentStream for use with a content writer.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfDictionaryWithContentStream.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfDictionaryWithContentStream"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfDictionaryWithContentStream.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfDictionaryWithContentStream"/> class.
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfDictionaryWithContentStream.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDictionary)">
            <summary>
            Initializes a new instance from an existing dictionary. Used for object type transformation.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfDictionaryWithContentStream.GetImageName(Alt.GUI.PdfSharp.Drawing.XImage)">
            <summary>
            Gets the resource name of the specified image within this dictionary.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfDictionaryWithContentStream.Alt#GUI#PdfSharp#Pdf#Advanced#IContentStream#GetImageName(Alt.GUI.PdfSharp.Drawing.XImage)">
            <summary>
            Implements the interface because the primary function is internal.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfDictionaryWithContentStream.GetFormName(Alt.GUI.PdfSharp.Drawing.XForm)">
            <summary>
            Gets the resource name of the specified form within this dictionary.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfDictionaryWithContentStream.Alt#GUI#PdfSharp#Pdf#Advanced#IContentStream#GetFormName(Alt.GUI.PdfSharp.Drawing.XForm)">
            <summary>
            Implements the interface because the primary function is internal.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfDictionaryWithContentStream.Resources">
            <summary>
            Gets the resources dictionary of this dictionary. If no such dictionary exists, it is created.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfDictionaryWithContentStream.Alt#GUI#PdfSharp#Pdf#Advanced#IContentStream#Resources">
            <summary>
            Implements the interface because the primary function is internal.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfDictionaryWithContentStream.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfDictionaryWithContentStream.Keys.Resources">
            <summary>
            (Optional but strongly recommended; PDF 1.2) A dictionary specifying any
            resources (such as fonts and images) required by the form XObject.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfExtGState">
            <summary>
            Represents an extended graphics state object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfExtGState.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfExtGState"/> class.
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfExtGState.SetDefault2">
            <summary>
            ...for shading patterns
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfExtGState.StrokeAlpha">
            <summary>
            Sets the alpha value for stroking operations.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfExtGState.NonStrokeAlpha">
            <summary>
            Sets the alpha value for nonstroking operations.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfExtGState.SoftMask">
            <summary>
            Sets a soft mask object.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfExtGState.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfExtGState.Keys">
            <summary>
            Common keys for all streams.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfExtGState.Keys.Type">
            <summary>
            (Optional) The type of PDF object that this dictionary describes;
            must be ExtGState for a graphics state parameter dictionary.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfExtGState.Keys.LW">
            <summary>
            (Optional; PDF 1.3) The line width (see “Line Width” on page 185).
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfExtGState.Keys.LC">
            <summary>
            (Optional; PDF 1.3) The line cap style.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfExtGState.Keys.LJ">
            <summary>
            (Optional; PDF 1.3) The line join style.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfExtGState.Keys.ML">
            <summary>
            (Optional; PDF 1.3) The miter limit.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfExtGState.Keys.D">
            <summary>
            (Optional; PDF 1.3) The line dash pattern, expressed as an array of the form
            [dashArray dashPhase], where dashArray is itself an array and dashPhase is an integer.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfExtGState.Keys.RI">
            <summary>
            (Optional; PDF 1.3) The name of the rendering intent.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfExtGState.Keys.OP">
            <summary>
            (Optional) A flag specifying whether to apply overprint. In PDF 1.2 and earlier,
            there is a single overprint parameter that applies to all painting operations.
            Beginning with PDF 1.3, there are two separate overprint parameters: one for stroking 
            and one for all other painting operations. Specifying an OP entry sets both parameters
            unless there is also an op entry in the same graphics state parameter dictionary, in
            which case the OP entry sets only the overprint parameter for stroking.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfExtGState.Keys.op">
            <summary>
            (Optional; PDF 1.3) A flag specifying whether to apply overprint for painting operations
            other than stroking. If this entry is absent, the OP entry, if any, sets this parameter.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfExtGState.Keys.OPM">
            <summary>
            (Optional; PDF 1.3) The overprint mode.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfExtGState.Keys.Font">
            <summary>
            (Optional; PDF 1.3) An array of the form [font size], where font is an indirect
             reference to a font dictionary and size is a number expressed in text space units.
             These two objects correspond to the operands of the Tf operator; however,
             the first operand is an indirect object reference instead of a resource name.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfExtGState.Keys.BG">
            <summary>
            (Optional) The black-generation function, which maps the interval [0.0 1.0]
            to the interval [0.0 1.0].
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfExtGState.Keys.BG2">
            <summary>
            (Optional; PDF 1.3) Same as BG except that the value may also be the name Default,
            denoting the black-generation function that was in effect at the start of the page.
            If both BG and BG2 are present in the same graphics state parameter dictionary, 
            BG2 takes precedence.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfExtGState.Keys.UCR">
            <summary>
            (Optional) The undercolor-removal function, which maps the interval
            [0.0 1.0] to the interval [-1.0 1.0].
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfExtGState.Keys.UCR2">
            <summary>
            (Optional; PDF 1.3) Same as UCR except that the value may also be the name Default,
            denoting the undercolor-removal function that was in effect at the start of the page.
            If both UCR and UCR2 are present in the same graphics state parameter dictionary, 
            UCR2 takes precedence.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfExtGState.Keys.SA">
            <summary>
            (Optional) A flag specifying whether to apply automatic stroke adjustment.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfExtGState.Keys.BM">
            <summary>
            (Optional; PDF 1.4) The current blend mode to be used in the transparent imaging model.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfExtGState.Keys.SMask">
            <summary>
            (Optional; PDF 1.4) The current soft mask, specifying the mask shape or
            mask opacity values to be used in the transparent imaging model.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfExtGState.Keys.CA">
            <summary>
            (Optional; PDF 1.4) The current stroking alpha constant, specifying the constant 
            shape or constant opacity value to be used for stroking operations in the transparent
            imaging model.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfExtGState.Keys.ca">
            <summary>
            (Optional; PDF 1.4) Same as CA, but for nonstroking operations.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfExtGState.Keys.AIS">
            <summary>
            (Optional; PDF 1.4) The alpha source flag (“alpha is shape”), specifying whether 
            the current soft mask and alpha constant are to be interpreted as shape values (true)
            or opacity values (false).
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfExtGState.Keys.TK">
            <summary>
            (Optional; PDF 1.4) The text knockout flag, which determines the behavior of 
            overlapping glyphs within a text object in the transparent imaging model.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfExtGState.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfExtGStateTable">
            <summary>
            Contains all used ExtGState objects of a document.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfResourceTable">
            <summary>
            Base class for FontTable, ImageTable, FormXObjectTable etc.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfExtGStateTable.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of this class, which is a singleton for each document.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfExtGStateTable.GetExtGState(System.Double)">
            <summary>
            Gets a PdfExtGState with the keys 'CA' and 'ca' set to the specified alpha value.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfExtGStateTable.GetExtGStateStroke(System.Double)">
            <summary>
            Gets a PdfExtGState with the key 'CA' set to the specified alpha value.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfExtGStateTable.GetExtGStateNonStroke(System.Double)">
            <summary>
            Gets a PdfExtGState with the key 'ca' set to the specified alpha value.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfExtGStateTable.alphaValues">
            <summary>
            Maps from alpha values (range "0" to "1000") to PdfExtGState objects.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontDescriptorFlags">
            <summary>
            The PDF font descriptor flags.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontDescriptorFlags.FixedPitch">
            <summary>
            All glyphs have the same width (as opposed to proportional or variable-pitch
            fonts, which have different widths).
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontDescriptorFlags.Serif">
            <summary>
            Glyphs have serifs, which are short strokes drawn at an angle on the top and
            bottom of glyph stems. (Sans serif fonts do not have serifs.)
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontDescriptorFlags.Symbolic">
            <summary>
            Font contains glyphs outside the Adobe standard Latin character set. This
            flag and the Nonsymbolic flag cannot both be set or both be clear.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontDescriptorFlags.Script">
            <summary>
            Glyphs resemble cursive handwriting.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontDescriptorFlags.Nonsymbolic">
            <summary>
            Font uses the Adobe standard Latin character set or a subset of it.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontDescriptorFlags.Italic">
            <summary>
            Glyphs have dominant vertical strokes that are slanted.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontDescriptorFlags.AllCap">
            <summary>
            Font contains no lowercase letters; typically used for display purposes,
            such as for titles or headlines.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontDescriptorFlags.SmallCap">
            <summary>
            Font contains both uppercase and lowercase letters. The uppercase letters are
            similar to those in the regular version of the same typeface family. The glyphs
            for the lowercase letters have the same shapes as the corresponding uppercase
            letters, but they are sized and their proportions adjusted so that they have the
            same size and stroke weight as lowercase glyphs in the same typeface family.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontDescriptorFlags.ForceBold">
            <summary>
            Determines whether bold glyphs are painted with extra pixels even at very small
            text sizes.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontDescriptor">
            <summary>
            A PDF font descriptor specifies metrics and other attributes of a simple font, 
            as distinct from the metrics of individual glyphs.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontDescriptor.FontName">
            <summary>
            Gets or sets the name of the font.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontDescriptor.IsSymbolFont">
            <summary>
            Gets a value indicating whether this instance is symbol font.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontDescriptor.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontDescriptor.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontDescriptor.Keys.Type">
            <summary>
            (Required) The type of PDF object that this dictionary describes; must be
            FontDescriptor for a font descriptor.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontDescriptor.Keys.FontName">
            <summary>
            (Required) The PostScript name of the font. This name should be the same as the 
            value of BaseFont in the font or CIDFont dictionary that refers to this font descriptor.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontDescriptor.Keys.FontFamily">
            <summary>
            (Optional; PDF 1.5; strongly recommended for Type 3 fonts in Tagged PDF documents)
            A string specifying the preferred font family name. For example, for the font 
            Times Bold Italic, the FontFamily is Times.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontDescriptor.Keys.FontStretch">
            <summary>
            (Optional; PDF 1.5; strongly recommended for Type 3 fonts in Tagged PDF documents)
            The font stretch value. It must be one of the following names (ordered from 
            narrowest to widest): UltraCondensed, ExtraCondensed, Condensed, SemiCondensed, 
            Normal, SemiExpanded, Expanded, ExtraExpanded or UltraExpanded.
            Note: The specific interpretation of these values varies from font to font. 
            For example, Condensed in one font may appear most similar to Normal in another.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontDescriptor.Keys.FontWeight">
            <summary>
            (Optional; PDF 1.5; strongly recommended for Type 3 fonts in Tagged PDF documents)
            The weight (thickness) component of the fully-qualified font name or font specifier.
            The possible values are 100, 200, 300, 400, 500, 600, 700, 800, or 900, where each
            number indicates a weight that is at least as dark as its predecessor. A value of 
            400 indicates a normal weight; 700 indicates bold.
            Note: The specific interpretation of these values varies from font to font. 
            For example, 300 in one font may appear most similar to 500 in another.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontDescriptor.Keys.Flags">
            <summary>
            (Required) A collection of flags defining various characteristics of the font.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontDescriptor.Keys.FontBBox">
            <summary>
            (Required, except for Type 3 fonts) A rectangle (see Section 3.8.4, “Rectangles”),
            expressed in the glyph coordinate system, specifying the font bounding box. This 
            is the smallest rectangle enclosing the shape that would result if all of the 
            glyphs of the font were placed with their origins coincident and then filled.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontDescriptor.Keys.ItalicAngle">
            <summary>
            (Required) The angle, expressed in degrees counterclockwise from the vertical, of
            the dominant vertical strokes of the font. (For example, the 9-o’clock position is 90 
            degrees, and the 3-o’clock position is –90 degrees.) The value is negative for fonts 
            that slope to the right, as almost all italic fonts do.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontDescriptor.Keys.Ascent">
            <summary>
            (Required, except for Type 3 fonts) The maximum height above the baseline reached 
            by glyphs in this font, excluding the height of glyphs for accented characters.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontDescriptor.Keys.Descent">
            <summary>
            (Required, except for Type 3 fonts) The maximum depth below the baseline reached 
            by glyphs in this font. The value is a negative number.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontDescriptor.Keys.Leading">
            <summary>
            (Optional) The spacing between baselines of consecutive lines of text.
            Default value: 0.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontDescriptor.Keys.CapHeight">
            <summary>
            (Required for fonts that have Latin characters, except for Type 3 fonts) The vertical
            coordinate of the top of flat capital letters, measured from the baseline.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontDescriptor.Keys.XHeight">
            <summary>
            (Optional) The font’s x height: the vertical coordinate of the top of flat nonascending
            lowercase letters (like the letter x), measured from the baseline, in fonts that have 
            Latin characters. Default value: 0.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontDescriptor.Keys.StemV">
            <summary>
            (Required, except for Type 3 fonts) The thickness, measured horizontally, of the dominant 
            vertical stems of glyphs in the font.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontDescriptor.Keys.StemH">
            <summary>
            (Optional) The thickness, measured vertically, of the dominant horizontal stems 
            of glyphs in the font. Default value: 0.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontDescriptor.Keys.AvgWidth">
            <summary>
            (Optional) The average width of glyphs in the font. Default value: 0.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontDescriptor.Keys.MaxWidth">
            <summary>
            (Optional) The maximum width of glyphs in the font. Default value: 0.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontDescriptor.Keys.MissingWidth">
            <summary>
            (Optional) The width to use for character codes whose widths are not specified in a 
            font dictionary’s Widths array. This has a predictable effect only if all such codes 
            map to glyphs whose actual widths are the same as the value of the MissingWidth entry.
            Default value: 0.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontDescriptor.Keys.FontFile">
            <summary>
            (Optional) A stream containing a Type 1 font program.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontDescriptor.Keys.FontFile2">
            <summary>
            (Optional; PDF 1.1) A stream containing a TrueType font program.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontDescriptor.Keys.FontFile3">
            <summary>
            (Optional; PDF 1.2) A stream containing a font program whose format is specified 
            by the Subtype entry in the stream dictionary.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontDescriptor.Keys.CharSet">
            <summary>
            (Optional; meaningful only in Type 1 fonts; PDF 1.1) A string listing the character
            names defined in a font subset. The names in this string must be in PDF syntax—that is,
            each name preceded by a slash (/). The names can appear in any order. The name .notdef
            should be omitted; it is assumed to exist in the font subset. If this entry is absent,
            the only indication of a font subset is the subset tag in the FontName entry.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontDescriptor.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.FontType.TrueType">
            <summary>
            TrueType with WinAnsi encoding.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.FontType.Type0">
            <summary>
            TrueType with Identity-H or Identity-V encoding (unicode).
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontTable">
            <summary>
            Contains all used fonts of a document.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontTable.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of this class, which is a singleton for each document.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontTable.GetFont(Alt.GUI.PdfSharp.Drawing.XFont)">
            <summary>
            Gets a PdfFont from an XFont. If no PdfFont already exists, a new one is created.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontTable.GetFont(System.String,System.Byte[])">
            <summary>
            Gets a PdfFont from a font program. If no PdfFont already exists, a new one is created.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontTable.TryGetFont(System.String)">
            <summary>
            Tries to gets a PdfFont from the font dictionary.
            Returns null if no such PdfFont exists.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontTable.fonts">
            <summary>
            Map from PdfFontSelector to PdfFont.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontTable.FontSelector">
            <summary>
            A collection of information that uniquely identifies a particular PDF font.
            ... more docu... TODO
            Two PDF fonts are equal if and only if their font selector objects are equal.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontTable.FontSelector.#ctor(Alt.GUI.PdfSharp.Drawing.XFont)">
            <summary>
            Initializes a new instance of PdfFontSelector from an XFont.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontTable.FontSelector.#ctor(System.String)">
            <summary>
            Initializes a new instance of PdfFontSelector from a unique name.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontTable.FontSelector.ToString">
            <summary>
            Returns a string for diagnostic purposes only.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontTable.FontSelector.Name">
            <summary>
            Gets the (generated) resource name of the font. In our own PDF files equal fonts share the
            same resource name in all contents streams.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontTable.FontSelector.Style">
            <summary>
            Gets the style. Contains only flags that effects the font face and are available for the specified font.
            </summary>
            <value>The style.</value>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFontTable.FontSelector.FontType">
            <summary>
            Gets the type of the font (TrueType with Ansi Encoding or CID font).
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFormXObject">
            <summary>
            Represents an external form object (e.g. an imported page).
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfXObject">
            <summary>
            Base class for all PDF external objects.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfXObject.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfXObject"/> class.
            </summary>
            <param name="document">The document that owns the object.</param>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfXObject.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFormXObject.GetFontName(System.String,System.Byte[],Alt.GUI.PdfSharp.Pdf.Advanced.PdfFont@)">
            <summary>
            Gets the resource name of the specified font data within this form XObject.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFormXObject.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFormXObject.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFormXObject.Keys.Type">
            <summary>
            (Optional) The type of PDF object that this dictionary describes; if present,
            must be XObject for a form XObject.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFormXObject.Keys.Subtype">
            <summary>
            (Required) The type of XObject that this dictionary describes; must be Form
            for a form XObject.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFormXObject.Keys.FormType">
            <summary>
            (Optional) A code identifying the type of form XObject that this dictionary
            describes. The only valid value defined at the time of publication is 1.
            Default value: 1.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFormXObject.Keys.BBox">
            <summary>
            (Required) An array of four numbers in the form coordinate system, giving the 
            coordinates of the left, bottom, right, and top edges, respectively, of the 
            form XObject’s bounding box. These boundaries are used to clip the form XObject
            and to determine its size for caching.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFormXObject.Keys.Matrix">
            <summary>
            (Optional) An array of six numbers specifying the form matrix, which maps
            form space into user space.
            Default value: the identity matrix [1 0 0 1 0 0].
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFormXObject.Keys.Resources">
            <summary>
            (Optional but strongly recommended; PDF 1.2) A dictionary specifying any
            resources (such as fonts and images) required by the form XObject.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFormXObject.Keys.Group">
            <summary>
            (Optional; PDF 1.4) A group attributes dictionary indicating that the contents
            of the form XObject are to be treated as a group and specifying the attributes
            of that group (see Section 4.9.2, “Group XObjects”).
            Note: If a Ref entry (see below) is present, the group attributes also apply to the
            external page imported by that entry, which allows such an imported page to be
            treated as a group without further modification.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFormXObject.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFormXObjectTable">
            <summary>
            Contains all external PDF files from which PdfFormXObjects are imported into the current document.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFormXObjectTable.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of this class, which is a singleton for each document.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFormXObjectTable.GetForm(Alt.GUI.PdfSharp.Drawing.XForm)">
            <summary>
            Gets a PdfFormXObject from an XPdfForm. Because the returned objects must be unique, always
            a new instance of PdfFormXObject is created if none exists for the specified form. 
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFormXObjectTable.GetImportedObjectTable(Alt.GUI.PdfSharp.Pdf.PdfPage)">
            <summary>
            Gets the imported object table.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFormXObjectTable.forms">
            <summary>
            Map from Selector to PdfImportedObjectTable.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFormXObjectTable.Selector">
            <summary>
            A collection of information that uniquely identifies a particular ImportedObjectTable.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFormXObjectTable.Selector.#ctor(Alt.GUI.PdfSharp.Drawing.XForm)">
            <summary>
            Initializes a new instance of FormSelector from an XPdfForm.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfFormXObjectTable.Selector.#ctor(Alt.GUI.PdfSharp.Pdf.PdfPage)">
            <summary>
            Initializes a new instance of FormSelector from a PdfPage.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfGroupAttributes">
            <summary>
            Represents a PDF group XObject.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfGroupAttributes.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfGroupAttributes.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfGroupAttributes.Keys.Type">
             <summary>
            (Optional) The type of PDF object that this dictionary describes;
            if present, must be Group for a group attributes dictionary.
             </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfGroupAttributes.Keys.S">
            <summary>
            (Required) The group subtype, which identifies the type of group whose
            attributes this dictionary describes and determines the format and meaning
            of the dictionary’s remaining entries. The only group subtype defined in
            PDF 1.4 is Transparency. Other group subtypes may be added in the future.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfGroupAttributes.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfImage">
            <summary>
            Represents an image.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfImage.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument,Alt.GUI.PdfSharp.Drawing.XImage)">
            <summary>
            Initializes a new instance of PdfImage from an XImage.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfImage.ToString">
            <summary>
            Returns 'Image'.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfImage.InitializeJpeg">
            <summary>
            Creates the keys for a JPEG image.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfImage.InitializeNonJpeg">
            <summary>
            Creates the keys for a FLATE image.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfImage.ReadTrueColorMemoryBitmap(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Reads images that are returned from GDI+ without color palette.
            </summary>
            <param name="components">4 (32bpp RGB), 3 (24bpp RGB, 32bpp ARGB)</param>
            <param name="bits">8</param>
            <param name="hasAlpha">true (ARGB), false (RGB)</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfImage.CountOneBits(Alt.GUI.PdfSharp.Pdf.Advanced.BitReader,System.UInt32)">
            <summary>
            Counts the consecutive one bits in an image line.
            </summary>
            <param name="reader">The reader.</param>
            <param name="bitsLeft">The bits left.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfImage.CountZeroBits(Alt.GUI.PdfSharp.Pdf.Advanced.BitReader,System.UInt32)">
            <summary>
            Counts the consecutive zero bits in an image line.
            </summary>
            <param name="reader">The reader.</param>
            <param name="bitsLeft">The bits left.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfImage.FindDifference(Alt.GUI.PdfSharp.Pdf.Advanced.BitReader,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Returns the offset of the next bit in the range
            [bitStart..bitEnd] that is different from the
            specified color.  The end, bitEnd, is returned
            if no such bit exists.
            </summary>
            <param name="reader">The reader.</param>
            <param name="bitStart">The offset of the start bit.</param>
            <param name="bitEnd">The offset of the end bit.</param>
            <param name="searchOne">If set to <c>true</c> searches "one" (i. e. white), otherwise searches black.</param>
            <returns>The offset of the first non-matching bit.</returns>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfImage.FindDifferenceWithCheck(Alt.GUI.PdfSharp.Pdf.Advanced.BitReader,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Returns the offset of the next bit in the range
            [bitStart..bitEnd] that is different from the
            specified color.  The end, bitEnd, is returned
            if no such bit exists.
            Like FindDifference, but also check the
            starting bit against the end in case start > end.
            </summary>
            <param name="reader">The reader.</param>
            <param name="bitStart">The offset of the start bit.</param>
            <param name="bitEnd">The offset of the end bit.</param>
            <param name="searchOne">If set to <c>true</c> searches "one" (i. e. white), otherwise searches black.</param>
            <returns>The offset of the first non-matching bit.</returns>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfImage.FaxEncode2DRow(Alt.GUI.PdfSharp.Pdf.Advanced.BitWriter,System.UInt32,System.Byte[],System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            2d-encode a row of pixels. Consult the CCITT documentation for the algorithm.
            </summary>
            <param name="writer">The writer.</param>
            <param name="bytesFileOffset">Offset of image data in bitmap file.</param>
            <param name="imageBits">The bitmap file.</param>
            <param name="currentRow">Index of the current row.</param>
            <param name="referenceRow">Index of the reference row (0xffffffff if there is none).</param>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
            <param name="bytesPerLineBmp">The bytes per line in the bitmap file.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfImage.DoFaxEncoding(System.Byte[]@,System.Byte[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Encodes a bitonal bitmap using 1D CCITT fax encoding.
            </summary>
            <param name="imageData">Space reserved for the fax encoded bitmap. An exception will be thrown if this buffer is too small.</param>
            <param name="imageBits">The bitmap to be encoded.</param>
            <param name="bytesFileOffset">Offset of image data in bitmap file.</param>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
            <returns>The size of the fax encoded image (0 on failure).</returns>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfImage.DoFaxEncodingGroup4(System.Byte[]@,System.Byte[],System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Encodes a bitonal bitmap using 2D group 4 CCITT fax encoding.
            </summary>
            <param name="imageData">Space reserved for the fax encoded bitmap. An exception will be thrown if this buffer is too small.</param>
            <param name="imageBits">The bitmap to be encoded.</param>
            <param name="bytesFileOffset">Offset of image data in bitmap file.</param>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
            <returns>The size of the fax encoded image (0 on failure).</returns>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfImage.WriteSample(Alt.GUI.PdfSharp.Pdf.Advanced.BitWriter,System.UInt32,System.Boolean)">
            <summary>
            Writes the image data.
            </summary>
            <param name="writer">The writer.</param>
            <param name="count">The count of bits (pels) to encode.</param>
            <param name="white">The color of the pels.</param>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfImage.Image">
            <summary>
            Gets the underlying XImage object.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfImage.Keys">
            <summary>
            Common keys for all streams.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfImage.Keys.Type">
            <summary>
            (Optional) The type of PDF object that this dictionary describes;
            if present, must be XObject for an image XObject.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfImage.Keys.Subtype">
            <summary>
            (Required) The type of XObject that this dictionary describes;
            must be Image for an image XObject.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfImage.Keys.Width">
            <summary>
            (Required) The width of the image, in samples.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfImage.Keys.Height">
            <summary>
            (Required) The height of the image, in samples.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfImage.Keys.ColorSpace">
            <summary>
            (Required for images, except those that use the JPXDecode filter; not allowed for image masks)
            The color space in which image samples are specified; it can be any type of color space except
            Pattern. If the image uses the JPXDecode filter, this entry is optional:
            • If ColorSpace is present, any color space specifications in the JPEG2000 data are ignored.
            • If ColorSpace is absent, the color space specifications in the JPEG2000 data are used.
              The Decode array is also ignored unless ImageMask is true.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfImage.Keys.BitsPerComponent">
            <summary>
            (Required except for image masks and images that use the JPXDecode filter)
            The number of bits used to represent each color component. Only a single value may be specified;
            the number of bits is the same for all color components. Valid values are 1, 2, 4, 8, and 
            (in PDF 1.5) 16. If ImageMask is true, this entry is optional, and if specified, its value 
            must be 1.
            If the image stream uses a filter, the value of BitsPerComponent must be consistent with the 
            size of the data samples that the filter delivers. In particular, a CCITTFaxDecode or JBIG2Decode 
            filter always delivers 1-bit samples, a RunLengthDecode or DCTDecode filter delivers 8-bit samples,
            and an LZWDecode or FlateDecode filter delivers samples of a specified size if a predictor function
            is used.
            If the image stream uses the JPXDecode filter, this entry is optional and ignored if present.
            The bit depth is determined in the process of decoding the JPEG2000 image.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfImage.Keys.Intent">
            <summary>
            (Optional; PDF 1.1) The name of a color rendering intent to be used in rendering the image.
            Default value: the current rendering intent in the graphics state.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfImage.Keys.ImageMask">
            <summary>
            (Optional) A flag indicating whether the image is to be treated as an image mask.
            If this flag is true, the value of BitsPerComponent must be 1 and Mask and ColorSpace should
            not be specified; unmasked areas are painted using the current nonstroking color.
            Default value: false.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfImage.Keys.Mask">
            <summary>
            (Optional except for image masks; not allowed for image masks; PDF 1.3)
            An image XObject defining an image mask to be applied to this image, or an array specifying 
            a range of colors to be applied to it as a color key mask. If ImageMask is true, this entry
            must not be present.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfImage.Keys.Decode">
            <summary>
            (Optional) An array of numbers describing how to map image samples into the range of values
            appropriate for the image’s color space. If ImageMask is true, the array must be either
            [0 1] or [1 0]; otherwise, its length must be twice the number of color components required 
            by ColorSpace. If the image uses the JPXDecode filter and ImageMask is false, Decode is ignored.
            Default value: see “Decode Arrays”.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfImage.Keys.Interpolate">
            <summary>
            (Optional) A flag indicating whether image interpolation is to be performed. 
            Default value: false.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfImage.Keys.Alternates">
            <summary>
            (Optional; PDF 1.3) An array of alternate image dictionaries for this image. The order of 
            elements within the array has no significance. This entry may not be present in an image 
            XObject that is itself an alternate image.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfImage.Keys.SMask">
            <summary>
            (Optional; PDF 1.4) A subsidiary image XObject defining a soft-mask image to be used as a 
            source of mask shape or mask opacity values in the transparent imaging model. The alpha 
            source parameter in the graphics state determines whether the mask values are interpreted as
            shape or opacity. If present, this entry overrides the current soft mask in the graphics state,
            as well as the image’s Mask entry, if any. (However, the other transparency related graphics 
            state parameters — blend mode and alpha constant — remain in effect.) If SMask is absent, the 
            image has no associated soft mask (although the current soft mask in the graphics state may
            still apply).
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfImage.Keys.SMaskInData">
            <summary>
            (Optional for images that use the JPXDecode filter, meaningless otherwise; PDF 1.5)
            A code specifying how soft-mask information encoded with image samples should be used:
            0 If present, encoded soft-mask image information should be ignored.
            1 The image’s data stream includes encoded soft-mask values. An application can create
              a soft-mask image from the information to be used as a source of mask shape or mask 
              opacity in the transparency imaging model.
            2 The image’s data stream includes color channels that have been preblended with a 
              background; the image data also includes an opacity channel. An application can create
              a soft-mask image with a Matte entry from the opacity channel information to be used as
              a source of mask shape or mask opacity in the transparency model. If this entry has a 
              nonzero value, SMask should not be specified.
            Default value: 0.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfImage.Keys.Name">
            <summary>
            (Required in PDF 1.0; optional otherwise) The name by which this image XObject is 
            referenced in the XObject subdictionary of the current resource dictionary.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfImage.Keys.StructParent">
            <summary>
            (Required if the image is a structural content item; PDF 1.3) The integer key of the 
            image’s entry in the structural parent tree.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfImage.Keys.ID">
            <summary>
            (Optional; PDF 1.3; indirect reference preferred) The digital identifier of the image’s
            parent Web Capture content set.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfImage.Keys.OPI">
            <summary>
            (Optional; PDF 1.2) An OPI version dictionary for the image. If ImageMask is true, 
            this entry is ignored.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfImage.Keys.Metadata">
            <summary>
            (Optional; PDF 1.4) A metadata stream containing metadata for the image.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfImage.Keys.OC">
            <summary>
            (Optional; PDF 1.5) An optional content group or optional content membership dictionary,
            specifying the optional content properties for this image XObject. Before the image is
            processed, its visibility is determined based on this entry. If it is determined to be 
            invisible, the entire image is skipped, as if there were no Do operator to invoke it.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.MonochromeMask">
            <summary>
            Helper class for creating bitmap masks (8 pels per byte).
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.MonochromeMask.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a bitmap mask.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.MonochromeMask.StartLine(System.Int32)">
            <summary>
            Starts a new line.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.MonochromeMask.AddPel(System.Boolean)">
            <summary>
            Adds a pel to the current line.
            </summary>
            <param name="isTransparent"></param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.MonochromeMask.AddPel(System.Int32)">
            <summary>
            Adds a pel from an alpha mask value.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.MonochromeMask.MaskData">
            <summary>
            Returns the bitmap mask that will be written to PDF.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.BitReader">
            <summary>
            The BitReader class is a helper to read bits from an in-memory bitmap file.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.BitReader.#ctor(System.Byte[],System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.Advanced.BitReader"/> class.
            </summary>
            <param name="imageBits">The in-memory bitmap file.</param>
            <param name="bytesFileOffset">The offset of the line to read.</param>
            <param name="bits">The count of bits that may be read (i. e. the width of the image for normal usage).</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.BitReader.SetPosition(System.UInt32)">
            <summary>
            Sets the position within the line (needed for 2D encoding).
            </summary>
            <param name="position">The new position.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.BitReader.GetBit(System.UInt32)">
            <summary>
            Gets a single bit at the specified position.
            </summary>
            <param name="position">The position.</param>
            <returns>True if bit is set.</returns>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.BitReader.PeekByte(System.UInt32@)">
            <summary>
            Returns the bits that are in the buffer (without changing the position).
            Data is MSB aligned.
            </summary>
            <param name="bits">The count of bits that were returned (1 through 8).</param>
            <returns>The MSB aligned bits from the buffer.</returns>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.BitReader.NextByte">
            <summary>
            Moves the buffer to the next byte.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.BitReader.SkipBits(System.UInt32)">
            <summary>
            "Removes" (eats) bits from the buffer.
            </summary>
            <param name="bits">The count of bits that were processed.</param>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.BitWriter">
            <summary>
            A helper class for writing groups of bits into an array of bytes.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.BitWriter.#ctor(System.Byte[]@)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.Advanced.BitWriter"/> class.
            </summary>
            <param name="imageData">The byte array to be written to.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.BitWriter.FlushBuffer">
            <summary>
            Writes the buffered bits into the byte array.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.BitWriter.masks">
            <summary>
            Masks for n bits in a byte (with n = 0 through 8).
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.BitWriter.WriteBits(System.UInt32,System.UInt32)">
            <summary>
            Writes bits to the byte array.
            </summary>
            <param name="value">The bits to be written (LSB aligned).</param>
            <param name="bits">The count of bits.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.BitWriter.WriteTableLine(System.UInt32[],System.UInt32)">
            <summary>
            Writes a line from a look-up table.
            A "line" in the table are two integers, one containing the values, one containing the bit count.
            </summary>
            <param name="table">The table.</param>
            <param name="line">The line.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.BitWriter.BytesWritten">
            <summary>
            Flushes the buffer and returns the count of bytes written to the array.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfImageTable">
            <summary>
            Contains all used images of a document.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfImageTable.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of this class, which is a singleton for each document.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfImageTable.GetImage(Alt.GUI.PdfSharp.Drawing.XImage)">
            <summary>
            Gets a PdfImage from an XImage. If no PdfImage already exists, a new one is created.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfImageTable.images">
            <summary>
            Map from ImageSelector to PdfImage.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfImageTable.ImageSelector">
            <summary>
            A collection of information that uniquely identifies a particular PdfImage.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfImageTable.ImageSelector.#ctor(Alt.GUI.PdfSharp.Drawing.XImage)">
            <summary>
            Initializes a new instance of ImageSelector from an XImage.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfImportedObjectTable">
            <summary>
            Represents the imported objects of an external document. Used to cache objects that are
            already imported when a PdfFormXObject is added to a page.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfImportedObjectTable.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument,Alt.GUI.PdfSharp.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of this class with the document the objects are imported from.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfImportedObjectTable.Contains(Alt.GUI.PdfSharp.Pdf.PdfObjectID)">
            <summary>
            Indicates whether the specified object is already imported.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfImportedObjectTable.Add(Alt.GUI.PdfSharp.Pdf.PdfObjectID,Alt.GUI.PdfSharp.Pdf.Advanced.PdfReference)">
            <summary>
            Adds a cloned object to this table.
            </summary>
            <param name="externalID">The object identifier in the foreign object.</param>
            <param name="iref">The cross reference to the clone of the foreign object, which belongs to
            this document. In general the clone has a different object identifier.</param>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfImportedObjectTable.externalIDs">
            <summary>
            Maps external object identifiers to cross reference entries of the importing document
            {PdfObjectID -> PdfReference}.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfImportedObjectTable.Owner">
            <summary>
            Gets the document this table belongs to.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfImportedObjectTable.ExternalDocument">
            <summary>
            Gets the external document, or null, if the external document is garbage collected.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfImportedObjectTable.Item(Alt.GUI.PdfSharp.Pdf.PdfObjectID)">
            <summary>
            Gets the cloned object that corresponds to the specified external identifier.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfInternals">
            <summary>
            Provides access to the internal document data structures. This class prevents the public
            interfaces from pollution with to much internal functions.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfInternals.GetObject(Alt.GUI.PdfSharp.Pdf.PdfObjectID)">
            <summary>
            Returns the object with the specified Identifier, or null, if no such object exists.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfInternals.GetReference(Alt.GUI.PdfSharp.Pdf.PdfObject)">
            <summary>
            Returns the PdfReference of the specified object, or null, if the object is not in the
            document's object table.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfInternals.GetObjectID(Alt.GUI.PdfSharp.Pdf.PdfObject)">
            <summary>
            Gets the object identifier of the specified object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfInternals.GetObjectNumber(Alt.GUI.PdfSharp.Pdf.PdfObject)">
            <summary>
            Gets the object number of the specified object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfInternals.GenerationNumber(Alt.GUI.PdfSharp.Pdf.PdfObject)">
            <summary>
            Gets the generation number of the specified object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfInternals.GetAllObjects">
            <summary>
            Gets all indirect objects ordered by their object identifier.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfInternals.CreateIndirectObject``1">
            <summary>
            Creates the indirect object of the specified type, adds it to the document, and
            returns the object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfInternals.AddObject(Alt.GUI.PdfSharp.Pdf.PdfObject)">
            <summary>
            Adds an object to the PDF document. This operation and only this operation makes the object 
            an indirect object owned by this document.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfInternals.RemoveObject(Alt.GUI.PdfSharp.Pdf.PdfObject)">
            <summary>
            Removes an object from the PDF document.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfInternals.GetClosure(Alt.GUI.PdfSharp.Pdf.PdfObject)">
            <summary>
            Returns an array containing the specified object as first element follows by its transitive
            closure. The closure of an object are all objects that can be reached by indirect references. 
            The transitive closure is the result of applying the calculation of the closure to a closure
            as long as no new objects came along. This is e.g. useful for getting all objects belonging 
            to the resources of a page.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfInternals.GetClosure(Alt.GUI.PdfSharp.Pdf.PdfObject,System.Int32)">
            <summary>
            Returns an array containing the specified object as first element follows by its transitive
            closure limited by the specified number of iterations.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfInternals.WriteObject(System.IO.Stream,Alt.GUI.PdfSharp.Pdf.PdfItem)">
            <summary>
            Writes a PdfItem into the specified stream.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfInternals.CustomValueKey">
            <summary>
            The name of the custom value key.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfInternals.FirstDocumentID">
            <summary>
            Gets or sets the first document identifier.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfInternals.FirstDocumentGuid">
            <summary>
            Gets the first document identifier as GUID.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfInternals.SecondDocumentID">
            <summary>
            Gets or sets the second document identifier.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfInternals.SecondDocumentGuid">
            <summary>
            Gets the first document identifier as GUID.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfInternals.Catalog">
            <summary>
            Gets the catalog dictionary.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfInternals.AllObjects">
            <summary>
            Gets all indirect objects ordered by their object identifier.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfObjectInternals">
            <summary>
            Provides access to the internal PDF object data structures. This class prevents the public
            interfaces from pollution with to much internal functions.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfObjectInternals.ObjectID">
            <summary>
            Gets the object identifier. Returns PdfObjectID.Empty for direct objects.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfObjectInternals.ObjectNumber">
            <summary>
            Gets the object number.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfObjectInternals.GenerationNumber">
            <summary>
            Gets the generation number.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfObjectInternals.TypeID">
            <summary>
            Gets the name of the current type.
            Not a very useful property, but can be used for data binding.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfPageInheritableObjects">
            <summary>
            Represents a PDF page object.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfPageInheritableObjects.MediaBox">
            <summary>
            
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfReference">
            <summary>
            Represents an indirect reference to a PdfObject.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfReference.#ctor(Alt.GUI.PdfSharp.Pdf.PdfObject)">
            <summary>
            Initializes a new PdfReference instance for the specified indirect object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfReference.#ctor(Alt.GUI.PdfSharp.Pdf.PdfObjectID,System.Int32)">
            <summary>
            Initializes a new PdfReference instance from the specified object identifier and file position.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfReference.WriteXRefEnty(Alt.GUI.PdfSharp.Pdf.IO.PdfWriter)">
            <summary>
            Writes the object in PDF iref table format.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfReference.WriteObject(Alt.GUI.PdfSharp.Pdf.IO.PdfWriter)">
            <summary>
            Writes an indirect reference.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfReference.SetObject(Alt.GUI.PdfSharp.Pdf.PdfObject)">
            <summary>
            Hack for dead objects.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfReference.ToString">
            <summary>
            Gets a string representing the object identifier.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfReference.ObjectID">
            <summary>
            Gets or sets the object identifier.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfReference.ObjectNumber">
            <summary>
            Gets the object number of the object identifier.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfReference.GenerationNumber">
            <summary>
            Gets the generation number of the object identifier.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfReference.Position">
            <summary>
            Gets or sets the file position of the related PdfObject.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfReference.Value">
            <summary>
            Gets or sets the referenced PdfObject.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfReference.Document">
            <summary>
            Gets or sets the document this object belongs to.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfReference.PdfReferenceComparer">
            <summary>
            Implements a comparer that compares PdfReference objects by their PdfObjectID.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfResourceMap">
            <summary>
            Base class for all dictionaries that map resource names to objects.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfResourceMap.CollectResourceNames(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Adds all imported resource names to the specified hashtable.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfResources">
            <summary>
            Represents a PDF resource object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfResources.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfResources"/> class.
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfResources.AddFont(Alt.GUI.PdfSharp.Pdf.Advanced.PdfFont)">
            <summary>
            Adds the specified font to this resource dictionary and returns its local resource name.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfResources.AddImage(Alt.GUI.PdfSharp.Pdf.Advanced.PdfImage)">
            <summary>
            Adds the specified image to this resource dictionary
            and returns its local resource name.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfResources.AddForm(Alt.GUI.PdfSharp.Pdf.Advanced.PdfFormXObject)">
            <summary>
            Adds the specified form object to this resource dictionary
            and returns its local resource name.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfResources.AddExtGState(Alt.GUI.PdfSharp.Pdf.Advanced.PdfExtGState)">
            <summary>
            Adds the specified graphics state to this resource dictionary
            and returns its local resource name.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfResources.AddPattern(Alt.GUI.PdfSharp.Pdf.Advanced.PdfShadingPattern)">
            <summary>
            Adds the specified pattern to this resource dictionary
            and returns its local resource name.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfResources.AddPattern(Alt.GUI.PdfSharp.Pdf.Advanced.PdfTilingPattern)">
            <summary>
            Adds the specified pattern to this resource dictionary
            and returns its local resource name.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfResources.AddShading(Alt.GUI.PdfSharp.Pdf.Advanced.PdfShading)">
            <summary>
            Adds the specified shading to this resource dictionary
            and returns its local resource name.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfResources.ExistsResourceNames(System.String)">
            <summary>
            Check whether a resource name is already used in the context of this resource dictionary.
            PDF4NET uses GUIDs as resource names, but I think this weapon is to heavy.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfResources.importedResourceNames">
            <summary>
            All the names of imported resources.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfResources.resources">
            <summary>
            Maps all PDFsharp resources to their local resource names.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfResources.Fonts">
            <summary>
            Gets the fonts map.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfResources.XObjects">
            <summary>
            Gets the external objects map.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfResources.NextFontName">
            <summary>
            Gets a new local name for this resource.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfResources.NextImageName">
            <summary>
            Gets a new local name for this resource.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfResources.NextFormName">
            <summary>
            Gets a new local name for this resource.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfResources.NextExtGStateName">
            <summary>
            Gets a new local name for this resource.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfResources.NextPatternName">
            <summary>
            Gets a new local name for this resource.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfResources.NextShadingName">
            <summary>
            Gets a new local name for this resource.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfResources.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfResources.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfResources.Keys.ExtGState">
            <summary>
            (Optional) A dictionary that maps resource names to graphics state 
            parameter dictionaries.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfResources.Keys.ColorSpace">
            <summary>
            (Optional) A dictionary that maps each resource name to either the name of a
            device-dependent color space or an array describing a color space.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfResources.Keys.Pattern">
            <summary>
            (Optional) A dictionary that maps each resource name to either the name of a
            device-dependent color space or an array describing a color space.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfResources.Keys.Shading">
            <summary>
            (Optional; PDF 1.3) A dictionary that maps resource names to shading dictionaries.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfResources.Keys.XObject">
            <summary>
            (Optional) A dictionary that maps resource names to external objects.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfResources.Keys.Font">
            <summary>
            (Optional) A dictionary that maps resource names to font dictionaries.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfResources.Keys.ProcSet">
            <summary>
            (Optional) An array of predefined procedure set names.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfResources.Keys.Properties">
            <summary>
            (Optional; PDF 1.2) A dictionary that maps resource names to property list
            dictionaries for marked content.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfResources.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfShading">
            <summary>
            Represents a shading dictionary.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfShading.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfShading"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfShading.SetupFromBrush(Alt.GUI.PdfSharp.Drawing.XLinearGradientBrush)">
            <summary>
            Setups the shading from the specified brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfShading.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfShading.Keys">
            <summary>
            Common keys for all streams.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfShading.Keys.ShadingType">
            <summary>
            (Required) The shading type:
            1 Function-based shading
            2 Axial shading
            3 Radial shading
            4 Free-form Gouraud-shaded triangle mesh
            5 Lattice-form Gouraud-shaded triangle mesh
            6 Coons patch mesh
            7 Tensor-product patch mesh
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfShading.Keys.ColorSpace">
            <summary>
            (Required) The color space in which color values are expressed. This may be any device, 
            CIE-based, or special color space except a Pattern space.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfShading.Keys.Background">
            <summary>
            (Optional) An array of color components appropriate to the color space, specifying
            a single background color value. If present, this color is used, before any painting 
            operation involving the shading, to fill those portions of the area to be painted 
            that lie outside the bounds of the shading object. In the opaque imaging model, 
            the effect is as if the painting operation were performed twice: first with the 
            background color and then with the shading.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfShading.Keys.BBox">
            <summary>
            (Optional) An array of four numbers giving the left, bottom, right, and top coordinates, 
            respectively, of the shading’s bounding box. The coordinates are interpreted in the 
            shading’s target coordinate space. If present, this bounding box is applied as a temporary 
            clipping boundary when the shading is painted, in addition to the current clipping path
            and any other clipping boundaries in effect at that time.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfShading.Keys.AntiAlias">
            <summary>
            (Optional) A flag indicating whether to filter the shading function to prevent aliasing 
            artifacts. The shading operators sample shading functions at a rate determined by the 
            resolution of the output device. Aliasing can occur if the function is not smooth—that
            is, if it has a high spatial frequency relative to the sampling rate. Anti-aliasing can
            be computationally expensive and is usually unnecessary, since most shading functions
            are smooth enough or are sampled at a high enough frequency to avoid aliasing effects.
            Anti-aliasing may not be implemented on some output devices, in which case this flag
            is ignored.
            Default value: false.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfShading.Keys.Coords">
            <summary>
            (Required) An array of four numbers [x0 y0 x1 y1] specifying the starting and
            ending coordinates of the axis, expressed in the shading’s target coordinate space.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfShading.Keys.Domain">
            <summary>
            (Optional) An array of two numbers [t0 t1] specifying the limiting values of a
            parametric variable t. The variable is considered to vary linearly between these
            two values as the color gradient varies between the starting and ending points of
            the axis. The variable t becomes the input argument to the color function(s).
            Default value: [0.0 1.0].
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfShading.Keys.Function">
            <summary>
            (Required) A 1-in, n-out function or an array of n 1-in, 1-out functions (where n
            is the number of color components in the shading dictionary’s color space). The
            function(s) are called with values of the parametric variable t in the domain defined
            by the Domain entry. Each function’s domain must be a superset of that of the shading
            dictionary. If the value returned by the function for a given color component is out
            of range, it is adjusted to the nearest valid value.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfShading.Keys.Extend">
            <summary>
            (Optional) An array of two boolean values specifying whether to extend the shading
            beyond the starting and ending points of the axis, respectively.
            Default value: [false false].
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfShading.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfShadingPattern">
            <summary>
            Represents a shading pattern dictionary.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfShadingPattern.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfShadingPattern"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfShadingPattern.SetupFromBrush(Alt.GUI.PdfSharp.Drawing.XLinearGradientBrush,Alt.GUI.PdfSharp.Drawing.XMatrix)">
            <summary>
            Setups the shading pattern from the specified brush.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfShadingPattern.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfShadingPattern.Keys">
            <summary>
            Common keys for all streams.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfShadingPattern.Keys.Type">
            <summary>
            (Optional) The type of PDF object that this dictionary describes; if present,
            must be Pattern for a pattern dictionary.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfShadingPattern.Keys.PatternType">
            <summary>
            (Required) A code identifying the type of pattern that this dictionary describes;
            must be 2 for a shading pattern.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfShadingPattern.Keys.Shading">
            <summary>
            (Required) A shading object (see below) defining the shading pattern’s gradient fill.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfShadingPattern.Keys.Matrix">
            <summary>
            (Optional) An array of six numbers specifying the pattern matrix.
            Default value: the identity matrix [1 0 0 1 0 0].
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfShadingPattern.Keys.ExtGState">
            <summary>
            (Optional) A graphics state parameter dictionary containing graphics state parameters
            to be put into effect temporarily while the shading pattern is painted. Any parameters
            that are not so specified are inherited from the graphics state that was in effect
            at the beginning of the content stream in which the pattern is defined as a resource.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfShadingPattern.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfSoftMask">
            <summary>
            Represents a PDF soft mask.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfSoftMask.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfXObject"/> class.
            </summary>
            <param name="document">The document that owns the object.</param>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfSoftMask.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfSoftMask.Keys.Type">
            <summary>
            (Optional) The type of PDF object that this dictionary describes;
            if present, must be Mask for a soft-mask dictionary.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfSoftMask.Keys.S">
            <summary>
            (Required) A subtype specifying the method to be used in deriving the mask values
            from the transparency group specified by the G entry:
            Alpha: Use the group’s computed alpha, disregarding its color.
            Luminosity: Convert the group’s computed color to a single-component luminosity value.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfSoftMask.Keys.G">
            <summary>
            (Required) A transparency group XObject to be used as the source of alpha
            or color values for deriving the mask. If the subtype S is Luminosity, the
            group attributes dictionary must contain a CS entry defining the color space
            in which the compositing computation is to be performed.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfSoftMask.Keys.BC">
            <summary>
            (Optional) An array of component values specifying the color to be used
            as the backdrop against which to composite the transparency group XObject G.
            This entry is consulted only if the subtype S is Luminosity. The array consists of
            n numbers, where n is the number of components in the color space specified
            by the CS entry in the group attributes dictionary.
            Default value: the color space’s initial value, representing black.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfSoftMask.Keys.TR">
            <summary>
            (Optional) A function object specifying the transfer function to be used in
            deriving the mask values. The function accepts one input, the computed
            group alpha or luminosity (depending on the value of the subtype S), and
            returns one output, the resulting mask value. Both the input and output
            must be in the range 0.0 to 1.0; if the computed output falls outside this
            range, it is forced to the nearest valid value. The name Identity may be
            specified in place of a function object to designate the identity function.
            Default value: Identity.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTilingPattern">
            <summary>
            Represents a tiling pattern dictionary.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTilingPattern.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfShadingPattern"/> class.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTilingPattern.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTilingPattern.Keys">
            <summary>
            Common keys for all streams.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTilingPattern.Keys.Type">
            <summary>
            (Optional) The type of PDF object that this dictionary describes; if present,
            must be Pattern for a pattern dictionary.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTilingPattern.Keys.PatternType">
            <summary>
            (Required) A code identifying the type of pattern that this dictionary describes;
            must be 1 for a tiling pattern.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTilingPattern.Keys.PaintType">
            <summary>
            (Required) A code that determines how the color of the pattern cell is to be specified:
            1: Colored tiling pattern. The pattern’s content stream specifies the colors used to 
            paint the pattern cell. When the content stream begins execution, the current color
            is the one that was initially in effect in the pattern’s parent content stream.
            2: Uncolored tiling pattern. The pattern’s content stream does not specify any color
            information. Instead, the entire pattern cell is painted with a separately specified color
            each time the pattern is used. Essentially, the content stream describes a stencil
            through which the current color is to be poured. The content stream must not invoke
            operators that specify colors or other color-related parameters in the graphics state;
            otherwise, an error occurs. The content stream may paint an image mask, however,
            since it does not specify any color information.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTilingPattern.Keys.TilingType">
            <summary>
            (Required) A code that controls adjustments to the spacing of tiles relative to the device
            pixel grid:
            1: Constant spacing. Pattern cells are spaced consistently—that is, by a multiple of a
            device pixel. To achieve this, the application may need to distort the pattern cell slightly
            by making small adjustments to XStep, YStep, and the transformation matrix. The amount
            of distortion does not exceed 1 device pixel.
            2: No distortion. The pattern cell is not distorted, but the spacing between pattern cells
            may vary by as much as 1 device pixel, both horizontally and vertically, when the pattern
            is painted. This achieves the spacing requested by XStep and YStep on average but not
            necessarily for each individual pattern cell.
            3: Constant spacing and faster tiling. Pattern cells are spaced consistently as in tiling
            type 1 but with additional distortion permitted to enable a more efficient implementation. 
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTilingPattern.Keys.BBox">
            <summary>
            (Required) An array of four numbers in the pattern coordinate system giving the
            coordinates of the left, bottom, right, and top edges, respectively, of the pattern
            cell’s bounding box. These boundaries are used to clip the pattern cell.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTilingPattern.Keys.XStep">
            <summary>
            (Required) The desired horizontal spacing between pattern cells, measured in the
            pattern coordinate system.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTilingPattern.Keys.YStep">
            <summary>
            (Required) The desired vertical spacing between pattern cells, measured in the pattern
            coordinate system. Note that XStep and YStep may differ from the dimensions of the
            pattern cell implied by the BBox entry. This allows tiling with irregularly shaped figures.
            XStep and YStep may be either positive or negative but not zero.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTilingPattern.Keys.Resources">
            <summary>
            (Required) A resource dictionary containing all of the named resources required by
            the pattern’s content stream (see Section 3.7.2, “Resource Dictionaries”).
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTilingPattern.Keys.Matrix">
            <summary>
            (Optional) An array of six numbers specifying the pattern matrix.
            Default value: the identity matrix [1 0 0 1 0 0].
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTilingPattern.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfToUnicodeMap">
            <summary>
            Represents a ToUnicode map for composite font.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfToUnicodeMap.PrepareForSave">
            <summary>
            Creates the ToUnicode map from the CMapInfo.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfToUnicodeMap.CMapInfo">
            <summary>
            Gets or sets the CMap info.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTrailer">
            <summary>
            Represents a PDF trailer dictionary. Even trailers are dictionaries their never have a cross
            reference entry in PdfReferenceTable.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTrailer.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of PdfTrailer.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTrailer.GetDocumentID(System.Int32)">
            <summary>
            Gets the first or second document identifier.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTrailer.SetDocumentID(System.Int32,System.String)">
            <summary>
            Sets the first or second document identifier.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTrailer.CreateNewDocumentIDs">
            <summary>
            Creates and sets two identical new document IDs.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTrailer.Finish">
            <summary>
            Replace temporary irefs by their correct counterparts from the iref table.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTrailer.Root">
            <summary>
            (Required; must be an indirect reference)
            The catalog dictionary for the PDF document contained in the file.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTrailer.SecurityHandler">
            <summary>
            Gets the standard security handler.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTrailer.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTrailer.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTrailer.Keys.Size">
            <summary>
            (Required; must not be an indirect reference) The total number of entries in the file’s 
            cross-reference table, as defined by the combination of the original section and all
            update sections. Equivalently, this value is 1 greater than the highest object number
            used in the file.
            Note: Any object in a cross-reference section whose number is greater than this value is
            ignored and considered missing.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTrailer.Keys.Prev">
            <summary>
            (Present only if the file has more than one cross-reference section; must not be an indirect
            reference) The byte offset from the beginning of the file to the beginning of the previous 
            cross-reference section.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTrailer.Keys.Root">
            <summary>
            (Required; must be an indirect reference) The catalog dictionary for the PDF document
            contained in the file.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTrailer.Keys.Encrypt">
            <summary>
            (Required if document is encrypted; PDF 1.1) The document’s encryption dictionary.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTrailer.Keys.Info">
            <summary>
            (Optional; must be an indirect reference) The document’s information dictionary.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTrailer.Keys.ID">
            <summary>
            (Optional, but strongly recommended; PDF 1.1) An array of two strings constituting
            a file identifier for the file. Although this entry is optional, 
            its absence might prevent the file from functioning in some workflows
            that depend on files being uniquely identified.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTrailer.Keys.XRefStm">
            <summary>
            (Optional) The byte offset from the beginning of the file of a cross-reference stream.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTrailer.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTransparencyGroupAttributes">
            <summary>
            Represents a PDF transparency group XObject.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTransparencyGroupAttributes.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTransparencyGroupAttributes.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTransparencyGroupAttributes.Keys.CS">
            <summary>
            (Sometimes required, as discussed below)
            The group color space, which is used for the following purposes:
            • As the color space into which colors are converted when painted into the group
            • As the blending color space in which objects are composited within the group
            • As the color space of the group as a whole when it in turn is painted as an object onto its backdrop
            The group color space may be any device or CIE-based color space that
            treats its components as independent additive or subtractive values in the
            range 0.0 to 1.0, subject to the restrictions described in Section 7.2.3, “Blending Color Space.”
            These restrictions exclude Lab and lightness-chromaticity ICCBased color spaces,
            as well as the special color spaces Pattern, Indexed, Separation, and DeviceN.
            Device color spaces are subject to remapping according to the DefaultGray,
            DefaultRGB, and DefaultCMYK entries in the ColorSpace subdictionary of the
            current resource dictionary.
            Ordinarily, the CS entry is allowed only for isolated transparency groups
            (those for which I, below, is true), and even then it is optional. However,
            this entry is required in the group attributes dictionary for any transparency
            group XObject that has no parent group or page from which to inherit — in
            particular, one that is the value of the G entry in a soft-mask dictionary of
            subtype Luminosity.
            In addition, it is always permissible to specify CS in the group attributes
            dictionary associated with a page object, even if I is false or absent. In the
            normal case in which the page is imposed directly on the output medium,
            the page group is effectively isolated regardless of the I value, and the 
            specified CS value is therefore honored. But if the page is in turn used as an
            element of some other page and if the group is non-isolated, CS is ignored
            and the color space is inherited from the actual backdrop with which the
            page is composited.
            Default value: the color space of the parent group or page into which this
            transparency group is painted. (The parent’s color space in turn can be
            either explicitly specified or inherited.)
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTransparencyGroupAttributes.Keys.I">
            <summary>
            (Optional) A flag specifying whether the transparency group is isolated.
            If this flag is true, objects within the group are composited against a fully
            transparent initial backdrop; if false, they are composited against the
            group’s backdrop.
            Default value: false.
            In the group attributes dictionary for a page, the interpretation of this
            entry is slightly altered. In the normal case in which the page is imposed
            directly on the output medium, the page group is effectively isolated and
            the specified I value is ignored. But if the page is in turn used as an
            element of some other page, it is treated as if it were a transparency
            group XObject; the I value is interpreted in the normal way to determine
            whether the page group is isolated.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTransparencyGroupAttributes.Keys.K">
            <summary>
            (Optional) A flag specifying whether the transparency group is a knockout
            group. If this flag is false, later objects within the group are composited
            with earlier ones with which they overlap; if true, they are composited with
            the group’s initial backdrop and overwrite (“knock out”) any earlier
            overlapping objects.
            Default value: false.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTransparencyGroupAttributes.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTrueTypeFont">
            <summary>
            Represents a TrueType font.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTrueTypeFont.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument,Alt.GUI.PdfSharp.Drawing.XFont)">
            <summary>
            Initializes a new instance of PdfTrueTypeFont from an XFont.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTrueTypeFont.PrepareForSave">
            <summary>
            Prepares the object to get saved.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTrueTypeFont.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTrueTypeFont.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTrueTypeFont.Keys.Type">
            <summary>
            (Required) The type of PDF object that this dictionary describes;
            must be Font for a font dictionary.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTrueTypeFont.Keys.Subtype">
            <summary>
            (Required) The type of font; must be TrueType for a TrueType font.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTrueTypeFont.Keys.Name">
            <summary>
            (Required in PDF 1.0; optional otherwise) The name by which this font is 
            referenced in the Font subdictionary of the current resource dictionary.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTrueTypeFont.Keys.BaseFont">
            <summary>
            (Required) The PostScript name of the font. For Type 1 fonts, this is usually
            the value of the FontName entry in the font program; for more information.
            The Post-Script name of the font can be used to find the font’s definition in 
            the consumer application or its environment. It is also the name that is used when
            printing to a PostScript output device.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTrueTypeFont.Keys.FirstChar">
            <summary>
            (Required except for the standard 14 fonts) The first character code defined 
            in the font’s Widths array.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTrueTypeFont.Keys.LastChar">
            <summary>
            (Required except for the standard 14 fonts) The last character code defined
            in the font’s Widths array.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTrueTypeFont.Keys.Widths">
            <summary>
            (Required except for the standard 14 fonts; indirect reference preferred)
            An array of (LastChar - FirstChar + 1) widths, each element being the glyph width
            for the character code that equals FirstChar plus the array index. For character
            codes outside the range FirstChar to LastChar, the value of MissingWidth from the 
            FontDescriptor entry for this font is used. The glyph widths are measured in units 
            in which 1000 units corresponds to 1 unit in text space. These widths must be 
            consistent with the actual widths given in the font program. 
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTrueTypeFont.Keys.FontDescriptor">
            <summary>
            (Required except for the standard 14 fonts; must be an indirect reference)
            A font descriptor describing the font’s metrics other than its glyph widths.
            Note: For the standard 14 fonts, the entries FirstChar, LastChar, Widths, and 
            FontDescriptor must either all be present or all be absent. Ordinarily, they are
            absent; specifying them enables a standard font to be overridden.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTrueTypeFont.Keys.Encoding">
            <summary>
            (Optional) A specification of the font’s character encoding if different from its
            built-in encoding. The value of Encoding is either the name of a predefined
            encoding (MacRomanEncoding, MacExpertEncoding, or WinAnsiEncoding, as described in 
            Appendix D) or an encoding dictionary that specifies differences from the font’s
            built-in encoding or from a specified predefined encoding.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTrueTypeFont.Keys.ToUnicode">
            <summary>
            (Optional; PDF 1.2) A stream containing a CMap file that maps character
            codes to Unicode values.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfTrueTypeFont.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfType0Font">
            <summary>
            Represents a composite font. Used for Unicode encoding.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfType0Font.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Advanced.PdfType0Font.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfType0Font.Keys.Type">
            <summary>
            (Required) The type of PDF object that this dictionary describes;
            must be Font for a font dictionary.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfType0Font.Keys.Subtype">
            <summary>
            (Required) The type of font; must be Type0 for a Type 0 font.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfType0Font.Keys.BaseFont">
            <summary>
            (Required) The PostScript name of the font. In principle, this is an arbitrary
            name, since there is no font program associated directly with a Type 0 font
            dictionary. The conventions described here ensure maximum compatibility
            with existing Acrobat products.
            If the descendant is a Type 0 CIDFont, this name should be the concatenation
            of the CIDFont’s BaseFont name, a hyphen, and the CMap name given in the
            Encoding entry (or the CMapName entry in the CMap). If the descendant is a
            Type 2 CIDFont, this name should be the same as the CIDFont’s BaseFont name.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfType0Font.Keys.Encoding">
            <summary>
            (Required) The name of a predefined CMap, or a stream containing a CMap
            that maps character codes to font numbers and CIDs. If the descendant is a
            Type 2 CIDFont whose associated TrueType font program is not embedded
            in the PDF file, the Encoding entry must be a predefined CMap name.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfType0Font.Keys.DescendantFonts">
            <summary>
            (Required) A one-element array specifying the CIDFont dictionary that is the
            descendant of this Type 0 font.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Advanced.PdfType0Font.Keys.ToUnicode">
            <summary>
            ((Optional) A stream containing a CMap file that maps character codes to
            Unicode values.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Advanced.PdfType0Font.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotationFlags">
            <summary>
            Specifies the annotation flags.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotationFlags.Invisible">
            <summary>
            If set, do not display the annotation if it does not belong to one of the standard
            annotation types and no annotation handler is available. If clear, display such an
            unknown annotation using an appearance stream specified by its appearancedictionary,
            if any.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotationFlags.Hidden">
            <summary>
            (PDF 1.2) If set, do not display or print the annotation or allow it to interact
            with the user, regardless of its annotation type or whether an annotation
            handler is available. In cases where screen space is limited, the ability to hide
            and show annotations selectively can be used in combination with appearance
            streams to display auxiliary pop-up information similar in function to online
            help systems.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotationFlags.Print">
            <summary>
            (PDF 1.2) If set, print the annotation when the page is printed. If clear, never
            print the annotation, regardless of whether it is displayed on the screen. This
            can be useful, for example, for annotations representing interactive pushbuttons,
            which would serve no meaningful purpose on the printed page.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotationFlags.NoZoom">
            <summary>
            (PDF 1.3) If set, do not scale the annotation’s appearance to match the magnification
            of the page. The location of the annotation on the page (defined by the
            upper-left corner of its annotation rectangle) remains fixed, regardless of the
            page magnification. See below for further discussion.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotationFlags.NoRotate">
            <summary>
            (PDF 1.3) If set, do not rotate the annotation’s appearance to match the rotation
            of the page. The upper-left corner of the annotation rectangle remains in a fixed
            location on the page, regardless of the page rotation. See below for further discussion.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotationFlags.NoView">
            <summary>
            (PDF 1.3) If set, do not display the annotation on the screen or allow it to
            interact with the user. The annotation may be printed (depending on the setting
            of the Print flag) but should be considered hidden for purposes of on-screen
            display and user interaction.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotationFlags.ReadOnly">
            <summary>
            (PDF 1.3) If set, do not allow the annotation to interact with the user. The
            annotation may be displayed or printed (depending on the settings of the
            NoView and Print flags) but should not respond to mouse clicks or change its
            appearance in response to mouse motions.
            Note: This flag is ignored for widget annotations; its function is subsumed by
            the ReadOnly flag of the associated form field.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotationFlags.Locked">
            <summary>
            (PDF 1.4) If set, do not allow the annotation to be deleted or its properties
            (including position and size) to be modified by the user. However, this flag does
            not restrict changes to the annotation’s contents, such as the value of a form
            field.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotationFlags.ToggleNoView">
            <summary>
            (PDF 1.5) If set, invert the interpretation of the NoView flag for certain events.
            A typical use is to have an annotation that appears only when a mouse cursor is
            held over it.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Annotations.PdfRubberStampAnnotationIcon">
            <summary>
            Specifies the predefined icon names of rubber stamp annotations.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfRubberStampAnnotationIcon.NoIcon">
            <summary>
            A pre-defined rubber stamp annotation icon.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfRubberStampAnnotationIcon.Approved">
            <summary>
            A pre-defined rubber stamp annotation icon.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfRubberStampAnnotationIcon.AsIs">
            <summary>
            A pre-defined rubber stamp annotation icon.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfRubberStampAnnotationIcon.Confidential">
            <summary>
            A pre-defined rubber stamp annotation icon.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfRubberStampAnnotationIcon.Departmental">
            <summary>
            A pre-defined rubber stamp annotation icon.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfRubberStampAnnotationIcon.Draft">
            <summary>
            A pre-defined rubber stamp annotation icon.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfRubberStampAnnotationIcon.Experimental">
            <summary>
            A pre-defined rubber stamp annotation icon.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfRubberStampAnnotationIcon.Expired">
            <summary>
            A pre-defined rubber stamp annotation icon.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfRubberStampAnnotationIcon.Final">
            <summary>
            A pre-defined rubber stamp annotation icon.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfRubberStampAnnotationIcon.ForComment">
            <summary>
            A pre-defined rubber stamp annotation icon.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfRubberStampAnnotationIcon.ForPublicRelease">
            <summary>
            A pre-defined rubber stamp annotation icon.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfRubberStampAnnotationIcon.NotApproved">
            <summary>
            A pre-defined rubber stamp annotation icon.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfRubberStampAnnotationIcon.NotForPublicRelease">
            <summary>
            A pre-defined rubber stamp annotation icon.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfRubberStampAnnotationIcon.Sold">
            <summary>
            A pre-defined rubber stamp annotation icon.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfRubberStampAnnotationIcon.TopSecret">
            <summary>
            A pre-defined rubber stamp annotation icon.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Annotations.PdfTextAnnotationIcon">
            <summary>
            Specifies the pre-defined icon names of text annotations.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfTextAnnotationIcon.NoIcon">
            <summary>
            A pre-defined annotation icon.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfTextAnnotationIcon.Comment">
            <summary>
            A pre-defined annotation icon.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfTextAnnotationIcon.Help">
            <summary>
            A pre-defined annotation icon.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfTextAnnotationIcon.Insert">
            <summary>
            A pre-defined annotation icon.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfTextAnnotationIcon.Key">
            <summary>
            A pre-defined annotation icon.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfTextAnnotationIcon.NewParagraph">
            <summary>
            A pre-defined annotation icon.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfTextAnnotationIcon.Note">
            <summary>
            A pre-defined annotation icon.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfTextAnnotationIcon.Paragraph">
            <summary>
            A pre-defined annotation icon.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotation">
            <summary>
            Represents the base class of all annotations.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotation"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotation.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotation"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotation.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotation"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotation.Delete">
            <summary>
            Removes an annotation from the document
            <seealso cref="M:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotations.Remove(Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotation)"/>
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotation.Flags">
            <summary>
            Gets or sets the annotation flags of this instance.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotation.Parent">
            <summary>
            Gets or sets the PdfAnnotations object that this annotation belongs to.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotation.Rectangle">
            <summary>
            Gets or sets the annotation rectangle, defining the location of the annotation
            on the page in default user space units.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotation.Title">
            <summary>
            Gets or sets the text label to be displayed in the title bar of the annotation’s
            pop-up window when open and active. By convention, this entry identifies
            the user who added the annotation.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotation.Subject">
            <summary>
            Gets or sets text representing a short description of the subject being
            addressed by the annotation.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotation.Contents">
            <summary>
            Gets or sets the text to be displayed for the annotation or, if this type of
            annotation does not display text, an alternate description of the annotation’s
            contents in human-readable form.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotation.Color">
            <summary>
            Gets or sets the color representing the components of the annotation. If the color
            has an alpha value other than 1, it is ignored. Use property Opacity to get or set the
            opacity of an annotation.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotation.Opacity">
            <summary>
            Gets or sets the constant opacity value to be used in painting the annotation.
            This value applies to all visible elements of the annotation in its closed state
            (including its background and border) but not to the popup window that appears when
            the annotation is opened.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotation.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotation.Keys.Type">
            <summary>
            (Optional) The type of PDF object that this dictionary describes; if present,
            must be Annot for an annotation dictionary.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotation.Keys.Subtype">
            <summary>
            (Required) The type of annotation that this dictionary describes.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotation.Keys.Rect">
            <summary>
            (Required) The annotation rectangle, defining the location of the annotation
            on the page in default user space units.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotation.Keys.Contents">
            <summary>
            (Optional) Text to be displayed for the annotation or, if this type of annotation
            does not display text, an alternate description of the annotation’s contents
            in human-readable form. In either case, this text is useful when
            extracting the document’s contents in support of accessibility to users with
            disabilities or for other purposes.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotation.Keys.NM">
            <summary>
            (Optional; PDF 1.4) The annotation name, a text string uniquely identifying it
            among all the annotations on its page.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotation.Keys.M">
            <summary>
            (Optional; PDF 1.1) The date and time when the annotation was most recently
            modified. The preferred format is a date string, but viewer applications should be 
            prepared to accept and display a string in any format.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotation.Keys.F">
            <summary>
            (Optional; PDF 1.1) A set of flags specifying various characteristics of the annotation.
            Default value: 0.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotation.Keys.BS">
            <summary>
            (Optional; PDF 1.2) A border style dictionary specifying the characteristics of
            the annotation’s border.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotation.Keys.AP">
            <summary>
            (Optional; PDF 1.2) An appearance dictionary specifying how the annotation
            is presented visually on the page. Individual annotation handlers may ignore
            this entry and provide their own appearances.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotation.Keys.AS">
            <summary>
            (Required if the appearance dictionary AP contains one or more subdictionaries; PDF 1.2)
            The annotation’s appearance state, which selects the applicable appearance stream from 
            an appearance subdictionary.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotation.Keys.Border">
            <summary>
            (Optional) An array specifying the characteristics of the annotation’s border.
            The border is specified as a rounded rectangle.
            In PDF 1.0, the array consists of three numbers defining the horizontal corner 
            radius, vertical corner radius, and border width, all in default user space units.
            If the corner radii are 0, the border has square (not rounded) corners; if the border 
            width is 0, no border is drawn.
            In PDF 1.1, the array may have a fourth element, an optional dash array defining a 
            pattern of dashes and gaps to be used in drawing the border. The dash array is 
            specified in the same format as in the line dash pattern parameter of the graphics state.
            For example, a Border value of [0 0 1 [3 2]] specifies a border 1 unit wide, with
            square corners, drawn with 3-unit dashes alternating with 2-unit gaps. Note that no
            dash phase is specified; the phase is assumed to be 0.
            Note: In PDF 1.2 or later, this entry may be ignored in favor of the BS entry.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotation.Keys.C">
            <summary>
            (Optional; PDF 1.1) An array of three numbers in the range 0.0 to 1.0, representing
            the components of a color in the DeviceRGB color space. This color is used for the
            following purposes:
            • The background of the annotation’s icon when closed
            • The title bar of the annotation’s pop-up window
            • The border of a link annotation
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotation.Keys.A">
            <summary>
            (Optional; PDF 1.1) An action to be performed when the annotation is activated.
            Note: This entry is not permitted in link annotations if a Dest entry is present.
            Also note that the A entry in movie annotations has a different meaning.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotation.Keys.T">
            <summary>
            (Optional; PDF 1.1) The text label to be displayed in the title bar of the annotation’s
            pop-up window when open and active. By convention, this entry identifies
            the user who added the annotation.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotation.Keys.Popup">
            <summary>
            (Optional; PDF 1.3) An indirect reference to a pop-up annotation for entering or
            editing the text associated with this annotation.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotation.Keys.CA">
            <summary>
            (Optional; PDF 1.4) The constant opacity value to be used in painting the annotation.
            This value applies to all visible elements of the annotation in its closed state
            (including its background and border) but not to the popup window that appears when
            the annotation is opened.
            The specified value is not used if the annotation has an appearance stream; in that
            case, the appearance stream must specify any transparency. (However, if the viewer
            regenerates the annotation’s appearance stream, it may incorporate the CA value
            into the stream’s content.)
            The implicit blend mode is Normal.
            Default value: 1.0.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotation.Keys.Subj">
            <summary>
            (Optional; PDF 1.5) Text representing a short description of the subject being
            addressed by the annotation.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotations">
            <summary>
            Represents the annotations array of a page.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotations.Add(Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotation)">
            <summary>
            Adds the specified annotation.
            </summary>
            <param name="annotation">The annotation.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotations.Remove(Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotation)">
            <summary>
            Removes an annotation from the document.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotations.Clear">
            <summary>
            Removes all the annotations from the current page.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotations.FixImportedAnnotation(Alt.GUI.PdfSharp.Pdf.PdfPage)">
            <summary>
            Fixes the /P element in imported annotation.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotations.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotations.Count">
            <summary>
            Gets the number of annotations in this collection.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotations.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotation"/> at the specified index.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Annotations.PdfAnnotations.Page">
            <summary>
            Gets the page the annotations belongs to.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Annotations.PdfGenericAnnotation">
            <summary>
            Represents a generic annotation. Used for annotation dictionaries unknown to PDFsharp.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Annotations.PdfGenericAnnotation.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Annotations.PdfGenericAnnotation.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Annotations.PdfLinkAnnotation">
            <summary>
            Represents a link annotation.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Annotations.PdfLinkAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.Annotations.PdfLinkAnnotation"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Annotations.PdfLinkAnnotation.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.Annotations.PdfLinkAnnotation"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Annotations.PdfLinkAnnotation.CreateDocumentLink(Alt.GUI.PdfSharp.Pdf.PdfRectangle,System.Int32)">
            <summary>
            Creates a link within the current document.
            </summary>
            <param name="rect">The link area in default page coordinates.</param>
            <param name="destinationPage">The one-based destination page number.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Annotations.PdfLinkAnnotation.CreateWebLink(Alt.GUI.PdfSharp.Pdf.PdfRectangle,System.String)">
            <summary>
            Creates a link to the web.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Annotations.PdfLinkAnnotation.CreateFileLink(Alt.GUI.PdfSharp.Pdf.PdfRectangle,System.String)">
            <summary>
            Creates a link to a file.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Annotations.PdfLinkAnnotation.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Annotations.PdfLinkAnnotation.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfLinkAnnotation.Keys.Dest">
            <summary>
            (Optional; not permitted if an A entry is present) A destination to be displayed
            when the annotation is activated.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfLinkAnnotation.Keys.H">
            <summary>
            (Optional; PDF 1.2) The annotation’s highlighting mode, the visual effect to be
            used when the mouse button is pressed or held down inside its active area:
            N (None) No highlighting.
            I (Invert) Invert the contents of the annotation rectangle.
            O (Outline) Invert the annotation’s border.
            P (Push) Display the annotation as if it were being pushed below the surface of the page.
            Default value: I.
            Note: In PDF 1.1, highlighting is always done by inverting colors inside the annotation rectangle.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfLinkAnnotation.Keys.PA">
            <summary>
            (Optional; PDF 1.3) A URI action formerly associated with this annotation. When Web 
            Capture changes and annotation from a URI to a go-to action, it uses this entry to save 
            the data from the original URI action so that it can be changed back in case the target page for 
            the go-to action is subsequently deleted.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Annotations.PdfLinkAnnotation.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Annotations.PdfRubberStampAnnotation">
            <summary>
            Represents a rubber stamp annotation.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Annotations.PdfRubberStampAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.Annotations.PdfRubberStampAnnotation"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Annotations.PdfRubberStampAnnotation.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.Annotations.PdfRubberStampAnnotation"/> class.
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Annotations.PdfRubberStampAnnotation.Icon">
            <summary>
            Gets or sets an icon to be used in displaying the annotation.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Annotations.PdfRubberStampAnnotation.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Annotations.PdfRubberStampAnnotation.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfRubberStampAnnotation.Keys.Name">
            <summary>
            (Optional) The name of an icon to be used in displaying the annotation. Viewer
            applications should provide predefined icon appearances for at least the following
            standard names:
              Approved
              AsIs
              Confidential
              Departmental
              Draft
              Experimental
              Expired
              Final
              ForComment
              ForPublicRelease
              NotApproved
              NotForPublicRelease
              Sold
              TopSecret
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Annotations.PdfTextAnnotation">
            <summary>
            Represents a text annotation.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Annotations.PdfTextAnnotation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.Annotations.PdfTextAnnotation"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Annotations.PdfTextAnnotation.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.Annotations.PdfTextAnnotation"/> class.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Annotations.PdfTextAnnotation.Open">
            <summary>
            Gets or sets a flag indicating whether the annotation should initially be displayed open.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Annotations.PdfTextAnnotation.Icon">
            <summary>
            Gets or sets an icon to be used in displaying the annotation.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Annotations.PdfTextAnnotation.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Annotations.PdfTextAnnotation.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfTextAnnotation.Keys.Open">
            <summary>
            (Optional) A flag specifying whether the annotation should initially be displayed open.
            Default value: false (closed).
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfTextAnnotation.Keys.Name">
            <summary>
            (Optional) The name of an icon to be used in displaying the annotation. Viewer
            applications should provide predefined icon appearances for at least the following
            standard names:
              Comment 
              Help 
              Insert
              Key 
              NewParagraph 
              Note
              Paragraph
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Annotations.PdfWidgetAnnotation">
            <summary>
            Represents a text annotation.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Annotations.PdfWidgetAnnotation.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Annotations.PdfWidgetAnnotation.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfWidgetAnnotation.Keys.H">
            <summary>
            (Optional) The annotation’s highlighting mode, the visual effect to be used when
            the mouse button is pressed or held down inside its active area:
              N (None) No highlighting.
              I (Invert) Invert the contents of the annotation rectangle.
              O (Outline) Invert the annotation’s border.
              P (Push) Display the annotation’s down appearance, if any. If no down appearance is defined,
                offset the contents of the annotation rectangle to appear as if it were being pushed below
                the surface of the page.
              T (Toggle) Same as P (which is preferred).
            A highlighting mode other than P overrides any down appearance defined for the annotation. 
            Default value: I.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Annotations.PdfWidgetAnnotation.Keys.MK">
            <summary>
            (Optional) An appearance characteristics dictionary to be used in constructing a dynamic 
            appearance stream specifying the annotation’s visual presentation on the page.
            The name MK for this entry is of historical significance only and has no direct meaning.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Content.Objects.CObject">
            <summary>
            Base class for all PDF content stream objects.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.Objects.CObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.Content.Objects.CObject"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.Objects.CObject.Alt#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.Objects.CObject.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.Objects.CObject.Copy">
            <summary>
            Implements the copy mechanism. Must be overridden in derived classes.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.Objects.CObject.WriteObject(Alt.GUI.PdfSharp.Pdf.Content.ContentWriter)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Content.Objects.CComment">
            <summary>
            Represents a comment in a PDF content stream.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.Objects.CComment.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.Objects.CComment.Copy">
            <summary>
            Implements the copy mechanism of this class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.Objects.CComment.ToString">
            <summary>
            Returns a string that represents the current comment.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Content.Objects.CComment.Text">
            <summary>
            Gets or sets the comment text.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Content.Objects.CSequence">
            <summary>
            Represents a sequence of objects in a PDF content stream.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.Objects.CSequence.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.Objects.CSequence.Copy">
            <summary>
            Implements the copy mechanism of this class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.Objects.CSequence.Add(Alt.GUI.PdfSharp.Pdf.Content.Objects.CSequence)">
            <summary>
            Adds the specified sequence.
            </summary>
            <param name="sequence">The sequence.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.Objects.CSequence.Add(Alt.GUI.PdfSharp.Pdf.Content.Objects.CObject)">
            <summary>
            Adds the specified value add the end of the sequence.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.Objects.CSequence.Clear">
            <summary>
            Removes all elements from the sequence.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.Objects.CSequence.Contains(Alt.GUI.PdfSharp.Pdf.Content.Objects.CObject)">
            <summary>
            Determines whether the specified value is in the sequence.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.Objects.CSequence.IndexOf(Alt.GUI.PdfSharp.Pdf.Content.Objects.CObject)">
            <summary>
            Returns the index of the specified value in the sequence or -1, if no such value is in the sequence.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.Objects.CSequence.Insert(System.Int32,Alt.GUI.PdfSharp.Pdf.Content.Objects.CObject)">
            <summary>
            Inserts the specified value in the sequence.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.Objects.CSequence.Remove(Alt.GUI.PdfSharp.Pdf.Content.Objects.CObject)">
            <summary>
            Removes the specified value from the sequence.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.Objects.CSequence.RemoveAt(System.Int32)">
            <summary>
            Removes the value at the specified index from the sequence.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.Objects.CSequence.CopyTo(Alt.GUI.PdfSharp.Pdf.Content.Objects.CObject[],System.Int32)">
            <summary>
            Copies the elements of the sequence to the specified array.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.Objects.CSequence.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the sequence.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.Objects.CSequence.ToContent">
            <summary>
            Converts the sequence to a PDF content stream.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.Objects.CSequence.ToString">
            <summary>
            Returns a string containing all elements of the sequence.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Content.Objects.CSequence.Item(System.Int32)">
            <summary>
            Gets or sets a CObject at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Content.Objects.CSequence.Count">
            <summary>
            Gets the number of elements contained in the sequence.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Content.Objects.CNumber">
            <summary>
            Represents the base class for numerical objects in a PDF content stream.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.Objects.CNumber.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.Objects.CNumber.Copy">
            <summary>
            Implements the copy mechanism of this class.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Content.Objects.CInteger">
            <summary>
            Represents an integer value in a PDF content stream.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.Objects.CInteger.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.Objects.CInteger.Copy">
            <summary>
            Implements the copy mechanism of this class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.Objects.CInteger.ToString">
            <summary>
            Returns a string that represents the current value.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Content.Objects.CInteger.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Content.Objects.CReal">
            <summary>
            Represents a real value in a PDF content stream.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.Objects.CReal.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.Objects.CReal.Copy">
            <summary>
            Implements the copy mechanism of this class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.Objects.CReal.ToString">
            <summary>
            Returns a string that represents the current value.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Content.Objects.CReal.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Content.Objects.CString">
            <summary>
            Represents a string value in a PDF content stream.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.Objects.CString.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.Objects.CString.Copy">
            <summary>
            Implements the copy mechanism of this class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.Objects.CString.ToString">
            <summary>
            Returns a string that represents the current value.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Content.Objects.CString.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Content.Objects.CName">
            <summary>
            Represents a name in a PDF content stream.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.Objects.CName.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.Content.Objects.CName"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.Objects.CName.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.Content.Objects.CName"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.Objects.CName.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.Objects.CName.Copy">
            <summary>
            Implements the copy mechanism of this class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.Objects.CName.ToString">
            <summary>
            Returns a string that represents the current value.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Content.Objects.CName.Name">
            <summary>
            Gets or sets the name. Names must start with a slash.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Content.Objects.CArray">
            <summary>
            Represents an array of objects in a PDF content stream.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.Objects.CArray.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.Objects.CArray.Copy">
            <summary>
            Implements the copy mechanism of this class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.Objects.CArray.ToString">
            <summary>
            Returns a string that represents the current value.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Content.Objects.COperator">
            <summary>
            Represents an operator a PDF content stream.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.Objects.COperator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.Content.Objects.COperator"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.Objects.COperator.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.Objects.COperator.Copy">
            <summary>
            Implements the copy mechanism of this class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.Objects.COperator.ToString">
            <summary>
            Returns a string that represents the current operator.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Content.Objects.COperator.Name">
            <summary>
            Gets or sets the name of the operator
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Content.Objects.COperator.Operands">
            <summary>
            Gets or sets the operands.
            </summary>
            <value>The operands.</value>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Content.Objects.COperator.OpCode">
            <summary>
            Gets the operator description for this instance.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Content.Objects.OpCodeFlags">
            <summary>
            Specifies the group of operations the op-code belongs to.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Content.Objects.OpCodeFlags.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Content.Objects.OpCodeFlags.TextOut">
            <summary>
            
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Content.Objects.OpCodeName">
            <summary>
            The names of the op-codes. 
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Content.Objects.OpCode">
            <summary>
            Represents a PDF content stream operator description.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.Objects.OpCode.#ctor(System.String,Alt.GUI.PdfSharp.Pdf.Content.Objects.OpCodeName,System.Int32,System.String,Alt.GUI.PdfSharp.Pdf.Content.Objects.OpCodeFlags,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.Content.Objects.OpCode"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="opcodeName">The enum value of the operator.</param>
            <param name="operands">The number of operands.</param>
            <param name="postscript">The postscript equivalent, or null, if no such operation exists.</param>
            <param name="flags">The flags.</param>
            <param name="description">The description from Adobe PDF Reference.</param>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Content.Objects.OpCode.Name">
            <summary>
            The name of the operator.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Content.Objects.OpCode.OpCodeName">
            <summary>
            The enum value of the operator.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Content.Objects.OpCode.Operands">
            <summary>
            The number of operands. -1 indicates a variable number of operands.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Content.Objects.OpCode.Flags">
            <summary>
            The flags.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Content.Objects.OpCode.Postscript">
            <summary>
            The postscript equivalent, or null, if no such operation exists.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Content.Objects.OpCode.Description">
            <summary>
            The description from Adobe PDF Reference.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Content.Objects.OpCodes">
            <summary>
            Static class with all PDF op-codes.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.Objects.OpCodes.OperatorFromName(System.String)">
            <summary>
            Operators from name.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.Objects.OpCodes.#cctor">
            <summary>
            Initializes the <see cref="T:Alt.GUI.PdfSharp.Pdf.Content.Objects.OpCodes"/> class.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Content.Objects.OpCodes.ops">
            <summary>
            Array of all OpCodes.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Content.Chars">
            <summary>
            Character table by name. Same as PdfSharp.Pdf.IO.Chars. Not yet clear if necessary.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Content.CLexer">
            <summary>
            Lexical analyzer for PDF content files. Adobe specifies no grammar, but it seems that it
            is a simple post-fix notation.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.CLexer.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the Lexer class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.CLexer.ScanNextToken">
            <summary>
            Reads the next token and returns its type.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.CLexer.ScanComment">
            <summary>
            Scans a comment line. (Not yet used, comments are skipped by lexer.)
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.CLexer.ScanInlineImage">
            <summary>
            Scans the bytes of an inline image
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.CLexer.ScanName">
            <summary>
            Scans a name.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.CLexer.ScanNumber">
            <summary>
            Scans an integer or real number.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.CLexer.ScanOperator">
            <summary>
            Scans an operator.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.CLexer.ScanNextChar">
            <summary>
            Move current position one character further in content stream.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.CLexer.ClearToken">
            <summary>
            Resets the current token to the empty string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.CLexer.AppendAndScanNextChar">
            <summary>
            Appends current character to the token and reads next one.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.CLexer.MoveToNonWhiteSpace">
            <summary>
            If the current character is not a white space, the function immediately returns it.
            Otherwise the PDF cursor is moved forward to the first non-white space or EOF.
            White spaces are NUL, HT, LF, FF, CR, and SP.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.CLexer.IsWhiteSpace(System.Char)">
            <summary>
            Indicates whether the specified character is a content stream white-space character.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.CLexer.IsOperatorChar(System.Char)">
            <summary>
            Indicates whether the specified character is an content operator character.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.CLexer.IsDelimiter(System.Char)">
            <summary>
            Indicates whether the specified character is a PDF delimiter character.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Content.CLexer.Symbol">
            <summary>
            Gets or sets the current symbol.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Content.CLexer.Token">
            <summary>
            Gets the current token.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Content.CLexer.TokenToInteger">
            <summary>
            Interprets current token as integer literal.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Content.CLexer.TokenToReal">
            <summary>
            Interpret current token as real or integer literal.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Content.ContentReader">
            <summary>
            Represents the functionality for reading PDF content streams.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.ContentReader.ReadContent(Alt.GUI.PdfSharp.Pdf.PdfPage)">
            <summary>
            Reads the content stream(s) of the specified page.
            </summary>
            <param name="page">The page.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.ContentReader.ReadContent(System.Byte[])">
            <summary>
            Reads the specified content.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Content.ContentReaderException">
            <summary>
            Exception thrown by ContentReader.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.PdfSharpException">
            <summary>
            Base class of all exceptions in the PDFsharp frame work.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.PdfSharpException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.PdfSharpException"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.PdfSharpException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.PdfSharpException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.PdfSharpException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.PdfSharpException"/> class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.ContentReaderException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.Content.ContentReaderException"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.ContentReaderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.Content.ContentReaderException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.ContentReaderException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.Content.ContentReaderException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Content.ContentWriter">
            <summary>
            Represents a writer for generation of PDF streams. 
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.ContentWriter.Write(System.Boolean)">
            <summary>
            Writes the specified value to the PDF stream.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.ContentWriter.IncreaseIndent">
            <summary>
            Increases indent level.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.ContentWriter.DecreaseIndent">
            <summary>
            Decreases indent level.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Content.ContentWriter.Indent">
            <summary>
            Gets or sets the indentation for a new indentation level.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Content.ContentWriter.IndentBlanks">
            <summary>
            Gets an indent string of current indent.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Content.ContentWriter.Stream">
            <summary>
            Gets the underlying stream.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Content.CParser">
            <summary>
            Provides the functionality to parse PDF content streams.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.CParser.ParseObject(Alt.GUI.PdfSharp.Pdf.Content.Objects.CSequence,Alt.GUI.PdfSharp.Pdf.Content.CSymbol)">
            <summary>
            Parses whatever comes until the specified stop symbol is reached.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Content.CParser.ReadSymbol(Alt.GUI.PdfSharp.Pdf.Content.CSymbol)">
            <summary>
            Reads the next symbol that must be the specified one.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Content.CSymbol">
            <summary>
            Terminal symbols recognized by PDF content stream lexer.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Filters.ASCII85Decode">
            <summary>
            Implements the ASCII85Decode filter.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Filters.Filter">
            <summary>
            Base class for all stream filters
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Filters.Filter.Encode(System.Byte[])">
            <summary>
            When implemented in a derived class encodes the specified data.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Filters.Filter.Encode(System.String)">
            <summary>
            Encodes a raw string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Filters.Filter.Decode(System.Byte[],Alt.GUI.PdfSharp.Pdf.Filters.FilterParms)">
            <summary>
            When implemented in a derived class decodes the specified data.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Filters.Filter.Decode(System.Byte[])">
            <summary>
            Decodes the specified data.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Filters.Filter.DecodeToString(System.Byte[],Alt.GUI.PdfSharp.Pdf.Filters.FilterParms)">
            <summary>
            Decodes to a raw string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Filters.Filter.DecodeToString(System.Byte[])">
            <summary>
            Decodes to a raw string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Filters.Filter.RemoveWhiteSpace(System.Byte[])">
            <summary>
            Removes all white spaces from the data. The function assumes that the bytes are characters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Filters.ASCII85Decode.Encode(System.Byte[])">
            <summary>
            Encodes the specified data.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Filters.ASCII85Decode.Decode(System.Byte[],Alt.GUI.PdfSharp.Pdf.Filters.FilterParms)">
            <summary>
            Decodes the specified data.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Filters.ASCIIHexDecode">
            <summary>
            Implements the ASCIIHexDecode filter.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Filters.ASCIIHexDecode.Encode(System.Byte[])">
            <summary>
            Encodes the specified data.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Filters.ASCIIHexDecode.Decode(System.Byte[],Alt.GUI.PdfSharp.Pdf.Filters.FilterParms)">
            <summary>
            Decodes the specified data.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Filters.FilterParms">
            <summary>
            Reserved for future extension.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Filters.Filtering">
            <summary>
            Applies standard filters to streams.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Filters.Filtering.GetFilter(System.String)">
            <summary>
            Gets the filter specified by the case sensitive name.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Filters.Filtering.Encode(System.Byte[],System.String)">
            <summary>
            Encodes the data with the specified filter.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Filters.Filtering.Encode(System.String,System.String)">
            <summary>
            Encodes a raw string with the specified filter.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Filters.Filtering.Decode(System.Byte[],System.String,Alt.GUI.PdfSharp.Pdf.Filters.FilterParms)">
            <summary>
            Decodes the data with the specified filter.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Filters.Filtering.Decode(System.Byte[],System.String)">
            <summary>
            Decodes the data with the specified filter.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Filters.Filtering.Decode(System.Byte[],Alt.GUI.PdfSharp.Pdf.PdfItem)">
            <summary>
            Decodes the data with the specified filter.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Filters.Filtering.DecodeToString(System.Byte[],System.String,Alt.GUI.PdfSharp.Pdf.Filters.FilterParms)">
            <summary>
            Decodes to a raw string with the specified filter.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Filters.Filtering.DecodeToString(System.Byte[],System.String)">
            <summary>
            Decodes to a raw string with the specified filter.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Filters.Filtering.ASCIIHexDecode">
            <summary>
            Gets the filter singleton.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Filters.Filtering.ASCII85Decode">
            <summary>
            Gets the filter singleton.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Filters.Filtering.LzwDecode">
            <summary>
            Gets the filter singleton.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Filters.Filtering.FlateDecode">
            <summary>
            Gets the filter singleton.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Filters.LzwDecode">
            <summary>
            Implements the LzwDecode filter.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Filters.LzwDecode.Encode(System.Byte[])">
            <summary>
            Throws a NotImplementedException because the obsolete LZW encoding is not supported by PDFsharp.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Filters.LzwDecode.Decode(System.Byte[],Alt.GUI.PdfSharp.Pdf.Filters.FilterParms)">
            <summary>
            Decodes the specified data.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Filters.LzwDecode.InitializeDictionary">
            <summary>
            Initialize the dictionary.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Filters.LzwDecode.AddEntry(System.Byte[],System.Byte)">
            <summary>
            Add a new entry to the Dictionary.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Filters.LzwDecode.NextCode">
            <summary>
            Returns the next set of bits.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Filters.FlateDecode">
            <summary>
            Implements the FlateDecode filter by wrapping SharpZipLib.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Filters.FlateDecode.Encode(System.Byte[])">
            <summary>
            Encodes the specified data.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Filters.FlateDecode.Decode(System.Byte[],Alt.GUI.PdfSharp.Pdf.Filters.FilterParms)">
            <summary>
            Decodes the specified data.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Internal.AnsiEncoding">
            <summary>
            An encoder for PDF AnsiEncoding.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Internal.AnsiEncoding.IsAnsi1252Char(System.Char)">
            <summary>
            Indicates whether the specified Unicode character is available in the ANSI code page 1252.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Internal.AnsiEncoding.AnsiToUnicode">
            <summary>
            Converts WinAnsi to Unicode characters.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Internal.ColorSpaceHelper">
            <summary>
            Helper functions for RGB and CMYK colors.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Internal.ColorSpaceHelper.EnsureColorMode(Alt.GUI.PdfSharp.Pdf.PdfColorMode,Alt.GUI.PdfSharp.Drawing.XColor)">
            <summary>
            Checks whether a color mode and a color match.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Internal.ColorSpaceHelper.EnsureColorMode(Alt.GUI.PdfSharp.Pdf.PdfDocument,Alt.GUI.PdfSharp.Drawing.XColor)">
            <summary>
            Checks whether the color mode of a document and a color match.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Internal.ColorSpaceHelper.IsEqualCmyk(Alt.GUI.PdfSharp.Drawing.XColor,Alt.GUI.PdfSharp.Drawing.XColor)">
            <summary>
            Determines whether two colors are equal referring to their CMYK color values.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Internal.DocEncoding">
            <summary>
            An encoder for PDF DocEncoding.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Internal.DocEncoding.AnsiToDoc">
            <summary>
            Converts WinAnsi to DocEncode characters. Incomplete, just maps Ђ and some other characters.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Internal.GlobalObjectTable">
            <summary>
            Provides a thread-local cache for large objects.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Internal.GlobalObjectTable.documentHandles">
            <summary>
            Array of handles to all documents.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Internal.PdfEncoders">
            <summary>
            Groups a set of static encoding helper functions.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Internal.PdfEncoders.ToStringLiteral(System.String,Alt.GUI.PdfSharp.Pdf.PdfStringEncoding,Alt.GUI.PdfSharp.Pdf.Security.PdfStandardSecurityHandler)">
            <summary>
            Converts a raw string into a raw string literal, possibly encrypted.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Internal.PdfEncoders.ToStringLiteral(System.Byte[],System.Boolean,Alt.GUI.PdfSharp.Pdf.Security.PdfStandardSecurityHandler)">
            <summary>
            Converts a raw string into a raw string literal, possibly encrypted.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Internal.PdfEncoders.ToHexStringLiteral(System.String,Alt.GUI.PdfSharp.Pdf.PdfStringEncoding,Alt.GUI.PdfSharp.Pdf.Security.PdfStandardSecurityHandler)">
            <summary>
            Converts a raw string into a raw hexadecimal string literal, possibly encrypted.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Internal.PdfEncoders.ToHexStringLiteral(System.Byte[],System.Boolean,Alt.GUI.PdfSharp.Pdf.Security.PdfStandardSecurityHandler)">
            <summary>
            Converts a raw string into a raw hexadecimal string literal, possibly encrypted.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Internal.PdfEncoders.FormatStringLiteral(System.Byte[],System.Boolean,System.Boolean,System.Boolean,Alt.GUI.PdfSharp.Pdf.Security.PdfStandardSecurityHandler)">
            <summary>
            Converts the specified byte array into a byte array representing a string literal.
            </summary>
            <param name="bytes">The bytes of the string.</param>
            <param name="unicode">Indicates whether one or two bytes are one character.</param>
            <param name="prefix">Indicates whether to use Unicode prefix.</param>
            <param name="hex">Indicates whether to create a hexadecimal string literal.</param>
            <param name="securityHandler">Encrypts the bytes if specified.</param>
            <returns>The PDF bytes.</returns>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Internal.PdfEncoders.docencode_______">
            <summary>
            Converts WinAnsi to DocEncode characters. Incomplete, just maps Ђ and some other characters.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Internal.PdfEncoders.Format(System.String,System.Object[])">
            <summary>
            ...because I always forget CultureInfo.InvariantCulture and wonder why Acrobat
            cannot understand my German decimal separator...
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Internal.PdfEncoders.ToString(System.Double)">
            <summary>
            Converts a float into a string with up to 3 decimal digits and a decimal point.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Internal.PdfEncoders.ToString(Alt.GUI.PdfSharp.Drawing.XColor,Alt.GUI.PdfSharp.Pdf.PdfColorMode)">
            <summary>
            Converts an XColor into a string with up to 3 decimal digits and a decimal point.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Internal.PdfEncoders.ToString(Alt.GUI.PdfSharp.Drawing.XMatrix)">
            <summary>
            Converts an XMatrix into a string with up to 3 decimal digits and a decimal point.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Internal.PdfEncoders.RawEncoding">
            <summary>
            Gets the raw encoding.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Internal.PdfEncoders.RawUnicodeEncoding">
            <summary>
            Gets the raw Unicode encoding.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Internal.PdfEncoders.WinAnsiEncoding">
            <summary>
            Gets the Windows 1252 (ANSI) encoding.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Internal.PdfEncoders.DocEncoding">
            <summary>
            Gets the PDF DocEncoding encoding.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Internal.PdfEncoders.UnicodeEncoding">
            <summary>
            Gets the UNICODE little-endian encoding.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Internal.RawEncoding">
            <summary>
            An encoder for raw strings. The raw encoding is simply the identity relation between
            charachters and bytes. PDFsharp internally works with raw encoded strings instead of
            byte arrays because strings are much more handy than byte arrays.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Internal.RawUnicodeEncoding">
            <summary>
            An encoder for Unicode strings.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Internal.ThreadLocalStorage">
            <summary>
            Provides a thread-local cache for large objects.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Internal.ThreadLocalStorage.importedDocuments">
            <summary>
            Maps path to document handle.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.IO.Chars">
            <summary>
            Character table by name.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.IO.PasswordValidity">
            <summary>
            Determines the type of the password.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.IO.PasswordValidity.Invalid">
            <summary>
            Password is neither user nor owner password.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.IO.PasswordValidity.UserPassword">
            <summary>
            Password is user password.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.IO.PasswordValidity.OwnerPassword">
            <summary>
            Password is owner password.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.IO.PdfDocumentOpenMode">
            <summary>
            Determines how a PDF document is opened. 
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.IO.PdfDocumentOpenMode.Modify">
            <summary>
            The PDF stream is completely read into memory and can be modified. Pages can be deleted or
            inserted, but it is not possible to extract pages. This mode is useful for modifying an
            existing PDF document.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.IO.PdfDocumentOpenMode.Import">
            <summary>
            The PDF stream is opened for importing pages from it. A document opened in this mode cannot
            be modified.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.IO.PdfDocumentOpenMode.ReadOnly">
            <summary>
            The PDF stream is completely read into memory, but cannot be modified. This mode preserves the
            original internal structure of the document and is useful for analyzing existing PDF files.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.IO.PdfDocumentOpenMode.InformationOnly">
            <summary>
            The PDF stream is partially read for information purposes only. The only valid operation is to
            call the Info property at the imported document. This option is very fast and needs less memory
            and is e.g. useful for browsing information about a collection of PDF documents in a user interface.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.IO.PdfWriterLayout">
            <summary>
            Determines how the PDF output stream is formatted. Even all formats create valid PDF files,
            only Compact or Standard should be used for production purposes.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.IO.PdfWriterLayout.Compact">
            <summary>
            The PDF stream contains no unnecessary characters. This is default in release build.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.IO.PdfWriterLayout.Standard">
            <summary>
            The PDF stream contains some superfluous line feeds, but is more readable.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.IO.PdfWriterLayout.Indented">
            <summary>
            The PDF stream is indented to reflect the nesting levels of the objects. This is useful
            for analyzing PDF files, but increases the size of the file significantly.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.IO.PdfWriterLayout.Verbose">
            <summary>
            The PDF stream is indented to reflect the nesting levels of the objects and contains additional
            information about the PDFsharp objects. Furthermore content streams are not deflated. This 
            is useful for debugging purposes only and increases the size of the file significantly.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.IO.PdfWriterOptions">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.IO.PdfWriterOptions.Regular">
            <summary>
            If only this flag is specified the result is a regular valid PDF stream.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.IO.PdfWriterOptions.OmitStream">
            <summary>
            Omit writing stream data. For debugging purposes only. 
            With this option the result is not valid PDF.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.IO.PdfWriterOptions.OmitInflation">
            <summary>
            Omit inflate filter. For debugging purposes only.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.IO.Symbol">
            <summary>
            Terminal symbols recognized by lexer.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.IO.Lexer">
            <summary>
            Lexical analyzer for PDF files. Technically a PDF file is a stream of bytes. Some chunks
            of bytes represent strings in several encodings. The actual encoding depends on the
            context where the string is used. Therefore the bytes are 'raw encoded' into characters,
            i.e. a character or token read by the lexer has always character values in the range from
            0 to 255.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.Lexer.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the Lexer class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.Lexer.Initialize">
            <summary>
            Initializes fields after position has changed.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.Lexer.ScanNextToken">
            <summary>
            Reads the next token and returns its type. If the token starts with a digit, the parameter
            testReference specifies how to treat it. If it is false, the lexer scans for a single integer.
            If it is true, the lexer checks if the digit is the prefix of a reference. If it is a reference,
            the token is set to the object ID followed by the generation number separated by a blank
            (the 'R' is omitted from the token).
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.Lexer.ReadStream(System.Int32)">
            <summary>
            Reads the raw content of a stream.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.Lexer.ReadRawString(System.Int32,System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.Lexer.ScanComment">
            <summary>
            Scans a comment line.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.Lexer.ScanName">
            <summary>
            Scans a name.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.Lexer.ScanNextChar">
            <summary>
            Move current position one character further in PDF stream.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.Lexer.ClearToken">
            <summary>
            Resets the current token to the empty string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.Lexer.AppendAndScanNextChar">
            <summary>
            Appends current character to the token and reads next one.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.Lexer.MoveToNonWhiteSpace">
            <summary>
            If the current character is not a white space, the function immediately returns it.
            Otherwise the PDF cursor is moved forward to the first non-white space or EOF.
            White spaces are NUL, HT, LF, FF, CR, and SP.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.Lexer.IsWhiteSpace(System.Char)">
            <summary>
            Indicates whether the specified character is a PDF white-space character.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.Lexer.IsDelimiter(System.Char)">
            <summary>
            Indicates whether the specified character is a PDF delimiter character.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.IO.Lexer.Position">
            <summary>
            Gets or sets the position within the PDF stream.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.IO.Lexer.Symbol">
            <summary>
            Gets the current symbol.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.IO.Lexer.Token">
            <summary>
            Gets the current token.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.IO.Lexer.TokenToBoolean">
            <summary>
            Interprets current token as boolean literal.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.IO.Lexer.TokenToInteger">
            <summary>
            Interprets current token as integer literal.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.IO.Lexer.TokenToUInteger">
            <summary>
            Interprets current token as unsigned integer literal.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.IO.Lexer.TokenToReal">
            <summary>
            Interpret current token as real or integer literal.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.IO.Parser">
            <summary>
            Provides the functions to parse PDF documents.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.Parser.MoveToObject(Alt.GUI.PdfSharp.Pdf.PdfObjectID)">
            <summary>
            Sets PDF input stream position to the specified object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.Parser.ReadObject(Alt.GUI.PdfSharp.Pdf.PdfObject,Alt.GUI.PdfSharp.Pdf.PdfObjectID,System.Boolean)">
            <summary>
            Reads PDF object from input stream.
            </summary>
            <param name="pdfObject">Either the instance of a derived type or null. If it is null
            an appropriate object is created.</param>
            <param name="objectID">The address of the object.</param>
            <param name="includeReferences">If true, specifies that all indirect objects
            are included recursively.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.Parser.ParseObject(Alt.GUI.PdfSharp.Pdf.IO.Symbol)">
            <summary>
            Parses whatever comes until the specified stop symbol is reached.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.Parser.ReadObjectID(Alt.GUI.PdfSharp.Pdf.PdfObject)">
            <summary>
            Reads the object ID and the generation and sets it into the specified object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.Parser.ReadSymbol(Alt.GUI.PdfSharp.Pdf.IO.Symbol)">
            <summary>
            Reads the next symbol that must be the specified one.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.Parser.ReadToken(System.String)">
            <summary>
            Reads the next token that must be the specified one.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.Parser.ReadName">
            <summary>
            Reads a name from the PDF data stream. The preceding slash is part of the result string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.Parser.ReadInteger(System.Boolean)">
            <summary>
            Reads an integer value directly from the PDF data stream.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.Parser.ReadObject(Alt.GUI.PdfSharp.Pdf.PdfDocument,Alt.GUI.PdfSharp.Pdf.PdfObjectID)">
            <summary>
            Reads an object from the PDF input stream using the default parser.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.Parser.ReadTrailer">
            <summary>
            Reads the iref table and the trailer dictionary.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.Parser.ReadXRefTableAndTrailer(Alt.GUI.PdfSharp.Pdf.PdfReferenceTable)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.Parser.ParseDateTime(System.String,System.DateTime)">
            <summary>
            Parses a PDF date string.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.IO.PdfPasswordProviderArgs">
            <summary>
            Encapsulates the arguments of the PdfPasswordProvider delegate.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.IO.PdfPasswordProviderArgs.Password">
            <summary>
            Sets the password to open the document with.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.IO.PdfPasswordProviderArgs.Abort">
            <summary>
            When set to true the PdfReader.Open function returns null indicating that no PdfDocument was created.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.IO.PdfPasswordProvider">
            <summary>
            A delegated used by the PdfReader.Open function to retrieve a password if the document is protected.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.IO.PdfReader">
            <summary>
            Represents the functionality for reading PDF documents.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.PdfReader.TestPdfFile(System.String)">
            <summary>
            Determines whether the file specified by its path is a PDF file by inspecting the first eight
            bytes of the data. If the file header has the form «%PDF-x.y» the function returns the version
            number as integer (e.g. 14 for PDF 1.4). If the file header is invalid or inaccessible
            for any reason, 0 is returned. The function never throws an exception. 
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.PdfReader.TestPdfFile(System.IO.Stream)">
            <summary>
            Determines whether the specified stream is a PDF file by inspecting the first eight
            bytes of the data. If the data begins with «%PDF-x.y» the function returns the version
            number as integer (e.g. 14 for PDF 1.4). If the data is invalid or inaccessible
            for any reason, 0 is returned. The function never throws an exception. 
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.PdfReader.TestPdfFile(System.Byte[])">
            <summary>
            Determines whether the specified data is a PDF file by inspecting the first eight
            bytes of the data. If the data begins with «%PDF-x.y» the function returns the version
            number as integer (e.g. 14 for PDF 1.4). If the data is invalid or inaccessible
            for any reason, 0 is returned. The function never throws an exception. 
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.PdfReader.GetPdfFileVersion(System.Byte[])">
            <summary>
            Implements scanning the PDF file version.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.PdfReader.Open(System.String,Alt.GUI.PdfSharp.Pdf.IO.PdfDocumentOpenMode)">
            <summary>
            Opens an existing PDF document.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.PdfReader.Open(System.String,Alt.GUI.PdfSharp.Pdf.IO.PdfDocumentOpenMode,Alt.GUI.PdfSharp.Pdf.IO.PdfPasswordProvider)">
            <summary>
            Opens an existing PDF document.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.PdfReader.Open(System.String,System.String,Alt.GUI.PdfSharp.Pdf.IO.PdfDocumentOpenMode)">
            <summary>
            Opens an existing PDF document.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.PdfReader.Open(System.String,System.String,Alt.GUI.PdfSharp.Pdf.IO.PdfDocumentOpenMode,Alt.GUI.PdfSharp.Pdf.IO.PdfPasswordProvider)">
            <summary>
            Opens an existing PDF document.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.PdfReader.Open(System.String)">
            <summary>
            Opens an existing PDF document.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.PdfReader.Open(System.String,System.String)">
            <summary>
            Opens an existing PDF document.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.PdfReader.Open(System.IO.Stream,Alt.GUI.PdfSharp.Pdf.IO.PdfDocumentOpenMode)">
            <summary>
            Opens an existing PDF document.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.PdfReader.Open(System.IO.Stream,Alt.GUI.PdfSharp.Pdf.IO.PdfDocumentOpenMode,Alt.GUI.PdfSharp.Pdf.IO.PdfPasswordProvider)">
            <summary>
            Opens an existing PDF document.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.PdfReader.Open(System.IO.Stream,System.String,Alt.GUI.PdfSharp.Pdf.IO.PdfDocumentOpenMode)">
            <summary>
            Opens an existing PDF document.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.PdfReader.Open(System.IO.Stream,System.String,Alt.GUI.PdfSharp.Pdf.IO.PdfDocumentOpenMode,Alt.GUI.PdfSharp.Pdf.IO.PdfPasswordProvider)">
            <summary>
            Opens an existing PDF document.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.PdfReader.Open(System.IO.Stream)">
            <summary>
            Opens an existing PDF document.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.IO.PdfReaderException">
            <summary>
            Exception thrown by PdfReader.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.PdfReaderException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.IO.PdfReaderException"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.PdfReaderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.IO.PdfReaderException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.PdfReaderException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.IO.PdfReaderException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.IO.PdfWriter">
            <summary>
            Represents a writer for generation of PDF streams. 
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.PdfWriter.Write(System.Boolean)">
            <summary>
            Writes the specified value to the PDF stream.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.PdfWriter.Write(Alt.GUI.PdfSharp.Pdf.PdfBoolean)">
            <summary>
            Writes the specified value to the PDF stream.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.PdfWriter.Write(System.Int32)">
            <summary>
            Writes the specified value to the PDF stream.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.PdfWriter.Write(System.UInt32)">
            <summary>
            Writes the specified value to the PDF stream.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.PdfWriter.Write(Alt.GUI.PdfSharp.Pdf.PdfInteger)">
            <summary>
            Writes the specified value to the PDF stream.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.PdfWriter.Write(Alt.GUI.PdfSharp.Pdf.PdfUInteger)">
            <summary>
            Writes the specified value to the PDF stream.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.PdfWriter.Write(System.Double)">
            <summary>
            Writes the specified value to the PDF stream.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.PdfWriter.Write(Alt.GUI.PdfSharp.Pdf.PdfReal)">
            <summary>
            Writes the specified value to the PDF stream.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.PdfWriter.Write(Alt.GUI.PdfSharp.Pdf.PdfString)">
            <summary>
            Writes the specified value to the PDF stream.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.PdfWriter.Write(Alt.GUI.PdfSharp.Pdf.PdfName)">
            <summary>
            Writes the specified value to the PDF stream.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.PdfWriter.WriteBeginObject(Alt.GUI.PdfSharp.Pdf.PdfObject)">
            <summary>
            Begins a direct or indirect dictionary or array.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.PdfWriter.WriteEndObject">
            <summary>
            Ends a direct or indirect dictionary or array.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.PdfWriter.WriteStream(Alt.GUI.PdfSharp.Pdf.PdfDictionary,System.Boolean)">
            <summary>
            Writes the stream of the specified dictionary.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.PdfWriter.IncreaseIndent">
            <summary>
            Increases indent level.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.PdfWriter.DecreaseIndent">
            <summary>
            Decreases indent level.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.IO.PdfWriter.Indent">
            <summary>
            Gets or sets the indentation for a new indentation level.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.IO.PdfWriter.IndentBlanks">
            <summary>
            Gets an indent string of current indent.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.IO.PdfWriter.Stream">
            <summary>
            Gets the underlying stream.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.IO.ShiftStack">
            <summary>
            Represents the stack for the shift-reduce parser. It seems that it is only needed for
            reduction of indirect references.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.ShiftStack.GetItem(System.Int32)">
            <summary>
            Gets an item relative to the current stack pointer. The index must be a negative value (-1, -2, etc.).
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.ShiftStack.GetInteger(System.Int32)">
            <summary>
            Gets an item relative to the current stack pointer. The index must be a negative value (-1, -2, etc.).
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.ShiftStack.Shift(Alt.GUI.PdfSharp.Pdf.PdfItem)">
            <summary>
            Pushes the specified item onto the stack.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.ShiftStack.Reduce(System.Int32)">
            <summary>
            Replaces the last 'count' items with the specified item.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.IO.ShiftStack.Reduce(Alt.GUI.PdfSharp.Pdf.PdfItem,System.Int32)">
            <summary>
            Replaces the last 'count' items with the specified item.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.IO.ShiftStack.sp">
            <summary>
            The stack pointer index. Points to the next free item.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.IO.ShiftStack.items">
            <summary>
            An array representing the stack.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.IO.ShiftStack.SP">
            <summary>
            Gets the stack pointer index.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.IO.ShiftStack.Item(System.Int32)">
            <summary>
            Gets the value at the specified index. Valid index is in range 0 up to sp-1.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Security.PdfDocumentSecurityLevel">
            <summary>
            Specifies the security level of the PDF document.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Security.PdfDocumentSecurityLevel.None">
            <summary>
            Document is not protected.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Security.PdfDocumentSecurityLevel.Encrypted40Bit">
            <summary>
            Document is protected with 40-bit security. This option is for compatibility with 
            Acrobat 3 and 4 only. Use Encrypted128Bit whenever possible.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Security.PdfDocumentSecurityLevel.Encrypted128Bit">
            <summary>
            Document is protected with 128-bit security.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Security.PdfUserAccessPermission">
            <summary>
            Specifies which operations are permitted when the document is opened with user access.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Security.PdfUserAccessPermission.PermitAll">
            <summary>
            Permits everything. This is the default value.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Security.PdfSecurityHandler">
            <summary>
            Represents the base of all security handlers.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Security.PdfSecurityHandler.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Security.PdfSecurityHandler.Keys.Filter">
            <summary>
            (Required) The name of the preferred security handler for this document. Typically,
            it is the name of the security handler that was used to encrypt the document. If 
            SubFilter is not present, only this security handler should be used when opening 
            the document. If it is present, consumer applications can use any security handler
            that implements the format specified by SubFilter.
            Standard is the name of the built-in password-based security handler. Names for other
            security handlers can be registered by using the procedure described in Appendix E.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Security.PdfSecurityHandler.Keys.SubFilter">
            <summary>
            (Optional; PDF 1.3) A name that completely specifies the format and interpretation of
            the contents of the encryption dictionary. It is needed to allow security handlers other
            than the one specified by Filter to decrypt the document. If this entry is absent, other
            security handlers should not be allowed to decrypt the document.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Security.PdfSecurityHandler.Keys.V">
            <summary>
            (Optional but strongly recommended) A code specifying the algorithm to be used in encrypting
            and decrypting the document:
            0 An algorithm that is undocumented and no longer supported, and whose use is strongly discouraged.
            1 Algorithm 3.1, with an encryption key length of 40 bits.
            2 (PDF 1.4) Algorithm 3.1, but permitting encryption key lengths greater than 40 bits.
            3 (PDF 1.4) An unpublished algorithm that permits encryption key lengths ranging from 40 to 128 bits.
            4 (PDF 1.5) The security handler defines the use of encryption and decryption in the document, using
                        the rules specified by the CF, StmF, and StrF entries.
            The default value if this entry is omitted is 0, but a value of 1 or greater is strongly recommended.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Security.PdfSecurityHandler.Keys.Length">
            <summary>
            (Optional; PDF 1.4; only if V is 2 or 3) The length of the encryption key, in bits.
            The value must be a multiple of 8, in the range 40 to 128. Default value: 40.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Security.PdfSecurityHandler.Keys.CF">
            <summary>
            (Optional; meaningful only when the value of V is 4; PDF 1.5)
            A dictionary whose keys are crypt filter names and whose values are the corresponding
            crypt filter dictionaries. Every crypt filter used in the document must have an entry
            in this dictionary, except for the standard crypt filter names.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Security.PdfSecurityHandler.Keys.StmF">
            <summary>
            (Optional; meaningful only when the value of V is 4; PDF 1.5)
            The name of the crypt filter that is used by default when decrypting streams.
            The name must be a key in the CF dictionary or a standard crypt filter name. All streams
            in the document, except for cross-reference streams or streams that have a Crypt entry in
            their Filter array, are decrypted by the security handler, using this crypt filter.
            Default value: Identity.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Security.PdfSecurityHandler.Keys.StrF">
            <summary>
            (Optional; meaningful only when the value of V is 4; PDF 1.)
            The name of the crypt filter that is used when decrypting all strings in the document.
            The name must be a key in the CF dictionary or a standard crypt filter name.
            Default value: Identity.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Security.PdfSecurityHandler.Keys.EFF">
            <summary>
            (Optional; meaningful only when the value of V is 4; PDF 1.6)
            The name of the crypt filter that should be used by default when encrypting embedded
            file streams; it must correspond to a key in the CF dictionary or a standard crypt
            filter name. This entry is provided by the security handler. Applications should respect
            this value when encrypting embedded files, except for embedded file streams that have
            their own crypt filter specifier. If this entry is not present, and the embedded file
            stream does not contain a crypt filter specifier, the stream should be encrypted using
            the default stream crypt filter specified by StmF.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Security.PdfSecuritySettings">
            <summary>
            Encapsulates access to the security settings of a PDF document.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Security.PdfSecuritySettings.CanSave(System.String@)">
            <summary>
            Determines whether the document can be saved.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Security.PdfSecuritySettings.HasOwnerPermissions">
            <summary>
            Indicates whether the granted access to the document is 'owner permission'. Returns true if the document 
            is unprotected or was opened with the owner password. Returns false if the document was opened with the
            user password.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Security.PdfSecuritySettings.DocumentSecurityLevel">
            <summary>
            Gets or sets the document security level. If you set the security level to anything but PdfDocumentSecurityLevel.None
            you must also set a user and/or an owner password. Otherwise saving the document will fail.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Security.PdfSecuritySettings.UserPassword">
            <summary>
            Sets the user password of the document. Setting a password automatically sets the
            PdfDocumentSecurityLevel to PdfDocumentSecurityLevel.Encrypted128Bit if its current
            value is PdfDocumentSecurityLevel.None.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Security.PdfSecuritySettings.OwnerPassword">
            <summary>
            Sets the owner password of the document. Setting a password automatically sets the
            PdfDocumentSecurityLevel to PdfDocumentSecurityLevel.Encrypted128Bit if its current
            value is PdfDocumentSecurityLevel.None.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Security.PdfSecuritySettings.PermitPrint">
            <summary>
            Permits printing the document. Should be used in conjunction with PermitFullQualityPrint.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Security.PdfSecuritySettings.PermitModifyDocument">
            <summary>
            Permits modifying the document.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Security.PdfSecuritySettings.PermitExtractContent">
            <summary>
            Permits content copying or extraction.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Security.PdfSecuritySettings.PermitAnnotations">
            <summary>
            Permits commenting the document.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Security.PdfSecuritySettings.PermitFormsFill">
            <summary>
            Permits filling of form fields.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Security.PdfSecuritySettings.PermitAccessibilityExtractContent">
            <summary>
            Permits content extraction for accessibility.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Security.PdfSecuritySettings.PermitAssembleDocument">
            <summary>
            Permits to insert, rotate, or delete pages and create bookmarks or thumbnail images even if
            PermitModifyDocument is not set.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Security.PdfSecuritySettings.PermitFullQualityPrint">
            <summary>
            Permits to print in high quality. insert, rotate, or delete pages and create bookmarks or thumbnail images
            even if PermitModifyDocument is not set.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Security.PdfSecuritySettings.SecurityHandler">
            <summary>
            PdfStandardSecurityHandler is the only implemented handler.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Security.PdfStandardSecurityHandler">
            <summary>
            Represents the standard PDF security handler.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Security.PdfStandardSecurityHandler.EncryptDocument">
            <summary>
            Encrypts the whole document.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Security.PdfStandardSecurityHandler.EncryptObject(Alt.GUI.PdfSharp.Pdf.PdfObject)">
            <summary>
            Encrypts an indirect object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Security.PdfStandardSecurityHandler.EncryptDictionary(Alt.GUI.PdfSharp.Pdf.PdfDictionary)">
            <summary>
            Encrypts a dictionary.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Security.PdfStandardSecurityHandler.EncryptArray(Alt.GUI.PdfSharp.Pdf.PdfArray)">
            <summary>
            Encrypts an array.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Security.PdfStandardSecurityHandler.EncryptString(Alt.GUI.PdfSharp.Pdf.PdfString)">
            <summary>
            Encrypts a string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Security.PdfStandardSecurityHandler.EncryptBytes(System.Byte[])">
            <summary>
            Encrypts an array.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Security.PdfStandardSecurityHandler.ValidatePassword(System.String)">
            <summary>
            Checks the password.
            </summary>
            <param name="inputPassword">Password or null if no password is provided.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Security.PdfStandardSecurityHandler.PadPassword(System.String)">
            <summary>
            Pads a password to a 32 byte array.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Security.PdfStandardSecurityHandler.InitWidhUserPassword(System.Byte[],System.String,System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Generates the user key based on the padded user password.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Security.PdfStandardSecurityHandler.InitWidhOwnerPassword(System.Byte[],System.String,System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Generates the user key based on the padded owner password.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Security.PdfStandardSecurityHandler.ComputeOwnerKey(System.Byte[],System.Byte[],System.Boolean)">
            <summary>
            Computes the padded user password from the padded owner password.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Security.PdfStandardSecurityHandler.InitEncryptionKey(System.Byte[],System.Byte[],System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Computes the encryption key.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Security.PdfStandardSecurityHandler.SetupUserKey(System.Byte[])">
            <summary>
            Computes the user key.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Security.PdfStandardSecurityHandler.PrepareKey">
            <summary>
            Prepare the encryption key.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Security.PdfStandardSecurityHandler.PrepareRC4Key(System.Byte[])">
            <summary>
            Prepare the encryption key.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Security.PdfStandardSecurityHandler.PrepareRC4Key(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Prepare the encryption key.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Security.PdfStandardSecurityHandler.EncryptRC4(System.Byte[])">
            <summary>
            Encrypts the data.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Security.PdfStandardSecurityHandler.EncryptRC4(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encrypts the data.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Security.PdfStandardSecurityHandler.EncryptRC4(System.Byte[],System.Byte[])">
            <summary>
            Encrypts the data.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Security.PdfStandardSecurityHandler.EncryptRC4(System.Byte[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            Encrypts the data.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Security.PdfStandardSecurityHandler.EqualsKey(System.Byte[],System.Int32)">
            <summary>
            Checks whether the calculated key correct.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Security.PdfStandardSecurityHandler.SetHashKey(Alt.GUI.PdfSharp.Pdf.PdfObjectID)">
            <summary>
            Set the hash key for the specified object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.Security.PdfStandardSecurityHandler.PrepareEncryption">
            <summary>
            Prepares the security handler for encrypting the document.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Security.PdfStandardSecurityHandler.encryptionKey">
            <summary>
            The global encryption key.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Security.PdfStandardSecurityHandler.md5">
            <summary>
            The message digest algorithm MD5.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Security.PdfStandardSecurityHandler.state">
            <summary>
            Bytes used for RC4 encryption.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Security.PdfStandardSecurityHandler.ownerKey">
            <summary>
            The encryption key for the owner.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Security.PdfStandardSecurityHandler.userKey">
            <summary>
            The encryption key for the user.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Security.PdfStandardSecurityHandler.key">
            <summary>
            The encryption key for a particular object/generation.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Security.PdfStandardSecurityHandler.keySize">
            <summary>
            The encryption key length for a particular object/generation.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Security.PdfStandardSecurityHandler.UserPassword">
            <summary>
            Sets the user password of the document. Setting a password automatically sets the
            PdfDocumentSecurityLevel to PdfDocumentSecurityLevel.Encrypted128Bit if its current
            value is PdfDocumentSecurityLevel.None.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Security.PdfStandardSecurityHandler.OwnerPassword">
            <summary>
            Sets the owner password of the document. Setting a password automatically sets the
            PdfDocumentSecurityLevel to PdfDocumentSecurityLevel.Encrypted128Bit if its current
            value is PdfDocumentSecurityLevel.None.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Security.PdfStandardSecurityHandler.Permission">
            <summary>
            Gets or sets the user access permission represented as an integer in the P key.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Security.PdfStandardSecurityHandler.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.Security.PdfStandardSecurityHandler.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Security.PdfStandardSecurityHandler.Keys.R">
            <summary>
            (Required) A number specifying which revision of the standard security handler
            should be used to interpret this dictionary:
            • 2 if the document is encrypted with a V value less than 2 and does not have any of
              the access permissions set (by means of the P entry, below) that are designated 
              "Revision 3 or greater".
            • 3 if the document is encrypted with a V value of 2 or 3, or has any "Revision 3 or 
              greater" access permissions set.
            • 4 if the document is encrypted with a V value of 4
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Security.PdfStandardSecurityHandler.Keys.O">
            <summary>
            (Required) A 32-byte string, based on both the owner and user passwords, that is
            used in computing the encryption key and in determining whether a valid owner
            password was entered.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Security.PdfStandardSecurityHandler.Keys.U">
            <summary>
            (Required) A 32-byte string, based on the user password, that is used in determining
            whether to prompt the user for a password and, if so, whether a valid user or owner 
            password was entered.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Security.PdfStandardSecurityHandler.Keys.P">
            <summary>
            (Required) A set of flags specifying which operations are permitted when the document
            is opened with user access.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.Security.PdfStandardSecurityHandler.Keys.EncryptMetadata">
            <summary>
            (Optional; meaningful only when the value of V is 4; PDF 1.5) Indicates whether
            the document-level metadata stream is to be encrypted. Applications should respect this value.
            Default value: true.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.Security.PdfStandardSecurityHandler.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.KeyType">
            <summary>
            Specifies the type of a key's value in a dictionary.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.KeyInfoAttribute">
            <summary>
            Summary description for KeyInfo.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.DocumentState">
            <summary>
            Identifies the state of the document
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.DocumentState.Created">
            <summary>
            The document was created from scratch.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.DocumentState.Imported">
            <summary>
            The document was created by opening an existing PDF file.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.DocumentState.Disposed">
            <summary>
            The document is disposed.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfColorMode">
            <summary>
            Specifies what color model is used in a PDF document.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfColorMode.Undefined">
            <summary>
            All color values are written as specified in the XColor objects they come from.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfColorMode.Rgb">
            <summary>
            All colors are converted to RGB.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfColorMode.Cmyk">
            <summary>
            All colors are converted to CMYK.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfCustomValueCompressionMode">
            <summary>
            This class is undocumented and may change or drop in future releases.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfCustomValueCompressionMode.Default">
            <summary>
            Use document default to determine compression.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfCustomValueCompressionMode.Uncompressed">
            <summary>
            Leave custom values uncompressed.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfCustomValueCompressionMode.Compressed">
            <summary>
            Compress custom values using FlateDecode.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfFontEmbedding">
            <summary>
            Specifies the embedding options of an XFont when converted into PDF.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfFontEmbedding.Default">
            <summary>
            Unicode fonts are embedded, WinAnsi fonts are not embedded.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfFontEmbedding.None">
            <summary>
            Fonts are not embedded.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfFontEmbedding.Always">
            <summary>
            All fonts are embedded.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfFontEmbedding.Automatic">
            <summary>
            Not yet implemented.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfFontEncoding">
            <summary>
            Specifies the encoding schema used for an XFont when converted into PDF.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfFontEncoding.WinAnsi">
            <summary>
            Windows ANSI encoding.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfFontEncoding.CP1252">
            <summary>
            Alternate name for Windows ANSI encoding.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfFontEncoding.Unicode">
            <summary>
            Unicode encoding.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfOutlineStyle">
            <summary>
            Specifies the font style for the outline (bookmark) text.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfOutlineStyle.Regular">
            <summary>
            Regular font.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfOutlineStyle.Italic">
            <summary>
            Italic font.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfOutlineStyle.Bold">
            <summary>
            Bold font.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfOutlineStyle.BoldItalic">
            <summary>
            Bold and italic font.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfPageLayout">
            <summary>
            Specifies the page layout to be used by a viewer when the document is opened.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfPageLayout.SinglePage">
            <summary>
            Display one page at a time.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfPageLayout.OneColumn">
            <summary>
            Display the pages in one column.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfPageLayout.TwoColumnLeft">
            <summary>
            Display the pages in two columns, with oddnumbered pages on the left.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfPageLayout.TwoColumnRight">
            <summary>
            Display the pages in two columns, with oddnumbered pages on the right.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfPageLayout.TwoPageLeft">
            <summary>
            (PDF 1.5) Display the pages two at a time, with odd-numbered pages on the left.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfPageLayout.TwoPageRight">
            <summary>
            (PDF 1.5) Display the pages two at a time, with odd-numbered pages on the right.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfPageMode">
            <summary>
            Specifies how the document should be displayed by a viewer when opened.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfPageMode.UseNone">
            <summary>
            Neither document outline nor thumbnail images visible.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfPageMode.UseOutlines">
            <summary>
            Document outline visible.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfPageMode.UseThumbs">
            <summary>
            Thumbnail images visible.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfPageMode.FullScreen">
            <summary>
            Full-screen mode, with no menu bar, windowcontrols, or any other window visible.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfPageMode.UseOC">
            <summary>
            (PDF 1.5) Optional content group panel visible.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfPageMode.UseAttachments">
            <summary>
            (PDF 1.6) Attachments panel visible.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfReadingDirection">
            <summary>
            Specifies how the document should be displayed by a viewer when opened.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfReadingDirection.LeftToRight">
            <summary>
            Left to right.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfReadingDirection.RightToLeft">
            <summary>
            Right to left (including vertical writing systems, such as Chinese, Japanese, and Korean)
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfTextStringEncoding">
            <summary>
            Specifies how text strings are encoded. A text string is any text used outside of a page content 
            stream, e.g. document information, outline text, annotation text etc.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfTextStringEncoding.PDFDocEncoding">
            <summary>
            Specifies that hypertext uses PDF DocEncoding.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfTextStringEncoding.Unicode">
            <summary>
            Specifies that hypertext uses unicode encoding.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.KeyDescriptor">
            <summary>
            Hold information about the value of a key in a dictionary. This information is used to create
            and interpret this value.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.KeyDescriptor.#ctor(Alt.GUI.PdfSharp.Pdf.KeyInfoAttribute)">
            <summary>
            Initializes a new instance of KeyDescriptor from the specified attribute during a KeysMeta
            initializes itself using reflection.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.KeyDescriptor.GetValueType">
            <summary>
            Returns the type of the object to be created as value for the described key.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.KeyDescriptor.Version">
            <summary>
            Gets or sets the PDF version starting with the availability of the described key.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.DictionaryMeta">
            <summary>
            Contains meta information about all keys of a PDF dictionary.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfBoolean">
            <summary>
            Represents a direct boolean value.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfBoolean.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfBoolean"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfBoolean.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfBoolean"/> class.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfBoolean.True">
            <summary>
            A pre-defined value that represents <c>true</c>.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfBoolean.False">
            <summary>
            A pre-defined value that represents <c>false</c>.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfBoolean.ToString">
            <summary>
            Returns 'false' or 'true'.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfBoolean.WriteObject(Alt.GUI.PdfSharp.Pdf.IO.PdfWriter)">
            <summary>
            Writes 'true' or 'false'.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfBoolean.Value">
            <summary>
            Gets the value of this instance as boolean value.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfBooleanObject">
            <summary>
            Represents an indirect boolean value. This type is not used by PDFsharp. If it is imported from
            an external PDF file, the value is converted into a direct object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfBooleanObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfBooleanObject"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfBooleanObject.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfBooleanObject"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfBooleanObject.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfBooleanObject"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfBooleanObject.ToString">
            <summary>
            Returns "false" or "true".
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfBooleanObject.WriteObject(Alt.GUI.PdfSharp.Pdf.IO.PdfWriter)">
            <summary>
            Writes the keyword «false» or «true».
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfBooleanObject.Value">
            <summary>
            Gets the value of this instance as boolean value.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfCustomValue">
            <summary>
            This class is intended for empira internal use only and may change or drop in future releases.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfCustomValue.#ctor">
            <summary>
            This function is intended for empira internal use only.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfCustomValue.#ctor(System.Byte[])">
            <summary>
            This function is intended for empira internal use only.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfCustomValue.CompressionMode">
            <summary>
            This property is intended for empira internal use only.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfCustomValue.Value">
            <summary>
            This property is intended for empira internal use only.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfCustomValues">
            <summary>
            This class is intended for empira internal use only and may change or drop in future releases.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfCustomValues.Contains(System.String)">
            <summary>
            This function is intended for empira internal use only.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfCustomValues.ClearAllCustomValues(Alt.GUI.PdfSharp.Pdf.PdfDocument)">
            <summary>
            This function is intended for empira internal use only.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfCustomValues.CompressionMode">
            <summary>
            This function is intended for empira internal use only.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfCustomValues.Item(System.String)">
            <summary>
            This function is intended for empira internal use only.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfDate">
            <summary>
            Represents a direct date value.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfDate"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDate.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfDate"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDate.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfDate"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDate.ToString">
            <summary>
            Returns the value in the PDF date format.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDate.WriteObject(Alt.GUI.PdfSharp.Pdf.IO.PdfWriter)">
            <summary>
            Writes the value in the PDF date format.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDate.Value">
            <summary>
            Gets the value as DateTime.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.VCF">
            <summary>
            Value creation flags. Specifies whether and how a value that not exists is created.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.VCF.None">
            <summary>
            Don't create the value.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.VCF.Create">
            <summary>
            Create the value as direct object.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.VCF.CreateIndirect">
            <summary>
            Create the value as indirect object.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfDocument">
            <summary>
            Represents a PDF document.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDocument.#ctor">
            <summary>
            Creates a new PDF document in memory.
            To open an existing PDF file, use the PdfReader class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDocument.#ctor(System.String)">
            <summary>
            Creates a new PDF document with the specified file name. The file is immediately created and keeps
            looked until the document is saved.
            To open an existing PDF file and import it, use the PdfReader class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDocument.#ctor(System.IO.Stream)">
            <summary>
            Creates a new PDF document using the specified stream.
            To open an existing PDF file, use the PdfReader class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDocument.Dispose">
            <summary>
            Disposes all references to this document stored in other documents. This function should be called
            for documents you finished importing pages from. Calling Dispose is technically not necessary but
            useful for earlier reclaiming memory of documents you do not need anymore.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDocument.NewName">
            <summary>
            Get a new default name for a new document.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDocument.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDocument.Save(System.String)">
            <summary>
            Saves the document to the specified path. If a file already exists, it will be overwritten.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDocument.Save(System.IO.Stream,System.Boolean)">
            <summary>
            Saves the document to the specified stream.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDocument.Save(System.IO.Stream)">
            <summary>
            Saves the document to the specified stream and closes the stream.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDocument.DoSave(Alt.GUI.PdfSharp.Pdf.IO.PdfWriter)">
            <summary>
            Implements saving a PDF file.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDocument.PrepareForSave">
            <summary>
            Dispatches PrepareForSave to the objects that need it.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDocument.CanSave(System.String@)">
            <summary>
            Determines whether the document can be saved.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDocument.AddPage">
            <summary>
            Creates a new page and adds it to this document.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDocument.AddPage(Alt.GUI.PdfSharp.Pdf.PdfPage)">
            <summary>
            Adds the specified page to this document. If the page is from an external document,
            it is imported to this document. In this case the returned page is not the same
            object as the specified one.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDocument.InsertPage(System.Int32)">
            <summary>
            Creates a new page and inserts it in this document at the specified position.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDocument.InsertPage(System.Int32,Alt.GUI.PdfSharp.Pdf.PdfPage)">
            <summary>
            Inserts the specified page in this document. If the page is from an external document,
            it is imported to this document. In this case the returned page is not the same
            object as the specified one.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDocument.OnExternalDocumentFinalized(Alt.GUI.PdfSharp.Pdf.PdfDocument.DocumentHandle)">
            <summary>
            Occurs when the specified document is not used anymore for importing content.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDocument.Tag">
            <summary>
            Gets or sets a user defined object that contains arbitrary information associated with this document.
            The tag is not used by PDFsharp.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDocument.Name">
            <summary>
            Gets or sets a value used to distinguish PdfDocument objects.
            The name is not used by PDFsharp.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDocument.Options">
            <summary>
            Gets the document options used for saving the document.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDocument.Settings">
            <summary>
            Gets PDF specific document settings.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDocument.EarlyWrite">
            <summary>
            NYI Indicates whether large objects are written immediately to the output stream to relieve
            memory consumption.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDocument.Version">
            <summary>
            Gets or sets the PDF version number. Return value 14 e.g. means PDF 1.4 / Acrobat 5 etc.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDocument.PageCount">
            <summary>
            Gets the number of pages in the document.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDocument.FileSize">
            <summary>
            Gets the file size of the document.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDocument.FullPath">
            <summary>
            Gets the full qualified file name if the document was read form a file, or an empty string otherwise.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDocument.Guid">
            <summary>
            Gets a Guid that uniquely identifies this instance of PdfDocument.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDocument.IsImported">
            <summary>
            Returns a value indicating whether the document was newly created or opened from an existing document.
            Returns true if the document was opened with the PdfReader.Open function, false otherwise.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDocument.IsReadOnly">
            <summary>
            Returns a value indicating whether the document is read only or can be modified.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDocument.Info">
            <summary>
            Gets information about the document.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDocument.CustomValues">
            <summary>
            This function is intended to be undocumented.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDocument.Pages">
            <summary>
            Get the pages dictionary.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDocument.PageLayout">
            <summary>
            Gets or sets a value specifying the page layout to be used when the document is opened.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDocument.PageMode">
            <summary>
            Gets or sets a value specifying how the document should be displayed when opened.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDocument.ViewerPreferences">
            <summary>
            Gets the viewer preferences of this document.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDocument.Outlines">
            <summary>
            Gets the root of the outline (or bookmark) tree.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDocument.AcroForm">
            <summary>
            Get the AcroForm dictionary.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDocument.Language">
            <summary>
            Gets or sets the default language of the document.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDocument.SecuritySettings">
            <summary>
            Gets the security settings of this document.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDocument.FontTable">
            <summary>
            Gets the document font table that holds all fonts used in the current document.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDocument.ImageTable">
            <summary>
            Gets the document image table that holds all images used in the current document.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDocument.FormTable">
            <summary>
            Gets the document form table that holds all form external objects used in the current document.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDocument.ExtGStateTable">
            <summary>
            Gets the document ExtGState table that holds all form state objects used in the current document.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDocument.Catalog">
            <summary>
            Gets the PdfCatalog of the current document.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDocument.Internals">
            <summary>
            Gets the PdfInternals object of this document, that grants access to some internal structures
            which are not part of the public interface of PdfDocument.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDocument.SecurityHandler">
            <summary>
            Gets the security handler.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDocument.Tls">
            <summary>
            Gets the ThreadLocalStorage object. It is used for caching objects that should created
            only once.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfDocumentInformation">
            <summary>
            Represents the PDF document information dictionary.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfDocumentInformation.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfDocumentInformation"/> class.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDocumentInformation.Title">
            <summary>
            Gets or sets the document's title.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDocumentInformation.Author">
            <summary>
            Gets or sets the name of the person who created the document.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDocumentInformation.Subject">
            <summary>
            Gets or sets the name of the subject of the document.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDocumentInformation.Keywords">
            <summary>
            Gets or sets keywords associated with the document.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDocumentInformation.Creator">
            <summary>
            Gets or sets the name of the application (for example, MigraDoc) that created the document.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDocumentInformation.Producer">
            <summary>
            Gets the producer application (for example, PDFsharp).
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDocumentInformation.CreationDate">
            <summary>
            Gets or sets the creation date of the document.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDocumentInformation.ModificationDate">
            <summary>
            Gets or sets the modification date of the document.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDocumentInformation.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfDocumentInformation.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfDocumentInformation.Keys.Title">
            <summary>
            (Optional; PDF 1.1) The document’s title.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfDocumentInformation.Keys.Author">
            <summary>
            (Optional) The name of the person who created the document.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfDocumentInformation.Keys.Subject">
            <summary>
            (Optional; PDF 1.1) The subject of the document.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfDocumentInformation.Keys.Keywords">
            <summary>
            (Optional; PDF 1.1) Keywords associated with the document.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfDocumentInformation.Keys.Creator">
            <summary>
            (Optional) If the document was converted to PDF from another format,
            the name of the application (for example, empira MigraDoc) that created the
            original document from which it was converted.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfDocumentInformation.Keys.Producer">
            <summary>
            (Optional) If the document was converted to PDF from another format,
            the name of the application (for example, this library) that converted it to PDF.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfDocumentInformation.Keys.CreationDate">
            <summary>
            (Optional) The date and time the document was created, in human-readable form.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfDocumentInformation.Keys.ModDate">
            <summary>
            (Required if PieceInfo is present in the document catalog; otherwise optional; PDF 1.1)
            The date and time the document was most recently modified, in human-readable form.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfDocumentInformation.Keys.Trapped">
            <summary>
            (Optional; PDF 1.3) A name object indicating whether the document has been modified 
            to include trapping information.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDocumentInformation.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfDocumentOptions">
            <summary>
            Holds information how to handle the document when it is saved as PDF stream.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDocumentOptions.ColorMode">
            <summary>
            Gets or sets the color mode.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDocumentOptions.CompressContentStreams">
            <summary>
            Gets or sets a value indicating whether to compress content streams of PDF pages.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDocumentOptions.NoCompression">
            <summary>
            Gets or sets a value indicating that all objects are not compressed.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfDocumentSettings">
            <summary>
            Holds PDF specific information of the document.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDocumentSettings.PrivateFontCollection">
            <summary>
            Sets the private font collection.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfDocumentSettings.TrimMargins">
            <summary>
            Gets or sets the default trim margins.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfInteger">
            <summary>
            Represents a direct integer value.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfNumber">
            <summary>
            Base class for direct number values (not yet used, maybe superfluous).
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfInteger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfInteger"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfInteger.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfInteger"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfInteger.ToString">
            <summary>
            Returns the integer as string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfInteger.WriteObject(Alt.GUI.PdfSharp.Pdf.IO.PdfWriter)">
            <summary>
            Writes the integer as string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfInteger.GetTypeCode">
            <summary>
            Returns TypeCode for 32-bit integers.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfInteger.Value">
            <summary>
            Gets the value as integer
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfIntegerObject">
            <summary>
            Represents an indirect integer value. This type is not used by PDFsharp. If it is imported from
            an external PDF file, the value is converted into a direct object.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfNumberObject">
            <summary>
            Base class for indirect number values (not yet used, maybe superfluous).
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfNumberObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfNumberObject"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfNumberObject.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfNumberObject"/> class.
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfIntegerObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfIntegerObject"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfIntegerObject.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfIntegerObject"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfIntegerObject.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfIntegerObject"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfIntegerObject.ToString">
            <summary>
            Returns the integer as string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfIntegerObject.WriteObject(Alt.GUI.PdfSharp.Pdf.IO.PdfWriter)">
            <summary>
            Writes the integer literal.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfIntegerObject.Value">
            <summary>
            Gets the value as integer.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfLiteral">
            <summary>
            Represents text that is written 'as it is' into the PDF stream. This class can lead to invalid PDF files.
            E.g. strings in a literal are not encrypted when the document is saved with a password.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfLiteral.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfLiteral"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfLiteral.#ctor(System.String)">
            <summary>
            Initializes a new instance with the specified string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfLiteral.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance with the culture invariant formatted specified arguments.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfLiteral.FromMatrix(Alt.GUI.PdfSharp.Drawing.XMatrix)">
            <summary>
            Creates a literal from an XMatrix
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfLiteral.ToString">
            <summary>
            Returns a string that represents the current value.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfLiteral.Value">
            <summary>
            Gets the value as litaral string.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfName">
            <summary>
            Represents a PDF name value.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfName.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfName"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfName.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfName"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfName.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to this name.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfName.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfName.ToString">
            <summary>
            Returns the name. The string always begins with a slash.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfName.op_Equality(Alt.GUI.PdfSharp.Pdf.PdfName,System.String)">
            <summary>
            Determines whether the specified name and string are equal.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfName.op_Inequality(Alt.GUI.PdfSharp.Pdf.PdfName,System.String)">
            <summary>
            Determines whether the specified name and string are not equal.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfName.Empty">
            <summary>
            Represents the empty name.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfName.WriteObject(Alt.GUI.PdfSharp.Pdf.IO.PdfWriter)">
            <summary>
            Writes the name including the leading slash.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfName.Value">
            <summary>
            Gets the name as a string.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfName.Comparer">
            <summary>
            Gets the comparer for this type.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfName.PdfXNameComparer">
            <summary>
            Implements a comparer that compares PdfName objects.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfName.PdfXNameComparer.Compare(Alt.GUI.PdfSharp.Pdf.PdfName,Alt.GUI.PdfSharp.Pdf.PdfName)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfNameObject">
            <summary>
            Represents an indirect name value. This type is not used by PDFsharp. If it is imported from
            an external PDF file, the value is converted into a direct object. Acrobat sometime uses indirect
            names to save space, because an indirect reference to a name may be shorter than a long name.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfNameObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfNameObject"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfNameObject.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfNameObject"/> class.
            </summary>
            <param name="document">The document.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfNameObject.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfNameObject.GetHashCode">
            <summary>
            Serves as a hash function for this type.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfNameObject.ToString">
            <summary>
            Returns the name. The string always begins with a slash.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfNameObject.op_Equality(Alt.GUI.PdfSharp.Pdf.PdfNameObject,System.String)">
            <summary>
            Determines whether a name is equal to a string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfNameObject.op_Inequality(Alt.GUI.PdfSharp.Pdf.PdfNameObject,System.String)">
            <summary>
            Determines whether a name is not equal to a string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfNameObject.WriteObject(Alt.GUI.PdfSharp.Pdf.IO.PdfWriter)">
            <summary>
            Writes the name including the leading slash.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfNameObject.Value">
            <summary>
            Gets or sets the name value.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfNull">
            <summary>
            Represents a indirect reference that is not in the cross reference table.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfNull.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfNull.Value">
            <summary>
            The only instance of this class.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfNullObject">
            <summary>
            Represents an indirect null value. This type is not used by PDFsharp, but at least
            one tool from Adobe creates PDF files with a null object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfNullObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfNullObject"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfNullObject.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfNullObject"/> class.
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfNullObject.ToString">
            <summary>
            Returns the string "null".
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfNullObject.WriteObject(Alt.GUI.PdfSharp.Pdf.IO.PdfWriter)">
            <summary>
            Writes the keyword «null».
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfObjectID">
            <summary>
            Represents a PDF object identifier, a pair of object and generation number.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfObjectID.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfObjectID"/> class.
            </summary>
            <param name="objectNumber">The object number.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfObjectID.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfObjectID"/> class.
            </summary>
            <param name="objectNumber">The object number.</param>
            <param name="generationNumber">The generation number.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfObjectID.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfObjectID.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfObjectID.op_Equality(Alt.GUI.PdfSharp.Pdf.PdfObjectID,Alt.GUI.PdfSharp.Pdf.PdfObjectID)">
            <summary>
            Determines whether the tow objects are equal.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfObjectID.op_Inequality(Alt.GUI.PdfSharp.Pdf.PdfObjectID,Alt.GUI.PdfSharp.Pdf.PdfObjectID)">
            <summary>
            Determines whether the tow objects not are equal.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfObjectID.ToString">
            <summary>
            Returns the object and generation numbers as a string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfObjectID.CompareTo(System.Object)">
            <summary>
            Compares the current object id with another object.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfObjectID.ObjectNumber">
            <summary>
            Gets or sets the object number.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfObjectID.GenerationNumber">
            <summary>
            Gets or sets the generation number.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfObjectID.IsEmpty">
            <summary>
            Indicates whether this object is an empty object identifier.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfObjectID.Empty">
            <summary>
            Creates an empty object identifier.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfOutline">
            <summary>
            Represents an outline item in the outlines tree. An outline is also knows as a bookmark.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfOutline.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfOutline"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfOutline.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfOutline"/> class.
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfOutline.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDictionary)">
            <summary>
            Initializes a new instance from an existing dictionary. Used for object type transformation.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfOutline.#ctor(System.String,Alt.GUI.PdfSharp.Pdf.PdfPage,System.Boolean,Alt.GUI.PdfSharp.Pdf.PdfOutlineStyle,Alt.GUI.PdfSharp.Drawing.XColor)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfOutline"/> class.
            </summary>
            <param name="title">The outline text.</param>
            <param name="destinationPage">The destination page.</param>
            <param name="opened">Specifies whether the node is displayed expanded (opened) or collapsed.</param>
            <param name="style">The font style used to draw the outline text.</param>
            <param name="textColor">The color used to draw the outline text.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfOutline.#ctor(System.String,Alt.GUI.PdfSharp.Pdf.PdfPage,System.Boolean,Alt.GUI.PdfSharp.Pdf.PdfOutlineStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfOutline"/> class.
            </summary>
            <param name="title">The outline text.</param>
            <param name="destinationPage">The destination page.</param>
            <param name="opened">Specifies whether the node is displayed expanded (opened) or collapsed.</param>
            <param name="style">The font style used to draw the outline text.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfOutline.#ctor(System.String,Alt.GUI.PdfSharp.Pdf.PdfPage,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfOutline"/> class.
            </summary>
            <param name="title">The outline text.</param>
            <param name="destinationPage">The destination page.</param>
            <param name="opened">Specifies whether the node is displayed expanded (opened) or collapsed.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfOutline.#ctor(System.String,Alt.GUI.PdfSharp.Pdf.PdfPage)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfOutline"/> class.
            </summary>
            <param name="title">The outline text.</param>
            <param name="destinationPage">The destination page.</param>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfOutline.openCount">
            <summary>
            The total number of open descendants at all lower levels.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfOutline.PrepareForSave">
            <summary>
            Creates key/values pairs according to the object structure.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfOutline.Title">
            <summary>
            Gets or sets the title.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfOutline.DestinationPage">
            <summary>
            Gets or sets the destination page.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfOutline.Opened">
            <summary>
            Gets or sets whether the outline item is opened (or expanded).
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfOutline.Style">
            <summary>
            Gets or sets the style.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfOutline.TextColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
            <value>The color of the text.</value>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfOutline.Outlines">
            <summary>
            Gets the outline collection of this node.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfOutline.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfOutline.PdfOutlineCollection">
            <summary>
            Represents a collection of outlines.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfOutline.PdfOutlineCollection.Add(Alt.GUI.PdfSharp.Pdf.PdfOutline)">
            <summary>
            Adds the specified outline.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfOutline.PdfOutlineCollection.Add(System.String,Alt.GUI.PdfSharp.Pdf.PdfPage,System.Boolean,Alt.GUI.PdfSharp.Pdf.PdfOutlineStyle,Alt.GUI.PdfSharp.Drawing.XColor)">
            <summary>
            Adds the specified outline entry.
            </summary>
            <param name="title">The outline text.</param>
            <param name="destinationPage">The destination page.</param>
            <param name="opened">Specifies whether the node is displayed expanded (opened) or collapsed.</param>
            <param name="style">The font style used to draw the outline text.</param>
            <param name="textColor">The color used to draw the outline text.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfOutline.PdfOutlineCollection.Add(System.String,Alt.GUI.PdfSharp.Pdf.PdfPage,System.Boolean,Alt.GUI.PdfSharp.Pdf.PdfOutlineStyle)">
            <summary>
            Adds the specified outline entry.
            </summary>
            <param name="title">The outline text.</param>
            <param name="destinationPage">The destination page.</param>
            <param name="opened">Specifies whether the node is displayed expanded (opened) or collapsed.</param>
            <param name="style">The font style used to draw the outline text.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfOutline.PdfOutlineCollection.Add(System.String,Alt.GUI.PdfSharp.Pdf.PdfPage,System.Boolean)">
            <summary>
            Adds the specified outline entry.
            </summary>
            <param name="title">The outline text.</param>
            <param name="destinationPage">The destination page.</param>
            <param name="opened">Specifies whether the node is displayed expanded (opened) or collapsed.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfOutline.PdfOutlineCollection.Add(System.String,Alt.GUI.PdfSharp.Pdf.PdfPage)">
            <summary>
            Adds the specified outline entry.
            </summary>
            <param name="title">The outline text.</param>
            <param name="destinationPage">The destination page.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfOutline.PdfOutlineCollection.IndexOf(Alt.GUI.PdfSharp.Pdf.PdfOutline)">
            <summary>
            Gets the index of the specified outline.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfOutline.PdfOutlineCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfOutline.PdfOutlineCollection.HasOutline">
            <summary>
            Indicates whether the outline has at least one entry.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfOutline.PdfOutlineCollection.Count">
            <summary>
            Gets the number of entries in this collection.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfOutline.PdfOutlineCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfOutline"/> at the specified index.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfOutline.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfOutline.Keys.Type">
            <summary>
            (Optional) The type of PDF object that this dictionary describes; if present,
            must be Outlines for an outline dictionary.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfOutline.Keys.Title">
            <summary>
            (Required) The text to be displayed on the screen for this item.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfOutline.Keys.Parent">
            <summary>
            (Required; must be an indirect reference) The parent of this item in the outline hierarchy.
            The parent of a top-level item is the outline dictionary itself.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfOutline.Keys.Prev">
            <summary>
            (Required for all but the first item at each level; must be an indirect reference)
            The previous item at this outline level.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfOutline.Keys.Next">
            <summary>
            (Required for all but the last item at each level; must be an indirect reference)
            The next item at this outline level.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfOutline.Keys.First">
            <summary>
            (Required if the item has any descendants; must be an indirect reference)
             The first of this item’s immediate children in the outline hierarchy.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfOutline.Keys.Last">
            <summary>
            (Required if the item has any descendants; must be an indirect reference)
            The last of this item’s immediate children in the outline hierarchy.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfOutline.Keys.Count">
            <summary>
            (Required if the item has any descendants) If the item is open, the total number of its 
            open descendants at all lower levels of the outline hierarchy. If the item is closed, a 
            negative integer whose absolute value specifies how many descendants would appear if the 
            item were reopened.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfOutline.Keys.Dest">
            <summary>
            (Optional; not permitted if an A entry is present) The destination to be displayed when this 
            item is activated.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfOutline.Keys.A">
            <summary>
            (Optional; not permitted if an A entry is present) The destination to be displayed when 
            this item is activated.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfOutline.Keys.SE">
            <summary>
            (Optional; PDF 1.3; must be an indirect reference) The structure element to which the item 
            refers.
            Note: The ability to associate an outline item with a structure element (such as the beginning 
            of a chapter) is a PDF 1.3 feature. For backward compatibility with earlier PDF versions, such
            an item should also specify a destination (Dest) corresponding to an area of a page where the
            contents of the designated structure element are displayed.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfOutline.Keys.C">
            <summary>
            (Optional; PDF 1.4) An array of three numbers in the range 0.0 to 1.0, representing the 
            components in the DeviceRGB color space of the color to be used for the outline entry’s text.
            Default value: [0.0 0.0 0.0].
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfOutline.Keys.F">
            <summary>
            (Optional; PDF 1.4) A set of flags specifying style characteristics for displaying the outline
            item’s text. Default value: 0.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfOutline.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfPage">
            <summary>
            Represents a page in a PDF document.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfPage.#ctor">
            <summary>
            Initializes a new page. The page must be added to a document before it can be used.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfPage.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfPage"/> class.
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfPage.Close">
            <summary>
            Closes the page. A closes page cannot be modified anymore and it is not possible to
            get an XGraphics object for a closed page. Closing a page is not required, but may saves
            resources if the document has many pages. 
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfPage.RenderContent">
            <summary>
            The content stream currently used by an XGraphics object for rendering.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfPage.AddDocumentLink(Alt.GUI.PdfSharp.Pdf.PdfRectangle,System.Int32)">
            <summary>
            Adds an intra document link.
            </summary>
            <param name="rect">The rect.</param>
            <param name="destinationPage">The destination page.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfPage.AddWebLink(Alt.GUI.PdfSharp.Pdf.PdfRectangle,System.String)">
            <summary>
            Adds a link to the Web.
            </summary>
            <param name="rect">The rect.</param>
            <param name="url">The URL.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfPage.AddFileLink(Alt.GUI.PdfSharp.Pdf.PdfRectangle,System.String)">
            <summary>
            Adds a link to a file.
            </summary>
            <param name="rect">The rect.</param>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfPage.GetFontName(Alt.GUI.PdfSharp.Drawing.XFont,Alt.GUI.PdfSharp.Pdf.Advanced.PdfFont@)">
            <summary>
            Gets the resource name of the specified font within this page.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfPage.TryGetFontName(System.String,Alt.GUI.PdfSharp.Pdf.Advanced.PdfFont@)">
            <summary>
            Tries to get the resource name of the specified font data within this page.
            Returns null if no such font exists.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfPage.GetFontName(System.String,System.Byte[],Alt.GUI.PdfSharp.Pdf.Advanced.PdfFont@)">
            <summary>
            Gets the resource name of the specified font data within this page.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfPage.GetImageName(Alt.GUI.PdfSharp.Drawing.XImage)">
            <summary>
            Gets the resource name of the specified image within this page.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfPage.Alt#GUI#PdfSharp#Pdf#Advanced#IContentStream#GetImageName(Alt.GUI.PdfSharp.Drawing.XImage)">
            <summary>
            Implements the interface because the primary function is internal.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfPage.GetFormName(Alt.GUI.PdfSharp.Drawing.XForm)">
            <summary>
            Gets the resource name of the specified form within this page.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfPage.Alt#GUI#PdfSharp#Pdf#Advanced#IContentStream#GetFormName(Alt.GUI.PdfSharp.Drawing.XForm)">
            <summary>
            Implements the interface because the primary function is internal.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfPage.transparencyUsed">
            <summary>
            Hack to indicate that a page-level transparency group must be created.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfPage.InheritValues(Alt.GUI.PdfSharp.Pdf.PdfDictionary,Alt.GUI.PdfSharp.Pdf.PdfPage.InheritedValues)">
            <summary>
            Inherit values from parent node.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfPage.InheritValues(Alt.GUI.PdfSharp.Pdf.PdfDictionary,Alt.GUI.PdfSharp.Pdf.PdfPage.InheritedValues@)">
            <summary>
            Add all inheritable values from the specified page to the specified values structure.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfPage.Tag">
            <summary>
            Gets or sets a user defined object that contains arbitrary information associated with this PDF page.
            The tag is not used by PDFsharp.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfPage.IsClosed">
            <summary>
            Gets a value indicating whether the page is closed.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfPage.Document">
            <summary>
            Gets or sets the PdfDocument this page belongs to.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfPage.Orientation">
            <summary>
            Gets or sets the orientation of the page. The default value PageOrientation.Portrait.
            If an imported page has a /Rotate value that matches the formula 90 + n * 180 the 
            orientation is set to PageOrientation.Landscape.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfPage.Size">
            <summary>
            Gets or sets one of the predefined standard sizes like.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfPage.TrimMargins">
            <summary>
            Gets or sets the trim margins.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfPage.MediaBox">
            <summary>
            Gets or sets the media box directly. XGrahics is not prepared to work with a media box
            with an origin other than (0,0).
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfPage.CropBox">
            <summary>
            Gets or sets the crop box.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfPage.BleedBox">
            <summary>
            Gets or sets the bleed box.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfPage.ArtBox">
            <summary>
            Gets or sets the art box.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfPage.TrimBox">
            <summary>
            Gets or sets the trim box.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfPage.Height">
            <summary>
            Gets or sets the height of the page. If orientation is Landscape, this function applies to
            the width.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfPage.Width">
            <summary>
            Gets or sets the width of the page. If orientation is Landscape, this function applies to
            the height.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfPage.Rotate">
            <summary>
            Gets or sets the /Rotate entry of the PDF page. The value is the number of degrees by which the page 
            should be rotated clockwise when displayed or printed. The value must be a multiple of 90.
            PDFsharp does not set this value, but for imported pages this value can be set and must be taken
            into account when adding graphic to such a page.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfPage.Contents">
            <summary>
            Gets the array of content streams of the page.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfPage.Annotations">
            <summary>
            Gets the annotations array of this page.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfPage.CustomValues">
            <summary>
            Gets or sets the custom values.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfPage.Alt#GUI#PdfSharp#Pdf#Advanced#IContentStream#Resources">
            <summary>
            Implements the interface because the primary function is internal.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfPage.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfPage.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfPage.InheritablePageKeys">
            <summary>
            Predefined keys common to PdfPage and PdfPages.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfPage.InheritablePageKeys.Resources">
            <summary>
            (Required; inheritable) A dictionary containing any resources required by the page. 
            If the page requires no resources, the value of this entry should be an empty dictionary.
            Omitting the entry entirely indicates that the resources are to be inherited from an 
            ancestor node in the page tree.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfPage.InheritablePageKeys.MediaBox">
            <summary>
            (Required; inheritable) A rectangle, expressed in default user space units, defining the 
            boundaries of the physical medium on which the page is intended to be displayed or printed.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfPage.InheritablePageKeys.CropBox">
            <summary>
            (Optional; inheritable) A rectangle, expressed in default user space units, defining the 
            visible region of default user space. When the page is displayed or printed, its contents 
            are to be clipped (cropped) to this rectangle and then imposed on the output medium in some
            implementation defined manner. Default value: the value of MediaBox.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfPage.InheritablePageKeys.Rotate">
            <summary>
            (Optional; inheritable) The number of degrees by which the page should be rotated clockwise 
            when displayed or printed. The value must be a multiple of 90. Default value: 0.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfPage.Keys.Type">
            <summary>
            (Required) The type of PDF object that this dictionary describes;
            must be Page for a page object.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfPage.Keys.Parent">
            <summary>
            (Required; must be an indirect reference)
            The page tree node that is the immediate parent of this page object.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfPage.Keys.LastModified">
            <summary>
            (Required if PieceInfo is present; optional otherwise; PDF 1.3) The date and time
            when the page’s contents were most recently modified. If a page-piece dictionary
            (PieceInfo) is present, the modification date is used to ascertain which of the 
            application data dictionaries that it contains correspond to the current content
            of the page.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfPage.Keys.BleedBox">
            <summary>
            (Optional; PDF 1.3) A rectangle, expressed in default user space units, defining the 
            region to which the contents of the page should be clipped when output in a production
            environment. Default value: the value of CropBox.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfPage.Keys.TrimBox">
            <summary>
            (Optional; PDF 1.3) A rectangle, expressed in default user space units, defining the
            intended dimensions of the finished page after trimming. Default value: the value of 
            CropBox.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfPage.Keys.ArtBox">
            <summary>
            (Optional; PDF 1.3) A rectangle, expressed in default user space units, defining the
            extent of the page’s meaningful content (including potential white space) as intended
            by the page’s creator. Default value: the value of CropBox.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfPage.Keys.BoxColorInfo">
            <summary>
            (Optional; PDF 1.4) A box color information dictionary specifying the colors and other 
            visual characteristics to be used in displaying guidelines on the screen for the various
            page boundaries. If this entry is absent, the application should use its own current 
            default settings.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfPage.Keys.Contents">
            <summary>
            (Optional) A content stream describing the contents of this page. If this entry is absent, 
            the page is empty. The value may be either a single stream or an array of streams. If the 
            value is an array, the effect is as if all of the streams in the array were concatenated,
            in order, to form a single stream. This allows PDF producers to create image objects and
            other resources as they occur, even though they interrupt the content stream. The division
            between streams may occur only at the boundaries between lexical tokens but is unrelated
            to the page’s logical content or organization. Applications that consume or produce PDF 
            files are not required to preserve the existing structure of the Contents array.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfPage.Keys.Group">
            <summary>
            (Optional; PDF 1.4) A group attributes dictionary specifying the attributes of the page’s 
            page group for use in the transparent imaging model.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfPage.Keys.Thumb">
            <summary>
            (Optional) A stream object defining the page’s thumbnail image.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfPage.Keys.B">
            <summary>
            (Optional; PDF 1.1; recommended if the page contains article beads) An array of indirect
            references to article beads appearing on the page. The beads are listed in the array in 
            natural reading order.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfPage.Keys.Dur">
            <summary>
            (Optional; PDF 1.1) The page’s display duration (also called its advance timing): the 
            maximum length of time, in seconds, that the page is displayed during presentations before
            the viewer application automatically advances to the next page. By default, the viewer does 
            not advance automatically.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfPage.Keys.Trans">
            <summary>
            (Optional; PDF 1.1) A transition dictionary describing the transition effect to be used 
            when displaying the page during presentations.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfPage.Keys.Annots">
            <summary>
            (Optional) An array of annotation dictionaries representing annotations associated with 
            the page.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfPage.Keys.AA">
            <summary>
            (Optional; PDF 1.2) An additional-actions dictionary defining actions to be performed 
            when the page is opened or closed.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfPage.Keys.Metadata">
            <summary>
            (Optional; PDF 1.4) A metadata stream containing metadata for the page.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfPage.Keys.PieceInfo">
            <summary>
            (Optional; PDF 1.3) A page-piece dictionary associated with the page.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfPage.Keys.StructParents">
            <summary>
            (Required if the page contains structural content items; PDF 1.3)
            The integer key of the page’s entry in the structural parent tree.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfPage.Keys.ID">
            <summary>
            (Optional; PDF 1.3; indirect reference preferred) The digital identifier of
            the page’s parent Web Capture content set.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfPage.Keys.PZ">
            <summary>
            (Optional; PDF 1.3) The page’s preferred zoom (magnification) factor: the factor 
            by which it should be scaled to achieve the natural display magnification.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfPage.Keys.SeparationInfo">
            <summary>
            (Optional; PDF 1.3) A separation dictionary containing information needed
            to generate color separations for the page.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfPage.Keys.Tabs">
            <summary>
            (Optional; PDF 1.5) A name specifying the tab order to be used for annotations
            on the page. The possible values are R (row order), C (column order),
            and S (structure order).
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfPage.Keys.TemplateInstantiated">
            <summary>
            (Required if this page was created from a named page object; PDF 1.5)
            The name of the originating page object.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfPage.Keys.PresSteps">
            <summary>
            (Optional; PDF 1.5) A navigation node dictionary representing the first node
            on the page.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfPage.Keys.UserUnit">
            <summary>
            (Optional; PDF 1.6) A positive number giving the size of default user space units,
            in multiples of 1/72 inch. The range of supported values is implementation-dependent.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfPage.Keys.VP">
            <summary>
            (Optional; PDF 1.6) An array of viewport dictionaries specifying rectangular regions 
            of the page.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfPage.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfPage.InheritedValues">
            <summary>
            Values inherited from a parent in the parent chain of a page tree.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfPages">
            <summary>
            Represents the pages of the document.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfPages.Add">
            <summary>
            Creates a new PdfPage, adds it to this document, and returns it.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfPages.Add(Alt.GUI.PdfSharp.Pdf.PdfPage)">
            <summary>
            Adds the specified PdfPage to this document and maybe returns a new PdfPage object.
            The value returned is a new object if the added page comes from a foreign document.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfPages.Insert(System.Int32)">
            <summary>
            Creates a new PdfPage, inserts it at the specified position into this document, and returns it.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfPages.Insert(System.Int32,Alt.GUI.PdfSharp.Pdf.PdfPage)">
            <summary>
            Inserts the specified PdfPage at the specified position to this document and maybe returns a new PdfPage object.
            The value returned is a new object if the inserted page comes from a foreign document.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfPages.Remove(Alt.GUI.PdfSharp.Pdf.PdfPage)">
            <summary>
            Removes the specified page from the document.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfPages.RemoveAt(System.Int32)">
            <summary>
            Removes the specified page from the document.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfPages.MovePage(System.Int32,System.Int32)">
            <summary>
            Moves a page within the page sequence.
            </summary>
            <param name="oldIndex">The page index before this operation.</param>
            <param name="newIndex">The page index after this operation.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfPages.ImportExternalPage(Alt.GUI.PdfSharp.Pdf.PdfPage)">
            <summary>
            Imports an external page. The elements of the imported page are cloned and added to this document.
            Important: In contrast to PdfFormXObject adding an external page always make a deep copy
            of their transitive closure. Any reuse of already imported objects is not intended because
            any modification of an imported page must not change another page.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfPages.CloneElement(Alt.GUI.PdfSharp.Pdf.PdfPage,Alt.GUI.PdfSharp.Pdf.PdfPage,System.String,System.Boolean)">
            <summary>
            Helper function for ImportExternalPage.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfPages.FlattenPageTree">
            <summary>
            Replaces the page tree by a flat array of indirect references to the pages objects.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfPages.GetKids(Alt.GUI.PdfSharp.Pdf.Advanced.PdfReference,Alt.GUI.PdfSharp.Pdf.PdfPage.InheritedValues,Alt.GUI.PdfSharp.Pdf.PdfDictionary)">
            <summary>
            Recursively converts the page tree into a flat array.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfPages.PrepareForSave">
            <summary>
            Prepares the document for saving.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfPages.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfPages.Count">
            <summary>
            Gets the number of pages.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfPages.Item(System.Int32)">
            <summary>
            Gets the page with the specified index.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfPages.PagesArray">
            <summary>
            Gets a PdfArray containing all pages of this document. The array must not be modified.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfPages.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfPages.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfPages.Keys.Type">
            <summary>
            (Required) The type of PDF object that this dictionary describes; 
            must be Pages for a page tree node.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfPages.Keys.Parent">
            <summary>
            (Required except in root node; must be an indirect reference)
            The page tree node that is the immediate parent of this one.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfPages.Keys.Kids">
            <summary>
            (Required) An array of indirect references to the immediate children of this node.
            The children may be page objects or other page tree nodes.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfPages.Keys.Count">
            <summary>
            (Required) The number of leaf nodes (page objects) that are descendants of this node 
            within the page tree.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfPages.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfReal">
            <summary>
            Represents a direct real value.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfReal.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfReal"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfReal.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfReal"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfReal.ToString">
            <summary>
            Returns the real number as string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfReal.WriteObject(Alt.GUI.PdfSharp.Pdf.IO.PdfWriter)">
            <summary>
            Writes the real value with up to three digits.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfReal.Value">
            <summary>
            Gets the value as double.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfRealObject">
            <summary>
            Represents an indirect real value. This type is not used by PDFsharp. If it is imported from
            an external PDF file, the value is converted into a direct object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfRealObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfRealObject"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfRealObject.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfRealObject"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfRealObject.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfRealObject"/> class.
            </summary>
            <param name="document">The document.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfRealObject.ToString">
            <summary>
            Returns the real as a culture invariant string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfRealObject.WriteObject(Alt.GUI.PdfSharp.Pdf.IO.PdfWriter)">
            <summary>
            Writes the real literal.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfRealObject.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfRectangle">
            <summary>
            Represents a PDF rectangle value, that is internally an array with 4 real values.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfRectangle.#ctor">
            <summary>
            Initializes a new instance of the PdfRectangle class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfRectangle.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the PdfRectangle class with two points specifying
            two diagonally opposite corners. Notice that in contrast to GDI+ convention the 
            3rd and the 4th parameter specify a point and not a width. This is so much confusing
            that this function is for internal use only.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfRectangle.#ctor(Alt.Sketch.Point,Alt.Sketch.Point)">
            <summary>
            Initializes a new instance of the PdfRectangle class with two points specifying
            two diagonally opposite corners.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfRectangle.#ctor(Alt.GUI.PdfSharp.Drawing.XPoint,Alt.GUI.PdfSharp.Drawing.XPoint)">
            <summary>
            Initializes a new instance of the PdfRectangle class with two points specifying
            two diagonally opposite corners.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfRectangle.#ctor(Alt.Sketch.Point,Alt.Sketch.Size)">
            <summary>
            Initializes a new instance of the PdfRectangle class with the specified location and size.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfRectangle.#ctor(Alt.GUI.PdfSharp.Drawing.XPoint,Alt.GUI.PdfSharp.Drawing.XSize)">
            <summary>
            Initializes a new instance of the PdfRectangle class with the specified location and size.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfRectangle.#ctor(Alt.GUI.PdfSharp.Drawing.XRect)">
            <summary>
            Initializes a new instance of the PdfRectangle class with the specified XRect.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfRectangle.#ctor(Alt.GUI.PdfSharp.Pdf.PdfItem)">
            <summary>
            Initializes a new instance of the PdfRectangle class with the specified PdfArray.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfRectangle.Clone">
            <summary>
            Clones this instance.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfRectangle.Copy">
            <summary>
            Implements cloning this instance.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfRectangle.Equals(System.Object)">
            <summary>
            Tests whether the specified object is a PdfRectangle and has equal coordinates.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfRectangle.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfRectangle.op_Equality(Alt.GUI.PdfSharp.Pdf.PdfRectangle,Alt.GUI.PdfSharp.Pdf.PdfRectangle)">
            <summary>
            Tests whether two structures have equal coordinates.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfRectangle.op_Inequality(Alt.GUI.PdfSharp.Pdf.PdfRectangle,Alt.GUI.PdfSharp.Pdf.PdfRectangle)">
            <summary>
            Tests whether two structures differ in one or more coordinates.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfRectangle.Contains(Alt.Sketch.Point)">
            <summary>
            Determines if the specified point is contained within this PdfRectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfRectangle.Contains(Alt.GUI.PdfSharp.Drawing.XPoint)">
            <summary>
            Determines if the specified point is contained within this PdfRectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfRectangle.Contains(System.Double,System.Double)">
            <summary>
            Determines if the specified point is contained within this PdfRectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfRectangle.Contains(Alt.Sketch.Rect)">
            <summary>
            Determines if the rectangular region represented by rect is entirely contained within this PdfRectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfRectangle.Contains(Alt.GUI.PdfSharp.Drawing.XRect)">
            <summary>
            Determines if the rectangular region represented by rect is entirely contained within this PdfRectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfRectangle.Contains(Alt.GUI.PdfSharp.Pdf.PdfRectangle)">
            <summary>
            Determines if the rectangular region represented by rect is entirely contained within this PdfRectangle.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfRectangle.ToXRect">
            <summary>
            Returns the rectangle as an XRect object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfRectangle.ToString">
            <summary>
            Returns the rectangle as a string in the form «[x1 y1 x2 y2]».
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfRectangle.WriteObject(Alt.GUI.PdfSharp.Pdf.IO.PdfWriter)">
            <summary>
            Writes the rectangle.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfRectangle.Empty">
            <summary>
            Represents an empty PdfRectangle.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfRectangle.IsEmpty">
            <summary>
            Tests whether all coordinate are zero.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfRectangle.X1">
            <summary>
            Gets or sets the x-coordinate of the first corner of this PdfRectangle.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfRectangle.Y1">
            <summary>
            Gets or sets the y-coordinate of the first corner of this PdfRectangle.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfRectangle.X2">
            <summary>
            Gets or sets the x-coordinate of the second corner of this PdfRectangle.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfRectangle.Y2">
            <summary>
            Gets or sets the y-coordinate of the second corner of this PdfRectangle.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfRectangle.Width">
            <summary>
            Gets X2 - X1.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfRectangle.Height">
            <summary>
            Gets Y2 - Y1.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfRectangle.Location">
            <summary>
            Gets or sets the coordinates of the first point of this PdfRectangle.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfRectangle.Size">
            <summary>
            Gets or sets the size of this PdfRectangle.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfReferenceTable">
            <summary>
            Represents the cross reference table of a PDF document. It contains all indirect objects of
            a document.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfReferenceTable.objectTable">
            <summary>
            Represents the relation between PdfObjectID and PdfReference for a PdfDocument.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfReferenceTable.Add(Alt.GUI.PdfSharp.Pdf.Advanced.PdfReference)">
            <summary>
            Adds a cross reference entry to the table. Used when parsing the trailer.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfReferenceTable.Add(Alt.GUI.PdfSharp.Pdf.PdfObject)">
            <summary>
            Adds a PdfObject to the table.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfReferenceTable.Contains(Alt.GUI.PdfSharp.Pdf.PdfObjectID)">
            <summary>
            Indicates whether the specified object identifier is in the table.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfReferenceTable.GetNewObjectNumber">
            <summary>
            Returns the next free object number.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfReferenceTable.WriteObject(Alt.GUI.PdfSharp.Pdf.IO.PdfWriter)">
            <summary>
            Writes the iref section in pdf stream.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfReferenceTable.Compact">
            <summary>
            Removes all objects that cannot be reached from the trailer. Returns the number of removed objects.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfReferenceTable.Renumber">
            <summary>
            Renumbers the objects starting at 1.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfReferenceTable.CheckConsistence">
            <summary>
            Checks the logical consistence for debugging purposes (useful after reconstruction work).
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfReferenceTable.TransitiveClosure(Alt.GUI.PdfSharp.Pdf.PdfObject)">
            <summary>
            Calculates the transitive closure of the specified PdfObject, i.e. all indirect objects
            recursively reachable from the specified object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfReferenceTable.TransitiveClosure(Alt.GUI.PdfSharp.Pdf.PdfObject,System.Int32)">
            <summary>
            Calculates the transitive closure of the specified PdfObject with the specified depth, i.e. all indirect objects
            recursively reachable from the specified object in up to maximally depth steps.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfReferenceTable.Item(Alt.GUI.PdfSharp.Pdf.PdfObjectID)">
            <summary>
            Gets a cross reference entry from an object identifier.
            Returns null if no object with the specified ID exists in the object table.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfReferenceTable.AllObjectIDs">
            <summary>
            Gets an array of all object identifier. For debugging purposes only.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfReferenceTable.AllReferences">
            <summary>
            Gets an array of all cross references ordered increasing by their object identifier.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfReferenceTable.DeadObject">
            <summary>
            Gets the cross reference to an objects used for undefined indirect references.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfStringEncoding">
            <summary>
            Determines the encoding of a PdfString or PdfStringObject.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfStringEncoding.RawEncoding">
            <summary>
            The characters of the string are actually bytes with an unknown or context specific meaning or encoding.
            With this encoding the 8 high bits of each character is zero.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfStringEncoding.StandardEncoding">
            <summary>
            Not yet used by PDFsharp.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfStringEncoding.PDFDocEncoding">
            <summary>
            The characters of the string are actually bytes with PDF document encoding.
            With this encoding the 8 high bits of each character is zero.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfStringEncoding.WinAnsiEncoding">
            <summary>
            The characters of the string are actually bytes with Windows ANSI encoding.
            With this encoding the 8 high bits of each character is zero.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfStringEncoding.MacRomanEncoding">
            <summary>
            Not yet used by PDFsharp.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfStringEncoding.MacExpertEncoding">
            <summary>
            Not yet used by PDFsharp.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfStringEncoding.Unicode">
            <summary>
            The characters of the string are Unicode characters.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfStringFlags">
            <summary>
            Internal wrapper for PdfStringEncoding.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfString">
            <summary>
            Represents a direct text string value.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfString.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfString"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfString"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfString.#ctor(System.String,Alt.GUI.PdfSharp.Pdf.PdfStringEncoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfString"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfString.ToString">
            <summary>
            Returns the string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfString.ToStringFromPdfDocEncoded">
            <summary>
            Hack for document encoded bookmarks.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfString.WriteObject(Alt.GUI.PdfSharp.Pdf.IO.PdfWriter)">
            <summary>
            Writes the string DocEncoded.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfString.Length">
            <summary>
            Gets the number of characters in this string.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfString.Encoding">
            <summary>
            Gets the encoding.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfString.HexLiteral">
            <summary>
            Gets a value indicating whether the string is a hexadecimal literal.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfString.Value">
            <summary>
            Gets the string value.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfString.EncryptionValue">
            <summary>
            Gets or sets the string value for encryption purposes.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfStringObject">
            <summary>
            Represents an indirect text string value. This type is not used by PDFsharp. If it is imported from
            an external PDF file, the value is converted into a direct object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfStringObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfStringObject"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfStringObject.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfStringObject"/> class.
            </summary>
            <param name="document">The document.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfStringObject.#ctor(System.String,Alt.GUI.PdfSharp.Pdf.PdfStringEncoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfStringObject"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfStringObject.ToString">
            <summary>
            Returns the string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfStringObject.WriteObject(Alt.GUI.PdfSharp.Pdf.IO.PdfWriter)">
            <summary>
            Writes the string literal with encoding DOCEncoded.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfStringObject.Length">
            <summary>
            Gets the number of characters in this string.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfStringObject.Encoding">
            <summary>
            Gets or sets the encoding.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfStringObject.HexLiteral">
            <summary>
            Gets a value indicating whether the string is a hexadecimal literal.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfStringObject.Value">
            <summary>
            Gets or sets the value as string
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfStringObject.EncryptionValue">
            <summary>
            Gets or sets the string value for encryption purposes.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfUInteger">
            <summary>
            Represents a direct unsigned integer value.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfUInteger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfUInteger"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfUInteger.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfUInteger"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfUInteger.ToString">
            <summary>
            Returns the unsigned integer as string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfUInteger.WriteObject(Alt.GUI.PdfSharp.Pdf.IO.PdfWriter)">
            <summary>
            Writes the integer as string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfUInteger.ToUInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit unsigned integer.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfUInteger.ToSByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit signed integer.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfUInteger.ToDouble(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent double-precision floating-point number.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfUInteger.ToDateTime(System.IFormatProvider)">
            <summary>
            Returns an undefined DateTime structure.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfUInteger.ToSingle(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent single-precision floating-point number.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfUInteger.ToBoolean(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Boolean value.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfUInteger.ToInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit signed integer.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfUInteger.ToUInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit unsigned integer.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfUInteger.ToInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit signed integer.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfUInteger.System#IConvertible#ToString(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.String"></see>.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfUInteger.ToByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit unsigned integer.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfUInteger.ToChar(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Unicode character.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfUInteger.ToInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit signed integer.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfUInteger.GetTypeCode">
            <summary>
            Returns type code for 32-bit integers.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfUInteger.ToDecimal(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.Decimal"></see> number.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfUInteger.ToType(System.Type,System.IFormatProvider)">
            <summary>
            Returns null.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfUInteger.ToUInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit unsigned integer.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfUInteger.Value">
            <summary>
            Gets the value as integer.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfUIntegerObject">
            <summary>
            Represents an indirect integer value. This type is not used by PDFsharp. If it is imported from
            an external PDF file, the value is converted into a direct object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfUIntegerObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfUIntegerObject"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfUIntegerObject.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfUIntegerObject"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfUIntegerObject.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDocument,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfUIntegerObject"/> class.
            </summary>
            <param name="document">The document.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfUIntegerObject.ToString">
            <summary>
            Returns the integer as string.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfUIntegerObject.WriteObject(Alt.GUI.PdfSharp.Pdf.IO.PdfWriter)">
            <summary>
            Writes the integer literal.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfUIntegerObject.Value">
            <summary>
            Gets the value as unsigned integer.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfViewerPreferences">
            <summary>
            Represents the PDF document viewer preferences dictionary.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.Pdf.PdfViewerPreferences.#ctor(Alt.GUI.PdfSharp.Pdf.PdfDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.PdfSharp.Pdf.PdfViewerPreferences"/> class.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfViewerPreferences.HideToolbar">
            <summary>
            Gets or sets a value indicating whether to hide the viewer application’s tool
             bars when the document is active.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfViewerPreferences.HideMenubar">
            <summary>
            Gets or sets a value indicating whether to hide the viewer application’s
            menu bar when the document is active.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfViewerPreferences.HideWindowUI">
            <summary>
            Gets or sets a value indicating whether to hide user interface elements in
            the document’s window (such as scroll bars and navigation controls),
            leaving only the document’s contents displayed.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfViewerPreferences.FitWindow">
            <summary>
            Gets or sets a value indicating whether to resize the document’s window to
            fit the size of the first displayed page.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfViewerPreferences.CenterWindow">
            <summary>
            Gets or sets a value indicating whether to position the document’s window
            in the center of the screen.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfViewerPreferences.DisplayDocTitle">
            <summary>
            Gets or sets a value indicating whether the window’s title bar
            should display the document title taken from the Title entry of the document
            information dictionary. If false, the title bar should instead display the name
            of the PDF file containing the document.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfViewerPreferences.Direction">
            <summary>
            The predominant reading order for text: LeftToRight or RightToLeft 
            (including vertical writing systems, such as Chinese, Japanese, and Korean).
            This entry has no direct effect on the document’s contents or page numbering
            but can be used to determine the relative positioning of pages when displayed 
            side by side or printed n-up. Default value: LeftToRight.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfViewerPreferences.Meta">
            <summary>
            Gets the KeysMeta of this dictionary type.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.PdfViewerPreferences.Keys">
            <summary>
            Predefined keys of this dictionary.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfViewerPreferences.Keys.HideToolbar">
            <summary>
            (Optional) A flag specifying whether to hide the viewer application’s tool
             bars when the document is active. Default value: false.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfViewerPreferences.Keys.HideMenubar">
            <summary>
            (Optional) A flag specifying whether to hide the viewer application’s
            menu bar when the document is active. Default value: false.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfViewerPreferences.Keys.HideWindowUI">
            <summary>
            (Optional) A flag specifying whether to hide user interface elements in
             the document’s window (such as scroll bars and navigation controls),
             leaving only the document’s contents displayed. Default value: false.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfViewerPreferences.Keys.FitWindow">
            <summary>
            (Optional) A flag specifying whether to resize the document’s window to
            fit the size of the first displayed page. Default value: false.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfViewerPreferences.Keys.CenterWindow">
            <summary>
            (Optional) A flag specifying whether to position the document’s window
            in the center of the screen. Default value: false.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfViewerPreferences.Keys.DisplayDocTitle">
            <summary>
            (Optional; PDF 1.4) A flag specifying whether the window’s title bar
            should display the document title taken from the Title entry of the document
            information dictionary. If false, the title bar should instead display the name
            of the PDF file containing the document. Default value: false.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfViewerPreferences.Keys.NonFullScreenPageMode">
            <summary>
            (Optional) The document’s page mode, specifying how to display the document on 
            exiting full-screen mode:
              UseNone     Neither document outline nor thumbnail images visible
              UseOutlines Document outline visible
              UseThumbs   Thumbnail images visible
              UseOC       Optional content group panel visible
            This entry is meaningful only if the value of the PageMode entry in the catalog 
            dictionary is FullScreen; it is ignored otherwise. Default value: UseNone.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfViewerPreferences.Keys.Direction">
            <summary>
            (Optional; PDF 1.3) The predominant reading order for text:
              L2R  Left to right
              R2L  Right to left (including vertical writing systems, such as Chinese, Japanese, and Korean)
            This entry has no direct effect on the document’s contents or page numbering
            but can be used to determine the relative positioning of pages when displayed 
            side by side or printed n-up. Default value: L2R.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfViewerPreferences.Keys.ViewArea">
            <summary>
            (Optional; PDF 1.4) The name of the page boundary representing the area of a page
            to be displayed when viewing the document on the screen. The value is the key 
            designating the relevant page boundary in the page object. If the specified page
            boundary is not defined in the page object, its default value is used.
            Default value: CropBox.
            Note: This entry is intended primarily for use by prepress applications that
            interpret or manipulate the page boundaries as described in Section 10.10.1, “Page Boundaries.”
            Most PDF consumer applications disregard it.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfViewerPreferences.Keys.ViewClip">
            <summary>
            (Optional; PDF 1.4) The name of the page boundary to which the contents of a page 
            are to be clipped when viewing the document on the screen. The value is the key 
            designating the relevant page boundary in the page object. If the specified page 
            boundary is not defined in the page object, its default value is used.
            Default value: CropBox.
            Note: This entry is intended primarily for use by prepress applications that
            interpret or manipulate the page boundaries as described in Section 10.10.1, “Page Boundaries.”
            Most PDF consumer applications disregard it.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfViewerPreferences.Keys.PrintArea">
            <summary>
            (Optional; PDF 1.4) The name of the page boundary representing the area of a page
            to be rendered when printing the document. The value is the key designating the 
            relevant page boundary in the page object. If the specified page boundary is not 
            defined in the page object, its default value is used.
            Default value: CropBox.
            Note: This entry is intended primarily for use by prepress applications that
            interpret or manipulate the page boundaries as described in Section 10.10.1, “Page Boundaries.”
            Most PDF consumer applications disregard it.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfViewerPreferences.Keys.PrintClip">
            <summary>
            (Optional; PDF 1.4) The name of the page boundary to which the contents of a page
            are to be clipped when printing the document. The value is the key designating the 
            relevant page boundary in the page object. If the specified page boundary is not
            defined in the page object, its default value is used.
            Default value: CropBox.
            Note: This entry is intended primarily for use by prepress applications that interpret
            or manipulate the page boundaries. Most PDF consumer applications disregard it.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.Pdf.PdfViewerPreferences.Keys.PrintScaling">
            <summary>
            (Optional; PDF 1.6) The page scaling option to be selected when a print dialog is
            displayed for this document. Valid values are None, which indicates that the print
            dialog should reflect no page scaling, and AppDefault, which indicates that 
            applications should use the current print scaling. If this entry has an unrecognized
            value, applications should use the current print scaling.
            Default value: AppDefault.
            Note: If the print dialog is suppressed and its parameters are provided directly
            by the application, the value of this entry should still be used.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.PdfViewerPreferences.Keys.Meta">
            <summary>
            Gets the KeysMeta for these keys.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.Pdf.TrimMargins">
            <summary>
            Represents trim margins added to the page.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.TrimMargins.All">
            <summary>
            Sets all four crop margins simultaneously.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.TrimMargins.Left">
            <summary>
            Gets or sets the left crop margin.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.TrimMargins.Right">
            <summary>
            Gets or sets the right crop margin.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.TrimMargins.Top">
            <summary>
            Gets or sets the top crop margin.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.TrimMargins.Bottom">
            <summary>
            Gets or sets the bottom crop margin.
            </summary>
        </member>
        <member name="P:Alt.GUI.PdfSharp.Pdf.TrimMargins.AreSet">
            <summary>
            Gets a value indicating whether this instance has at least one margin with a value other than zero.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.NamespaceDoc">
            <summary>
            Base namespace of PDFsharp. Most classes are implemented in nested namespaces like e. g. PdfSharp.Pdf.
            </summary>
            <seealso cref="N:Alt.GUI.PdfSharp.Pdf"></seealso>
        </member>
        <member name="T:Alt.GUI.PdfSharp.PageOrientation">
            <summary>
            Specifies the orientation of a page.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PageOrientation.Portrait">
            <summary>
            The default page orientation.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PageOrientation.Landscape">
            <summary>
            The width and height of the page are reversed.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.PageSize">
            <summary>
            Identifies the most popular predefined page sizes.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PageSize.Undefined">
            <summary>
            The width or height of the page are set manually and override the PageSize property.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PageSize.A0">
            <summary>
            Identifies a paper sheet size of 841 mm times 1189 mm or 33.11 inch times 46.81 inch.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PageSize.A1">
            <summary>
            Identifies a paper sheet size of 594 mm times 841 mm or 23.39 inch times 33.1 inch.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PageSize.A2">
            <summary>
            Identifies a paper sheet size of 420 mm times 594 mm or 16.54 inch times 23.29 inch.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PageSize.A3">
            <summary>
            Identifies a paper sheet size of 297 mm times 420 mm or 11.69 inch times 16.54 inch.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PageSize.A4">
            <summary>
            Identifies a paper sheet size of 210 mm times 297 mm or 8.27 inch times 11.69 inch.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PageSize.A5">
            <summary>
            Identifies a paper sheet size of 148 mm times 210 mm or 5.83 inch times 8.27 inch.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PageSize.RA0">
            <summary>
            Identifies a paper sheet size of 860 mm times 1220 mm.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PageSize.RA1">
            <summary>
            Identifies a paper sheet size of 610 mm times 860 mm.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PageSize.RA2">
            <summary>
            Identifies a paper sheet size of 430 mm times 610 mm.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PageSize.RA3">
            <summary>
            Identifies a paper sheet size of 305 mm times 430 mm.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PageSize.RA4">
            <summary>
            Identifies a paper sheet size of 215 mm times 305 mm.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PageSize.RA5">
            <summary>
            Identifies a paper sheet size of 153 mm times 215 mm.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PageSize.B0">
            <summary>
            Identifies a paper sheet size of 1000 mm times 1414 mm or 39.37 inch times 55.67 inch.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PageSize.B1">
            <summary>
            Identifies a paper sheet size of 707 mm times 1000 mm or 27.83 inch times 39.37 inch.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PageSize.B2">
            <summary>
            Identifies a paper sheet size of 500 mm times 707 mm or 19.68 inch times 27.83 inch.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PageSize.B3">
            <summary>
            Identifies a paper sheet size of 353 mm times 500 mm or 13.90 inch times 19.68 inch.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PageSize.B4">
            <summary>
            Identifies a paper sheet size of 250 mm times 353 mm or 9.84 inch times 13.90 inch.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PageSize.B5">
            <summary>
            Identifies a paper sheet size of 176 mm times 250 mm or 6.93 inch times 9.84 inch.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PageSize.Quarto">
            <summary>
            Identifies a paper sheet size of 10 inch times 8 inch or 254 mm times 203 mm.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PageSize.Foolscap">
            <summary>
            Identifies a paper sheet size of 13 inch times 8 inch or 330 mm times 203 mm.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PageSize.Executive">
            <summary>
             Identifies a paper sheet size of 10.5 inch times 7.25 inch or 267 mm times 184 mm.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PageSize.GovernmentLetter">
            <summary>
            Identifies a paper sheet size of 10.5 inch times 8 inch 267 mm times 203 mm.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PageSize.Letter">
            <summary>
            Identifies a paper sheet size of 11 inch times 8.5 inch 279 mm times 216 mm.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PageSize.Legal">
            <summary>
            Identifies a paper sheet size of 14 inch times 8.5 inch 356 mm times 216 mm.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PageSize.Ledger">
            <summary>
            Identifies a paper sheet size of 17 inch times 11 inch or 432 mm times 279 mm.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PageSize.Tabloid">
            <summary>
            Identifies a paper sheet size of 17 inch times 11 inch or 432 mm times 279 mm.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PageSize.Post">
            <summary>
            Identifies a paper sheet size of 19.25 inch times 15.5 inch 489 mm times 394 mm.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PageSize.Crown">
            <summary>
            20 ЧIdentifies a paper sheet size of 20 inch times 15 inch or 508 mm times 381 mm.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PageSize.LargePost">
            <summary>
            Identifies a paper sheet size of 21 inch times 16.5 inch 533 mm times 419 mm.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PageSize.Demy">
            <summary>
            Identifies a paper sheet size of 22.5 inch times 17.5 inch 572 mm times 445 mm.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PageSize.Medium">
            <summary>
            Identifies a paper sheet size of 23 inch times 18 inch or 584 mm times 457 mm.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PageSize.Royal">
            <summary>
            Identifies a paper sheet size of 25 inch times 20 inch or 635 mm times 508 mm.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PageSize.Elephant">
            <summary>
            Identifies a paper sheet size of 28 inch times 23 inch or 711 mm times 584 mm.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PageSize.DoubleDemy">
            <summary>
            Identifies a paper sheet size of 35 inch times 23.5 inch or 889 mm times 597 mm.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PageSize.QuadDemy">
            <summary>
            Identifies a paper sheet size of 45 inch times 35 inch 1143 times 889 mm.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PageSize.STMT">
            <summary>
            Identifies a paper sheet size of 8.5 inch times 5.5 inch or 216 mm times 396 mm.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PageSize.Folio">
            <summary>
            Identifies a paper sheet size of 8.5 inch times 13 inch or 216 mm times 330 mm.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PageSize.Statement">
            <summary>
            Identifies a paper sheet size of 5.5 inch times 8.5 inch or 396 mm times 216 mm.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PageSize.Size10x14">
            <summary>
            Identifies a paper sheet size of 10 inch times 14 inch.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.PSMsgID">
            <summary>
            Represents IDs for error and diagnostic messages generated by PDFsharp.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PSMsgID.SampleMessage1">
            <summary>
            PSMsgID.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PSMsgID.SampleMessage2">
            <summary>
            PSMsgID.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PSMsgID.NameMustStartWithSlash">
            <summary>
            PSMsgID.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PSMsgID.UserOrOwnerPasswordRequired">
            <summary>
            PSMsgID.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PSMsgID.UnexpectedToken">
            <summary>
            PSMsgID.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.PSMsgID.UnknownEncryption">
            <summary>
            PSMsgID.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.PageSizeConverter">
            <summary>
            Converter from <see cref="T:Alt.GUI.PdfSharp.PageSize"/> to <see cref="T:Alt.GUI.PdfSharp.Drawing.XSize"/>.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.PageSizeConverter.ToSize(Alt.GUI.PdfSharp.PageSize)">
            <summary>
            Converts the specified page size enumeration to a pair of values in point.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.ProductVersionInfo">
            <summary>
            Version info base for all PDFsharp related assemblies.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.ProductVersionInfo.Title">
            <summary>
            The title of the product.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.ProductVersionInfo.Description">
            <summary>
            A characteristic description of the product.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.ProductVersionInfo.Producer">
            <summary>
            The PDF producer information string.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.ProductVersionInfo.Version">
            <summary>
            The full version number.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.ProductVersionInfo.Version2">
            <summary>
            The full version string.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.ProductVersionInfo.Url">
            <summary>
            The home page of this product.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.ProductVersionInfo.Configuration">
            <summary>
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.ProductVersionInfo.Company">
            <summary>
            The company that created/owned the product.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.ProductVersionInfo.Product">
            <summary>
            The name of the product.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.ProductVersionInfo.Copyright">
            <summary>
            The copyright information. Also used as NuGet Copyright.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.ProductVersionInfo.Trademark">
            <summary>
            The trademark the product.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.ProductVersionInfo.Culture">
            <summary>
            Unused - must be empty string.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.ProductVersionInfo.VersionMajor">
            <summary>
            The major version number of the product. Also used for NuGet Version.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.ProductVersionInfo.VersionMinor">
            <summary>
            The minor version number of the product. Also used for NuGet Version.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.ProductVersionInfo.VersionBuild">
            <summary>
            The build number of the product. Also used for NuGet Version.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.ProductVersionInfo.VersionPatch">
            <summary>
            The patch number of the product. Also used for NuGet Version.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.ProductVersionInfo.VersionReferenceDate">
            <summary>
            E.g. "1/1/2005", for use in NuGet Script.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.ProductVersionInfo.NuGetID">
            <summary>
            Use _ instead of blanks and special characters. Can be complemented with a suffix in the NuGet Script.
            Nuspec Doc: The unique identifier for the package. This is the package name that is shown when packages
            are listed using the Package Manager Console. These are also used when installing a package using the
            Install-Package command within the Package Manager Console. Package IDs may not contain any spaces
            or characters that are invalid in an URL. In general, they follow the same rules as .NET namespaces do.
            So Foo.Bar is a valid ID, Foo! and Foo Bar are not. 
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.ProductVersionInfo.NuGetTitle">
            <summary>
            Nuspec Doc: The human-friendly title of the package displayed in the Manage NuGet Packages dialog.
            If none is specified, the ID is used instead. 
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.ProductVersionInfo.NuGetAuthors">
            <summary>
            Nuspec Doc: A comma-separated list of authors of the package code.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.ProductVersionInfo.NuGetOwners">
            <summary>
            Nuspec Doc: A comma-separated list of the package creators. This is often the same list as in authors.
            This is ignored when uploading the package to the NuGet.org Gallery. 
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.ProductVersionInfo.NuGetDescription">
            <summary>
            Nuspec Doc: A long description of the package. This shows up in the right pane of the Add Package Dialog
            as well as in the Package Manager Console when listing packages using the Get-Package command. 
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.ProductVersionInfo.NuGetReleaseNotes">
            <summary>
            Nuspec Doc: A description of the changes made in each release of the package. This field only shows up
            when the _Updates_ tab is selected and the package is an update to a previously installed package.
            It is displayed where the Description would normally be displayed. 
            </summary>                  
        </member>
        <member name="F:Alt.GUI.PdfSharp.ProductVersionInfo.NuGetSummary">
            <summary>
            Nuspec Doc: A short description of the package. If specified, this shows up in the middle pane of the
            Add Package Dialog. If not specified, a truncated version of the description is used instead.
            </summary>                  
        </member>
        <member name="F:Alt.GUI.PdfSharp.ProductVersionInfo.NuGetLanguage">
            <summary>
            Nuspec Doc: The locale ID for the package, such as en-us.
            </summary>                  
        </member>
        <member name="F:Alt.GUI.PdfSharp.ProductVersionInfo.NuGetProjectUrl">
            <summary>
            Nuspec Doc: A URL for the home page of the package.
            </summary>
            <remarks>
            http://www.pdfsharp.net/NuGetPackage_PDFsharp-GDI.ashx
            http://www.pdfsharp.net/NuGetPackage_PDFsharp-WPF.ashx
            </remarks>
        </member>
        <member name="F:Alt.GUI.PdfSharp.ProductVersionInfo.NuGetIconUrl">
            <summary>
            Nuspec Doc: A URL for the image to use as the icon for the package in the Manage NuGet Packages
            dialog box. This should be a 32x32-pixel .png file that has a transparent background.
            </summary>
        </member>
        <member name="F:Alt.GUI.PdfSharp.ProductVersionInfo.NuGetLicenseUrl">
            <summary>
            Nuspec Doc: A link to the license that the package is under.
            </summary>                  
        </member>
        <member name="F:Alt.GUI.PdfSharp.ProductVersionInfo.NuGetRequireLicenseAcceptance">
            <summary>
            Nuspec Doc: A Boolean value that specifies whether the client needs to ensure that the package license (described by licenseUrl) is accepted before the package is installed.
            </summary>                  
        </member>
        <member name="F:Alt.GUI.PdfSharp.ProductVersionInfo.NuGetTags">
            <summary>
            Nuspec Doc: A space-delimited list of tags and keywords that describe the package. This information is used to help make sure users can find the package using
            searches in the Add Package Reference dialog box or filtering in the Package Manager Console window.
            </summary>                  
        </member>
        <member name="F:Alt.GUI.PdfSharp.ProductVersionInfo.Technologie">
            <summary>
            The technology tag of the product:
            -g: GDI+,
            -w: WPF,
            -h: Both GDI+ and WPF (hybrid).
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.PSSR">
            <summary>
            The Pdf-Sharp-String-Resources.
            </summary>
        </member>
        <member name="M:Alt.GUI.PdfSharp.PSSR.Format(Alt.GUI.PdfSharp.PSMsgID,System.Object[])">
            <summary>
            Loads the message from the resource associated with the enum type and formats it
            using 'String.Format'. Because this function is intended to be used during error
            handling it never raises an exception.
            </summary>
            <param name="id">The type of the parameter identifies the resource
            and the name of the enum identifies the message in the resource.</param>
            <param name="args">Parameters passed through 'String.Format'.</param>
            <returns>The formatted message.</returns>
        </member>
        <member name="M:Alt.GUI.PdfSharp.PSSR.GetString(Alt.GUI.PdfSharp.PSMsgID)">
            <summary>
            Gets the localized message identified by the specified DomMsgID.
            </summary>
        </member>
        <member name="T:Alt.GUI.PdfSharp.VersionInfo">
            <summary>
            Version info of this assembly.
            </summary>
        </member>
        <member name="T:Alt.GUI.PieChart.PieChartControl">
            <summary>
            Summary description for PieChartControl.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.PieChartControl.m_defaultToolTipAutoPopDelay">
            <summary>
              Default AutoPopDelay of the ToolTip control.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.PieChartControl.m_disposed">
            <summary>
              Flag indicating that object has been disposed.
            </summary>
        </member>
        <member name="M:Alt.GUI.PieChart.PieChartControl.#ctor">
            <summary>
              Initializes the <c>PieChartControl</c>.
            </summary>
        </member>
        <member name="M:Alt.GUI.PieChart.PieChartControl.OnPaint(Alt.GUI.PaintEventArgs)">
            <summary>
              Handles <c>OnPaint</c> event.
            </summary>
            <param name="args">
              <c>PaintEventArgs</c> object.
            </param>
        </member>
        <member name="M:Alt.GUI.PieChart.PieChartControl.DoDraw(Alt.Sketch.Graphics)">
            <summary>
              Sets values for the chart and draws them.
            </summary>
            <param name="graphics">
              Graphics object used for drawing.
            </param>
        </member>
        <member name="M:Alt.GUI.PieChart.PieChartControl.OnMouseEnter(System.EventArgs)">
            <summary>
              Handles <c>MouseEnter</c> event to activate the tooltip.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Alt.GUI.PieChart.PieChartControl.OnMouseLeave(System.EventArgs)">
            <summary>
              Handles <c>MouseLeave</c> event to disable tooltip.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Alt.GUI.PieChart.PieChartControl.OnMouseMove(Alt.GUI.MouseEventArgs)">
            <summary>
              Handles <c>MouseMove</c> event to display tooltip for the pie
              slice under pointer and to display slice in highlighted color.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Alt.GUI.PieChart.PieChartControl.Dispose(System.Boolean)">
            <summary>
              Clean up any resources being used.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.PieChartControl.LeftMargin">
            <summary>
              Sets the left margin for the chart.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.PieChartControl.RightMargin">
            <summary>
              Sets the right margin for the chart.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.PieChartControl.TopMargin">
            <summary>
              Sets the top margin for the chart.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.PieChartControl.BottomMargin">
            <summary>
              Sets the bottom margin for the chart.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.PieChartControl.FitChart">
            <summary>
              Sets the indicator if chart should fit the bounding rectangle
              exactly.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.PieChartControl.Values">
            <summary>
              Sets values to be represented by the chart.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.PieChartControl.Colors">
            <summary>
              Sets colors to be used for rendering pie slices.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.PieChartControl.SliceRelativeDisplacements">
            <summary>
              Sets values for slice displacements.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.PieChartControl.ToolTips">
            <summary>
              Gets or sets tooltip texts.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.PieChartControl.Texts">
            <summary>
              Sets texts appearing by each pie slice.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.PieChartControl.SliceRelativeHeight">
            <summary>
              Sets pie slice reative height.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.PieChartControl.ShadowStyle">
            <summary>
              Sets the shadow style.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.PieChartControl.EdgeColorType">
            <summary>
             Sets the edge color type.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.PieChartControl.EdgeLineWidth">
            <summary>
              Sets the edge lines width.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.PieChartControl.InitialAngle">
            <summary>
              Sets the initial angle from which pies are drawn.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.PieChartControl.HasAnyValue">
            <summary>
              Gets a flag indicating if at least one value is nonzero.
            </summary>
        </member>
        <member name="T:Alt.GUI.PieChart.GraphicsUtil">
            <summary>
              Structure with graphics utility methods.
            </summary>
        </member>
        <member name="M:Alt.GUI.PieChart.GraphicsUtil.IncludePoint(Alt.Sketch.Rect@,Alt.Sketch.Point)">
            <summary>
              Checks if point is contained within <c>Rect</c> structure 
              and extends rectangle bounds if neccessary to include the point.
            </summary>
            <param name="rect">
              Reference to <c>Rect</c> to check.
            </param>
            <param name="pointToInclude">
              <c>PontF</c> object to include.
            </param>
        </member>
        <member name="M:Alt.GUI.PieChart.GraphicsUtil.IncludePointX(Alt.Sketch.Rect@,System.Double)">
            <summary>
              Checks if x-coordinate is contained within the <c>Rect</c> 
              structure and extends rectangle bounds if neccessary to include 
              the point.
            </summary>
            <param name="rect">
              <c>Rect</c> to check.
            </param>
            <param name="xToInclude">
              x-coordinate to include.
            </param>
        </member>
        <member name="M:Alt.GUI.PieChart.GraphicsUtil.IncludePointY(Alt.Sketch.Rect@,System.Double)">
            <summary>
              Checks if y-coordinate is contained within the <c>Rect</c> 
              structure and extends rectangle bounds if neccessary to include 
              the point.
            </summary>
            <param name="rect">
              <c>Rect</c> to check.
            </param>
            <param name="yToInclude">
              y-coordinate to include.
            </param>
        </member>
        <member name="T:Alt.GUI.PieChart.PieChart3D">
            <summary>
              Object representing a pie chart.
            </summary>
        </member>
        <member name="M:Alt.GUI.PieChart.PieChart3D.#ctor">
            <summary>
              Initializes an empty instance of <c>PieChart3D</c>.
            </summary>
        </member>
        <member name="M:Alt.GUI.PieChart.PieChart3D.#ctor(System.Double,System.Double,System.Double,System.Double,System.Decimal[])">
            <summary>
              Initializes an instance of a flat <c>PieChart3D</c> with 
              specified bounds, values to chart and relative thickness.
            </summary>
            <param name="xBoundingRect">
              x-coordinate of the upper-left corner of the rectangle that 
              bounds the chart.
            </param>
            <param name="yBoundingRect">
              y-coordinate of the upper-left corner of the rectangle that 
              bounds the chart.
            </param>
            <param name="widthBoundingRect">
              Width of the rectangle that bounds the chart.
            </param>
            <param name="heightBoundingRect">
              Height of the rectangle that bounds the chart.
            </param>
            <param name="values">
              An array of <c>decimal</c> values to chart.
            </param>
        </member>
        <member name="M:Alt.GUI.PieChart.PieChart3D.#ctor(System.Double,System.Double,System.Double,System.Double,System.Decimal[],System.Double)">
            <summary>
              Initializes an instance of <c>PieChart3D</c> with specified 
              bounds, values to chart and relative thickness.
            </summary>
            <param name="xBoundingRect">
              x-coordinate of the upper-left corner of the rectangle bounding 
              the chart.
            </param>
            <param name="yBoundingRect">
              y-coordinate of the upper-left corner of the rectangle bounding
              the chart.
            </param>
            <param name="widthBoundingRect">
              Width of the rectangle bounding the chart.
            </param>
            <param name="heightBoundingRect">
              Height of the rectangle bounding the chart.
            </param>
            <param name="values">
              An array of <c>decimal</c> values to chart.
            </param>
            <param name="sliceRelativeHeight">
              Thickness of the pie slice to chart relative to the height of the
              bounding rectangle.
            </param>
        </member>
        <member name="M:Alt.GUI.PieChart.PieChart3D.#ctor(Alt.Sketch.Rect,System.Decimal[],System.Double)">
            <summary>
              Initializes a new instance of <c>PieChart3D</c> with given bounds, 
              array of values and pie slice thickness.
            </summary>
            <param name="boundingRectangle">
              Bounding rectangle.
            </param>
            <param name="values">
              Array of values to initialize with.
            </param>
            <param name="sliceRelativeHeight"></param>
        </member>
        <member name="M:Alt.GUI.PieChart.PieChart3D.#ctor(System.Double,System.Double,System.Double,System.Double,System.Decimal[],Alt.Sketch.Color[],System.Double)">
            <summary>
              Initializes a new instance of <c>PieChart3D</c> with given bounds,
              array of values and relative pie slice height.
            </summary>
            <param name="xBoundingRect">
              x-coordinate of the upper-left corner of the rectangle bounding 
              the chart.
            </param>
            <param name="yBoundingRect">
              y-coordinate of the upper-left corner of the rectangle bounding
              the chart.
            </param>
            <param name="widthBoundingRect">
              Width of the rectangle bounding the chart.
            </param>
            <param name="heightBoundingRect">
              Height of the rectangle bounding the chart.
            </param>
            <param name="values">
              An array of <c>decimal</c> values to chart.
            </param>
            <param name="sliceColors">
              An array of colors used to render slices.
            </param>
            <param name="sliceRelativeHeight">
              Thickness of the slice to chart relative to the height of the
              bounding rectangle.
            </param>
        </member>
        <member name="M:Alt.GUI.PieChart.PieChart3D.#ctor(Alt.Sketch.Rect,System.Decimal[],Alt.Sketch.Color[],System.Double)">
            <summary>
              Initializes a new instance of <c>PieChart3D</c> with given bounds,
              array of values and corresponding colors.
            </summary>
            <param name="boundingRectangle">
              Bounding rectangle.
            </param>
            <param name="values">
              Array of values to chart.
            </param>
            <param name="sliceColors">
              Colors used for rendering individual slices.
            </param>
            <param name="sliceRelativeHeight">
              Pie slice relative height.
            </param>
        </member>
        <member name="M:Alt.GUI.PieChart.PieChart3D.#ctor(System.Double,System.Double,System.Double,System.Double,System.Decimal[],Alt.Sketch.Color[],System.Double,System.String[])">
            <summary>
              Initializes a new instance of <c>PieChart3D</c> with given bounds,
              array of values and relative pie slice height.
            </summary>
            <param name="xBoundingRect">
              x-coordinate of the upper-left corner of the rectangle bounding 
              the chart.
            </param>
            <param name="yBoundingRect">
              y-coordinate of the upper-left corner of the rectangle bounding
              the chart.
            </param>
            <param name="widthBoundingRect">
              Width of the rectangle bounding the chart.
            </param>
            <param name="heightBoundingRect">
              Height of the rectangle bounding the chart.
            </param>
            <param name="values">
              An array of <c>decimal</c> values to chart.
            </param>
            <param name="sliceColors">
              An array of colors used to render slices.
            </param>
            <param name="sliceRelativeHeight">
              Thickness of the slice to chart relative to the height of the
              bounding rectangle.
            </param>
            <param name="texts">
              An array of strings that are displayed on corresponding slice.
            </param>
        </member>
        <member name="M:Alt.GUI.PieChart.PieChart3D.#ctor(System.Double,System.Double,System.Double,System.Double,System.Decimal[],System.Double,System.String[])">
            <summary>
              Initializes a new instance of <c>PieChart3D</c> with given bounds,
              array of values and relative pie slice height.
            </summary>
            <param name="xBoundingRect">
              x-coordinate of the upper-left corner of the rectangle bounding 
              the chart.
            </param>
            <param name="yBoundingRect">
              y-coordinate of the upper-left corner of the rectangle bounding
              the chart.
            </param>
            <param name="widthBoundingRect">
              Width of the rectangle bounding the chart.
            </param>
            <param name="heightBoundingRect">
              Height of the rectangle bounding the chart.
            </param>
            <param name="values">
              An array of <c>decimal</c> values to chart.
            </param>
            <param name="sliceRelativeHeight">
              Thickness of the slice to chart relative to the height of the
              bounding rectangle.
            </param>
            <param name="texts">
              An array of strings that are displayed on corresponding slice.
            </param>
        </member>
        <member name="M:Alt.GUI.PieChart.PieChart3D.Finalize">
            <summary>
              <c>Finalize</c> method.
            </summary>
        </member>
        <member name="M:Alt.GUI.PieChart.PieChart3D.Dispose">
            <summary>
              Implementation of <c>IDisposable</c> interface.
            </summary>
        </member>
        <member name="M:Alt.GUI.PieChart.PieChart3D.Dispose(System.Boolean)">
            <summary>
              Disposes of all pie slices.
            </summary>
        </member>
        <member name="M:Alt.GUI.PieChart.PieChart3D.Draw(Alt.Sketch.Graphics)">
            <summary>
              Draws the chart.
            </summary>
            <param name="graphics">
              <c>Graphics</c> object used for drawing.
            </param>
        </member>
        <member name="M:Alt.GUI.PieChart.PieChart3D.PlaceTexts(Alt.Sketch.Graphics)">
            <summary>
              Draws strings by individual slices. Position of the text is 
              calculated by overridable <c>GetTextPosition</c> method of the
              <c>PieSlice</c> type.
            </summary>
            <param name="graphics">
              <c>Graphics</c> object.
            </param>
        </member>
        <member name="M:Alt.GUI.PieChart.PieChart3D.FindPieSliceUnderPoint(Alt.Sketch.Point)">
            <summary>
              Searches the chart to find the index of the pie slice which 
              contains point given. Search order goes in the direction opposite
              to drawing order.
            </summary>
            <param name="point">
              <c>Point</c> point for which pie slice is searched for.
            </param>
            <returns>
              Index of the corresponding pie slice, or -1 if none is found.
            </returns>
        </member>
        <member name="M:Alt.GUI.PieChart.PieChart3D.GetForemostPieSlice(Alt.GUI.PieChart.PieSlice[])">
            <summary>
              Return the index of the foremost pie slice i.e. the one crossing
              90 degrees boundary.
            </summary>
            <param name="pieSlices">
              Array of <c>PieSlice</c> objects to examine.
            </param>
            <returns>
              Index of the foremost pie slice.
            </returns>
        </member>
        <member name="M:Alt.GUI.PieChart.PieChart3D.GetFittingRectangle">
            <summary>
              Finds the smallest rectangle int which chart fits entirely.
            </summary>
            <returns>
              <c>Rect</c> into which all member slices fit.
            </returns>
        </member>
        <member name="M:Alt.GUI.PieChart.PieChart3D.ReadjustSlices(Alt.Sketch.Rect)">
            <summary>
              Readjusts each slice for new bounding rectangle. 
            </summary>
            <param name="newBoundingRectangle">
              <c>Rect</c> representing new boundary.
            </param>
        </member>
        <member name="M:Alt.GUI.PieChart.PieChart3D.InitializePieSlices">
            <summary>
              Initializes pies.
            </summary>
            Creates a list of pies, starting with the pie that is crossing the 
            270 degrees boundary, i.e. "backmost" pie that always has to be 
            drawn first to ensure correct surface overlapping.
        </member>
        <member name="M:Alt.GUI.PieChart.PieChart3D.CreatePieSlice(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,Alt.Sketch.Color,Alt.GUI.PieChart.ShadowStyle,Alt.GUI.PieChart.EdgeColorType,System.Double)">
            <summary>
              Creates a <c>PieSlice</c> object.
            </summary>
            <param name="boundingRectLeft">
              x-coordinate of the upper-left corner of the rectangle that is 
              used to draw the top surface of the slice.
            </param>
            <param name="boundingRectTop">
              y-coordinate of the upper-left corner of the rectangle that is 
              used to draw the top surface of the slice.
            </param>
            <param name="boundingRectWidth">
              Width of the rectangle that is used to draw the top surface of 
              the slice.
            </param>
            <param name="boundingRectHeight">
              Height of the rectangle that is used to draw the top surface of 
              the slice.
            </param>
            <param name="sliceHeight">
              Slice height.
            </param>
            <param name="startAngle">
              Starting angle.
            </param>
            <param name="sweepAngle">
              Sweep angle.
            </param>
            <param name="color">
              Color used for slice rendering.
            </param>
            <param name="shadowStyle">
              Shadow style used for slice rendering.
            </param>
            <param name="edgeColorType">
              Edge lines color type.
            </param>
            <param name="edgeLineWidth">
              Edge lines width.
            </param>
            <returns>
              <c>PieSlice</c> object with given values.
            </returns>
        </member>
        <member name="M:Alt.GUI.PieChart.PieChart3D.CreatePieSliceHighlighted(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,Alt.Sketch.Color,Alt.GUI.PieChart.ShadowStyle,Alt.GUI.PieChart.EdgeColorType,System.Double)">
            <summary>
              Creates highlighted <c>PieSlice</c> object.
            </summary>
            <param name="boundingRectLeft">
              x-coordinate of the upper-left corner of the rectangle that is 
              used to draw the top surface of the slice.
            </param>
            <param name="boundingRectTop">
              y-coordinate of the upper-left corner of the rectangle that is 
              used to draw the top surface of the slice.
            </param>
            <param name="boundingRectWidth">
              Width of the rectangle that is used to draw the top surface of 
              the slice.
            </param>
            <param name="boundingRectHeight">
              Height of the rectangle that is used to draw the top surface of 
              the slice.
            </param>
            <param name="sliceHeight">
              Slice height.
            </param>
            <param name="startAngle">
              Starting angle.
            </param>
            <param name="sweepAngle">
              Sweep angle.
            </param>
            <param name="color">
              Color used for slice rendering.
            </param>
            <param name="shadowStyle">
              Shadow style used for slice rendering.
            </param>
            <param name="edgeColorType">
              Edge lines color type.
            </param>
            <param name="edgeLineWidth">
              Edge lines width.
            </param>
            <returns>
              <c>PieSlice</c> object with given values.
            </returns>
        </member>
        <member name="M:Alt.GUI.PieChart.PieChart3D.GetSliceDisplacement(System.Double,System.Double)">
            <summary>
              Calculates the displacement for given angle.
            </summary>
            <param name="angle">
              Angle (in degrees).
            </param>
            <param name="displacementFactor">
              Displacement factor.
            </param>
            <returns>
              <c>Size</c> representing displacement.
            </returns>
        </member>
        <member name="M:Alt.GUI.PieChart.PieChart3D.DrawSliceSides(Alt.Sketch.Graphics)">
            <summary>
              Draws outer peripheries of all slices.
            </summary>
            <param name="graphics">
              <c>Graphics</c> used for drawing.
            </param>
        </member>
        <member name="M:Alt.GUI.PieChart.PieChart3D.DrawBottoms(Alt.Sketch.Graphics)">
            <summary>
              Draws bottom sides of all pie slices.
            </summary>
            <param name="graphics">
              <c>Graphics</c> used for drawing.
            </param>
        </member>
        <member name="M:Alt.GUI.PieChart.PieChart3D.DrawTops(Alt.Sketch.Graphics)">
            <summary>
              Draws top sides of all pie slices.
            </summary>
            <param name="graphics">
              <c>Graphics</c> used for drawing.
            </param>
        </member>
        <member name="M:Alt.GUI.PieChart.PieChart3D.AreDisplacementsValid(System.Double[])">
            <summary>
              Helper function used in assertions. Checks the validity of 
              slice displacements.
            </summary>
            <param name="displacements">
              Array of displacements to check.
            </param>
            <returns>
              <c>true</c> if all displacements have a valid value; otherwise 
              <c>false</c>.
            </returns>
        </member>
        <member name="M:Alt.GUI.PieChart.PieChart3D.IsDisplacementValid(System.Double)">
            <summary>
              Helper function used in assertions. Checks the validity of 
              a slice displacement.
            </summary>
            <param name="value">
              Displacement value to check.
            </param>
            <returns>
              <c>true</c> if displacement has a valid value; otherwise 
              <c>false</c>.
            </returns>
        </member>
        <member name="F:Alt.GUI.PieChart.PieChart3D.m_xBoundingRect">
            <summary>
              x-coordinate of the top left corner of the bounding rectangle.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.PieChart3D.m_yBoundingRect">
            <summary>
              y-coordinate of the top left corner of the bounding rectangle.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.PieChart3D.m_widthBoundingRect">
            <summary>
              Width of the bounding rectangle.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.PieChart3D.m_heightBoundingRect">
            <summary>
              Height of the bounding rectangle.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.PieChart3D.m_sliceRelativeHeight">
            <summary>
              Slice relative height.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.PieChart3D.m_initialAngle">
            <summary>
              Initial angle from which chart is drawn.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.PieChart3D.m_pieSlices">
            <summary>
              Array of ordered pie slices constituting the chart, starting from 
              270 degrees axis.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.PieChart3D.m_pieSlicesMapping">
            <summary>
              Collection of reordered pie slices mapped to original order.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.PieChart3D.m_values">
            <summary>
              Array of values to be presented by the chart.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.PieChart3D.m_sliceColors">
            <summary>
              Array of colors used for rendering.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.PieChart3D.m_texts">
            <summary>
              Array of description texts.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.PieChart3D.m_font">
            <summary>
              Font used to display texts.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.PieChart3D.m_foreColor">
            <summary>
              Fore color used to display texts.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.PieChart3D.m_sliceRelativeDisplacements">
            <summary>
              Array of relative displacements from the common center.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.PieChart3D.m_edgeColorType">
            <summary>
              Edge color type used for rendering.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.PieChart3D.m_edgeLineWidth">
            <summary>
              Edge line width.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.PieChart3D.m_shadowStyle">
            <summary>
              Shadow style.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.PieChart3D.m_fitToBoundingRectangle">
            <summary>
              Should the chart fit the bounding rectangle exactly.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.PieChart3D.m_highlightedIndex">
            <summary>
              Index of the currently highlighted pie slice.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.PieChart3D.m_disposed">
            <summary>
              Flag indicating if object has been disposed.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.PieChart3D.Values">
            <summary>
              Sets values to be displayed on the chart.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.PieChart3D.Colors">
            <summary>
              Sets colors used for individual pie slices.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.PieChart3D.Texts">
            <summary>
              Sets text displayed by slices.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.PieChart3D.Font">
            <summary>
              Gets or sets the font of the text displayed by the control.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.PieChart3D.ForeColor">
            <summary>
              Gets or sets the foreground color of the control used to draw text.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.PieChart3D.EdgeColorType">
            <summary>
              Sets slice edge color mode. If set to <c>PenColor</c> (default),
              then value set by <c>EdgeColor</c> property is used.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.PieChart3D.EdgeLineWidth">
            <summary>
              Sets slice edge line width. If not set, default value is 1.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.PieChart3D.SliceRelativeHeight">
            <summary>
              Sets slice height, relative to the top ellipse semi-axis. Must be
              less than or equal to 0.5.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.PieChart3D.SliceRelativeDisplacement">
            <summary>
              Sets the slice displacement relative to the ellipse semi-axis.
              Must be less than 1.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.PieChart3D.SliceRelativeDisplacements">
            <summary>
              Sets the slice displacement relative to the ellipse semi-axis.
              Must be less than 1.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.PieChart3D.ChartSize">
            <summary>
              Gets or sets the size of the entire pie chart.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.PieChart3D.Width">
            <summary>
              Gets or sets the width of the bounding rectangle.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.PieChart3D.Height">
            <summary>
              Gets or sets the height of the bounding rectangle.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.PieChart3D.Top">
            <summary>
              Gets the y-coordinate of the bounding rectangle top edge.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.PieChart3D.Bottom">
            <summary>
              Gets the y-coordinate of the bounding rectangle bottom edge.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.PieChart3D.Left">
            <summary>
              Gets the x-coordinate of the bounding rectangle left edge.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.PieChart3D.Right">
            <summary>
              Gets the x-coordinate of the bounding rectangle right edge.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.PieChart3D.X">
            <summary>
              Gets or sets the x-coordinate of the upper-left corner of the 
              bounding rectangle.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.PieChart3D.Y">
            <summary>
              Gets or sets the y-coordinate of the upper-left corner of the 
              bounding rectangle.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.PieChart3D.ShadowStyle">
            <summary>
              Sets the shadowing style used.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.PieChart3D.FitToBoundingRectangle">
            <summary>
              Sets the flag that controls if chart is fit to bounding rectangle 
              exactly.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.PieChart3D.InitialAngle">
            <summary>
              Sets the initial angle from which pies are placed.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.PieChart3D.HighlightedIndex">
            <summary>
              Sets the index of the highlighted pie.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.PieChart3D.LargestDisplacement">
            <summary>
              Finds the largest displacement.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.PieChart3D.TopEllipseSize">
            <summary>
              Gets the top ellipse size.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.PieChart3D.LargestDisplacementEllipseSize">
            <summary>
              Gets the ellipse defined by largest displacement.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.PieChart3D.PieHeight">
            <summary>
              Calculates the pie height.
            </summary>
        </member>
        <member name="T:Alt.GUI.PieChart.PieSlice">
            <summary>
              Object representing 3D pie.
            </summary>
        </member>
        <member name="M:Alt.GUI.PieChart.PieSlice.#ctor">
            <summary>
              Initializes an empty instance of <c>PieSlice</c>.
            </summary>
        </member>
        <member name="M:Alt.GUI.PieChart.PieSlice.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,Alt.Sketch.Color)">
            <summary>
              Initializes a new instance of flat <c>PieSlice</c> class with given 
              bounds and visual style.
            </summary>
            <param name="xBoundingRect">
              x-coordinate of the upper-left corner of the rectangle that is 
              used to draw the top surface of the pie slice.
            </param>
            <param name="yBoundingRect">
              y-coordinate of the upper-left corner of the rectangle that is 
              used to draw the top surface of the pie slice.
            </param>
            <param name="widthBoundingRect">
              Width of the rectangle that is used to draw the top surface of 
              the pie slice.
            </param>
            <param name="heightBoundingRect">
              Height of the rectangle that is used to draw the top surface of 
              the pie slice.
            </param>
            <param name="startAngle">
              Starting angle (in degrees) of the pie slice.
            </param>
            <param name="sweepAngle">
              Sweep angle (in degrees) of the pie slice.
            </param>
            <param name="surfaceColor">
              Color used to paint the pie slice.
            </param>
        </member>
        <member name="M:Alt.GUI.PieChart.PieSlice.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,Alt.Sketch.Color,Alt.GUI.PieChart.ShadowStyle,Alt.GUI.PieChart.EdgeColorType)">
            <summary>
              Initializes a new instance of <c>PieSlice</c> class with given 
              bounds and visual style.
            </summary>
            <param name="xBoundingRect">
              x-coordinate of the upper-left corner of the rectangle that is 
              used to draw the top surface of the pie slice.
            </param>
            <param name="yBoundingRect">
              y-coordinate of the upper-left corner of the rectangle that is 
              used to draw the top surface of the pie slice.
            </param>
            <param name="widthBoundingRect">
              Width of the rectangle that is used to draw the top surface of 
              the pie slice.
            </param>
            <param name="heightBoundingRect">
              Height of the rectangle that is used to draw the top surface of 
              the pie slice.
            </param>
            <param name="sliceHeight">
              Height of the pie slice.
            </param>
            <param name="startAngle">
              Starting angle (in degrees) of the pie slice.
            </param>
            <param name="sweepAngle">
              Sweep angle (in degrees) of the pie slice.
            </param>
            <param name="surfaceColor">
              Color used to paint the pie slice.
            </param>
            <param name="shadowStyle">
              Shadow style used for slice rendering.
            </param>
            <param name="edgeColorType">
              Edge color style used for slice rendering.
            </param>
        </member>
        <member name="M:Alt.GUI.PieChart.PieSlice.#ctor(Alt.Sketch.Rect,System.Double,System.Double,System.Double,Alt.Sketch.Color,Alt.GUI.PieChart.ShadowStyle,Alt.GUI.PieChart.EdgeColorType)">
            <summary>
              Initializes a new instance of <c>PieSlice</c> class with given 
              bounds and visual style.
            </summary>
            <param name="boundingRect">
              Bounding rectangle used to draw the top surface of the slice.
            </param>
            <param name="sliceHeight">
              Pie slice height.
            </param>
            <param name="startAngle">
              Starting angle (in degrees) of the pie slice.
            </param>
            <param name="sweepAngle">
              Sweep angle (in degrees) of the pie slice.
            </param>
            <param name="surfaceColor">
              Color used to render pie slice surface.
            </param>
            <param name="shadowStyle">
              Shadow style used in rendering.
            </param>
            <param name="edgeColorType">
              Edge color type used for rendering.
            </param>
        </member>
        <member name="M:Alt.GUI.PieChart.PieSlice.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,Alt.Sketch.Color,Alt.GUI.PieChart.ShadowStyle,Alt.GUI.PieChart.EdgeColorType,System.Double)">
            <summary>
              Initializes a new instance of <c>PieSlice</c> class with given 
              bounds and visual style.
            </summary>
            <param name="xBoundingRect">
              x-coordinate of the upper-left corner of the rectangle that is 
              used to draw the top surface of the pie slice.
            </param>
            <param name="yBoundingRect">
              y-coordinate of the upper-left corner of the rectangle that is 
              used to draw the top surface of the pie slice.
            </param>
            <param name="widthBoundingRect">
              Width of the rectangle that is used to draw the top surface of 
              the pie slice.
            </param>
            <param name="heightBoundingRect">
              Height of the rectangle that is used to draw the top surface of 
              the pie slice.
            </param>
            <param name="sliceHeight">
              Height of the pie slice.
            </param>
            <param name="startAngle">
              Starting angle (in degrees) of the pie slice.
            </param>
            <param name="sweepAngle">
              Sweep angle (in degrees) of the pie slice.
            </param>
            <param name="surfaceColor">
              Color used to render pie slice surface.
            </param>
            <param name="shadowStyle">
              Shadow style used in rendering.
            </param>
            <param name="edgeColorType">
              Edge color type used for rendering.
            </param>
            <param name="edgeLineWidth">
              Edge line width.
            </param>
        </member>
        <member name="M:Alt.GUI.PieChart.PieSlice.#ctor(Alt.Sketch.RectI,System.Double,System.Double,System.Double,Alt.Sketch.Color,Alt.GUI.PieChart.ShadowStyle,Alt.GUI.PieChart.EdgeColorType,System.Double)">
            <summary>
              Initializes a new instance of <c>PieSlice</c> class with given 
              bounds and visual style.
            </summary>
            <param name="boundingRect">
              Bounding rectangle used to draw the top surface of the pie slice.
            </param>
            <param name="sliceHeight">
              Pie slice height.
            </param>
            <param name="startAngle">
              Starting angle (in degrees) of the pie slice.
            </param>
            <param name="sweepAngle">
              Sweep angle (in degrees) of the pie slice.
            </param>
            <param name="surfaceColor">
              Color used to render pie slice surface.
            </param>
            <param name="shadowStyle">
              Shadow style used in rendering.
            </param>
            <param name="edgeColorType">
              Edge color type used for rendering.
            </param>
            <param name="edgeLineWidth">
              Edge line width.
            </param>
        </member>
        <member name="M:Alt.GUI.PieChart.PieSlice.Finalize">
            <summary>
              <c>Finalize</c> implementation
            </summary>
        </member>
        <member name="M:Alt.GUI.PieChart.PieSlice.Dispose">
            <summary>
              Implementation of <c>IDisposable</c> interface.
            </summary>
        </member>
        <member name="M:Alt.GUI.PieChart.PieSlice.Dispose(System.Boolean)">
            <summary>
              Disposes of all resources used by <c>PieSlice</c> object.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Alt.GUI.PieChart.PieSlice.Clone">
            <summary>
              Implementation of ICloneable interface.
            </summary>
            <returns>
              A deep copy of this object.
            </returns>
        </member>
        <member name="M:Alt.GUI.PieChart.PieSlice.Draw(Alt.Sketch.Graphics)">
            <summary>
              Draws the pie slice.
            </summary>
            <param name="graphics">
              <c>Graphics</c> used to draw the pie slice.
            </param>
        </member>
        <member name="M:Alt.GUI.PieChart.PieSlice.Contains(Alt.Sketch.Point)">
            <summary>
              Checks if given pie slice contains given point.
            </summary>
            <param name="point">
              <c>Point</c> to check.
            </param>
            <returns>
              <c>true</c> if point given is contained within the slice.
            </returns>
        </member>
        <member name="M:Alt.GUI.PieChart.PieSlice.GetTextPosition">
            <summary>
              Evaluates the point in the middle of the slice.
            </summary>
            <returns>
              <c>Point</c> in the middle of the pie top.
            </returns>
        </member>
        <member name="M:Alt.GUI.PieChart.PieSlice.DrawSides(Alt.Sketch.Graphics)">
            <summary>
              Draws pie slice sides.
            </summary>
            <param name="graphics">
              <c>Graphics</c> used to draw the pie slice.
            </param>
        </member>
        <member name="M:Alt.GUI.PieChart.PieSlice.Split(System.Double)">
            <summary>
              Splits a pie slice into two on the split angle.
            </summary>
            <param name="splitAngle">
              Angle at which splitting is performed.
            </param>
            <returns>
              An array of two pie  slices.
            </returns>
        </member>
        <member name="M:Alt.GUI.PieChart.PieSlice.Readjust(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Reajusts the pie slice to fit new bounding rectangle provided.
            </summary>
            <param name="xBoundingRect">
              x-coordinate of the upper-left corner of the rectangle that is 
              used to draw the top surface of the pie slice.
            </param>
            <param name="yBoundingRect">
              y-coordinate of the upper-left corner of the rectangle that is 
              used to draw the top surface of the pie slice.
            </param>
            <param name="widthBoundingRect">
              Width of the rectangle that is used to draw the top surface of 
              the pie slice.
            </param>
            <param name="heightBoundingRect">
              Height of the rectangle that is used to draw the top surface of 
              the pie slice.
            </param>
            <param name="sliceHeight">
              Height of the pie slice.
            </param>
        </member>
        <member name="M:Alt.GUI.PieChart.PieSlice.DrawStartSide(Alt.Sketch.Graphics)">
            <summary>
              Draws visible start side.
            </summary>
            <param name="graphics">
              <c>Graphics</c> used to draw the pie slice.
            </param>
        </member>
        <member name="M:Alt.GUI.PieChart.PieSlice.DrawEndSide(Alt.Sketch.Graphics)">
            <summary>
              Draws visible end side.
            </summary>
            <param name="graphics">
              <c>Graphics</c> used to draw the pie slice.
            </param>
        </member>
        <member name="M:Alt.GUI.PieChart.PieSlice.DrawVisiblePeriphery(Alt.Sketch.Graphics)">
            <summary>
              Draws visible outer periphery of the pie slice.
            </summary>
            <param name="graphics">
              <c>Graphics</c> used to draw the pie slice.
            </param>
        </member>
        <member name="M:Alt.GUI.PieChart.PieSlice.DrawHiddenPeriphery(Alt.Sketch.Graphics)">
            <summary>
              Draws hidden outer periphery of the pie slice.
            </summary>
            <param name="graphics">
              <c>Graphics</c> used to draw the pie slice.
            </param>
        </member>
        <member name="M:Alt.GUI.PieChart.PieSlice.DrawBottom(Alt.Sketch.Graphics)">
            <summary>
              Draws the bottom of the pie slice.
            </summary>
            <param name="graphics">
              <c>Graphics</c> used to draw the pie slice.
            </param>
        </member>
        <member name="M:Alt.GUI.PieChart.PieSlice.DrawTop(Alt.Sketch.Graphics)">
            <summary>
              Draws the top of the pie slice.
            </summary>
            <param name="graphics">
              <c>Graphics</c> used to draw the pie slice.
            </param>
        </member>
        <member name="M:Alt.GUI.PieChart.PieSlice.GetFittingRectangle">
            <summary>
              Calculates the smallest rectangle into which this pie slice fits.
            </summary>
            <returns>
              <c>Rect</c> into which this pie slice fits exactly.
            </returns>
        </member>
        <member name="M:Alt.GUI.PieChart.PieSlice.PieSliceContainsPoint(Alt.Sketch.Point)">
            <summary>
              Checks if given point is contained inside the pie slice.
            </summary>
            <param name="point">
              <c>Point</c> to check for.
            </param>
            <returns>
              <c>true</c> if given point is inside the pie slice.
            </returns>
        </member>
        <member name="M:Alt.GUI.PieChart.PieSlice.PeripheryContainsPoint(Alt.Sketch.Point)">
            <summary>
              Checks if given point is contained by cylinder periphery.
            </summary>
            <param name="point">
              <c>Point</c> to check for.
            </param>
            <returns>
              <c>true</c> if given point is inside the cylinder periphery.
            </returns>
        </member>
        <member name="M:Alt.GUI.PieChart.PieSlice.StartSideContainsPoint(Alt.Sketch.Point)">
            <summary>
              Checks if point provided is inside pie slice start cut side.
            </summary>
            <param name="point">
              <c>Point</c> to check.
            </param>
            <returns>
              <c>true</c> if point is inside the start side.
            </returns>
        </member>
        <member name="M:Alt.GUI.PieChart.PieSlice.EndSideContainsPoint(Alt.Sketch.Point)">
            <summary>
              Checks if point provided is inside pie slice end cut side.
            </summary>
            <param name="point">
              <c>Point</c> to check.
            </param>
            <returns>
              <c>true</c> if point is inside the end side.
            </returns>
        </member>
        <member name="M:Alt.GUI.PieChart.PieSlice.BottomSurfaceSectionContainsPoint(Alt.Sketch.Point)">
            <summary>
              Checks if bottom side of the pie slice contains the point.
            </summary>
            <param name="point">
              <c>Point</c> to check.
            </param>
            <returns>
              <c>true</c> if point is inside the bottom of the pie slice.
            </returns>
        </member>
        <member name="M:Alt.GUI.PieChart.PieSlice.CreateSurfaceBrushes(Alt.Sketch.Color,Alt.GUI.PieChart.ShadowStyle)">
            <summary>
              Creates brushes used to render the pie slice.
            </summary>
            <param name="surfaceColor">
              Color used for rendering.
            </param>
            <param name="shadowStyle">
              Shadow style used for rendering.
            </param>
        </member>
        <member name="M:Alt.GUI.PieChart.PieSlice.DisposeBrushes">
            <summary>
              Disposes brush objects.
            </summary>
        </member>
        <member name="M:Alt.GUI.PieChart.PieSlice.CreateBrushForSide(Alt.Sketch.Color,System.Double)">
            <summary>
              Creates a brush for start and end sides of the pie slice for 
              gradual  shade.
            </summary>
            <param name="color">
              Color used for pie slice rendering.
            </param>
            <param name="angle">
              Angle of the surface.
            </param>
            <returns>
              <c>Brush</c> object.
            </returns>
        </member>
        <member name="M:Alt.GUI.PieChart.PieSlice.CreateBrushForPeriphery(Alt.Sketch.Color)">
            <summary>
              Creates a brush for outer periphery of the pie slice used for 
              gradual shadow.
            </summary>
            <param name="color">
              Color used for pie slice rendering.
            </param>
            <returns>
              <c>Brush</c> object.
            </returns>
        </member>
        <member name="M:Alt.GUI.PieChart.PieSlice.DrawCylinderSurfaceSection(Alt.Sketch.Graphics,Alt.Sketch.Pen,Alt.Sketch.Brush,System.Double,System.Double,Alt.Sketch.Point,Alt.Sketch.Point)">
            <summary>
              Draws the outer periphery of the pie slice.
            </summary>
            <param name="graphics">
              <c>Graphics</c> object used to draw the surface.
            </param>
            <param name="pen">
              <c>Pen</c> used to draw outline.
            </param>
            <param name="brush">
              <c>Brush</c> used to fill the quadrilateral.
            </param>
            <param name="boundingRect">
              Bounding rectangle that is used to draw the top surface of the 
              pie slice.
            </param>
            <param name="startAngle">
              Start angle (in degrees) of the periphery section.
            </param>
            <param name="endAngle">
              End angle (in degrees) of the periphery section.
            </param>
            <param name="pointStart">
              Point representing the start of the periphery.
            </param>
            <param name="pointEnd">
              Point representing the end of the periphery.
            </param>
        </member>
        <member name="M:Alt.GUI.PieChart.PieSlice.TransformAngle(System.Double)">
            <summary>
              Transforms actual angle to angle used for rendering. They are 
              different because of perspective.
            </summary>
            <param name="angle">
              Actual angle.
            </param>
            <returns>
              Rendering angle.
            </returns>
        </member>
        <member name="M:Alt.GUI.PieChart.PieSlice.GetActualAngle(System.Double)">
            <summary>
              Gets the actual angle from the rendering angle.
            </summary>
            <param name="transformedAngle">
              Transformed angle for which actual angle has to be evaluated.
            </param>
            <returns>
              Actual angle.
            </returns>
        </member>
        <member name="M:Alt.GUI.PieChart.PieSlice.PeripheralPoint(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Calculates the point on ellipse periphery for angle.
            </summary>
            <param name="xCenter">
              x-coordinate of the center of the ellipse.
            </param>
            <param name="yCenter">
              y-coordinate of the center of the ellipse.
            </param>
            <param name="semiMajor">
              Horizontal semi-axis.
            </param>
            <param name="semiMinor">
              Vertical semi-axis.
            </param>
            <param name="angleDegrees">
              Angle (in degrees) for which corresponding periphery point has to 
              be obtained.
            </param>
            <returns>
              <c>Point</c> on the ellipse.
            </returns>
        </member>
        <member name="M:Alt.GUI.PieChart.PieSlice.InitializePieSlice(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Initializes pie bounding rectangle, pie height, corners 
              coordinates and brushes used for rendering.
            </summary>
            <param name="xBoundingRect">
              x-coordinate of the upper-left corner of the rectangle that is 
              used to draw the top surface of the pie slice.
            </param>
            <param name="yBoundingRect">
              y-coordinate of the upper-left corner of the rectangle that is 
              used to draw the top surface of the pie slice.
            </param>
            <param name="widthBoundingRect">
              Width of the rectangle that is used to draw the top surface of 
              the pie slice.
            </param>
            <param name="heightBoundingRect">
              Height of the rectangle that is used to draw the top surface of 
              the pie slice.
            </param>
            <param name="sliceHeight">
              Height of the pie slice.
            </param>
        </member>
        <member name="M:Alt.GUI.PieChart.PieSlice.InitializeSides">
            <summary>
              Initializes start and end pie slice sides.
            </summary>
        </member>
        <member name="M:Alt.GUI.PieChart.PieSlice.InitializeSides(System.Boolean,System.Boolean)">
            <summary>
              Initializes start and end pie slice sides.
            </summary>
            <param name="startSideExists">
              Does start side exists.
            </param>
            <param name="endSideExists">
              Does end side exists.
            </param>
        </member>
        <member name="M:Alt.GUI.PieChart.PieSlice.GetVisiblePeripherySurfaceBounds">
            <summary>
              Gets an array of visible periphery bounds.
            </summary>
            <returns>
              Array of <c>PeripherySurfaceBounds</c> objects.
            </returns>
        </member>
        <member name="M:Alt.GUI.PieChart.PieSlice.GetHiddenPeripherySurfaceBounds">
            <summary>
              Gets an array of hidden periphery bounds.
            </summary>
            <returns>
              Array of <c>PeripherySurfaceBounds</c> objects.
            </returns>
        </member>
        <member name="M:Alt.GUI.PieChart.PieSlice.CreatePathForCylinderSurfaceSection(System.Double,System.Double,Alt.Sketch.Point,Alt.Sketch.Point)">
            <summary>
              Creates <c>GraphicsPath</c> for cylinder surface section. This 
              path consists of two arcs and two vertical lines.
            </summary>
            <param name="startAngle">
              Starting angle of the surface.
            </param>
            <param name="endAngle">
              Ending angle of the surface.
            </param>
            <param name="pointStart">
              Starting point on the cylinder surface.
            </param>
            <param name="pointEnd">
              Ending point on the cylinder surface.
            </param>
            <returns>
              <c>GraphicsPath</c> object representing the cylinder surface.
            </returns>
        </member>
        <member name="M:Alt.GUI.PieChart.PieSlice.CylinderSurfaceSectionContainsPoint(Alt.Sketch.Point,System.Double,System.Double,Alt.Sketch.Point,Alt.Sketch.Point)">
            <summary>
              Checks if given point is contained within upper and lower pie 
              slice surfaces or within the outer slice brink.
            </summary>
            <param name="point">
              <c>Point</c> structure to check for.
            </param>
            <param name="startAngle">
              Start angle of the slice.
            </param>
            <param name="endAngle">
              End angle of the slice.
            </param>
            <param name="point1">
              Starting point on the periphery.
            </param>
            <param name="point2">
              Ending point on the periphery.
            </param>
            <returns>
              <c>true</c> if point given is contained.
            </returns>
        </member>
        <member name="M:Alt.GUI.PieChart.PieSlice.PieSliceContainsPoint(Alt.Sketch.Point,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
              Checks if point given is contained within the pie slice.
            </summary>
            <param name="point">
              <c>Point</c> to check for.
            </param>
            <param name="xBoundingRectangle">
              x-coordinate of the rectangle that bounds the ellipse from which
              slice is cut.
            </param>
            <param name="yBoundingRectangle">
              y-coordinate of the rectangle that bounds the ellipse from which
              slice is cut.
            </param>
            <param name="widthBoundingRectangle"> 
              Width of the rectangle that bounds the ellipse from which
              slice is cut.
            </param>
            <param name="heightBoundingRectangle">
              Height of the rectangle that bounds the ellipse from which
              slice is cut.
            </param>
            <param name="startAngle">
              Start angle of the slice.
            </param>
            <param name="sweepAngle">
              Sweep angle of the slice.
            </param>
            <returns>
              <c>true</c> if point is contained within the slice.
            </returns>
        </member>
        <member name="M:Alt.GUI.PieChart.PieSlice.GetEllipseRadius(System.Double)">
            <summary>
              Evaluates the distance of an ellipse perimeter point for a
              given angle.
            </summary>
            <param name="angle">
              Angle for which distance has to be evaluated.
            </param>
            <returns>
              Distance of the point from the ellipse centre.
            </returns>
        </member>
        <member name="F:Alt.GUI.PieChart.PieSlice.m_boundingRectangle">
            <summary>
              Bounding rectangle that bounds the ellipse from which pie slice 
              is cut.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.PieSlice.m_sliceHeight">
            <summary>
              Pie slice height.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.PieSlice.m_startAngle">
            <summary>
              Start angle.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.PieSlice.m_sweepAngle">
            <summary>
              Sweep angle.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.PieSlice.m_actualStartAngle">
            <summary>
              Actual start angle.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.PieSlice.m_actualSweepAngle">
            <summary>
              Actual sweep angle.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.PieSlice.m_surfaceColor">
            <summary>
              Color of the surface.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.PieSlice.m_shadowStyle">
            <summary>
              Style used for shadow.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.PieSlice.m_edgeColorType">
            <summary>
              <c>EdgeColorType</c> used to draw pie sliece edges.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.PieSlice.m_brushSurface">
            <summary>
              <c>Brush</c> used to render slice top surface.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.PieSlice.m_brushSurfaceHighlighted">
            <summary>
              <c>Brush</c> used to render slice top surface when highlighted.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.PieSlice.m_brushStartSide">
            <summary>
              <c>Brush</c> used to render slice starting cut side.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.PieSlice.m_brushEndSide">
            <summary>
              <c>Brush</c> used to render slice ending cut side.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.PieSlice.m_brushPeripherySurface">
            <summary>
              <c>Brush</c> used to render pie slice periphery (cylinder outer surface).
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.PieSlice.m_pen">
            <summary>
              <c>Pen</c> object used to draw pie slice edges.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.PieSlice.m_center">
            <summary>
              <c>Point</c> corresponding to pie slice center.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.PieSlice.m_centerBelow">
            <summary>
              <c>Point</c> corresponding to the lower pie slice center.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.PieSlice.m_pointStart">
            <summary>
              <c>Point</c> on the periphery corresponding to the start cut 
              side.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.PieSlice.m_pointStartBelow">
            <summary>
              <c>Point</c> on the periphery corresponding to the start cut 
              side.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.PieSlice.m_pointEnd">
            <summary>
              <c>Point</c> on the periphery corresponding to the end cut 
              side.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.PieSlice.m_pointEndBelow">
            <summary>
              <c>Point</c> on the periphery corresponding to the end cut 
              side.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.PieSlice.m_startSide">
            <summary>
              <c>Quadrilateral</c> representing the start side.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.PieSlice.m_endSide">
            <summary>
              <c>Quadrilateral</c> representing the end side.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.PieSlice.m_text">
            <summary>
              Text attached to the slice.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.PieSlice.m_disposed">
            <summary>
              Flag indicating if object has been disposed.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.PieSlice.s_shadowAngle">
            <summary>
              Angle offset used to define reference angle for gradual shadow.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.PieSlice.StartAngle">
            <summary>
              Gets starting angle (in degrees) of the pie slice.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.PieSlice.SweepAngle">
            <summary>
              Gets sweep angle (in degrees) of the pie slice.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.PieSlice.EndAngle">
            <summary>
              Gets ending angle (in degrees) of the pie slice.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.PieSlice.BoundingRectangle">
            <summary>
              Gets or sets the bounding rectangle.
            </summary>
        </member>
        <member name="P:Alt.GUI.PieChart.PieSlice.SliceHeight">
            <summary>
              Gets or sets the slice height.
            </summary>
        </member>
        <member name="T:Alt.GUI.PieChart.PieSlice.PeripherySurfaceBounds">
            <summary>
              Internal structure used to store periphery bounds data.
            </summary>
        </member>
        <member name="T:Alt.GUI.PieChart.Quadrilateral">
            <summary>
             Quadrilateral object.
            </summary>
        </member>
        <member name="M:Alt.GUI.PieChart.Quadrilateral.#ctor">
            <summary>
              Creates empty <c>Quadrilateral</c> object
            </summary>
        </member>
        <member name="M:Alt.GUI.PieChart.Quadrilateral.#ctor(Alt.Sketch.Point,Alt.Sketch.Point,Alt.Sketch.Point,Alt.Sketch.Point,System.Boolean)">
            <summary>
              Initilizes <c>Quadrilateral</c> object with given corner points.
            </summary>
            <param name="point1">
              First <c>Point</c>.
            </param>
            <param name="point2">
              Second <c>Point</c>.
            </param>
            <param name="point3">
              Third <c>Point</c>.
            </param>
            <param name="point4">
              Fourth <c>Point</c>.
            </param>
            <param name="toClose">
              Indicator should the quadrilateral be closed by the line.
            </param>
        </member>
        <member name="M:Alt.GUI.PieChart.Quadrilateral.Finalize">
            <summary>
              <c>Finalize</c> method.
            </summary>
        </member>
        <member name="M:Alt.GUI.PieChart.Quadrilateral.Dispose">
            <summary>
              Implementation of <c>IDisposable</c> interface.
            </summary>
        </member>
        <member name="M:Alt.GUI.PieChart.Quadrilateral.Dispose(System.Boolean)">
            <summary>
              Disposes of all pie slices.
            </summary>
        </member>
        <member name="M:Alt.GUI.PieChart.Quadrilateral.Draw(Alt.Sketch.Graphics,Alt.Sketch.Pen,Alt.Sketch.Brush)">
            <summary>
              Draws the <c>Quadrilateral</c> with <c>Graphics</c> provided.
            </summary>
            <param name="graphics">
              <c>Graphics</c> used to draw.
            </param>
            <param name="pen">
              <c>Pen</c> used to draw outline.
            </param>
            <param name="brush">
              <c>Brush</c> used to fill the inside. 
            </param>
        </member>
        <member name="M:Alt.GUI.PieChart.Quadrilateral.Contains(Alt.Sketch.Point)">
            <summary>
              Checks if the given <c>Point</c> is contained within the 
              quadrilateral.
            </summary>
            <param name="point">
              <c>Point</c> structure to check for.
            </param>
            <returns>
              <c>true</c> if the point is contained within the quadrilateral.
            </returns>
        </member>
        <member name="M:Alt.GUI.PieChart.Quadrilateral.Contains(Alt.Sketch.Point,Alt.Sketch.Point[])">
            <summary>
              Checks if given <c>Point</c> is contained within quadrilateral
              defined by <c>cornerPoints</c> provided.
            </summary>
            <param name="point">
              <c>Point</c> to check.
            </param>
            <param name="cornerPoints">
              Array of <c>Point</c> structures defining corners of the
              quadrilateral.
            </param>
            <returns>
              <c>true</c> if the point is contained within the quadrilateral.
            </returns>
        </member>
        <member name="M:Alt.GUI.PieChart.Quadrilateral.DoesIntersect(Alt.Sketch.Point,Alt.Sketch.Point,Alt.Sketch.Point)">
            <summary>
              Checks if the line coming out of the <c>point</c> downwards 
              intersects with a line through <c>point1</c> and <c>point2</c>.
            </summary>
            <param name="point">
              <c>Point</c> from which vertical line is drawn downwards.
            </param>
            <param name="point1">
              First <c>Point</c> through which line is drawn.
            </param>
            <param name="point2">
              Second <c>Point</c> through which line is drawn.
            </param>
            <returns>
              <c>true</c> if lines intersect.
            </returns>
        </member>
        <member name="F:Alt.GUI.PieChart.Quadrilateral.m_path">
            <summary>
              <c>GraphicsPath</c> representing the quadrilateral.
            </summary>
        </member>
        <member name="T:Alt.GUI.PieChart.ShadowStyle">
            <summary>
              Enumeration for different shadow styles
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.ShadowStyle.NoShadow">
            <summary>
              No shadow. Sides are drawn in the same color as the top od the 
              pie.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.ShadowStyle.UniformShadow">
            <summary>
              Uniform shadow. Sides are drawn somewhat darker.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.ShadowStyle.GradualShadow">
            <summary>
              Gradual shadow is used to fully simulate 3-D shadow.
            </summary>
        </member>
        <member name="T:Alt.GUI.PieChart.EdgeColorType">
            <summary>
              Enumeration for edge color types.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.EdgeColorType.NoEdge">
            <summary>
              Edges are not drawn at all.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.EdgeColorType.SystemColor">
            <summary>
              System (window text) color is used to draw edges.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.EdgeColorType.SurfaceColor">
            <summary>
              Surface color is used for edges.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.EdgeColorType.DarkerThanSurface">
            <summary>
              A color that is little darker than surface color is used for
              edges.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.EdgeColorType.DarkerDarkerThanSurface">
            <summary>
              A color that is significantly darker than surface color is used 
              for edges.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.EdgeColorType.LighterThanSurface">
            <summary>
              A color that is little lighter than surface color is used for
              edges.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.EdgeColorType.LighterLighterThanSurface">
            <summary>
              A color that is significantly lighter than surface color is used 
              for edges.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.EdgeColorType.Contrast">
            <summary>
              Contrast color is used for edges.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.EdgeColorType.EnhancedContrast">
            <summary>
              Enhanced contrast color is used for edges.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.EdgeColorType.FullContrast">
            <summary>
              Black color is used for light surfaces and white for dark 
              surfaces.
            </summary>
        </member>
        <member name="T:Alt.GUI.PieChart.EdgeColor">
            <summary>
              Structure representing edge color used for rendering.
            </summary>
        </member>
        <member name="M:Alt.GUI.PieChart.EdgeColor.GetRenderingColor(Alt.GUI.PieChart.EdgeColorType,Alt.Sketch.Color)">
            <summary>
              Gets the actual color used for rendering.
            </summary>
        </member>
        <member name="T:Alt.GUI.PieChart.ColorUtil">
            <summary>
              Color utility structure.
            </summary>
        </member>
        <member name="M:Alt.GUI.PieChart.ColorUtil.CreateColorWithCorrectedLightness(Alt.Sketch.Color,System.Double)">
            <summary>
              Creates color with corrected lightness.
            </summary>
            <param name="color">
              Color to correct.
            </param>
            <param name="correctionFactor">
              Correction factor, with a value between -1 and 1. Negative values
              create darker color, positive values lighter color. Zero value
              returns the current color.
            </param>
            <returns>
              Corrected <c>Color</c> structure.
            </returns>
        </member>
        <member name="F:Alt.GUI.PieChart.ColorUtil.BrightnessEnhancementFactor1">
            <summary>
              Small brightness change factor.
            </summary>
        </member>
        <member name="F:Alt.GUI.PieChart.ColorUtil.BrightnessEnhancementFactor2">
            <summary>
              Large brightness change factor.
            </summary>
        </member>
    </members>
</doc>
