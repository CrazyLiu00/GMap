<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Alt.GUI.Ext.LGPL</name>
    </assembly>
    <members>
        <member name="T:Alt.GUI.AForge.Temporary.Gwen.Chart">
            <summary>
            Chart control.
            </summary>
            
            <remarks><para>The chart control allows to display multiple charts at time
            of different types: dots, lines, connected dots.</para>
            
            <para>Sample usage:</para>
            <code>
            // create data series array
            double[,] testValues = new double[10, 2];
            // fill data series
            for ( int i = 0; i &lt; 10; i++ )
            {
                testValues[i, 0] = i; // X values
                testValues[i, 1] = Math.Sin( i / 18.0 * Math.PI ); // Y values
            }
            // add new data series to the chart
            chart.AddDataSeries( "Test", Color.DarkGreen, Chart.SeriesType.ConnectedDots, 3 );
            // set X range to display
            chart.RangeX = new AForge.Range( 0, 9 );
            // update the chart
            chart.UpdateDataSeries( "Test", testValues );
            </code>
            </remarks>
            
        </member>
        <member name="M:Alt.GUI.AForge.Temporary.Gwen.Chart.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.AForge.Temporary.Gwen.Chart"/> class.
            </summary>
            
        </member>
        <member name="M:Alt.GUI.AForge.Temporary.Gwen.Chart.Dispose">
            <summary>
            Dispose the object.
            </summary>
        </member>
        <member name="M:Alt.GUI.AForge.Temporary.Gwen.Chart.AddDataSeries(System.String,Alt.Sketch.Color,Alt.GUI.AForge.Temporary.Gwen.Chart.SeriesType,System.Int32)">
            <summary>
            Add data series to the chart.
            </summary>
            
            <param name="name">Data series name.</param>
            <param name="color">Data series color.</param>
            <param name="type">Data series type.</param>
            <param name="width">Width (depends on the data series type, see remarks).</param>
            
            <remarks><para>Adds new empty data series to the collection of data series. To update this
            series the <see cref="M:Alt.GUI.AForge.Temporary.Gwen.Chart.UpdateDataSeries(System.String,System.Double[0:,0:])"/> method should be used.</para>
            
            <para>The meaning of the width parameter depends on the data series type:
            <list type="bullet">
            <item><b>Line</b> - width of the line;</item>
            <item><b>Dots</b> - size of dots (rectangular dots with specified width and the same height);</item>
            <item><b>Connected dots</b> - size of dots (dots are connected with one pixel width line).</item>
            </list>
            </para>
            </remarks>
            
        </member>
        <member name="M:Alt.GUI.AForge.Temporary.Gwen.Chart.AddDataSeries(System.String,Alt.Sketch.Color,Alt.GUI.AForge.Temporary.Gwen.Chart.SeriesType,System.Int32,System.Boolean)">
            <summary>
            Add data series to the chart.
            </summary>
            
            <param name="name">Data series name.</param>
            <param name="color">Data series color.</param>
            <param name="type">Data series type.</param>
            <param name="width">Width (depends on the data series type, see remarks).</param>
            <param name="updateYRange">Specifies if <see cref="P:Alt.GUI.AForge.Temporary.Gwen.Chart.RangeY"/> should be updated.</param>
            
            <remarks><para>Adds new empty data series to the collection of data series.</para>
            
            <para>The <b>updateYRange</b> parameter specifies if the data series may affect displayable
            Y range. If the value is set to false, then displayable Y range is not updated, but used the
            range, which was specified by user (see <see cref="P:Alt.GUI.AForge.Temporary.Gwen.Chart.RangeY"/> property). In the case if the
            value is set to true, the displayable Y range is recalculated to fully fit the new data
            series.</para>
            </remarks>
            
        </member>
        <member name="M:Alt.GUI.AForge.Temporary.Gwen.Chart.UpdateDataSeries(System.String,System.Double[0:,0:])">
            <summary>
            Update data series on the chart.
            </summary>
            
            <param name="name">Data series name to update.</param>
            <param name="data">Data series values.</param>
            
        </member>
        <member name="M:Alt.GUI.AForge.Temporary.Gwen.Chart.RemoveDataSeries(System.String)">
            <summary>
            Remove data series from the chart.
            </summary>
            
            <param name="name">Data series name to remove.</param>
            
        </member>
        <member name="M:Alt.GUI.AForge.Temporary.Gwen.Chart.RemoveAllDataSeries">
            <summary>
            Remove all data series from the chart.
            </summary>
        </member>
        <member name="M:Alt.GUI.AForge.Temporary.Gwen.Chart.UpdateYRange">
            <summary>
            Update Y range.
            </summary>
        </member>
        <member name="P:Alt.GUI.AForge.Temporary.Gwen.Chart.RangeX">
            <summary>
            Chart's X range.
            </summary>
            
            <remarks><para>The value sets the X range of data to be displayed on the chart.</para></remarks>
            
        </member>
        <member name="P:Alt.GUI.AForge.Temporary.Gwen.Chart.RangeY">
             <summary>
             Chart's Y range.
             </summary>
             
             <remarks>The value sets the Y range of data to be displayed on the chart.</remarks>
            
        </member>
        <member name="T:Alt.GUI.AForge.Temporary.Gwen.Chart.SeriesType">
            <summary>
            Chart series type enumeration.
            </summary>
        </member>
        <member name="F:Alt.GUI.AForge.Temporary.Gwen.Chart.SeriesType.Line">
            <summary>
            Line style.
            </summary>
        </member>
        <member name="F:Alt.GUI.AForge.Temporary.Gwen.Chart.SeriesType.Dots">
            <summary>
            Dots style.
            </summary>
        </member>
        <member name="F:Alt.GUI.AForge.Temporary.Gwen.Chart.SeriesType.ConnectedDots">
            <summary>
            Connected dots style.
            </summary>
        </member>
        <member name="T:Alt.GUI.AForge.Temporary.Gwen.HistogramEventArgs">
            <summary>
            Arguments of histogram events.
            </summary>
        </member>
        <member name="M:Alt.GUI.AForge.Temporary.Gwen.HistogramEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.AForge.Temporary.Gwen.HistogramEventArgs"/> class.
            </summary>
            
            <param name="pos">Histogram's index under mouse pointer.</param>
            
        </member>
        <member name="M:Alt.GUI.AForge.Temporary.Gwen.HistogramEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.AForge.Temporary.Gwen.HistogramEventArgs"/> class.
            </summary>
            
            <param name="min">Min histogram's index in selection.</param>
            <param name="max">Max histogram's index in selection.</param>
            
        </member>
        <member name="P:Alt.GUI.AForge.Temporary.Gwen.HistogramEventArgs.Min">
            <summary>
            Min histogram's index in selection.
            </summary>
        </member>
        <member name="P:Alt.GUI.AForge.Temporary.Gwen.HistogramEventArgs.Max">
            <summary>
            Max histogram's index in selection.
            </summary>
        </member>
        <member name="P:Alt.GUI.AForge.Temporary.Gwen.HistogramEventArgs.Position">
            <summary>
            Histogram's index under mouse pointer.
            </summary>
        </member>
        <member name="T:Alt.GUI.AForge.Temporary.Gwen.HistogramEventHandler">
            <summary>
            Delegate for histogram events handlers.
            </summary>
            
            <param name="sender">Sender object.</param>
            <param name="e">Event arguments.</param>
            
        </member>
        <member name="T:Alt.GUI.AForge.Temporary.Gwen.Histogram">
            <summary>
            Histogram control.
            </summary>
            
            <remarks><para>The control displays histograms represented with integer arrays,
            where each array's element keeps occurrence number of the corresponding element.
            </para>
            
            <para>Sample usage:</para>
            <code>
            // create array with histogram values
            int[] histogramValues = new int[] { 3, 8, 53, 57, 79, 69, ... };
            // set values to histogram control
            histogram.Values = histogramValues;
            </code>
            
            <para><b>Sample control's look:</b></para>
            <img src="img/controls/histogram.jpg" width="324" height="77" />
            </remarks>
            
        </member>
        <member name="M:Alt.GUI.AForge.Temporary.Gwen.Histogram.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.AForge.Temporary.Gwen.Histogram"/> class.
            </summary>
            
        </member>
        <member name="M:Alt.GUI.AForge.Temporary.Gwen.Histogram.Dispose">
            <summary>
            Dispose the object.
            </summary>
            
            <param name="disposing">Indicates if disposing was initiated manually.</param>
            
        </member>
        <member name="M:Alt.GUI.AForge.Temporary.Gwen.Histogram.OnPaint(Alt.GUI.PaintEventArgs)">
            <summary>
            Paint the control.
            </summary>
            
            <param name="pe">Data for Paint event.</param>
            
        </member>
        <member name="P:Alt.GUI.AForge.Temporary.Gwen.Histogram.Color">
            <summary>
            Histogram's color.
            </summary>
            
        </member>
        <member name="P:Alt.GUI.AForge.Temporary.Gwen.Histogram.AllowSelection">
            <summary>
            Allow mouse selection or not.
            </summary>
            
            <remarks>In the case if mouse selection is allowed, the control will
            fire <see cref="E:Alt.GUI.AForge.Temporary.Gwen.Histogram.SelectionChanged"/> and <see cref="E:Alt.GUI.AForge.Temporary.Gwen.Histogram.PositionChanged"/> events
            and provide information about the selection.</remarks>
            
        </member>
        <member name="P:Alt.GUI.AForge.Temporary.Gwen.Histogram.IsLogarithmicView">
            <summary>
            Logarithmic view or not.
            </summary>
            
            <remarks><para>In the case if logarihmic view is selected, then the control
            will display base 10 logarithm of values.</para>
            
            <para>By default the property is set to <b>false</b> - none logarithmic view.</para></remarks>
            
        </member>
        <member name="P:Alt.GUI.AForge.Temporary.Gwen.Histogram.IsVertical">
             <summary>
             Vertical view or not.
             </summary>
            
             <remarks><para>The property determines if histogram should be displayed vertically or
             not (horizontally).</para>
             
             <para>By default the property is set to <b>false</b> - horizontal view.</para></remarks>
            
        </member>
        <member name="P:Alt.GUI.AForge.Temporary.Gwen.Histogram.Values">
            <summary>
            Histogram values.
            </summary>
            
            <remarks>Non-negative histogram values.</remarks>
            
            <exception cref="T:System.ArgumentException">Histogram values should be non-negative.</exception>
            
        </member>
        <member name="E:Alt.GUI.AForge.Temporary.Gwen.Histogram.PositionChanged">
            <summary>
            Mouse position changed event.
            </summary>
            
            <remarks>The event is fired only if the <see cref="P:Alt.GUI.AForge.Temporary.Gwen.Histogram.AllowSelection"/> property is set
            to true. The passed to event handler <see cref="T:Alt.GUI.AForge.Temporary.Gwen.HistogramEventArgs"/> class is initialized
            with <see cref="P:Alt.GUI.AForge.Temporary.Gwen.HistogramEventArgs.Position"/> property only, which is histogram value's
            index pointed by mouse.</remarks>
            
        </member>
        <member name="E:Alt.GUI.AForge.Temporary.Gwen.Histogram.SelectionChanged">
            <summary>
            Mouse selection changed event.
            </summary>
            
            <remarks>The event is fired only if the <see cref="P:Alt.GUI.AForge.Temporary.Gwen.Histogram.AllowSelection"/> property is set
            to true. The passed to event handler <see cref="T:Alt.GUI.AForge.Temporary.Gwen.HistogramEventArgs"/> class is initialized
            with <see cref="P:Alt.GUI.AForge.Temporary.Gwen.HistogramEventArgs.Min"/> and <see cref="P:Alt.GUI.AForge.Temporary.Gwen.HistogramEventArgs.Max"/> properties
            only, which represent selection range - min and max indexes.</remarks>
            
        </member>
        <member name="T:Alt.GUI.AForge.Temporary.Gwen.HuePicker">
            <summary>
            Hue picker control.
            </summary>
            
            <remarks><para>The control allows selecting hue value (or range) from HSL color space. Hue values
            are integer values in the [0, 359] range.</para>
            
            <para>If control's type is set to <see cref="F:Alt.GUI.AForge.Temporary.Gwen.HuePicker.HuePickerType.Value"/>, then it allows selecting single
            hue value and looks like this:<br/>
            <img src="img/controls/hue_picker1.png" width="220" height="220"/>
            </para>
            
            <para>If control's type is set to <see cref="F:Alt.GUI.AForge.Temporary.Gwen.HuePicker.HuePickerType.Range"/>, then it allows selecting range
            of hue values and looks like this:<br/>
            <img src="img/controls/hue_picker2.png" width="220" height="220"/>
            </para>
            </remarks>
        </member>
        <member name="M:Alt.GUI.AForge.Temporary.Gwen.HuePicker.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.AForge.Temporary.Gwen.HuePicker"/> class.
            </summary>
            
        </member>
        <member name="M:Alt.GUI.AForge.Temporary.Gwen.HuePicker.Dispose">
            <summary>
            Dispose the object.
            </summary>
            
            <param name="disposing">Specifies if disposing was invoked by user's code.</param>
        </member>
        <member name="M:Alt.GUI.AForge.Temporary.Gwen.HuePicker.OnPaint(Alt.GUI.PaintEventArgs)">
            <summary>
            Paint the controls.
            </summary>
            
            <param name="pe">Paint event arguments.</param>
            
        </member>
        <member name="E:Alt.GUI.AForge.Temporary.Gwen.HuePicker.ValuesChanged">
            <summary>
            An event, to notify about changes of <see cref="P:Alt.GUI.AForge.Temporary.Gwen.HuePicker.Min"/> or <see cref="P:Alt.GUI.AForge.Temporary.Gwen.HuePicker.Max"/> properties.
            </summary>
            
            <remarks><para>The event is fired after changes of its <see cref="P:Alt.GUI.AForge.Temporary.Gwen.HuePicker.Value"/>, <see cref="P:Alt.GUI.AForge.Temporary.Gwen.HuePicker.Min"/> or
            <see cref="P:Alt.GUI.AForge.Temporary.Gwen.HuePicker.Max"/> properties, which is caused by user dragging the corresponding hue picker's bullets.</para>
            </remarks>
        </member>
        <member name="P:Alt.GUI.AForge.Temporary.Gwen.HuePicker.Value">
            <summary>
            Selected value of the hue picker control in <see cref="F:Alt.GUI.AForge.Temporary.Gwen.HuePicker.HuePickerType.Value"/> mode.
            </summary>
        </member>
        <member name="P:Alt.GUI.AForge.Temporary.Gwen.HuePicker.Min">
            <summary>
            Minimum selected value of the hue picker control in <see cref="F:Alt.GUI.AForge.Temporary.Gwen.HuePicker.HuePickerType.Range"/> mode.
            </summary>
        </member>
        <member name="P:Alt.GUI.AForge.Temporary.Gwen.HuePicker.Max">
            <summary>
            Maximum selected value of the hue picker control in <see cref="F:Alt.GUI.AForge.Temporary.Gwen.HuePicker.HuePickerType.Range"/> mode.
            </summary>
        </member>
        <member name="P:Alt.GUI.AForge.Temporary.Gwen.HuePicker.Type">
            <summary>
            Current type of the hue picker control.
            </summary>
            
            <remarks><para>See <see cref="T:Alt.GUI.AForge.Temporary.Gwen.HuePicker.HuePickerType"/> enumeration for description of the available types.</para></remarks>
            
        </member>
        <member name="T:Alt.GUI.AForge.Temporary.Gwen.HuePicker.HuePickerType">
            <summary>
            Enumeration of hue picker types.
            </summary>
            
            <remarks>
            <para>The <see cref="F:Alt.GUI.AForge.Temporary.Gwen.HuePicker.HuePickerType.Value"/> type provides single bullet to drag, which allows
            selecting single hue value. The value is accessible through <see cref="F:Alt.GUI.AForge.Temporary.Gwen.HuePicker.HuePickerType.Value"/> property.</para>
            
            <para>The <see cref="F:Alt.GUI.AForge.Temporary.Gwen.HuePicker.HuePickerType.Range"/> type provides two bullets to drag, which correspond
            to minimum and maximum values of the hue range. These values are accessible through
            <see cref="P:Alt.GUI.AForge.Temporary.Gwen.HuePicker.Min"/> and <see cref="P:Alt.GUI.AForge.Temporary.Gwen.HuePicker.Max"/> properties.</para>
            </remarks>
        </member>
        <member name="F:Alt.GUI.AForge.Temporary.Gwen.HuePicker.HuePickerType.Value">
            <summary>
            Selecting single hue value.
            </summary>
        </member>
        <member name="F:Alt.GUI.AForge.Temporary.Gwen.HuePicker.HuePickerType.Range">
            <summary>
            Selecting hue values range.
            </summary>
        </member>
        <member name="T:Alt.GUI.AForge.Temporary.Gwen.PictureBox">
            <summary>
            Picture box control for displaying an image.
            </summary>
            
            <remarks><para>This control is inherited from System.Windows.Forms.PictureBox and is
            aimed to resolve one of its issues - inability to display images with high color depth,
            like 16 bpp grayscale, 48 bpp and 64 bpp color images. .NET framework does not handle
            16 bpp grayscale images at all, throwing exception when user tries to display them. Color
            images with 48 bpp and 64 bpp are "kind of" supported, but only maximum of 13 bits for each
            color plane are allowed. Therefore this control is created, which allows to display as
            16 bpp grayscale images, as 48 bpp and 64 bpp color images.</para>
            
            <para><note>To display high color depth images, the control does internal conversion of them
            to lower color depth images - 8 bpp grayscale, 24 bpp and 32 bpp color images respectively. In
            the case source image already has low color depth, it is displayed without any conversions.
            </note></para>
            </remarks>
        </member>
        <member name="P:Alt.GUI.AForge.Temporary.Gwen.PictureBox.Image">
            <summary>
            Gets or sets the image that the PictureBox displays.
            </summary>
            
            <remarks><para>The property is used to set image to be displayed or to get currently
            displayed image.</para>
            
            <para><note>In the case if source image has high color depth, like 16 bpp grayscale image,
            48 bpp or 64 bpp color image, it is converted to lower color depth before displaying -
            to 8 bpp grayscale, 24 bpp or 32 bpp color image respectively.</note></para>
            
            <para><note>During color conversion the original source image is kept unmodified, but internal
            converted copy is created. The property always returns original source image.</note></para>
            </remarks>
            
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Actions.AbstractEditAction">
            <summary>
            To define a new key for the textarea, you must write a class which
            implements this interface.
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Actions.IEditAction">
            <summary>
            To define a new key for the textarea, you must write a class which
            implements this interface.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Actions.IEditAction.Execute(Alt.GUI.ICSharpCode.TextEditor.TextArea)">
            <remarks>
            When the key which is defined per XML is pressed, this method will be launched.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Actions.IEditAction.Keys">
            <value>
            An array of keys on which this edit action occurs.
            </value>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Actions.AbstractEditAction.Execute(Alt.GUI.ICSharpCode.TextEditor.TextArea)">
            <remarks>
            When the key which is defined per XML is pressed, this method will be launched.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Actions.AbstractEditAction.Keys">
            <value>
            An array of keys on which this edit action occurs.
            </value>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Actions.IndentSelection">
            <summary>
            This is a sample editaction plugin, it indents the selected area.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Actions.Tab.Execute(Alt.GUI.ICSharpCode.TextEditor.TextArea)">
            <remarks>
            Executes this edit action
            </remarks>
            <param name="textArea">The <see cref="!:ItextArea"/> which is used for callback purposes</param>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Actions.ShiftTab.Execute(Alt.GUI.ICSharpCode.TextEditor.TextArea)">
            <remarks>
            Executes this edit action
            </remarks>
            <param name="textArea">The <see cref="!:ItextArea"/> which is used for callback purposes</param>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Actions.ToggleComment.Execute(Alt.GUI.ICSharpCode.TextEditor.TextArea)">
            <remarks>
            Executes this edit action
            </remarks>
            <param name="textArea">The <see cref="!:ItextArea"/> which is used for callback purposes</param>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Actions.ToggleLineComment.Execute(Alt.GUI.ICSharpCode.TextEditor.TextArea)">
            <remarks>
            Executes this edit action
            </remarks>
            <param name="textArea">The <see cref="!:ItextArea"/> which is used for callback purposes</param>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Actions.ToggleBlockComment.Execute(Alt.GUI.ICSharpCode.TextEditor.TextArea)">
            <remarks>
            Executes this edit action
            </remarks>
            <param name="textArea">The <see cref="!:ItextArea"/> which is used for callback purposes</param>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Actions.BlockCommentRegion.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            The end offset is the offset where the comment end string starts from.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Actions.Backspace.Execute(Alt.GUI.ICSharpCode.TextEditor.TextArea)">
            <remarks>
            Executes this edit action
            </remarks>
            <param name="textArea">The <see cref="!:ItextArea"/> which is used for callback purposes</param>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Actions.Delete.Execute(Alt.GUI.ICSharpCode.TextEditor.TextArea)">
            <remarks>
            Executes this edit action
            </remarks>
            <param name="textArea">The <see cref="!:ItextArea"/> which is used for callback purposes</param>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Actions.MovePageDown.Execute(Alt.GUI.ICSharpCode.TextEditor.TextArea)">
            <remarks>
            Executes this edit action
            </remarks>
            <param name="textArea">The <see cref="!:ItextArea"/> which is used for callback purposes</param>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Actions.MovePageUp.Execute(Alt.GUI.ICSharpCode.TextEditor.TextArea)">
            <remarks>
            Executes this edit action
            </remarks>
            <param name="textArea">The <see cref="!:ItextArea"/> which is used for callback purposes</param>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Actions.Return.Execute(Alt.GUI.ICSharpCode.TextEditor.TextArea)">
            <remarks>
            Executes this edit action
            </remarks>
            <param name="textArea">The <see cref="T:Alt.GUI.ICSharpCode.TextEditor.TextArea"/> which is used for callback purposes</param>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Actions.ToggleEditMode.Execute(Alt.GUI.ICSharpCode.TextEditor.TextArea)">
            <remarks>
            Executes this edit action
            </remarks>
            <param name="textArea">The <see cref="!:ItextArea"/> which is used for callback purposes</param>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Actions.Undo.Execute(Alt.GUI.ICSharpCode.TextEditor.TextArea)">
            <remarks>
            Executes this edit action
            </remarks>
            <param name="textArea">The <see cref="!:ItextArea"/> which is used for callback purposes</param>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Actions.Redo.Execute(Alt.GUI.ICSharpCode.TextEditor.TextArea)">
            <remarks>
            Executes this edit action
            </remarks>
            <param name="textArea">The <see cref="!:ItextArea"/> which is used for callback purposes</param>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Actions.WordBackspace">
            <summary>
            handles the ctrl-backspace key
            functionality attempts to roughly mimic MS Developer studio
            I will implement this as deleting back to the point that ctrl-leftarrow would
            take you to
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Actions.WordBackspace.Execute(Alt.GUI.ICSharpCode.TextEditor.TextArea)">
            <remarks>
            Executes this edit action
            </remarks>
            <param name="textArea">The <see cref="!:ItextArea"/> which is used for callback purposes</param>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Actions.DeleteWord">
            <summary>
            handles the ctrl-delete key
            functionality attempts to mimic MS Developer studio
            I will implement this as deleting forwardto the point that
            ctrl-leftarrow would take you to
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Actions.DeleteWord.Execute(Alt.GUI.ICSharpCode.TextEditor.TextArea)">
            <remarks>
            Executes this edit action
            </remarks>
            <param name="textArea">The <see cref="!:ItextArea"/> which is used for callback purposes</param>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Document.AbstractSegment">
            <summary>
            This interface is used to describe a span inside a text sequence
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Document.ISegment">
            <summary>
            This interface is used to describe a span inside a text sequence
            </summary>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.ISegment.Offset">
            <value>
            The offset where the span begins
            </value>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.ISegment.Length">
            <value>
            The length of the span
            </value>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Document.Bookmark">
            <summary>
            Description of Bookmark.
            </summary>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.Bookmark.Anchor">
            <summary>
            Gets the TextAnchor used for this bookmark.
            Is null if the bookmark is not connected to a document.
            </summary>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.Bookmark.CanToggle">
            <summary>
            Gets if the bookmark can be toggled off using the 'set/unset bookmark' command.
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Document.BookmarkEventArgs">
            <summary>
            Description of BookmarkEventHandler.
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Document.BookmarkManager">
            <summary>
            This class handles the bookmarks for a buffer
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.BookmarkManager.#ctor(Alt.GUI.ICSharpCode.TextEditor.Document.IDocument,Alt.GUI.ICSharpCode.TextEditor.Document.LineManager)">
            <summary>
            Creates a new instance of <see cref="T:Alt.GUI.ICSharpCode.TextEditor.Document.BookmarkManager"/>
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.BookmarkManager.ToggleMarkAt(Alt.GUI.ICSharpCode.TextEditor.TextLocation)">
            <summary>
            Sets the mark at the line <code>location.Line</code> if it is not set, if the
            line is already marked the mark is cleared.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.BookmarkManager.IsMarked(System.Int32)">
            <returns>
            true, if a mark at mark exists, otherwise false
            </returns>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.BookmarkManager.Clear">
            <remarks>
            Clears all bookmark
            </remarks>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.BookmarkManager.GetFirstMark(System.Predicate{Alt.GUI.ICSharpCode.TextEditor.Document.Bookmark})">
            <value>
            The lowest mark, if no marks exists it returns -1
            </value>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.BookmarkManager.GetLastMark(System.Predicate{Alt.GUI.ICSharpCode.TextEditor.Document.Bookmark})">
            <value>
            The highest mark, if no marks exists it returns -1
            </value>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.BookmarkManager.GetNextMark(System.Int32,System.Predicate{Alt.GUI.ICSharpCode.TextEditor.Document.Bookmark})">
            <remarks>
            returns first mark higher than <code>lineNr</code>
            </remarks>
            <returns>
            returns the next mark > cur, if it not exists it returns FirstMark()
            </returns>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.BookmarkManager.GetPrevMark(System.Int32,System.Predicate{Alt.GUI.ICSharpCode.TextEditor.Document.Bookmark})">
            <remarks>
            returns first mark lower than <code>lineNr</code>
            </remarks>
            <returns>
            returns the next mark lower than cur, if it not exists it returns LastMark()
            </returns>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.BookmarkManager.Marks">
            <value>
            Contains all bookmarks
            </value>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.BookmarkManager.Factory">
            <summary>
            Gets/Sets the bookmark factory used to create bookmarks for "ToggleMarkAt".
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Document.BookmarkManagerMemento">
            <summary>
            This class is used for storing the state of a bookmark manager 
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.BookmarkManagerMemento.CheckMemento(Alt.GUI.ICSharpCode.TextEditor.Document.IDocument)">
            <summary>
            Validates all bookmarks if they're in range of the document.
            (removing all bookmarks &lt; 0 and bookmarks &gt; max. line number
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.BookmarkManagerMemento.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Alt.GUI.ICSharpCode.TextEditor.Document.BookmarkManagerMemento"/>
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.BookmarkManagerMemento.#ctor(Alt.Xml.XmlElement)">
            <summary>
            Creates a new instance of <see cref="T:Alt.GUI.ICSharpCode.TextEditor.Document.BookmarkManagerMemento"/>
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.BookmarkManagerMemento.#ctor(System.Collections.Generic.List{System.Int32})">
            <summary>
            Creates a new instance of <see cref="T:Alt.GUI.ICSharpCode.TextEditor.Document.BookmarkManagerMemento"/>
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.BookmarkManagerMemento.FromXmlElement(Alt.Xml.XmlElement)">
            <summary>
            Converts a xml element to a <see cref="T:Alt.GUI.ICSharpCode.TextEditor.Document.BookmarkManagerMemento"/> object
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.BookmarkManagerMemento.ToXmlElement(Alt.Xml.XmlDocument)">
            <summary>
            Converts this <see cref="T:Alt.GUI.ICSharpCode.TextEditor.Document.BookmarkManagerMemento"/> to a xml element
            </summary>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.BookmarkManagerMemento.Bookmarks">
            <value>
            Contains all bookmarks as int values
            </value>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Document.LineViewerStyle">
            <summary>
            Describes the caret marker
            </summary>
        </member>
        <member name="F:Alt.GUI.ICSharpCode.TextEditor.Document.LineViewerStyle.None">
            <summary>
            No line viewer will be displayed
            </summary>
        </member>
        <member name="F:Alt.GUI.ICSharpCode.TextEditor.Document.LineViewerStyle.FullRow">
            <summary>
            The row in which the caret is will be marked
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Document.IndentStyle">
            <summary>
            Describes the indent style
            </summary>
        </member>
        <member name="F:Alt.GUI.ICSharpCode.TextEditor.Document.IndentStyle.None">
            <summary>
            No indentation occurs
            </summary>
        </member>
        <member name="F:Alt.GUI.ICSharpCode.TextEditor.Document.IndentStyle.Auto">
            <summary>
            The indentation from the line above will be
            taken to indent the curent line
            </summary>
        </member>
        <member name="F:Alt.GUI.ICSharpCode.TextEditor.Document.IndentStyle.Smart">
            <summary>
            Inteligent, context sensitive indentation will occur
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Document.BracketHighlightingStyle">
            <summary>
            Describes the bracket highlighting style
            </summary>
        </member>
        <member name="F:Alt.GUI.ICSharpCode.TextEditor.Document.BracketHighlightingStyle.None">
            <summary>
            Brackets won't be highlighted
            </summary>
        </member>
        <member name="F:Alt.GUI.ICSharpCode.TextEditor.Document.BracketHighlightingStyle.OnBracket">
            <summary>
            Brackets will be highlighted if the caret is on the bracket
            </summary>
        </member>
        <member name="F:Alt.GUI.ICSharpCode.TextEditor.Document.BracketHighlightingStyle.AfterBracket">
            <summary>
            Brackets will be highlighted if the caret is after the bracket
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Document.DocumentSelectionMode">
            <summary>
            Describes the selection mode of the text area
            </summary>
        </member>
        <member name="F:Alt.GUI.ICSharpCode.TextEditor.Document.DocumentSelectionMode.Normal">
            <summary>
            The 'normal' selection mode.
            </summary>
        </member>
        <member name="F:Alt.GUI.ICSharpCode.TextEditor.Document.DocumentSelectionMode.Additive">
            <summary>
            Selections will be added to the current selection or new
            ones will be created (multi-select mode)
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Document.DefaultDocument">
            <summary>
            The default <see cref="T:Alt.GUI.ICSharpCode.TextEditor.Document.IDocument"/> implementation.
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Document.IDocument">
            <summary>
            This interface represents a container which holds a text sequence and
            all necessary information about it. It is used as the base for a text editor.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.IDocument.GetLineNumberForOffset(System.Int32)">
            <remarks>
            Returns a valid line number for the given offset.
            </remarks>
            <param name="offset">
            A offset which points to a character in the line which
            line number is returned.
            </param>
            <returns>
            An int which value is the line number.
            </returns>
            <exception cref="T:System.ArgumentException">If offset points not to a valid position</exception>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.IDocument.GetLineSegmentForOffset(System.Int32)">
            <remarks>
            Returns a <see cref="T:Alt.GUI.ICSharpCode.TextEditor.Document.LineSegment"/> for the given offset.
            </remarks>
            <param name="offset">
            A offset which points to a character in the line which
            is returned.
            </param>
            <returns>
            A <see cref="T:Alt.GUI.ICSharpCode.TextEditor.Document.LineSegment"/> object.
            </returns>
            <exception cref="T:System.ArgumentException">If offset points not to a valid position</exception>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.IDocument.GetLineSegment(System.Int32)">
            <remarks>
            Returns a <see cref="T:Alt.GUI.ICSharpCode.TextEditor.Document.LineSegment"/> for the given line number.
            This function should be used to get a line instead of getting the
            line using the <see cref="!:ArrayList"/>.
            </remarks>
            <param name="lineNumber">
            The line number which is requested.
            </param>
            <returns>
            A <see cref="T:Alt.GUI.ICSharpCode.TextEditor.Document.LineSegment"/> object.
            </returns>
            <exception cref="T:System.ArgumentException">If offset points not to a valid position</exception>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.IDocument.GetFirstLogicalLine(System.Int32)">
            <remarks>
            Get the first logical line for a given visible line.
            example : lineNumber == 100 foldings are in the linetracker
            between 0..1 (2 folded, invisible lines) this method returns 102
            the 'logical' line number
            </remarks>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.IDocument.GetLastLogicalLine(System.Int32)">
            <remarks>
            Get the last logical line for a given visible line.
            example : lineNumber == 100 foldings are in the linetracker
            between 0..1 (2 folded, invisible lines) this method returns 102
            the 'logical' line number
            </remarks>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.IDocument.GetVisibleLine(System.Int32)">
            <remarks>
            Get the visible line for a given logical line.
            example : lineNumber == 100 foldings are in the linetracker
            between 0..1 (2 folded, invisible lines) this method returns 98
            the 'visible' line number
            </remarks>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.IDocument.GetNextVisibleLineAbove(System.Int32,System.Int32)">
            <remarks>
            Get the next visible line after lineNumber
            </remarks>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.IDocument.GetNextVisibleLineBelow(System.Int32,System.Int32)">
            <remarks>
            Get the next visible line below lineNumber
            </remarks>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.IDocument.Insert(System.Int32,System.String)">
            <summary>
            Inserts a string of characters into the sequence.
            </summary>
            <param name="offset">
            offset where to insert the string.
            </param>
            <param name="text">
            text to be inserted.
            </param>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.IDocument.Remove(System.Int32,System.Int32)">
            <summary>
            Removes some portion of the sequence.
            </summary>
            <param name="offset">
            offset of the remove.
            </param>
            <param name="length">
            number of characters to remove.
            </param>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.IDocument.Replace(System.Int32,System.Int32,System.String)">
            <summary>
            Replace some portion of the sequence.
            </summary>
            <param name="offset">
            offset.
            </param>
            <param name="length">
            number of characters to replace.
            </param>
            <param name="text">
            text to be replaced with.
            </param>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.IDocument.GetCharAt(System.Int32)">
            <summary>
            Returns a specific char of the sequence.
            </summary>
            <param name="offset">
            Offset of the char to get.
            </param>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.IDocument.GetText(System.Int32,System.Int32)">
            <summary>
            Fetches a string of characters contained in the sequence.
            </summary>
            <param name="offset">
            Offset into the sequence to fetch
            </param>
            <param name="length">
            number of characters to copy.
            </param>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.IDocument.OffsetToPosition(System.Int32)">
            <summary>
            returns the logical line/column position from an offset
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.IDocument.PositionToOffset(Alt.GUI.ICSharpCode.TextEditor.TextLocation)">
            <summary>
            returns the offset from a logical line/column position
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.IDocument.RequestUpdate(Alt.GUI.ICSharpCode.TextEditor.TextAreaUpdate)">
            <remarks>
            Requests an update of the textarea
            </remarks>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.IDocument.CommitUpdate">
            <remarks>
            Commits all updates in the queue to the textarea (the
            textarea will be painted)
            </remarks>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.IDocument.UpdateSegmentListOnDocumentChange``1(System.Collections.Generic.List{``0},Alt.GUI.ICSharpCode.TextEditor.Document.DocumentEventArgs)">
            <summary>
            Moves, Resizes, Removes a list of segments on insert/remove/replace events.
            </summary>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.IDocument.ReadOnly">
            <value>
            If true the document can't be altered
            </value>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.IDocument.FormattingStrategy">
            <summary>
            The <see cref="T:Alt.GUI.ICSharpCode.TextEditor.Document.IFormattingStrategy"/> attached to the <see cref="T:Alt.GUI.ICSharpCode.TextEditor.Document.IDocument"/> instance
            </summary>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.IDocument.TextBufferStrategy">
            <summary>
            The <see cref="T:Alt.GUI.ICSharpCode.TextEditor.Document.ITextBufferStrategy"/> attached to the <see cref="T:Alt.GUI.ICSharpCode.TextEditor.Document.IDocument"/> instance
            </summary>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.IDocument.FoldingManager">
            <summary>
            The <see cref="P:Alt.GUI.ICSharpCode.TextEditor.Document.IDocument.FoldingManager"/> attached to the <see cref="T:Alt.GUI.ICSharpCode.TextEditor.Document.IDocument"/> instance
            </summary>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.IDocument.HighlightingStrategy">
            <summary>
            The <see cref="T:Alt.GUI.ICSharpCode.TextEditor.Document.IHighlightingStrategy"/> attached to the <see cref="T:Alt.GUI.ICSharpCode.TextEditor.Document.IDocument"/> instance
            </summary>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.IDocument.BookmarkManager">
            <summary>
            The <see cref="!:IBookMarkManager"/> attached to the <see cref="T:Alt.GUI.ICSharpCode.TextEditor.Document.IDocument"/> instance
            </summary>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.IDocument.LineSegmentCollection">
            <value>
            A collection of all line segments
            </value>
            <remarks>
            The collection should only be used if you're aware
            of the 'last line ends with a delimiter problem'. Otherwise
            the <see cref="M:Alt.GUI.ICSharpCode.TextEditor.Document.IDocument.GetLineSegment(System.Int32)"/> method should be used.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.IDocument.TotalNumberOfLines">
            <value>
            The total number of lines in the document.
            </value>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.IDocument.TextContent">
            <value>
            Get the whole text as string.
            When setting the text using the TextContent property, the undo stack is cleared.
            Set TextContent only for actions such as loading a file; if you want to change the current document
            use the Replace method instead.
            </value>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.IDocument.TextLength">
            <value>
            The current length of the sequence of characters that can be edited.
            </value>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.IDocument.UpdateQueue">
            <value>
            A container where all TextAreaUpdate objects get stored
            </value>
        </member>
        <member name="E:Alt.GUI.ICSharpCode.TextEditor.Document.IDocument.UpdateCommited">
            <summary>
            Is fired when CommitUpdate is called
            </summary>
        </member>
        <member name="E:Alt.GUI.ICSharpCode.TextEditor.Document.IDocument.DocumentAboutToBeChanged">
            <summary>
            </summary>
        </member>
        <member name="E:Alt.GUI.ICSharpCode.TextEditor.Document.IDocument.DocumentChanged">
            <summary>
            </summary>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.ITextEditorProperties.TabIndent">
            <summary>
            The width of a tab.
            </summary>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.ITextEditorProperties.IndentationSize">
            <summary>
            The amount of spaces a tab is converted to if ConvertTabsToSpaces is true.
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Document.DocumentEventHandler">
            <summary>
            This delegate is used for document events.
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Document.DocumentEventArgs">
            <summary>
            This class contains more information on a document event
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.DocumentEventArgs.#ctor(Alt.GUI.ICSharpCode.TextEditor.Document.IDocument)">
            <summary>
            Creates a new instance off <see cref="T:Alt.GUI.ICSharpCode.TextEditor.Document.DocumentEventArgs"/>
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.DocumentEventArgs.#ctor(Alt.GUI.ICSharpCode.TextEditor.Document.IDocument,System.Int32)">
            <summary>
            Creates a new instance off <see cref="T:Alt.GUI.ICSharpCode.TextEditor.Document.DocumentEventArgs"/>
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.DocumentEventArgs.#ctor(Alt.GUI.ICSharpCode.TextEditor.Document.IDocument,System.Int32,System.Int32)">
            <summary>
            Creates a new instance off <see cref="T:Alt.GUI.ICSharpCode.TextEditor.Document.DocumentEventArgs"/>
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.DocumentEventArgs.#ctor(Alt.GUI.ICSharpCode.TextEditor.Document.IDocument,System.Int32,System.Int32,System.String)">
            <summary>
            Creates a new instance off <see cref="T:Alt.GUI.ICSharpCode.TextEditor.Document.DocumentEventArgs"/>
            </summary>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.DocumentEventArgs.Document">
            <returns>
            always a valid Document which is related to the Event.
            </returns>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.DocumentEventArgs.Offset">
            <returns>
            -1 if no offset was specified for this event
            </returns>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.DocumentEventArgs.Text">
            <returns>
            null if no text was specified for this event
            </returns>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.DocumentEventArgs.Length">
            <returns>
            -1 if no length was specified for this event
            </returns>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Document.DocumentFactory">
            <summary>
            This interface represents a container which holds a text sequence and
            all necessary information about it. It is used as the base for a text editor.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.DocumentFactory.CreateDocument">
            <remarks>
            Creates a new <see cref="T:Alt.GUI.ICSharpCode.TextEditor.Document.IDocument"/> object. Only create
            <see cref="T:Alt.GUI.ICSharpCode.TextEditor.Document.IDocument"/> with this method.
            </remarks>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.DocumentFactory.CreateFromTextBuffer(Alt.GUI.ICSharpCode.TextEditor.Document.ITextBufferStrategy)">
            <summary>
            Creates a new document and loads the given file
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.DocumentFactory.CreateFromFile(System.String)">
            <summary>
            Creates a new document and loads the given file
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Document.IFoldingStrategy">
            <summary>
            This interface is used for the folding capabilities
            of the textarea.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.IFoldingStrategy.GenerateFoldMarkers(Alt.GUI.ICSharpCode.TextEditor.Document.IDocument,System.String,System.Object)">
            <remarks>
            Calculates the fold level of a specific line.
            </remarks>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Document.IndentFoldingStrategy">
            <summary>
            A simple folding strategy which calculates the folding level
            using the indent level of the line.
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Document.DefaultFormattingStrategy">
            <summary>
            This class handles the auto and smart indenting in the textbuffer while
            you type.
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Document.IFormattingStrategy">
            <summary>
            This interface handles the auto and smart indenting and formating
            in the document while  you type. Language bindings could overwrite this 
            interface and define their own indentation/formating.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.IFormattingStrategy.FormatLine(Alt.GUI.ICSharpCode.TextEditor.TextArea,System.Int32,System.Int32,System.Char)">
            <summary>
            This function formats a specific line after <code>ch</code> is pressed.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.IFormattingStrategy.IndentLine(Alt.GUI.ICSharpCode.TextEditor.TextArea,System.Int32)">
            <summary>
            This function sets the indentation level in a specific line
            </summary>
            <returns>
            The target caret position (length of new indentation).
            </returns>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.IFormattingStrategy.IndentLines(Alt.GUI.ICSharpCode.TextEditor.TextArea,System.Int32,System.Int32)">
            <summary>
            This function sets the indentlevel in a range of lines.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.IFormattingStrategy.SearchBracketBackward(Alt.GUI.ICSharpCode.TextEditor.Document.IDocument,System.Int32,System.Char,System.Char)">
            <summary>
            Finds the offset of the opening bracket in the block defined by offset skipping
            brackets in strings and comments.
            </summary>
            <param name="document">The document to search in.</param>
            <param name="offset">The offset of an position in the block or the offset of the closing bracket.</param>
            <param name="openBracket">The character for the opening bracket.</param>
            <param name="closingBracket">The character for the closing bracket.</param>
            <returns>Returns the offset of the opening bracket or -1 if no matching bracket was found.</returns>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.IFormattingStrategy.SearchBracketForward(Alt.GUI.ICSharpCode.TextEditor.Document.IDocument,System.Int32,System.Char,System.Char)">
            <summary>
            Finds the offset of the closing bracket in the block defined by offset skipping
            brackets in strings and comments.
            </summary>
            <param name="document">The document to search in.</param>
            <param name="offset">The offset of an position in the block or the offset of the opening bracket.</param>
            <param name="openBracket">The character for the opening bracket.</param>
            <param name="closingBracket">The character for the closing bracket.</param>
            <returns>Returns the offset of the closing bracket or -1 if no matching bracket was found.</returns>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.DefaultFormattingStrategy.#ctor">
            <summary>
            Creates a new instance off <see cref="T:Alt.GUI.ICSharpCode.TextEditor.Document.DefaultFormattingStrategy"/>
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.DefaultFormattingStrategy.GetIndentation(Alt.GUI.ICSharpCode.TextEditor.TextArea,System.Int32)">
            <summary>
            returns the whitespaces which are before a non white space character in the line line
            as a string.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.DefaultFormattingStrategy.AutoIndentLine(Alt.GUI.ICSharpCode.TextEditor.TextArea,System.Int32)">
            <summary>
            Could be overwritten to define more complex indenting.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.DefaultFormattingStrategy.SmartReplaceLine(Alt.GUI.ICSharpCode.TextEditor.Document.IDocument,Alt.GUI.ICSharpCode.TextEditor.Document.LineSegment,System.String)">
            <summary>
            Replaces the text in a line.
            If only whitespace at the beginning and end of the line was changed, this method
            only adjusts the whitespace and doesn't replace the other text.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.DefaultFormattingStrategy.SmartIndentLine(Alt.GUI.ICSharpCode.TextEditor.TextArea,System.Int32)">
            <summary>
            Could be overwritten to define more complex indenting.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.DefaultFormattingStrategy.FormatLine(Alt.GUI.ICSharpCode.TextEditor.TextArea,System.Int32,System.Int32,System.Char)">
            <summary>
            This function formats a specific line after <code>ch</code> is pressed.
            </summary>
            <returns>
            the caret delta position the caret will be moved this number
            of bytes (e.g. the number of bytes inserted before the caret, or
            removed, if this number is negative)
            </returns>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.DefaultFormattingStrategy.IndentLine(Alt.GUI.ICSharpCode.TextEditor.TextArea,System.Int32)">
            <summary>
            This function sets the indentation level in a specific line
            </summary>
            <returns>
            the number of inserted characters.
            </returns>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.DefaultFormattingStrategy.IndentLines(Alt.GUI.ICSharpCode.TextEditor.TextArea,System.Int32,System.Int32)">
            <summary>
            This function sets the indentlevel in a range of lines.
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Document.IHighlightingStrategy">
            <summary>
            A highlighting strategy for a buffer.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.IHighlightingStrategy.GetColorFor(System.String)">
            <remarks>
            Gets the color of an Environment element.
            </remarks>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.IHighlightingStrategy.MarkTokens(Alt.GUI.ICSharpCode.TextEditor.Document.IDocument,System.Collections.Generic.List{Alt.GUI.ICSharpCode.TextEditor.Document.LineSegment})">
            <remarks>
            Used internally, do not call
            </remarks>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.IHighlightingStrategy.MarkTokens(Alt.GUI.ICSharpCode.TextEditor.Document.IDocument)">
            <remarks>
            Used internally, do not call
            </remarks>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.IHighlightingStrategy.Name">
            <value>
            The name of the highlighting strategy, must be unique
            </value>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.IHighlightingStrategy.Extensions">
            <value>
            The file extenstions on which this highlighting strategy gets
            used
            </value>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.IHighlightingStrategyUsingRuleSets.GetRuleSet(Alt.GUI.ICSharpCode.TextEditor.Document.Span)">
            <remarks>
            Used internally, do not call
            </remarks>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.IHighlightingStrategyUsingRuleSets.GetColor(Alt.GUI.ICSharpCode.TextEditor.Document.IDocument,Alt.GUI.ICSharpCode.TextEditor.Document.LineSegment,System.Int32,System.Int32)">
            <remarks>
            Used internally, do not call
            </remarks>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.DefaultHighlightingStrategy.PushCurWord(Alt.GUI.ICSharpCode.TextEditor.Document.IDocument,Alt.GUI.ICSharpCode.TextEditor.Document.HighlightColor@,System.Collections.Generic.List{Alt.GUI.ICSharpCode.TextEditor.Document.TextWord})">
            <summary>
            pushes the curWord string on the word list, with the
            correct color.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.DefaultHighlightingStrategy.GetRegString(Alt.GUI.ICSharpCode.TextEditor.Document.LineSegment,System.Char[],System.Int32,Alt.GUI.ICSharpCode.TextEditor.Document.IDocument)">
            <summary>
            get the string, which matches the regular expression expr,
            in string s2 at index
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.DefaultHighlightingStrategy.MatchExpr(Alt.GUI.ICSharpCode.TextEditor.Document.LineSegment,System.Char[],System.Int32,Alt.GUI.ICSharpCode.TextEditor.Document.IDocument,System.Boolean)">
            <summary>
            returns true, if the get the string s2 at index matches the expression expr
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Document.FontContainer">
            <summary>
            This class is used to generate bold, italic and bold/italic fonts out
            of a base font.
            </summary>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.FontContainer.RegularFont">
            <value>
            The scaled, regular version of the base font
            </value>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.FontContainer.BoldFont">
            <value>
            The scaled, bold version of the base font
            </value>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.FontContainer.ItalicFont">
            <value>
            The scaled, italic version of the base font
            </value>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.FontContainer.BoldItalicFont">
            <value>
            The scaled, bold/italic version of the base font
            </value>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.FontContainer.DefaultFont">
            <value>
            The base font
            </value>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Document.HighlightBackground">
            <summary>
            Extens the highlighting color with a background image.
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Document.HighlightColor">
            <summary>
            A color used for highlighting
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.HighlightColor.GetFont(Alt.GUI.ICSharpCode.TextEditor.Document.FontContainer)">
            <value>
            The font used
            </value>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.HighlightColor.#ctor(Alt.Xml.XmlElement)">
            <summary>
            Creates a new instance of <see cref="T:Alt.GUI.ICSharpCode.TextEditor.Document.HighlightColor"/>
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.HighlightColor.#ctor(Alt.Xml.XmlElement,Alt.GUI.ICSharpCode.TextEditor.Document.HighlightColor)">
            <summary>
            Creates a new instance of <see cref="T:Alt.GUI.ICSharpCode.TextEditor.Document.HighlightColor"/>
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.HighlightColor.#ctor(Alt.Sketch.Color,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:Alt.GUI.ICSharpCode.TextEditor.Document.HighlightColor"/>
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.HighlightColor.#ctor(Alt.Sketch.Color,Alt.Sketch.Color,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:Alt.GUI.ICSharpCode.TextEditor.Document.HighlightColor"/>
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.HighlightColor.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:Alt.GUI.ICSharpCode.TextEditor.Document.HighlightColor"/>
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.HighlightColor.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:Alt.GUI.ICSharpCode.TextEditor.Document.HighlightColor"/>
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.HighlightColor.ToString">
            <summary>
            Converts a <see cref="T:Alt.GUI.ICSharpCode.TextEditor.Document.HighlightColor"/> instance to string (for debug purposes)
            </summary>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.HighlightColor.Bold">
            <value>
            If true the font will be displayed bold style
            </value>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.HighlightColor.Italic">
            <value>
            If true the font will be displayed italic style
            </value>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.HighlightColor.BackgroundColor">
            <value>
            The background color used
            </value>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.HighlightColor.Color">
            <value>
            The foreground color used
            </value>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.HighlightBackground.#ctor(Alt.Xml.XmlElement)">
            <summary>
            Creates a new instance of <see cref="T:Alt.GUI.ICSharpCode.TextEditor.Document.HighlightBackground"/>
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.HighlightBackground.#ctor(Alt.Sketch.Color,Alt.Sketch.Color,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:Alt.GUI.ICSharpCode.TextEditor.Document.HighlightBackground"/>
            </summary>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.HighlightBackground.BackgroundImage">
            <value>
            The image used as background
            </value>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Document.HighlightingDefinitionInvalidException">
            <summary>
            Indicates that the highlighting definition that was tried to load was invalid.
            You get this exception only once per highlighting definition, after that the definition
            is replaced with the default highlighter.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.HighlightRuleSet.MergeFrom(Alt.GUI.ICSharpCode.TextEditor.Document.HighlightRuleSet)">
            <summary>
            Merges spans etc. from the other rule set into this rule set.
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Document.NextMarker">
            <summary>
            Used for mark next token
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.NextMarker.#ctor(Alt.Xml.XmlElement)">
            <summary>
            Creates a new instance of <see cref="T:Alt.GUI.ICSharpCode.TextEditor.Document.NextMarker"/>
            </summary>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.NextMarker.What">
            <value>
            String value to indicate to mark next token
            </value>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.NextMarker.Color">
            <value>
            Color for marking next token
            </value>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.NextMarker.MarkMarker">
            <value>
            If true the indication text will be marked with the same color
            too
            </value>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Document.PrevMarker">
            <summary>
            Used for mark previous token
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.PrevMarker.#ctor(Alt.Xml.XmlElement)">
            <summary>
            Creates a new instance of <see cref="T:Alt.GUI.ICSharpCode.TextEditor.Document.PrevMarker"/>
            </summary>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.PrevMarker.What">
            <value>
            String value to indicate to mark previous token
            </value>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.PrevMarker.Color">
            <value>
            Color for marking previous token
            </value>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.PrevMarker.MarkMarker">
            <value>
            If true the indication text will be marked with the same color
            too
            </value>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.Span.EscapeCharacter">
            <summary>
            Gets the escape character of the span. The escape character is a character that can be used in front
            of the span end to make it not end the span. The escape character followed by another escape character
            means the escape character was escaped like in @"a "" b" literals in C#.
            The default value '\0' means no escape character is allowed.
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Document.SpanStack">
            <summary>
            A stack of Span instances. Works like Stack&lt;Span&gt;, but can be cloned quickly
            because it is implemented as linked list.
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Document.TextWord">
            <summary>
            This class represents single words with color information, two special versions of a word are
            spaces and tabs.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.TextWord.Split(Alt.GUI.ICSharpCode.TextEditor.Document.TextWord@,System.Int32)">
            <summary>
            Splits the <paramref name="word"/> into two parts: the part before <paramref name="pos"/> is assigned to
            the reference parameter <paramref name="word"/>, the part after <paramref name="pos"/> is returned.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.TextWord.ToString">
            <summary>
            Converts a <see cref="T:Alt.GUI.ICSharpCode.TextEditor.Document.TextWord"/> instance to string (for debug purposes)
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Document.DeferredEventList">
            <summary>
            A list of events that are fired after the line manager has finished working.
            </summary>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.LineCountChangeEventArgs.Document">
            <returns>
            always a valid Document which is related to the Event.
            </returns>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.LineCountChangeEventArgs.LineStart">
            <returns>
            -1 if no offset was specified for this event
            </returns>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.LineCountChangeEventArgs.LinesMoved">
            <returns>
            -1 if no length was specified for this event
            </returns>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.LineSegment.ToString">
            <summary>
            Converts a <see cref="T:Alt.GUI.ICSharpCode.TextEditor.Document.LineSegment"/> instance to string (for debug purposes)
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.LineSegment.Deleted(Alt.GUI.ICSharpCode.TextEditor.Document.DeferredEventList@)">
            <summary>
            Is called when the LineSegment is deleted.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.LineSegment.RemovedLinePart(Alt.GUI.ICSharpCode.TextEditor.Document.DeferredEventList@,System.Int32,System.Int32)">
            <summary>
            Is called when a part of the line is removed.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.LineSegment.InsertedLinePart(System.Int32,System.Int32)">
            <summary>
            Is called when a part of the line is inserted.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.LineSegment.MergedWith(Alt.GUI.ICSharpCode.TextEditor.Document.LineSegment,System.Int32)">
            <summary>
            Is called after another line's content is appended to this line because the newline in between
            was deleted.
            The DefaultLineManager will call Deleted() on the deletedLine after the MergedWith call.
            
            firstLineLength: the length of the line before the merge.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.LineSegment.SplitTo(Alt.GUI.ICSharpCode.TextEditor.Document.LineSegment)">
            <summary>
            Is called after a newline was inserted into this line, splitting it into this and followingLine.
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Document.LineSegmentTree">
            <summary>
            Data structure for efficient management of the line segments (most operations are O(lg n)).
            This implements an augmented red-black tree where each node has fields for the number of
            nodes in its subtree (like an order statistics tree) for access by index(=line number).
            Additionally, each node knows the total length of all segments in its subtree.
            This means we can find nodes by offset in O(lg n) time. Since the offset itself is not stored in
            the line segment but computed from the lengths stored in the tree, we adjusting the offsets when
            text is inserted in one line means we just have to increment the totalLength of the affected line and
            its parent nodes - an O(lg n) operation.
            However this means getting the line number or offset from a LineSegment is not a constant time
            operation, but takes O(lg n).
            
            NOTE: The tree is never empty, Clear() causes it to contain an empty segment.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.LineSegmentTree.SetSegmentLength(Alt.GUI.ICSharpCode.TextEditor.Document.LineSegment,System.Int32)">
            <summary>
            Updates the length of a line segment. Runs in O(lg n).
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.LineSegmentTree.IndexOf(Alt.GUI.ICSharpCode.TextEditor.Document.LineSegment)">
            <summary>
            Gets the index of an item. Runs in O(lg n).
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.LineSegmentTree.Clear">
            <summary>
            Clears the list. Runs in O(1).
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.LineSegmentTree.Contains(Alt.GUI.ICSharpCode.TextEditor.Document.LineSegment)">
            <summary>
            Tests whether an item is in the list. Runs in O(n).
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.LineSegmentTree.CopyTo(Alt.GUI.ICSharpCode.TextEditor.Document.LineSegment[],System.Int32)">
            <summary>
            Copies all elements from the list to the array.
            </summary>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.LineSegmentTree.TotalLength">
            <summary>
            Gets the total length of all line segments. Runs in O(1).
            </summary>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.LineSegmentTree.Count">
            <summary>
            Gets the number of items in the collections. Runs in O(1).
            </summary>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.LineSegmentTree.Item(System.Int32)">
            <summary>
            Gets or sets an item by index. Runs in O(lg n).
            </summary>
        </member>
        <member name="F:Alt.GUI.ICSharpCode.TextEditor.Document.LineSegmentTree.Enumerator.Invalid">
            <summary>
            An invalid enumerator value. Calling MoveNext on the invalid enumerator
            will always return false, accessing Current will throw an exception.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.LineSegmentTree.Enumerator.MoveNext">
            <summary>
            Moves to the next index. Runs in O(lg n), but for k calls, the combined time is only O(k+lg n).
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.LineSegmentTree.Enumerator.MoveBack">
            <summary>
            Moves to the previous index. Runs in O(lg n), but for k calls, the combined time is only O(k+lg n).
            </summary>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.LineSegmentTree.Enumerator.Current">
            <summary>
            Gets the current value. Runs in O(1).
            </summary>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.LineSegmentTree.Enumerator.CurrentIndex">
            <summary>
            Gets the index of the current value. Runs in O(lg n).
            </summary>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.LineSegmentTree.Enumerator.CurrentOffset">
            <summary>
            Gets the offset of the current value. Runs in O(lg n).
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Document.MarkerStrategy">
            <summary>
            Manages the list of markers and provides ways to retrieve markers for specific positions.
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Document.TextMarker">
            <summary>
            Marks a part of a document.
            </summary>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.TextMarker.IsReadOnly">
            <summary>
            Marks the text segment as read-only.
            </summary>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.TextMarker.EndOffset">
            <summary>
            Gets the last offset that is inside the marker region.
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Document.DefaultSelection">
            <summary>
            Default implementation of the <see cref="!:Alt.Studio.Libraries.ICSharpCode.TextEditor.Document.ISelection"/> interface.
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Document.ISelection">
            <summary>
            An interface representing a portion of the current selection.
            </summary>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.ISelection.IsRectangularSelection">
            <value>
            Returns true, if the selection is rectangular
            </value>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.ISelection.IsEmpty">
            <value>
            Returns true, if the selection is empty
            </value>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.ISelection.SelectedText">
            <value>
            The text which is selected by this selection.
            </value>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.DefaultSelection.#ctor(Alt.GUI.ICSharpCode.TextEditor.Document.IDocument,Alt.GUI.ICSharpCode.TextEditor.TextLocation,Alt.GUI.ICSharpCode.TextEditor.TextLocation)">
            <summary>
            Creates a new instance of <see cref="T:Alt.GUI.ICSharpCode.TextEditor.Document.DefaultSelection"/>
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.DefaultSelection.ToString">
            <summary>
            Converts a <see cref="T:Alt.GUI.ICSharpCode.TextEditor.Document.DefaultSelection"/> instance to string (for debug purposes)
            </summary>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.DefaultSelection.IsEmpty">
            <value>
            Returns true, if the selection is empty
            </value>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.DefaultSelection.IsRectangularSelection">
            <value>
            Returns true, if the selection is rectangular
            </value>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.DefaultSelection.SelectedText">
            <value>
            The text which is selected by this selection.
            </value>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Document.SelectionManager">
            <summary>
            This class manages the selections in a document.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.SelectionManager.#ctor(Alt.GUI.ICSharpCode.TextEditor.Document.IDocument)">
            <summary>
            Creates a new instance of <see cref="T:Alt.GUI.ICSharpCode.TextEditor.Document.SelectionManager"/>
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.SelectionManager.#ctor(Alt.GUI.ICSharpCode.TextEditor.Document.IDocument,Alt.GUI.ICSharpCode.TextEditor.TextArea)">
            <summary>
            Creates a new instance of <see cref="T:Alt.GUI.ICSharpCode.TextEditor.Document.SelectionManager"/>
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.SelectionManager.SetSelection(Alt.GUI.ICSharpCode.TextEditor.Document.ISelection)">
            <remarks>
            Clears the selection and sets a new selection
            using the given <see cref="T:Alt.GUI.ICSharpCode.TextEditor.Document.ISelection"/> object.
            </remarks>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.SelectionManager.ClearSelection">
            <remarks>
            Clears the selection.
            </remarks>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.SelectionManager.RemoveSelectedText">
            <remarks>
            Removes the selected text from the buffer and clears
            the selection.
            </remarks>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.SelectionManager.IsSelected(System.Int32)">
            <remarks>
            Returns true if the given offset points to a section which is
            selected.
            </remarks>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.SelectionManager.GetSelectionAt(System.Int32)">
            <remarks>
            Returns a <see cref="T:Alt.GUI.ICSharpCode.TextEditor.Document.ISelection"/> object giving the selection in which
            the offset points to.
            </remarks>
            <returns>
            <code>null</code> if the offset doesn't point to a selection
            </returns>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.SelectionManager.Insert(System.Int32,System.String)">
            <remarks>
            Used internally, do not call.
            </remarks>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.SelectionManager.Remove(System.Int32,System.Int32)">
            <remarks>
            Used internally, do not call.
            </remarks>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.SelectionManager.Replace(System.Int32,System.Int32,System.String)">
            <remarks>
            Used internally, do not call.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.SelectionManager.SelectionCollection">
            <value>
            A collection containing all selections.
            </value>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.SelectionManager.HasSomethingSelected">
            <value>
            true if the <see cref="P:Alt.GUI.ICSharpCode.TextEditor.Document.SelectionManager.SelectionCollection"/> is not empty, false otherwise.
            </value>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.SelectionManager.SelectedText">
            <value>
            The text that is currently selected.
            </value>
        </member>
        <member name="F:Alt.GUI.ICSharpCode.TextEditor.Document.AnchorMovementType.BeforeInsertion">
            <summary>
            Behaves like a start marker - when text is inserted at the anchor position, the anchor will stay
            before the inserted text.
            </summary>
        </member>
        <member name="F:Alt.GUI.ICSharpCode.TextEditor.Document.AnchorMovementType.AfterInsertion">
            <summary>
            Behave like an end marker - when text is insered at the anchor position, the anchor will move
            after the inserted text.
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Document.TextAnchor">
            <summary>
            An anchor that can be put into a document and moves around when the document is changed.
            </summary>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.TextAnchor.MovementType">
            <summary>
            Controls how the anchor moves.
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Document.ITextBufferStrategy">
            <summary>
            Interface to describe a sequence of characters that can be edited. 	
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.ITextBufferStrategy.Insert(System.Int32,System.String)">
            <summary>
            Inserts a string of characters into the sequence.
            </summary>
            <param name="offset">
            offset where to insert the string.
            </param>
            <param name="text">
            text to be inserted.
            </param>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.ITextBufferStrategy.Remove(System.Int32,System.Int32)">
            <summary>
            Removes some portion of the sequence.
            </summary>
            <param name="offset">
            offset of the remove.
            </param>
            <param name="length">
            number of characters to remove.
            </param>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.ITextBufferStrategy.Replace(System.Int32,System.Int32,System.String)">
            <summary>
            Replace some portion of the sequence.
            </summary>
            <param name="offset">
            offset.
            </param>
            <param name="length">
            number of characters to replace.
            </param>
            <param name="text">
            text to be replaced with.
            </param>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.ITextBufferStrategy.GetText(System.Int32,System.Int32)">
            <summary>
            Fetches a string of characters contained in the sequence.
            </summary>
            <param name="offset">
            Offset into the sequence to fetch
            </param>
            <param name="length">
            number of characters to copy.
            </param>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.ITextBufferStrategy.GetCharAt(System.Int32)">
            <summary>
            Returns a specific char of the sequence.
            </summary>
            <param name="offset">
            Offset of the char to get.
            </param>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.ITextBufferStrategy.SetContent(System.String)">
            <summary>
            This method sets the stored content.
            </summary>
            <param name="text">
            The string that represents the character sequence.
            </param>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Document.ITextBufferStrategy.Length">
            <value>
            The current length of the sequence of characters that can be edited.
            </value>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Document.StringTextBufferStrategy">
            <summary>
            Simple implementation of the ITextBuffer interface implemented using a
            string.
            Only for fall-back purposes.
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.TextLocation">
            <summary>
            A line/column position.
            Text editor lines/columns are counting from zero.
            </summary>
        </member>
        <member name="F:Alt.GUI.ICSharpCode.TextEditor.TextLocation.Empty">
            <summary>
            Represents no text location (-1, -1).
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.TextUtilities.LeadingWhiteSpaceToTabs(System.String,System.Int32)">
            <remarks>
            This function takes a string and converts the whitespace in front of
            it to tabs. If the length of the whitespace at the start of the string
            was not a whole number of tabs then there will still be some spaces just
            before the text starts.
            the output string will be of the form:
            1. zero or more tabs
            2. zero or more spaces (less than tabIndent)
            3. the rest of the line
            </remarks>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.TextUtilities.GetExpressionBeforeOffset(Alt.GUI.ICSharpCode.TextEditor.TextArea,System.Int32)">
            <remarks>
            This method returns the expression before a specified offset.
            That method is used in code completion to determine the expression given
            to the parser for type resolve.
            </remarks>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.TextUtilities.IsEmptyLine(Alt.GUI.ICSharpCode.TextEditor.Document.IDocument,System.Int32)">
            <remarks>
            Returns true, if the line lineNumber is empty or filled with whitespaces.
            </remarks>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Document.TextUtilities.IsEmptyLine(Alt.GUI.ICSharpCode.TextEditor.Document.IDocument,Alt.GUI.ICSharpCode.TextEditor.Document.LineSegment)">
            <remarks>
            Returns true, if the line lineNumber is empty or filled with whitespaces.
            </remarks>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.AbstractMargin">
            <summary>
            This class views the line numbers and folding markers.
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.BrushRegistry">
            <summary>
            Contains brushes/pens for the text editor to speed up drawing. Re-Creation of brushes and pens
            seems too costly.
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.CaretMode">
            <summary>
            In this enumeration are all caret modes listed.
            </summary>
        </member>
        <member name="F:Alt.GUI.ICSharpCode.TextEditor.CaretMode.InsertMode">
            <summary>
            If the caret is in insert mode typed characters will be
            inserted at the caret position
            </summary>
        </member>
        <member name="F:Alt.GUI.ICSharpCode.TextEditor.CaretMode.OverwriteMode">
            <summary>
            If the caret is in overwirte mode typed characters will
            overwrite the character at the caret position
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Caret.ValidateCaretPos">
            <remarks>
            If the caret position is outside the document text bounds
            it is set to the correct position by calling ValidateCaretPos.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Caret.DesiredColumn">
            <value>
            The 'prefered' xPos in which the caret moves, when it is moved
            up/down. Measured in pixels, not in characters!
            </value>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Caret.CaretMode">
            <value>
            The current caret mode.
            </value>
        </member>
        <member name="E:Alt.GUI.ICSharpCode.TextEditor.Caret.PositionChanged">
            <remarks>
            Is called each time the caret is moved.
            </remarks>
        </member>
        <member name="E:Alt.GUI.ICSharpCode.TextEditor.Caret.CaretModeChanged">
            <remarks>
            Is called each time the CaretMode has changed.
            </remarks>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Gui.CompletionWindow.AbstractCompletionWindow">
            <summary>
            Description of AbstractCompletionWindow.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Gui.CompletionWindow.AbstractCompletionWindow.AddShadowToWindow(Alt.GUI.CreateParams)">
            <summary>
            Adds a shadow to the create params if it is supported by the operating system.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Gui.CompletionWindow.AbstractCompletionWindow.ControlMouseMove(System.Object,Alt.GUI.MouseEventArgs)">
            <summary>
            Invoked when the mouse moves over this form or any child control.
            Shows the mouse cursor on the text area if it has been hidden.
            </summary>
            <remarks>
            Derived classes should attach this handler to the MouseMove event
            of all created controls which are not added to the Controls
            collection.
            </remarks>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Gui.CompletionWindow.CodeCompletionListView">
            <summary>
            Description of CodeCompletionListView.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Gui.CompletionWindow.CodeCompletionWindow.GetListViewWidth(System.Int32,System.Int32)">
            <summary>
            Gets the list view width large enough to handle the longest completion data
            text string.
            </summary>
            <param name="defaultWidth">The default width of the list view.</param>
            <param name="height">The height of the list view.  This is
            used to determine if the scrollbar is visible.</param>
            <returns>The list view width to accommodate the longest completion
            data text string; otherwise the default width.</returns>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Gui.CompletionWindow.CodeCompletionWindow.CloseWhenCaretAtBeginning">
            <summary>
            When this flag is set, code completion closes if the caret moves to the
            beginning of the allowed range. This is useful in Ctrl+Space and "complete when typing",
            but not in dot-completion.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Gui.CompletionWindow.ICompletionData.InsertAction(Alt.GUI.ICSharpCode.TextEditor.TextArea,System.Char)">
            <summary>
            Insert the element represented by the completion data into the text
            editor.
            </summary>
            <param name="textArea">TextArea to insert the completion data in.</param>
            <param name="ch">Character that should be inserted after the completion data.
            \0 when no character should be inserted.</param>
            <returns>Returns true when the insert action has processed the character
            <paramref name="ch"/>; false when the character was not processed.</returns>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Gui.CompletionWindow.ICompletionData.Priority">
            <summary>
            Gets a priority value for the completion data item.
            When selecting items by their start characters, the item with the highest
            priority is selected first.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Gui.CompletionWindow.ICompletionDataProvider.ProcessKey(System.Char)">
            <summary>
            Processes a keypress. Returns the action to be run with the key.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Gui.CompletionWindow.ICompletionDataProvider.InsertAction(Alt.GUI.ICSharpCode.TextEditor.Gui.CompletionWindow.ICompletionData,Alt.GUI.ICSharpCode.TextEditor.TextArea,System.Int32,System.Char)">
            <summary>
            Executes the insertion. The provider should set the caret position and then
            call data.InsertAction.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Gui.CompletionWindow.ICompletionDataProvider.GenerateCompletionData(System.String,Alt.GUI.ICSharpCode.TextEditor.TextArea,System.Char)">
            <summary>
            Generates the completion data. This method is called by the text editor control.
            </summary>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Gui.CompletionWindow.ICompletionDataProvider.DefaultIndex">
            <summary>
            Gets the index of the element in the list that is chosen by default.
            </summary>
        </member>
        <member name="F:Alt.GUI.ICSharpCode.TextEditor.Gui.CompletionWindow.CompletionDataProviderKeyResult.NormalKey">
            <summary>
            Normal key, used to choose an entry from the completion list
            </summary>
        </member>
        <member name="F:Alt.GUI.ICSharpCode.TextEditor.Gui.CompletionWindow.CompletionDataProviderKeyResult.InsertionKey">
            <summary>
            This key triggers insertion of the completed expression
            </summary>
        </member>
        <member name="F:Alt.GUI.ICSharpCode.TextEditor.Gui.CompletionWindow.CompletionDataProviderKeyResult.BeforeStartKey">
            <summary>
            Increment both start and end offset of completion region when inserting this
            key. Can be used to insert whitespace (or other characters) in front of the expression
            while the completion window is open.
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.DrawableLine">
            <summary>
            A class that is able to draw a line on any control (outside the text editor)
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.FoldMargin">
            <summary>
            This class views the line numbers and folding markers.
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.GutterMargin">
            <summary>
            This class views the line numbers and folding markers.
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.HRuler">
            <summary>
            Horizontal ruler - text column measuring ruler at the top of the text area.
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.IconBarMargin">
            <summary>
            This class views the line numbers and folding markers.
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Ime">
            <summary>
            Used internally, not for own use.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Gui.InsightWindow.IInsightDataProvider.SetupDataProvider(System.String,Alt.GUI.ICSharpCode.TextEditor.TextArea)">
            <summary>
            Tells the insight provider to prepare its data.
            </summary>
            <param name="fileName">The name of the edited file</param>
            <param name="textArea">The text area in which the file is being edited</param>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Gui.InsightWindow.IInsightDataProvider.CaretOffsetChanged">
            <summary>
            Notifies the insight provider that the caret offset has changed.
            </summary>
            <returns>Return true to close the insight window (e.g. when the
            caret was moved outside the region where insight is displayed for).
            Return false to keep the window open.</returns>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Gui.InsightWindow.IInsightDataProvider.GetInsightData(System.Int32)">
            <summary>
            Gets the text to display in the insight window.
            </summary>
            <param name="number">The number of the active insight entry.
            Multiple insight entries might be multiple overloads of the same method.</param>
            <returns>The text to display, e.g. a multi-line string where
            the first line is the method definition, followed by a description.</returns>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Gui.InsightWindow.IInsightDataProvider.InsightDataCount">
            <summary>
            Gets the number of available insight entries, e.g. the number of available
            overloads to call.
            </summary>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Gui.InsightWindow.IInsightDataProvider.DefaultIndex">
            <summary>
            Gets the index of the entry to initially select.
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.TextArea">
            <summary>
            This class paints the textarea.
            </summary>
        </member>
        <member name="F:Alt.GUI.ICSharpCode.TextEditor.TextArea.mouseCursorHidePosition">
            <summary>
            The position where the mouse cursor was when it was hidden. Sometimes the text editor gets MouseMove
            events when typing text even if the mouse is not moved.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.TextArea.ShowHiddenCursor(System.Boolean)">
            <summary>
            Shows the mouse cursor if it has been hidden.
            </summary>
            <param name="forceShow"><c>true</c> to always show the cursor or <c>false</c> to show it only if it has been moved since it was hidden.</param>
        </member>
        <member name="F:Alt.GUI.ICSharpCode.TextEditor.TextArea.toolTipRectangle">
            <summary>
            RectI in text area that caused the current tool tip.
            Prevents tooltip from re-showing when it was closed because of a click or keyboard
            input and the mouse was not used.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.TextArea.HandleKeyPress(System.Char)">
            <summary>
            This method is called on each Keypress
            </summary>
            <returns>
            True, if the key is handled by this method and should NOT be
            inserted in the textarea.
            </returns>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.TextArea.ExecuteDialogKey(Alt.GUI.Keys)">
            <summary>
            This method executes a dialog key
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.TextArea.InsertChar(System.Char)">
            <remarks>
            Inserts a single character at the caret position
            </remarks>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.TextArea.InsertString(System.String)">
            <remarks>
            Inserts a whole string at the caret position
            </remarks>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.TextArea.ReplaceChar(System.Char)">
            <remarks>
            Replaces a char at the caret position
            </remarks>
        </member>
        <member name="F:Alt.GUI.ICSharpCode.TextEditor.TextAreaClipboardHandler.GetClipboardContainsText">
            <summary>
            Is called when CachedClipboardContainsText should be updated.
            If this property is null (the default value), the text editor uses
            Alt.GUI.Clipboard.ContainsText.
            </summary>
            <remarks>
            This property is useful if you want to prevent the default Clipboard.ContainsText
            behaviour that waits for the clipboard to be available - the clipboard might
            never become available if it is owned by a process that is paused by the debugger.
            </remarks>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.TextAreaControl">
            <summary>
            This class paints the textarea.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.TextAreaControl.ScrollTo(System.Int32)">
            <summary>
            Ensure that <paramref name="line"/> is visible.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.TextAreaControl.CenterViewOn(System.Int32,System.Int32)">
            <summary>
            Scroll so that the specified line is centered.
            </summary>
            <param name="line">Line to center view on</param>
            <param name="treshold">If this action would cause scrolling by less than or equal to
            <paramref name="treshold"/> lines in any direction, don't scroll.
            Use -1 to always center the view.</param>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.TextAreaDragDropHandler.MakeDragEventHandler(Alt.GUI.DragEventHandler)">
            <summary>
            Create a drag'n'drop event handler.
            AltGUI swallows unhandled exceptions during drag'n'drop, so we report them here.
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.TextAreaMouseHandler">
            <summary>
            This class handles all mouse stuff for a textArea.
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.TextAreaUpdateType">
            <summary>
            This enum describes all implemented request types
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.TextAreaUpdate">
            <summary>
            This class is used to request an update of the textarea
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.TextAreaUpdate.#ctor(Alt.GUI.ICSharpCode.TextEditor.TextAreaUpdateType)">
            <summary>
            Creates a new instance of <see cref="T:Alt.GUI.ICSharpCode.TextEditor.TextAreaUpdate"/>
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.TextAreaUpdate.#ctor(Alt.GUI.ICSharpCode.TextEditor.TextAreaUpdateType,Alt.GUI.ICSharpCode.TextEditor.TextLocation)">
            <summary>
            Creates a new instance of <see cref="T:Alt.GUI.ICSharpCode.TextEditor.TextAreaUpdate"/>
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.TextAreaUpdate.#ctor(Alt.GUI.ICSharpCode.TextEditor.TextAreaUpdateType,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:Alt.GUI.ICSharpCode.TextEditor.TextAreaUpdate"/>
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.TextAreaUpdate.#ctor(Alt.GUI.ICSharpCode.TextEditor.TextAreaUpdateType,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:Alt.GUI.ICSharpCode.TextEditor.TextAreaUpdate"/>
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.TextEditorControl">
            <summary>
            This class is used for a basic text area control
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.TextEditorControlBase">
            <summary>
            This class is used for a basic text area control
            </summary>
        </member>
        <member name="F:Alt.GUI.ICSharpCode.TextEditor.TextEditorControlBase.editactions">
            <summary>
            This hashtable contains all editor keys, where
            the key is the key combination and the value the
            action.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.TextEditorControlBase.BeginUpdate">
            <remarks>
            Call this method before a long update operation this
            'locks' the text area so that no screen update occurs.
            </remarks>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.TextEditorControlBase.EndUpdate">
            <remarks>
            Call this method to 'unlock' the text area. After this call
            screen update can occur. But no automatical refresh occurs you
            have to commit the updates in the queue.
            </remarks>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.TextEditorControlBase.LoadFile(System.String,System.Boolean,System.Boolean)">
            <remarks>
            Loads a file given by fileName
            </remarks>
            <param name="fileName">The name of the file to open</param>
            <param name="autoLoadHighlighting">Automatically load the highlighting for the file</param>
            <param name="autodetectEncoding">Automatically detect file encoding and set Encoding property to the detected encoding.</param>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.TextEditorControlBase.LoadFile(System.String,System.IO.Stream,System.Boolean,System.Boolean)">
            <remarks>
            Loads a file from the specified stream.
            </remarks>
            <param name="fileName">The name of the file to open. Used to find the correct highlighting strategy
            if autoLoadHighlighting is active, and sets the filename property to this value.</param>
            <param name="stream">The stream to actually load the file content from.</param>
            <param name="autoLoadHighlighting">Automatically load the highlighting for the file</param>
            <param name="autodetectEncoding">Automatically detect file encoding and set Encoding property to the detected encoding.</param>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.TextEditorControlBase.CanSaveWithCurrentEncoding">
            <summary>
            Gets if the document can be saved with the current encoding without losing data.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.TextEditorControlBase.SaveFile(System.String)">
            <remarks>
            Saves the text editor content into the file.
            </remarks>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.TextEditorControlBase.SaveFile(System.IO.Stream)">
            <remarks>
            Saves the text editor content into the specified stream.
            Does not close the stream.
            </remarks>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.TextEditorControlBase.Refresh">
            <remarks>
            Overwritten refresh method that does nothing if the control is in
            an update cycle.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.TextEditorControlBase.Encoding">
            <value>
            Current file's character encoding
            </value>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.TextEditorControlBase.FileName">
            <value>
            The current file name
            </value>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.TextEditorControlBase.Document">
            <value>
            The current document
            </value>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.TextEditorControlBase.IsReadOnly">
            <value>
            If set to true the contents can't be altered.
            </value>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.TextEditorControlBase.IsInUpdate">
            <value>
            true, if the textarea is updating it's status, while
            it updates it status no redraw operation occurs.
            </value>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.TextEditorControlBase.DefaultSize">
            <value>
            supposedly this is the way to do it according to .NET docs,
            as opposed to setting the size in the constructor
            </value>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.TextEditorControlBase.ShowSpaces">
            <value>
            If true spaces are shown in the textarea
            </value>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.TextEditorControlBase.TextRenderingHint">
            <value>
            Specifies the quality of text rendering (whether to use hinting and/or anti-aliasing).
            </value>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.TextEditorControlBase.ShowTabs">
            <value>
            If true tabs are shown in the textarea
            </value>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.TextEditorControlBase.ShowEOLMarkers">
            <value>
            If true EOL markers are shown in the textarea
            </value>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.TextEditorControlBase.ShowHRuler">
            <value>
            If true the horizontal ruler is shown in the textarea
            </value>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.TextEditorControlBase.ShowVRuler">
            <value>
            If true the vertical ruler is shown in the textarea
            </value>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.TextEditorControlBase.VRulerRow">
            <value>
            The row in which the vertical ruler is displayed
            </value>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.TextEditorControlBase.ShowLineNumbers">
            <value>
            If true line numbers are shown in the textarea
            </value>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.TextEditorControlBase.ShowInvalidLines">
            <value>
            If true invalid lines are marked in the textarea
            </value>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.TextEditorControlBase.EnableFolding">
            <value>
            If true folding is enabled in the textarea
            </value>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.TextEditorControlBase.TabIndent">
            <value>
            The width in spaces of a tab character
            </value>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.TextEditorControlBase.LineViewerStyle">
            <value>
            The line viewer style
            </value>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.TextEditorControlBase.IndentStyle">
            <value>
            The indent style
            </value>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.TextEditorControlBase.ConvertTabsToSpaces">
            <value>
            if true spaces are converted to tabs
            </value>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.TextEditorControlBase.HideMouseCursor">
            <value>
            if true spaces are converted to tabs
            </value>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.TextEditorControlBase.AllowCaretBeyondEOL">
            <value>
            if true spaces are converted to tabs
            </value>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.TextEditorControlBase.BracketMatchingStyle">
            <value>
            if true spaces are converted to tabs
            </value>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.TextEditorControlBase.Font">
            <value>
            The base font of the text area. No bold or italic fonts
            can be used because bold/italic is reserved for highlighting
            purposes.
            </value>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.TextView">
            <summary>
            This class paints the textarea.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.TextView.GetMarkerBrushAt(System.Int32,System.Int32,Alt.Sketch.Color@,System.Collections.Generic.IList{Alt.GUI.ICSharpCode.TextEditor.Document.TextMarker}@)">
            <summary>
            Get the marker brush (for solid block markers) at a given position.
            </summary>
            <param name="offset">The offset.</param>
            <param name="length">The length.</param>
            <param name="markers">All markers that have been found.</param>
            <returns>The Brush or null when no marker was found.</returns>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.TextView.GetLogicalPosition(Alt.Sketch.Point)">
            <summary>
            returns line/column for a visual point position
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.TextView.GetLogicalPosition(System.Double,System.Double)">
            <summary>
            returns line/column for a visual point position
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.TextView.GetFoldMarkerFromPosition(System.Double,System.Double)">
            <summary>
            returns line/column for a visual point position
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.TextView.GetLogicalLine(System.Double)">
            <summary>
            returns logical line number for a visual point
            </summary>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.TextView.FirstVisibleLine">
            <summary>Gets the first visible <b>logical</b> line.</summary>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.TextView.SpaceWidth">
            <summary>
            Gets the width of a space character.
            This value can be quite small in some fonts - consider using WideSpaceWidth instead.
            </summary>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.TextView.WideSpaceWidth">
            <summary>
            Gets the width of a 'wide space' (=one quarter of a tab, if tab is set to 4 spaces).
            On monospaced fonts, this is the same value as spaceWidth.
            </summary>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.ToolTipRequestEventArgs.ToolTipShown">
            <summary>
            Gets if some client handling the event has already shown a tool tip.
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Undo.IUndoableOperation">
            <summary>
            This Interface describes a the basic Undo/Redo operation
            all Undo Operations must implement this interface.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Undo.IUndoableOperation.Undo">
            <summary>
            Undo the last operation
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Undo.IUndoableOperation.Redo">
            <summary>
            Redo the last operation
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Undo.UndoableDelete">
            <summary>
            This class is for the undo of Document insert operations
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Undo.UndoableDelete.#ctor(Alt.GUI.ICSharpCode.TextEditor.Document.IDocument,System.Int32,System.String)">
            <summary>
            Creates a new instance of <see cref="T:Alt.GUI.ICSharpCode.TextEditor.Undo.UndoableDelete"/>
            </summary>	
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Undo.UndoableDelete.Undo">
            <remarks>
            Undo last operation
            </remarks>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Undo.UndoableDelete.Redo">
            <remarks>
            Redo last undone operation
            </remarks>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Undo.UndoableInsert">
            <summary>
            This class is for the undo of Document insert operations
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Undo.UndoableInsert.#ctor(Alt.GUI.ICSharpCode.TextEditor.Document.IDocument,System.Int32,System.String)">
            <summary>
            Creates a new instance of <see cref="T:Alt.GUI.ICSharpCode.TextEditor.Undo.UndoableInsert"/>
            </summary>	
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Undo.UndoableInsert.Undo">
            <remarks>
            Undo last operation
            </remarks>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Undo.UndoableInsert.Redo">
            <remarks>
            Redo last undone operation
            </remarks>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Undo.UndoableReplace">
            <summary>
            This class is for the undo of Document insert operations
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Undo.UndoableReplace.#ctor(Alt.GUI.ICSharpCode.TextEditor.Document.IDocument,System.Int32,System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:Alt.GUI.ICSharpCode.TextEditor.Undo.UndoableReplace"/>
            </summary>	
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Undo.UndoableReplace.Undo">
            <remarks>
            Undo last operation
            </remarks>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Undo.UndoableReplace.Redo">
            <remarks>
            Redo last undone operation
            </remarks>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Undo.UndoQueue">
            <summary>
            This class stacks the last x operations from the undostack and makes
            one undo/redo operation from it.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Undo.UndoQueue.#ctor(System.Collections.Generic.Stack{Alt.GUI.ICSharpCode.TextEditor.Undo.IUndoableOperation},System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Undo.UndoStack">
            <summary>
            This class implements an undo stack
            </summary>
        </member>
        <member name="F:Alt.GUI.ICSharpCode.TextEditor.Undo.UndoStack.AcceptChanges">
            <summary>
            Gets/Sets if changes to the document are protocolled by the undo stack.
            Used internally to disable the undo stack temporarily while undoing an action.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Undo.UndoStack.Undo">
            <summary>
            Call this method to undo the last operation on the stack
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Undo.UndoStack.Redo">
            <summary>
            Call this method to redo the last undone operation
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Undo.UndoStack.Push(Alt.GUI.ICSharpCode.TextEditor.Undo.IUndoableOperation)">
            <summary>
            Call this method to push an UndoableOperation on the undostack, the redostack
            will be cleared, if you use this method.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Undo.UndoStack.ClearRedoStack">
            <summary>
            Call this method, if you want to clear the redo stack
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Undo.UndoStack.ClearAll">
            <summary>
            Clears both the undo and redo stack.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Undo.UndoStack.OnActionUndone">
            <summary>
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Undo.UndoStack.OnActionRedone">
            <summary>
            </summary>
        </member>
        <member name="E:Alt.GUI.ICSharpCode.TextEditor.Undo.UndoStack.ActionUndone">
            <summary>
            </summary>
        </member>
        <member name="E:Alt.GUI.ICSharpCode.TextEditor.Undo.UndoStack.ActionRedone">
            <summary>
            </summary>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Undo.UndoStack.CanUndo">
            <summary>
            Gets if there are actions on the undo stack.
            </summary>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Undo.UndoStack.CanRedo">
            <summary>
            Gets if there are actions on the redo stack.
            </summary>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Undo.UndoStack.UndoItemCount">
            <summary>
            Gets the number of actions on the undo stack.
            </summary>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Undo.UndoStack.RedoItemCount">
            <summary>
            Gets the number of actions on the redo stack.
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Util.AugmentableRedBlackTree`2">
            <summary>
            Description of RedBlackTree.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Util.AugmentableRedBlackTree`2.Find(`0)">
            <summary>
            Returns the iterator pointing to the specified item, or an iterator in End state if the item is not found.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Util.AugmentableRedBlackTree`2.LowerBound(`0)">
            <summary>
            Returns the iterator pointing to the first item greater or equal to <paramref name="item"/>.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Util.AugmentableRedBlackTree`2.UpperBound(`0)">
            <summary>
            Returns the iterator pointing to the first item greater than <paramref name="item"/>.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Util.AugmentableRedBlackTree`2.Begin">
            <summary>
            Gets a tree iterator that starts on the first node.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Util.AugmentableRedBlackTree`2.GetEnumerator">
            <summary>
            Gets a tree iterator that starts one node before the first node.
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Util.CheckedList`1">
            <summary>
            A IList{T} that checks that it is only accessed on the thread that created it, and that
            it is not modified while an enumerator is running.
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Util.FileReader">
            <summary>
            Class that can open text files with auto-detection of the encoding.
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Util.LoggingService">
            <summary>
            Central location for logging calls in the text editor.
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Util.LookupTable">
            <summary>
            This class implements a keyword map. It implements a digital search trees (tries) to find
            a word.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Util.LookupTable.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:Alt.GUI.ICSharpCode.TextEditor.Util.LookupTable"/>
            </summary>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Util.LookupTable.Count">
            <value>
            The number of elements in the table
            </value>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Util.LookupTable.Item(Alt.GUI.ICSharpCode.TextEditor.Document.IDocument,Alt.GUI.ICSharpCode.TextEditor.Document.LineSegment,System.Int32,System.Int32)">
            <summary>
            Get the object, which was inserted under the keyword (line, at offset, with length length),
            returns null, if no such keyword was inserted.
            </summary>
        </member>
        <member name="P:Alt.GUI.ICSharpCode.TextEditor.Util.LookupTable.Item(System.String)">
            <summary>
            Inserts an object in the tree, under keyword
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Util.MouseWheelHandler">
            <summary>
            Accumulates mouse wheel deltas and reports the actual number of lines to scroll.
            </summary>
        </member>
        <member name="T:Alt.GUI.ICSharpCode.TextEditor.Util.WeakCollection`1">
            <summary>
            A collection that does not allows its elements to be garbage-collected (unless there are other
            references to the elements). Elements will disappear from the collection when they are
            garbage-collected.
            
            The WeakCollection is not thread-safe, not even for read-only access!
            No methods may be called on the WeakCollection while it is enumerated, not even a Contains or
            creating a second enumerator.
            The WeakCollection does not preserve any order among its contents; the ordering may be different each
            time the collection is enumerated.
            
            Since items may disappear at any time when they are garbage collected, this class
            cannot provide a useful implementation for Count and thus cannot implement the ICollection interface.
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Util.WeakCollection`1.Add(`0)">
            <summary>
            Adds an element to the collection. Runtime: O(n).
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Util.WeakCollection`1.Clear">
            <summary>
            Removes all elements from the collection. Runtime: O(n).
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Util.WeakCollection`1.Contains(`0)">
            <summary>
            Checks if the collection contains an item. Runtime: O(n).
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Util.WeakCollection`1.Remove(`0)">
            <summary>
            Removes an element from the collection. Returns true if the item is found and removed,
            false when the item is not found.
            Runtime: O(n).
            </summary>
        </member>
        <member name="M:Alt.GUI.ICSharpCode.TextEditor.Util.WeakCollection`1.GetEnumerator">
            <summary>
            Enumerates the collection.
            Each MoveNext() call on the enumerator is O(1), thus the enumeration is O(n).
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.ZedGraphControl">
            <summary>
            The ZedGraphControl class provides a UserControl interface to the
            <see cref="N:Alt.GUI.ZedGraph"/> class library.  This allows ZedGraph to be installed
            as a control in the Visual Studio toolbox.  You can use the control by simply
            dragging it onto a form in the Visual Studio form editor.  All graph
            attributes are accessible via the <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.GraphPane"/>
            property.
            </summary>
            <author> John Champion revised by Jerry Vos </author>
            <version> $Revision: 3.86 $ $Date: 2007-11-03 04:41:29 $ </version>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZedGraphControl.GetObjectState">
            <summary>
            Find the object currently under the mouse cursor, and return its state.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZedGraphControl.contextMenuStrip1_Opening(System.Object,Alt.ComponentModel.CancelEventArgs)">
            <summary>
            protected method to handle the popup context menu in the <see cref="T:Alt.GUI.ZedGraph.ZedGraphControl"/>.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZedGraphControl.MenuClick_Copy(System.Object,System.EventArgs)">
            <summary>
            Handler for the "Copy" context menu item.  Copies the current image to a bitmap on the
            clipboard.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZedGraphControl.Copy(System.Boolean)">
            <summary>
            Handler for the "Copy" context menu item.  Copies the current image to a bitmap on the
            clipboard.
            </summary>
            <param name="isShowMessage">boolean value that determines whether or not a prompt will be
            displayed.  true to show a message of "Image Copied to ClipBoard".</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZedGraphControl.ClipboardCopyThread">
            <summary>
            A threaded version of the copy method to avoid crash with MTA
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZedGraphControl.ImageRender">
            <summary>
            Setup for creation of a new image, applying appropriate anti-alias properties and
            returning the resultant image file
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZedGraphControl.MenuClick_SaveAs(System.Object,System.EventArgs)">
            <summary>
            Handler for the "Save Image As" context menu item.  Copies the current image to the selected
            file.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZedGraphControl.SaveAs">
            <summary>
            Handler for the "Save Image As" context menu item.  Copies the current image to the selected
            file in either the Emf (vector), or a variety of Bitmap formats.
            </summary>
            <remarks>
            Note that <see cref="M:Alt.GUI.ZedGraph.ZedGraphControl.SaveAsBitmap"/> and <see cref="!:SaveAsEmf"/> methods are provided
            which allow for Bitmap-only or Emf-only handling of the "Save As" context menu item.
            </remarks>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZedGraphControl.SaveAs(System.String)">
            <summary>
            Copies the current image to the selected file in  
            Emf (vector), or a variety of Bitmap formats.
            </summary>
            <param name="DefaultFileName">
            Accepts a default file name for the file dialog (if "" or null, default is not used)
            </param>
            <returns>
            The file name saved, or "" if cancelled.
            </returns>
            <remarks>
            Note that <see cref="M:Alt.GUI.ZedGraph.ZedGraphControl.SaveAsBitmap"/> and <see cref="!:SaveAsEmf"/> methods are provided
            which allow for Bitmap-only or Emf-only handling of the "Save As" context menu item.
            </remarks>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZedGraphControl.SaveAsBitmap">
            <summary>
            Handler for the "Save Image As" context menu item.  Copies the current image to the selected
            Bitmap file.
            </summary>
            <remarks>
            Note that this handler saves as a bitmap only.  The default handler is
            <see cref="M:Alt.GUI.ZedGraph.ZedGraphControl.SaveAs"/>, which allows for Bitmap or EMF formats
            </remarks>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZedGraphControl.MenuClick_ShowValues(System.Object,System.EventArgs)">
            <summary>
            Handler for the "Show Values" context menu item.  Toggles the <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsShowPointValues"/>
            property, which activates the point value tooltips.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZedGraphControl.MenuClick_RestoreScale(System.Object,System.EventArgs)">
            <summary>
            Handler for the "Set Scale to Default" context menu item.  Sets the scale ranging to
            full auto mode for all axes.
            </summary>
            <remarks>
            This method differs from the <see cref="M:Alt.GUI.ZedGraph.ZedGraphControl.ZoomOutAll(Alt.GUI.ZedGraph.GraphPane)"/> method in that it sets the scales
            to full auto mode.  The <see cref="M:Alt.GUI.ZedGraph.ZedGraphControl.ZoomOutAll(Alt.GUI.ZedGraph.GraphPane)"/> method sets the scales to their initial
            setting prior to any user actions (which may or may not be full auto mode).
            </remarks>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZedGraphControl.RestoreScale(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Handler for the "Set Scale to Default" context menu item.  Sets the scale ranging to
            full auto mode for all axes.
            </summary>
            <remarks>
            This method differs from the <see cref="M:Alt.GUI.ZedGraph.ZedGraphControl.ZoomOutAll(Alt.GUI.ZedGraph.GraphPane)"/> method in that it sets the scales
            to full auto mode.  The <see cref="M:Alt.GUI.ZedGraph.ZedGraphControl.ZoomOutAll(Alt.GUI.ZedGraph.GraphPane)"/> method sets the scales to their initial
            setting prior to any user actions (which may or may not be full auto mode).
            </remarks>
            <param name="primaryPane">The <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.GraphPane"/> object which is to have the
            scale restored</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZedGraphControl.MenuClick_ZoomOut(System.Object,System.EventArgs)">
            <summary>
            Handler for the "UnZoom/UnPan" context menu item.  Restores the scale ranges to the values
            before the last zoom or pan operation.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZedGraphControl.ZoomOut(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Handler for the "UnZoom/UnPan" context menu item.  Restores the scale ranges to the values
            before the last zoom, pan, or scroll operation.
            </summary>
            <remarks>
            Triggers a <see cref="E:Alt.GUI.ZedGraph.ZedGraphControl.ZoomEvent"/> for any type of undo (including pan, scroll, zoom, and
            wheelzoom).  This method will affect all the
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.GraphPane"/> objects in the <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.MasterPane"/> if
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsSynchronizeXAxes"/> or <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsSynchronizeYAxes"/> is true.
            </remarks>
            <param name="primaryPane">The primary <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.GraphPane"/> object which is to be
            zoomed out</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZedGraphControl.MenuClick_ZoomOutAll(System.Object,System.EventArgs)">
            <summary>
            Handler for the "Undo All Zoom/Pan" context menu item.  Restores the scale ranges to the values
            before all zoom and pan operations
            </summary>
            <remarks>
            This method differs from the <see cref="M:Alt.GUI.ZedGraph.ZedGraphControl.RestoreScale(Alt.GUI.ZedGraph.GraphPane)"/> method in that it sets the scales
            to their initial setting prior to any user actions.  The <see cref="M:Alt.GUI.ZedGraph.ZedGraphControl.RestoreScale(Alt.GUI.ZedGraph.GraphPane)"/> method
            sets the scales to full auto mode (regardless of what the initial setting may have been).
            </remarks>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZedGraphControl.ZoomOutAll(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Handler for the "Undo All Zoom/Pan" context menu item.  Restores the scale ranges to the values
            before all zoom and pan operations
            </summary>
            <remarks>
            This method differs from the <see cref="M:Alt.GUI.ZedGraph.ZedGraphControl.RestoreScale(Alt.GUI.ZedGraph.GraphPane)"/> method in that it sets the scales
            to their initial setting prior to any user actions.  The <see cref="M:Alt.GUI.ZedGraph.ZedGraphControl.RestoreScale(Alt.GUI.ZedGraph.GraphPane)"/> method
            sets the scales to full auto mode (regardless of what the initial setting may have been).
            </remarks>
            <param name="primaryPane">The <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.GraphPane"/> object which is to be zoomed out</param>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZedGraphControl._masterPane">
            <summary>
            This private field contains the instance for the MasterPane object of this control.
            You can access the MasterPane object through the public property
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.MasterPane"/>. This is nulled when this Control is
            disposed.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZedGraphControl._isShowPointValues">
            <summary>
            private field that determines whether or not tooltips will be displayed
            when the mouse hovers over data values.  Use the public property
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsShowPointValues"/> to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZedGraphControl._isShowCursorValues">
            <summary>
            private field that determines whether or not tooltips will be displayed
            showing the scale values while the mouse is located within the ChartRect.
            Use the public property <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsShowCursorValues"/> to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZedGraphControl._pointValueFormat">
            <summary>
            private field that determines the format for displaying tooltip values.
            This format is passed to <see cref="M:Alt.GUI.ZedGraph.PointPairBase.ToString(System.String)"/>.
            Use the public property <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.PointValueFormat"/> to access this
            value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZedGraphControl._isShowContextMenu">
            <summary>
            private field that determines whether or not the context menu will be available.  Use the
            public property <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsShowContextMenu"/> to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZedGraphControl._isShowCopyMessage">
            <summary>
            private field that determines whether or not a message box will be shown in response to
            a context menu "Copy" command.  Use the
            public property <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsShowCopyMessage"/> to access this value.
            </summary>
            <remarks>
            Note that, if this value is set to false, the user will receive no indicative feedback
            in response to a Copy action.
            </remarks>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZedGraphControl._isPrintScaleAll">
            <summary>
            private field that determines whether the settings of
            <see cref="P:Alt.GUI.ZedGraph.PaneBase.IsFontsScaled"/> and <see cref="P:Alt.GUI.ZedGraph.PaneBase.IsPenWidthScaled"/>
            will be overridden to true during printing operations.
            </summary>
            <remarks>
            Printing involves pixel maps that are typically of a dramatically different dimension
            than on-screen pixel maps.  Therefore, it becomes more important to scale the fonts and
            lines to give a printed image that looks like what is shown on-screen.  The default
            setting for <see cref="P:Alt.GUI.ZedGraph.PaneBase.IsFontsScaled"/> is true, but the default
            setting for <see cref="P:Alt.GUI.ZedGraph.PaneBase.IsPenWidthScaled"/> is false.
            </remarks>
            <value>
            A value of true will cause both <see cref="P:Alt.GUI.ZedGraph.PaneBase.IsFontsScaled"/> and
            <see cref="P:Alt.GUI.ZedGraph.PaneBase.IsPenWidthScaled"/> to be temporarily set to true during
            printing operations.
            </value>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZedGraphControl._isPrintKeepAspectRatio">
            <summary>
            private field that determines whether or not the visible aspect ratio of the
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.MasterPane"/> <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/> will be preserved
            when printing this <see cref="T:Alt.GUI.ZedGraph.ZedGraphControl"/>.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZedGraphControl._isPrintFillPage">
            <summary>
            private field that determines whether or not the <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.MasterPane"/>
            <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/> dimensions will be expanded to fill the
            available space when printing this <see cref="T:Alt.GUI.ZedGraph.ZedGraphControl"/>.
            </summary>
            <remarks>
            If <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsPrintKeepAspectRatio"/> is also true, then the <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.MasterPane"/>
            <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/> dimensions will be expanded to fit as large
            a space as possible while still honoring the visible aspect ratio.
            </remarks>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZedGraphControl._pointDateFormat">
            <summary>
            private field that determines the format for displaying tooltip date values.
            This format is passed to <see cref="M:Alt.GUI.ZedGraph.XDate.ToString(System.String)"/>.
            Use the public property <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.PointDateFormat"/> to access this
            value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZedGraphControl._isEnableVZoom">
            <summary>
            private value that determines whether or not zooming is enabled for the control in the
            vertical direction.  Use the public property <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableVZoom"/> to access this
            value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZedGraphControl._isEnableHZoom">
            <summary>
            private value that determines whether or not zooming is enabled for the control in the
            horizontal direction.  Use the public property <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableHZoom"/> to access this
            value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZedGraphControl._isEnableWheelZoom">
            <summary>
            private value that determines whether or not zooming is enabled with the mousewheel.
            Note that this property is used in combination with the <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableHZoom"/> and
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableVZoom"/> properties to control zoom options.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZedGraphControl._isEnableVEdit">
            <summary>
            private value that determines whether or not point editing is enabled in the
            vertical direction.  Use the public property <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableVEdit"/> to access this
            value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZedGraphControl._isEnableHEdit">
            <summary>
            private value that determines whether or not point editing is enabled in the
            horizontal direction.  Use the public property <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableHEdit"/> to access this
            value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZedGraphControl._isEnableHPan">
            <summary>
            private value that determines whether or not panning is allowed for the control in the
            horizontal direction.  Use the
            public property <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableHPan"/> to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZedGraphControl._isEnableVPan">
            <summary>
            private value that determines whether or not panning is allowed for the control in the
            vertical direction.  Use the
            public property <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableVPan"/> to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZedGraphControl._isEnableSelection">
            <summary>
            Internal variable that indicates if the control can manage selections. 
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZedGraphControl._selection">
            <summary>
            This private field contains a list of selected CurveItems.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZedGraphControl._linkButtons">
            <summary>
            Gets or sets a value that determines which Mouse button will be used to click on
            linkable objects
            </summary>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.LinkModifierKeys"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZedGraphControl._linkModifierKeys">
            <summary>
            Gets or sets a value that determines which modifier keys will be used to click
            on linkable objects
            </summary>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.LinkButtons"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZedGraphControl._editButtons">
            <summary>
            Gets or sets a value that determines which Mouse button will be used to edit point
            data values
            </summary>
            <remarks>
            This setting only applies if <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableHEdit"/> and/or
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableVEdit"/> are true.
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.EditModifierKeys"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZedGraphControl._editModifierKeys">
            <summary>
            Gets or sets a value that determines which modifier keys will be used to edit point
            data values
            </summary>
            <remarks>
            This setting only applies if <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableHEdit"/> and/or
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableVEdit"/> are true.
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.EditButtons"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZedGraphControl._selectButtons">
            <summary>
            Gets or sets a value that determines which mouse button will be used to select
            <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>'s.
            </summary>
            <remarks>
            This setting only applies if <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableSelection"/> is true.
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.SelectModifierKeys"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZedGraphControl._selectModifierKeys">
            <summary>
            Gets or sets a value that determines which modifier keys will be used to select
            <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>'s.
            </summary>
            <remarks>
            This setting only applies if <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableSelection"/> is true.
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.SelectButtons"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZedGraphControl._zoomButtons">
            <summary>
            Gets or sets a value that determines which Mouse button will be used to perform
            zoom operations
            </summary>
            <remarks>
            This setting only applies if <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableHZoom"/> and/or
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableVZoom"/> are true.
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ZoomModifierKeys"/>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ZoomButtons2"/>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ZoomModifierKeys2"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZedGraphControl._zoomModifierKeys">
            <summary>
            Gets or sets a value that determines which modifier keys will be used to perform
            zoom operations
            </summary>
            <remarks>
            This setting only applies if <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableHZoom"/> and/or
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableVZoom"/> are true.
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ZoomButtons"/>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ZoomButtons2"/>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ZoomModifierKeys2"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZedGraphControl._zoomButtons2">
            <summary>
            Gets or sets a value that determines which Mouse button will be used as a
            secondary option to perform zoom operations
            </summary>
            <remarks>
            This setting only applies if <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableHZoom"/> and/or
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableVZoom"/> are true.
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ZoomModifierKeys2"/>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ZoomButtons"/>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ZoomModifierKeys"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZedGraphControl._zoomModifierKeys2">
            <summary>
            Gets or sets a value that determines which modifier keys will be used as a
            secondary option to perform zoom operations
            </summary>
            <remarks>
            This setting only applies if <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableHZoom"/> and/or
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableVZoom"/> are true.
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ZoomButtons"/>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ZoomButtons2"/>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ZoomModifierKeys2"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZedGraphControl._panButtons">
            <summary>
            Gets or sets a value that determines which Mouse button will be used to perform
            panning operations
            </summary>
            <remarks>
            This setting only applies if <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableHPan"/> and/or
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableVPan"/> are true.  A Pan operation (dragging the graph with
            the mouse) should not be confused with a scroll operation (using a scroll bar to
            move the graph).
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.PanModifierKeys"/>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.PanButtons2"/>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.PanModifierKeys2"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZedGraphControl._panModifierKeys">
            <summary>
            Gets or sets a value that determines which modifier keys will be used to perform
            panning operations
            </summary>
            <remarks>
            This setting only applies if <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableHPan"/> and/or
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableVPan"/> are true.  A Pan operation (dragging the graph with
            the mouse) should not be confused with a scroll operation (using a scroll bar to
            move the graph).
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.PanButtons"/>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.PanButtons2"/>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.PanModifierKeys2"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZedGraphControl._panButtons2">
            <summary>
            Gets or sets a value that determines which Mouse button will be used as a
            secondary option to perform panning operations
            </summary>
            <remarks>
            This setting only applies if <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableHPan"/> and/or
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableVPan"/> are true.  A Pan operation (dragging the graph with
            the mouse) should not be confused with a scroll operation (using a scroll bar to
            move the graph).
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.PanModifierKeys2"/>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.PanButtons"/>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.PanModifierKeys"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZedGraphControl._panModifierKeys2">
            <summary>
            Gets or sets a value that determines which modifier keys will be used as a
            secondary option to perform panning operations
            </summary>
            <remarks>
            This setting only applies if <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableHPan"/> and/or
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableVPan"/> are true.  A Pan operation (dragging the graph with
            the mouse) should not be confused with a scroll operation (using a scroll bar to
            move the graph).
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.PanButtons2"/>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.PanButtons"/>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.PanModifierKeys"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZedGraphControl._isZooming">
            <summary>
            Internal variable that indicates the control is currently being zoomed. 
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZedGraphControl._isPanning">
            <summary>
            Internal variable that indicates the control is currently being panned.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZedGraphControl._isEditing">
            <summary>
            Internal variable that indicates a point value is currently being edited.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZedGraphControl._isSelecting">
            <summary>
            Internal variable that indicates the control is currently using selection. 
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZedGraphControl._dragPane">
            <summary>
            Internal variable that stores the <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.GraphPane"/> reference for the Pane that is
            currently being zoomed or panned.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZedGraphControl._dragStartPt">
            <summary>
            Internal variable that stores a rectangle which is either the zoom rectangle, or the incremental
            pan amount since the last mousemove event.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZedGraphControl._zoomState">
            <summary>
            private field that stores the state of the scale ranges prior to starting a panning action.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZedGraphControl.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZedGraphControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if the components should be
            disposed, false otherwise</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZedGraphControl.OnPaint(Alt.GUI.PaintEventArgs)">
            <summary>
            Called by the system to update the control on-screen
            </summary>
            <param name="e">
            A PaintEventArgs object containing the Graphics specifications
            for this Paint event.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZedGraphControl.ZedGraphControl_ReSize(System.Object,System.EventArgs)">
            <summary>
            Called when the control has been resized.
            </summary>
            <param name="sender">
            A reference to the control that has been resized.
            </param>
            <param name="e">
            An EventArgs object.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZedGraphControl.AxisChange">
            <summary>This performs an axis change command on the graphPane.
            </summary>
            <remarks>
            This is the same as
            <c>ZedGraphControl.GraphPane.AxisChange( ZedGraphControl.CreateGraphics() )</c>, however,
            this method also calls <see cref="M:Alt.GUI.ZedGraph.ZedGraphControl.SetScrollRangeFromData"/> if <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsAutoScrollRange"/>
            is true.
            </remarks>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZedGraphControl.ZoomStateSave(Alt.GUI.ZedGraph.GraphPane,Alt.GUI.ZedGraph.ZoomState.StateType)">
            <summary>
            Save the current states of the GraphPanes to a separate collection.  Save a single
            (<see paramref="primaryPane"/>) GraphPane if the panes are not synchronized
            (see <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsSynchronizeXAxes"/> and <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsSynchronizeYAxes"/>),
            or save a list of states for all GraphPanes if the panes are synchronized.
            </summary>
            <param name="primaryPane">The primary GraphPane on which zoom/pan/scroll operations
            are taking place</param>
            <param name="type">The <see cref="T:Alt.GUI.ZedGraph.ZoomState.StateType"/> that describes the
            current operation</param>
            <returns>The <see cref="T:Alt.GUI.ZedGraph.ZoomState"/> that corresponds to the
            <see paramref="primaryPane"/>.
            </returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZedGraphControl.ZoomStateRestore(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Restore the states of the GraphPanes to a previously saved condition (via
            <see cref="M:Alt.GUI.ZedGraph.ZedGraphControl.ZoomStateSave(Alt.GUI.ZedGraph.GraphPane,Alt.GUI.ZedGraph.ZoomState.StateType)"/>.  This is essentially an "undo" for live
            pan and scroll actions.  Restores a single
            (<see paramref="primaryPane"/>) GraphPane if the panes are not synchronized
            (see <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsSynchronizeXAxes"/> and <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsSynchronizeYAxes"/>),
            or save a list of states for all GraphPanes if the panes are synchronized.
            </summary>
            <param name="primaryPane">The primary GraphPane on which zoom/pan/scroll operations
            are taking place</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZedGraphControl.ZoomStatePush(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Place the previously saved states of the GraphPanes on the individual GraphPane
            <see cref="P:Alt.GUI.ZedGraph.GraphPane.ZoomStack"/> collections.  This provides for an
            option to undo the state change at a later time.  Save a single
            (<see paramref="primaryPane"/>) GraphPane if the panes are not synchronized
            (see <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsSynchronizeXAxes"/> and <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsSynchronizeYAxes"/>),
            or save a list of states for all GraphPanes if the panes are synchronized.
            </summary>
            <param name="primaryPane">The primary GraphPane on which zoom/pan/scroll operations
            are taking place</param>
            <returns>The <see cref="T:Alt.GUI.ZedGraph.ZoomState"/> that corresponds to the
            <see paramref="primaryPane"/>.
            </returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZedGraphControl.ZoomStateClear">
            <summary>
            Clear the collection of saved states.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZedGraphControl.ZoomStatePurge">
            <summary>
            Clear all states from the undo stack for each GraphPane.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZedGraphControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZedGraphControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZedGraphControl.ZedGraphControl_MouseDown(System.Object,Alt.GUI.MouseEventArgs)">
            <summary>
            Handle a MouseDown event in the <see cref="T:Alt.GUI.ZedGraph.ZedGraphControl"/>
            </summary>
            <param name="sender">A reference to the <see cref="T:Alt.GUI.ZedGraph.ZedGraphControl"/></param>
            <param name="e">A <see cref="T:Alt.GUI.MouseEventArgs"/> instance</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZedGraphControl.SetCursor">
            <summary>
            Set the cursor according to the current mouse location.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZedGraphControl.SetCursor(Alt.Sketch.Point)">
            <summary>
            Set the cursor according to the current mouse location.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZedGraphControl.ZedGraphControl_KeyUp(System.Object,Alt.GUI.KeyEventArgs)">
            <summary>
            Handle a KeyUp event
            </summary>
            <param name="sender">The <see cref="T:Alt.GUI.ZedGraph.ZedGraphControl"/> in which the KeyUp occurred.</param>
            <param name="e">A <see cref="T:Alt.GUI.KeyEventArgs"/> instance.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZedGraphControl.ZedGraphControl_KeyDown(System.Object,Alt.GUI.KeyEventArgs)">
            <summary>
            Handle the Key Events so ZedGraph can Escape out of a panning or zooming operation.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZedGraphControl.ZedGraphControl_MouseUp(System.Object,Alt.GUI.MouseEventArgs)">
            <summary>
            Handle a MouseUp event in the <see cref="T:Alt.GUI.ZedGraph.ZedGraphControl"/>
            </summary>
            <param name="sender">A reference to the <see cref="T:Alt.GUI.ZedGraph.ZedGraphControl"/></param>
            <param name="e">A <see cref="T:Alt.GUI.MouseEventArgs"/> instance</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZedGraphControl.MakeValueLabel(Alt.GUI.ZedGraph.Axis,System.Double,System.Int32,System.Boolean)">
            <summary>
            Make a string label that corresponds to a user scale value.
            </summary>
            <param name="axis">The axis from which to obtain the scale value.  This determines
            if it's a date value, linear, log, etc.</param>
            <param name="val">The value to be made into a label</param>
            <param name="iPt">The ordinal position of the value</param>
            <param name="isOverrideOrdinal">true to override the ordinal settings of the axis,
            and prefer the actual value instead.</param>
            <returns>The string label.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZedGraphControl.ZedGraphControl_MouseMove(System.Object,Alt.GUI.MouseEventArgs)">
            <summary>
            protected method for handling MouseMove events to display tooltips over
            individual datapoints.
            </summary>
            <param name="sender">
            A reference to the control that has the MouseMove event.
            </param>
            <param name="e">
            A MouseEventArgs object.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZedGraphControl.ZedGraphControl_MouseWheel(System.Object,Alt.GUI.MouseEventArgs)">
            <summary>
            Handle a MouseWheel event in the <see cref="T:Alt.GUI.ZedGraph.ZedGraphControl"/>
            </summary>
            <param name="sender">A reference to the <see cref="T:Alt.GUI.ZedGraph.ZedGraphControl"/></param>
            <param name="e">A <see cref="T:Alt.GUI.MouseEventArgs"/> instance</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZedGraphControl.ZoomPane(Alt.GUI.ZedGraph.GraphPane,System.Double,Alt.Sketch.Point,System.Boolean,System.Boolean)">
            <summary>
            Zoom a specified pane in or out according to the specified zoom fraction.
            </summary>
            <remarks>
            The zoom will occur on the <see cref="T:Alt.GUI.ZedGraph.XAxis"/>, <see cref="T:Alt.GUI.ZedGraph.YAxis"/>, and
            <see cref="T:Alt.GUI.ZedGraph.Y2Axis"/> only if the corresponding flag, <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableHZoom"/> or
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableVZoom"/>, is true.  Note that if there are multiple Y or Y2 axes, all of
            them will be zoomed.
            </remarks>
            <param name="pane">The <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.GraphPane"/> instance to be zoomed.</param>
            <param name="zoomFraction">The fraction by which to zoom, less than 1 to zoom in, greater than
            1 to zoom out.  For example, 0.9 will zoom in such that the scale is 90% of what it was
            originally.</param>
            <param name="centerPt">The screen position about which the zoom will be centered.  This
            value is only used if <see paramref="isZoomOnCenter"/> is true.
            </param>
            <param name="isZoomOnCenter">true to cause the zoom to be centered on the point
            <see paramref="centerPt"/>, false to center on the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>.
            </param>
            <param name="isRefresh">true to force a refresh of the control, false to leave it unrefreshed</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZedGraphControl.ZoomPane(Alt.GUI.ZedGraph.GraphPane,System.Double,Alt.Sketch.Point,System.Boolean)">
            <summary>
            Zoom a specified pane in or out according to the specified zoom fraction.
            </summary>
            <remarks>
            The zoom will occur on the <see cref="T:Alt.GUI.ZedGraph.XAxis"/>, <see cref="T:Alt.GUI.ZedGraph.YAxis"/>, and
            <see cref="T:Alt.GUI.ZedGraph.Y2Axis"/> only if the corresponding flag, <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableHZoom"/> or
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableVZoom"/>, is true.  Note that if there are multiple Y or Y2 axes, all of
            them will be zoomed.
            </remarks>
            <param name="pane">The <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.GraphPane"/> instance to be zoomed.</param>
            <param name="zoomFraction">The fraction by which to zoom, less than 1 to zoom in, greater than
            1 to zoom out.  For example, 0.9 will zoom in such that the scale is 90% of what it was
            originally.</param>
            <param name="centerPt">The screen position about which the zoom will be centered.  This
            value is only used if <see paramref="isZoomOnCenter"/> is true.
            </param>
            <param name="isZoomOnCenter">true to cause the zoom to be centered on the point
            <see paramref="centerPt"/>, false to center on the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZedGraphControl.ZoomScale(Alt.GUI.ZedGraph.Axis,System.Double,System.Double,System.Boolean)">
            <summary>
            Zoom the specified axis by the specified amount, with the center of the zoom at the
            (optionally) specified point.
            </summary>
            <remarks>
            This method is used for MouseWheel zoom operations</remarks>
            <param name="axis">The <see cref="T:Alt.GUI.ZedGraph.Axis"/> to be zoomed.</param>
            <param name="zoomFraction">The zoom fraction, less than 1.0 to zoom in, greater than 1.0 to
            zoom out.  That is, a value of 0.9 will zoom in such that the scale length is 90% of what
            it previously was.</param>
            <param name="centerVal">The location for the center of the zoom.  This is only used if
            <see paramref="IsZoomOnMouseCenter"/> is true.</param>
            <param name="isZoomOnCenter">true if the zoom is to be centered at the
            <see paramref="centerVal"/> screen position, false for the zoom to be centered within
            the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZedGraphControl.PanScale(Alt.GUI.ZedGraph.Axis,System.Double,System.Double)">
            <summary>
            Handle a panning operation for the specified <see cref="T:Alt.GUI.ZedGraph.Axis"/>.
            </summary>
            <param name="axis">The <see cref="T:Alt.GUI.ZedGraph.Axis"/> to be panned</param>
            <param name="startVal">The value where the pan started.  The scale range
            will be shifted by the difference between <see paramref="startVal"/> and
            <see paramref="endVal"/>.
            </param>
            <param name="endVal">The value where the pan ended.  The scale range
            will be shifted by the difference between <see paramref="startVal"/> and
            <see paramref="endVal"/>.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZedGraphControl.HandleSelectionFinish(System.Object,Alt.GUI.MouseEventArgs)">
            <summary>
            Perform selection on curves within the drag pane, or under the mouse click.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZedGraphControl.GetImage">
            <summary>
            Gets the graph pane's current image.
            <seealso cref="T:Alt.Sketch.Bitmap"/>
            </summary>
            <exception cref="T:Alt.GUI.ZedGraph.ZedGraphException">
            When the control has been disposed before this call.
            </exception>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZedGraphControl.SetScrollRangeFromData">
            <summary>
            Sets the value of the scroll range properties (see <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ScrollMinX"/>,
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ScrollMaxX"/>, <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.YScrollRangeList"/>, and 
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.Y2ScrollRangeList"/> based on the actual range of the data for
            each corresponding <see cref="T:Alt.GUI.ZedGraph.Axis"/>.
            </summary>
            <remarks>
            This method is called automatically by <see cref="M:Alt.GUI.ZedGraph.ZedGraphControl.AxisChange"/> if
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsAutoScrollRange"/>
            is true.  Note that this will not be called if you call AxisChange directly from the
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.GraphPane"/>.  For example, zedGraphControl1.AxisChange() works properly, but
            zedGraphControl1.GraphPane.AxisChange() does not.</remarks>
        </member>
        <member name="E:Alt.GUI.ZedGraph.ZedGraphControl.ContextMenuBuilder">
            <summary>
            Subscribe to this event to be able to modify the ZedGraph context menu.
            </summary>
            <remarks>
            The context menu is built on the fly after a right mouse click.  You can add menu items
            to this menu by simply modifying the <see paramref="menu"/> parameter.
            </remarks>
        </member>
        <member name="E:Alt.GUI.ZedGraph.ZedGraphControl.ZoomEvent">
            <summary>
            Subscribe to this event to be notified when the <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.GraphPane"/> is zoomed or panned by the user,
            either via a mouse drag operation or by the context menu commands.
            </summary>
        </member>
        <member name="E:Alt.GUI.ZedGraph.ZedGraphControl.ScrollDoneEvent">
            <summary>
            Subscribe to this event to be notified when the <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.GraphPane"/> is scrolled by the user
            using the scrollbars.
            </summary>
        </member>
        <member name="E:Alt.GUI.ZedGraph.ZedGraphControl.ScrollProgressEvent">
            <summary>
            Subscribe to this event to be notified when the <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.GraphPane"/> is scrolled by the user
            using the scrollbars.
            </summary>
        </member>
        <member name="E:Alt.GUI.ZedGraph.ZedGraphControl.ScrollEvent">
            <summary>
            Subscribe to this event to be notified when the <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.GraphPane"/> is scrolled by the user
            using the scrollbars.
            </summary>
        </member>
        <member name="E:Alt.GUI.ZedGraph.ZedGraphControl.PointEditEvent">
            <summary>
            Subscribe to this event to receive notifcation and/or respond after a data
            point has been edited via <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableHEdit"/> and <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableVEdit"/>.
            </summary>
            <example>
            <para>To subscribe to this event, use the following in your Form_Load method:</para>
            <code>zedGraphControl1.PointEditEvent +=
            new ZedGraphControl.PointEditHandler( MyPointEditHandler );</code>
            <para>Add this method to your Form1.cs:</para>
            <code>
               private string MyPointEditHandler( object sender, GraphPane pane, CurveItem curve, int iPt )
               {
                   PointPair pt = curve[iPt];
                   return "This value is " + pt.Y.ToString("f2") + " gallons";
               }</code>
            </example>
        </member>
        <member name="E:Alt.GUI.ZedGraph.ZedGraphControl.PointValueEvent">
            <summary>
            Subscribe to this event to provide custom formatting for the tooltips
            </summary>
            <example>
            <para>To subscribe to this event, use the following in your FormLoad method:</para>
            <code>zedGraphControl1.PointValueEvent +=
            new ZedGraphControl.PointValueHandler( MyPointValueHandler );</code>
            <para>Add this method to your Form1.cs:</para>
            <code>
               private string MyPointValueHandler( object sender, GraphPane pane, CurveItem curve, int iPt )
               {
               #region
                   PointPair pt = curve[iPt];
                   return "This value is " + pt.Y.ToString("f2") + " gallons";
               //
               }</code>
            </example>
        </member>
        <member name="E:Alt.GUI.ZedGraph.ZedGraphControl.CursorValueEvent">
            <summary>
            Subscribe to this event to provide custom formatting for the cursor value tooltips
            </summary>
            <example>
            <para>To subscribe to this event, use the following in your FormLoad method:</para>
            <code>zedGraphControl1.CursorValueEvent +=
            new ZedGraphControl.CursorValueHandler( MyCursorValueHandler );</code>
            <para>Add this method to your Form1.cs:</para>
            <code>
               private string MyCursorValueHandler( object sender, GraphPane pane, PointI mousePt )
               {
               #region
            	double x, y;
            	pane.ReverseTransform( mousePt, out x, out y );
            	return "( " + x.ToString( "f2" ) + ", " + y.ToString( "f2" ) + " )";
               //
               }</code>
            </example>
        </member>
        <member name="E:Alt.GUI.ZedGraph.ZedGraphControl.MouseDownEvent">
            <summary>
            Subscribe to this event to provide notification of MouseDown clicks on graph
            objects
            </summary>
            <remarks>
            This event provides for a notification when the mouse is clicked on an object
            within any <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.GraphPane"/> of the <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.MasterPane"/> associated
            with this <see cref="T:Alt.GUI.ZedGraph.ZedGraphControl"/>.  This event will use the
            <see cref="M:Alt.GUI.ZedGraph.MasterPane.FindNearestPaneObject(Alt.Sketch.Point,Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane@,System.Object@,System.Int32@)"/> method to determine which object
            was clicked.  The boolean value that you return from this handler determines whether
            or not the <see cref="T:Alt.GUI.ZedGraph.ZedGraphControl"/> will do any further handling of the
            MouseDown event (see <see cref="T:Alt.GUI.ZedGraph.ZedGraphControl.ZedMouseEventHandler"/>).  Return true if you have
            handled the MouseDown event entirely, and you do not
            want the <see cref="T:Alt.GUI.ZedGraph.ZedGraphControl"/> to do any further action (e.g., starting
            a zoom operation).  Return false if ZedGraph should go ahead and process the
            MouseDown event.
            </remarks>
        </member>
        <member name="E:Alt.GUI.ZedGraph.ZedGraphControl.MouseDown">
            <summary>
            Hide the standard control MouseDown event so that the ZedGraphControl.MouseDownEvent
            can be used.  This is so that the user must return true/false in order to indicate
            whether or not we should respond to the event.
            </summary>
        </member>
        <member name="E:Alt.GUI.ZedGraph.ZedGraphControl.MouseUp">
            <summary>
            Hide the standard control MouseUp event so that the ZedGraphControl.MouseUpEvent
            can be used.  This is so that the user must return true/false in order to indicate
            whether or not we should respond to the event.
            </summary>
        </member>
        <member name="E:Alt.GUI.ZedGraph.ZedGraphControl.MouseMove">
            <summary>
            Hide the standard control MouseMove event so that the ZedGraphControl.MouseMoveEvent
            can be used.  This is so that the user must return true/false in order to indicate
            whether or not we should respond to the event.
            </summary>
        </member>
        <member name="E:Alt.GUI.ZedGraph.ZedGraphControl.MouseUpEvent">
            <summary>
            Subscribe to this event to provide notification of MouseUp clicks on graph
            objects
            </summary>
            <remarks>
            This event provides for a notification when the mouse is clicked on an object
            within any <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.GraphPane"/> of the <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.MasterPane"/> associated
            with this <see cref="T:Alt.GUI.ZedGraph.ZedGraphControl"/>.  This event will use the
            <see cref="M:Alt.GUI.ZedGraph.MasterPane.FindNearestPaneObject(Alt.Sketch.Point,Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane@,System.Object@,System.Int32@)"/> method to determine which object
            was clicked.  The boolean value that you return from this handler determines whether
            or not the <see cref="T:Alt.GUI.ZedGraph.ZedGraphControl"/> will do any further handling of the
            MouseUp event (see <see cref="T:Alt.GUI.ZedGraph.ZedGraphControl.ZedMouseEventHandler"/>).  Return true if you have
            handled the MouseUp event entirely, and you do not
            want the <see cref="T:Alt.GUI.ZedGraph.ZedGraphControl"/> to do any further action (e.g., starting
            a zoom operation).  Return false if ZedGraph should go ahead and process the
            MouseUp event.
            </remarks>
        </member>
        <member name="E:Alt.GUI.ZedGraph.ZedGraphControl.MouseMoveEvent">
            <summary>
            Subscribe to this event to provide notification of MouseMove events over graph
            objects
            </summary>
            <remarks>
            This event provides for a notification when the mouse is moving over on the control.
            The boolean value that you return from this handler determines whether
            or not the <see cref="T:Alt.GUI.ZedGraph.ZedGraphControl"/> will do any further handling of the
            MouseMove event (see <see cref="T:Alt.GUI.ZedGraph.ZedGraphControl.ZedMouseEventHandler"/>).  Return true if you
            have handled the MouseMove event entirely, and you do not
            want the <see cref="T:Alt.GUI.ZedGraph.ZedGraphControl"/> to do any further action.
            Return false if ZedGraph should go ahead and process the MouseMove event.
            </remarks>
        </member>
        <member name="E:Alt.GUI.ZedGraph.ZedGraphControl.DoubleClickEvent">
            <summary>
            Subscribe to this event to provide notification of Double Clicks on graph
            objects
            </summary>
            <remarks>
            This event provides for a notification when the mouse is double-clicked on an object
            within any <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.GraphPane"/> of the <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.MasterPane"/> associated
            with this <see cref="T:Alt.GUI.ZedGraph.ZedGraphControl"/>.  This event will use the
            <see cref="M:Alt.GUI.ZedGraph.MasterPane.FindNearestPaneObject(Alt.Sketch.Point,Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane@,System.Object@,System.Int32@)"/> method to determine which object
            was clicked.  The boolean value that you return from this handler determines whether
            or not the <see cref="T:Alt.GUI.ZedGraph.ZedGraphControl"/> will do any further handling of the
            DoubleClick event (see <see cref="T:Alt.GUI.ZedGraph.ZedGraphControl.ZedMouseEventHandler"/>).  Return true if you have
            handled the DoubleClick event entirely, and you do not
            want the <see cref="T:Alt.GUI.ZedGraph.ZedGraphControl"/> to do any further action. 
            Return false if ZedGraph should go ahead and process the
            DoubleClick event.
            </remarks>
        </member>
        <member name="E:Alt.GUI.ZedGraph.ZedGraphControl.LinkEvent">
            <summary>
            Subscribe to this event to be able to respond to mouse clicks within linked
            objects.
            </summary>
            <remarks>
            Linked objects are typically either <see cref="T:Alt.GUI.ZedGraph.GraphObj"/> type objects or
            <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> type objects.  These object types can include
            hyperlink information allowing for "drill-down" type operation.  
            </remarks>
            <seealso cref="T:Alt.GUI.ZedGraph.ZedGraphControl.LinkEventHandler"/>
            <seealso cref="T:Alt.GUI.ZedGraph.Link"/>
            <seealso cref="P:Alt.GUI.ZedGraph.CurveItem.Link">CurveItem.Link</seealso>
            <seealso cref="P:Alt.GUI.ZedGraph.GraphObj.Link">GraphObj.Link</seealso>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.ZoomButtons">
            <summary>
            Gets or sets a value that determines which mouse button will be used as a primary option
            to trigger a zoom event.
            </summary>
            <remarks>
            This value is combined with <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ZoomModifierKeys"/> to determine the actual zoom combination.
            A secondary zoom button/key combination option is available via <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ZoomButtons2"/> and
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ZoomModifierKeys2"/>.  To not use this button/key combination, set the value
            of <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ZoomButtons"/> to <see cref="F:Alt.GUI.MouseButtons.None"/>.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.ZoomButtons2">
            <summary>
            Gets or sets a value that determines which mouse button will be used as the secondary option
            to trigger a zoom event.
            </summary>
            <remarks>
            This value is combined with <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ZoomModifierKeys2"/> to determine the actual zoom combination.
            The primary zoom button/key combination option is available via <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ZoomButtons"/> and
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ZoomModifierKeys"/>.  To not use this button/key combination, set the value
            of <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ZoomButtons2"/> to <see cref="F:Alt.GUI.MouseButtons.None"/>.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.ZoomModifierKeys">
            <summary>
            Gets or sets a value that determines which modifier keys will be used as a primary option
            to trigger a zoom event.
            </summary>
            <remarks>
            This value is combined with <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ZoomButtons"/> to determine the actual zoom combination.
            A secondary zoom button/key combination option is available via <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ZoomButtons2"/> and
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ZoomModifierKeys2"/>.  To not use this button/key combination, set the value
            of <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ZoomButtons"/> to <see cref="F:Alt.GUI.MouseButtons.None"/>.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.ZoomModifierKeys2">
            <summary>
            Gets or sets a value that determines which modifier keys will be used as a secondary option
            to trigger a zoom event.
            </summary>
            <remarks>
            This value is combined with <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ZoomButtons2"/> to determine the actual zoom combination.
            A primary zoom button/key combination option is available via <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ZoomButtons"/> and
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ZoomModifierKeys"/>.  To not use this button/key combination, set the value
            of <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ZoomButtons2"/> to <see cref="F:Alt.GUI.MouseButtons.None"/>.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.PanButtons">
            <summary>
            Gets or sets a value that determines which mouse button will be used as a primary option
            to trigger a pan event.
            </summary>
            <remarks>
            This value is combined with <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.PanModifierKeys"/> to determine the actual pan combination.
            A secondary pan button/key combination option is available via <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.PanButtons2"/> and
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.PanModifierKeys2"/>.  To not use this button/key combination, set the value
            of <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.PanButtons"/> to <see cref="F:Alt.GUI.MouseButtons.None"/>.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.PanButtons2">
            <summary>
            Gets or sets a value that determines which mouse button will be used as the secondary option
            to trigger a pan event.
            </summary>
            <remarks>
            This value is combined with <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.PanModifierKeys2"/> to determine the actual pan combination.
            The primary pan button/key combination option is available via <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.PanButtons"/> and
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.PanModifierKeys"/>.  To not use this button/key combination, set the value
            of <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.PanButtons2"/> to <see cref="F:Alt.GUI.MouseButtons.None"/>.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.PanModifierKeys">
            <summary>
            Gets or sets a value that determines which modifier keys will be used as a primary option
            to trigger a pan event.
            </summary>
            <remarks>
            This value is combined with <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.PanButtons"/> to determine the actual pan combination.
            A secondary pan button/key combination option is available via <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.PanButtons2"/> and
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.PanModifierKeys2"/>.  To not use this button/key combination, set the value
            of <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.PanButtons"/> to <see cref="F:Alt.GUI.MouseButtons.None"/>.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.PanModifierKeys2">
            <summary>
            Gets or sets a value that determines which modifier keys will be used as a secondary option
            to trigger a pan event.
            </summary>
            <remarks>
            This value is combined with <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.PanButtons2"/> to determine the actual pan combination.
            A primary pan button/key combination option is available via <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.PanButtons"/> and
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.PanModifierKeys"/>.  To not use this button/key combination, set the value
            of <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.PanButtons2"/> to <see cref="F:Alt.GUI.MouseButtons.None"/>.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.EditButtons">
            <summary>
            Gets or sets a value that determines which Mouse button will be used to edit point
            data values
            </summary>
            <remarks>
            This setting only applies if <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableHEdit"/> and/or
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableVEdit"/> are true.
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.EditModifierKeys"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.EditModifierKeys">
            <summary>
            Gets or sets a value that determines which modifier keys will be used to edit point
            data values
            </summary>
            <remarks>
            This setting only applies if <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableHEdit"/> and/or
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableVEdit"/> are true.
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.EditButtons"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.SelectButtons">
            <summary>
            Gets or sets a value that determines which Mouse button will be used to 
            select <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>'s.
            </summary>
            <remarks>
            This setting only applies if <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableSelection"/> is true.
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.SelectModifierKeys"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.SelectModifierKeys">
            <summary>
            Gets or sets a value that determines which Modifier keys will be used to 
            select <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>'s.
            </summary>
            <remarks>
            This setting only applies if <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableSelection"/> is true.
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.SelectButtons"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.SelectAppendModifierKeys">
            <summary>
            Gets or sets a value that determines which Modifier keys will be used to 
            append a <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> to the selection list.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.LinkButtons">
            <summary>
            Gets or sets a value that determines which Mouse button will be used to click
            on linkable objects
            </summary>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.LinkModifierKeys"/>
            <seealso cref="E:Alt.GUI.ZedGraph.ZedGraphControl.LinkEvent"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.LinkModifierKeys">
            <summary>
            Gets or sets a value that determines which modifier keys will be used to click
            on linkable objects
            </summary>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.LinkButtons"/>
            <seealso cref="E:Alt.GUI.ZedGraph.ZedGraphControl.LinkEvent"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.MasterPane">
            <summary>
            Gets or sets the <see cref="T:Alt.GUI.ZedGraph.MasterPane"/> property for the control
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.GraphPane">
            <summary>
            Gets or sets the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> property for the control
            </summary>
            <remarks>
            <see cref="T:Alt.GUI.ZedGraph.ZedGraphControl"/> actually uses a <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.MasterPane"/> object
            to hold a list of <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.GraphPane"/> objects.  This property really only
            accesses the first <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.GraphPane"/> in the list.  If there is more
            than one <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.GraphPane"/>, use the <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.MasterPane"/>
            indexer property to access any of the <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.GraphPane"/> objects.</remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.IsAntiAlias">
            <summary>
            Gets or sets a value that determines if all drawing operations for this control
            will be forced to operate in Anti-alias mode.  Note that if this value is set to
            "true", it overrides the setting for sub-objects.  Otherwise, the sub-object settings
            (such as <see cref="P:Alt.GUI.ZedGraph.FontSpec.IsAntiAlias"/>)
            will be honored.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.IsShowPointValues">
            <summary>
            Gets or sets a value that determines whether or not tooltips will be displayed
            when the mouse hovers over data values.
            </summary>
            <remarks>The displayed values are taken from <see cref="F:Alt.GUI.ZedGraph.PointPair.Tag"/>
            if it is a <see cref="T:System.String"/> type, or <see cref="M:Alt.GUI.ZedGraph.PointPairBase.ToString"/>
            otherwise (using the <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.PointValueFormat"/> as a format string).
            Additionally, the user can custom format the values using the
            <see cref="E:Alt.GUI.ZedGraph.ZedGraphControl.PointValueEvent"/> event.  Note that <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsShowPointValues"/>
            may be overridden by <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsShowCursorValues"/>.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.IsShowCursorValues">
            <summary>
            Gets or sets a value that determines whether or not tooltips will be displayed
            showing the current scale values when the mouse is within the
            <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>.
            </summary>
            <remarks>The displayed values are taken from the current mouse position, and formatted
            according to <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.PointValueFormat"/> and/or <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.PointDateFormat"/>.  If this
            value is set to true, it overrides the <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsShowPointValues"/> setting.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableHEdit">
            <summary>
            Gets or sets a value that determines whether or not editing of point data is allowed in
            the horizontal direction.
            </summary>
            <remarks>
            Editing is done by holding down the Alt key, and left-clicking on an individual point of
            a given <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> to drag it to a new location.  The Mouse and Key
            combination for this mode are modifiable using <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.EditButtons"/> and
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.EditModifierKeys"/>.
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.EditButtons"/>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.EditModifierKeys"/>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableVEdit"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableVEdit">
            <summary>
            Gets or sets a value that determines whether or not editing of point data is allowed in
            the vertical direction.
            </summary>
            <remarks>
            Editing is done by holding down the Alt key, and left-clicking on an individual point of
            a given <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> to drag it to a new location.  The Mouse and Key
            combination for this mode are modifiable using <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.EditButtons"/> and
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.EditModifierKeys"/>.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableZoom">
            <summary>
            Gets or sets a value that determines whether or not zooming is allowed for the control.
            </summary>
            <remarks>
            Zooming is done by left-clicking inside the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/> to drag
            out a rectangle, indicating the new scale ranges that will be part of the graph.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableHZoom">
            <summary>
            Gets or sets a value that determines whether or not zooming is allowed for the control in
            the horizontal direction.
            </summary>
            <remarks>
            Zooming is done by left-clicking inside the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/> to drag
            out a rectangle, indicating the new scale ranges that will be part of the graph.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableVZoom">
            <summary>
            Gets or sets a value that determines whether or not zooming is allowed for the control in
            the vertical direction.
            </summary>
            <remarks>
            Zooming is done by left-clicking inside the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/> to drag
            out a rectangle, indicating the new scale ranges that will be part of the graph.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableWheelZoom">
            <summary>
            Gets or sets a value that determines whether or not zooming is allowed via the mouse wheel.
            </summary>
            <remarks>
            Wheel zooming is done by rotating the mouse wheel.
            Note that this property is used in combination with the <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableHZoom"/> and
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableVZoom"/> properties to control zoom options.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableHPan">
            <summary>
            Gets or sets a value that determines whether or not panning is allowed for the control in
            the horizontal direction.
            </summary>
            <remarks>
            Panning is done by clicking the middle mouse button (or holding down the shift key
            while clicking the left mouse button) inside the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/> and
            dragging the mouse around to shift the scale ranges as desired.
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableVPan"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableVPan">
            <summary>
            Gets or sets a value that determines whether or not panning is allowed for the control in
            the vertical direction.
            </summary>
            <remarks>
            Panning is done by clicking the middle mouse button (or holding down the shift key
            while clicking the left mouse button) inside the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/> and
            dragging the mouse around to shift the scale ranges as desired.
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableHPan"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.IsShowContextMenu">
            <summary>
            Gets or sets a value that determines whether or not the context menu will be available.
            </summary>
            <remarks>The context menu is a menu that appears when you right-click on the
            <see cref="T:Alt.GUI.ZedGraph.ZedGraphControl"/>.  It provides options for Zoom, Pan, AutoScale, Clipboard
            Copy, and toggle <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsShowPointValues"/>.
            </remarks>
            <value>true to allow the context menu, false to disable it</value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.IsShowCopyMessage">
            <summary>
            Gets or sets a value that determines whether or not a message box will be shown
            in response to a context menu "Copy" command.
            </summary>
            <remarks>
            Note that, if this property is set to false, the user will receive no
            indicative feedback in response to a Copy action.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.SaveFileDialog">
            <summary>
            Gets or sets the <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.SaveFileDialog"/> instance that will be used
            by the "Save As..." context menu item.
            </summary>
            <remarks>
            This provides the opportunity to modify the dialog, such as setting the
            <see cref="P:Alt.GUI.FileDialog.InitialDirectory"/> property.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.IsPrintKeepAspectRatio">
            <summary>
            Gets or sets a value that determines whether or not the visible aspect ratio of the
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.MasterPane"/> <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/> will be preserved
            when printing this <see cref="T:Alt.GUI.ZedGraph.ZedGraphControl"/>.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.IsPrintFillPage">
            <summary>
            Gets or sets a value that determines whether or not the <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.MasterPane"/>
            <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/> dimensions will be expanded to fill the
            available space when printing this <see cref="T:Alt.GUI.ZedGraph.ZedGraphControl"/>.
            </summary>
            <remarks>
            If <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsPrintKeepAspectRatio"/> is also true, then the <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.MasterPane"/>
            <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/> dimensions will be expanded to fit as large
            a space as possible while still honoring the visible aspect ratio.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.IsPrintScaleAll">
            <summary>
            Gets or sets a value that determines whether the settings of
            <see cref="P:Alt.GUI.ZedGraph.PaneBase.IsFontsScaled"/> and <see cref="P:Alt.GUI.ZedGraph.PaneBase.IsPenWidthScaled"/>
            will be overridden to true during printing operations.
            </summary>
            <remarks>
            Printing involves pixel maps that are typically of a dramatically different dimension
            than on-screen pixel maps.  Therefore, it becomes more important to scale the fonts and
            lines to give a printed image that looks like what is shown on-screen.  The default
            setting for <see cref="P:Alt.GUI.ZedGraph.PaneBase.IsFontsScaled"/> is true, but the default
            setting for <see cref="P:Alt.GUI.ZedGraph.PaneBase.IsPenWidthScaled"/> is false.
            </remarks>
            <value>
            A value of true will cause both <see cref="P:Alt.GUI.ZedGraph.PaneBase.IsFontsScaled"/> and
            <see cref="P:Alt.GUI.ZedGraph.PaneBase.IsPenWidthScaled"/> to be temporarily set to true during
            printing operations.
            </value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.IsAutoScrollRange">
            <summary>
            Gets or sets a value that controls whether or not the axis value range for the scroll
            bars will be set automatically.
            </summary>
            <remarks>
            If this value is set to true, then the range of the scroll bars will be set automatically
            to the actual range of the data as returned by <see cref="M:Alt.GUI.ZedGraph.CurveList.GetRange(System.Boolean,System.Boolean,Alt.GUI.ZedGraph.GraphPane)"/> at the
            time that <see cref="M:Alt.GUI.ZedGraph.ZedGraphControl.AxisChange"/> was last called.  Note that a value of true
            can override any setting of <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ScrollMinX"/>, <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ScrollMaxX"/>,
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ScrollMinY"/>, <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ScrollMaxY"/>, 
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ScrollMinY2"/>, and <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ScrollMaxY2"/>.  Note also that you must
            call <see cref="M:Alt.GUI.ZedGraph.ZedGraphControl.AxisChange"/> from the <see cref="T:Alt.GUI.ZedGraph.ZedGraphControl"/> for this to
            work properly (e.g., don't call it directly from the <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.GraphPane"/>.
            Alternatively, you can call <see cref="M:Alt.GUI.ZedGraph.ZedGraphControl.SetScrollRangeFromData"/> at anytime to set
            the scroll bar range.<br/>
            <b>In most cases, you will probably want to disable
            <see cref="P:Alt.GUI.ZedGraph.GraphPane.IsBoundedRanges"/> before activating this option.</b>
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.ScrollGrace">
            <summary>
            Set a "grace" value that leaves a buffer area around the data when
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsAutoScrollRange"/> is true.
            </summary>
            <remarks>
            This value represents a fraction of the total range around each axis.  For example, if the
            axis ranges from 0 to 100, then a 0.05 value for ScrollGrace would set the scroll range
            to -5 to 105.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.IsShowHScrollBar">
            <summary>
            Gets or sets a value that determines if the horizontal scroll bar will be visible.
            </summary>
            <remarks>This scroll bar allows the display to be scrolled in the horizontal direction.
            Another option is display panning, in which the user can move the display around by
            clicking directly on it and dragging (see <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableHPan"/> and <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableVPan"/>).
            You can control the available range of scrolling with the <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ScrollMinX"/> and
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ScrollMaxX"/> properties.  Note that the scroll range can be set automatically by
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsAutoScrollRange"/>.<br/>
            <b>In most cases, you will probably want to disable
            <see cref="P:Alt.GUI.ZedGraph.GraphPane.IsBoundedRanges"/> before activating this option.</b>
            </remarks>
            <value>A boolean value.  true to display a horizontal scrollbar, false otherwise.</value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.IsShowVScrollBar">
            <summary>
            Gets or sets a value that determines if the vertical scroll bar will be visible.
            </summary>
            <remarks>This scroll bar allows the display to be scrolled in the vertical direction.
            Another option is display panning, in which the user can move the display around by
            clicking directly on it and dragging (see <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableHPan"/> and <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableVPan"/>).
            You can control the available range of scrolling with the <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ScrollMinY"/> and
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ScrollMaxY"/> properties.
            Note that the vertical scroll bar only affects the <see cref="T:Alt.GUI.ZedGraph.YAxis"/>; it has no impact on
            the <see cref="T:Alt.GUI.ZedGraph.Y2Axis"/>.  The panning options affect both the <see cref="T:Alt.GUI.ZedGraph.YAxis"/> and
            <see cref="T:Alt.GUI.ZedGraph.Y2Axis"/>.  Note also that the scroll range can be set automatically by
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsAutoScrollRange"/>.<br/>
            <b>In most cases, you will probably want to disable
            <see cref="P:Alt.GUI.ZedGraph.GraphPane.IsBoundedRanges"/> before activating this option.</b>
            </remarks>
            <value>A boolean value.  true to display a vertical scrollbar, false otherwise.</value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.IsSynchronizeXAxes">
            <summary>
            Gets or sets a value that determines if the <see cref="T:Alt.GUI.ZedGraph.XAxis"/> <see cref="T:Alt.GUI.ZedGraph.Scale"/>
            ranges for all <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.GraphPane"/> objects in the <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.MasterPane"/> will
            be forced to match.
            </summary>
            <remarks>
            If set to true (default is false), then all of the <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.GraphPane"/> objects
            in the <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.MasterPane"/> associated with this <see cref="T:Alt.GUI.ZedGraph.ZedGraphControl"/>
            will be forced to have matching scale ranges for the x axis.  That is, zoom, pan,
            and scroll operations will result in zoom/pan/scroll for all graphpanes simultaneously.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.IsSynchronizeYAxes">
            <summary>
            Gets or sets a value that determines if the <see cref="T:Alt.GUI.ZedGraph.YAxis"/> <see cref="T:Alt.GUI.ZedGraph.Scale"/>
            ranges for all <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.GraphPane"/> objects in the <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.MasterPane"/> will
            be forced to match.
            </summary>
            <remarks>
            If set to true (default is false), then all of the <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.GraphPane"/> objects
            in the <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.MasterPane"/> associated with this <see cref="T:Alt.GUI.ZedGraph.ZedGraphControl"/>
            will be forced to have matching scale ranges for the y axis.  That is, zoom, pan,
            and scroll operations will result in zoom/pan/scroll for all graphpanes simultaneously.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.IsScrollY2">
            <summary>
            Gets or sets a value that determines if the vertical scroll bar will affect the Y2 axis.
            </summary>
            <remarks>
            The vertical scroll bar is automatically associated with the Y axis.  With this value, you
            can choose to include or exclude the Y2 axis with the scrolling.  Note that the Y2 axis
            scrolling is handled as a secondary.  The vertical scroll bar position always reflects
            the status of the Y axis.  This can cause the Y2 axis to "jump" when first scrolled if
            the <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ScrollMinY2"/> and <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ScrollMaxY2"/> values are not set to the
            same proportions as <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ScrollMinY"/> and <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ScrollMaxY"/> with respect
            to the actual <see cref="P:Alt.GUI.ZedGraph.Scale.Min"/> and <see cref="P:Alt.GUI.ZedGraph.Scale.Max"/>.  Also note that
            this property is actually just an alias to the <see cref="P:Alt.GUI.ZedGraph.ScrollRange.IsScrollable"/>
            property of the first element of <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.YScrollRangeList"/>.
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsShowVScrollBar"/>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ScrollMinY2"/>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ScrollMaxY2"/>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.YScrollRangeList"/>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.Y2ScrollRangeList"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.YScrollRangeList">
            <summary>
            Access the <see cref="T:Alt.GUI.ZedGraph.ScrollRangeList"/> for the Y axes.
            </summary>
            <remarks>
            This list maintains the user scale ranges for the scroll bars for each axis
            in the <see cref="P:Alt.GUI.ZedGraph.GraphPane.YAxisList"/>.  Each ordinal location in
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.YScrollRangeList"/> corresponds to an equivalent ordinal location
            in <see cref="P:Alt.GUI.ZedGraph.GraphPane.YAxisList"/>.
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ScrollMinY"/>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ScrollMaxY"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.Y2ScrollRangeList">
            <summary>
            Access the <see cref="T:Alt.GUI.ZedGraph.ScrollRangeList"/> for the Y2 axes.
            </summary>
            <remarks>
            This list maintains the user scale ranges for the scroll bars for each axis
            in the <see cref="P:Alt.GUI.ZedGraph.GraphPane.Y2AxisList"/>.  Each ordinal location in
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.Y2ScrollRangeList"/> corresponds to an equivalent ordinal location
            in <see cref="P:Alt.GUI.ZedGraph.GraphPane.Y2AxisList"/>.
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ScrollMinY2"/>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ScrollMaxY2"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.ScrollMinX">
            <summary>
            The minimum value for the X axis scroll range.
            </summary>
            <remarks>
            Effectively, the minimum endpoint of the scroll range will cause the
            <see cref="P:Alt.GUI.ZedGraph.Scale.Min"/> value to be set to <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ScrollMinX"/>.  Note that this
            value applies only to the scroll bar settings.  Axis panning (see <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableHPan"/>)
            is not affected by this value.  Note that this value can be overridden by
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsAutoScrollRange"/> and <see cref="M:Alt.GUI.ZedGraph.ZedGraphControl.SetScrollRangeFromData"/>.
            </remarks>
            <value>A double value indicating the minimum axis value</value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.ScrollMaxX">
            <summary>
            The maximum value for the X axis scroll range.
            </summary>
            <remarks>
            Effectively, the maximum endpoint of the scroll range will cause the
            <see cref="P:Alt.GUI.ZedGraph.Scale.Max"/> value to be set to <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ScrollMaxX"/>.  Note that this
            value applies only to the scroll bar settings.  Axis panning (see <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableHPan"/>)
            is not affected by this value.  Note that this value can be overridden by
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsAutoScrollRange"/> and <see cref="M:Alt.GUI.ZedGraph.ZedGraphControl.SetScrollRangeFromData"/>.
            </remarks>
            <value>A double value indicating the maximum axis value</value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.ScrollMinY">
            <summary>
            The minimum value for the Y axis scroll range.
            </summary>
            <remarks>
            Effectively, the minimum endpoint of the scroll range will cause the
            <see cref="P:Alt.GUI.ZedGraph.Scale.Min"/> value to be set to <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ScrollMinY"/>.  Note that this
            value applies only to the scroll bar settings.  Axis panning (see <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableVPan"/>)
            is not affected by this value.  Note that this value can be overridden by
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsAutoScrollRange"/> and <see cref="M:Alt.GUI.ZedGraph.ZedGraphControl.SetScrollRangeFromData"/>.  Also note that
            this property is actually just an alias to the <see cref="P:Alt.GUI.ZedGraph.ScrollRange.Min"/>
            property of the first element of <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.YScrollRangeList"/>.
            </remarks>
            <value>A double value indicating the minimum axis value</value>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.YScrollRangeList"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.ScrollMaxY">
            <summary>
            The maximum value for the Y axis scroll range.
            </summary>
            <remarks>
            Effectively, the maximum endpoint of the scroll range will cause the
            <see cref="P:Alt.GUI.ZedGraph.Scale.Max"/> value to be set to <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ScrollMaxY"/>.  Note that this
            value applies only to the scroll bar settings.  Axis panning (see <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableVPan"/>)
            is not affected by this value.  Note that this value can be overridden by
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsAutoScrollRange"/> and <see cref="M:Alt.GUI.ZedGraph.ZedGraphControl.SetScrollRangeFromData"/>.  Also note that
            this property is actually just an alias to the <see cref="P:Alt.GUI.ZedGraph.ScrollRange.Max"/>
            property of the first element of <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.YScrollRangeList"/>.
            </remarks>
            <value>A double value indicating the maximum axis value</value>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.YScrollRangeList"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.ScrollMinY2">
            <summary>
            The minimum value for the Y2 axis scroll range.
            </summary>
            <remarks>
            Effectively, the minimum endpoint of the scroll range will cause the
            <see cref="P:Alt.GUI.ZedGraph.Scale.Min"/> value to be set to <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ScrollMinY2"/>.  Note that this
            value applies only to the scroll bar settings.  Axis panning (see <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableVPan"/>)
            is not affected by this value.  Note that this value can be overridden by
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsAutoScrollRange"/> and <see cref="M:Alt.GUI.ZedGraph.ZedGraphControl.SetScrollRangeFromData"/>.  Also note that
            this property is actually just an alias to the <see cref="P:Alt.GUI.ZedGraph.ScrollRange.Min"/>
            property of the first element of <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.Y2ScrollRangeList"/>.
            </remarks>
            <value>A double value indicating the minimum axis value</value>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.Y2ScrollRangeList"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.ScrollMaxY2">
            <summary>
            The maximum value for the Y2 axis scroll range.
            </summary>
            <remarks>
            Effectively, the maximum endpoint of the scroll range will cause the
            <see cref="P:Alt.GUI.ZedGraph.Scale.Max"/> value to be set to <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.ScrollMaxY2"/>.  Note that this
            value applies only to the scroll bar settings.  Axis panning (see <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableVPan"/>)
            is not affected by this value.  Note that this value can be overridden by
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.IsAutoScrollRange"/> and <see cref="M:Alt.GUI.ZedGraph.ZedGraphControl.SetScrollRangeFromData"/>.  Also note that
            this property is actually just an alias to the <see cref="P:Alt.GUI.ZedGraph.ScrollRange.Max"/>
            property of the first element of <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.Y2ScrollRangeList"/>.
            </remarks>
            <value>A double value indicating the maximum axis value</value>
            <seealso cref="P:Alt.GUI.ZedGraph.ZedGraphControl.Y2ScrollRangeList"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.IsScrolling">
            <summary>
            Returns true if the user is currently scrolling via the scrollbar, or
            false if no scrolling is taking place.
            </summary>
            <remarks>
            This method just tests ScrollBar.Capture to see if the
            mouse has been captured by the scroll bar.  If so, scrolling is active.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.PointValueFormat">
            <summary>
            Gets or sets the format for displaying tooltip values.
            This format is passed to <see cref="M:Alt.GUI.ZedGraph.PointPairBase.ToString(System.String)"/>.
            </summary>
            <remarks>
            Use the <see cref="T:System.Globalization.NumberFormatInfo"/> type
            to determine the format strings.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.PointDateFormat">
            <summary>
            Gets or sets the format for displaying tooltip values.
            This format is passed to <see cref="M:Alt.GUI.ZedGraph.XDate.ToString(System.String)"/>.
            </summary>
            <remarks>
            Use the <see cref="T:System.Globalization.DateTimeFormatInfo"/> type
            to determine the format strings.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.ZoomStepFraction">
            <summary>
            Gets or sets the step size fraction for zooming with the mouse wheel.
            A value of 0.1 will result in a 10% zoom step for each mouse wheel movement.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.IsZoomOnMouseCenter">
            <summary>
            Gets or sets a boolean value that determines if zooming with the wheel mouse
            is centered on the mouse location, or centered on the existing graph.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.BeenDisposed">
            <summary>
            This checks if the control has been disposed.  This is synonymous with
            the graph pane having been nulled or disposed.  Therefore this is the
            same as <c>ZedGraphControl.GraphPane == null</c>.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.Selection">
            <summary>
            Readonly property that gets the list of selected CurveItems
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZedGraphControl.IsEnableSelection">
            <summary>
            Gets or sets a value that determines whether or not selection is allowed for the control.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.ZedGraphControl.ContextMenuObjectState">
            <summary>
            Public enumeration that specifies the type of 
            object present at the Context Menu's mouse location
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZedGraphControl.ContextMenuObjectState.InactiveSelection">
            <summary>
            The object is an Inactive Curve Item at the Context Menu's mouse position
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZedGraphControl.ContextMenuObjectState.ActiveSelection">
            <summary>
            The object is an active Curve Item at the Context Menu's mouse position
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZedGraphControl.ContextMenuObjectState.Background">
            <summary>
            There is no selectable object present at the Context Menu's mouse position
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.ZedGraphControl.ContextMenuBuilderEventHandler">
            <summary>
            A delegate that allows subscribing methods to append or modify the context menu.
            </summary>
            <param name="sender">The source <see cref="T:Alt.GUI.ZedGraph.ZedGraphControl"/> object</param>
            <param name="menuStrip">A reference to the <see cref="T:Alt.GUI.ContextMenuStrip"/> object
            that contains the context menu.
            </param>
            <param name="mousePt">The point at which the mouse was clicked</param>
            <param name="objState">The current context menu state</param>
            <seealso cref="E:Alt.GUI.ZedGraph.ZedGraphControl.ContextMenuBuilder"/>
        </member>
        <member name="T:Alt.GUI.ZedGraph.ZedGraphControl.ZoomEventHandler">
            <summary>
            A delegate that allows notification of zoom and pan events.
            </summary>
            <param name="sender">The source <see cref="T:Alt.GUI.ZedGraph.ZedGraphControl"/> object</param>
            <param name="oldState">A <see cref="T:Alt.GUI.ZedGraph.ZoomState"/> object that corresponds to the state of the
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.GraphPane"/> before the zoom or pan event.</param>
            <param name="newState">A <see cref="T:Alt.GUI.ZedGraph.ZoomState"/> object that corresponds to the state of the
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.GraphPane"/> after the zoom or pan event</param>
            <seealso cref="E:Alt.GUI.ZedGraph.ZedGraphControl.ZoomEvent"/>
        </member>
        <member name="T:Alt.GUI.ZedGraph.ZedGraphControl.ScrollDoneHandler">
            <summary>
            A delegate that allows notification of scroll events.
            </summary>
            <param name="sender">The source <see cref="T:Alt.GUI.ZedGraph.ZedGraphControl"/> object</param>
            <param name="scrollBar">The source <see cref="T:Alt.GUI.ScrollBar"/> object</param>
            <param name="oldState">A <see cref="T:Alt.GUI.ZedGraph.ZoomState"/> object that corresponds to the state of the
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.GraphPane"/> before the scroll event.</param>
            <param name="newState">A <see cref="T:Alt.GUI.ZedGraph.ZoomState"/> object that corresponds to the state of the
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.GraphPane"/> after the scroll event</param>
            <seealso cref="E:Alt.GUI.ZedGraph.ZedGraphControl.ZoomEvent"/>
        </member>
        <member name="T:Alt.GUI.ZedGraph.ZedGraphControl.ScrollProgressHandler">
            <summary>
            A delegate that allows notification of scroll events.
            </summary>
            <param name="sender">The source <see cref="T:Alt.GUI.ZedGraph.ZedGraphControl"/> object</param>
            <param name="scrollBar">The source <see cref="T:Alt.GUI.ScrollBar"/> object</param>
            <param name="oldState">A <see cref="T:Alt.GUI.ZedGraph.ZoomState"/> object that corresponds to the state of the
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.GraphPane"/> before the scroll event.</param>
            <param name="newState">A <see cref="T:Alt.GUI.ZedGraph.ZoomState"/> object that corresponds to the state of the
            <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.GraphPane"/> after the scroll event</param>
            <seealso cref="E:Alt.GUI.ZedGraph.ZedGraphControl.ZoomEvent"/>
        </member>
        <member name="T:Alt.GUI.ZedGraph.ZedGraphControl.PointEditHandler">
            <summary>
            A delegate that receives notification after a point-edit operation is completed.
            </summary>
            <param name="sender">The source <see cref="T:Alt.GUI.ZedGraph.ZedGraphControl"/> object</param>
            <param name="pane">The <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.GraphPane"/> object that contains the
            point that has been edited</param>
            <param name="curve">The <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> object that contains the point
            that has been edited</param>
            <param name="iPt">The integer index of the edited <see cref="T:Alt.GUI.ZedGraph.PointPair"/> within the
            <see cref="T:Alt.GUI.ZedGraph.IPointList"/> of the selected <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>
            </param>
            <seealso cref="E:Alt.GUI.ZedGraph.ZedGraphControl.PointValueEvent"/>
        </member>
        <member name="T:Alt.GUI.ZedGraph.ZedGraphControl.PointValueHandler">
            <summary>
            A delegate that allows custom formatting of the point value tooltips
            </summary>
            <param name="sender">The source <see cref="T:Alt.GUI.ZedGraph.ZedGraphControl"/> object</param>
            <param name="pane">The <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.GraphPane"/> object that contains the point value of interest</param>
            <param name="curve">The <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> object that contains the point value of interest</param>
            <param name="iPt">The integer index of the selected <see cref="T:Alt.GUI.ZedGraph.PointPair"/> within the
            <see cref="T:Alt.GUI.ZedGraph.IPointList"/> of the selected <see cref="T:Alt.GUI.ZedGraph.CurveItem"/></param>
            <seealso cref="E:Alt.GUI.ZedGraph.ZedGraphControl.PointValueEvent"/>
        </member>
        <member name="T:Alt.GUI.ZedGraph.ZedGraphControl.CursorValueHandler">
            <summary>
            A delegate that allows custom formatting of the cursor value tooltips
            </summary>
            <param name="sender">The source <see cref="T:Alt.GUI.ZedGraph.ZedGraphControl"/> object</param>
            <param name="pane">The <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.GraphPane"/> object that contains the cursor of interest</param>
            <param name="mousePt">The <see cref="T:Alt.Sketch.PointI"/> object that represents the cursor value location</param>
            <seealso cref="E:Alt.GUI.ZedGraph.ZedGraphControl.CursorValueEvent"/>
        </member>
        <member name="T:Alt.GUI.ZedGraph.ZedGraphControl.ZedMouseEventHandler">
            <summary>
            A delegate that allows notification of mouse events on Graph objects.
            </summary>
            <param name="sender">The source <see cref="T:Alt.GUI.ZedGraph.ZedGraphControl"/> object</param>
            <param name="e">A <see cref="T:Alt.GUI.MouseEventArgs"/> corresponding to this event</param>
            <seealso cref="E:Alt.GUI.ZedGraph.ZedGraphControl.MouseDownEvent"/>
            <returns>
            Return true if you have handled the mouse event entirely, and you do not
            want the <see cref="T:Alt.GUI.ZedGraph.ZedGraphControl"/> to do any further action (e.g., starting
            a zoom operation).  Return false if ZedGraph should go ahead and process the
            mouse event.
            </returns>
        </member>
        <member name="T:Alt.GUI.ZedGraph.ZedGraphControl.LinkEventHandler">
            <summary>
            A delegate that allows notification of clicks on ZedGraph objects that have
            active links enabled
            </summary>
            <param name="sender">The source <see cref="T:Alt.GUI.ZedGraph.ZedGraphControl"/> object</param>
            <param name="pane">The source <see cref="P:Alt.GUI.ZedGraph.ZedGraphControl.GraphPane"/> in which the click
            occurred.
            </param>
            <param name="source">The source object which was clicked.  This is typically
            a type of <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> if a curve point was clicked, or
            a type of <see cref="T:Alt.GUI.ZedGraph.GraphObj"/> if a graph object was clicked.
            </param>
            <param name="link">The <see cref="T:Alt.GUI.ZedGraph.Link"/> object, belonging to
            <paramref name="source"/>, that contains the link information
            </param>
            <param name="index">An index value, typically used if a <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>
            was clicked, indicating the ordinal value of the actual point that was clicked.
            </param>
            <returns>
            Return true if you have handled the LinkEvent entirely, and you do not
            want the <see cref="T:Alt.GUI.ZedGraph.ZedGraphControl"/> to do any further action.
            Return false if ZedGraph should go ahead and process the LinkEvent.
            </returns>
        </member>
        <member name="T:Alt.GUI.ZedGraph.ArrowObj">
            <summary>
            A class that represents a graphic arrow or line object on the graph.  A list of
            ArrowObj objects is maintained by the <see cref="T:Alt.GUI.ZedGraph.GraphObjList"/> collection class.
            </summary>
            
            <author> John Champion </author>
            <version> $Revision: 3.4 $ $Date: 2007-01-25 07:56:08 $ </version>
        </member>
        <member name="T:Alt.GUI.ZedGraph.LineObj">
            <summary>
            A class that represents a line segment object on the graph.  A list of
            GraphObj objects is maintained by the <see cref="T:Alt.GUI.ZedGraph.GraphObjList"/> collection class.
            </summary>
            <remarks>
            This should not be confused with the <see cref="T:Alt.GUI.ZedGraph.LineItem"/> class, which represents
            a set of points plotted together as a "curve".  The <see cref="T:Alt.GUI.ZedGraph.LineObj"/> class is
            a single line segment, drawn as a "decoration" on the chart.</remarks>
            
            <author> John Champion </author>
            <version> $Revision: 3.4 $ $Date: 2007-01-25 07:56:09 $ </version>
        </member>
        <member name="T:Alt.GUI.ZedGraph.GraphObj">
            <summary>
            An abstract base class that represents a text object on the graph.  A list of
            <see cref="T:Alt.GUI.ZedGraph.GraphObj"/> objects is maintained by the
            <see cref="T:Alt.GUI.ZedGraph.GraphObjList"/> collection class.
            </summary>
            
            <author> John Champion </author>
            <version> $Revision: 3.1 $ $Date: 2006-06-24 20:26:44 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GraphObj.schema">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
            <remarks>
            schema changed to 2 when isClippedToChartRect was added.
            </remarks>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GraphObj._location">
            <summary>
            Protected field that stores the location of this <see cref="T:Alt.GUI.ZedGraph.GraphObj"/>.
            Use the public property <see cref="P:Alt.GUI.ZedGraph.GraphObj.Location"/> to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GraphObj._isVisible">
            <summary>
            Protected field that determines whether or not this <see cref="T:Alt.GUI.ZedGraph.GraphObj"/>
            is visible in the graph.  Use the public property <see cref="P:Alt.GUI.ZedGraph.GraphObj.IsVisible"/> to
            access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GraphObj._isClippedToChartRect">
            <summary>
            Protected field that determines whether or not the rendering of this <see cref="T:Alt.GUI.ZedGraph.GraphObj"/>
            will be clipped to the ChartRect.  Use the public property <see cref="P:Alt.GUI.ZedGraph.GraphObj.IsClippedToChartRect"/> to
            access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GraphObj.Tag">
            <summary>
            A tag object for use by the user.  This can be used to store additional
            information associated with the <see cref="T:Alt.GUI.ZedGraph.GraphObj"/>.  ZedGraph does
            not use this value for any purpose.
            </summary>
            <remarks>
            Note that, if you are going to Serialize ZedGraph data, then any type
            that you store in <see cref="F:Alt.GUI.ZedGraph.GraphObj.Tag"/> must be a serializable type (or
            it will cause an exception).
            </remarks>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GraphObj._zOrder">
            <summary>
            Internal field that determines the z-order "depth" of this
            item relative to other graphic objects.  Use the public property
            <see cref="P:Alt.GUI.ZedGraph.GraphObj.ZOrder"/> to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GraphObj._link">
            <summary>
            Internal field that stores the hyperlink information for this object.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphObj.#ctor">
            <overloads>
            Constructors for the <see cref="T:Alt.GUI.ZedGraph.GraphObj"/> class.
            </overloads>
            <summary>
            Default constructor that sets all <see cref="T:Alt.GUI.ZedGraph.GraphObj"/> properties to default
            values as defined in the <see cref="T:Alt.GUI.ZedGraph.GraphObj.Default"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphObj.#ctor(System.Double,System.Double)">
            <summary>
            Constructor that sets all <see cref="T:Alt.GUI.ZedGraph.GraphObj"/> properties to default
            values as defined in the <see cref="T:Alt.GUI.ZedGraph.GraphObj.Default"/> class.
            </summary>
            <param name="x">The x position of the text.  The units
            of this position are specified by the
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/> property.  The text will be
            aligned to this position based on the <see cref="T:Alt.GUI.ZedGraph.AlignH"/>
            property.</param>
            <param name="y">The y position of the text.  The units
            of this position are specified by the
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/> property.  The text will be
            aligned to this position based on the
            <see cref="T:Alt.GUI.ZedGraph.AlignV"/> property.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphObj.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor that creates a <see cref="T:Alt.GUI.ZedGraph.GraphObj"/> with the specified
            coordinates and all other properties to defaults as specified
            in the <see cref="T:Alt.GUI.ZedGraph.GraphObj.Default"/> class..
            </summary>
            <remarks>
            The four coordinates define the starting point and ending point for
            <see cref="T:Alt.GUI.ZedGraph.ArrowObj"/>'s, or the topleft and bottomright points for
            <see cref="T:Alt.GUI.ZedGraph.ImageObj"/>'s.  For <see cref="T:Alt.GUI.ZedGraph.GraphObj"/>'s that only require
            one point, the <see paramref="x2"/> and <see paramref="y2"/> values
            will be ignored.  The units of the coordinates are specified by the
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/> property.
            </remarks>
            <param name="x">The x position of the item.</param>
            <param name="y">The y position of the item.</param>
            <param name="x2">The x2 position of the item.</param>
            <param name="y2">The x2 position of the item.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphObj.#ctor(System.Double,System.Double,Alt.GUI.ZedGraph.CoordType)">
            <summary>
            Constructor that creates a <see cref="T:Alt.GUI.ZedGraph.GraphObj"/> with the specified
            position and <see cref="T:Alt.GUI.ZedGraph.CoordType"/>.  Other properties are set to default
            values as defined in the <see cref="T:Alt.GUI.ZedGraph.GraphObj.Default"/> class.
            </summary>
            <remarks>
            The two coordinates define the location point for the object.
            The units of the coordinates are specified by the
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/> property.
            </remarks>
            <param name="x">The x position of the item.  The item will be
            aligned to this position based on the <see cref="T:Alt.GUI.ZedGraph.AlignH"/>
            property.</param>
            <param name="y">The y position of the item.  The item will be
            aligned to this position based on the
            <see cref="T:Alt.GUI.ZedGraph.AlignV"/> property.</param>
            <param name="coordType">The <see cref="T:Alt.GUI.ZedGraph.CoordType"/> enum value that
            indicates what type of coordinate system the x and y parameters are
            referenced to.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphObj.#ctor(System.Double,System.Double,Alt.GUI.ZedGraph.CoordType,Alt.GUI.ZedGraph.AlignH,Alt.GUI.ZedGraph.AlignV)">
            <summary>
            Constructor that creates a <see cref="T:Alt.GUI.ZedGraph.GraphObj"/> with the specified
            position, <see cref="T:Alt.GUI.ZedGraph.CoordType"/>, <see cref="T:Alt.GUI.ZedGraph.AlignH"/>, and <see cref="T:Alt.GUI.ZedGraph.AlignV"/>.
            Other properties are set to default values as defined in the <see cref="T:Alt.GUI.ZedGraph.GraphObj.Default"/> class.
            </summary>
            <remarks>
            The two coordinates define the location point for the object.
            The units of the coordinates are specified by the
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/> property.
            </remarks>
            <param name="x">The x position of the item.  The item will be
            aligned to this position based on the <see cref="T:Alt.GUI.ZedGraph.AlignH"/>
            property.</param>
            <param name="y">The y position of the text.  The units
            of this position are specified by the
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/> property.  The text will be
            aligned to this position based on the
            <see cref="T:Alt.GUI.ZedGraph.AlignV"/> property.</param>
            <param name="coordType">The <see cref="T:Alt.GUI.ZedGraph.CoordType"/> enum value that
            indicates what type of coordinate system the x and y parameters are
            referenced to.</param>
            <param name="alignH">The <see cref="T:Alt.GUI.ZedGraph.AlignH"/> enum that specifies
            the horizontal alignment of the object with respect to the (x,y) location</param>
            <param name="alignV">The <see cref="T:Alt.GUI.ZedGraph.AlignV"/> enum that specifies
            the vertical alignment of the object with respect to the (x,y) location</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphObj.#ctor(System.Double,System.Double,System.Double,System.Double,Alt.GUI.ZedGraph.CoordType,Alt.GUI.ZedGraph.AlignH,Alt.GUI.ZedGraph.AlignV)">
            <summary>
            Constructor that creates a <see cref="T:Alt.GUI.ZedGraph.GraphObj"/> with the specified
            position, <see cref="T:Alt.GUI.ZedGraph.CoordType"/>, <see cref="T:Alt.GUI.ZedGraph.AlignH"/>, and <see cref="T:Alt.GUI.ZedGraph.AlignV"/>.
            Other properties are set to default values as defined in the <see cref="T:Alt.GUI.ZedGraph.GraphObj.Default"/> class.
            </summary>
            <remarks>
            The four coordinates define the starting point and ending point for
            <see cref="T:Alt.GUI.ZedGraph.ArrowObj"/>'s, or the topleft and bottomright points for
            <see cref="T:Alt.GUI.ZedGraph.ImageObj"/>'s.  For <see cref="T:Alt.GUI.ZedGraph.GraphObj"/>'s that only require
            one point, the <see paramref="x2"/> and <see paramref="y2"/> values
            will be ignored.  The units of the coordinates are specified by the
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/> property.
            </remarks>
            <param name="x">The x position of the item.</param>
            <param name="y">The y position of the item.</param>
            <param name="x2">The x2 position of the item.</param>
            <param name="y2">The x2 position of the item.</param>
            <param name="coordType">The <see cref="T:Alt.GUI.ZedGraph.CoordType"/> enum value that
            indicates what type of coordinate system the x and y parameters are
            referenced to.</param>
            <param name="alignH">The <see cref="T:Alt.GUI.ZedGraph.AlignH"/> enum that specifies
            the horizontal alignment of the object with respect to the (x,y) location</param>
            <param name="alignV">The <see cref="T:Alt.GUI.ZedGraph.AlignV"/> enum that specifies
            the vertical alignment of the object with respect to the (x,y) location</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphObj.#ctor(Alt.GUI.ZedGraph.GraphObj)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:Alt.GUI.ZedGraph.GraphObj"/> object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphObj.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of Clone.
            </summary>
            <remarks>
            Note that this method must be called with an explicit cast to ICloneable, and
            that it is inherently virtual.  For example:
            <code>
            ParentClass foo = new ChildClass();
            ChildClass bar = (ChildClass) ((ICloneable)foo).Clone();
            </code>
            Assume that ChildClass is inherited from ParentClass.  Even though foo is declared with
            ParentClass, it is actually an instance of ChildClass.  Calling the ICloneable implementation
            of Clone() on foo actually calls ChildClass.Clone() as if it were a virtual function.
            </remarks>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphObj.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphObj.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphObj.Draw(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.PaneBase,System.Double)">
            <summary>
            Render this <see cref="T:Alt.GUI.ZedGraph.GraphObj"/> object to the specified <see cref="T:Alt.Sketch.Graphics"/> device.
            </summary>
            <remarks>
            This method is normally only called by the Draw method
            of the parent <see cref="T:Alt.GUI.ZedGraph.GraphObjList"/> collection object.
            </remarks>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.PaneBase"/> object that is the parent or
            owner of this object.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.PaneBase"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphObj.PointInBox(Alt.Sketch.Point,Alt.GUI.ZedGraph.PaneBase,Alt.Sketch.Graphics,System.Double)">
            <summary>
            Determine if the specified screen point lies inside the bounding box of this
            <see cref="T:Alt.GUI.ZedGraph.GraphObj"/>.
            </summary>
            <param name="pt">The screen point, in pixels</param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.PaneBase"/> object that is the parent or
            owner of this object.
            </param>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.PaneBase"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <returns>true if the point lies in the bounding box, false otherwise</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphObj.GetCoords(Alt.GUI.ZedGraph.PaneBase,Alt.Sketch.Graphics,System.Double,System.String@,System.String@)">
            <summary>
            Determines the shape type and Coords values for this GraphObj
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.GraphObj.Location">
            <summary>
            The <see cref="T:Alt.GUI.ZedGraph.Location"/> struct that describes the location
            for this <see cref="T:Alt.GUI.ZedGraph.GraphObj"/>.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.GraphObj.ZOrder">
            <summary>
            Gets or sets a value that determines the z-order "depth" of this
            item relative to other graphic objects.
            </summary>
            <remarks>Note that this controls the z-order with respect to
            other elements such as <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>'s, <see cref="T:Alt.GUI.ZedGraph.Axis"/>
            objects, etc.  The order of <see cref="T:Alt.GUI.ZedGraph.GraphObj"/> objects having
            the same <see cref="T:Alt.GUI.ZedGraph.ZOrder"/> value is controlled by their order in
            the <see cref="T:Alt.GUI.ZedGraph.GraphObjList"/>.  The first <see cref="T:Alt.GUI.ZedGraph.GraphObj"/>
            in the list is drawn in front of other <see cref="T:Alt.GUI.ZedGraph.GraphObj"/>
            objects having the same <see cref="T:Alt.GUI.ZedGraph.ZOrder"/> value.</remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.GraphObj.IsVisible">
            <summary>
            Gets or sets a value that determines if this <see cref="T:Alt.GUI.ZedGraph.GraphObj"/> will be
            visible in the graph.  true displays the item, false hides it.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.GraphObj.IsClippedToChartRect">
            <summary>
            Gets or sets a value that determines whether or not the rendering of this <see cref="T:Alt.GUI.ZedGraph.GraphObj"/>
            will be clipped to the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>.
            </summary>
            <value>true to clip the <see cref="T:Alt.GUI.ZedGraph.GraphObj"/> to the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/> bounds,
            false to leave it unclipped.</value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.GraphObj.Link">
            <summary>
            Gets or sets the hyperlink information for this <see cref="T:Alt.GUI.ZedGraph.GraphObj"/>.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.GraphObj.IsInFrontOfData">
            <summary>
            true if the <see cref="P:Alt.GUI.ZedGraph.GraphObj.ZOrder"/> of this object is set to put it in front
            of the <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> data points.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.GraphObj.Default">
            <summary>
            A simple struct that defines the
            default property values for the <see cref="T:Alt.GUI.ZedGraph.GraphObj"/> class.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GraphObj.Default.AlignV">
            <summary>
            Default value for the vertical <see cref="T:Alt.GUI.ZedGraph.GraphObj"/>
            text alignment (<see cref="P:Alt.GUI.ZedGraph.GraphObj.Location"/> property).
            This is specified
            using the <see cref="F:Alt.GUI.ZedGraph.GraphObj.Default.AlignV"/> enum type.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GraphObj.Default.AlignH">
            <summary>
            Default value for the horizontal <see cref="T:Alt.GUI.ZedGraph.GraphObj"/>
            text alignment (<see cref="P:Alt.GUI.ZedGraph.GraphObj.Location"/> property).
            This is specified
            using the <see cref="F:Alt.GUI.ZedGraph.GraphObj.Default.AlignH"/> enum type.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GraphObj.Default.CoordFrame">
            <summary>
            The default coordinate system to be used for defining the
            <see cref="T:Alt.GUI.ZedGraph.GraphObj"/> location coordinates
            (<see cref="P:Alt.GUI.ZedGraph.GraphObj.Location"/> property).
            </summary>
            <value> The coordinate system is defined with the <see cref="T:Alt.GUI.ZedGraph.CoordType"/>
            enum</value>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GraphObj.Default.IsClippedToChartRect">
            <summary>
            The default value for <see cref="P:Alt.GUI.ZedGraph.GraphObj.IsClippedToChartRect"/>.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.LineObj.schema2">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.LineObj._line">
            <summary>
            protected field that maintains the attributes of the line using an
            instance of the <see cref="T:Alt.GUI.ZedGraph.LineBase"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LineObj.#ctor(Alt.Sketch.Color,System.Double,System.Double,System.Double,System.Double)">
            <overloads>Constructors for the <see cref="T:Alt.GUI.ZedGraph.LineObj"/> object</overloads>
            <summary>
            A constructor that allows the position, color, and size of the
            <see cref="T:Alt.GUI.ZedGraph.LineObj"/> to be pre-specified.
            </summary>
            <param name="color">An arbitrary <see cref="!:System.Drawing.Color"/> specification
            for the arrow</param>
            <param name="x1">The x position of the starting point that defines the
            line.  The units of this position are specified by the
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/> property.</param>
            <param name="y1">The y position of the starting point that defines the
            line.  The units of this position are specified by the
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/> property.</param>
            <param name="x2">The x position of the ending point that defines the
            line.  The units of this position are specified by the
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/> property.</param>
            <param name="y2">The y position of the ending point that defines the
            line.  The units of this position are specified by the
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/> property.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LineObj.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            A constructor that allows only the position of the
            line to be pre-specified.  All other properties are set to
            default values
            </summary>
            <param name="x1">The x position of the starting point that defines the
            <see cref="T:Alt.GUI.ZedGraph.LineObj"/>.  The units of this position are specified by the
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/> property.</param>
            <param name="y1">The y position of the starting point that defines the
            <see cref="T:Alt.GUI.ZedGraph.LineObj"/>.  The units of this position are specified by the
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/> property.</param>
            <param name="x2">The x position of the ending point that defines the
            <see cref="T:Alt.GUI.ZedGraph.LineObj"/>.  The units of this position are specified by the
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/> property.</param>
            <param name="y2">The y position of the ending point that defines the
            <see cref="T:Alt.GUI.ZedGraph.LineObj"/>.  The units of this position are specified by the
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/> property.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LineObj.#ctor">
            <summary>
            Default constructor -- places the <see cref="T:Alt.GUI.ZedGraph.LineObj"/> at location
            (0,0) to (1,1).  All other values are defaulted.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LineObj.#ctor(Alt.GUI.ZedGraph.LineObj)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:Alt.GUI.ZedGraph.LineObj"/> object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LineObj.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.LineObj.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LineObj.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LineObj.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LineObj.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LineObj.Draw(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.PaneBase,System.Double)">
            <summary>
            Render this object to the specified <see cref="T:Alt.Sketch.Graphics"/> device.
            </summary>
            <remarks>
            This method is normally only called by the Draw method
            of the parent <see cref="T:Alt.GUI.ZedGraph.GraphObjList"/> collection object.
            </remarks>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.PaneBase"/> object that is the parent or
            owner of this object.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LineObj.PointInBox(Alt.Sketch.Point,Alt.GUI.ZedGraph.PaneBase,Alt.Sketch.Graphics,System.Double)">
            <summary>
            Determine if the specified screen point lies inside the bounding box of this
            <see cref="T:Alt.GUI.ZedGraph.LineObj"/>.
            </summary>
            <remarks>The bounding box is calculated assuming a distance
            of <see cref="F:Alt.GUI.ZedGraph.GraphPane.Default.NearestTol"/> pixels around the arrow segment.
            </remarks>
            <param name="pt">The screen point, in pixels</param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.PaneBase"/> object that is the parent or
            owner of this object.
            </param>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <returns>true if the point lies in the bounding box, false otherwise</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LineObj.GetCoords(Alt.GUI.ZedGraph.PaneBase,Alt.Sketch.Graphics,System.Double,System.String@,System.String@)">
            <summary>
            Determines the shape type and Coords values for this GraphObj
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.LineObj.Line">
            <summary>
            A <see cref="T:Alt.GUI.ZedGraph.LineBase"/> class that contains the attributes for drawing this
            <see cref="T:Alt.GUI.ZedGraph.LineObj"/>.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ArrowObj.schema3">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ArrowObj._size">
            <summary>
            Private field that stores the arrowhead size, measured in points.
            Use the public property <see cref="P:Alt.GUI.ZedGraph.ArrowObj.Size"/> to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ArrowObj._isArrowHead">
            <summary>
            Private boolean field that stores the arrowhead state.
            Use the public property <see cref="P:Alt.GUI.ZedGraph.ArrowObj.IsArrowHead"/> to access this value.
            </summary>
            <value> true if an arrowhead is to be drawn, false otherwise </value>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ArrowObj.#ctor(Alt.Sketch.Color,System.Single,System.Double,System.Double,System.Double,System.Double)">
            <overloads>Constructors for the <see cref="T:Alt.GUI.ZedGraph.ArrowObj"/> object</overloads>
            <summary>
            A constructor that allows the position, color, and size of the
            <see cref="T:Alt.GUI.ZedGraph.ArrowObj"/> to be pre-specified.
            </summary>
            <param name="color">An arbitrary <see cref="!:System.Drawing.Color"/> specification
            for the arrow</param>
            <param name="size">The size of the arrowhead, measured in points.</param>
            <param name="x1">The x position of the starting point that defines the
            arrow.  The units of this position are specified by the
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/> property.</param>
            <param name="y1">The y position of the starting point that defines the
            arrow.  The units of this position are specified by the
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/> property.</param>
            <param name="x2">The x position of the ending point that defines the
            arrow.  The units of this position are specified by the
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/> property.</param>
            <param name="y2">The y position of the ending point that defines the
            arrow.  The units of this position are specified by the
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/> property.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ArrowObj.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            A constructor that allows only the position of the
            arrow to be pre-specified.  All other properties are set to
            default values
            </summary>
            <param name="x1">The x position of the starting point that defines the
            <see cref="T:Alt.GUI.ZedGraph.ArrowObj"/>.  The units of this position are specified by the
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/> property.</param>
            <param name="y1">The y position of the starting point that defines the
            <see cref="T:Alt.GUI.ZedGraph.ArrowObj"/>.  The units of this position are specified by the
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/> property.</param>
            <param name="x2">The x position of the ending point that defines the
            <see cref="T:Alt.GUI.ZedGraph.ArrowObj"/>.  The units of this position are specified by the
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/> property.</param>
            <param name="y2">The y position of the ending point that defines the
            <see cref="T:Alt.GUI.ZedGraph.ArrowObj"/>.  The units of this position are specified by the
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/> property.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ArrowObj.#ctor">
            <summary>
            Default constructor -- places the <see cref="T:Alt.GUI.ZedGraph.ArrowObj"/> at location
            (0,0) to (1,1).  All other values are defaulted.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ArrowObj.#ctor(Alt.GUI.ZedGraph.ArrowObj)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:Alt.GUI.ZedGraph.ArrowObj"/> object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ArrowObj.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.ArrowObj.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ArrowObj.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ArrowObj.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ArrowObj.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ArrowObj.Draw(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.PaneBase,System.Double)">
            <summary>
            Render this object to the specified <see cref="T:Alt.Sketch.Graphics"/> device.
            </summary>
            <remarks>
            This method is normally only called by the Draw method
            of the parent <see cref="T:Alt.GUI.ZedGraph.GraphObjList"/> collection object.
            </remarks>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.PaneBase"/> object that is the parent or
            owner of this object.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ArrowObj.Size">
            <summary>
            The size of the arrowhead.
            </summary>
            <remarks>The display of the arrowhead can be
            enabled or disabled with the <see cref="P:Alt.GUI.ZedGraph.ArrowObj.IsArrowHead"/> property.
            </remarks>
            <value> The size is defined in points (1/72 inch) </value>
            <seealso cref="F:Alt.GUI.ZedGraph.ArrowObj.Default.Size"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ArrowObj.IsArrowHead">
            <summary>
            Determines whether or not to draw an arrowhead
            </summary>
            <value> true to show the arrowhead, false to show the line segment
            only</value>
            <seealso cref="F:Alt.GUI.ZedGraph.ArrowObj.Default.IsArrowHead"/>
        </member>
        <member name="T:Alt.GUI.ZedGraph.ArrowObj.Default">
            <summary>
            A simple struct that defines the
            default property values for the <see cref="T:Alt.GUI.ZedGraph.ArrowObj"/> class.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ArrowObj.Default.Size">
            <summary>
            The default size for the <see cref="T:Alt.GUI.ZedGraph.ArrowObj"/> item arrowhead
            (<see cref="P:Alt.GUI.ZedGraph.ArrowObj.Size"/> property).  Units are in points (1/72 inch).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ArrowObj.Default.IsArrowHead">
            <summary>
            The default display mode for the <see cref="T:Alt.GUI.ZedGraph.ArrowObj"/> item arrowhead
            (<see cref="P:Alt.GUI.ZedGraph.ArrowObj.IsArrowHead"/> property).  true to show the
            arrowhead, false to hide it.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Axis">
            <summary>
            The Axis class is an abstract base class that encompasses all properties
            and methods required to define a graph Axis.
            </summary>
            <remarks>This class is inherited by the
            <see cref="T:Alt.GUI.ZedGraph.XAxis"/>, <see cref="T:Alt.GUI.ZedGraph.YAxis"/>, and <see cref="T:Alt.GUI.ZedGraph.Y2Axis"/> classes
            to define specific characteristics for those types.
            </remarks>
            
            <author> John Champion modified by Jerry Vos </author>
            <version> $Revision: 3.76 $ $Date: 2008-02-16 23:21:48 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Axis.schema">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Axis._scale">
            <summary>
            private field that stores the <see cref="T:Alt.GUI.ZedGraph.Scale"/> class, which implements all the
            calculations and methods associated with the numeric scale for this
            <see cref="T:Alt.GUI.ZedGraph.Axis"/>.  See the public property <see cref="P:Alt.GUI.ZedGraph.Axis.Scale"/> to access this class.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Axis._minorTic">
            <summary>
            Private field that stores the <see cref="T:Alt.GUI.ZedGraph.MinorTic"/> class, which handles all
            the minor tic information.  See the public property <see cref="P:Alt.GUI.ZedGraph.Axis.MinorTic"/> to access this class.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Axis._majorTic">
            <summary>
            Private field that stores the <see cref="T:Alt.GUI.ZedGraph.MajorTic"/> class, which handles all
            the major tic information.  See the public property <see cref="P:Alt.GUI.ZedGraph.Axis.MajorTic"/> to access this class.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Axis._majorGrid">
            <summary>
            Private field that stores the <see cref="T:Alt.GUI.ZedGraph.MajorGrid"/> class, which handles all
            the major grid information.  See the public property <see cref="P:Alt.GUI.ZedGraph.Axis.MajorGrid"/> to access this class.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Axis._minorGrid">
            <summary>
            Private field that stores the <see cref="T:Alt.GUI.ZedGraph.MinorGrid"/> class, which handles all
            the minor grid information.  See the public property <see cref="P:Alt.GUI.ZedGraph.Axis.MinorGrid"/> to access this class.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Axis._cross">
            <summary> Private fields for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> scale rendering properties.
            Use the public properties <see cref="P:Alt.GUI.ZedGraph.Axis.Cross"/> and <see cref="P:Alt.GUI.ZedGraph.Scale.BaseTic"/>
            for access to these values.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Axis._crossAuto">
            <summary> Private field for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> automatic cross position mode.
            Use the public property <see cref="P:Alt.GUI.ZedGraph.Axis.CrossAuto"/> for access to this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Axis._isVisible">
            <summary> Private fields for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> attributes.
            Use the public properties <see cref="P:Alt.GUI.ZedGraph.Axis.IsVisible"/>, <see cref="P:Alt.GUI.ZedGraph.Axis.IsAxisSegmentVisible"/>
            for access to these values.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Axis._isAxisSegmentVisible">
            <summary> Private fields for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> attributes.
            Use the public properties <see cref="P:Alt.GUI.ZedGraph.Axis.IsVisible"/>, <see cref="P:Alt.GUI.ZedGraph.Axis.IsAxisSegmentVisible"/>
            for access to these values.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Axis._title">
            <summary> Private field for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> title string.
            Use the public property <see cref="P:Alt.GUI.ZedGraph.Axis.Title"/> for access to this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Axis.Tag">
            <summary>
            A tag object for use by the user.  This can be used to store additional
            information associated with the <see cref="T:Alt.GUI.ZedGraph.Axis"/>.  ZedGraph does
            not use this value for any purpose.
            </summary>
            <remarks>
            Note that, if you are going to Serialize ZedGraph data, then any type
            that you store in <see cref="F:Alt.GUI.ZedGraph.Axis.Tag"/> must be a serializable type (or
            it will cause an exception).
            </remarks>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Axis._axisGap">
            <summary> Private field for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> drawing dimensions.
            Use the public property <see cref="P:Alt.GUI.ZedGraph.Axis.AxisGap"/>
            for access to these values. </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Axis._minSpace">
            <summary>
            Private field for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> minimum allowable space allocation.
            Use the public property <see cref="P:Alt.GUI.ZedGraph.Axis.MinSpace"/> to access this value.
            </summary>
            <seealso cref="F:Alt.GUI.ZedGraph.Axis.Default.MinSpace"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Axis._color">
            <summary> Private fields for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> colors.
            Use the public property <see cref="P:Alt.GUI.ZedGraph.Axis.Color"/> for access to this values.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Axis._tmpSpace">
            <summary>
            Temporary values for axis space calculations (see <see cref="M:Alt.GUI.ZedGraph.Axis.CalcSpace(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,System.Double,System.Double@)"/>).
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Axis.#ctor">
            <summary>
            Default constructor for <see cref="T:Alt.GUI.ZedGraph.Axis"/> that sets all axis properties
            to default values as defined in the <see cref="T:Alt.GUI.ZedGraph.Axis.Default"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Axis.#ctor(System.String)">
            <summary>
            Constructor for <see cref="T:Alt.GUI.ZedGraph.Axis"/> that sets all axis properties
            to default values as defined in the <see cref="T:Alt.GUI.ZedGraph.Axis.Default"/> class,
            except for the <see cref="P:Alt.GUI.ZedGraph.Axis.Title"/>.
            </summary>
            <param name="title">A string containing the axis title</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Axis.#ctor(Alt.GUI.ZedGraph.Axis)">
            <summary>
            The Copy Constructor.
            </summary>
            <param name="rhs">The Axis object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Axis.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of Clone.
            </summary>
            <remarks>
            Note that this method must be called with an explicit cast to ICloneable, and
            that it is inherently virtual.  For example:
            <code>
            ParentClass foo = new ChildClass();
            ChildClass bar = (ChildClass) ((ICloneable)foo).Clone();
            </code>
            Assume that ChildClass is inherited from ParentClass.  Even though foo is declared with
            ParentClass, it is actually an instance of ChildClass.  Calling the ICloneable implementation
            of Clone() on foo actually calls ChildClass.Clone() as if it were a virtual function.
            </remarks>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Axis.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Axis.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Axis.ResetAutoScale(Alt.GUI.ZedGraph.GraphPane,Alt.Sketch.Graphics)">
            <summary>
            Restore the scale ranging to automatic mode, and recalculate the
            <see cref="T:Alt.GUI.ZedGraph.Axis"/> scale ranges
            </summary>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.MinAuto"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.MaxAuto"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.MajorStepAuto"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.MagAuto"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.FormatAuto"/>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Axis.Draw(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,System.Double,System.Double)">
            <summary>
            Do all rendering associated with this <see cref="T:Alt.GUI.ZedGraph.Axis"/> to the specified
            <see cref="T:Alt.Sketch.Graphics"/> device.
            </summary>
            <remarks>
            This method is normally only
            called by the Draw method of the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object.
            </remarks>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <param name="shiftPos">
            The number of pixels to shift to account for non-primary axis position (e.g.,
            the second, third, fourth, etc. <see cref="T:Alt.GUI.ZedGraph.YAxis"/> or <see cref="T:Alt.GUI.ZedGraph.Y2Axis"/>.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Axis.SetMinSpaceBuffer(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,System.Double,System.Boolean)">
            <summary>
            This method will set the <see cref="P:Alt.GUI.ZedGraph.Axis.MinSpace"/> property for this <see cref="T:Alt.GUI.ZedGraph.Axis"/>
            using the currently required space multiplied by a fraction (<paramref>bufferFraction</paramref>).
            </summary>
            <remarks>
            The currently required space is calculated using <see cref="M:Alt.GUI.ZedGraph.Axis.CalcSpace(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,System.Double,System.Double@)"/>, and is
            based on current data ranges, font sizes, etc.  The "space" is actually the amount of space
            required to fit the tic marks, scale labels, and axis title.
            </remarks>
            <param name="g">A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.</param>
            <param name="pane">A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.</param>
            <param name="bufferFraction">The amount of space to allocate for the axis, expressed
            as a fraction of the currently required space.  For example, a value of 1.2 would
            allow for 20% extra above the currently required space.</param>
            <param name="isGrowOnly">If true, then this method will only modify the <see cref="P:Alt.GUI.ZedGraph.Axis.MinSpace"/>
            property if the calculated result is more than the current value.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Axis.SetTransformMatrix(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,System.Double)">
            <summary>
            Setup the Transform Matrix to handle drawing of this <see cref="T:Alt.GUI.ZedGraph.Axis"/>
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Axis.CalcCrossShift(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Calculate the "shift" size, in pixels, in order to shift the axis from its default
            location to the value specified by <see cref="P:Alt.GUI.ZedGraph.Axis.Cross"/>.
            </summary>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <returns>The shift amount measured in pixels</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Axis.GetCrossAxis(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Gets the "Cross" axis that corresponds to this axis.
            </summary>
            <remarks>
            The cross axis is the axis which determines the of this Axis when the
            <see cref="P:Alt.GUI.ZedGraph.Axis.Cross">Axis.Cross</see> property is used.  The
            cross axis for any <see cref="T:Alt.GUI.ZedGraph.XAxis"/> or <see cref="T:Alt.GUI.ZedGraph.X2Axis"/>
            is always the primary <see cref="T:Alt.GUI.ZedGraph.YAxis"/>, and
            the cross axis for any <see cref="T:Alt.GUI.ZedGraph.YAxis"/> or <see cref="T:Alt.GUI.ZedGraph.Y2Axis"/> is
            always the primary <see cref="T:Alt.GUI.ZedGraph.XAxis"/>.
            </remarks>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Axis.EffectiveCrossValue(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Returns the linearized actual cross position for this axis, reflecting the settings of
            <see cref="P:Alt.GUI.ZedGraph.Axis.Cross"/>, <see cref="P:Alt.GUI.ZedGraph.Axis.CrossAuto"/>, and <see cref="P:Alt.GUI.ZedGraph.Scale.IsReverse"/>.
            </summary>
            <remarks>
            If the value of <see cref="P:Alt.GUI.ZedGraph.Axis.Cross"/> lies outside the axis range, it is
            limited to the axis range.
            </remarks>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Axis.IsCrossShifted(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Returns true if the axis is shifted at all due to the setting of
            <see cref="P:Alt.GUI.ZedGraph.Axis.Cross"/>.  This function will always return false if
            <see cref="P:Alt.GUI.ZedGraph.Axis.CrossAuto"/> is true.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Axis.CalcCrossFraction(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Calculates the proportional fraction of the total cross axis width at which
            this axis is located.
            </summary>
            <param name="pane"></param>
            <returns></returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Axis.CalcSpace(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,System.Double,System.Double@)">
            <summary>
            Calculate the space required (pixels) for this <see cref="T:Alt.GUI.ZedGraph.Axis"/> object.
            </summary>
            <remarks>
            This is the total space (vertical space for the X axis, horizontal space for
            the Y axes) required to contain the axis.  If <see cref="P:Alt.GUI.ZedGraph.Axis.Cross"/> is zero, then
            this space will be the space required between the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/> and
            the <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/>.  This method sets the internal values of
            <see cref="F:Alt.GUI.ZedGraph.Axis._tmpSpace"/> for use by the <see cref="M:Alt.GUI.ZedGraph.GraphPane.CalcChartRect(Alt.Sketch.Graphics)"/>
            method.
            </remarks>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <param name="fixedSpace">The amount of space (pixels) at the edge of the ChartRect
            that is always required for this axis, even if the axis is shifted by the
            <see cref="P:Alt.GUI.ZedGraph.Axis.Cross"/> value.</param>
            <returns>Returns the space, in pixels, required for this axis (between the
            rect and ChartRect)</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Axis.IsPrimary(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Determines if this <see cref="T:Alt.GUI.ZedGraph.Axis"/> object is a "primary" one.
            </summary>
            <remarks>
            The primary axes are the <see cref="T:Alt.GUI.ZedGraph.XAxis"/> (always), the first
            <see cref="T:Alt.GUI.ZedGraph.YAxis"/> in the <see cref="P:Alt.GUI.ZedGraph.GraphPane.YAxisList"/> 
            (<see cref="P:Alt.GUI.ZedGraph.CurveItem.YAxisIndex"/> = 0),  and the first
            <see cref="T:Alt.GUI.ZedGraph.Y2Axis"/> in the <see cref="P:Alt.GUI.ZedGraph.GraphPane.Y2AxisList"/> 
            (<see cref="P:Alt.GUI.ZedGraph.CurveItem.YAxisIndex"/> = 0).  Note that
            <see cref="P:Alt.GUI.ZedGraph.GraphPane.YAxis"/> and <see cref="P:Alt.GUI.ZedGraph.GraphPane.Y2Axis"/>
            always reference the primary axes.
            </remarks>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <returns>true for a primary <see cref="T:Alt.GUI.ZedGraph.Axis"/> (for the <see cref="T:Alt.GUI.ZedGraph.XAxis"/>,
            this is always true), false otherwise</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Axis.DrawMinorTics(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw the minor tic marks as required for this <see cref="T:Alt.GUI.ZedGraph.Axis"/>.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="baseVal">
            The scale value for the first major tic position.  This is the reference point
            for all other tic marks.
            </param>
            <param name="shift">The number of pixels to shift this axis, based on the
            value of <see cref="P:Alt.GUI.ZedGraph.Axis.Cross"/>.  A positive value is into the ChartRect relative to
            the default axis position.</param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <param name="topPix">
            The pixel location of the far side of the ChartRect from this axis.
            This value is the ChartRect.Height for the XAxis, or the ChartRect.Width
            for the YAxis and Y2Axis.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Axis.DrawTitle(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,System.Double,System.Double)">
            <summary>
            Draw the title for this <see cref="T:Alt.GUI.ZedGraph.Axis"/>.
            </summary>
            <remarks>On entry, it is assumed that the
            graphics transform has been configured so that the origin is at the left side
            of this axis, and the axis is aligned along the X coordinate direction.
            </remarks>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="shiftPos">The number of pixels to shift this axis, based on the
            value of <see cref="P:Alt.GUI.ZedGraph.Axis.Cross"/>.  A positive value is into the ChartRect relative to
            the default axis position.</param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Axis.MakeLabelEventWorks(Alt.GUI.ZedGraph.GraphPane,System.Int32,System.Double)">
            <summary>
            Make a value label for the axis at the specified ordinal position.
            </summary>
            <remarks>
            This method properly accounts for <see cref="P:Alt.GUI.ZedGraph.Scale.IsLog"/>,
            <see cref="P:Alt.GUI.ZedGraph.Scale.IsText"/>,
            and other axis format settings.  It also implements the ScaleFormatEvent such that
            custom labels can be created.
            </remarks>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="index">
            The zero-based, ordinal index of the label to be generated.  For example, a value of 2 would
            cause the third value label on the axis to be generated.
            </param>
            <param name="dVal">
            The numeric value associated with the label.  This value is ignored for log
            (<see cref="P:Alt.GUI.ZedGraph.Scale.IsLog"/>)
            and text (<see cref="P:Alt.GUI.ZedGraph.Scale.IsText"/>) type axes.
            </param>
            <returns>The resulting value label as a <see cref="T:System.String"/></returns>
        </member>
        <member name="E:Alt.GUI.ZedGraph.Axis.ScaleFormatEvent">
            <summary>
            Subscribe to this event to handle custom formatting of the scale labels.
            </summary>
        </member>
        <member name="E:Alt.GUI.ZedGraph.Axis.ScaleTitleEvent">
            <summary>
            Allow customization of the title when the scale is very large
            Subscribe to this event to handle custom formatting of the scale axis label.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Axis.Scale">
            <summary>
            Gets the <see cref="P:Alt.GUI.ZedGraph.Axis.Scale"/> instance associated with this <see cref="T:Alt.GUI.ZedGraph.Axis"/>.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Axis.Cross">
            <summary>
            Gets or sets the scale value at which this axis should cross the "other" axis.
            </summary>
            <remarks>This property allows the axis to be shifted away from its default location.
            For example, for a graph with an X range from -100 to +100, the Y Axis can be located
            at the X=0 value rather than the left edge of the ChartRect.  This value can be set
            automatically based on the state of <see cref="P:Alt.GUI.ZedGraph.Axis.CrossAuto"/>.  If
            this value is set manually, then <see cref="P:Alt.GUI.ZedGraph.Axis.CrossAuto"/> will
            also be set to false.  The "other" axis is the axis the handles the second dimension
            for the graph.  For the XAxis, the "other" axis is the YAxis.  For the YAxis or
            Y2Axis, the "other" axis is the XAxis.
            </remarks>
            <value> The value is defined in user scale units </value>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.Min"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.Max"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Axis.CrossAuto"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Axis.CrossAuto">
            <summary>
            Gets or sets a value that determines whether or not the <see cref="P:Alt.GUI.ZedGraph.Axis.Cross"/> value
            is set automatically.
            </summary>
            <value>Set to true to have ZedGraph put the axis in the default location, or false
            to specify the axis location manually with a <see cref="P:Alt.GUI.ZedGraph.Axis.Cross"/> value.</value>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.Min"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.Max"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Axis.Cross"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Axis.MinSpace">
            <summary>
            Gets or sets the minimum axis space allocation.
            </summary>
            <remarks>
            This term, expressed in
            points (1/72 inch) and scaled according to <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/>
            for the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>, determines the minimum amount of space
            an axis must have between the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect">Chart.Rect</see> and the
            <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect">GraphPane.Rect</see>.  This minimum space
            applies whether <see cref="P:Alt.GUI.ZedGraph.Axis.IsVisible"/> is true or false.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Axis.Color">
            <summary>
            The color to use for drawing this <see cref="T:Alt.GUI.ZedGraph.Axis"/>.
            </summary>
            <remarks>
            This affects only the axis segment (see <see cref="P:Alt.GUI.ZedGraph.Axis.IsAxisSegmentVisible"/>),
            since the <see cref="P:Alt.GUI.ZedGraph.Axis.Title"/>,
            <see cref="P:Alt.GUI.ZedGraph.Axis.Scale"/>, <see cref="P:Alt.GUI.ZedGraph.Axis.MajorTic"/>, <see cref="P:Alt.GUI.ZedGraph.Axis.MinorTic"/>,
            <see cref="P:Alt.GUI.ZedGraph.Axis.MajorGrid"/>, and <see cref="P:Alt.GUI.ZedGraph.Axis.MinorGrid"/>
            all have their own color specification.
            </remarks>
            <value> The color is defined using the
            <see cref="!:System.Drawing.Color"/> class</value>
            <seealso cref="F:Alt.GUI.ZedGraph.Axis.Default.Color"/>.
            <seealso cref="P:Alt.GUI.ZedGraph.Axis.IsVisible"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Axis.MajorTic">
            <summary>
            Gets a reference to the <see cref="T:Alt.GUI.ZedGraph.MajorTic"/> class instance
            for this <see cref="T:Alt.GUI.ZedGraph.Axis"/>.  This class stores all the major tic settings.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Axis.MinorTic">
            <summary>
            Gets a reference to the <see cref="T:Alt.GUI.ZedGraph.MinorTic"/> class instance
            for this <see cref="T:Alt.GUI.ZedGraph.Axis"/>.  This class stores all the minor tic settings.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Axis.MajorGrid">
            <summary>
            Gets a reference to the <see cref="P:Alt.GUI.ZedGraph.Axis.MajorGrid"/> class that contains the properties
            of the major grid.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Axis.MinorGrid">
            <summary>
            Gets a reference to the <see cref="P:Alt.GUI.ZedGraph.Axis.MinorGrid"/> class that contains the properties
            of the minor grid.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Axis.IsVisible">
            <summary>
            This property determines whether or not the <see cref="T:Alt.GUI.ZedGraph.Axis"/> is shown.
            </summary>
            <remarks>
            Note that even if
            the axis is not visible, it can still be actively used to draw curves on a
            graph, it will just be invisible to the user
            </remarks>
            <value>true to show the axis, false to disable all drawing of this axis</value>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.IsVisible"/>.
            <seealso cref="F:Alt.GUI.ZedGraph.XAxis.Default.IsVisible"/>.
            <seealso cref="F:Alt.GUI.ZedGraph.YAxis.Default.IsVisible"/>.
            <seealso cref="F:Alt.GUI.ZedGraph.Y2Axis.Default.IsVisible"/>.
        </member>
        <member name="P:Alt.GUI.ZedGraph.Axis.IsAxisSegmentVisible">
            <summary>
            Gets or sets a property that determines whether or not the axis segment (the line that
            represents the axis itself) is drawn.
            </summary>
            <remarks>
            Under normal circumstances, this value won't affect the appearance of the display because
            the Axis segment is overlain by the Axis border (see <see cref="P:Alt.GUI.ZedGraph.Chart.Border"/>).
            However, when the border is not visible, or when <see cref="P:Alt.GUI.ZedGraph.Axis.CrossAuto"/> is set to
            false, this value will make a difference.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Axis.Type">
            <summary>
            Gets or sets the <see cref="T:Alt.GUI.ZedGraph.AxisType"/> for this <see cref="T:Alt.GUI.ZedGraph.Axis"/>.
            </summary>
            <remarks>
            The type can be either <see cref="F:Alt.GUI.ZedGraph.AxisType.Linear"/>,
            <see cref="F:Alt.GUI.ZedGraph.AxisType.Log"/>, <see cref="F:Alt.GUI.ZedGraph.AxisType.Date"/>,
            or <see cref="F:Alt.GUI.ZedGraph.AxisType.Text"/>.
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.IsLog"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.IsText"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.IsOrdinal"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.IsDate"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.IsReverse"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Axis.Title">
            <summary>
            Gets or sets the <see cref="T:Alt.GUI.ZedGraph.Label"/> class that contains the title of this
            <see cref="T:Alt.GUI.ZedGraph.Axis"/>.
            </summary>
            <remarks>The title normally shows the basis and dimensions of
            the scale range, such as "Time (Years)".  The title is only shown if the
            <see cref="P:Alt.GUI.ZedGraph.Label.IsVisible"/> property is set to true.  If the Title text is empty,
            then no title is shown, and no space is "reserved" for the title on the graph.
            </remarks>
            <value>the title is a string value</value>
            <seealso cref="P:Alt.GUI.ZedGraph.AxisLabel.IsOmitMag"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Axis.AxisGap">
            <summary>
            The size of the gap between multiple axes (see <see cref="P:Alt.GUI.ZedGraph.GraphPane.YAxisList"/> and
            <see cref="P:Alt.GUI.ZedGraph.GraphPane.Y2AxisList"/>).
            </summary>
            <remarks>
            This size will be scaled
            according to the <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> for the
            <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>
            </remarks>
            <value>The axis gap is measured in points (1/72 inch)</value>
            <seealso cref="F:Alt.GUI.ZedGraph.Axis.Default.AxisGap"/>.
        </member>
        <member name="T:Alt.GUI.ZedGraph.Axis.ScaleFormatHandler">
            <summary>
            A delegate that allows full custom formatting of the Axis labels
            </summary>
            <param name="pane">The <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> for which the label is to be
            formatted</param>
            <param name="axis">The <see cref="P:Alt.GUI.ZedGraph.Axis.Scale"/> of interest.</param>
            <param name="val">The value to be formatted</param>
            <param name="index">The zero-based index of the label to be formatted</param>
            <returns>
            A string value representing the label, or null if the ZedGraph should go ahead
            and generate the label according to the current settings</returns>
            <seealso cref="E:Alt.GUI.ZedGraph.Axis.ScaleFormatEvent"/>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Axis.ScaleTitleEventHandler">
            <summary>
            Allow customization of title based on user preferences.
            </summary>
            <param name="axis">The <see cref="T:Alt.GUI.ZedGraph.Axis"/> of interest.</param>
            <returns>
            A string value representing the label, or null if the ZedGraph should go ahead
            and generate the label according to the current settings.  To make the title
            blank, return "".</returns>
            <seealso cref="E:Alt.GUI.ZedGraph.Axis.ScaleFormatEvent"/>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Axis.Default">
            <summary>
            A simple struct that defines the
            default property values for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> class.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Axis.Default.AxisGap">
            <summary>
            The default size for the gap between multiple axes
            (<see cref="P:Alt.GUI.ZedGraph.Axis.AxisGap"/> property). Units are in points (1/72 inch).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Axis.Default.TitleGap">
            <summary>
            The default setting for the gap between the scale labels and the axis title.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Axis.Default.TitleFontFamily">
            <summary>
            The default font family for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> <see cref="P:Alt.GUI.ZedGraph.Axis.Title"/> text
            font specification <see cref="T:Alt.GUI.ZedGraph.FontSpec"/>
            (<see cref="P:Alt.GUI.ZedGraph.FontSpec.Family"/> property).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Axis.Default.TitleFontSize">
            <summary>
            The default font size for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> <see cref="P:Alt.GUI.ZedGraph.Axis.Title"/> text
            font specification <see cref="T:Alt.GUI.ZedGraph.FontSpec"/>
            (<see cref="P:Alt.GUI.ZedGraph.FontSpec.Size"/> property).  Units are
            in points (1/72 inch).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Axis.Default.TitleFontColor">
            <summary>
            The default font color for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> <see cref="P:Alt.GUI.ZedGraph.Axis.Title"/> text
            font specification <see cref="T:Alt.GUI.ZedGraph.FontSpec"/>
            (<see cref="P:Alt.GUI.ZedGraph.FontSpec.FontColor"/> property).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Axis.Default.TitleFontBold">
            <summary>
            The default font bold mode for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> <see cref="P:Alt.GUI.ZedGraph.Axis.Title"/> text
            font specification <see cref="T:Alt.GUI.ZedGraph.FontSpec"/>
            (<see cref="P:Alt.GUI.ZedGraph.FontSpec.IsBold"/> property). true
            for a bold typeface, false otherwise.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Axis.Default.TitleFontItalic">
            <summary>
            The default font italic mode for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> <see cref="P:Alt.GUI.ZedGraph.Axis.Title"/> text
            font specification <see cref="T:Alt.GUI.ZedGraph.FontSpec"/>
            (<see cref="P:Alt.GUI.ZedGraph.FontSpec.IsItalic"/> property). true
            for an italic typeface, false otherwise.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Axis.Default.TitleFontUnderline">
            <summary>
            The default font underline mode for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> <see cref="P:Alt.GUI.ZedGraph.Axis.Title"/> text
            font specification <see cref="T:Alt.GUI.ZedGraph.FontSpec"/>
            (<see cref="P:Alt.GUI.ZedGraph.FontSpec.IsUnderline"/> property). true
            for an underlined typeface, false otherwise.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Axis.Default.TitleFillColor">
            <summary>
            The default color for filling in the <see cref="P:Alt.GUI.ZedGraph.Axis.Title"/> text background
            (see <see cref="P:Alt.GUI.ZedGraph.Fill.Color"/> property).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Axis.Default.TitleFillBrush">
            <summary>
            The default custom brush for filling in the <see cref="P:Alt.GUI.ZedGraph.Axis.Title"/> text background
            (see <see cref="P:Alt.GUI.ZedGraph.Fill.Brush"/> property).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Axis.Default.TitleFillType">
            <summary>
            The default fill mode for filling in the <see cref="P:Alt.GUI.ZedGraph.Axis.Title"/> text background
            (see <see cref="P:Alt.GUI.ZedGraph.Fill.Type"/> property).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Axis.Default.BorderColor">
            <summary>
            The default color for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> itself
            (<see cref="P:Alt.GUI.ZedGraph.Axis.Color"/> property).  This color only affects the
            the axis border.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Axis.Default.IsAxisSegmentVisible">
            <summary>
            The default value for <see cref="P:Alt.GUI.ZedGraph.Axis.IsAxisSegmentVisible"/>, which determines
            whether or not the scale segment itself is visible
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Axis.Default.Type">
            <summary>
            The default setting for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> scale axis type
            (<see cref="P:Alt.GUI.ZedGraph.Axis.Type"/> property).  This value is set as per
            the <see cref="T:Alt.GUI.ZedGraph.AxisType"/> enumeration
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Axis.Default.Color">
            <summary>
            The default color for the axis segment.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Axis.Default.MinSpace">
            <summary>
            The default setting for the axis space allocation.  This term, expressed in
            points (1/72 inch) and scaled according to <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> for the
            <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>, determines the minimum amount of space an axis must
            have between the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/> and the
            <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/>.  This minimum space
            applies whether <see cref="P:Alt.GUI.ZedGraph.Axis.IsVisible"/> is true or false.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.AxisLabel">
            <summary>
            Class that handles the data associated with text title and its associated font
            properties.  Inherits from <see cref="T:Alt.GUI.ZedGraph.Label"/>, and adds <see cref="P:Alt.GUI.ZedGraph.AxisLabel.IsOmitMag"/>
            and <see cref="P:Alt.GUI.ZedGraph.AxisLabel.IsTitleAtCross"/> properties, which are specifically associated with
            the <see cref="T:Alt.GUI.ZedGraph.Axis"/> <see cref="P:Alt.GUI.ZedGraph.Axis.Title"/>.
            </summary>
            
            <author> John Champion </author>
            <version> $Revision: 3.1 $ $Date: 2006-06-24 20:26:44 $ </version>
        </member>
        <member name="T:Alt.GUI.ZedGraph.GapLabel">
            <summary>
            Class that handles the data associated with a text title and its associated font
            properties.  Inherits from <see cref="T:Alt.GUI.ZedGraph.Label"/>, and adds the <see cref="P:Alt.GUI.ZedGraph.GapLabel.Gap"/>
            property for use by the <see cref="T:Alt.GUI.ZedGraph.Axis"/> and <see cref="T:Alt.GUI.ZedGraph.PaneBase"/> objects.
            </summary>
            
            <author> John Champion </author>
            <version> $Revision: 3.1 $ $Date: 2006-06-24 20:26:44 $ </version>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Label">
            <summary>
            Class that handles the data associated with text title and its associated font
            properties
            </summary>
            
            <author> John Champion </author>
            <version> $Revision: 3.2 $ $Date: 2007-03-11 02:08:16 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Label.schema">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Label._text">
            <summary>
            private field that stores the <see cref="T:System.String"/> text for this label
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Label._fontSpec">
            <summary>
            private field that stores the <see cref="P:Alt.GUI.ZedGraph.Label.FontSpec"/> font properties for this label
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Label._isVisible">
            <summary>
            private field that determines if this label will be displayed.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Label.#ctor(System.String,System.String,System.Single,Alt.Sketch.Color,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor to build an <see cref="T:Alt.GUI.ZedGraph.AxisLabel"/> from the text and the
            associated font properties.
            </summary>
            <param name="text">The <see cref="T:System.String"/> representing the text to be
            displayed</param>
            <param name="fontFamily">The <see cref="T:System.String"/> font family name</param>
            <param name="fontSize">The size of the font in points and scaled according
            to the <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> logic.</param>
            <param name="color">The <see cref="T:Alt.Sketch.Color"/> instance representing the color
            of the font</param>
            <param name="isBold">true for a bold font face</param>
            <param name="isItalic">true for an italic font face</param>
            <param name="isUnderline">true for an underline font face</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Label.#ctor(System.String,Alt.GUI.ZedGraph.FontSpec)">
            <summary>
            Constructor that builds a <see cref="T:Alt.GUI.ZedGraph.Label"/> from a text <see cref="T:System.String"/>
            and a <see cref="P:Alt.GUI.ZedGraph.Label.FontSpec"/> instance.
            </summary>
            <param name="text"></param>
            <param name="fontSpec"></param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Label.#ctor(Alt.GUI.ZedGraph.Label)">
            <summary>
            Copy constructor
            </summary>
            <param name="rhs">the <see cref="T:Alt.GUI.ZedGraph.Label"/> instance to be copied.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Label.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.Label.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Label.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Label.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Label.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Label.Text">
            <summary>
            The <see cref="T:System.String"/> text to be displayed
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Label.FontSpec">
            <summary>
            A <see cref="T:Alt.GUI.ZedGraph.FontSpec"/> instance representing the font properties
            for the displayed text.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Label.IsVisible">
            <summary>
            Gets or sets a boolean value that determines whether or not this label will be displayed.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GapLabel.schema2">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GapLabel.#ctor(System.String,System.String,System.Single,Alt.Sketch.Color,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor to build a <see cref="T:Alt.GUI.ZedGraph.GapLabel"/> from the text and the
            associated font properties.
            </summary>
            <param name="text">The <see cref="T:System.String"/> representing the text to be
            displayed</param>
            <param name="fontFamily">The <see cref="T:System.String"/> font family name</param>
            <param name="fontSize">The size of the font in points and scaled according
            to the <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> logic.</param>
            <param name="color">The <see cref="T:Alt.Sketch.Color"/> instance representing the color
            of the font</param>
            <param name="isBold">true for a bold font face</param>
            <param name="isItalic">true for an italic font face</param>
            <param name="isUnderline">true for an underline font face</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GapLabel.#ctor(Alt.GUI.ZedGraph.GapLabel)">
            <summary>
            Copy constructor
            </summary>
            <param name="rhs">the <see cref="T:Alt.GUI.ZedGraph.AxisLabel"/> instance to be copied.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GapLabel.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.GapLabel.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GapLabel.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GapLabel.GetScaledGap(System.Double)">
            <summary>
            Calculate the size of the <see cref="P:Alt.GUI.ZedGraph.GapLabel.Gap"/> based on the <see cref="P:Alt.GUI.ZedGraph.Label.FontSpec"/>
            height, in pixel units and scaled according to <see paramref="scalefactor"/>.
            </summary>
            <param name="scaleFactor">The scaling factor to be applied</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GapLabel.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GapLabel.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="P:Alt.GUI.ZedGraph.GapLabel.Gap">
            <summary>
            Gets or sets the gap factor between this label and the opposing <see cref="T:Alt.GUI.ZedGraph.Axis"/>
            or <see cref="T:Alt.GUI.ZedGraph.Chart"/>.
            </summary>
            <remarks>
            This value is expressed as a fraction of the character height for the <see cref="T:Alt.GUI.ZedGraph.GapLabel"/>.
            </remarks>
        </member>
        <member name="T:Alt.GUI.ZedGraph.GapLabel.Default">
            <summary>
            A simple struct that defines the
            default property values for the <see cref="T:Alt.GUI.ZedGraph.GapLabel"/> class.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GapLabel.Default.Gap">
            <summary>
            The default <see cref="P:Alt.GUI.ZedGraph.GapLabel.Gap"/> setting.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.AxisLabel.schema3">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.AxisLabel.#ctor(System.String,System.String,System.Single,Alt.Sketch.Color,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructor to build an <see cref="T:Alt.GUI.ZedGraph.AxisLabel"/> from the text and the
            associated font properties.
            </summary>
            <param name="text">The <see cref="T:System.String"/> representing the text to be
            displayed</param>
            <param name="fontFamily">The <see cref="T:System.String"/> font family name</param>
            <param name="fontSize">The size of the font in points and scaled according
            to the <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> logic.</param>
            <param name="color">The <see cref="T:Alt.Sketch.Color"/> instance representing the color
            of the font</param>
            <param name="isBold">true for a bold font face</param>
            <param name="isItalic">true for an italic font face</param>
            <param name="isUnderline">true for an underline font face</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.AxisLabel.#ctor(Alt.GUI.ZedGraph.AxisLabel)">
            <summary>
            Copy constructor
            </summary>
            <param name="rhs">the <see cref="T:Alt.GUI.ZedGraph.AxisLabel"/> instance to be copied.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.AxisLabel.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.AxisLabel.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.AxisLabel.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.AxisLabel.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.AxisLabel.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="P:Alt.GUI.ZedGraph.AxisLabel.IsOmitMag">
            <summary>
            Gets or sets the property that controls whether or not the magnitude factor (power of 10) for
            this scale will be included in the label.
            </summary>
            <remarks>
            For large scale values, a "magnitude" value (power of 10) is automatically
            used for scaling the graph.  This magnitude value is automatically appended
            to the end of the Axis <see cref="P:Alt.GUI.ZedGraph.Axis.Title"/> (e.g., "(10^4)") to indicate
            that a magnitude is in use.  This property controls whether or not the
            magnitude is included in the title.  Note that it only affects the axis
            title; a magnitude value may still be used even if it is not shown in the title.
            </remarks>
            <value>true to show the magnitude value, false to hide it</value>
            <seealso cref="P:Alt.GUI.ZedGraph.Axis.Title"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.Mag"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.Format"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.AxisLabel.IsTitleAtCross">
            <summary>
            Gets or sets a value that determines whether the Axis title is located at the
            <see cref="P:Alt.GUI.ZedGraph.Axis.Cross"/>
            value or at the normal position (outside the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>).
            </summary>
            <remarks>
            This value only applies if <see cref="P:Alt.GUI.ZedGraph.Axis.CrossAuto"/> is false.
            </remarks>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Bar">
            <summary>
            A class representing all the characteristics of the bar
            segments that make up a curve on the graph.
            </summary>
            
            <author> John Champion </author>
            <version> $Revision: 3.30 $ $Date: 2007-11-03 04:41:28 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Bar.schema">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Bar._fill">
            <summary>
            Private field that stores the <see cref="T:Alt.GUI.ZedGraph.Fill"/> data for this
            <see cref="T:Alt.GUI.ZedGraph.Bar"/>.  Use the public property <see cref="P:Alt.GUI.ZedGraph.Bar.Fill"/> to
            access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Bar._border">
            <summary>
            Private field that stores the <see cref="P:Alt.GUI.ZedGraph.Bar.Border"/> class that defines the
            properties of the border around this <see cref="T:Alt.GUI.ZedGraph.BarItem"/>. Use the public
            property <see cref="P:Alt.GUI.ZedGraph.Bar.Border"/> to access this value.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Bar.#ctor">
            <summary>
            Default constructor that sets all <see cref="T:Alt.GUI.ZedGraph.Bar"/> properties to default
            values as defined in the <see cref="T:Alt.GUI.ZedGraph.Bar.Default"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Bar.#ctor(Alt.Sketch.Color)">
            <summary>
            Default constructor that sets the 
            <see cref="T:Alt.Sketch.Color"/> as specified, and the remaining
            <see cref="T:Alt.GUI.ZedGraph.Bar"/> properties to default
            values as defined in the <see cref="T:Alt.GUI.ZedGraph.Bar.Default"/> class.
            The specified color is only applied to the
            <see cref="P:Alt.GUI.ZedGraph.Fill.Color"/>, and the <see cref="P:Alt.GUI.ZedGraph.LineBase.Color"/>
            will be defaulted.
            </summary>
            <param name="color">A <see cref="T:Alt.Sketch.Color"/> value indicating
            the <see cref="P:Alt.GUI.ZedGraph.Fill.Color"/>
            of the Bar.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Bar.#ctor(Alt.GUI.ZedGraph.Bar)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The Bar object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Bar.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.Bar.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Bar.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Bar.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Bar.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Bar.Draw(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Boolean,Alt.GUI.ZedGraph.PointPair)">
            <summary>
            Draw the <see cref="T:Alt.GUI.ZedGraph.Bar"/> to the specified <see cref="T:Alt.Sketch.Graphics"/> device
            at the specified location.  This routine draws a single bar.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="left">The x position of the left side of the bar in
            pixel units</param>
            <param name="right">The x position of the right side of the bar in
            pixel units</param>
            <param name="top">The y position of the top of the bar in
            pixel units</param>
            <param name="bottom">The y position of the bottom of the bar in
            pixel units</param>
            <param name="scaleFactor">
            The scaling factor for the features of the graph based on the <see cref="P:Alt.GUI.ZedGraph.PaneBase.BaseDimension"/>.  This
            scaling factor is calculated by the <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method.  The scale factor
            represents a linear multiple to be applied to font sizes, symbol sizes, etc.
            </param>
            <param name="fullFrame">true to draw the bottom portion of the border around the
            bar (this is for legend entries)</param> 
            <param name="dataValue">The data value to be used for a value-based
            color gradient.  This is only applicable for <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByX"/>,
            <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByY"/> or <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByZ"/>.</param>
            <param name="isSelected">Indicates that the <see cref="T:Alt.GUI.ZedGraph.Bar"/> should be drawn
            with attributes from the <see cref="T:Alt.GUI.ZedGraph.Selection"/> class.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Bar.Draw(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,Alt.Sketch.Rect,System.Double,System.Boolean,System.Boolean,Alt.GUI.ZedGraph.PointPair)">
            <summary>
            Draw the <see cref="T:Alt.GUI.ZedGraph.Bar"/> to the specified <see cref="T:Alt.Sketch.Graphics"/> device
            at the specified location.  This routine draws a single bar.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="rect">The rectangle (pixels) to contain the bar</param>
            <param name="scaleFactor">
            The scaling factor for the features of the graph based on the <see cref="P:Alt.GUI.ZedGraph.PaneBase.BaseDimension"/>.  This
            scaling factor is calculated by the <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method.  The scale factor
            represents a linear multiple to be applied to font sizes, symbol sizes, etc.
            </param>
            <param name="fullFrame">true to draw the bottom portion of the border around the
            bar (this is for legend entries)</param> 
            <param name="dataValue">The data value to be used for a value-based
            color gradient.  This is only applicable for <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByX"/>,
            <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByY"/> or <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByZ"/>.</param>
            <param name="isSelected">Indicates that the <see cref="T:Alt.GUI.ZedGraph.Bar"/> should be drawn
            with attributes from the <see cref="T:Alt.GUI.ZedGraph.Selection"/> class.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Bar.DrawBars(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,Alt.GUI.ZedGraph.CurveItem,Alt.GUI.ZedGraph.Axis,Alt.GUI.ZedGraph.Axis,System.Double,System.Int32,System.Double)">
            <summary>
            Draw the this <see cref="T:Alt.GUI.ZedGraph.Bar"/> to the specified <see cref="T:Alt.Sketch.Graphics"/>
            device as a bar at each defined point. This method
            is normally only called by the <see cref="M:Alt.GUI.ZedGraph.BarItem.Draw(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,System.Int32,System.Double)"/> method of the
            <see cref="T:Alt.GUI.ZedGraph.BarItem"/> object
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="curve">A <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> object representing the
            <see cref="T:Alt.GUI.ZedGraph.Bar"/>'s to be drawn.</param>
            <param name="baseAxis">The <see cref="T:Alt.GUI.ZedGraph.Axis"/> class instance that defines the base (independent)
            axis for the <see cref="T:Alt.GUI.ZedGraph.Bar"/></param>
            <param name="valueAxis">The <see cref="T:Alt.GUI.ZedGraph.Axis"/> class instance that defines the value (dependent)
            axis for the <see cref="T:Alt.GUI.ZedGraph.Bar"/></param>
            <param name="barWidth">
            The width of each bar, in pixels.
            </param>
            <param name="pos">
            The ordinal position of the this bar series (0=first bar, 1=second bar, etc.)
            in the cluster of bars.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Bar.DrawSingleBar(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,Alt.GUI.ZedGraph.CurveItem,Alt.GUI.ZedGraph.Axis,Alt.GUI.ZedGraph.Axis,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Draw the specified single bar (an individual "point") of this series to the specified
            <see cref="T:Alt.Sketch.Graphics"/> device.  This method is not as efficient as
            <see cref="M:Alt.GUI.ZedGraph.Bar.DrawBars(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,Alt.GUI.ZedGraph.CurveItem,Alt.GUI.ZedGraph.Axis,Alt.GUI.ZedGraph.Axis,System.Double,System.Int32,System.Double)"/>, which draws the bars for all points.  It is intended to be used
            only for <see cref="F:Alt.GUI.ZedGraph.BarType.SortedOverlay"/>, which requires special handling of each bar.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="curve">A <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> object representing the
            <see cref="T:Alt.GUI.ZedGraph.Bar"/>'s to be drawn.</param>
            <param name="baseAxis">The <see cref="T:Alt.GUI.ZedGraph.Axis"/> class instance that defines the base (independent)
            axis for the <see cref="T:Alt.GUI.ZedGraph.Bar"/></param>
            <param name="valueAxis">The <see cref="T:Alt.GUI.ZedGraph.Axis"/> class instance that defines the value (dependent)
            axis for the <see cref="T:Alt.GUI.ZedGraph.Bar"/></param>
            <param name="pos">
            The ordinal position of the this bar series (0=first bar, 1=second bar, etc.)
            in the cluster of bars.
            </param>
            <param name="index">
            The zero-based index number for the single bar to be drawn.
            </param>
            <param name="barWidth">
            The width of each bar, in pixels.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Bar.DrawSingleBar(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,Alt.GUI.ZedGraph.CurveItem,System.Int32,System.Int32,Alt.GUI.ZedGraph.Axis,Alt.GUI.ZedGraph.Axis,System.Double,System.Double)">
            <summary>
            Protected internal routine that draws the specified single bar (an individual "point")
            of this series to the specified <see cref="T:Alt.Sketch.Graphics"/> device.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="curve">A <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> object representing the
            <see cref="T:Alt.GUI.ZedGraph.Bar"/>'s to be drawn.</param>
            <param name="index">
            The zero-based index number for the single bar to be drawn.
            </param>
            <param name="pos">
            The ordinal position of the this bar series (0=first bar, 1=second bar, etc.)
            in the cluster of bars.
            </param>
            <param name="baseAxis">The <see cref="T:Alt.GUI.ZedGraph.Axis"/> class instance that defines the base (independent)
            axis for the <see cref="T:Alt.GUI.ZedGraph.Bar"/></param>
            <param name="valueAxis">The <see cref="T:Alt.GUI.ZedGraph.Axis"/> class instance that defines the value (dependent)
            axis for the <see cref="T:Alt.GUI.ZedGraph.Bar"/></param>
            <param name="barWidth">
            The width of each bar, in pixels.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Bar.Border">
            <summary>
            The <see cref="P:Alt.GUI.ZedGraph.Bar.Border"/> object used to draw the border around the <see cref="T:Alt.GUI.ZedGraph.Bar"/>.
            </summary>
            <seealso cref="F:Alt.GUI.ZedGraph.Bar.Default.IsBorderVisible"/>
            <seealso cref="F:Alt.GUI.ZedGraph.Bar.Default.BorderWidth"/>
            <seealso cref="F:Alt.GUI.ZedGraph.Bar.Default.BorderColor"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Bar.Fill">
            <summary>
            Gets or sets the <see cref="T:Alt.GUI.ZedGraph.Fill"/> data for this
            <see cref="T:Alt.GUI.ZedGraph.Bar"/>.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Bar.Default">
            <summary>
            A simple struct that defines the
            default property values for the <see cref="T:Alt.GUI.ZedGraph.Bar"/> class.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Bar.Default.BorderWidth">
            <summary>
            The default pen width to be used for drawing the border around the bars
            (<see cref="P:Alt.GUI.ZedGraph.LineBase.Width"/> property).  Units are points.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Bar.Default.FillType">
            <summary>
            The default fill mode for bars (<see cref="P:Alt.GUI.ZedGraph.Fill.Type"/> property).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Bar.Default.IsBorderVisible">
            <summary>
            The default border mode for bars (<see cref="P:Alt.GUI.ZedGraph.LineBase.IsVisible"/> property).
            true to display frames around bars, false otherwise
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Bar.Default.BorderColor">
            <summary>
            The default color for drawing frames around bars
            (<see cref="P:Alt.GUI.ZedGraph.LineBase.Color"/> property).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Bar.Default.FillColor">
            <summary>
            The default color for filling in the bars
            (<see cref="P:Alt.GUI.ZedGraph.Fill.Color"/> property).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Bar.Default.FillBrush">
            <summary>
            The default custom brush for filling in the bars
            (<see cref="P:Alt.GUI.ZedGraph.Fill.Brush"/> property).
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.BarItem">
            <summary>
            Encapsulates a bar type that displays vertical or horizontal bars
            </summary>
            <remarks>
            The orientation of the bars depends on the state of
            <see cref="P:Alt.GUI.ZedGraph.BarSettings.Base"/>, and the bars can be stacked or
            clustered, depending on the state of <see cref="P:Alt.GUI.ZedGraph.BarSettings.Type"/>
            </remarks>
            <author> John Champion </author>
            <version> $Revision: 3.27 $ $Date: 2007-11-03 04:41:28 $ </version>
        </member>
        <member name="T:Alt.GUI.ZedGraph.CurveItem">
            <summary>
            This class contains the data and methods for an individual curve within
            a graph pane.  It carries the settings for the curve including the
            key and item names, colors, symbols and sizes, linetypes, etc.
            </summary>
            
            <author> John Champion
            modified by Jerry Vos </author>
            <version> $Revision: 3.43 $ $Date: 2007-11-03 04:41:28 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.CurveItem.schema">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.CurveItem._label">
            <summary>
            protected field that stores a <see cref="P:Alt.GUI.ZedGraph.CurveItem.Label"/> instance for this
            <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>, which is used for the <see cref="T:Alt.GUI.ZedGraph.Legend"/>
            label.  Use the public
            property <see cref="P:Alt.GUI.ZedGraph.CurveItem.Label"/> to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.CurveItem._isX2Axis">
            <summary>
            protected field that stores the boolean value that determines whether this
            <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> is on the bottom X axis or the top X axis (X2).
            Use the public property <see cref="P:Alt.GUI.ZedGraph.CurveItem.IsX2Axis"/> to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.CurveItem._isY2Axis">
            <summary>
            protected field that stores the boolean value that determines whether this
            <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> is on the left Y axis or the right Y axis (Y2).
            Use the public property <see cref="P:Alt.GUI.ZedGraph.CurveItem.IsY2Axis"/> to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.CurveItem._yAxisIndex">
            <summary>
            protected field that stores the index number of the Y Axis to which this
            <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> belongs.  Use the public property <see cref="P:Alt.GUI.ZedGraph.CurveItem.YAxisIndex"/>
            to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.CurveItem._isVisible">
            <summary>
            protected field that stores the boolean value that determines whether this
            <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> is visible on the graph.
            Use the public property <see cref="P:Alt.GUI.ZedGraph.CurveItem.IsVisible"/> to access this value.
            Note that this value turns the curve display on or off, but it does not
            affect the display of the legend entry.  To hide the legend entry, you
            have to set <see cref="P:Alt.GUI.ZedGraph.Label.IsVisible"/> to false.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.CurveItem._isSelected">
            <summary>
            Protected field that stores the boolean value that determines whether this
            <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> is selected on the graph.
            Use the public property <see cref="P:Alt.GUI.ZedGraph.CurveItem.IsSelected"/> to access this value.
            Note that this value changes the curve display color, but it does not
            affect the display of the legend entry.  To hide the legend entry, you
            have to set <see cref="P:Alt.GUI.ZedGraph.Label.IsVisible"/> to false.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.CurveItem._isSelectable">
            <summary>
            Protected field that stores the boolean value that determines whether this
            <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> can be selected in the graph.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.CurveItem._isOverrideOrdinal">
            <summary>
            protected field that stores a boolean value which allows you to override the normal
            ordinal axis behavior.  Use the public property <see cref="P:Alt.GUI.ZedGraph.CurveItem.IsOverrideOrdinal"/> to
            access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.CurveItem._points">
            <summary>
            The <see cref="T:Alt.GUI.ZedGraph.IPointList"/> of value sets that
            represent this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>.
            The size of this list determines the number of points that are
            plotted.  Note that values defined as
            System.Double.MaxValue are considered "missing" values
            (see <see cref="F:Alt.GUI.ZedGraph.PointPairBase.Missing"/>),
            and are not plotted.  The curve will have a break at these points
            to indicate the values are missing.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.CurveItem.Tag">
            <summary>
            A tag object for use by the user.  This can be used to store additional
            information associated with the <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>.  ZedGraph does
            not use this value for any purpose.
            </summary>
            <remarks>
            Note that, if you are going to Serialize ZedGraph data, then any type
            that you store in <see cref="F:Alt.GUI.ZedGraph.CurveItem.Tag"/> must be a serializable type (or
            it will cause an exception).
            </remarks>
        </member>
        <member name="F:Alt.GUI.ZedGraph.CurveItem._link">
            <summary>
            Protected field that stores the hyperlink information for this object.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.CurveItem.#ctor(System.String,System.Double[],System.Double[])">
            <summary>
            <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> constructor the pre-specifies the curve label, the
            x and y data values as a <see cref="T:Alt.GUI.ZedGraph.IPointList"/>, the curve
            type (Bar or Line/Symbol), the <see cref="P:Alt.GUI.ZedGraph.CurveItem.Color"/>, and the
            <see cref="T:Alt.GUI.ZedGraph.SymbolType"/>. Other properties of the curve are
            defaulted to the values in the <see cref="T:Alt.GUI.ZedGraph.GraphPane.Default"/> class.
            </summary>
            <param name="label">A string label (legend entry) for this curve</param>
            <param name="x">An array of double precision values that define
            the independent (X axis) values for this curve</param>
            <param name="y">An array of double precision values that define
            the dependent (Y axis) values for this curve</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.CurveItem.#ctor(System.String,Alt.GUI.ZedGraph.IPointList)">
            <summary>
            <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> constructor the pre-specifies the curve label, the
            x and y data values as a <see cref="T:Alt.GUI.ZedGraph.IPointList"/>, the curve
            type (Bar or Line/Symbol), the <see cref="P:Alt.GUI.ZedGraph.CurveItem.Color"/>, and the
            <see cref="T:Alt.GUI.ZedGraph.SymbolType"/>. Other properties of the curve are
            defaulted to the values in the <see cref="T:Alt.GUI.ZedGraph.GraphPane.Default"/> class.
            </summary>
            <param name="label">A string label (legend entry) for this curve</param>
            <param name="points">A <see cref="T:Alt.GUI.ZedGraph.IPointList"/> of double precision value pairs that define
            the X and Y values for this curve</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.CurveItem.Init(System.String)">
            <summary>
            Internal initialization routine thats sets some initial values to defaults.
            </summary>
            <param name="label">A string label (legend entry) for this curve</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.CurveItem.#ctor(System.String)">
            <summary>
            <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> constructor that specifies the label of the CurveItem.
            This is the same as <c>CurveItem(label, null, null)</c>.
            <seealso cref="M:Alt.GUI.ZedGraph.CurveItem.#ctor(System.String,System.Double[],System.Double[])"/>
            </summary>
            <param name="label">A string label (legend entry) for this curve</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.CurveItem.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.CurveItem.#ctor(Alt.GUI.ZedGraph.CurveItem)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The CurveItem object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.CurveItem.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of Clone.
            </summary>
            <remarks>
            Note that this method must be called with an explicit cast to ICloneable, and
            that it is inherently virtual.  For example:
            <code>
            ParentClass foo = new ChildClass();
            ChildClass bar = (ChildClass) ((ICloneable)foo).Clone();
            </code>
            Assume that ChildClass is inherited from ParentClass.  Even though foo is declared with
            ParentClass, it is actually an instance of ChildClass.  Calling the ICloneable implementation
            of Clone() on foo actually calls ChildClass.Clone() as if it were a virtual function.
            </remarks>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.CurveItem.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.CurveItem.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.CurveItem.IsZIncluded(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Gets a flag indicating if the Z data range should be included in the axis scaling calculations.
            </summary>
            <param name="pane">The parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> of this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>.
            </param>
            <value>true if the Z data are included, false otherwise</value>
        </member>
        <member name="M:Alt.GUI.ZedGraph.CurveItem.IsXIndependent(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Gets a flag indicating if the X axis is the independent axis for this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>
            </summary>
            <param name="pane">The parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> of this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>.
            </param>
            <value>true if the X axis is independent, false otherwise</value>
        </member>
        <member name="M:Alt.GUI.ZedGraph.CurveItem.Draw(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,System.Int32,System.Double)">
            <summary>
            Do all rendering associated with this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> to the specified
            <see cref="T:Alt.Sketch.Graphics"/> device.  This method is normally only
            called by the Draw method of the parent <see cref="T:Alt.GUI.ZedGraph.CurveList"/>
            collection object.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="pos">The ordinal position of the current <see cref="T:Alt.GUI.ZedGraph.Bar"/>
            curve.</param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.CurveItem.DrawLegendKey(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,Alt.Sketch.Rect,System.Double)">
            <summary>
            Draw a legend key entry for this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> at the specified location.
            This abstract base method passes through to <see cref="M:Alt.GUI.ZedGraph.BarItem.DrawLegendKey(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,Alt.Sketch.Rect,System.Double)"/> or
            <see cref="M:Alt.GUI.ZedGraph.LineItem.DrawLegendKey(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,Alt.Sketch.Rect,System.Double)"/> to do the rendering.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="rect">The <see cref="T:Alt.Sketch.Rect"/> struct that specifies the
            location for the legend key</param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.CurveItem.AddPoint(System.Double,System.Double)">
            <summary>
            Add a single x,y coordinate point to the end of the points collection for this curve.
            </summary>
            <param name="x">The X coordinate value</param>
            <param name="y">The Y coordinate value</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.CurveItem.AddPoint(Alt.GUI.ZedGraph.PointPair)">
            <summary>
            Add a <see cref="T:Alt.GUI.ZedGraph.PointPair"/> object to the end of the points collection for this curve.
            </summary>
            <remarks>
            This method will only work if the <see cref="T:Alt.GUI.ZedGraph.IPointList"/> instance reference
            at <see cref="P:Alt.GUI.ZedGraph.CurveItem.Points"/> supports the <see cref="T:Alt.GUI.ZedGraph.IPointListEdit"/> interface.
            Otherwise, it does nothing.
            </remarks>
            <param name="point">A reference to the <see cref="T:Alt.GUI.ZedGraph.PointPair"/> object to
            be added</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.CurveItem.Clear">
            <summary>
            Clears the points from this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>.  This is the same
            as <c>CurveItem.Points.Clear()</c>.
            </summary>
            <remarks>
            This method will only work if the <see cref="T:Alt.GUI.ZedGraph.IPointList"/> instance reference
            at <see cref="P:Alt.GUI.ZedGraph.CurveItem.Points"/> supports the <see cref="T:Alt.GUI.ZedGraph.IPointListEdit"/> interface.
            Otherwise, it does nothing.
            </remarks>
        </member>
        <member name="M:Alt.GUI.ZedGraph.CurveItem.RemovePoint(System.Int32)">
            <summary>
            Removes a single point from this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>.
            </summary>
            <remarks>
            This method will only work if the <see cref="T:Alt.GUI.ZedGraph.IPointList"/> instance reference
            at <see cref="P:Alt.GUI.ZedGraph.CurveItem.Points"/> supports the <see cref="T:Alt.GUI.ZedGraph.IPointListEdit"/> interface.
            Otherwise, it does nothing.
            </remarks>
            <param name="index">The ordinal position of the point to be removed.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.CurveItem.GetXAxis(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Get the X Axis instance (either <see cref="T:Alt.GUI.ZedGraph.XAxis"/> or <see cref="T:Alt.GUI.ZedGraph.X2Axis"/>) to
            which this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> belongs.
            </summary>
            <param name="pane">The <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object to which this curve belongs.</param>
            <returns>Either a <see cref="T:Alt.GUI.ZedGraph.XAxis"/> or <see cref="T:Alt.GUI.ZedGraph.X2Axis"/> to which this
            <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> belongs.
            </returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.CurveItem.GetYAxis(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Get the Y Axis instance (either <see cref="T:Alt.GUI.ZedGraph.YAxis"/> or <see cref="T:Alt.GUI.ZedGraph.Y2Axis"/>) to
            which this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> belongs.
            </summary>
            <remarks>
            This method safely retrieves a Y Axis instance from either the <see cref="P:Alt.GUI.ZedGraph.GraphPane.YAxisList"/>
            or the <see cref="P:Alt.GUI.ZedGraph.GraphPane.Y2AxisList"/> using the values of <see cref="P:Alt.GUI.ZedGraph.CurveItem.YAxisIndex"/> and
            <see cref="P:Alt.GUI.ZedGraph.CurveItem.IsY2Axis"/>.  If the value of <see cref="P:Alt.GUI.ZedGraph.CurveItem.YAxisIndex"/> is out of bounds, the
            default <see cref="T:Alt.GUI.ZedGraph.YAxis"/> or <see cref="T:Alt.GUI.ZedGraph.Y2Axis"/> is used.
            </remarks>
            <param name="pane">The <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object to which this curve belongs.</param>
            <returns>Either a <see cref="T:Alt.GUI.ZedGraph.YAxis"/> or <see cref="T:Alt.GUI.ZedGraph.Y2Axis"/> to which this
            <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> belongs.
            </returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.CurveItem.GetYAxisIndex(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Get the index of the Y Axis in the <see cref="T:Alt.GUI.ZedGraph.YAxis"/> or <see cref="T:Alt.GUI.ZedGraph.Y2Axis"/> list to
            which this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> belongs.
            </summary>
            <remarks>
            This method safely retrieves a Y Axis index into either the <see cref="P:Alt.GUI.ZedGraph.GraphPane.YAxisList"/>
            or the <see cref="P:Alt.GUI.ZedGraph.GraphPane.Y2AxisList"/> using the values of <see cref="P:Alt.GUI.ZedGraph.CurveItem.YAxisIndex"/> and
            <see cref="P:Alt.GUI.ZedGraph.CurveItem.IsY2Axis"/>.  If the value of <see cref="P:Alt.GUI.ZedGraph.CurveItem.YAxisIndex"/> is out of bounds, the
            default <see cref="T:Alt.GUI.ZedGraph.YAxis"/> or <see cref="T:Alt.GUI.ZedGraph.Y2Axis"/> is used, which is index zero.
            </remarks>
            <param name="pane">The <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object to which this curve belongs.</param>
            <returns>An integer value indicating which index position in the list applies to this
            <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>
            </returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.CurveItem.MakeUnique">
            <summary>
            Loads some pseudo unique colors/symbols into this CurveItem.  This
            is the same as <c>MakeUnique(ColorSymbolRotator.StaticInstance)</c>.
            <seealso cref="P:Alt.GUI.ZedGraph.ColorSymbolRotator.StaticInstance"/>
            <seealso cref="T:Alt.GUI.ZedGraph.ColorSymbolRotator"/>
            <seealso cref="M:Alt.GUI.ZedGraph.CurveItem.MakeUnique(Alt.GUI.ZedGraph.ColorSymbolRotator)"/>
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.CurveItem.MakeUnique(Alt.GUI.ZedGraph.ColorSymbolRotator)">
            <summary>
            Loads some pseudo unique colors/symbols into this CurveItem.  This
            is mainly useful for differentiating a set of new CurveItems without
            having to pick your own colors/symbols.
            <seealso cref="M:Alt.GUI.ZedGraph.CurveItem.MakeUnique(Alt.GUI.ZedGraph.ColorSymbolRotator)"/>
            </summary>
            <param name="rotator">
            The <see cref="T:Alt.GUI.ZedGraph.ColorSymbolRotator"/> that is used to pick the color
             and symbol for this method call.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.CurveItem.GetRange(System.Double@,System.Double@,System.Double@,System.Double@,System.Boolean,System.Boolean,Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Go through the list of <see cref="T:Alt.GUI.ZedGraph.PointPair"/> data values for this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>
            and determine the minimum and maximum values in the data.
            </summary>
            <param name="xMin">The minimum X value in the range of data</param>
            <param name="xMax">The maximum X value in the range of data</param>
            <param name="yMin">The minimum Y value in the range of data</param>
            <param name="yMax">The maximum Y value in the range of data</param>
            <param name="ignoreInitial">ignoreInitial is a boolean value that
            affects the data range that is considered for the automatic scale
            ranging (see <see cref="P:Alt.GUI.ZedGraph.GraphPane.IsIgnoreInitial"/>).  If true, then initial
            data points where the Y value is zero are not included when
            automatically determining the scale <see cref="P:Alt.GUI.ZedGraph.Scale.Min"/>,
            <see cref="P:Alt.GUI.ZedGraph.Scale.Max"/>, and <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/> size.  All data after
            the first non-zero Y value are included.
            </param>
            <param name="isBoundedRanges">
            Determines if the auto-scaled axis ranges will subset the
            data points based on any manually set scale range values.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <seealso cref="P:Alt.GUI.ZedGraph.GraphPane.IsBoundedRanges"/>
        </member>
        <member name="M:Alt.GUI.ZedGraph.CurveItem.BaseAxis(Alt.GUI.ZedGraph.GraphPane)">
            <summary>Returns a reference to the <see cref="T:Alt.GUI.ZedGraph.Axis"/> object that is the "base"
            (independent axis) from which the values are drawn. </summary>
            <remarks>
            This property is determined by the value of <see cref="P:Alt.GUI.ZedGraph.BarSettings.Base"/> for
            <see cref="T:Alt.GUI.ZedGraph.BarItem"/>, <see cref="T:Alt.GUI.ZedGraph.ErrorBarItem"/>, and <see cref="T:Alt.GUI.ZedGraph.HiLowBarItem"/>
            types.  It is always the X axis for regular <see cref="T:Alt.GUI.ZedGraph.LineItem"/> types.
            Note that the <see cref="P:Alt.GUI.ZedGraph.BarSettings.Base"/> setting can override the
            <see cref="P:Alt.GUI.ZedGraph.CurveItem.IsY2Axis"/> and <see cref="P:Alt.GUI.ZedGraph.CurveItem.YAxisIndex"/> settings for bar types
            (this is because all the bars that are clustered together must share the
            same base axis).
            </remarks>
            <seealso cref="T:Alt.GUI.ZedGraph.BarBase"/>
            <seealso cref="M:Alt.GUI.ZedGraph.CurveItem.ValueAxis(Alt.GUI.ZedGraph.GraphPane)"/>
        </member>
        <member name="M:Alt.GUI.ZedGraph.CurveItem.ValueAxis(Alt.GUI.ZedGraph.GraphPane)">
            <summary>Returns a reference to the <see cref="T:Alt.GUI.ZedGraph.Axis"/> object that is the "value"
            (dependent axis) from which the points are drawn. </summary>
            <remarks>
            This property is determined by the value of <see cref="P:Alt.GUI.ZedGraph.BarSettings.Base"/> for
            <see cref="T:Alt.GUI.ZedGraph.BarItem"/>, <see cref="T:Alt.GUI.ZedGraph.ErrorBarItem"/>, and <see cref="T:Alt.GUI.ZedGraph.HiLowBarItem"/>
            types.  It is always the Y axis for regular <see cref="T:Alt.GUI.ZedGraph.LineItem"/> types.
            </remarks>
            <seealso cref="T:Alt.GUI.ZedGraph.BarBase"/>
            <seealso cref="M:Alt.GUI.ZedGraph.CurveItem.BaseAxis(Alt.GUI.ZedGraph.GraphPane)"/>
        </member>
        <member name="M:Alt.GUI.ZedGraph.CurveItem.GetBarWidth(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Calculate the width of each bar, depending on the actual bar type
            </summary>
            <returns>The width for an individual bar, in pixel units</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.CurveItem.GetCoords(Alt.GUI.ZedGraph.GraphPane,System.Int32,System.String@)">
            <summary>
            Determine the coords for the rectangle associated with a specified point for 
            this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>
            </summary>
            <param name="pane">The <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> to which this curve belongs</param>
            <param name="i">The index of the point of interest</param>
            <param name="coords">A list of coordinates that represents the "rect" for
            this point (used in an html AREA tag)</param>
            <returns>true if it's a valid point, false otherwise</returns>
        </member>
        <member name="P:Alt.GUI.ZedGraph.CurveItem.Label">
            <summary>
            A <see cref="P:Alt.GUI.ZedGraph.CurveItem.Label"/> instance that represents the <see cref="T:Alt.GUI.ZedGraph.Legend"/>
            entry for the this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> object
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.CurveItem.Color">
            <summary>
            The <see cref="T:Alt.GUI.ZedGraph.Line"/>/<see cref="T:Alt.GUI.ZedGraph.Symbol"/>/<see cref="T:Alt.GUI.ZedGraph.Bar"/> 
            color (FillColor for the Bar).  This is a common access to
            <see cref="P:Alt.GUI.ZedGraph.LineBase.Color">Line.Color</see>,
            <see cref="P:Alt.GUI.ZedGraph.LineBase.Color">Border.Color</see>, and
            <see cref="P:Alt.GUI.ZedGraph.Fill.Color">Fill.Color</see> properties for this curve.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.CurveItem.IsVisible">
            <summary>
            Determines whether this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> is visible on the graph.
            Note that this value turns the curve display on or off, but it does not
            affect the display of the legend entry.  To hide the legend entry, you
            have to set <see cref="P:Alt.GUI.ZedGraph.Label.IsVisible"/> to false.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.CurveItem.IsSelected">
            <summary>
            Determines whether this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> is selected on the graph.
            Note that this value changes the curve displayed color, but it does not
            affect the display of the legend entry. To hide the legend entry, you
            have to set <see cref="P:Alt.GUI.ZedGraph.Label.IsVisible"/> to false.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.CurveItem.IsSelectable">
            <summary>
            Determines whether this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> can be selected in the graph.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.CurveItem.IsOverrideOrdinal">
            <summary>
            Gets or sets a value which allows you to override the normal
            ordinal axis behavior.
            </summary>
            <remarks>
            Normally for an ordinal axis type, the actual data values corresponding to the ordinal
            axis will be ignored (essentially they are replaced by ordinal values, e.g., 1, 2, 3, etc).
            If IsOverrideOrdinal is true, then the user data values will be used (even if they don't
            make sense).  Fractional values are allowed, such that a value of 1.5 is between the first and
            second ordinal position, etc.
            </remarks>
            <seealso cref="F:Alt.GUI.ZedGraph.AxisType.Ordinal"/>
            <seealso cref="F:Alt.GUI.ZedGraph.AxisType.Text"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.CurveItem.IsX2Axis">
            <summary>
            Gets or sets a value that determines which X axis this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>
            is assigned to.
            </summary>
            <remarks>
            The
            <see cref="T:Alt.GUI.ZedGraph.XAxis"/> is on the bottom side of the graph and the
            <see cref="T:Alt.GUI.ZedGraph.X2Axis"/> is on the top side.  Assignment to an axis
            determines the scale that is used to draw the curve on the graph.
            </remarks>
            <value>true to assign the curve to the <see cref="T:Alt.GUI.ZedGraph.X2Axis"/>,
            false to assign the curve to the <see cref="T:Alt.GUI.ZedGraph.XAxis"/></value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.CurveItem.IsY2Axis">
            <summary>
            Gets or sets a value that determines which Y axis this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>
            is assigned to.
            </summary>
            <remarks>
            The
            <see cref="T:Alt.GUI.ZedGraph.YAxis"/> is on the left side of the graph and the
            <see cref="T:Alt.GUI.ZedGraph.Y2Axis"/> is on the right side.  Assignment to an axis
            determines the scale that is used to draw the curve on the graph.  Note that
            this value is used in combination with the <see cref="P:Alt.GUI.ZedGraph.CurveItem.YAxisIndex"/> to determine
            which of the Y Axes (if there are multiples) this curve belongs to.
            </remarks>
            <value>true to assign the curve to the <see cref="T:Alt.GUI.ZedGraph.Y2Axis"/>,
            false to assign the curve to the <see cref="T:Alt.GUI.ZedGraph.YAxis"/></value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.CurveItem.YAxisIndex">
            <summary>
            Gets or sets the index number of the Y Axis to which this
            <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> belongs.
            </summary>
            <remarks>
            This value is essentially an index number into the <see cref="P:Alt.GUI.ZedGraph.GraphPane.YAxisList"/>
            or <see cref="P:Alt.GUI.ZedGraph.GraphPane.Y2AxisList"/>, depending on the setting of
            <see cref="P:Alt.GUI.ZedGraph.CurveItem.IsY2Axis"/>.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.CurveItem.IsBar">
            <summary>
            Determines whether this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>
            is a <see cref="T:Alt.GUI.ZedGraph.BarItem"/>.
            </summary>
            <value>true for a bar chart, or false for a line or pie graph</value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.CurveItem.IsPie">
            <summary>
            Determines whether this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>
            is a <see cref="T:Alt.GUI.ZedGraph.PieItem"/>.
            </summary>
            <value>true for a pie chart, or false for a line or bar graph</value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.CurveItem.IsLine">
            <summary>
            Determines whether this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>
            is a <see cref="T:Alt.GUI.ZedGraph.LineItem"/>.
            </summary>
            <value>true for a line chart, or false for a bar type</value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.CurveItem.NPts">
            <summary>
            Readonly property that gives the number of points that define this
            <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> object, which is the number of points in the
            <see cref="P:Alt.GUI.ZedGraph.CurveItem.Points"/> data collection.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.CurveItem.Points">
            <summary>
            The <see cref="T:Alt.GUI.ZedGraph.IPointList"/> of X,Y point sets that represent this
            <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.CurveItem.Item(System.Int32)">
            <summary>
            An accessor for the <see cref="T:Alt.GUI.ZedGraph.PointPair"/> datum for this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>.
            Index is the ordinal reference (zero based) of the point.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.CurveItem.Link">
            <summary>
            Gets or sets the hyperlink information for this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.CurveItem.Comparer">
            <summary>
            Compares <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>'s based on the point value at the specified
            index and for the specified axis.
            <seealso cref="M:System.Collections.ArrayList.Sort"/>
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.CurveItem.Comparer.#ctor(Alt.GUI.ZedGraph.SortType,System.Int32)">
            <summary>
            Constructor for Comparer.
            </summary>
            <param name="type">The axis type on which to sort.</param>
            <param name="index">The index number of the point on which to sort</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.CurveItem.Comparer.Compare(Alt.GUI.ZedGraph.CurveItem,Alt.GUI.ZedGraph.CurveItem)">
            <summary>
            Compares two <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>s using the previously specified index value
            and axis.  Sorts in descending order.
            </summary>
            <param name="l">Curve to the left.</param>
            <param name="r">Curve to the right.</param>
            <returns>-1, 0, or 1 depending on l.X's relation to r.X</returns>
        </member>
        <member name="F:Alt.GUI.ZedGraph.BarItem.schema2">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.BarItem._bar">
            <summary>
            Private field that stores a reference to the <see cref="T:Alt.GUI.ZedGraph.Bar"/>
            class defined for this <see cref="T:Alt.GUI.ZedGraph.BarItem"/>.  Use the public
            property <see cref="P:Alt.GUI.ZedGraph.BarItem.Bar"/> to access this value.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.BarItem.IsZIncluded(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Gets a flag indicating if the Z data range should be included in the axis scaling calculations.
            </summary>
            <param name="pane">The parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> of this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>.
            </param>
            <value>true if the Z data are included, false otherwise</value>
        </member>
        <member name="M:Alt.GUI.ZedGraph.BarItem.IsXIndependent(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Gets a flag indicating if the X axis is the independent axis for this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>
            </summary>
            <param name="pane">The parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> of this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>.
            </param>
            <value>true if the X axis is independent, false otherwise</value>
        </member>
        <member name="M:Alt.GUI.ZedGraph.BarItem.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:Alt.GUI.ZedGraph.BarItem"/>, specifying only the legend label for the bar.
            </summary>
            <param name="label">The label that will appear in the legend.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.BarItem.#ctor(System.String,System.Double[],System.Double[],Alt.Sketch.Color)">
            <summary>
            Create a new <see cref="T:Alt.GUI.ZedGraph.BarItem"/> using the specified properties.
            </summary>
            <param name="label">The label that will appear in the legend.</param>
            <param name="x">An array of double precision values that define
            the independent (X axis) values for this curve</param>
            <param name="y">An array of double precision values that define
            the dependent (Y axis) values for this curve</param>
            <param name="color">A <see cref="T:Alt.Sketch.Color"/> value that will be applied to
            the <see cref="P:Alt.GUI.ZedGraph.Bar.Fill"/> and <see cref="P:Alt.GUI.ZedGraph.Bar.Border"/> properties.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.BarItem.#ctor(System.String,Alt.GUI.ZedGraph.IPointList,Alt.Sketch.Color)">
            <summary>
            Create a new <see cref="T:Alt.GUI.ZedGraph.BarItem"/> using the specified properties.
            </summary>
            <param name="label">The label that will appear in the legend.</param>
            <param name="points">A <see cref="T:Alt.GUI.ZedGraph.IPointList"/> of double precision value pairs that define
            the X and Y values for this curve</param>
            <param name="color">A <see cref="T:Alt.Sketch.Color"/> value that will be applied to
            the <see cref="P:Alt.GUI.ZedGraph.Bar.Fill"/> and <see cref="P:Alt.GUI.ZedGraph.Bar.Border"/> properties.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.BarItem.#ctor(Alt.GUI.ZedGraph.BarItem)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:Alt.GUI.ZedGraph.BarItem"/> object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.BarItem.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.BarItem.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.BarItem.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.BarItem.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.BarItem.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.BarItem.Draw(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,System.Int32,System.Double)">
            <summary>
            Do all rendering associated with this <see cref="T:Alt.GUI.ZedGraph.BarItem"/> to the specified
            <see cref="T:Alt.Sketch.Graphics"/> device.  This method is normally only
            called by the Draw method of the parent <see cref="T:Alt.GUI.ZedGraph.CurveList"/>
            collection object.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="pos">The ordinal position of the current <see cref="P:Alt.GUI.ZedGraph.BarItem.Bar"/>
            curve.</param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.BarItem.DrawLegendKey(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,Alt.Sketch.Rect,System.Double)">
            <summary>
            Draw a legend key entry for this <see cref="T:Alt.GUI.ZedGraph.BarItem"/> at the specified location
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="rect">The <see cref="T:Alt.Sketch.Rect"/> struct that specifies the
            location for the legend key</param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.BarItem.CreateBarLabels(Alt.GUI.ZedGraph.GraphPane,System.Boolean,System.String)">
            <summary>
            Create a <see cref="T:Alt.GUI.ZedGraph.TextObj"/> for each bar in the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>.
            </summary>
            <remarks>
            This method will go through the bars, create a label that corresponds to the bar value,
            and place it on the graph depending on user preferences.  This works for horizontal or
            vertical bars in clusters or stacks, but only for <see cref="T:Alt.GUI.ZedGraph.BarItem"/> types.  This method
            does not apply to <see cref="T:Alt.GUI.ZedGraph.ErrorBarItem"/> or <see cref="T:Alt.GUI.ZedGraph.HiLowBarItem"/> objects.
            Call this method only after calling <see cref="M:Alt.GUI.ZedGraph.GraphPane.AxisChange"/>.
            </remarks>
            <param name="pane">The GraphPane in which to place the text labels.</param>
            <param name="isBarCenter">true to center the labels inside the bars, false to
            place the labels just above the top of the bar.</param>
            <param name="valueFormat">The double.ToString string format to use for creating
            the labels.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.BarItem.CreateBarLabels(Alt.GUI.ZedGraph.GraphPane,System.Boolean,System.String,System.String,System.Single,Alt.Sketch.Color,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create a <see cref="T:Alt.GUI.ZedGraph.TextObj"/> for each bar in the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>.
            </summary>
            <remarks>
            This method will go through the bars, create a label that corresponds to the bar value,
            and place it on the graph depending on user preferences.  This works for horizontal or
            vertical bars in clusters or stacks, but only for <see cref="T:Alt.GUI.ZedGraph.BarItem"/> types.  This method
            does not apply to <see cref="T:Alt.GUI.ZedGraph.ErrorBarItem"/> or <see cref="T:Alt.GUI.ZedGraph.HiLowBarItem"/> objects.
            Call this method only after calling <see cref="M:Alt.GUI.ZedGraph.GraphPane.AxisChange"/>.
            </remarks>
            <param name="pane">The GraphPane in which to place the text labels.</param>
            <param name="isBarCenter">true to center the labels inside the bars, false to
            place the labels just above the top of the bar.</param>
            <param name="valueFormat">The double.ToString string format to use for creating
            the labels.
            </param>
            <param name="fontColor">The color in which to draw the labels</param>
            <param name="fontFamily">The string name of the font family to use for the labels</param>
            <param name="fontSize">The floating point size of the font, in scaled points</param>
            <param name="isBold">true for a bold font type, false otherwise</param>
            <param name="isItalic">true for an italic font type, false otherwise</param>
            <param name="isUnderline">true for an underline font type, false otherwise</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.BarItem.GetCoords(Alt.GUI.ZedGraph.GraphPane,System.Int32,System.String@)">
            <summary>
            Determine the coords for the rectangle associated with a specified point for 
            this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>
            </summary>
            <param name="pane">The <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> to which this curve belongs</param>
            <param name="i">The index of the point of interest</param>
            <param name="coords">A list of coordinates that represents the "rect" for
            this point (used in an html AREA tag)</param>
            <returns>true if it's a valid point, false otherwise</returns>
        </member>
        <member name="P:Alt.GUI.ZedGraph.BarItem.Bar">
            <summary>
            Gets a reference to the <see cref="T:Alt.GUI.ZedGraph.Bar"/> class defined
            for this <see cref="T:Alt.GUI.ZedGraph.BarItem"/>.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.BarSettings">
            <summary>
            Class that handles the global settings for bar charts
            </summary>
            
            <author> John Champion </author>
            <version> $Revision: 3.6 $ $Date: 2007-12-30 23:27:39 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.BarSettings.schema">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.BarSettings._minClusterGap">
            <summary>Private field that determines the size of the gap between bar clusters
            for bar charts.  This gap is expressed as a fraction of the bar size (1.0 means
            leave a 1-barwidth gap between clusters).
            Use the public property <see cref="P:Alt.GUI.ZedGraph.BarSettings.MinClusterGap"/> to access this value. </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.BarSettings._minBarGap">
            <summary>Private field that determines the size of the gap between individual bars
            within a bar cluster for bar charts.  This gap is expressed as a fraction of the
            bar size (1.0 means leave a 1-barwidth gap between each bar).
            Use the public property <see cref="P:Alt.GUI.ZedGraph.BarSettings.MinBarGap"/> to access this value. </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.BarSettings._base">
            <summary>Private field that determines the base axis from which <see cref="T:Alt.GUI.ZedGraph.Bar"/>
            graphs will be displayed.  The base axis is the axis from which the bars grow with
            increasing value. The value is of the enumeration type <see cref="T:Alt.GUI.ZedGraph.BarBase"/>.
            To access this value, use the public property <see cref="P:Alt.GUI.ZedGraph.BarSettings.Base"/>.
            </summary>
            <seealso cref="F:Alt.GUI.ZedGraph.BarSettings.Default.Base"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.BarSettings._type">
            <summary>Private field that determines how the <see cref="T:Alt.GUI.ZedGraph.BarItem"/>
            graphs will be displayed. See the <see cref="T:Alt.GUI.ZedGraph.BarType"/> enum
            for the individual types available.
            To access this value, use the public property <see cref="P:Alt.GUI.ZedGraph.BarSettings.Type"/>.
            </summary>
            <seealso cref="F:Alt.GUI.ZedGraph.BarSettings.Default.Type"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.BarSettings._clusterScaleWidth">
            <summary>Private field that determines the width of a bar cluster (for bar charts)
            in user scale units.  Normally, this value is 1.0 because bar charts are typically
            <see cref="F:Alt.GUI.ZedGraph.AxisType.Ordinal"/> or <see cref="F:Alt.GUI.ZedGraph.AxisType.Text"/>, and the bars are
            defined at ordinal values (1.0 scale units apart).  For <see cref="F:Alt.GUI.ZedGraph.AxisType.Linear"/>
            or other scale types, you can use this value to scale the bars to an arbitrary
            user scale. Use the public property <see cref="P:Alt.GUI.ZedGraph.BarSettings.ClusterScaleWidth"/> to access this
            value. </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.BarSettings._clusterScaleWidthAuto">
            <summary>
            Private field that determines if the <see cref="P:Alt.GUI.ZedGraph.BarSettings.ClusterScaleWidth"/> will be
            calculated automatically.  Use the public property <see cref="P:Alt.GUI.ZedGraph.BarSettings.ClusterScaleWidthAuto"/>
            to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.BarSettings._ownerPane">
            <summary>
            private field that stores the owner GraphPane that contains this BarSettings instance.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.BarSettings.#ctor(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Constructor to build a <see cref="T:Alt.GUI.ZedGraph.BarSettings"/> instance from the defaults.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.BarSettings.#ctor(Alt.GUI.ZedGraph.BarSettings,Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Copy constructor
            </summary>
            <param name="rhs">the <see cref="T:Alt.GUI.ZedGraph.BarSettings"/> instance to be copied.</param>
            <param name="parentPane">The <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> that will be the
            parent of this new BarSettings object.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.BarSettings.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <remarks>
            You MUST set the _ownerPane property after deserializing a BarSettings object.
            </remarks>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the
            serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains
            the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.BarSettings.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.BarSettings.CalcClusterScaleWidth">
            <summary>
            Calculate the width of an individual bar cluster on a <see cref="T:Alt.GUI.ZedGraph.BarItem"/> graph.
            This value only applies to bar graphs plotted on non-ordinal X axis
            types (<see cref="P:Alt.GUI.ZedGraph.Scale.IsAnyOrdinal"/> is false).
            </summary>
            <remarks>
            This value can be calculated automatically if <see cref="P:Alt.GUI.ZedGraph.BarSettings.ClusterScaleWidthAuto"/>
            is set to true.  In this case, ClusterScaleWidth will be calculated if
            <see cref="P:Alt.GUI.ZedGraph.BarSettings.Base"/> refers to an <see cref="T:Alt.GUI.ZedGraph.Axis"/> of a non-ordinal type
            (<see cref="P:Alt.GUI.ZedGraph.Scale.IsAnyOrdinal"/> is false).  The ClusterScaleWidth is calculated
            from the minimum difference found between any two points on the <see cref="P:Alt.GUI.ZedGraph.BarSettings.Base"/>
            <see cref="T:Alt.GUI.ZedGraph.Axis"/> for any <see cref="T:Alt.GUI.ZedGraph.BarItem"/> in the
            <see cref="P:Alt.GUI.ZedGraph.GraphPane.CurveList"/>.  The ClusterScaleWidth is set automatically
            each time <see cref="M:Alt.GUI.ZedGraph.GraphPane.AxisChange"/> is called.
            </remarks>
            <seealso cref="F:Alt.GUI.ZedGraph.BarSettings.Default.ClusterScaleWidth"/>
            <seealso cref="P:Alt.GUI.ZedGraph.BarSettings.ClusterScaleWidthAuto"/>
            <seealso cref="P:Alt.GUI.ZedGraph.BarSettings.MinBarGap"/>
            <seealso cref="P:Alt.GUI.ZedGraph.BarSettings.MinClusterGap"/>
        </member>
        <member name="M:Alt.GUI.ZedGraph.BarSettings.GetMinStepSize(Alt.GUI.ZedGraph.IPointList,Alt.GUI.ZedGraph.Axis)">
            <summary>
            Determine the minimum increment between individual points to be used for
            calculating a bar size that fits without overlapping
            </summary>
            <param name="list">The <see cref="T:Alt.GUI.ZedGraph.IPointList"/> list of points for the bar
            of interest</param>
            <param name="baseAxis">The base axis for the bar</param>
            <returns>The minimum increment between bars along the base axis</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.BarSettings.GetClusterWidth">
            <summary>
            Determine the width, in screen pixel units, of each bar cluster including
            the cluster gaps and bar gaps.
            </summary>
            <remarks>This method calls the <see cref="M:Alt.GUI.ZedGraph.Scale.GetClusterWidth(Alt.GUI.ZedGraph.GraphPane)"/>
            method for the base <see cref="T:Alt.GUI.ZedGraph.Axis"/> for <see cref="T:Alt.GUI.ZedGraph.Bar"/> graphs
            (the base <see cref="T:Alt.GUI.ZedGraph.Axis"/> is assigned by the <see cref="P:Alt.GUI.ZedGraph.BarSettings.Base"/>
            property).
            </remarks>
            <seealso cref="T:Alt.GUI.ZedGraph.BarBase"/>
            <seealso cref="T:Alt.GUI.ZedGraph.BarSettings"/>
            <seealso cref="M:Alt.GUI.ZedGraph.Scale.GetClusterWidth(Alt.GUI.ZedGraph.GraphPane)"/>
            <seealso cref="P:Alt.GUI.ZedGraph.BarSettings.Type"/>
            <returns>The width of each bar cluster, in pixel units</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.BarSettings.BarBaseAxis">
            <summary>
            Determine the <see cref="T:Alt.GUI.ZedGraph.Axis"/> from which the <see cref="T:Alt.GUI.ZedGraph.Bar"/> charts are based.
            </summary>
            <seealso cref="T:Alt.GUI.ZedGraph.BarBase"/>
            <seealso cref="T:Alt.GUI.ZedGraph.BarSettings"/>
            <seealso cref="P:Alt.GUI.ZedGraph.BarSettings.Base"/>
            <seealso cref="M:Alt.GUI.ZedGraph.Scale.GetClusterWidth(Alt.GUI.ZedGraph.GraphPane)"/>
            <returns>The <see cref="T:Alt.GUI.ZedGraph.Axis"/> class for the axis from which the bars are based</returns>
        </member>
        <member name="P:Alt.GUI.ZedGraph.BarSettings.MinClusterGap">
            <summary>
            The minimum space between <see cref="T:Alt.GUI.ZedGraph.Bar"/> clusters, expressed as a
            fraction of the bar size.
            </summary>
            <seealso cref="F:Alt.GUI.ZedGraph.BarSettings.Default.MinClusterGap"/>
            <seealso cref="P:Alt.GUI.ZedGraph.BarSettings.MinBarGap"/>
            <seealso cref="P:Alt.GUI.ZedGraph.BarSettings.ClusterScaleWidth"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.BarSettings.MinBarGap">
            <summary>
            The minimum space between individual <see cref="T:Alt.GUI.ZedGraph.Bar">Bars</see>
            within a cluster, expressed as a
            fraction of the bar size.
            </summary>
            <seealso cref="F:Alt.GUI.ZedGraph.BarSettings.Default.MinBarGap"/>
            <seealso cref="P:Alt.GUI.ZedGraph.BarSettings.MinClusterGap"/>
            <seealso cref="P:Alt.GUI.ZedGraph.BarSettings.ClusterScaleWidth"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.BarSettings.Base">
            <summary>Determines the base axis from which <see cref="T:Alt.GUI.ZedGraph.Bar"/>
            graphs will be displayed.
            </summary>
            <remarks>The base axis is the axis from which the bars grow with
            increasing value. The value is of the enumeration type <see cref="T:Alt.GUI.ZedGraph.BarBase"/>.
            </remarks>
            <seealso cref="F:Alt.GUI.ZedGraph.BarSettings.Default.Base"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.BarSettings.Type">
            <summary>Determines how the <see cref="T:Alt.GUI.ZedGraph.BarItem"/>
            graphs will be displayed. See the <see cref="T:Alt.GUI.ZedGraph.BarType"/> enum
            for the individual types available.
            </summary>
            <seealso cref="F:Alt.GUI.ZedGraph.BarSettings.Default.Type"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.BarSettings.ClusterScaleWidth">
            <summary>
            The width of an individual bar cluster on a <see cref="T:Alt.GUI.ZedGraph.Bar"/> graph.
            This value only applies to bar graphs plotted on non-ordinal X axis
            types (<see cref="F:Alt.GUI.ZedGraph.AxisType.Linear"/>, <see cref="F:Alt.GUI.ZedGraph.AxisType.Log"/>, and
            <see cref="F:Alt.GUI.ZedGraph.AxisType.Date"/>.
            </summary>
            <remarks>
            This value can be calculated automatically if <see cref="P:Alt.GUI.ZedGraph.BarSettings.ClusterScaleWidthAuto"/>
            is set to true.  In this case, ClusterScaleWidth will be calculated if
            <see cref="P:Alt.GUI.ZedGraph.BarSettings.Base"/> refers to an <see cref="T:Alt.GUI.ZedGraph.Axis"/> of a non-ordinal type
            (<see cref="P:Alt.GUI.ZedGraph.Scale.IsAnyOrdinal"/> is false).  The ClusterScaleWidth is calculated
            from the minimum difference found between any two points on the <see cref="P:Alt.GUI.ZedGraph.BarSettings.Base"/>
            <see cref="T:Alt.GUI.ZedGraph.Axis"/> for any <see cref="T:Alt.GUI.ZedGraph.BarItem"/> in the
            <see cref="P:Alt.GUI.ZedGraph.GraphPane.CurveList"/>.  The ClusterScaleWidth is set automatically
            each time <see cref="M:Alt.GUI.ZedGraph.GraphPane.AxisChange"/> is called.  Calculations are
            done by the <see cref="M:Alt.GUI.ZedGraph.BarSettings.CalcClusterScaleWidth"/> method.
            </remarks>
            <seealso cref="F:Alt.GUI.ZedGraph.BarSettings.Default.ClusterScaleWidth"/>
            <seealso cref="P:Alt.GUI.ZedGraph.BarSettings.ClusterScaleWidthAuto"/>
            <seealso cref="P:Alt.GUI.ZedGraph.BarSettings.MinBarGap"/>
            <seealso cref="P:Alt.GUI.ZedGraph.BarSettings.MinClusterGap"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.BarSettings.ClusterScaleWidthAuto">
            <summary>
            Gets or sets a property that determines if the <see cref="P:Alt.GUI.ZedGraph.BarSettings.ClusterScaleWidth"/> will be
            calculated automatically.
            </summary>
            <remarks>true for the <see cref="P:Alt.GUI.ZedGraph.BarSettings.ClusterScaleWidth"/> to be calculated
            automatically based on the available data, false otherwise.  This value will
            be set to false automatically if the <see cref="P:Alt.GUI.ZedGraph.BarSettings.ClusterScaleWidth"/> value
            is changed by the user.
            </remarks>
            <seealso cref="F:Alt.GUI.ZedGraph.BarSettings.Default.ClusterScaleWidthAuto"/>
            <seealso cref="P:Alt.GUI.ZedGraph.BarSettings.ClusterScaleWidth"/>
        </member>
        <member name="T:Alt.GUI.ZedGraph.BarSettings.Default">
            <summary>
            A simple struct that defines the
            default property values for the <see cref="T:Alt.GUI.ZedGraph.BarSettings"/> class.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.BarSettings.Default.MinClusterGap">
            <summary>
            The default dimension gap between clusters of bars on a
            <see cref="T:Alt.GUI.ZedGraph.Bar"/> graph.
            This dimension is expressed in terms of the normal bar width.
            </summary>
            <seealso cref="F:Alt.GUI.ZedGraph.BarSettings.Default.MinBarGap"/>
            <seealso cref="P:Alt.GUI.ZedGraph.BarSettings.MinClusterGap"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.BarSettings.Default.MinBarGap">
            <summary>
            The default dimension gap between each individual bar within a bar cluster
            on a <see cref="T:Alt.GUI.ZedGraph.Bar"/> graph.
            This dimension is expressed in terms of the normal bar width.
            </summary>
            <seealso cref="F:Alt.GUI.ZedGraph.BarSettings.Default.MinClusterGap"/>
            <seealso cref="P:Alt.GUI.ZedGraph.BarSettings.MinBarGap"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.BarSettings.Default.Base">
            <summary>The default value for the <see cref="P:Alt.GUI.ZedGraph.BarSettings.Base"/>, which determines the base
            <see cref="T:Alt.GUI.ZedGraph.Axis"/> from which the <see cref="T:Alt.GUI.ZedGraph.Bar"/> graphs will be displayed.
            </summary>
            <seealso cref="P:Alt.GUI.ZedGraph.BarSettings.Base"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.BarSettings.Default.Type">
            <summary>The default value for the <see cref="P:Alt.GUI.ZedGraph.BarSettings.Type"/> property, which
            determines if the bars are drawn overlapping eachother in a "stacked" format,
            or side-by-side in a "cluster" format.  See the <see cref="T:Alt.GUI.ZedGraph.BarType"/>
            for more information.
            </summary>
            <seealso cref="P:Alt.GUI.ZedGraph.BarSettings.Type"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.BarSettings.Default.ClusterScaleWidth">
            <summary>
            The default width of a bar cluster 
            on a <see cref="T:Alt.GUI.ZedGraph.Bar"/> graph.  This value only applies to
            <see cref="T:Alt.GUI.ZedGraph.Bar"/> graphs, and only when the
            <see cref="P:Alt.GUI.ZedGraph.Axis.Type"/> is <see cref="F:Alt.GUI.ZedGraph.AxisType.Linear"/>,
            <see cref="F:Alt.GUI.ZedGraph.AxisType.Log"/> or <see cref="F:Alt.GUI.ZedGraph.AxisType.Date"/>.
            This dimension is expressed in terms of X scale user units.
            </summary>
            <seealso cref="F:Alt.GUI.ZedGraph.BarSettings.Default.MinClusterGap"/>
            <seealso cref="P:Alt.GUI.ZedGraph.BarSettings.MinBarGap"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.BarSettings.Default.ClusterScaleWidthAuto">
            <summary>
            The default value for <see cref="P:Alt.GUI.ZedGraph.BarSettings.ClusterScaleWidthAuto"/>.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.BasicArrayPointList">
            <summary>
            A data collection class for ZedGraph, provided as an alternative to <see cref="T:Alt.GUI.ZedGraph.PointPairList"/>.
            </summary>
            <remarks>
            The data storage class for ZedGraph can be any type, so long as it uses the <see cref="T:Alt.GUI.ZedGraph.IPointList"/>
            interface.  This class, albeit simple, is a demonstration of implementing the <see cref="T:Alt.GUI.ZedGraph.IPointList"/>
            interface to provide a simple data collection using only two arrays.  The <see cref="T:Alt.GUI.ZedGraph.IPointList"/>
            interface can also be used as a layer between ZedGraph and a database, for example.
            </remarks>
            <seealso cref="T:Alt.GUI.ZedGraph.PointPairList"/>
            <seealso cref="T:Alt.GUI.ZedGraph.IPointList"/>
            
            <author> John Champion</author>
            <version> $Revision: 3.4 $ $Date: 2007-02-18 05:51:53 $ </version>
        </member>
        <member name="T:Alt.GUI.ZedGraph.IPointList">
            <summary>
            An interface to a collection class containing data
            that define the set of points to be displayed on the curve.
            </summary>
            <remarks>
            This interface is designed to allow customized data abstraction.  The default data
            collection class is <see cref="T:Alt.GUI.ZedGraph.PointPairList"/>, however, you can define your own
            data collection class using the <see cref="T:Alt.GUI.ZedGraph.IPointList"/> interface.
            </remarks>
            <seealso cref="T:Alt.GUI.ZedGraph.PointPairList"/>
            <seealso cref="T:Alt.GUI.ZedGraph.BasicArrayPointList"/>
            
            <author> John Champion</author>
            <version> $Revision: 1.6 $ $Date: 2007-11-11 07:29:43 $ </version>
        </member>
        <member name="P:Alt.GUI.ZedGraph.IPointList.Item(System.Int32)">
            <summary>
            Indexer to access a data point by its ordinal position in the collection.
            </summary>
            <remarks>
            This is the standard interface that ZedGraph uses to access the data.  Although
            you must pass a <see cref="T:Alt.GUI.ZedGraph.PointPair"/> here, your internal data storage format
            can be anything.
            </remarks>
            <param name="index">The ordinal position (zero-based) of the
            data point to be accessed.</param>
            <value>A <see cref="T:Alt.GUI.ZedGraph.PointPair"/> object instance.</value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.IPointList.Count">
            <summary>
            Gets the number of points available in the list.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.BasicArrayPointList.x">
            <summary>
            Instance of an array of x values
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.BasicArrayPointList.y">
            <summary>
            Instance of an array of x values
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.BasicArrayPointList.#ctor(System.Double[],System.Double[])">
            <summary>
            Constructor to initialize the PointPairList from two arrays of
            type double.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.BasicArrayPointList.#ctor(Alt.GUI.ZedGraph.BasicArrayPointList)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The PointPairList from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.BasicArrayPointList.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.BasicArrayPointList.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.BasicArrayPointList.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="P:Alt.GUI.ZedGraph.BasicArrayPointList.Item(System.Int32)">
            <summary>
            Indexer to access the specified <see cref="T:Alt.GUI.ZedGraph.PointPair"/> object by
            its ordinal position in the list.
            </summary>
            <remarks>
            Returns <see cref="F:Alt.GUI.ZedGraph.PointPairBase.Missing"/> for any value of <see paramref="index"/>
            that is outside of its corresponding array bounds.
            </remarks>
            <param name="index">The ordinal position (zero-based) of the
            <see cref="T:Alt.GUI.ZedGraph.PointPair"/> object to be accessed.</param>
            <value>A <see cref="T:Alt.GUI.ZedGraph.PointPair"/> object reference.</value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.BasicArrayPointList.Count">
            <summary>
            Returns the number of points available in the arrays.  Count will be the greater
            of the lengths of the X and Y arrays.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Border">
            <summary>
            A class that encapsulates Border (frame) properties for an object.  The <see cref="T:Alt.GUI.ZedGraph.Border"/> class
            is used in a variety of ZedGraph objects to handle the drawing of the Border around the object.
            </summary>
            
            <author> John Champion </author>
            <version> $Revision: 3.18 $ $Date: 2007-03-17 18:43:44 $ </version>
        </member>
        <member name="T:Alt.GUI.ZedGraph.LineBase">
            <summary>
            A class that handles the basic attributes of a line segment.
            </summary>
            <remarks>
            This is the base class for <see cref="T:Alt.GUI.ZedGraph.Line"/> and <see cref="T:Alt.GUI.ZedGraph.Border"/> classes.
            </remarks>
            <author> John Champion </author>
            <version> $Revision: 3.2 $ $Date: 2007-03-17 18:43:44 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.LineBase.schema0">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.LineBase._width">
            <summary>
            Private field that stores the pen width for this line.
            Use the public property <see cref="P:Alt.GUI.ZedGraph.LineBase.Width"/> to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.LineBase._style">
            <summary>
            Private field that stores the <see cref="T:Alt.Sketch.DashStyle"/> for this
            line.  Use the public
            property <see cref="P:Alt.GUI.ZedGraph.LineBase.Style"/> to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.LineBase._dashOn">
            <summary>
            private field that stores the "Dash On" length for drawing the line.  Use the
            public property <see cref="P:Alt.GUI.ZedGraph.LineBase.DashOn"/> to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.LineBase._dashOff">
            <summary>
            private field that stores the "Dash Off" length for drawing the line.  Use the
            public property <see cref="P:Alt.GUI.ZedGraph.LineBase.DashOff"/> to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.LineBase._isVisible">
            <summary>
            Private field that stores the visibility of this line.  Use the public
            property <see cref="P:Alt.GUI.ZedGraph.LineBase.IsVisible"/> to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.LineBase._isAntiAlias">
            <summary>
            private field that determines if the line is drawn using
            Anti-Aliasing capabilities from the <see cref="T:Alt.Sketch.Graphics"/> class.
            Use the public property <see cref="P:Alt.GUI.ZedGraph.LineBase.IsAntiAlias"/> to access
            this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.LineBase._color">
            <summary>
            Private field that stores the color of this line.  Use the public
            property <see cref="P:Alt.GUI.ZedGraph.LineBase.Color"/> to access this value.  If this value is
            false, the line will not be shown (but the <see cref="T:Alt.GUI.ZedGraph.Symbol"/> may
            still be shown).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.LineBase._gradientFill">
            <summary>
            Internal field that stores a custom <see cref="T:Alt.GUI.ZedGraph.Fill"/> class.  This
            fill is used strictly for <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByX"/>,
            <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByY"/>, <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByZ"/>,
            and <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByColorValue"/> calculations to determine
            the color of the line.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LineBase.#ctor">
            <summary>
            Default constructor that sets all <see cref="T:Alt.GUI.ZedGraph.LineBase"/> properties to default
            values as defined in the <see cref="T:Alt.GUI.ZedGraph.LineBase.Default"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LineBase.#ctor(Alt.Sketch.Color)">
            <summary>
            Constructor that sets the color property to the specified value, and sets
            the remaining <see cref="T:Alt.GUI.ZedGraph.LineBase"/> properties to default
            values as defined in the <see cref="T:Alt.GUI.ZedGraph.LineBase.Default"/> class.
            </summary>
            <param name="color">The color to assign to this new Line object</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LineBase.#ctor(Alt.GUI.ZedGraph.LineBase)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The LineBase object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LineBase.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of Clone.
            </summary>
            <remarks>
            Note that this method must be called with an explicit cast to ICloneable, and
            that it is inherently virtual.  For example:
            <code>
            ParentClass foo = new ChildClass();
            ChildClass bar = (ChildClass) ((ICloneable)foo).Clone();
            </code>
            Assume that ChildClass is inherited from ParentClass.  Even though foo is declared with
            ParentClass, it is actually an instance of ChildClass.  Calling the ICloneable implementation
            of Clone() on foo actually calls ChildClass.Clone() as if it were a virtual function.
            </remarks>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LineBase.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the
            serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains
            the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LineBase.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize
            the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the
            serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the
            serialized data</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LineBase.GetPen(Alt.GUI.ZedGraph.PaneBase,System.Double)">
            <summary>
            Create a <see cref="T:Alt.Sketch.Pen"/> object based on the properties of this
            <see cref="T:Alt.GUI.ZedGraph.LineBase"/>.
            </summary>
            <param name="pane">The owner <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> of this
            <see cref="T:Alt.GUI.ZedGraph.LineBase"/>.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <returns>A <see cref="T:Alt.Sketch.Pen"/> object with the properties of this <see cref="T:Alt.GUI.ZedGraph.LineBase"/>
            </returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LineBase.GetPen(Alt.GUI.ZedGraph.PaneBase,System.Double,Alt.GUI.ZedGraph.PointPair)">
            <summary>
            Create a <see cref="T:Alt.Sketch.Pen"/> object based on the properties of this
            <see cref="T:Alt.GUI.ZedGraph.LineBase"/>.
            </summary>
            <param name="pane">The owner <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> of this
            <see cref="T:Alt.GUI.ZedGraph.LineBase"/>.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <param name="dataValue">The data value to be used for a value-based
            color gradient.  This is only applicable if <see cref="P:Alt.GUI.ZedGraph.Fill.Type">GradientFill.Type</see>
            is one of <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByX"/>,
            <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByY"/>, <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByZ"/>,
            or <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByColorValue"/>.
            </param>
            <returns>A <see cref="T:Alt.Sketch.Pen"/> object with the properties of this <see cref="T:Alt.GUI.ZedGraph.LineBase"/>
            </returns>
        </member>
        <member name="P:Alt.GUI.ZedGraph.LineBase.Color">
            <summary>
            The color of the <see cref="T:Alt.GUI.ZedGraph.Line"/>.  Note that this color value can be
            overridden if the <see cref="P:Alt.GUI.ZedGraph.Fill.Type">GradientFill.Type</see> is one of the
            <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByX"/>,
            <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByY"/>, <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByZ"/>,
            and <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByColorValue"/> types.
            </summary>
            <seealso cref="P:Alt.GUI.ZedGraph.LineBase.GradientFill"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.LineBase.Style">
            <summary>
            The style of the <see cref="T:Alt.GUI.ZedGraph.Line"/>, defined as a <see cref="T:Alt.Sketch.DashStyle"/> enum.
            This allows the line to be solid, dashed, or dotted.
            </summary>
            <seealso cref="F:Alt.GUI.ZedGraph.LineBase.Default.Style"/>
            <seealso cref="P:Alt.GUI.ZedGraph.LineBase.DashOn"/>
            <seealso cref="P:Alt.GUI.ZedGraph.LineBase.DashOff"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.LineBase.DashOn">
            <summary>
            The "Dash On" mode for drawing the line.
            </summary>
            <remarks>
            This is the distance, in points (1/72 inch), of the dash segments that make up
            the dashed grid lines.  This setting is only valid if 
            <see cref="P:Alt.GUI.ZedGraph.LineBase.Style"/> is set to <see cref="F:Alt.Sketch.DashStyle.Custom"/>.
            </remarks>
            <value>The dash on length is defined in points (1/72 inch)</value>
            <seealso cref="P:Alt.GUI.ZedGraph.LineBase.DashOff"/>
            <seealso cref="P:Alt.GUI.ZedGraph.LineBase.IsVisible"/>
            <seealso cref="F:Alt.GUI.ZedGraph.LineBase.Default.DashOn"/>.
        </member>
        <member name="P:Alt.GUI.ZedGraph.LineBase.DashOff">
            <summary>
            The "Dash Off" mode for drawing the line.
            </summary>
            <remarks>
            This is the distance, in points (1/72 inch), of the spaces between the dash
            segments that make up the dashed grid lines.  This setting is only valid if 
            <see cref="P:Alt.GUI.ZedGraph.LineBase.Style"/> is set to <see cref="F:Alt.Sketch.DashStyle.Custom"/>.
            </remarks>
            <value>The dash off length is defined in points (1/72 inch)</value>
            <seealso cref="P:Alt.GUI.ZedGraph.LineBase.DashOn"/>
            <seealso cref="P:Alt.GUI.ZedGraph.LineBase.IsVisible"/>
            <seealso cref="F:Alt.GUI.ZedGraph.LineBase.Default.DashOff"/>.
        </member>
        <member name="P:Alt.GUI.ZedGraph.LineBase.Width">
            <summary>
            The pen width used to draw the <see cref="T:Alt.GUI.ZedGraph.Line"/>, in points (1/72 inch)
            </summary>
            <seealso cref="F:Alt.GUI.ZedGraph.LineBase.Default.Width"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.LineBase.IsVisible">
            <summary>
            Gets or sets a property that shows or hides the <see cref="T:Alt.GUI.ZedGraph.Line"/>.
            </summary>
            <value>true to show the line, false to hide it</value>
            <seealso cref="F:Alt.GUI.ZedGraph.LineBase.Default.IsVisible"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.LineBase.IsAntiAlias">
            <summary>
            Gets or sets a value that determines if the lines are drawn using
            Anti-Aliasing capabilities from the <see cref="T:Alt.Sketch.Graphics"/> class.
            </summary>
            <remarks>
            If this value is set to true, then the <see cref="P:Alt.Sketch.Graphics.SmoothingMode"/>
            property will be set to <see cref="F:Alt.Sketch.SmoothingMode.HighQuality"/> only while
            this <see cref="T:Alt.GUI.ZedGraph.Line"/> is drawn.  A value of false will leave the value of
            <see cref="P:Alt.Sketch.Graphics.SmoothingMode"/> unchanged.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.LineBase.GradientFill">
            <summary>
            Gets or sets a custom <see cref="T:Alt.GUI.ZedGraph.Fill"/> class.
            </summary>
            <remarks>This fill is used strictly for <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByX"/>,
            <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByY"/>, <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByZ"/>,
            and <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByColorValue"/> calculations to determine
            the color of the line.  It overrides the <see cref="P:Alt.GUI.ZedGraph.LineBase.Color"/> property if
            one of the above <see cref="T:Alt.GUI.ZedGraph.FillType"/> values are selected.
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.LineBase.Color"/>
        </member>
        <member name="T:Alt.GUI.ZedGraph.LineBase.Default">
            <summary>
            A simple struct that defines the
            default property values for the <see cref="T:Alt.GUI.ZedGraph.LineBase"/> class.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.LineBase.Default.IsVisible">
            <summary>
            The default mode for displaying line segments (<see cref="P:Alt.GUI.ZedGraph.LineBase.IsVisible"/>
            property).  True to show the line segments, false to hide them.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.LineBase.Default.Width">
            <summary>
            The default width for line segments (<see cref="P:Alt.GUI.ZedGraph.LineBase.Width"/> property).
            Units are points (1/72 inch).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.LineBase.Default.IsAntiAlias">
            <summary>
            The default value for the <see cref="P:Alt.GUI.ZedGraph.LineBase.IsAntiAlias"/>
            property.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.LineBase.Default.Style">
            <summary>
            The default drawing style for line segments (<see cref="P:Alt.GUI.ZedGraph.LineBase.Style"/> property).
            This is defined with the <see cref="T:Alt.Sketch.DashStyle"/> enumeration.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.LineBase.Default.DashOn">
            <summary>
            The default "dash on" size for drawing the line
            (<see cref="P:Alt.GUI.ZedGraph.LineBase.DashOn"/> property). Units are in points (1/72 inch).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.LineBase.Default.DashOff">
            <summary>
            The default "dash off" size for drawing the the line
            (<see cref="P:Alt.GUI.ZedGraph.LineBase.DashOff"/> property). Units are in points (1/72 inch).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.LineBase.Default.Color">
            <summary>
            The default color for the line.
            This is the default value for the <see cref="P:Alt.GUI.ZedGraph.LineBase.Color"/> property.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Border.schema">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Border._inflateFactor">
            <summary>
            Private field that stores the amount of inflation to be done on the rectangle
            before rendering.  This allows the border to be inset or outset relative to
            the actual rectangle area.  Use the public property <see cref="P:Alt.GUI.ZedGraph.Border.InflateFactor"/>
            to access this value.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Border.#ctor">
            <summary>
            The default constructor.  Initialized to default values.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Border.#ctor(System.Boolean,Alt.Sketch.Color,System.Single)">
            <summary>
            Constructor that specifies the visibility, color and penWidth of the Border.
            </summary>
            <param name="isVisible">Determines whether or not the Border will be drawn.</param>
            <param name="color">The color of the Border</param>
            <param name="width">The width, in points (1/72 inch), for the Border.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Border.#ctor(Alt.Sketch.Color,System.Single)">
            <summary>
            Constructor that specifies the color and penWidth of the Border.
            </summary>
            <param name="color">The color of the Border</param>
            <param name="width">The width, in points (1/72 inch), for the Border.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Border.#ctor(Alt.GUI.ZedGraph.Border)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The Border object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Border.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.Border.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Border.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Border.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Border.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Border.Draw(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.PaneBase,System.Double,Alt.Sketch.Rect)">
            <summary>
            Draw the specified Border (<see cref="T:Alt.Sketch.Rect"/>) using the properties of
            this <see cref="T:Alt.GUI.ZedGraph.Border"/> object.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.PaneBase"/> object that is the parent or
            owner of this object.
            </param>
            <param name="scaleFactor">
            The scaling factor for the features of the graph based on the <see cref="P:Alt.GUI.ZedGraph.PaneBase.BaseDimension"/>.  This
            scaling factor is calculated by the <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method.  The scale factor
            represents a linear multiple to be applied to font sizes, symbol sizes, etc.
            </param>
            <param name="rect">A <see cref="T:Alt.Sketch.Rect"/> struct to be drawn.</param>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Border.InflateFactor">
            <summary>
            Gets or sets the amount of inflation to be done on the rectangle
            before rendering.
            </summary>
            <remarks>This allows the border to be inset or outset relative to
            the actual rectangle area.
            </remarks>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Border.Default">
            <summary>
            A simple struct that defines the
            default property values for the <see cref="T:Alt.GUI.ZedGraph.Fill"/> class.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Border.Default.InflateFactor">
            <summary>
            The default value for <see cref="P:Alt.GUI.ZedGraph.Border.InflateFactor"/>, in units of points (1/72 inch).
            </summary>
            <seealso cref="P:Alt.GUI.ZedGraph.Border.InflateFactor"/>
        </member>
        <member name="T:Alt.GUI.ZedGraph.BoxObj">
            <summary>
            A class that represents a bordered and/or filled box (rectangle) object on
            the graph.  A list of
            BoxObj objects is maintained by the <see cref="T:Alt.GUI.ZedGraph.GraphObjList"/> collection class.
            </summary>
            
            <author> John Champion </author>
            <version> $Revision: 3.3 $ $Date: 2007-01-25 07:56:08 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.BoxObj.schema2">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.BoxObj._fill">
            <summary>
            Private field that stores the <see cref="T:Alt.GUI.ZedGraph.Fill"/> data for this
            <see cref="T:Alt.GUI.ZedGraph.BoxObj"/>.  Use the public property <see cref="P:Alt.GUI.ZedGraph.BoxObj.Fill"/> to
            access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.BoxObj._border">
            <summary>
            Private field that determines the properties of the border around this
            <see cref="T:Alt.GUI.ZedGraph.BoxObj"/>
            Use the public property <see cref="P:Alt.GUI.ZedGraph.BoxObj.Border"/> to access this value.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.BoxObj.#ctor(System.Double,System.Double,System.Double,System.Double,Alt.Sketch.Color,Alt.Sketch.Color)">
            <overloads>Constructors for the <see cref="T:Alt.GUI.ZedGraph.BoxObj"/> object</overloads>
            <summary>
            A constructor that allows the position, border color, and solid fill color
            of the <see cref="T:Alt.GUI.ZedGraph.BoxObj"/> to be pre-specified.
            </summary>
            <param name="borderColor">An arbitrary <see cref="!:System.Drawing.Color"/> specification
            for the box border</param>
            <param name="fillColor">An arbitrary <see cref="!:System.Drawing.Color"/> specification
            for the box fill (will be a solid color fill)</param>
            <param name="x">The x location for this <see cref="T:Alt.GUI.ZedGraph.BoxObj"/>.  This will be in units determined by
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/>.</param>
            <param name="y">The y location for this <see cref="T:Alt.GUI.ZedGraph.BoxObj"/>.  This will be in units determined by
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/>.</param>
            <param name="width">The width of this <see cref="T:Alt.GUI.ZedGraph.BoxObj"/>.  This will be in units determined by
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/>.</param>
            <param name="height">The height of this <see cref="T:Alt.GUI.ZedGraph.BoxObj"/>.  This will be in units determined by
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/>.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.BoxObj.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            A constructor that allows the position
            of the <see cref="T:Alt.GUI.ZedGraph.BoxObj"/> to be pre-specified.  Other properties are defaulted.
            </summary>
            <param name="x">The x location for this <see cref="T:Alt.GUI.ZedGraph.BoxObj"/>.  This will be in units determined by
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/>.</param>
            <param name="y">The y location for this <see cref="T:Alt.GUI.ZedGraph.BoxObj"/>.  This will be in units determined by
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/>.</param>
            <param name="width">The width of this <see cref="T:Alt.GUI.ZedGraph.BoxObj"/>.  This will be in units determined by
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/>.</param>
            <param name="height">The height of this <see cref="T:Alt.GUI.ZedGraph.BoxObj"/>.  This will be in units determined by
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/>.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.BoxObj.#ctor">
            <summary>
            A default constructor that creates a <see cref="T:Alt.GUI.ZedGraph.BoxObj"/> using a location of (0,0),
            and a width,height of (1,1).  Other properties are defaulted.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.BoxObj.#ctor(System.Double,System.Double,System.Double,System.Double,Alt.Sketch.Color,Alt.Sketch.Color,Alt.Sketch.Color)">
            <summary>
            A constructor that allows the position, border color, and two-color
            gradient fill colors
            of the <see cref="T:Alt.GUI.ZedGraph.BoxObj"/> to be pre-specified.
            </summary>
            <param name="borderColor">An arbitrary <see cref="!:System.Drawing.Color"/> specification
            for the box border</param>
            <param name="fillColor1">An arbitrary <see cref="!:System.Drawing.Color"/> specification
            for the start of the box gradient fill</param>
            <param name="fillColor2">An arbitrary <see cref="!:System.Drawing.Color"/> specification
            for the end of the box gradient fill</param>
            <param name="x">The x location for this <see cref="T:Alt.GUI.ZedGraph.BoxObj"/>.  This will be in units determined by
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/>.</param>
            <param name="y">The y location for this <see cref="T:Alt.GUI.ZedGraph.BoxObj"/>.  This will be in units determined by
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/>.</param>
            <param name="width">The width of this <see cref="T:Alt.GUI.ZedGraph.BoxObj"/>.  This will be in units determined by
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/>.</param>
            <param name="height">The height of this <see cref="T:Alt.GUI.ZedGraph.BoxObj"/>.  This will be in units determined by
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/>.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.BoxObj.#ctor(Alt.GUI.ZedGraph.BoxObj)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:Alt.GUI.ZedGraph.BoxObj"/> object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.BoxObj.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.BoxObj.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.BoxObj.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.BoxObj.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.BoxObj.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.BoxObj.Draw(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.PaneBase,System.Double)">
            <summary>
            Render this object to the specified <see cref="T:Alt.Sketch.Graphics"/> device.
            </summary>
            <remarks>
            This method is normally only called by the Draw method
            of the parent <see cref="T:Alt.GUI.ZedGraph.GraphObjList"/> collection object.
            </remarks>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.PaneBase"/> object that is the parent or
            owner of this object.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.BoxObj.PointInBox(Alt.Sketch.Point,Alt.GUI.ZedGraph.PaneBase,Alt.Sketch.Graphics,System.Double)">
            <summary>
            Determine if the specified screen point lies inside the bounding box of this
            <see cref="T:Alt.GUI.ZedGraph.BoxObj"/>.
            </summary>
            <param name="pt">The screen point, in pixels</param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.PaneBase"/> object that is the parent or
            owner of this object.
            </param>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <returns>true if the point lies in the bounding box, false otherwise</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.BoxObj.GetCoords(Alt.GUI.ZedGraph.PaneBase,Alt.Sketch.Graphics,System.Double,System.String@,System.String@)">
            <summary>
            Determines the shape type and Coords values for this GraphObj
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.BoxObj.Fill">
            <summary>
            Gets or sets the <see cref="T:Alt.GUI.ZedGraph.Fill"/> data for this
            <see cref="T:Alt.GUI.ZedGraph.BoxObj"/>.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.BoxObj.Border">
            <summary>
            Gets or sets the <see cref="T:Alt.GUI.ZedGraph.Border"/> object, which
            determines the properties of the border around this
            <see cref="T:Alt.GUI.ZedGraph.BoxObj"/>
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.BoxObj.Default">
            <summary>
            A simple struct that defines the
            default property values for the <see cref="T:Alt.GUI.ZedGraph.ArrowObj"/> class.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.BoxObj.Default.PenWidth">
            <summary>
            The default pen width used for the <see cref="T:Alt.GUI.ZedGraph.BoxObj"/> border
            (<see cref="P:Alt.GUI.ZedGraph.LineBase.Width"/> property).  Units are points (1/72 inch).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.BoxObj.Default.BorderColor">
            <summary>
            The default color used for the <see cref="T:Alt.GUI.ZedGraph.BoxObj"/> border
            (<see cref="P:Alt.GUI.ZedGraph.LineBase.Color"/> property).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.BoxObj.Default.FillColor">
            <summary>
            The default color used for the <see cref="T:Alt.GUI.ZedGraph.BoxObj"/> fill
            (<see cref="P:Alt.GUI.ZedGraph.Fill.Color"/> property).
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Chart">
            <summary>
            Class that handles the properties of the charting area (where the curves are
            actually drawn), which is bounded by the <see cref="T:Alt.GUI.ZedGraph.XAxis"/>, <see cref="T:Alt.GUI.ZedGraph.YAxis"/>,
            and <see cref="T:Alt.GUI.ZedGraph.Y2Axis"/>.
            </summary>
            
            <author> John Champion </author>
            <version> $Revision: 3.1 $ $Date: 2006-06-24 20:26:44 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Chart.schema">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Chart._rect">
            <summary>
            The rectangle that contains the area bounded by the axes, in pixel units
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Chart._fill">
            <summary>
            Private field that stores the <see cref="T:Alt.GUI.ZedGraph.Fill"/> data for this
            <see cref="T:Alt.GUI.ZedGraph.Chart"/>.  Use the public property <see cref="P:Alt.GUI.ZedGraph.Chart.Fill"/> to
            access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Chart._border">
            <summary>
            Private field that stores the <see cref="T:Alt.GUI.ZedGraph.Border"/> data for this
            <see cref="T:Alt.GUI.ZedGraph.Chart"/>.  Use the public property <see cref="P:Alt.GUI.ZedGraph.Chart.Border"/> to
            access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Chart._isRectAuto">
            <summary>Private field that determines if the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/> will be
            sized automatically.  Use the public property <see cref="P:Alt.GUI.ZedGraph.Chart.IsRectAuto"/> to access
            this value. </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Chart.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Chart.#ctor(Alt.GUI.ZedGraph.Chart)">
            <summary>
            Copy constructor
            </summary>
            <param name="rhs">The source <see cref="T:Alt.GUI.ZedGraph.Chart"/> to be copied.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Chart.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.Chart.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Chart.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Chart.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Chart.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Chart.Rect">
            <summary>
            Gets or sets the rectangle that contains the area bounded by the axes
            (<see cref="T:Alt.GUI.ZedGraph.XAxis"/>, <see cref="T:Alt.GUI.ZedGraph.YAxis"/>, and <see cref="T:Alt.GUI.ZedGraph.Y2Axis"/>).
            If you set this value manually, then the <see cref="P:Alt.GUI.ZedGraph.Chart.IsRectAuto"/>
            value will automatically be set to false.
            </summary>
            <value>The rectangle units are in screen pixels</value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Chart.Fill">
            <summary>
            Gets or sets the <see cref="T:Alt.GUI.ZedGraph.Fill"/> data for this
            <see cref="T:Alt.GUI.ZedGraph.Chart"/>.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Chart.Border">
            <summary>
            Gets or sets the <see cref="T:Alt.GUI.ZedGraph.Border"/> class for drawing the border
            border around the <see cref="T:Alt.GUI.ZedGraph.Chart"/>
            </summary>
            <seealso cref="F:Alt.GUI.ZedGraph.Chart.Default.BorderColor"/>
            <seealso cref="F:Alt.GUI.ZedGraph.Chart.Default.BorderPenWidth"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Chart.IsRectAuto">
            <summary>
            Gets or sets a boolean value that determines whether or not the 
            <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/> will be calculated automatically (almost always true).
            </summary>
            <remarks>
            If you have a need to set the ChartRect manually, such as you have multiple graphs
            on a page and you want to line up the edges perfectly, you can set this value
            to false.  If you set this value to false, you must also manually set
            the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/> property.
            You can easily determine the ChartRect that ZedGraph would have
            calculated by calling the <see cref="M:Alt.GUI.ZedGraph.GraphPane.CalcChartRect(Alt.Sketch.Graphics)"/> method, which returns
            a chart rect sized for the current data range, scale sizes, etc.
            </remarks>
            <value>true to have ZedGraph calculate the ChartRect, false to do it yourself</value>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Chart.Default">
            <summary>
            A simple struct that defines the
            default property values for the <see cref="T:Alt.GUI.ZedGraph.Chart"/> class.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Chart.Default.BorderColor">
            <summary>
            The default color for the <see cref="T:Alt.GUI.ZedGraph.Chart"/> border.
            (<see cref="P:Alt.GUI.ZedGraph.Chart.Border"/> property). 
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Chart.Default.FillColor">
            <summary>
            The default color for the <see cref="T:Alt.GUI.ZedGraph.Chart"/> background.
            (<see cref="P:Alt.GUI.ZedGraph.Chart.Fill"/> property). 
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Chart.Default.FillBrush">
            <summary>
            The default brush for the <see cref="P:Alt.GUI.ZedGraph.GraphPane.Chart"/> background.
            (<see cref="P:Alt.GUI.ZedGraph.Fill.Brush"/> property of <see cref="P:Alt.GUI.ZedGraph.Chart.Fill"/>). 
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Chart.Default.FillType">
            <summary>
            The default <see cref="F:Alt.GUI.ZedGraph.Chart.Default.FillType"/> for the <see cref="P:Alt.GUI.ZedGraph.GraphPane.Chart"/> background.
            (<see cref="P:Alt.GUI.ZedGraph.Fill.Type"/> property of <see cref="P:Alt.GUI.ZedGraph.Chart.Fill"/>). 
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Chart.Default.BorderPenWidth">
            <summary>
            The default pen width for drawing the 
            <see cref="P:Alt.GUI.ZedGraph.GraphPane.Chart"/> border
            (<see cref="P:Alt.GUI.ZedGraph.Chart.Border"/> property).
            Units are in points (1/72 inch).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Chart.Default.IsBorderVisible">
            <summary>
            The default display mode for the <see cref="T:Alt.GUI.ZedGraph.Chart"/> border
            (<see cref="P:Alt.GUI.ZedGraph.Chart.Border"/> property). true
            to show the border border, false to omit the border
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.CollectionPlus">
            <summary>
            A collection base class containing basic extra functionality to be inherited
            by <see cref="T:Alt.GUI.ZedGraph.CurveList"/>, <see cref="T:Alt.GUI.ZedGraph.IPointList"/>,
            <see cref="T:Alt.GUI.ZedGraph.GraphObjList"/>.
            </summary>
            <remarks>The methods in this collection operate on basic
            <see cref="T:System.Object"/> types.  Therefore, in order to make sure that
            the derived classes remain strongly-typed, there are no Add() or
            Insert() methods here, and no methods that return an object.
            Only Remove(), Move(), IndexOf(), etc. methods are included.</remarks>
            
            <author> John Champion</author>
            <version> $Revision: 3.8 $ $Date: 2006-06-24 20:26:43 $ </version>
        </member>
        <member name="M:Alt.GUI.ZedGraph.CollectionPlus.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.CollectionPlus.IndexOf(System.Object)">
            <summary>
            Return the zero-based position index of the specified object
            in the collection.
            </summary>
            <param name="item">A reference to the object that is to be found.
            </param>
            <returns>The zero-based index of the specified object, or -1 if the
            object is not in the list</returns>
            <seealso cref="!:IList.IndexOf"/>
        </member>
        <member name="M:Alt.GUI.ZedGraph.CollectionPlus.Remove(System.Int32)">
            <summary>
            Remove an object from the collection at the specified ordinal location.
            </summary>
            <param name="index">
            An ordinal position in the list at which the object to be removed 
            is located.
            </param>
            <seealso cref="!:IList.Remove"/>
        </member>
        <member name="M:Alt.GUI.ZedGraph.CollectionPlus.Remove(System.Object)">
            <summary>
            Remove an object from the collection based on an object reference.
            </summary>
            <param name="item">A reference to the object that is to be
            removed.</param>
            <seealso cref="!:IList.Remove"/>
        </member>
        <member name="M:Alt.GUI.ZedGraph.CollectionPlus.Move(System.Int32,System.Int32)">
            <summary>
            Move the position of the object at the specified index
            to the new relative position in the list.</summary>
            <remarks>For Graphic type objects, this method controls the
            Z-Order of the items.  Objects at the beginning of the list
            appear in front of objects at the end of the list.</remarks>
            <param name="index">The zero-based index of the object
            to be moved.</param>
            <param name="relativePos">The relative number of positions to move
            the object.  A value of -1 will move the
            object one position earlier in the list, a value
            of 1 will move it one position later.  To move an item to the
            beginning of the list, use a large negative value (such as -999).
            To move it to the end of the list, use a large positive value.
            </param>
            <returns>The new position for the object, or -1 if the object
            was not found.</returns>
        </member>
        <member name="T:Alt.GUI.ZedGraph.ColorSymbolRotator">
            <summary>
            Class used to get the next color/symbol for GraphPane.AddCurve methods.
            </summary>
            
            <author> Jerry Vos modified by John Champion </author>
            <version> $Revision: 3.4 $ $Date: 2006-06-24 20:26:43 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ColorSymbolRotator.COLORS">
            <summary>
            The <see cref="T:Alt.Sketch.Color"/>s <see cref="T:Alt.GUI.ZedGraph.ColorSymbolRotator"/> 
            rotates through.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ColorSymbolRotator.SYMBOLS">
            <summary>
            The <see cref="T:Alt.GUI.ZedGraph.SymbolType"/>s <see cref="T:Alt.GUI.ZedGraph.ColorSymbolRotator"/> 
            rotates through.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ColorSymbolRotator.colorIndex">
            <summary>
            The index of the next color to be used. Note: may be 
            > COLORS.Length, it is reset to 0 on the next call if it is.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ColorSymbolRotator.symbolIndex">
            <summary>
            The index of the next symbol to be used. Note: may be 
            > SYMBOLS.Length, it is reset to 0 on the next call if it is.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ColorSymbolRotator.NextColor">
            <summary>
            Retrieves the next color in the rotation  Calling this
            method has the side effect of incrementing the color index.
            <seealso cref="P:Alt.GUI.ZedGraph.ColorSymbolRotator.NextSymbol"/>
            <seealso cref="P:Alt.GUI.ZedGraph.ColorSymbolRotator.NextColorIndex"/>
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ColorSymbolRotator.NextColorIndex">
            <summary>
            Retrieves the index of the next color to be used.  Calling this
            method has the side effect of incrementing the color index.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ColorSymbolRotator.NextSymbol">
            <summary>
            Retrieves the next color in the rotation.  Calling this
            method has the side effect of incrementing the symbol index.
            <seealso cref="P:Alt.GUI.ZedGraph.ColorSymbolRotator.NextColor"/>
            <seealso cref="P:Alt.GUI.ZedGraph.ColorSymbolRotator.NextSymbolIndex"/>
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ColorSymbolRotator.NextSymbolIndex">
            <summary>
            Retrieves the index of the next symbol to be used.  Calling this
            method has the side effect of incrementing the symbol index.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ColorSymbolRotator.StaticInstance">
            <summary>
            Retrieves the <see cref="T:Alt.GUI.ZedGraph.ColorSymbolRotator"/> instance used by the
            static methods.
            <seealso cref="P:Alt.GUI.ZedGraph.ColorSymbolRotator.StaticNextColor"/>
            <seealso cref="P:Alt.GUI.ZedGraph.ColorSymbolRotator.StaticNextSymbol"/>
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ColorSymbolRotator.StaticNextColor">
            <summary>
            Retrieves the next color from this class's static 
            <see cref="T:Alt.GUI.ZedGraph.ColorSymbolRotator"/> instance
            <seealso cref="P:Alt.GUI.ZedGraph.ColorSymbolRotator.StaticInstance"/>
            <seealso cref="P:Alt.GUI.ZedGraph.ColorSymbolRotator.StaticNextSymbol"/>
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ColorSymbolRotator.StaticNextSymbol">
            <summary>
            Retrieves the next symbol type from this class's static 
            <see cref="T:Alt.GUI.ZedGraph.ColorSymbolRotator"/> instance
            <seealso cref="P:Alt.GUI.ZedGraph.ColorSymbolRotator.StaticInstance"/>
            <seealso cref="P:Alt.GUI.ZedGraph.ColorSymbolRotator.StaticNextColor"/>
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.CurveList">
            <summary>
            A collection class containing a list of <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> objects
            that define the set of curves to be displayed on the graph.
            </summary>
            
            <author> John Champion
            modified by Jerry Vos</author>
            <version> $Revision: 3.43 $ $Date: 2007-11-03 04:41:28 $ </version>
        </member>
        <member name="M:Alt.GUI.ZedGraph.CurveList.HasData">
            <summary>
            Determine if there is any data in any of the <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>
            objects for this graph.  This method does not verify valid data, it
            only checks to see if <see cref="P:Alt.GUI.ZedGraph.CurveItem.NPts"/> &gt; 0.
            </summary>
            <returns>true if there is any data, false otherwise</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.CurveList.#ctor">
            <summary>
            Default constructor for the collection class
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.CurveList.#ctor(Alt.GUI.ZedGraph.CurveList)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The XAxis object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.CurveList.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.CurveList.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.CurveList.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.CurveList.IndexOf(System.String)">
            <summary>
            Return the zero-based position index of the
            <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> with the specified <see cref="P:Alt.GUI.ZedGraph.CurveItem.Label"/>.
            </summary>
            <param name="label">The <see cref="T:System.String"/> label that is in the
            <see cref="P:Alt.GUI.ZedGraph.CurveItem.Label"/> attribute of the item to be found.
            </param>
            <returns>The zero-based index of the specified <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>,
            or -1 if the <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> is not in the list</returns>
            <seealso cref="M:Alt.GUI.ZedGraph.CurveList.IndexOfTag(System.String)"/>
        </member>
        <member name="M:Alt.GUI.ZedGraph.CurveList.IndexOfTag(System.String)">
            <summary>
            Return the zero-based position index of the
            <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> with the specified <see cref="F:Alt.GUI.ZedGraph.CurveItem.Tag"/>.
            </summary>
            <remarks>In order for this method to work, the <see cref="F:Alt.GUI.ZedGraph.CurveItem.Tag"/>
            property must be of type <see cref="T:System.String"/>.</remarks>
            <param name="tag">The <see cref="T:System.String"/> tag that is in the
            <see cref="F:Alt.GUI.ZedGraph.CurveItem.Tag"/> attribute of the item to be found.
            </param>
            <returns>The zero-based index of the specified <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>,
            or -1 if the <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> is not in the list</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.CurveList.Sort(Alt.GUI.ZedGraph.SortType,System.Int32)">
            <summary>
            Sorts the list according to the point values at the specified index and
            for the specified axis.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.CurveList.Move(System.Int32,System.Int32)">
            <summary>
            Move the position of the object at the specified index
            to the new relative position in the list.</summary>
            <remarks>For Graphic type objects, this method controls the
            Z-Order of the items.  Objects at the beginning of the list
            appear in front of objects at the end of the list.</remarks>
            <param name="index">The zero-based index of the object
            to be moved.</param>
            <param name="relativePos">The relative number of positions to move
            the object.  A value of -1 will move the
            object one position earlier in the list, a value
            of 1 will move it one position later.  To move an item to the
            beginning of the list, use a large negative value (such as -999).
            To move it to the end of the list, use a large positive value.
            </param>
            <returns>The new position for the object, or -1 if the object
            was not found.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.CurveList.GetRange(System.Boolean,System.Boolean,Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Go through each <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> object in the collection,
            calling the <see cref="M:Alt.GUI.ZedGraph.CurveItem.GetRange(System.Double@,System.Double@,System.Double@,System.Double@,System.Boolean,System.Boolean,Alt.GUI.ZedGraph.GraphPane)"/> member to 
            determine the minimum and maximum values in the
            <see cref="P:Alt.GUI.ZedGraph.CurveItem.Points"/> list of data value pairs.  If the curves include 
            a stack bar, handle within the current GetRange method. In the event that no
            data are available, a default range of min=0.0 and max=1.0 are returned.
            If the Y axis has a valid data range and the Y2 axis not, then the Y2
            range will be a duplicate of the Y range.  Vice-versa for the Y2 axis
            having valid data when the Y axis does not.
            If any <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> in the list has a missing
            <see cref="T:Alt.GUI.ZedGraph.PointPairList"/>, a new empty one will be generated.
            </summary>
            <param name="bIgnoreInitial">ignoreInitial is a boolean value that
            affects the data range that is considered for the automatic scale
            ranging (see <see cref="P:Alt.GUI.ZedGraph.GraphPane.IsIgnoreInitial"/>).  If true, then initial
            data points where the Y value is zero are not included when
            automatically determining the scale <see cref="P:Alt.GUI.ZedGraph.Scale.Min"/>,
            <see cref="P:Alt.GUI.ZedGraph.Scale.Max"/>, and <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/> size.  All data after
            the first non-zero Y value are included.
            </param>
            <param name="isBoundedRanges">
            Determines if the auto-scaled axis ranges will subset the
            data points based on any manually set scale range values.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <seealso cref="P:Alt.GUI.ZedGraph.GraphPane.IsBoundedRanges"/>
        </member>
        <member name="M:Alt.GUI.ZedGraph.CurveList.GetStackRange(Alt.GUI.ZedGraph.GraphPane,Alt.GUI.ZedGraph.CurveItem,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Calculate the range for stacked bars and lines.
            </summary>
            <remarks>This method is required for the stacked
            types because (for bars), the negative values are a separate stack than the positive
            values.  If you just sum up the bars, you will get the sum of the positive plus negative,
            which is less than the maximum positive value and greater than the maximum negative value.
            </remarks>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="curve">The <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> for which to calculate the range</param>
            <param name="tXMinVal">The minimum X value so far</param>
            <param name="tYMinVal">The minimum Y value so far</param>
            <param name="tXMaxVal">The maximum X value so far</param>
            <param name="tYMaxVal">The maximum Y value so far</param>
            <seealso cref="P:Alt.GUI.ZedGraph.GraphPane.IsBoundedRanges"/>
        </member>
        <member name="M:Alt.GUI.ZedGraph.CurveList.Draw(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,System.Double)">
            <summary>
            Render all the <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> objects in the list to the
            specified <see cref="T:Alt.Sketch.Graphics"/>
            device by calling the <see cref="M:Alt.GUI.ZedGraph.CurveItem.Draw(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,System.Int32,System.Double)"/> member function of
            each <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> object.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.CurveList.GetBarItemPos(Alt.GUI.ZedGraph.GraphPane,Alt.GUI.ZedGraph.BarItem)">
            <summary>
            Find the ordinal position of the specified <see cref="T:Alt.GUI.ZedGraph.BarItem"/> within
            the <see cref="T:Alt.GUI.ZedGraph.CurveList"/>.  This position only counts <see cef="BarItem"/>
            types, ignoring all other types.
            </summary>
            <param name="pane">The <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> of interest</param>
            <param name="barItem">The <see cref="T:Alt.GUI.ZedGraph.BarItem"/> for which to search.</param>
            <returns>The ordinal position of the specified bar, or -1 if the bar
            was not found.</returns>
        </member>
        <member name="P:Alt.GUI.ZedGraph.CurveList.MaxPts">
            <summary>
            Read only value for the maximum number of points in any of the curves
            in the list.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.CurveList.NumBars">
            <summary>
            Read only property that returns the number of curves in the list that are of
            type <see cref="T:Alt.GUI.ZedGraph.BarItem"/>. This does not include <see cref="T:Alt.GUI.ZedGraph.HiLowBarItem"/> or
            <see cref="T:Alt.GUI.ZedGraph.ErrorBarItem"/> types.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.CurveList.NumClusterableBars">
            <summary>
            Read only property that returns the number of curves in the list that are
            potentially "clusterable", which includes <see cref="T:Alt.GUI.ZedGraph.BarItem"/> and
            <see cref="T:Alt.GUI.ZedGraph.HiLowBarItem"/> types. This does not include <see cref="T:Alt.GUI.ZedGraph.ErrorBarItem"/>,
            <see cref="T:Alt.GUI.ZedGraph.OHLCBarItem"/>, <see cref="T:Alt.GUI.ZedGraph.JapaneseCandleStickItem"/>, etc. types.
            </summary>
            <remarks>Note that this property is only the number of bars that COULD BE clustered.  The
            actual cluster settings are not considered.</remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.CurveList.NumPies">
            <summary>
            Read only property that returns the number of pie slices in the list (class type is
            <see cref="T:Alt.GUI.ZedGraph.PieItem"/> ).
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.CurveList.IsPieOnly">
            <summary>
            Read only property that determines if all items in the <see cref="T:Alt.GUI.ZedGraph.CurveList"/> are
            Pies.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.CurveList.Backward">
            <summary>
            Iterate backwards through the <see cref="T:Alt.GUI.ZedGraph.CurveList"/> items.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.CurveList.Forward">
            <summary>
            Iterate forward through the <see cref="T:Alt.GUI.ZedGraph.CurveList"/> items.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.CurveList.Item(System.String)">
            <summary>
            Indexer to access the specified <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> object by
            its <see cref="P:Alt.GUI.ZedGraph.CurveItem.Label"/> string.
            </summary>
            <param name="label">The string label of the
            <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> object to be accessed.</param>
            <value>A <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> object reference.</value>
        </member>
        <member name="T:Alt.GUI.ZedGraph.DateAsOrdinalScale">
            <summary>
            The DateAsOrdinalScale class inherits from the <see cref="T:Alt.GUI.ZedGraph.Scale"/> class, and implements
            the features specific to <see cref="F:Alt.GUI.ZedGraph.AxisType.DateAsOrdinal"/>.
            </summary>
            <remarks>DateAsOrdinalScale is an ordinal axis that will have labels formatted with dates from the
            actual data values of the first <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> in the <see cref="T:Alt.GUI.ZedGraph.CurveList"/>.
            Although the tics are labeled with real data values, the actual points will be
            evenly-spaced in spite of the data values.  For example, if the X values of the first curve
            are 1, 5, and 100, then the tic labels will show 1, 5, and 100, but they will be equal
            distance from each other.
            </remarks>
            
            <author> John Champion  </author>
            <version> $Revision: 1.13 $ $Date: 2007-11-28 02:38:22 $ </version>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Scale">
            <summary>
            The Scale class is an abstract base class that encompasses the properties
            and methods associated with a scale of data.
            </summary>
            <remarks>This class is inherited by the
            <see cref="T:Alt.GUI.ZedGraph.LinearScale"/>, <see cref="T:Alt.GUI.ZedGraph.LogScale"/>, <see cref="T:Alt.GUI.ZedGraph.OrdinalScale"/>,
            <see cref="T:Alt.GUI.ZedGraph.TextScale"/>, <see cref="T:Alt.GUI.ZedGraph.DateScale"/>, <see cref="T:Alt.GUI.ZedGraph.ExponentScale"/>,
            <see cref="T:Alt.GUI.ZedGraph.DateAsOrdinalScale"/>, and <see cref="T:Alt.GUI.ZedGraph.LinearAsOrdinalScale"/>
            classes to define specific characteristics for those types.
            </remarks>
            
            <author> John Champion  </author>
            <version> $Revision: 1.33 $ $Date: 2007-09-19 06:41:56 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale.schema">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale._min">
            <summary> Private fields for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> scale definitions.
            Use the public properties <see cref="P:Alt.GUI.ZedGraph.Scale.Min"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.Max"/>,
            <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.MinorStep"/>, and <see cref="P:Alt.GUI.ZedGraph.Scale.Exponent"/>
            for access to these values.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale._max">
            <summary> Private fields for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> scale definitions.
            Use the public properties <see cref="P:Alt.GUI.ZedGraph.Scale.Min"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.Max"/>,
            <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.MinorStep"/>, and <see cref="P:Alt.GUI.ZedGraph.Scale.Exponent"/>
            for access to these values.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale._majorStep">
            <summary> Private fields for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> scale definitions.
            Use the public properties <see cref="P:Alt.GUI.ZedGraph.Scale.Min"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.Max"/>,
            <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.MinorStep"/>, and <see cref="P:Alt.GUI.ZedGraph.Scale.Exponent"/>
            for access to these values.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale._minorStep">
            <summary> Private fields for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> scale definitions.
            Use the public properties <see cref="P:Alt.GUI.ZedGraph.Scale.Min"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.Max"/>,
            <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.MinorStep"/>, and <see cref="P:Alt.GUI.ZedGraph.Scale.Exponent"/>
            for access to these values.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale._minAuto">
            <summary> Private fields for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> automatic scaling modes.
            Use the public properties <see cref="P:Alt.GUI.ZedGraph.Scale.MinAuto"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.MaxAuto"/>,
            <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStepAuto"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.MinorStepAuto"/>, 
            <see cref="P:Alt.GUI.ZedGraph.Scale.MagAuto"/> and <see cref="P:Alt.GUI.ZedGraph.Scale.FormatAuto"/>
            for access to these values.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale._maxAuto">
            <summary> Private fields for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> automatic scaling modes.
            Use the public properties <see cref="P:Alt.GUI.ZedGraph.Scale.MinAuto"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.MaxAuto"/>,
            <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStepAuto"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.MinorStepAuto"/>, 
            <see cref="P:Alt.GUI.ZedGraph.Scale.MagAuto"/> and <see cref="P:Alt.GUI.ZedGraph.Scale.FormatAuto"/>
            for access to these values.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale._majorStepAuto">
            <summary> Private fields for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> automatic scaling modes.
            Use the public properties <see cref="P:Alt.GUI.ZedGraph.Scale.MinAuto"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.MaxAuto"/>,
            <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStepAuto"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.MinorStepAuto"/>, 
            <see cref="P:Alt.GUI.ZedGraph.Scale.MagAuto"/> and <see cref="P:Alt.GUI.ZedGraph.Scale.FormatAuto"/>
            for access to these values.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale._minorStepAuto">
            <summary> Private fields for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> automatic scaling modes.
            Use the public properties <see cref="P:Alt.GUI.ZedGraph.Scale.MinAuto"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.MaxAuto"/>,
            <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStepAuto"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.MinorStepAuto"/>, 
            <see cref="P:Alt.GUI.ZedGraph.Scale.MagAuto"/> and <see cref="P:Alt.GUI.ZedGraph.Scale.FormatAuto"/>
            for access to these values.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale._minGrace">
            <summary> Private fields for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> "grace" settings.
            These values determine how much extra space is left before the first data value
            and after the last data value.
            Use the public properties <see cref="P:Alt.GUI.ZedGraph.Scale.MinGrace"/> and <see cref="P:Alt.GUI.ZedGraph.Scale.MaxGrace"/>
            for access to these values.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale._maxGrace">
            <summary> Private fields for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> "grace" settings.
            These values determine how much extra space is left before the first data value
            and after the last data value.
            Use the public properties <see cref="P:Alt.GUI.ZedGraph.Scale.MinGrace"/> and <see cref="P:Alt.GUI.ZedGraph.Scale.MaxGrace"/>
            for access to these values.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale._mag">
            <summary> Private field for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> scale value display.
            Use the public property <see cref="P:Alt.GUI.ZedGraph.Scale.Mag"/> for access to this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale._isReverse">
            <summary> Private fields for the <see cref="T:Alt.GUI.ZedGraph.Scale"/> attributes.
            Use the public properties <see cref="P:Alt.GUI.ZedGraph.Scale.IsReverse"/> and <see cref="P:Alt.GUI.ZedGraph.Scale.IsUseTenPower"/>
            for access to these values.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale._isPreventLabelOverlap">
            <summary> Private fields for the <see cref="T:Alt.GUI.ZedGraph.Scale"/> attributes.
            Use the public properties <see cref="P:Alt.GUI.ZedGraph.Scale.IsReverse"/> and <see cref="P:Alt.GUI.ZedGraph.Scale.IsUseTenPower"/>
            for access to these values.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale._isUseTenPower">
            <summary> Private fields for the <see cref="T:Alt.GUI.ZedGraph.Scale"/> attributes.
            Use the public properties <see cref="P:Alt.GUI.ZedGraph.Scale.IsReverse"/> and <see cref="P:Alt.GUI.ZedGraph.Scale.IsUseTenPower"/>
            for access to these values.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale._isLabelsInside">
            <summary> Private fields for the <see cref="T:Alt.GUI.ZedGraph.Scale"/> attributes.
            Use the public properties <see cref="P:Alt.GUI.ZedGraph.Scale.IsReverse"/> and <see cref="P:Alt.GUI.ZedGraph.Scale.IsUseTenPower"/>
            for access to these values.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale._isSkipFirstLabel">
            <summary> Private fields for the <see cref="T:Alt.GUI.ZedGraph.Scale"/> attributes.
            Use the public properties <see cref="P:Alt.GUI.ZedGraph.Scale.IsReverse"/> and <see cref="P:Alt.GUI.ZedGraph.Scale.IsUseTenPower"/>
            for access to these values.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale._isSkipLastLabel">
            <summary> Private fields for the <see cref="T:Alt.GUI.ZedGraph.Scale"/> attributes.
            Use the public properties <see cref="P:Alt.GUI.ZedGraph.Scale.IsReverse"/> and <see cref="P:Alt.GUI.ZedGraph.Scale.IsUseTenPower"/>
            for access to these values.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale._isSkipCrossLabel">
            <summary> Private fields for the <see cref="T:Alt.GUI.ZedGraph.Scale"/> attributes.
            Use the public properties <see cref="P:Alt.GUI.ZedGraph.Scale.IsReverse"/> and <see cref="P:Alt.GUI.ZedGraph.Scale.IsUseTenPower"/>
            for access to these values.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale._isVisible">
            <summary> Private fields for the <see cref="T:Alt.GUI.ZedGraph.Scale"/> attributes.
            Use the public properties <see cref="P:Alt.GUI.ZedGraph.Scale.IsReverse"/> and <see cref="P:Alt.GUI.ZedGraph.Scale.IsUseTenPower"/>
            for access to these values.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale._textLabels">
            <summary> Private <see cref="T:System.Collections.ArrayList"/> field for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> array of text labels.
            This property is only used if <see cref="P:Alt.GUI.ZedGraph.Scale.Type"/> is set to
            <see cref="F:Alt.GUI.ZedGraph.AxisType.Text"/> </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale._format">
            <summary> Private field for the format of the <see cref="T:Alt.GUI.ZedGraph.Axis"/> tic labels.
            Use the public property <see cref="P:Alt.GUI.ZedGraph.Scale.Format"/> for access to this value. </summary>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.FormatAuto"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale._majorUnit">
            <summary>
            Private fields for Unit types to be used for the major and minor tics.
            See <see cref="P:Alt.GUI.ZedGraph.Scale.MajorUnit"/> and <see cref="P:Alt.GUI.ZedGraph.Scale.MinorUnit"/> for the corresponding
            public properties.
            These types only apply for date-time scales (<see cref="P:Alt.GUI.ZedGraph.Scale.IsDate"/>).
            </summary>
            <value>The value of these types is of enumeration type <see cref="T:Alt.GUI.ZedGraph.DateUnit"/>
            </value>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale._minorUnit">
            <summary>
            Private fields for Unit types to be used for the major and minor tics.
            See <see cref="P:Alt.GUI.ZedGraph.Scale.MajorUnit"/> and <see cref="P:Alt.GUI.ZedGraph.Scale.MinorUnit"/> for the corresponding
            public properties.
            These types only apply for date-time scales (<see cref="P:Alt.GUI.ZedGraph.Scale.IsDate"/>).
            </summary>
            <value>The value of these types is of enumeration type <see cref="T:Alt.GUI.ZedGraph.DateUnit"/>
            </value>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale._align">
            <summary> Private field for the alignment of the <see cref="T:Alt.GUI.ZedGraph.Axis"/> tic labels.
            This fields controls whether the inside, center, or outside edges of the text labels are aligned.
            Use the public property <see cref="P:Alt.GUI.ZedGraph.Scale.Align"/>
            for access to this value. </summary>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.FormatAuto"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale._alignH">
            <summary> Private field for the alignment of the <see cref="T:Alt.GUI.ZedGraph.Axis"/> tic labels.
            This fields controls whether the left, center, or right edges of the text labels are aligned.
            Use the public property <see cref="P:Alt.GUI.ZedGraph.Scale.AlignH"/>
            for access to this value. </summary>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.FormatAuto"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale._fontSpec">
            <summary> Private fields for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> font specificatios.
            Use the public properties <see cref="P:Alt.GUI.ZedGraph.Scale.FontSpec"/> and
            <see cref="P:Alt.GUI.ZedGraph.Scale.FontSpec"/> for access to these values. </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale._labelGap">
            <summary>
            Internal field that stores the amount of space between the scale labels and the
            major tics.  Use the public property <see cref="P:Alt.GUI.ZedGraph.Scale.LabelGap"/> to access this
            value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale._rangeMin">
            <summary>
            Data range temporary values, used by GetRange().
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale._rangeMax">
            <summary>
            Data range temporary values, used by GetRange().
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale._minPix">
            <summary>
            Pixel positions at the minimum and maximum value for this scale.
            These are temporary values used/valid only during the Draw process.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale._maxPix">
            <summary>
            Pixel positions at the minimum and maximum value for this scale.
            These are temporary values used/valid only during the Draw process.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale._minLinTemp">
            <summary>
            Scale values for calculating transforms.  These are temporary values
            used ONLY during the Draw process.
            </summary>
            <remarks>
            These values are just <see cref="P:Alt.GUI.ZedGraph.Scale.Min"/> and <see cref="P:Alt.GUI.ZedGraph.Scale.Max"/>
            for normal linear scales, but for log or exponent scales they will be a
            linear representation.  For <see cref="T:Alt.GUI.ZedGraph.LogScale"/>, it is the
            <see cref="M:System.Math.Log(System.Double)"/> of the value, and for <see cref="T:Alt.GUI.ZedGraph.ExponentScale"/>,
            it is the <see cref="M:System.Math.Exp(System.Double)"/>
            of the value.
            </remarks>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale._maxLinTemp">
            <summary>
            Scale values for calculating transforms.  These are temporary values
            used ONLY during the Draw process.
            </summary>
            <remarks>
            These values are just <see cref="P:Alt.GUI.ZedGraph.Scale.Min"/> and <see cref="P:Alt.GUI.ZedGraph.Scale.Max"/>
            for normal linear scales, but for log or exponent scales they will be a
            linear representation.  For <see cref="T:Alt.GUI.ZedGraph.LogScale"/>, it is the
            <see cref="M:System.Math.Log(System.Double)"/> of the value, and for <see cref="T:Alt.GUI.ZedGraph.ExponentScale"/>,
            it is the <see cref="M:System.Math.Exp(System.Double)"/>
            of the value.
            </remarks>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale._ownerAxis">
            <summary>
            private field that stores the owner Axis that contains this Scale instance.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Scale.#ctor(Alt.GUI.ZedGraph.Axis)">
            <summary>
            Basic constructor -- requires that the <see cref="T:Alt.GUI.ZedGraph.Scale"/> object be intialized with
            a pre-existing owner <see cref="T:Alt.GUI.ZedGraph.Axis"/>.
            </summary>
            <param name="ownerAxis">The <see cref="T:Alt.GUI.ZedGraph.Axis"/> object that is the owner of this
            <see cref="T:Alt.GUI.ZedGraph.Scale"/> instance.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Scale.#ctor(Alt.GUI.ZedGraph.Scale,Alt.GUI.ZedGraph.Axis)">
            <summary>
            Copy Constructor.  Create a new <see cref="T:Alt.GUI.ZedGraph.Scale"/> object based on the specified
            existing one.
            </summary>
            <param name="rhs">The <see cref="T:Alt.GUI.ZedGraph.Scale"/> object to be copied.</param>
            <param name="owner">The <see cref="T:Alt.GUI.ZedGraph.Axis"/> object that will own the
            new instance of <see cref="T:Alt.GUI.ZedGraph.Scale"/></param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Scale.Clone(Alt.GUI.ZedGraph.Axis)">
            <summary>
            Create a new clone of the current item, with a new owner assignment
            </summary>
            <param name="owner">The new <see cref="T:Alt.GUI.ZedGraph.Axis"/> instance that will be
            the owner of the new Scale</param>
            <returns>A new <see cref="T:Alt.GUI.ZedGraph.Scale"/> clone.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Scale.MakeNewScale(Alt.GUI.ZedGraph.Scale,Alt.GUI.ZedGraph.AxisType)">
            <summary>
            A construction method that creates a new <see cref="T:Alt.GUI.ZedGraph.Scale"/> object using the
            properties of an existing <see cref="T:Alt.GUI.ZedGraph.Scale"/> object, but specifying a new
            <see cref="T:Alt.GUI.ZedGraph.AxisType"/>.
            </summary>
            <remarks>
            This constructor is used to change the type of an existing <see cref="T:Alt.GUI.ZedGraph.Axis"/>.
            By specifying the old <see cref="T:Alt.GUI.ZedGraph.Scale"/> object, you are giving a set of properties
            (which encompasses all fields associated with the scale, since the derived types
            have no fields) to be used in creating a new <see cref="T:Alt.GUI.ZedGraph.Scale"/> object, only this
            time having the newly specified object type.</remarks>
            <param name="oldScale">The existing <see cref="T:Alt.GUI.ZedGraph.Scale"/> object from which to
            copy the field data.</param>
            <param name="type">An <see cref="T:Alt.GUI.ZedGraph.AxisType"/> representing the type of derived type
            of new <see cref="T:Alt.GUI.ZedGraph.Scale"/> object to create.</param>
            <returns>The new <see cref="T:Alt.GUI.ZedGraph.Scale"/> object.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Scale.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Scale.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to
            serialize the target object
            </summary>
            <remarks>
            You MUST set the _ownerAxis property after deserializing a BarSettings object.
            </remarks>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Scale.SetupScaleData(Alt.GUI.ZedGraph.GraphPane,Alt.GUI.ZedGraph.Axis)">
            <summary>
            Setup some temporary transform values in preparation for rendering the
            <see cref="T:Alt.GUI.ZedGraph.Axis"/>.
            </summary>
            <remarks>
            This method is typically called by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>
            object as part of the <see cref="M:Alt.GUI.ZedGraph.GraphPane.Draw(Alt.Sketch.Graphics)"/> method.  It is also
            called by <see cref="M:Alt.GUI.ZedGraph.GraphPane.GeneralTransform(System.Double,System.Double,Alt.GUI.ZedGraph.CoordType)"/> and
            <see cref="M:Alt.GUI.ZedGraph.GraphPane.ReverseTransform(Alt.Sketch.Point,System.Double@,System.Double@)"/>
            methods to setup for coordinate transformations.
            </remarks>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="axis">
            The parent <see cref="T:Alt.GUI.ZedGraph.Axis"/> for this <see cref="T:Alt.GUI.ZedGraph.Scale"/>
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Scale.Linearize(System.Double)">
            <summary>
            Convert a value to its linear equivalent for this type of scale.
            </summary>
            <remarks>
            The default behavior is to just return the value unchanged.  However,
            for <see cref="F:Alt.GUI.ZedGraph.AxisType.Log"/> and <see cref="F:Alt.GUI.ZedGraph.AxisType.Exponent"/>,
            it returns the log or power equivalent.
            </remarks>
            <param name="val">The value to be converted</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Scale.DeLinearize(System.Double)">
            <summary>
            Convert a value from its linear equivalent to its actual scale value
            for this type of scale.
            </summary>
            <remarks>
            The default behavior is to just return the value unchanged.  However,
            for <see cref="F:Alt.GUI.ZedGraph.AxisType.Log"/> and <see cref="F:Alt.GUI.ZedGraph.AxisType.Exponent"/>,
            it returns the anti-log or inverse-power equivalent.
            </remarks>
            <param name="val">The value to be converted</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Scale.MakeLabel(Alt.GUI.ZedGraph.GraphPane,System.Int32,System.Double)">
            <summary>
            Make a value label for the axis at the specified ordinal position.
            </summary>
            <remarks>
            This method properly accounts for <see cref="P:Alt.GUI.ZedGraph.Scale.IsLog"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.IsText"/>,
            and other axis format settings.
            </remarks>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="index">
            The zero-based, ordinal index of the label to be generated.  For example, a value of 2 would
            cause the third value label on the axis to be generated.
            </param>
            <param name="dVal">
            The numeric value associated with the label.  This value is ignored for log (<see cref="P:Alt.GUI.ZedGraph.Scale.IsLog"/>)
            and text (<see cref="P:Alt.GUI.ZedGraph.Scale.IsText"/>) type axes.
            </param>
            <returns>The resulting value label as a <see cref="T:System.String"/></returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Scale.GetScaleMaxSpace(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,System.Double,System.Boolean)">
            <summary>
            Get the maximum width of the scale value text that is required to label this
            <see cref="T:Alt.GUI.ZedGraph.Axis"/>.
            The results of this method are used to determine how much space is required for
            the axis labels.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <param name="applyAngle">
            true to get the bounding box of the text using the <see cref="P:Alt.GUI.ZedGraph.FontSpec.Angle"/>,
            false to just get the bounding box without rotation
            </param>
            <returns>the maximum width of the text in pixel units</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Scale.CalcMajorTicValue(System.Double,System.Double)">
            <summary>
            Determine the value for any major tic.
            </summary>
            <remarks>
            This method properly accounts for <see cref="P:Alt.GUI.ZedGraph.Scale.IsLog"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.IsText"/>,
            and other axis format settings.
            </remarks>
            <param name="baseVal">
            The value of the first major tic (floating point double)
            </param>
            <param name="tic">
            The major tic number (0 = first major tic).  For log scales, this is the actual power of 10.
            </param>
            <returns>
            The specified major tic value (floating point double).
            </returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Scale.CalcMinorTicValue(System.Double,System.Int32)">
            <summary>
            Determine the value for any minor tic.
            </summary>
            <remarks>
            This method properly accounts for <see cref="P:Alt.GUI.ZedGraph.Scale.IsLog"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.IsText"/>,
            and other axis format settings.
            </remarks>
            <param name="baseVal">
            The value of the first major tic (floating point double).  This tic value is the base
            reference for all tics (including minor ones).
            </param>
            <param name="iTic">
            The major tic number (0 = first major tic).  For log scales, this is the actual power of 10.
            </param>
            <returns>
            The specified minor tic value (floating point double).
            </returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Scale.CalcMinorStart(System.Double)">
            <summary>
            Internal routine to determine the ordinals of the first minor tic mark
            </summary>
            <param name="baseVal">
            The value of the first major tic for the axis.
            </param>
            <returns>
            The ordinal position of the first minor tic, relative to the first major tic.
            This value can be negative (e.g., -3 means the first minor tic is 3 minor step
            increments before the first major tic.
            </returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Scale.CalcBaseTic">
            <summary>
            Determine the value for the first major tic.
            </summary>
            <remarks>
            This is done by finding the first possible value that is an integral multiple of
            the step size, taking into account the date/time units if appropriate.
            This method properly accounts for <see cref="P:Alt.GUI.ZedGraph.Scale.IsLog"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.IsText"/>,
            and other axis format settings.
            </remarks>
            <returns>
            First major tic value (floating point double).
            </returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Scale.DrawLabels(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,System.Double,System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Draw the value labels, tic marks, and grid lines as
            required for this <see cref="T:Alt.GUI.ZedGraph.Axis"/>.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="baseVal">
            The first major tic value for the axis
            </param>
            <param name="nTics">
            The total number of major tics for the axis
            </param>
            <param name="topPix">
            The pixel location of the far side of the ChartRect from this axis.
            This value is the ChartRect.Height for the XAxis, or the ChartRect.Width
            for the YAxis and Y2Axis.
            </param>
            <param name="shift">The number of pixels to shift this axis, based on the
            value of <see cref="P:Alt.GUI.ZedGraph.Axis.Cross"/>.  A positive value is into the ChartRect relative to
            the default axis position.</param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Scale.Draw(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,System.Double,System.Double)">
            <summary>
            Draw the scale, including the tic marks, value labels, and grid lines as
            required for this <see cref="T:Alt.GUI.ZedGraph.Axis"/>.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <param name="shiftPos">
            The number of pixels to shift to account for non-primary axis position (e.g.,
            the second, third, fourth, etc. <see cref="T:Alt.GUI.ZedGraph.YAxis"/> or <see cref="T:Alt.GUI.ZedGraph.Y2Axis"/>.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Scale.GetClusterWidth(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Determine the width, in pixel units, of each bar cluster including
            the cluster gaps and bar gaps.
            </summary>
            <remarks>
            This method uses the <see cref="P:Alt.GUI.ZedGraph.BarSettings.ClusterScaleWidth"/> for
            non-ordinal axes, or a cluster width of 1.0 for ordinal axes.
            </remarks>
            <param name="pane">A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object
            associated with this <see cref="T:Alt.GUI.ZedGraph.Axis"/></param>
            <returns>The width of each bar cluster, in pixel units</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Scale.GetClusterWidth(System.Double)">
            <summary>
            Calculates the cluster width, in pixels, by transforming the specified
            clusterScaleWidth.
            </summary>
            <param name="clusterScaleWidth">The width in user scale units of each
            bar cluster</param>
            <returns>The equivalent pixel size of the bar cluster</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Scale.PickScale(Alt.GUI.ZedGraph.GraphPane,Alt.Sketch.Graphics,System.Double)">
            <summary>
            Select a reasonable scale given a range of data values.
            </summary>
            <remarks>
            The scale range is chosen
            based on increments of 1, 2, or 5 (because they are even divisors of 10).  This
            routine honors the <see cref="P:Alt.GUI.ZedGraph.Scale.MinAuto"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.MaxAuto"/>,
            and <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStepAuto"/> autorange settings as well as the <see cref="P:Alt.GUI.ZedGraph.Scale.IsLog"/>
            setting.  In the event that any of the autorange settings are false, the
            corresponding <see cref="P:Alt.GUI.ZedGraph.Scale.Min"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.Max"/>, or <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/>
            setting is explicitly honored, and the remaining autorange settings (if any) will
            be calculated to accomodate the non-autoranged values.  The basic defaults for
            scale selection are defined using <see cref="F:Alt.GUI.ZedGraph.Scale.Default.ZeroLever"/>,
            <see cref="F:Alt.GUI.ZedGraph.Scale.Default.TargetXSteps"/>, and <see cref="F:Alt.GUI.ZedGraph.Scale.Default.TargetYSteps"/>
            from the <see cref="T:Alt.GUI.ZedGraph.Scale.Default"/> default class.
            <para>On Exit:</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.Min"/> is set to scale minimum (if <see cref="P:Alt.GUI.ZedGraph.Scale.MinAuto"/> = true)</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.Max"/> is set to scale maximum (if <see cref="P:Alt.GUI.ZedGraph.Scale.MaxAuto"/> = true)</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/> is set to scale step size (if <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStepAuto"/> = true)</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.MinorStep"/> is set to scale minor step size (if <see cref="P:Alt.GUI.ZedGraph.Scale.MinorStepAuto"/> = true)</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.Mag"/> is set to a magnitude multiplier according to the data</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.Format"/> is set to the display format for the values (this controls the
            number of decimal places, whether there are thousands separators, currency types, etc.)</para>
            </remarks>
            <param name="pane">A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object
            associated with this <see cref="T:Alt.GUI.ZedGraph.Axis"/></param>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Scale.CalcMaxLabels(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,System.Double)">
            <summary>
            Calculate the maximum number of labels that will fit on this axis.
            </summary>
            <remarks>
            This method works for
            both X and Y direction axes, and it works for angled text (assuming that a bounding box
            is an appropriate measure).  Technically, labels at 45 degree angles could fit better than
            the return value of this method since the bounding boxes can overlap without the labels actually
            overlapping.
            </remarks>
            <param name="pane">A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object
            associated with this <see cref="T:Alt.GUI.ZedGraph.Axis"/></param>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Scale.CalcStepSize(System.Double,System.Double)">
            <summary>
            Calculate a step size based on a data range.
            </summary>
            <remarks>
            This utility method
            will try to honor the <see cref="F:Alt.GUI.ZedGraph.Scale.Default.TargetXSteps"/> and
            <see cref="F:Alt.GUI.ZedGraph.Scale.Default.TargetYSteps"/> number of
            steps while using a rational increment (1, 2, or 5 -- which are
            even divisors of 10).  This method is used by <see cref="M:Alt.GUI.ZedGraph.Scale.PickScale(Alt.GUI.ZedGraph.GraphPane,Alt.Sketch.Graphics,System.Double)"/>.
            </remarks>
            <param name="range">The range of data in user scale units.  This can
            be a full range of the data for the major step size, or just the
            value of the major step size to calculate the minor step size</param>
            <param name="targetSteps">The desired "typical" number of steps
            to divide the range into</param>
            <returns>The calculated step size for the specified data range.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Scale.CalcBoundedStepSize(System.Double,System.Double)">
            <summary>
            Calculate a step size based on a data range, limited to a maximum number of steps.
            </summary>
            <remarks>
            This utility method
            will calculate a step size, of no more than maxSteps,
            using a rational increment (1, 2, or 5 -- which are
            even divisors of 10).  This method is used by <see cref="M:Alt.GUI.ZedGraph.Scale.PickScale(Alt.GUI.ZedGraph.GraphPane,Alt.Sketch.Graphics,System.Double)"/>.
            </remarks>
            <param name="range">The range of data in user scale units.  This can
            be a full range of the data for the major step size, or just the
            value of the major step size to calculate the minor step size</param>
            <param name="maxSteps">The maximum allowable number of steps
            to divide the range into</param>
            <returns>The calculated step size for the specified data range.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Scale.CalcNumTics">
            <summary>
            Internal routine to determine the ordinals of the first and last major axis label.
            </summary>
            <returns>
            This is the total number of major tics for this axis.
            </returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Scale.MyMod(System.Double,System.Double)">
            <summary>
            Calculate the modulus (remainder) in a safe manner so that divide
            by zero errors are avoided
            </summary>
            <param name="x">The divisor</param>
            <param name="y">The dividend</param>
            <returns>the value of the modulus, or zero for the divide-by-zero
            case</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Scale.SetRange(Alt.GUI.ZedGraph.GraphPane,Alt.GUI.ZedGraph.Axis)">
            <summary>
            Define suitable default ranges for an axis in the event that
            no data were available
            </summary>
            <param name="pane">The <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> of interest</param>
            <param name="axis">The <see cref="T:Alt.GUI.ZedGraph.Axis"/> for which to set the range</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Scale.Transform(System.Double)">
            <summary>
            Transform the coordinate value from user coordinates (scale value)
            to graphics device coordinates (pixels).
            </summary>
            <remarks>This method takes into
            account the scale range (<see cref="P:Alt.GUI.ZedGraph.Scale.Min"/> and <see cref="P:Alt.GUI.ZedGraph.Scale.Max"/>),
            logarithmic state (<see cref="P:Alt.GUI.ZedGraph.Scale.IsLog"/>), scale reverse state
            (<see cref="P:Alt.GUI.ZedGraph.Scale.IsReverse"/>) and axis type (<see cref="T:Alt.GUI.ZedGraph.XAxis"/>,
            <see cref="T:Alt.GUI.ZedGraph.YAxis"/>, or <see cref="T:Alt.GUI.ZedGraph.Y2Axis"/>).
            Note that the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/> must be valid, and
            <see cref="M:Alt.GUI.ZedGraph.Scale.SetupScaleData(Alt.GUI.ZedGraph.GraphPane,Alt.GUI.ZedGraph.Axis)"/> must be called for the
            current configuration before using this method (this is called everytime
            the graph is drawn (i.e., <see cref="M:Alt.GUI.ZedGraph.GraphPane.Draw(Alt.Sketch.Graphics)"/> is called).
            </remarks>
            <param name="x">The coordinate value, in user scale units, to
            be transformed</param>
            <returns>the coordinate value transformed to screen coordinates
            for use in calling the <see cref="T:Alt.Sketch.Graphics"/> draw routines</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Scale.Transform(System.Boolean,System.Int32,System.Double)">
            <summary>
            Transform the coordinate value from user coordinates (scale value)
            to graphics device coordinates (pixels).
            </summary>
            <remarks>
            This method takes into
            account the scale range (<see cref="P:Alt.GUI.ZedGraph.Scale.Min"/> and <see cref="P:Alt.GUI.ZedGraph.Scale.Max"/>),
            logarithmic state (<see cref="P:Alt.GUI.ZedGraph.Scale.IsLog"/>), scale reverse state
            (<see cref="P:Alt.GUI.ZedGraph.Scale.IsReverse"/>) and axis type (<see cref="T:Alt.GUI.ZedGraph.XAxis"/>,
            <see cref="T:Alt.GUI.ZedGraph.YAxis"/>, or <see cref="T:Alt.GUI.ZedGraph.Y2Axis"/>).
            Note that the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/> must be valid, and
            <see cref="M:Alt.GUI.ZedGraph.Scale.SetupScaleData(Alt.GUI.ZedGraph.GraphPane,Alt.GUI.ZedGraph.Axis)"/> must be called for the
            current configuration before using this method (this is called everytime
            the graph is drawn (i.e., <see cref="M:Alt.GUI.ZedGraph.GraphPane.Draw(Alt.Sketch.Graphics)"/> is called).
            </remarks>
            <param name="isOverrideOrdinal">true to force the axis to honor the data
            value, rather than replacing it with the ordinal value</param>
            <param name="i">The ordinal value of this point, just in case
            this is an <see cref="F:Alt.GUI.ZedGraph.AxisType.Ordinal"/> axis</param>
            <param name="x">The coordinate value, in user scale units, to
            be transformed</param>
            <returns>the coordinate value transformed to screen coordinates
            for use in calling the <see cref="T:Alt.Sketch.Graphics"/> draw routines</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Scale.ReverseTransform(System.Double)">
            <summary>
            Reverse transform the user coordinates (scale value)
            given a graphics device coordinate (pixels).
            </summary>
            <remarks>
            This method takes into
            account the scale range (<see cref="P:Alt.GUI.ZedGraph.Scale.Min"/> and <see cref="P:Alt.GUI.ZedGraph.Scale.Max"/>),
            logarithmic state (<see cref="P:Alt.GUI.ZedGraph.Scale.IsLog"/>), scale reverse state
            (<see cref="P:Alt.GUI.ZedGraph.Scale.IsReverse"/>) and axis type (<see cref="T:Alt.GUI.ZedGraph.XAxis"/>,
            <see cref="T:Alt.GUI.ZedGraph.YAxis"/>, or <see cref="T:Alt.GUI.ZedGraph.Y2Axis"/>).
            Note that the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/> must be valid, and
            <see cref="M:Alt.GUI.ZedGraph.Scale.SetupScaleData(Alt.GUI.ZedGraph.GraphPane,Alt.GUI.ZedGraph.Axis)"/> must be called for the
            current configuration before using this method (this is called everytime
            the graph is drawn (i.e., <see cref="M:Alt.GUI.ZedGraph.GraphPane.Draw(Alt.Sketch.Graphics)"/> is called).
            </remarks>
            <param name="pixVal">The screen pixel value, in graphics device coordinates to
            be transformed</param>
            <returns>The user scale value that corresponds to the screen pixel location</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Scale.LocalTransform(System.Double)">
            <summary>
            Transform the coordinate value from user coordinates (scale value)
            to graphics device coordinates (pixels).
            </summary>
            <remarks>Assumes that the origin
            has been set to the "left" of this axis, facing from the label side.
            Note that the left side corresponds to the scale minimum for the X and
            Y2 axes, but it is the scale maximum for the Y axis.
            This method takes into
            account the scale range (<see cref="P:Alt.GUI.ZedGraph.Scale.Min"/> and <see cref="P:Alt.GUI.ZedGraph.Scale.Max"/>),
            logarithmic state (<see cref="P:Alt.GUI.ZedGraph.Scale.IsLog"/>), scale reverse state
            (<see cref="P:Alt.GUI.ZedGraph.Scale.IsReverse"/>) and axis type (<see cref="T:Alt.GUI.ZedGraph.XAxis"/>,
            <see cref="T:Alt.GUI.ZedGraph.YAxis"/>, or <see cref="T:Alt.GUI.ZedGraph.Y2Axis"/>).  Note that
            the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/> must be valid, and
            <see cref="M:Alt.GUI.ZedGraph.Scale.SetupScaleData(Alt.GUI.ZedGraph.GraphPane,Alt.GUI.ZedGraph.Axis)"/> must be called for the
            current configuration before using this method.
            </remarks>
            <param name="x">The coordinate value, in linearized user scale units, to
            be transformed</param>
            <returns>the coordinate value transformed to screen coordinates
            for use in calling the <see cref="M:Alt.GUI.ZedGraph.Scale.Draw(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,System.Double,System.Double)"/> method</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Scale.SafeLog(System.Double)">
            <summary>
            Calculate a base 10 logarithm in a safe manner to avoid math exceptions
            </summary>
            <param name="x">The value for which the logarithm is to be calculated</param>
            <returns>The value of the logarithm, or 0 if the <paramref name="x"/>
            argument was negative or zero</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Scale.SafeExp(System.Double,System.Double)">
            <summary>
            Calculate an exponential in a safe manner to avoid math exceptions
            </summary> 
             <param name="x">The value for which the exponential is to be calculated</param>
             <param name="exponent">The exponent value to use for calculating the exponential.</param>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Scale._minLinearized">
            <summary>
            Gets or sets the linearized version of the <see cref="P:Alt.GUI.ZedGraph.Scale.Min"/> scale range.
            </summary>
            <remarks>
            This value is valid at any time, whereas <see cref="F:Alt.GUI.ZedGraph.Scale._minLinTemp"/> is an optimization
            pre-set that is only valid during draw operations.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Scale._maxLinearized">
            <summary>
            Gets or sets the linearized version of the <see cref="P:Alt.GUI.ZedGraph.Scale.Max"/> scale range.
            </summary>
            <remarks>
            This value is valid at any time, whereas <see cref="F:Alt.GUI.ZedGraph.Scale._maxLinTemp"/> is an optimization
            pre-set that is only valid during draw operations.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Scale.Type">
            <summary>
            Get an <see cref="T:Alt.GUI.ZedGraph.AxisType"/> enumeration that indicates the type of this scale.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Scale.IsLog">
            <summary>
            True if this scale is <see cref="F:Alt.GUI.ZedGraph.AxisType.Log"/>, false otherwise.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Scale.IsExponent">
            <summary>
            True if this scale is <see cref="F:Alt.GUI.ZedGraph.AxisType.Exponent"/>, false otherwise.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Scale.IsDate">
            <summary>
            True if this scale is <see cref="F:Alt.GUI.ZedGraph.AxisType.Date"/>, false otherwise.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Scale.IsText">
            <summary>
            True if this scale is <see cref="F:Alt.GUI.ZedGraph.AxisType.Text"/>, false otherwise.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Scale.IsOrdinal">
            <summary>
            True if this scale is <see cref="F:Alt.GUI.ZedGraph.AxisType.Ordinal"/>, false otherwise.
            </summary>
            <remarks>
            Note that this is only true for an actual <see cref="T:Alt.GUI.ZedGraph.OrdinalScale"/> class.
            This property will be false for other ordinal types such as
            <see cref="F:Alt.GUI.ZedGraph.AxisType.Text"/>, <see cref="F:Alt.GUI.ZedGraph.AxisType.LinearAsOrdinal"/>,
            or <see cref="F:Alt.GUI.ZedGraph.AxisType.DateAsOrdinal"/>.  Use the <see cref="P:Alt.GUI.ZedGraph.Scale.IsAnyOrdinal"/>
            as a "catchall" for all ordinal type axes.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Scale.IsAnyOrdinal">
            <summary>
            Gets a value that indicates if this <see cref="T:Alt.GUI.ZedGraph.Scale"/> is of any of the
            ordinal types in the <see cref="T:Alt.GUI.ZedGraph.AxisType"/> enumeration.
            </summary>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.Type"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Scale.Min">
            <summary>
            Gets or sets the minimum scale value for this <see cref="T:Alt.GUI.ZedGraph.Scale"/>.
            </summary>
            <remarks>This value can be set
            automatically based on the state of <see cref="P:Alt.GUI.ZedGraph.Scale.MinAuto"/>.  If
            this value is set manually, then <see cref="P:Alt.GUI.ZedGraph.Scale.MinAuto"/> will
            also be set to false.
            </remarks>
            <value> The value is defined in user scale units for <see cref="F:Alt.GUI.ZedGraph.AxisType.Log"/>
            and <see cref="F:Alt.GUI.ZedGraph.AxisType.Linear"/> axes. For <see cref="F:Alt.GUI.ZedGraph.AxisType.Text"/>
            and <see cref="F:Alt.GUI.ZedGraph.AxisType.Ordinal"/> axes,
            this value is an ordinal starting with 1.0.  For <see cref="F:Alt.GUI.ZedGraph.AxisType.Date"/>
            axes, this value is in XL Date format (see <see cref="T:Alt.GUI.ZedGraph.XDate"/>, which is the
            number of days since the reference date of January 1, 1900.</value>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.Max"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.MinorStep"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.MinAuto"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Scale.Max">
            <summary>
            Gets or sets the maximum scale value for this <see cref="T:Alt.GUI.ZedGraph.Scale"/>.
            </summary>
            <remarks>
            This value can be set
            automatically based on the state of <see cref="P:Alt.GUI.ZedGraph.Scale.MaxAuto"/>.  If
            this value is set manually, then <see cref="P:Alt.GUI.ZedGraph.Scale.MaxAuto"/> will
            also be set to false.
            </remarks>
            <value> The value is defined in user scale units for <see cref="F:Alt.GUI.ZedGraph.AxisType.Log"/>
            and <see cref="F:Alt.GUI.ZedGraph.AxisType.Linear"/> axes. For <see cref="F:Alt.GUI.ZedGraph.AxisType.Text"/>
            and <see cref="F:Alt.GUI.ZedGraph.AxisType.Ordinal"/> axes,
            this value is an ordinal starting with 1.0.  For <see cref="F:Alt.GUI.ZedGraph.AxisType.Date"/>
            axes, this value is in XL Date format (see <see cref="T:Alt.GUI.ZedGraph.XDate"/>, which is the
            number of days since the reference date of January 1, 1900.</value>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.Min"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.MinorStep"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.MaxAuto"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Scale.MajorStep">
            <summary>
            Gets or sets the scale step size for this <see cref="T:Alt.GUI.ZedGraph.Scale"/> (the increment between
            labeled axis values).
            </summary>
            <remarks>
            This value can be set
            automatically based on the state of <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStepAuto"/>.  If
            this value is set manually, then <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStepAuto"/> will
            also be set to false.  This value is ignored for <see cref="F:Alt.GUI.ZedGraph.AxisType.Log"/>
            axes.  For <see cref="F:Alt.GUI.ZedGraph.AxisType.Date"/> axes, this
            value is defined in units of <see cref="P:Alt.GUI.ZedGraph.Scale.MajorUnit"/>.
            </remarks>
            <value> The value is defined in user scale units </value>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.Min"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.Max"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.MinorStep"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.MajorStepAuto"/>
            <seealso cref="F:Alt.GUI.ZedGraph.Scale.Default.TargetXSteps"/>
            <seealso cref="F:Alt.GUI.ZedGraph.Scale.Default.TargetYSteps"/>
            <seealso cref="F:Alt.GUI.ZedGraph.Scale.Default.ZeroLever"/>
            <seealso cref="F:Alt.GUI.ZedGraph.Scale.Default.MaxTextLabels"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Scale.MinorStep">
            <summary>
            Gets or sets the scale minor step size for this <see cref="T:Alt.GUI.ZedGraph.Scale"/> (the spacing between
            minor tics).
            </summary>
            <remarks>This value can be set
            automatically based on the state of <see cref="P:Alt.GUI.ZedGraph.Scale.MinorStepAuto"/>.  If
            this value is set manually, then <see cref="P:Alt.GUI.ZedGraph.Scale.MinorStepAuto"/> will
            also be set to false.  This value is ignored for <see cref="F:Alt.GUI.ZedGraph.AxisType.Log"/> and
            <see cref="F:Alt.GUI.ZedGraph.AxisType.Text"/> axes.  For <see cref="F:Alt.GUI.ZedGraph.AxisType.Date"/> axes, this
            value is defined in units of <see cref="P:Alt.GUI.ZedGraph.Scale.MinorUnit"/>.
            </remarks>
            <value> The value is defined in user scale units </value>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.Min"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.Max"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.MinorStepAuto"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Scale.Exponent">
            <summary>
            Gets or sets the scale exponent value.  This only applies to <see cref="F:Alt.GUI.ZedGraph.AxisType.Exponent"/>. 
            </summary>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.Min"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.Max"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.MinorStep"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.MajorStepAuto"/>
            <seealso cref="F:Alt.GUI.ZedGraph.Scale.Default.TargetXSteps"/>
            <seealso cref="F:Alt.GUI.ZedGraph.Scale.Default.TargetYSteps"/>
            <seealso cref="F:Alt.GUI.ZedGraph.Scale.Default.ZeroLever"/>
            <seealso cref="F:Alt.GUI.ZedGraph.Scale.Default.MaxTextLabels"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Scale.BaseTic">
            <summary>
            Gets or sets the scale value at which the first major tic label will appear.
            </summary>
            <remarks>This property allows the scale labels to start at an irregular value.
            For example, on a scale range with <see cref="P:Alt.GUI.ZedGraph.Scale.Min"/> = 0, <see cref="P:Alt.GUI.ZedGraph.Scale.Max"/> = 1000,
            and <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/> = 200, a <see cref="P:Alt.GUI.ZedGraph.Scale.BaseTic"/> value of 50 would cause
            the scale labels to appear at values 50, 250, 450, 650, and 850.  Note that the
            default value for this property is <see cref="F:Alt.GUI.ZedGraph.PointPairBase.Missing"/>, which means the
            value is not used.  Setting this property to any value other than
            <see cref="F:Alt.GUI.ZedGraph.PointPairBase.Missing"/> will activate the effect.  The value specified must
            coincide with the first major tic.  That is, if <see cref="P:Alt.GUI.ZedGraph.Scale.BaseTic"/> were set to
            650 in the example above, then the major tics would only occur at 650 and 850.  This
            setting may affect the minor tics, since the minor tics are always referenced to the
            <see cref="P:Alt.GUI.ZedGraph.Scale.BaseTic"/>.  That is, in the example above, if the <see cref="P:Alt.GUI.ZedGraph.Scale.MinorStep"/>
            were set to 30 (making it a non-multiple of the major step), then the minor tics would
            occur at 20, 50 (so it lines up with the BaseTic), 80, 110, 140, etc.
            </remarks>
            <value> The value is defined in user scale units </value>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.Min"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.Max"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.MinorStep"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Axis.Cross"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Scale.MajorUnit">
            <summary>
            Gets or sets the type of units used for the major step size (<see cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/>).
            </summary>
            <remarks>
            This unit type only applies to Date-Time axes (<see cref="F:Alt.GUI.ZedGraph.AxisType.Date"/> = true).
            The axis is set to date type with the <see cref="P:Alt.GUI.ZedGraph.Scale.Type"/> property.
            The unit types are defined as <see cref="T:Alt.GUI.ZedGraph.DateUnit"/>.
            </remarks>
            <value> The value is a <see cref="T:Alt.GUI.ZedGraph.DateUnit"/> enum type </value>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.Min"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.Max"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.MinorStep"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.MajorStepAuto"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Scale.MinorUnit">
            <summary>
            Gets or sets the type of units used for the minor step size (<see cref="P:Alt.GUI.ZedGraph.Scale.MinorStep"/>).
            </summary>
            <remarks>
            This unit type only applies to Date-Time axes (<see cref="F:Alt.GUI.ZedGraph.AxisType.Date"/> = true).
            The axis is set to date type with the <see cref="P:Alt.GUI.ZedGraph.Scale.Type"/> property.
            The unit types are defined as <see cref="T:Alt.GUI.ZedGraph.DateUnit"/>.
            </remarks>
            <value> The value is a <see cref="T:Alt.GUI.ZedGraph.DateUnit"/> enum type </value>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.Min"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.Max"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.MinorStep"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.MinorStepAuto"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Scale.MajorUnitMultiplier">
            <summary>
            Gets the major unit multiplier for this scale type, if any.
            </summary>
            <remarks>The major unit multiplier will correct the units of
            <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/> to match the units of <see cref="P:Alt.GUI.ZedGraph.Scale.Min"/>
            and <see cref="P:Alt.GUI.ZedGraph.Scale.Max"/>.  This reflects the setting of
            <see cref="P:Alt.GUI.ZedGraph.Scale.MajorUnit"/>.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Scale.MinorUnitMultiplier">
            <summary>
            Gets the minor unit multiplier for this scale type, if any.
            </summary>
            <remarks>The minor unit multiplier will correct the units of
            <see cref="P:Alt.GUI.ZedGraph.Scale.MinorStep"/> to match the units of <see cref="P:Alt.GUI.ZedGraph.Scale.Min"/>
            and <see cref="P:Alt.GUI.ZedGraph.Scale.Max"/>.  This reflects the setting of
            <see cref="P:Alt.GUI.ZedGraph.Scale.MinorUnit"/>.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Scale.MinAuto">
            <summary>
            Gets or sets a value that determines whether or not the minimum scale value <see cref="P:Alt.GUI.ZedGraph.Scale.Min"/>
            is set automatically.
            </summary>
            <remarks>
            This value will be set to false if
            <see cref="P:Alt.GUI.ZedGraph.Scale.Min"/> is manually changed.
            </remarks>
            <value>true for automatic mode, false for manual mode</value>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.Min"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Scale.MaxAuto">
            <summary>
            Gets or sets a value that determines whether or not the maximum scale value <see cref="P:Alt.GUI.ZedGraph.Scale.Max"/>
            is set automatically.
            </summary>
            <remarks>
            This value will be set to false if
            <see cref="P:Alt.GUI.ZedGraph.Scale.Max"/> is manually changed.
            </remarks>
            <value>true for automatic mode, false for manual mode</value>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.Max"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Scale.MajorStepAuto">
            <summary>
            Gets or sets a value that determines whether or not the scale step size <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/>
            is set automatically.
            </summary>
            <remarks>
            This value will be set to false if
            <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/> is manually changed.
            </remarks>
            <value>true for automatic mode, false for manual mode</value>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Scale.MinorStepAuto">
            <summary>
            Gets or sets a value that determines whether or not the minor scale step size <see cref="P:Alt.GUI.ZedGraph.Scale.MinorStep"/>
            is set automatically.
            </summary>
            <remarks>
            This value will be set to false if
            <see cref="P:Alt.GUI.ZedGraph.Scale.MinorStep"/> is manually changed.
            </remarks>
            <value>true for automatic mode, false for manual mode</value>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.MinorStep"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Scale.FormatAuto">
            <summary>
            Determines whether or not the scale label format <see cref="P:Alt.GUI.ZedGraph.Scale.Format"/>
            is determined automatically based on the range of data values.
            </summary>
            <remarks>
            This value will be set to false if
            <see cref="P:Alt.GUI.ZedGraph.Scale.Format"/> is manually changed.
            </remarks>
            <value>true if <see cref="P:Alt.GUI.ZedGraph.Scale.Format"/> will be set automatically, false
            if it is to be set manually by the user</value>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.Mag"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.Format"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.FontSpec"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Scale.Format">
            <summary>
            The format of the <see cref="T:Alt.GUI.ZedGraph.Axis"/> tic labels.
            </summary>
            <remarks>
            This property may be a date format or a numeric format, depending on the setting of
            <see cref="P:Alt.GUI.ZedGraph.Scale.Type">Scale.Type</see>.
            This property may be set automatically by ZedGraph, depending on the state of
            <see cref="P:Alt.GUI.ZedGraph.Scale.FormatAuto"/>.
            </remarks>
            <value>The format string conforms to the
            <see cref="T:System.Globalization.DateTimeFormatInfo"/> for date formats, and
            <see cref="T:System.Globalization.NumberFormatInfo"/> for numeric formats.
            </value>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.Mag"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.FormatAuto"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.FontSpec"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Scale.Mag">
            <summary>
            The magnitude multiplier for scale values.
            </summary>
            <remarks>
            This is used to limit
            the size of the displayed value labels.  For example, if the value
            is really 2000000, then the graph will display 2000 with a 10^3
            magnitude multiplier.  This value can be determined automatically
            depending on the state of <see cref="P:Alt.GUI.ZedGraph.Scale.MagAuto"/>.
            If this value is set manually by the user,
            then <see cref="P:Alt.GUI.ZedGraph.Scale.MagAuto"/> will also be set to false.
            </remarks>
            <value>The magnitude multiplier (power of 10) for the scale
            value labels</value>
            <seealso cref="P:Alt.GUI.ZedGraph.AxisLabel.IsOmitMag"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Axis.Title"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.Format"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.FontSpec"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Scale.MagAuto">
            <summary>
            Determines whether the <see cref="P:Alt.GUI.ZedGraph.Scale.Mag"/> value will be set
            automatically based on the data, or manually by the user.
            </summary>
            <remarks>
            If the user manually sets the <see cref="P:Alt.GUI.ZedGraph.Scale.Mag"/> value, then this
            flag will be set to false.
            </remarks>
            <value>true to have <see cref="P:Alt.GUI.ZedGraph.Scale.Mag"/> set automatically,
            false otherwise</value>
            <seealso cref="P:Alt.GUI.ZedGraph.AxisLabel.IsOmitMag"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Axis.Title"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.Mag"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Scale.MinGrace">
            <summary> Gets or sets the "grace" value applied to the minimum data range.
            </summary>
            <remarks>
            This value is
            expressed as a fraction of the total data range.  For example, assume the data
            range is from 4.0 to 16.0, leaving a range of 12.0.  If MinGrace is set to
            0.1, then 10% of the range, or 1.2 will be subtracted from the minimum data value.
            The scale will then be ranged to cover at least 2.8 to 16.0.
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.Min"/>
            <seealso cref="F:Alt.GUI.ZedGraph.Scale.Default.MinGrace"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.MaxGrace"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Scale.MaxGrace">
            <summary> Gets or sets the "grace" value applied to the maximum data range.
            </summary>
            <remarks>
            This values determines how much extra space is left after the last data value.
            This value is
            expressed as a fraction of the total data range.  For example, assume the data
            range is from 4.0 to 16.0, leaving a range of 12.0.  If MaxGrace is set to
            0.1, then 10% of the range, or 1.2 will be added to the maximum data value.
            The scale will then be ranged to cover at least 4.0 to 17.2.
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.Max"/>
            <seealso cref="F:Alt.GUI.ZedGraph.Scale.Default.MaxGrace"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.MinGrace"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Scale.Align">
            <summary> Controls the alignment of the <see cref="T:Alt.GUI.ZedGraph.Axis"/> tic labels.
            </summary>
            <remarks>
            This property controls whether the inside, center, or outside edges of the
            text labels are aligned.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Scale.AlignH">
            <summary> Controls the alignment of the <see cref="T:Alt.GUI.ZedGraph.Axis"/> tic labels.
            </summary>
            <remarks>
            This property controls whether the left, center, or right edges of the
            text labels are aligned.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Scale.FontSpec">
            <summary>
            Gets a reference to the <see cref="T:Alt.GUI.ZedGraph.FontSpec"/> class used to render
            the scale values
            </summary>
            <seealso cref="F:Alt.GUI.ZedGraph.Scale.Default.FontFamily"/>
            <seealso cref="F:Alt.GUI.ZedGraph.Scale.Default.FontSize"/>
            <seealso cref="F:Alt.GUI.ZedGraph.Scale.Default.FontColor"/>
            <seealso cref="F:Alt.GUI.ZedGraph.Scale.Default.FontBold"/>
            <seealso cref="F:Alt.GUI.ZedGraph.Scale.Default.FontUnderline"/>
            <seealso cref="F:Alt.GUI.ZedGraph.Scale.Default.FontItalic"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Scale.LabelGap">
            <summary>
            The gap between the scale labels and the tics.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Scale.IsLabelsInside">
            <summary>
            Gets or sets a value that causes the axis scale labels and title to appear on the
            opposite side of the axis.
            </summary>
            <remarks>
            For example, setting this flag to true for the <see cref="T:Alt.GUI.ZedGraph.YAxis"/> will shift the
            axis labels and title to the right side of the <see cref="T:Alt.GUI.ZedGraph.YAxis"/> instead of the
            normal left-side location.  Set this property to true for the <see cref="T:Alt.GUI.ZedGraph.XAxis"/>,
            and set the <see cref="P:Alt.GUI.ZedGraph.Axis.Cross"/> property for the <see cref="T:Alt.GUI.ZedGraph.XAxis"/> to an arbitrarily
            large value (assuming <see cref="P:Alt.GUI.ZedGraph.Scale.IsReverse"/> is false for the <see cref="T:Alt.GUI.ZedGraph.YAxis"/>) in
            order to have the <see cref="T:Alt.GUI.ZedGraph.XAxis"/> appear at the top of the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>.
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.IsReverse"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Axis.Cross"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Scale.IsSkipFirstLabel">
            <summary>
            Gets or sets a value that causes the first scale label for this <see cref="T:Alt.GUI.ZedGraph.Axis"/> to be
            hidden.
            </summary>
            <remarks>
            Often, for axis that have an active <see cref="P:Alt.GUI.ZedGraph.Axis.Cross"/> setting (e.g., <see cref="P:Alt.GUI.ZedGraph.Axis.CrossAuto"/>
            is false), the first and/or last scale label are overlapped by opposing axes.  Use this
            property to hide the first scale label to avoid the overlap.  Note that setting this value
            to true will hide any scale label that appears within <see cref="F:Alt.GUI.ZedGraph.Scale.Default.EdgeTolerance"/> of the
            beginning of the <see cref="T:Alt.GUI.ZedGraph.Axis"/>.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Scale.IsSkipLastLabel">
            <summary>
            Gets or sets a value that causes the last scale label for this <see cref="T:Alt.GUI.ZedGraph.Axis"/> to be
            hidden.
            </summary>
            <remarks>
            Often, for axis that have an active <see cref="P:Alt.GUI.ZedGraph.Axis.Cross"/> setting (e.g., <see cref="P:Alt.GUI.ZedGraph.Axis.CrossAuto"/>
            is false), the first and/or last scale label are overlapped by opposing axes.  Use this
            property to hide the last scale label to avoid the overlap.  Note that setting this value
            to true will hide any scale label that appears within <see cref="F:Alt.GUI.ZedGraph.Scale.Default.EdgeTolerance"/> of the
            end of the <see cref="T:Alt.GUI.ZedGraph.Axis"/>.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Scale.IsSkipCrossLabel">
            <summary>
            Gets or sets a value that causes the scale label that is located at the <see cref="P:Alt.GUI.ZedGraph.Axis.Cross"/>
            value for this <see cref="T:Alt.GUI.ZedGraph.Axis"/> to be hidden.
            </summary>
            <remarks>
            For axes that have an active <see cref="P:Alt.GUI.ZedGraph.Axis.Cross"/> setting (e.g., <see cref="P:Alt.GUI.ZedGraph.Axis.CrossAuto"/>
            is false), the scale label at the <see cref="P:Alt.GUI.ZedGraph.Axis.Cross"/> value is overlapped by opposing axes.
            Use this property to hide the scale label to avoid the overlap.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Scale.IsReverse">
            <summary>
            Determines if the scale values are reversed for this <see cref="T:Alt.GUI.ZedGraph.Axis"/>
            </summary>
            <value>true for the X values to decrease to the right or the Y values to
            decrease upwards, false otherwise</value>
            <seealso cref="F:Alt.GUI.ZedGraph.Scale.Default.IsReverse"/>.
        </member>
        <member name="P:Alt.GUI.ZedGraph.Scale.IsUseTenPower">
            <summary>
            Determines if powers-of-ten notation will be used for the numeric value labels.
            </summary>
            <remarks>
            The powers-of-ten notation is just the text "10" followed by a superscripted value
            indicating the magnitude.  This mode is only valid for log scales (see
            <see cref="P:Alt.GUI.ZedGraph.Scale.IsLog"/> and <see cref="P:Alt.GUI.ZedGraph.Scale.Type"/>).
            </remarks>
            <value> boolean value; true to show the title as a power of ten, false to
            show a regular numeric value (e.g., "0.01", "10", "1000")</value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Scale.IsPreventLabelOverlap">
            <summary>
            Gets or sets a <see cref="T:System.Boolean"/> value that determines if ZedGraph will check to
            see if the <see cref="T:Alt.GUI.ZedGraph.Axis"/> scale labels are close enough to overlap.  If so,
            ZedGraph will adjust the step size to prevent overlap.
            </summary>
            <remarks>
            The process of checking for overlap is done during the <see cref="M:Alt.GUI.ZedGraph.GraphPane.AxisChange"/>
            method call, and affects the selection of the major step size (<see cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/>).
            </remarks>
            <value> boolean value; true to check for overlap, false otherwise</value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Scale.IsVisible">
            <summary>
            Gets or sets a property that determines whether or not the scale values will be shown.
            </summary>
            <value>true to show the scale values, false otherwise</value>
            <seealso cref="P:Alt.GUI.ZedGraph.Axis.IsVisible"/>.
        </member>
        <member name="P:Alt.GUI.ZedGraph.Scale.TextLabels">
            <summary>
            The text labels for this <see cref="T:Alt.GUI.ZedGraph.Axis"/>.
            </summary>
            <remarks>
            This property is only
            applicable if <see cref="P:Alt.GUI.ZedGraph.Scale.Type"/> is set to <see cref="F:Alt.GUI.ZedGraph.AxisType.Text"/>.
            </remarks>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Scale.Default">
            <summary>
            A simple struct that defines the
            default property values for the <see cref="T:Alt.GUI.ZedGraph.Scale"/> class.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale.Default.ZeroLever">
            <summary>
            The default "zero lever" for automatically selecting the axis
            scale range (see <see cref="M:Alt.GUI.ZedGraph.Scale.PickScale(Alt.GUI.ZedGraph.GraphPane,Alt.Sketch.Graphics,System.Double)"/>). This number is
            used to determine when an axis scale range should be extended to
            include the zero value.  This value is maintained only in the
            <see cref="T:Alt.GUI.ZedGraph.Scale.Default"/> class, and cannot be changed after compilation.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale.Default.MinGrace">
            <summary> The default "grace" value applied to the minimum data range.
            This value is
            expressed as a fraction of the total data range.  For example, assume the data
            range is from 4.0 to 16.0, leaving a range of 12.0.  If MinGrace is set to
            0.1, then 10% of the range, or 1.2 will be subtracted from the minimum data value.
            The scale will then be ranged to cover at least 2.8 to 16.0.
            </summary>
            <seealso cref="F:Alt.GUI.ZedGraph.Scale.Default.MinGrace"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale.Default.MaxGrace">
            <summary> The default "grace" value applied to the maximum data range.
            This value is
            expressed as a fraction of the total data range.  For example, assume the data
            range is from 4.0 to 16.0, leaving a range of 12.0.  If MaxGrace is set to
            0.1, then 10% of the range, or 1.2 will be added to the maximum data value.
            The scale will then be ranged to cover at least 4.0 to 17.2.
            </summary>
            <seealso cref="F:Alt.GUI.ZedGraph.Scale.Default.MinGrace"/>
            <seealso cref="F:Alt.GUI.ZedGraph.Scale.Default.MaxGrace"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale.Default.MaxTextLabels">
            <summary>
            The maximum number of text labels (major tics) that will be allowed on the plot by
            the automatic scaling logic.  This value applies only to <see cref="F:Alt.GUI.ZedGraph.AxisType.Text"/>
            axes.  If there are more than MaxTextLabels on the plot, then
            <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/> will be increased to reduce the number of labels.  That is,
            the step size might be increased to 2.0 to show only every other label.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale.Default.TargetXSteps">
            <summary>
            The default target number of steps for automatically selecting the X axis
            scale step size (see <see cref="M:Alt.GUI.ZedGraph.Scale.PickScale(Alt.GUI.ZedGraph.GraphPane,Alt.Sketch.Graphics,System.Double)"/>).
            This number is an initial target value for the number of major steps
            on an axis.  This value is maintained only in the
            <see cref="T:Alt.GUI.ZedGraph.Scale.Default"/> class, and cannot be changed after compilation.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale.Default.TargetYSteps">
            <summary>
            The default target number of steps for automatically selecting the Y or Y2 axis
            scale step size (see <see cref="M:Alt.GUI.ZedGraph.Scale.PickScale(Alt.GUI.ZedGraph.GraphPane,Alt.Sketch.Graphics,System.Double)"/>).
            This number is an initial target value for the number of major steps
            on an axis.  This value is maintained only in the
            <see cref="T:Alt.GUI.ZedGraph.Scale.Default"/> class, and cannot be changed after compilation.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale.Default.TargetMinorXSteps">
            <summary>
            The default target number of minor steps for automatically selecting the X axis
            scale minor step size (see <see cref="M:Alt.GUI.ZedGraph.Scale.PickScale(Alt.GUI.ZedGraph.GraphPane,Alt.Sketch.Graphics,System.Double)"/>).
            This number is an initial target value for the number of minor steps
            on an axis.  This value is maintained only in the
            <see cref="T:Alt.GUI.ZedGraph.Scale.Default"/> class, and cannot be changed after compilation.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale.Default.TargetMinorYSteps">
            <summary>
            The default target number of minor steps for automatically selecting the Y or Y2 axis
            scale minor step size (see <see cref="M:Alt.GUI.ZedGraph.Scale.PickScale(Alt.GUI.ZedGraph.GraphPane,Alt.Sketch.Graphics,System.Double)"/>).
            This number is an initial target value for the number of minor steps
            on an axis.  This value is maintained only in the
            <see cref="T:Alt.GUI.ZedGraph.Scale.Default"/> class, and cannot be changed after compilation.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale.Default.IsReverse">
            <summary>
            The default reverse mode for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> scale
            (<see cref="F:Alt.GUI.ZedGraph.Scale.Default.IsReverse"/> property). true for a reversed scale
            (X decreasing to the left, Y/Y2 decreasing upwards), false otherwise.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale.Default.Format">
            <summary>
            The default setting for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> scale format string
            (<see cref="F:Alt.GUI.ZedGraph.Scale.Default.Format"/> property).  For numeric values, this value is
            setting according to the <see cref="M:System.String.Format(System.String,System.Object)"/> format strings.  For date
            type values, this value is set as per the <see cref="M:Alt.GUI.ZedGraph.XDate.ToString"/> function.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale.Default.RangeYearYear">
            <summary>
            A default setting for the <see cref="F:Alt.GUI.ZedGraph.AxisType.Date"/> auto-ranging code.
            This values applies only to Date-Time type axes.
            If the total span of data exceeds this number (in days), then the auto-range
            code will select <see cref="P:Alt.GUI.ZedGraph.Scale.MajorUnit"/> = <see cref="F:Alt.GUI.ZedGraph.DateUnit.Year"/>
            and <see cref="P:Alt.GUI.ZedGraph.Scale.MinorUnit"/> = <see cref="F:Alt.GUI.ZedGraph.DateUnit.Year"/>.
            This value normally defaults to 1825 days (5 years).
            This value is used by the <see cref="M:Alt.GUI.ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double,Alt.GUI.ZedGraph.Scale)"/> method.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale.Default.RangeYearMonth">
            <summary>
            A default setting for the <see cref="F:Alt.GUI.ZedGraph.AxisType.Date"/> auto-ranging code.
            This values applies only to Date-Time type axes.
            If the total span of data exceeds this number (in days), then the auto-range
            code will select <see cref="P:Alt.GUI.ZedGraph.Scale.MajorUnit"/> = <see cref="F:Alt.GUI.ZedGraph.DateUnit.Year"/>
            and <see cref="P:Alt.GUI.ZedGraph.Scale.MinorUnit"/> = <see cref="F:Alt.GUI.ZedGraph.DateUnit.Month"/>.
            This value normally defaults to 730 days (2 years).
            This value is used by the <see cref="M:Alt.GUI.ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double,Alt.GUI.ZedGraph.Scale)"/> method.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale.Default.RangeMonthMonth">
            <summary>
            A default setting for the <see cref="F:Alt.GUI.ZedGraph.AxisType.Date"/> auto-ranging code.
            This values applies only to Date-Time type axes.
            If the total span of data exceeds this number (in days), then the auto-range
            code will select <see cref="P:Alt.GUI.ZedGraph.Scale.MajorUnit"/> = <see cref="F:Alt.GUI.ZedGraph.DateUnit.Month"/>
            and <see cref="P:Alt.GUI.ZedGraph.Scale.MinorUnit"/> = <see cref="F:Alt.GUI.ZedGraph.DateUnit.Month"/>.
            This value normally defaults to 300 days (10 months).
            This value is used by the <see cref="M:Alt.GUI.ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double,Alt.GUI.ZedGraph.Scale)"/> method.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale.Default.RangeDayDay">
            <summary>
            A default setting for the <see cref="F:Alt.GUI.ZedGraph.AxisType.Date"/> auto-ranging code.
            This values applies only to Date-Time type axes.
            If the total span of data exceeds this number (in days), then the auto-range
            code will select <see cref="P:Alt.GUI.ZedGraph.Scale.MajorUnit"/> = <see cref="F:Alt.GUI.ZedGraph.DateUnit.Day"/>
            and <see cref="P:Alt.GUI.ZedGraph.Scale.MinorUnit"/> = <see cref="F:Alt.GUI.ZedGraph.DateUnit.Day"/>.
            This value normally defaults to 10 days.
            This value is used by the <see cref="M:Alt.GUI.ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double,Alt.GUI.ZedGraph.Scale)"/> method.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale.Default.RangeDayHour">
            <summary>
            A default setting for the <see cref="F:Alt.GUI.ZedGraph.AxisType.Date"/> auto-ranging code.
            This values applies only to Date-Time type axes.
            If the total span of data exceeds this number (in days), then the auto-range
            code will select <see cref="P:Alt.GUI.ZedGraph.Scale.MajorUnit"/> = <see cref="F:Alt.GUI.ZedGraph.DateUnit.Day"/>
            and <see cref="P:Alt.GUI.ZedGraph.Scale.MinorUnit"/> = <see cref="F:Alt.GUI.ZedGraph.DateUnit.Hour"/>.
            This value normally defaults to 3 days.
            This value is used by the <see cref="M:Alt.GUI.ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double,Alt.GUI.ZedGraph.Scale)"/> method.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale.Default.RangeHourHour">
            <summary>
            A default setting for the <see cref="F:Alt.GUI.ZedGraph.AxisType.Date"/> auto-ranging code.
            This values applies only to Date-Time type axes.
            If the total span of data exceeds this number (in days), then the auto-range
            code will select <see cref="P:Alt.GUI.ZedGraph.Scale.MajorUnit"/> = <see cref="F:Alt.GUI.ZedGraph.DateUnit.Hour"/>
            and <see cref="P:Alt.GUI.ZedGraph.Scale.MinorUnit"/> = <see cref="F:Alt.GUI.ZedGraph.DateUnit.Hour"/>.
            This value normally defaults to 0.4167 days (10 hours).
            This value is used by the <see cref="M:Alt.GUI.ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double,Alt.GUI.ZedGraph.Scale)"/> method.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale.Default.RangeHourMinute">
            <summary>
            A default setting for the <see cref="F:Alt.GUI.ZedGraph.AxisType.Date"/> auto-ranging code.
            This values applies only to Date-Time type axes.
            If the total span of data exceeds this number (in days), then the auto-range
            code will select <see cref="P:Alt.GUI.ZedGraph.Scale.MajorUnit"/> = <see cref="F:Alt.GUI.ZedGraph.DateUnit.Hour"/>
            and <see cref="P:Alt.GUI.ZedGraph.Scale.MinorUnit"/> = <see cref="F:Alt.GUI.ZedGraph.DateUnit.Minute"/>.
            This value normally defaults to 0.125 days (3 hours).
            This value is used by the <see cref="M:Alt.GUI.ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double,Alt.GUI.ZedGraph.Scale)"/> method.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale.Default.RangeMinuteMinute">
            <summary>
            A default setting for the <see cref="F:Alt.GUI.ZedGraph.AxisType.Date"/> auto-ranging code.
            This values applies only to Date-Time type axes.
            If the total span of data exceeds this number (in days), then the auto-range
            code will select <see cref="P:Alt.GUI.ZedGraph.Scale.MajorUnit"/> = <see cref="F:Alt.GUI.ZedGraph.DateUnit.Minute"/>
            and <see cref="P:Alt.GUI.ZedGraph.Scale.MinorUnit"/> = <see cref="F:Alt.GUI.ZedGraph.DateUnit.Minute"/>.
            This value normally defaults to 6.94e-3 days (10 minutes).
            This value is used by the <see cref="M:Alt.GUI.ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double,Alt.GUI.ZedGraph.Scale)"/> method.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale.Default.RangeMinuteSecond">
            <summary>
            A default setting for the <see cref="F:Alt.GUI.ZedGraph.AxisType.Date"/> auto-ranging code.
            This values applies only to Date-Time type axes.
            If the total span of data exceeds this number (in days), then the auto-range
            code will select <see cref="P:Alt.GUI.ZedGraph.Scale.MajorUnit"/> = <see cref="F:Alt.GUI.ZedGraph.DateUnit.Minute"/>
            and <see cref="P:Alt.GUI.ZedGraph.Scale.MinorUnit"/> = <see cref="F:Alt.GUI.ZedGraph.DateUnit.Second"/>.
            This value normally defaults to 2.083e-3 days (3 minutes).
            This value is used by the <see cref="M:Alt.GUI.ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double,Alt.GUI.ZedGraph.Scale)"/> method.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale.Default.RangeSecondSecond">
            <summary>
            A default setting for the <see cref="F:Alt.GUI.ZedGraph.AxisType.Date"/> auto-ranging code.
            This values applies only to Date-Time type axes.
            If the total span of data exceeds this number (in days), then the auto-range
            code will select <see cref="P:Alt.GUI.ZedGraph.Scale.MajorUnit"/> = <see cref="F:Alt.GUI.ZedGraph.DateUnit.Second"/>
            and <see cref="P:Alt.GUI.ZedGraph.Scale.MinorUnit"/> = <see cref="F:Alt.GUI.ZedGraph.DateUnit.Second"/>.
            This value normally defaults to 3.472e-5 days (3 seconds).
            This value is used by the <see cref="M:Alt.GUI.ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double,Alt.GUI.ZedGraph.Scale)"/> method.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale.Default.FormatYearYear">
            <summary>
            A default setting for the <see cref="F:Alt.GUI.ZedGraph.AxisType.Date"/> auto-ranging code.
            This values applies only to Date-Time type axes.
            This is the format used for the scale values when auto-ranging code
            selects a <see cref="F:Alt.GUI.ZedGraph.Scale.Default.Format"/> of <see cref="F:Alt.GUI.ZedGraph.DateUnit.Year"/>
            for <see cref="P:Alt.GUI.ZedGraph.Scale.MajorUnit"/> and <see cref="F:Alt.GUI.ZedGraph.DateUnit.Year"/> for 
            for <see cref="P:Alt.GUI.ZedGraph.Scale.MinorUnit"/>.
            This value is used by the <see cref="M:Alt.GUI.ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double,Alt.GUI.ZedGraph.Scale)"/> method.
            </summary>
            <seealso cref="T:System.Globalization.DateTimeFormatInfo"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale.Default.FormatYearMonth">
            <summary>
            A default setting for the <see cref="F:Alt.GUI.ZedGraph.AxisType.Date"/> auto-ranging code.
            This values applies only to Date-Time type axes.
            This is the format used for the scale values when auto-ranging code
            selects a <see cref="F:Alt.GUI.ZedGraph.Scale.Default.Format"/> of <see cref="F:Alt.GUI.ZedGraph.DateUnit.Year"/>
            for <see cref="P:Alt.GUI.ZedGraph.Scale.MajorUnit"/> and <see cref="F:Alt.GUI.ZedGraph.DateUnit.Month"/> for 
            for <see cref="P:Alt.GUI.ZedGraph.Scale.MinorUnit"/>.
            This value is used by the <see cref="M:Alt.GUI.ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double,Alt.GUI.ZedGraph.Scale)"/> method.
            </summary>
            <seealso cref="T:System.Globalization.DateTimeFormatInfo"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale.Default.FormatMonthMonth">
            <summary>
            A default setting for the <see cref="F:Alt.GUI.ZedGraph.AxisType.Date"/> auto-ranging code.
            This values applies only to Date-Time type axes.
            This is the format used for the scale values when auto-ranging code
            selects a <see cref="F:Alt.GUI.ZedGraph.Scale.Default.Format"/> of <see cref="F:Alt.GUI.ZedGraph.DateUnit.Month"/>
            for <see cref="P:Alt.GUI.ZedGraph.Scale.MajorUnit"/> and <see cref="F:Alt.GUI.ZedGraph.DateUnit.Month"/> for 
            for <see cref="P:Alt.GUI.ZedGraph.Scale.MinorUnit"/>.
            This value is used by the <see cref="M:Alt.GUI.ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double,Alt.GUI.ZedGraph.Scale)"/> method.
            </summary>
            <seealso cref="T:System.Globalization.DateTimeFormatInfo"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale.Default.FormatDayDay">
            <summary>
            A default setting for the <see cref="F:Alt.GUI.ZedGraph.AxisType.Date"/> auto-ranging code.
            This values applies only to Date-Time type axes.
            This is the format used for the scale values when auto-ranging code
            selects a <see cref="F:Alt.GUI.ZedGraph.Scale.Default.Format"/> of <see cref="F:Alt.GUI.ZedGraph.DateUnit.Day"/>
            for <see cref="P:Alt.GUI.ZedGraph.Scale.MajorUnit"/> and <see cref="F:Alt.GUI.ZedGraph.DateUnit.Day"/> for 
            for <see cref="P:Alt.GUI.ZedGraph.Scale.MinorUnit"/>.
            This value is used by the <see cref="M:Alt.GUI.ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double,Alt.GUI.ZedGraph.Scale)"/> method.
            </summary>
            <seealso cref="T:System.Globalization.DateTimeFormatInfo"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale.Default.FormatDayHour">
            <summary>
            A default setting for the <see cref="F:Alt.GUI.ZedGraph.AxisType.Date"/> auto-ranging code.
            This values applies only to Date-Time type axes.
            This is the format used for the scale values when auto-ranging code
            selects a <see cref="F:Alt.GUI.ZedGraph.Scale.Default.Format"/> of <see cref="F:Alt.GUI.ZedGraph.DateUnit.Day"/>
            for <see cref="P:Alt.GUI.ZedGraph.Scale.MajorUnit"/> and <see cref="F:Alt.GUI.ZedGraph.DateUnit.Hour"/> for 
            for <see cref="P:Alt.GUI.ZedGraph.Scale.MinorUnit"/>.
            This value is used by the <see cref="M:Alt.GUI.ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double,Alt.GUI.ZedGraph.Scale)"/> method.
            </summary>
            <seealso cref="T:System.Globalization.DateTimeFormatInfo"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale.Default.FormatHourHour">
            <summary>
            A default setting for the <see cref="F:Alt.GUI.ZedGraph.AxisType.Date"/> auto-ranging code.
            This values applies only to Date-Time type axes.
            This is the format used for the scale values when auto-ranging code
            selects a <see cref="F:Alt.GUI.ZedGraph.Scale.Default.Format"/> of <see cref="F:Alt.GUI.ZedGraph.DateUnit.Hour"/>
            for <see cref="P:Alt.GUI.ZedGraph.Scale.MajorUnit"/> and <see cref="F:Alt.GUI.ZedGraph.DateUnit.Hour"/> for 
            for <see cref="P:Alt.GUI.ZedGraph.Scale.MinorUnit"/>.
            This value is used by the <see cref="M:Alt.GUI.ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double,Alt.GUI.ZedGraph.Scale)"/> method.
            </summary>
            <seealso cref="T:System.Globalization.DateTimeFormatInfo"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale.Default.FormatHourMinute">
            <summary>
            A default setting for the <see cref="F:Alt.GUI.ZedGraph.AxisType.Date"/> auto-ranging code.
            This values applies only to Date-Time type axes.
            This is the format used for the scale values when auto-ranging code
            selects a <see cref="F:Alt.GUI.ZedGraph.Scale.Default.Format"/> of <see cref="F:Alt.GUI.ZedGraph.DateUnit.Hour"/>
            for <see cref="P:Alt.GUI.ZedGraph.Scale.MajorUnit"/> and <see cref="F:Alt.GUI.ZedGraph.DateUnit.Minute"/> for 
            for <see cref="P:Alt.GUI.ZedGraph.Scale.MinorUnit"/>.
            This value is used by the <see cref="M:Alt.GUI.ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double,Alt.GUI.ZedGraph.Scale)"/> method.
            </summary>
            <seealso cref="T:System.Globalization.DateTimeFormatInfo"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale.Default.FormatMinuteMinute">
            <summary>
            A default setting for the <see cref="F:Alt.GUI.ZedGraph.AxisType.Date"/> auto-ranging code.
            This values applies only to Date-Time type axes.
            This is the format used for the scale values when auto-ranging code
            selects a <see cref="F:Alt.GUI.ZedGraph.Scale.Default.Format"/> of <see cref="F:Alt.GUI.ZedGraph.DateUnit.Minute"/>
            for <see cref="P:Alt.GUI.ZedGraph.Scale.MajorUnit"/> and <see cref="F:Alt.GUI.ZedGraph.DateUnit.Minute"/> for 
            for <see cref="P:Alt.GUI.ZedGraph.Scale.MinorUnit"/>.
            This value is used by the <see cref="M:Alt.GUI.ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double,Alt.GUI.ZedGraph.Scale)"/> method.
            </summary>
            <seealso cref="T:System.Globalization.DateTimeFormatInfo"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale.Default.FormatMinuteSecond">
            <summary>
            A default setting for the <see cref="F:Alt.GUI.ZedGraph.AxisType.Date"/> auto-ranging code.
            This values applies only to Date-Time type axes.
            This is the format used for the scale values when auto-ranging code
            selects a <see cref="F:Alt.GUI.ZedGraph.Scale.Default.Format"/> of <see cref="F:Alt.GUI.ZedGraph.DateUnit.Minute"/>
            for <see cref="P:Alt.GUI.ZedGraph.Scale.MajorUnit"/> and <see cref="F:Alt.GUI.ZedGraph.DateUnit.Second"/> for 
            for <see cref="P:Alt.GUI.ZedGraph.Scale.MinorUnit"/>.
            This value is used by the <see cref="M:Alt.GUI.ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double,Alt.GUI.ZedGraph.Scale)"/> method.
            </summary>
            <seealso cref="T:System.Globalization.DateTimeFormatInfo"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale.Default.FormatSecondSecond">
            <summary>
            A default setting for the <see cref="F:Alt.GUI.ZedGraph.AxisType.Date"/> auto-ranging code.
            This values applies only to Date-Time type axes.
            This is the format used for the scale values when auto-ranging code
            selects a <see cref="F:Alt.GUI.ZedGraph.Scale.Default.Format"/> of <see cref="F:Alt.GUI.ZedGraph.DateUnit.Second"/>
            for <see cref="P:Alt.GUI.ZedGraph.Scale.MajorUnit"/> and <see cref="F:Alt.GUI.ZedGraph.DateUnit.Second"/> for 
            for <see cref="P:Alt.GUI.ZedGraph.Scale.MinorUnit"/>.
            This value is used by the <see cref="M:Alt.GUI.ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double,Alt.GUI.ZedGraph.Scale)"/> method.
            </summary>
            <seealso cref="T:System.Globalization.DateTimeFormatInfo"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale.Default.FormatMillisecond">
            <summary>
            A default setting for the <see cref="F:Alt.GUI.ZedGraph.AxisType.Date"/> auto-ranging code.
            This values applies only to Date-Time type axes.
            This is the format used for the scale values when auto-ranging code
            selects a <see cref="F:Alt.GUI.ZedGraph.Scale.Default.Format"/> of <see cref="F:Alt.GUI.ZedGraph.DateUnit.Millisecond"/>
            for <see cref="P:Alt.GUI.ZedGraph.Scale.MajorUnit"/> and <see cref="F:Alt.GUI.ZedGraph.DateUnit.Millisecond"/> for 
            for <see cref="P:Alt.GUI.ZedGraph.Scale.MinorUnit"/>.
            This value is used by the <see cref="M:Alt.GUI.ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double,Alt.GUI.ZedGraph.Scale)"/> method.
            </summary>
            <seealso cref="T:System.Globalization.DateTimeFormatInfo"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale.Default.Align">
            <summary> The default alignment of the <see cref="T:Alt.GUI.ZedGraph.Axis"/> tic labels.
            This value controls whether the inside, center, or outside edges of the text labels are aligned.
            </summary>
            <seealso cref="T:Alt.GUI.ZedGraph.AlignP"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale.Default.AlignH">
            <summary> The default alignment of the <see cref="T:Alt.GUI.ZedGraph.Axis"/> tic labels.
            This value controls whether the left, center, or right edges of the text labels are aligned.
            </summary>
            <seealso cref="F:Alt.GUI.ZedGraph.Scale.Default.AlignH"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale.Default.FontFamily">
            <summary>
            The default font family for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> scale values
            font specification <see cref="P:Alt.GUI.ZedGraph.Scale.FontSpec"/>
            (<see cref="P:Alt.GUI.ZedGraph.FontSpec.Family"/> property).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale.Default.FontSize">
            <summary>
            The default font size for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> scale values
            font specification <see cref="P:Alt.GUI.ZedGraph.Scale.FontSpec"/>
            (<see cref="P:Alt.GUI.ZedGraph.FontSpec.Size"/> property).  Units are
            in points (1/72 inch).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale.Default.FontColor">
            <summary>
            The default font color for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> scale values
            font specification <see cref="P:Alt.GUI.ZedGraph.Scale.FontSpec"/>
            (<see cref="P:Alt.GUI.ZedGraph.FontSpec.FontColor"/> property).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale.Default.FontBold">
            <summary>
            The default font bold mode for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> scale values
            font specification <see cref="P:Alt.GUI.ZedGraph.Scale.FontSpec"/>
            (<see cref="P:Alt.GUI.ZedGraph.FontSpec.IsBold"/> property). true
            for a bold typeface, false otherwise.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale.Default.FontItalic">
            <summary>
            The default font italic mode for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> scale values
            font specification <see cref="P:Alt.GUI.ZedGraph.Scale.FontSpec"/>
            (<see cref="P:Alt.GUI.ZedGraph.FontSpec.IsItalic"/> property). true
            for an italic typeface, false otherwise.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale.Default.FontUnderline">
            <summary>
            The default font underline mode for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> scale values
            font specification <see cref="P:Alt.GUI.ZedGraph.Scale.FontSpec"/>
            (<see cref="P:Alt.GUI.ZedGraph.FontSpec.IsUnderline"/> property). true
            for an underlined typeface, false otherwise.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale.Default.FillColor">
            <summary>
            The default color for filling in the scale text background
            (see <see cref="P:Alt.GUI.ZedGraph.Fill.Color"/> property).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale.Default.FillBrush">
            <summary>
            The default custom brush for filling in the scale text background
            (see <see cref="P:Alt.GUI.ZedGraph.Fill.Brush"/> property).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale.Default.FillType">
            <summary>
            The default fill mode for filling in the scale text background
            (see <see cref="P:Alt.GUI.ZedGraph.Fill.Type"/> property).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale.Default.IsVisible">
            <summary>
            The default value for <see cref="F:Alt.GUI.ZedGraph.Scale.Default.IsVisible"/>, which determines
            whether or not the scale values are displayed.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale.Default.IsLabelsInside">
            <summary>
            The default value for <see cref="F:Alt.GUI.ZedGraph.Scale.Default.IsLabelsInside"/>, which determines
            whether or not the scale labels and title for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> will appear
            on the opposite side of the <see cref="T:Alt.GUI.ZedGraph.Axis"/> that it normally appears.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale.Default.EdgeTolerance">
            <summary>
            Determines the size of the band at the beginning and end of the axis that will have labels
            omitted if the axis is shifted due to a non-default location using the <see cref="P:Alt.GUI.ZedGraph.Axis.Cross"/>
            property.
            </summary>
            <remarks>
            This parameter applies only when <see cref="P:Alt.GUI.ZedGraph.Axis.CrossAuto"/> is false.  It is scaled according
            to the size of the graph based on <see cref="P:Alt.GUI.ZedGraph.PaneBase.BaseDimension"/>.  When a non-default
            axis location is selected, the first and last labels on that axis will overlap the opposing
            axis frame.  This parameter allows those labels to be omitted to avoid the overlap.  Set this
            parameter to zero to turn off the effect.
            </remarks>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Scale.Default.LabelGap">
            <summary>
            The default setting for the gap between the outside tics (or the axis edge
            if there are no outside tics) and the scale labels, expressed as a fraction of
            the major tic size.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.DateAsOrdinalScale.schema2">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.DateAsOrdinalScale.#ctor(Alt.GUI.ZedGraph.Axis)">
            <summary>
            Default constructor that defines the owner <see cref="T:Alt.GUI.ZedGraph.Axis"/>
            (containing object) for this new object.
            </summary>
            <param name="owner">The owner, or containing object, of this instance</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.DateAsOrdinalScale.#ctor(Alt.GUI.ZedGraph.Scale,Alt.GUI.ZedGraph.Axis)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:Alt.GUI.ZedGraph.DateAsOrdinalScale"/> object from which to copy</param>
            <param name="owner">The <see cref="T:Alt.GUI.ZedGraph.Axis"/> object that will own the
            new instance of <see cref="T:Alt.GUI.ZedGraph.DateAsOrdinalScale"/></param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.DateAsOrdinalScale.Clone(Alt.GUI.ZedGraph.Axis)">
            <summary>
            Create a new clone of the current item, with a new owner assignment
            </summary>
            <param name="owner">The new <see cref="T:Alt.GUI.ZedGraph.Axis"/> instance that will be
            the owner of the new Scale</param>
            <returns>A new <see cref="T:Alt.GUI.ZedGraph.Scale"/> clone.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.DateAsOrdinalScale.PickScale(Alt.GUI.ZedGraph.GraphPane,Alt.Sketch.Graphics,System.Double)">
            <summary>
            Select a reasonable ordinal axis scale given a range of data values, with the expectation that
            dates will be displayed.
            </summary>
            <remarks>
            This method only applies to <see cref="F:Alt.GUI.ZedGraph.AxisType.DateAsOrdinal"/> type axes, and it
            is called by the general <see cref="M:Alt.GUI.ZedGraph.DateAsOrdinalScale.PickScale(Alt.GUI.ZedGraph.GraphPane,Alt.Sketch.Graphics,System.Double)"/> method.  For this type,
            the first curve is the "master", which contains the dates to be applied.
            <para>On Exit:</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.Min"/> is set to scale minimum (if <see cref="P:Alt.GUI.ZedGraph.Scale.MinAuto"/> = true)</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.Max"/> is set to scale maximum (if <see cref="P:Alt.GUI.ZedGraph.Scale.MaxAuto"/> = true)</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/> is set to scale step size (if <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStepAuto"/> = true)</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.MinorStep"/> is set to scale minor step size (if <see cref="P:Alt.GUI.ZedGraph.Scale.MinorStepAuto"/> = true)</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.Mag"/> is set to a magnitude multiplier according to the data</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.Format"/> is set to the display format for the values (this controls the
            number of decimal places, whether there are thousands separators, currency types, etc.)</para>
            </remarks>
            <param name="pane">A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object
            associated with this <see cref="T:Alt.GUI.ZedGraph.Axis"/></param>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <seealso cref="M:Alt.GUI.ZedGraph.DateAsOrdinalScale.PickScale(Alt.GUI.ZedGraph.GraphPane,Alt.Sketch.Graphics,System.Double)"/>
            <seealso cref="F:Alt.GUI.ZedGraph.AxisType.Ordinal"/>
        </member>
        <member name="M:Alt.GUI.ZedGraph.DateAsOrdinalScale.MakeLabel(Alt.GUI.ZedGraph.GraphPane,System.Int32,System.Double)">
            <summary>
            Make a value label for an <see cref="F:Alt.GUI.ZedGraph.AxisType.DateAsOrdinal"/> <see cref="T:Alt.GUI.ZedGraph.Axis"/>.
            </summary>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="index">
            The zero-based, ordinal index of the label to be generated.  For example, a value of 2 would
            cause the third value label on the axis to be generated.
            </param>
            <param name="dVal">
            The numeric value associated with the label.  This value is ignored for log
            (<see cref="P:Alt.GUI.ZedGraph.Scale.IsLog"/>)
            and text (<see cref="P:Alt.GUI.ZedGraph.Scale.IsText"/>) type axes.
            </param>
            <returns>The resulting value label as a <see cref="T:System.String"/></returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.DateAsOrdinalScale.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.DateAsOrdinalScale.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="P:Alt.GUI.ZedGraph.DateAsOrdinalScale.Type">
            <summary>
            Return the <see cref="T:Alt.GUI.ZedGraph.AxisType"/> for this <see cref="T:Alt.GUI.ZedGraph.Scale"/>, which is
            <see cref="F:Alt.GUI.ZedGraph.AxisType.DateAsOrdinal"/>.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.DateAsOrdinalScale.Min">
            <summary>
            Gets or sets the minimum value for this scale.
            </summary>
            <remarks>
            The set property is specifically adapted for <see cref="F:Alt.GUI.ZedGraph.AxisType.DateAsOrdinal"/> scales,
            in that it automatically limits the value to the range of valid dates for the
            <see cref="T:Alt.GUI.ZedGraph.XDate"/> struct.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.DateAsOrdinalScale.Max">
            <summary>
            Gets or sets the maximum value for this scale.
            </summary>
            <remarks>
            The set property is specifically adapted for <see cref="F:Alt.GUI.ZedGraph.AxisType.DateAsOrdinal"/> scales,
            in that it automatically limits the value to the range of valid dates for the
            <see cref="T:Alt.GUI.ZedGraph.XDate"/> struct.
            </remarks>
        </member>
        <member name="T:Alt.GUI.ZedGraph.DateScale">
            <summary>
            The DateScale class inherits from the <see cref="T:Alt.GUI.ZedGraph.Scale"/> class, and implements
            the features specific to <see cref="F:Alt.GUI.ZedGraph.AxisType.Date"/>.
            </summary>
            <remarks>
            DateScale is a cartesian axis with calendar dates or times.  The actual data values should
            be created with the <see cref="T:Alt.GUI.ZedGraph.XDate"/> type, which is directly translatable to a
            <see cref="T:System.Double"/> type for storage in the point value arrays.
            </remarks>
            
            <author> John Champion  </author>
            <version> $Revision: 1.15 $ $Date: 2007-09-19 06:41:56 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.DateScale.schema2">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.DateScale.#ctor(Alt.GUI.ZedGraph.Axis)">
            <summary>
            Default constructor that defines the owner <see cref="T:Alt.GUI.ZedGraph.Axis"/>
            (containing object) for this new object.
            </summary>
            <param name="owner">The owner, or containing object, of this instance</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.DateScale.#ctor(Alt.GUI.ZedGraph.Scale,Alt.GUI.ZedGraph.Axis)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:Alt.GUI.ZedGraph.DateScale"/> object from which to copy</param>
            <param name="owner">The <see cref="T:Alt.GUI.ZedGraph.Axis"/> object that will own the
            new instance of <see cref="T:Alt.GUI.ZedGraph.DateScale"/></param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.DateScale.Clone(Alt.GUI.ZedGraph.Axis)">
            <summary>
            Create a new clone of the current item, with a new owner assignment
            </summary>
            <param name="owner">The new <see cref="T:Alt.GUI.ZedGraph.Axis"/> instance that will be
            the owner of the new Scale</param>
            <returns>A new <see cref="T:Alt.GUI.ZedGraph.Scale"/> clone.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.DateScale.CalcMajorTicValue(System.Double,System.Double)">
            <summary>
            Determine the value for any major tic.
            </summary>
            <remarks>
            This method properly accounts for <see cref="P:Alt.GUI.ZedGraph.Scale.IsLog"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.IsText"/>,
            and other axis format settings.
            </remarks>
            <param name="baseVal">
            The value of the first major tic (floating point double)
            </param>
            <param name="tic">
            The major tic number (0 = first major tic).  For log scales, this is the actual power of 10.
            </param>
            <returns>
            The specified major tic value (floating point double).
            </returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.DateScale.CalcMinorTicValue(System.Double,System.Int32)">
            <summary>
            Determine the value for any minor tic.
            </summary>
            <remarks>
            This method properly accounts for <see cref="P:Alt.GUI.ZedGraph.Scale.IsLog"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.IsText"/>,
            and other axis format settings.
            </remarks>
            <param name="baseVal">
            The value of the first major tic (floating point double).  This tic value is the base
            reference for all tics (including minor ones).
            </param>
            <param name="iTic">
            The major tic number (0 = first major tic).  For log scales, this is the actual power of 10.
            </param>
            <returns>
            The specified minor tic value (floating point double).
            </returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.DateScale.CalcMinorStart(System.Double)">
            <summary>
            Internal routine to determine the ordinals of the first minor tic mark
            </summary>
            <param name="baseVal">
            The value of the first major tic for the axis.
            </param>
            <returns>
            The ordinal position of the first minor tic, relative to the first major tic.
            This value can be negative (e.g., -3 means the first minor tic is 3 minor step
            increments before the first major tic.
            </returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.DateScale.CalcBaseTic">
            <summary>
            Determine the value for the first major tic.
            </summary>
            <remarks>
            This is done by finding the first possible value that is an integral multiple of
            the step size, taking into account the date/time units if appropriate.
            This method properly accounts for <see cref="P:Alt.GUI.ZedGraph.Scale.IsLog"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.IsText"/>,
            and other axis format settings.
            </remarks>
            <returns>
            First major tic value (floating point double).
            </returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.DateScale.CalcNumTics">
            <summary>
            Internal routine to determine the ordinals of the first and last major axis label.
            </summary>
            <returns>
            This is the total number of major tics for this axis.
            </returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.DateScale.PickScale(Alt.GUI.ZedGraph.GraphPane,Alt.Sketch.Graphics,System.Double)">
            <summary>
            Select a reasonable date-time axis scale given a range of data values.
            </summary>
            <remarks>
            This method only applies to <see cref="F:Alt.GUI.ZedGraph.AxisType.Date"/> type axes, and it
            is called by the general <see cref="M:Alt.GUI.ZedGraph.DateScale.PickScale(Alt.GUI.ZedGraph.GraphPane,Alt.Sketch.Graphics,System.Double)"/> method.  The scale range is chosen
            based on increments of 1, 2, or 5 (because they are even divisors of 10).
            Note that the <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/> property setting can have multiple unit
            types (<see cref="P:Alt.GUI.ZedGraph.Scale.MajorUnit"/> and <see cref="P:Alt.GUI.ZedGraph.Scale.MinorUnit"/>),
            but the <see cref="P:Alt.GUI.ZedGraph.Scale.Min"/> and
            <see cref="P:Alt.GUI.ZedGraph.Scale.Max"/> units are always days (<see cref="T:Alt.GUI.ZedGraph.XDate"/>).  This
            method honors the <see cref="P:Alt.GUI.ZedGraph.Scale.MinAuto"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.MaxAuto"/>,
            and <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStepAuto"/> autorange settings.
            In the event that any of the autorange settings are false, the
            corresponding <see cref="P:Alt.GUI.ZedGraph.Scale.Min"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.Max"/>, or <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/>
            setting is explicitly honored, and the remaining autorange settings (if any) will
            be calculated to accomodate the non-autoranged values.  The basic default for
            scale selection is defined with
            <see cref="F:Alt.GUI.ZedGraph.Scale.Default.TargetXSteps"/> and <see cref="F:Alt.GUI.ZedGraph.Scale.Default.TargetYSteps"/>
            from the <see cref="T:Alt.GUI.ZedGraph.Scale.Default"/> default class.
            <para>On Exit:</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.Min"/> is set to scale minimum (if <see cref="P:Alt.GUI.ZedGraph.Scale.MinAuto"/> = true)</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.Max"/> is set to scale maximum (if <see cref="P:Alt.GUI.ZedGraph.Scale.MaxAuto"/> = true)</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/> is set to scale step size (if <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStepAuto"/> = true)</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.MinorStep"/> is set to scale minor step size (if <see cref="P:Alt.GUI.ZedGraph.Scale.MinorStepAuto"/> = true)</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.Mag"/> is set to a magnitude multiplier according to the data</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.Format"/> is set to the display format for the values (this controls the
            number of decimal places, whether there are thousands separators, currency types, etc.)</para>
            </remarks>
            <param name="pane">A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object
            associated with this <see cref="T:Alt.GUI.ZedGraph.Axis"/></param>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <seealso cref="M:Alt.GUI.ZedGraph.Scale.PickScale(Alt.GUI.ZedGraph.GraphPane,Alt.Sketch.Graphics,System.Double)"/>
            <seealso cref="F:Alt.GUI.ZedGraph.AxisType.Date"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.MajorUnit"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.MinorUnit"/>
        </member>
        <member name="M:Alt.GUI.ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double)">
            <summary>
            Calculate a step size for a <see cref="F:Alt.GUI.ZedGraph.AxisType.Date"/> scale.
            This method is used by <see cref="M:Alt.GUI.ZedGraph.DateScale.PickScale(Alt.GUI.ZedGraph.GraphPane,Alt.Sketch.Graphics,System.Double)"/>.
            </summary>
            <param name="range">The range of data in units of days</param>
            <param name="targetSteps">The desired "typical" number of steps
            to divide the range into</param>
            <returns>The calculated step size for the specified data range.  Also
            calculates and sets the values for <see cref="P:Alt.GUI.ZedGraph.Scale.MajorUnit"/>,
            <see cref="P:Alt.GUI.ZedGraph.Scale.MinorUnit"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.MinorStep"/>, and
            <see cref="P:Alt.GUI.ZedGraph.Scale.Format"/></returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.DateScale.CalcDateStepSize(System.Double,System.Double,Alt.GUI.ZedGraph.Scale)">
            <summary>
            Calculate a step size for a <see cref="F:Alt.GUI.ZedGraph.AxisType.Date"/> scale.
            This method is used by <see cref="M:Alt.GUI.ZedGraph.DateScale.PickScale(Alt.GUI.ZedGraph.GraphPane,Alt.Sketch.Graphics,System.Double)"/>.
            </summary>
            <param name="range">The range of data in units of days</param>
            <param name="targetSteps">The desired "typical" number of steps
            to divide the range into</param>
            <param name="scale">
            The <see cref="T:Alt.GUI.ZedGraph.Scale"/> object on which to calculate the Date step size.</param>
            <returns>The calculated step size for the specified data range.  Also
            calculates and sets the values for <see cref="P:Alt.GUI.ZedGraph.Scale.MajorUnit"/>,
            <see cref="P:Alt.GUI.ZedGraph.Scale.MinorUnit"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.MinorStep"/>, and
            <see cref="P:Alt.GUI.ZedGraph.Scale.Format"/></returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.DateScale.CalcEvenStepDate(System.Double,System.Int32)">
            <summary>
            Calculate a date that is close to the specified date and an
            even multiple of the selected
            <see cref="P:Alt.GUI.ZedGraph.Scale.MajorUnit"/> for a <see cref="F:Alt.GUI.ZedGraph.AxisType.Date"/> scale.
            This method is used by <see cref="M:Alt.GUI.ZedGraph.DateScale.PickScale(Alt.GUI.ZedGraph.GraphPane,Alt.Sketch.Graphics,System.Double)"/>.
            </summary>
            <param name="date">The date which the calculation should be close to</param>
            <param name="direction">The desired direction for the date to take.
            1 indicates the result date should be greater than the specified
            date parameter.  -1 indicates the other direction.</param>
            <returns>The calculated date</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.DateScale.MakeLabel(Alt.GUI.ZedGraph.GraphPane,System.Int32,System.Double)">
            <summary>
            Make a value label for an <see cref="F:Alt.GUI.ZedGraph.AxisType.Date"/> <see cref="T:Alt.GUI.ZedGraph.Axis"/>.
            </summary>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="index">
            The zero-based, ordinal index of the label to be generated.  For example, a value of 2 would
            cause the third value label on the axis to be generated.
            </param>
            <param name="dVal">
            The numeric value associated with the label.  This value is ignored for log (<see cref="P:Alt.GUI.ZedGraph.Scale.IsLog"/>)
            and text (<see cref="P:Alt.GUI.ZedGraph.Scale.IsText"/>) type axes.
            </param>
            <returns>The resulting value label as a <see cref="T:System.String"/></returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.DateScale.GetUnitMultiple(Alt.GUI.ZedGraph.DateUnit)">
            <summary>
            Internal routine to calculate a multiplier to the selected unit back to days.
            </summary>
            <param name="unit">The unit type for which the multiplier is to be
            calculated</param>
            <returns>
            This is ratio of days/selected unit
            </returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.DateScale.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.DateScale.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="P:Alt.GUI.ZedGraph.DateScale.Type">
            <summary>
            Return the <see cref="T:Alt.GUI.ZedGraph.AxisType"/> for this <see cref="T:Alt.GUI.ZedGraph.Scale"/>, which is
            <see cref="F:Alt.GUI.ZedGraph.AxisType.Date"/>.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.DateScale.Min">
            <summary>
            Gets or sets the minimum value for this scale.
            </summary>
            <remarks>
            The set property is specifically adapted for <see cref="F:Alt.GUI.ZedGraph.AxisType.Date"/> scales,
            in that it automatically limits the value to the range of valid dates for the
            <see cref="T:Alt.GUI.ZedGraph.XDate"/> struct.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.DateScale.Max">
            <summary>
            Gets or sets the maximum value for this scale.
            </summary>
            <remarks>
            The set property is specifically adapted for <see cref="F:Alt.GUI.ZedGraph.AxisType.Date"/> scales,
            in that it automatically limits the value to the range of valid dates for the
            <see cref="T:Alt.GUI.ZedGraph.XDate"/> struct.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.DateScale.MajorUnitMultiplier">
            <summary>
            Gets the major unit multiplier for this scale type, if any.
            </summary>
            <remarks>The major unit multiplier will correct the units of
            <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/> to match the units of <see cref="P:Alt.GUI.ZedGraph.Scale.Min"/>
            and <see cref="P:Alt.GUI.ZedGraph.Scale.Max"/>.  This reflects the setting of
            <see cref="P:Alt.GUI.ZedGraph.Scale.MajorUnit"/>.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.DateScale.MinorUnitMultiplier">
            <summary>
            Gets the minor unit multiplier for this scale type, if any.
            </summary>
            <remarks>The minor unit multiplier will correct the units of
            <see cref="P:Alt.GUI.ZedGraph.Scale.MinorStep"/> to match the units of <see cref="P:Alt.GUI.ZedGraph.Scale.Min"/>
            and <see cref="P:Alt.GUI.ZedGraph.Scale.Max"/>.  This reflects the setting of
            <see cref="P:Alt.GUI.ZedGraph.Scale.MinorUnit"/>.
            </remarks>
        </member>
        <member name="T:Alt.GUI.ZedGraph.EllipseObj">
            <summary>
            A class that represents a bordered and/or filled ellipse object on
            the graph.  A list of EllipseObj objects is maintained by the
            <see cref="T:Alt.GUI.ZedGraph.GraphObjList"/> collection class.  The ellipse is defined
            as the ellipse that would be contained by the rectangular box as
            defined by the <see cref="T:Alt.GUI.ZedGraph.Location"/> property.
            </summary>
            
            <author> John Champion </author>
            <version> $Revision: 3.3 $ $Date: 2007-01-25 07:56:08 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.EllipseObj.schema3">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.EllipseObj.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <overloads>Constructors for the <see cref="T:Alt.GUI.ZedGraph.EllipseObj"/> object</overloads>
            <summary>
            A constructor that allows the position and size
            of the <see cref="T:Alt.GUI.ZedGraph.EllipseObj"/> to be pre-specified.  Other properties are defaulted.
            </summary>
            <param name="x">The x location for this <see cref="T:Alt.GUI.ZedGraph.BoxObj"/>.  This will be in units determined by
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/>.</param>
            <param name="y">The y location for this <see cref="T:Alt.GUI.ZedGraph.BoxObj"/>.  This will be in units determined by
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/>.</param>
            <param name="width">The width of this <see cref="T:Alt.GUI.ZedGraph.BoxObj"/>.  This will be in units determined by
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/>.</param>
            <param name="height">The height of this <see cref="T:Alt.GUI.ZedGraph.BoxObj"/>.  This will be in units determined by
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/>.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.EllipseObj.#ctor">
            <summary>
            A default constructor that places the <see cref="T:Alt.GUI.ZedGraph.EllipseObj"/> at location (0,0),
            with width/height of (1,1).  Other properties are defaulted.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.EllipseObj.#ctor(System.Double,System.Double,System.Double,System.Double,Alt.Sketch.Color,Alt.Sketch.Color)">
            <summary>
            A constructor that allows the position, border color, and solid fill color
            of the <see cref="T:Alt.GUI.ZedGraph.EllipseObj"/> to be pre-specified.
            </summary>
            <param name="borderColor">An arbitrary <see cref="!:System.Drawing.Color"/> specification
            for the ellipse border</param>
            <param name="fillColor">An arbitrary <see cref="!:System.Drawing.Color"/> specification
            for the ellipse fill (will be a solid color fill)</param>
            <param name="x">The x location for this <see cref="T:Alt.GUI.ZedGraph.BoxObj"/>.  This will be in units determined by
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/>.</param>
            <param name="y">The y location for this <see cref="T:Alt.GUI.ZedGraph.BoxObj"/>.  This will be in units determined by
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/>.</param>
            <param name="width">The width of this <see cref="T:Alt.GUI.ZedGraph.BoxObj"/>.  This will be in units determined by
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/>.</param>
            <param name="height">The height of this <see cref="T:Alt.GUI.ZedGraph.BoxObj"/>.  This will be in units determined by
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/>.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.EllipseObj.#ctor(System.Double,System.Double,System.Double,System.Double,Alt.Sketch.Color,Alt.Sketch.Color,Alt.Sketch.Color)">
            <summary>
            A constructor that allows the position, border color, and two-color
            gradient fill colors
            of the <see cref="T:Alt.GUI.ZedGraph.EllipseObj"/> to be pre-specified.
            </summary>
            <param name="borderColor">An arbitrary <see cref="!:System.Drawing.Color"/> specification
            for the ellipse border</param>
            <param name="fillColor1">An arbitrary <see cref="!:System.Drawing.Color"/> specification
            for the start of the ellipse gradient fill</param>
            <param name="fillColor2">An arbitrary <see cref="!:System.Drawing.Color"/> specification
            for the end of the ellipse gradient fill</param>
            <param name="x">The x location for this <see cref="T:Alt.GUI.ZedGraph.BoxObj"/>.  This will be in units determined by
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/>.</param>
            <param name="y">The y location for this <see cref="T:Alt.GUI.ZedGraph.BoxObj"/>.  This will be in units determined by
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/>.</param>
            <param name="width">The width of this <see cref="T:Alt.GUI.ZedGraph.BoxObj"/>.  This will be in units determined by
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/>.</param>
            <param name="height">The height of this <see cref="T:Alt.GUI.ZedGraph.BoxObj"/>.  This will be in units determined by
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/>.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.EllipseObj.#ctor(Alt.GUI.ZedGraph.BoxObj)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:Alt.GUI.ZedGraph.EllipseObj"/> object from
            which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.EllipseObj.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.EllipseObj.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.EllipseObj.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.EllipseObj.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.EllipseObj.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.EllipseObj.Draw(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.PaneBase,System.Double)">
            <summary>
            Render this object to the specified <see cref="T:Alt.Sketch.Graphics"/> device.
            </summary>
            <remarks>
            This method is normally only called by the Draw method
            of the parent <see cref="T:Alt.GUI.ZedGraph.GraphObjList"/> collection object.
            </remarks>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.PaneBase"/> object that is the parent or
            owner of this object.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.EllipseObj.PointInBox(Alt.Sketch.Point,Alt.GUI.ZedGraph.PaneBase,Alt.Sketch.Graphics,System.Double)">
            <summary>
            Determine if the specified screen point lies inside the bounding box of this
            <see cref="T:Alt.GUI.ZedGraph.BoxObj"/>.
            </summary>
            <param name="pt">The screen point, in pixels</param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.PaneBase"/> object that is the parent or
            owner of this object.
            </param>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <returns>true if the point lies in the bounding box, false otherwise</returns>
        </member>
        <member name="T:Alt.GUI.ZedGraph.ErrorBar">
            <summary>
            This class handles the drawing of the curve <see cref="T:Alt.GUI.ZedGraph.ErrorBar"/> objects.
            The Error Bars are the vertical lines with a symbol at each end.
            </summary>
            <remarks>To draw "I-Beam" bars, the symbol type defaults to
            <see cref="F:Alt.GUI.ZedGraph.SymbolType.HDash"/>, which is just a horizontal line.
            If <see cref="T:Alt.GUI.ZedGraph.BarBase"/> is Y-oriented, then the symbol type should be
            set to <see cref="F:Alt.GUI.ZedGraph.SymbolType.VDash"/> to get the same effect.
            </remarks>
            
            <author> John Champion </author>
            <version> $Revision: 3.21 $ $Date: 2007-08-10 16:22:54 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ErrorBar.schema">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ErrorBar._isVisible">
            <summary>
            Private field that stores the visibility of this
            <see cref="T:Alt.GUI.ZedGraph.ErrorBar"/>.  Use the public
            property <see cref="P:Alt.GUI.ZedGraph.ErrorBar.IsVisible"/> to access this value.  If this value is
            false, the symbols will not be shown.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ErrorBar._color">
            <summary>
            Private field that stores the error bar color.  Use the public
            property <see cref="P:Alt.GUI.ZedGraph.ErrorBar.Color"/> to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ErrorBar._penWidth">
            <summary>
            Private field that stores the pen width for this error bar.  Use the public
            property <see cref="P:Alt.GUI.ZedGraph.ErrorBar.PenWidth"/> to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ErrorBar._symbol">
            <summary>
            private field that contains the symbol element that will be drawn
            at the top and bottom of the error bar.  Use the public property
            <see cref="P:Alt.GUI.ZedGraph.ErrorBar.Symbol"/> to access this value.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ErrorBar.#ctor">
            <summary>
            Default constructor that sets all <see cref="T:Alt.GUI.ZedGraph.ErrorBar"/> properties to
            default values as defined in the <see cref="T:Alt.GUI.ZedGraph.ErrorBar.Default"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ErrorBar.#ctor(Alt.Sketch.Color)">
            <summary>
            Default constructor that sets the
            <see cref="P:Alt.GUI.ZedGraph.ErrorBar.Color"/> as specified, and the remaining
            <see cref="T:Alt.GUI.ZedGraph.ErrorBar"/> properties to default
            values as defined in the <see cref="T:Alt.GUI.ZedGraph.ErrorBar.Default"/> class.
            </summary>
            <param name="color">A <see cref="P:Alt.GUI.ZedGraph.ErrorBar.Color"/> value indicating
            the color of the symbol
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ErrorBar.#ctor(Alt.GUI.ZedGraph.ErrorBar)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:Alt.GUI.ZedGraph.ErrorBar"/> object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ErrorBar.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.ErrorBar.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ErrorBar.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ErrorBar.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ErrorBar.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ErrorBar.Draw(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,System.Boolean,System.Double,System.Double,System.Double,System.Double,Alt.Sketch.Pen,System.Boolean,Alt.GUI.ZedGraph.PointPair)">
            <summary>
            Draw the <see cref="T:Alt.GUI.ZedGraph.ErrorBar"/> to the specified <see cref="T:Alt.Sketch.Graphics"/>
            device at the specified location.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="isXBase">boolean value that indicates if the "base" axis for this
            <see cref="T:Alt.GUI.ZedGraph.ErrorBar"/> is the X axis.  True for an <see cref="T:Alt.GUI.ZedGraph.XAxis"/> base,
            false for a <see cref="T:Alt.GUI.ZedGraph.YAxis"/> or <see cref="T:Alt.GUI.ZedGraph.Y2Axis"/> base.</param>
            <param name="pixBase">The independent axis position of the center of the error bar in
            pixel units</param>
            <param name="pixValue">The dependent axis position of the top of the error bar in
            pixel units</param>
            <param name="pixLowValue">The dependent axis position of the bottom of the error bar in
            pixel units</param>
            <param name="scaleFactor">
            The scaling factor for the features of the graph based on the <see cref="P:Alt.GUI.ZedGraph.PaneBase.BaseDimension"/>.  This
            scaling factor is calculated by the <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method.  The scale factor
            represents a linear multiple to be applied to font sizes, symbol sizes, etc.</param>
            <param name="pen">A pen with attributes of <see cref="P:Alt.GUI.ZedGraph.ErrorBar.Color"/> and
            <see cref="P:Alt.GUI.ZedGraph.ErrorBar.PenWidth"/> for this <see cref="T:Alt.GUI.ZedGraph.ErrorBar"/></param>
            <param name="dataValue">The data value to be used for a value-based
            color gradient.  This is only applicable for <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByX"/>,
            <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByY"/> or <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByZ"/>.</param>
            <param name="isSelected">Indicates that the <see cref="T:Alt.GUI.ZedGraph.ErrorBar"/> should be drawn
            with attributes from the <see cref="T:Alt.GUI.ZedGraph.Selection"/> class.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ErrorBar.Draw(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,Alt.GUI.ZedGraph.ErrorBarItem,Alt.GUI.ZedGraph.Axis,Alt.GUI.ZedGraph.Axis,System.Double)">
            <summary>
            Draw all the <see cref="T:Alt.GUI.ZedGraph.ErrorBar"/>'s to the specified <see cref="T:Alt.Sketch.Graphics"/>
            device as a an error bar at each defined point.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="curve">A <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> object representing the
            <see cref="T:Alt.GUI.ZedGraph.Bar"/>'s to be drawn.</param>
            <param name="baseAxis">The <see cref="T:Alt.GUI.ZedGraph.Axis"/> class instance that defines the base (independent)
            axis for the <see cref="T:Alt.GUI.ZedGraph.Bar"/></param>
            <param name="valueAxis">The <see cref="T:Alt.GUI.ZedGraph.Axis"/> class instance that defines the value (dependent)
            axis for the <see cref="T:Alt.GUI.ZedGraph.Bar"/></param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ErrorBar.IsVisible">
            <summary>
            Gets or sets a property that shows or hides the <see cref="T:Alt.GUI.ZedGraph.ErrorBar"/>.
            </summary>
            <value>true to show the error bar, false to hide it</value>
            <seealso cref="F:Alt.GUI.ZedGraph.ErrorBar.Default.IsVisible"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ErrorBar.Color">
            <summary>
            Gets or sets the <see cref="!:System.Drawing.Color"/> data for this
            <see cref="T:Alt.GUI.ZedGraph.ErrorBar"/>.
            </summary>
            <remarks>This property only controls the color of
            the vertical line.  The symbol color is controlled separately in
            the <see cref="P:Alt.GUI.ZedGraph.ErrorBar.Symbol"/> property.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ErrorBar.PenWidth">
            <summary>
            The pen width to be used for drawing error bars
            Units are points.
            </summary>
            <remarks>This property only controls the pen width for the
            vertical line.  The pen width for the symbol outline is
            controlled separately by the <see cref="P:Alt.GUI.ZedGraph.ErrorBar.Symbol"/> property.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ErrorBar.Symbol">
            <summary>
            Contains the symbol element that will be drawn
            at the top and bottom of the error bar.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.ErrorBar.Default">
            <summary>
            A simple struct that defines the
            default property values for the <see cref="T:Alt.GUI.ZedGraph.ErrorBar"/> class.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ErrorBar.Default.Size">
            <summary>
            The default size for curve symbols
            (<see cref="P:Alt.GUI.ZedGraph.Symbol.Size"/> property),
            in units of points.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ErrorBar.Default.PenWidth">
            <summary>
            The default pen width to be used for drawing error bars
            (<see cref="P:Alt.GUI.ZedGraph.ErrorBar.PenWidth"/> property).  Units are points.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ErrorBar.Default.IsVisible">
            <summary>
            The default display mode for symbols (<see cref="P:Alt.GUI.ZedGraph.ErrorBar.IsVisible"/> property).
            true to display symbols, false to hide them.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ErrorBar.Default.Color">
            <summary>
            The default color for drawing error bars (<see cref="P:Alt.GUI.ZedGraph.ErrorBar.Color"/> property).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ErrorBar.Default.Type">
            <summary>
            The default symbol for drawing at the top and bottom of the
            error bar (see <see cref="P:Alt.GUI.ZedGraph.ErrorBar.Symbol"/>).
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.ErrorBarItem">
            <summary>
            Encapsulates an "Error Bar" curve type that displays a vertical or horizontal
            line with a symbol at each end.
            </summary>
            <remarks>The <see cref="T:Alt.GUI.ZedGraph.ErrorBarItem"/> type is intended for displaying
            confidence intervals, candlesticks, stock High-Low charts, etc.  It is
            technically not a bar, since it is drawn as a vertical or horizontal line.
            The default symbol at each end of the "bar" is <see cref="F:Alt.GUI.ZedGraph.SymbolType.HDash"/>,
            which creates an "I-Beam".  For horizontal bars
            (<see cref="F:Alt.GUI.ZedGraph.BarBase.Y"/> or
            <see cref="F:Alt.GUI.ZedGraph.BarBase.Y2"/>), you will need to change the symbol to
            <see cref="F:Alt.GUI.ZedGraph.SymbolType.VDash"/> to get horizontal "I-Beams".
            Since the horizontal segments are actually symbols, their widths are
            controlled by the symbol size in <see cref="P:Alt.GUI.ZedGraph.ErrorBar.Symbol"/>,
            specified in points (1/72nd inch).  The position of each "I-Beam" is set
            according to the <see cref="T:Alt.GUI.ZedGraph.PointPair"/> values.  The independent axis
            is assigned with <see cref="P:Alt.GUI.ZedGraph.BarSettings.Base"/>, and is a
            <see cref="T:Alt.GUI.ZedGraph.BarBase"/> enum type.</remarks>
            <author> John Champion </author>
            <version> $Revision: 3.19 $ $Date: 2007-04-16 00:03:01 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ErrorBarItem.schema2">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ErrorBarItem._bar">
            <summary>
            Private field that stores a reference to the <see cref="T:Alt.GUI.ZedGraph.ErrorBar"/>
            class defined for this <see cref="T:Alt.GUI.ZedGraph.ErrorBarItem"/>.  Use the public
            property <see cref="T:Alt.GUI.ZedGraph.ErrorBar"/> to access this value.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ErrorBarItem.IsZIncluded(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Gets a flag indicating if the Z data range should be included in the axis scaling calculations.
            </summary>
            <param name="pane">The parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> of this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>.
            </param>
            <value>true if the Z data are included, false otherwise</value>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ErrorBarItem.IsXIndependent(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Gets a flag indicating if the X axis is the independent axis for this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>
            </summary>
            <param name="pane">The parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> of this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>.
            </param>
            <value>true if the X axis is independent, false otherwise</value>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ErrorBarItem.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:Alt.GUI.ZedGraph.ErrorBarItem"/>, specifying only the legend label.
            </summary>
            <param name="label">The label that will appear in the legend.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ErrorBarItem.#ctor(System.String,System.Double[],System.Double[],System.Double[],Alt.Sketch.Color)">
            <summary>
            Create a new <see cref="T:Alt.GUI.ZedGraph.ErrorBarItem"/> using the specified properties.
            </summary>
            <param name="label">The label that will appear in the legend.</param>
            <param name="x">An array of double precision values that define
            the X axis values for this curve</param>
            <param name="y">An array of double precision values that define
            the Y axis values for this curve</param>
            <param name="lowValue">An array of double precision values that define
            the lower dependent values for this curve</param>
            <param name="color">A <see cref="T:Alt.Sketch.Color"/> value that will be applied to
            the <see cref="T:Alt.GUI.ZedGraph.Line"/> properties.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ErrorBarItem.#ctor(System.String,Alt.GUI.ZedGraph.IPointList,Alt.Sketch.Color)">
            <summary>
            Create a new <see cref="T:Alt.GUI.ZedGraph.ErrorBarItem"/> using the specified properties.
            </summary>
            <param name="label">The label that will appear in the legend.</param>
            <param name="points">A <see cref="T:Alt.GUI.ZedGraph.IPointList"/> of double precision values that define
            the X, Y and lower dependent values for this curve</param>
            <param name="color">A <see cref="T:Alt.Sketch.Color"/> value that will be applied to
            the <see cref="T:Alt.GUI.ZedGraph.Line"/> properties.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ErrorBarItem.#ctor(Alt.GUI.ZedGraph.ErrorBarItem)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:Alt.GUI.ZedGraph.ErrorBarItem"/> object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ErrorBarItem.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.ErrorBarItem.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ErrorBarItem.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ErrorBarItem.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ErrorBarItem.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ErrorBarItem.Draw(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,System.Int32,System.Double)">
            <summary>
            Do all rendering associated with this <see cref="T:Alt.GUI.ZedGraph.ErrorBarItem"/> to the specified
            <see cref="T:Alt.Sketch.Graphics"/> device.  This method is normally only
            called by the Draw method of the parent <see cref="T:Alt.GUI.ZedGraph.CurveList"/>
            collection object.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="pos">The ordinal position of the current <see cref="T:Alt.GUI.ZedGraph.ErrorBarItem"/>
            curve.</param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ErrorBarItem.DrawLegendKey(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,Alt.Sketch.Rect,System.Double)">
            <summary>
            Draw a legend key entry for this <see cref="T:Alt.GUI.ZedGraph.ErrorBarItem"/> at the specified location
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="rect">The <see cref="T:Alt.Sketch.Rect"/> struct that specifies the
            location for the legend key</param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ErrorBarItem.GetCoords(Alt.GUI.ZedGraph.GraphPane,System.Int32,System.String@)">
            <summary>
            Determine the coords for the rectangle associated with a specified point for 
            this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>
            </summary>
            <param name="pane">The <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> to which this curve belongs</param>
            <param name="i">The index of the point of interest</param>
            <param name="coords">A list of coordinates that represents the "rect" for
            this point (used in an html AREA tag)</param>
            <returns>true if it's a valid point, false otherwise</returns>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ErrorBarItem.Bar">
            <summary>
            Gets a reference to the <see cref="T:Alt.GUI.ZedGraph.ErrorBar"/> class defined
            for this <see cref="T:Alt.GUI.ZedGraph.ErrorBarItem"/>.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.ExponentScale">
            <summary>
            The ExponentScale class inherits from the <see cref="T:Alt.GUI.ZedGraph.Scale"/> class, and implements
            the features specific to <see cref="F:Alt.GUI.ZedGraph.AxisType.Exponent"/>.
            </summary>
            <remarks>
            ExponentScale is a non-linear axis in which the values are scaled using an exponential function
            with the <see cref="P:Alt.GUI.ZedGraph.Scale.Exponent"/> property.
            </remarks>
            
            <author> John Champion with contributions by jackply </author>
            <version> $Revision: 1.8 $ $Date: 2007-04-16 00:03:01 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ExponentScale.schema2">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ExponentScale.#ctor(Alt.GUI.ZedGraph.Axis)">
            <summary>
            Default constructor that defines the owner <see cref="T:Alt.GUI.ZedGraph.Axis"/>
            (containing object) for this new object.
            </summary>
            <param name="owner">The owner, or containing object, of this instance</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ExponentScale.#ctor(Alt.GUI.ZedGraph.Scale,Alt.GUI.ZedGraph.Axis)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:Alt.GUI.ZedGraph.ExponentScale"/> object from which to copy</param>
            <param name="owner">The <see cref="T:Alt.GUI.ZedGraph.Axis"/> object that will own the
            new instance of <see cref="T:Alt.GUI.ZedGraph.ExponentScale"/></param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ExponentScale.Clone(Alt.GUI.ZedGraph.Axis)">
            <summary>
            Create a new clone of the current item, with a new owner assignment
            </summary>
            <param name="owner">The new <see cref="T:Alt.GUI.ZedGraph.Axis"/> instance that will be
            the owner of the new Scale</param>
            <returns>A new <see cref="T:Alt.GUI.ZedGraph.Scale"/> clone.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ExponentScale.SetupScaleData(Alt.GUI.ZedGraph.GraphPane,Alt.GUI.ZedGraph.Axis)">
            <summary>
            Setup some temporary transform values in preparation for rendering the <see cref="T:Alt.GUI.ZedGraph.Axis"/>.
            </summary>
            <remarks>
            This method is typically called by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>
            object as part of the <see cref="M:Alt.GUI.ZedGraph.GraphPane.Draw(Alt.Sketch.Graphics)"/> method.  It is also
            called by <see cref="M:Alt.GUI.ZedGraph.GraphPane.GeneralTransform(System.Double,System.Double,Alt.GUI.ZedGraph.CoordType)"/> and
            <see cref="M:Alt.GUI.ZedGraph.GraphPane.ReverseTransform(Alt.Sketch.Point,System.Double@,System.Double@)"/>
            methods to setup for coordinate transformations.
            </remarks>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="axis">
            The parent <see cref="T:Alt.GUI.ZedGraph.Axis"/> for this <see cref="T:Alt.GUI.ZedGraph.Scale"/>
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ExponentScale.Linearize(System.Double)">
            <summary>
            Convert a value to its linear equivalent for this type of scale.
            </summary>
            <remarks>
            The default behavior is to just return the value unchanged.  However,
            for <see cref="F:Alt.GUI.ZedGraph.AxisType.Log"/> and <see cref="F:Alt.GUI.ZedGraph.AxisType.Exponent"/>,
            it returns the log or power equivalent.
            </remarks>
            <param name="val">The value to be converted</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ExponentScale.DeLinearize(System.Double)">
            <summary>
            Convert a value from its linear equivalent to its actual scale value
            for this type of scale.
            </summary>
            <remarks>
            The default behavior is to just return the value unchanged.  However,
            for <see cref="F:Alt.GUI.ZedGraph.AxisType.Log"/> and <see cref="F:Alt.GUI.ZedGraph.AxisType.Exponent"/>,
            it returns the anti-log or inverse-power equivalent.
            </remarks>
            <param name="val">The value to be converted</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ExponentScale.CalcMajorTicValue(System.Double,System.Double)">
            <summary>
            Determine the value for any major tic.
            </summary>
            <remarks>
            This method properly accounts for <see cref="P:Alt.GUI.ZedGraph.Scale.IsLog"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.IsText"/>,
            and other axis format settings.
            </remarks>
            <param name="baseVal">
            The value of the first major tic (floating point double)
            </param>
            <param name="tic">
            The major tic number (0 = first major tic).  For log scales, this is the actual power of 10.
            </param>
            <returns>
            The specified major tic value (floating point double).
            </returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ExponentScale.CalcMinorTicValue(System.Double,System.Int32)">
            <summary>
            Determine the value for any minor tic.
            </summary>
            <remarks>
            This method properly accounts for <see cref="P:Alt.GUI.ZedGraph.Scale.IsLog"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.IsText"/>,
            and other axis format settings.
            </remarks>
            <param name="baseVal">
            The value of the first major tic (floating point double).  This tic value is the base
            reference for all tics (including minor ones).
            </param>
            <param name="iTic">
            The major tic number (0 = first major tic).  For log scales, this is the actual power of 10.
            </param>
            <returns>
            The specified minor tic value (floating point double).
            </returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ExponentScale.CalcMinorStart(System.Double)">
            <summary>
            Internal routine to determine the ordinals of the first minor tic mark
            </summary>
            <param name="baseVal">
            The value of the first major tic for the axis.
            </param>
            <returns>
            The ordinal position of the first minor tic, relative to the first major tic.
            This value can be negative (e.g., -3 means the first minor tic is 3 minor step
            increments before the first major tic.
            </returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ExponentScale.PickScale(Alt.GUI.ZedGraph.GraphPane,Alt.Sketch.Graphics,System.Double)">
            <summary>
            Select a reasonable exponential axis scale given a range of data values.
            </summary>
            <remarks>
            This method only applies to <see cref="F:Alt.GUI.ZedGraph.AxisType.Exponent"/> type axes, and it
            is called by the general <see cref="M:Alt.GUI.ZedGraph.Scale.PickScale(Alt.GUI.ZedGraph.GraphPane,Alt.Sketch.Graphics,System.Double)"/> method.  The exponential scale
            relies on the <see cref="P:Alt.GUI.ZedGraph.Scale.Exponent"/> property to set the scaling exponent.  This
            method honors the <see cref="P:Alt.GUI.ZedGraph.Scale.MinAuto"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.MaxAuto"/>,
            and <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStepAuto"/> autorange settings.
            In the event that any of the autorange settings are false, the
            corresponding <see cref="P:Alt.GUI.ZedGraph.Scale.Min"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.Max"/>, or <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/>
            setting is explicitly honored, and the remaining autorange settings (if any) will
            be calculated to accomodate the non-autoranged values.  For log axes, the MinorStep
            value is not used.
            <para>On Exit:</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.Min"/> is set to scale minimum (if <see cref="P:Alt.GUI.ZedGraph.Scale.MinAuto"/> = true)</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.Max"/> is set to scale maximum (if <see cref="P:Alt.GUI.ZedGraph.Scale.MaxAuto"/> = true)</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/> is set to scale step size (if <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStepAuto"/> = true)</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.Mag"/> is set to a magnitude multiplier according to the data</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.Format"/> is set to the display format for the values (this controls the
            number of decimal places, whether there are thousands separators, currency types, etc.)</para>
            </remarks>
            <seealso cref="M:Alt.GUI.ZedGraph.Scale.PickScale(Alt.GUI.ZedGraph.GraphPane,Alt.Sketch.Graphics,System.Double)"/>
            <seealso cref="F:Alt.GUI.ZedGraph.AxisType.Exponent"/>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ExponentScale.MakeLabel(Alt.GUI.ZedGraph.GraphPane,System.Int32,System.Double)">
            <summary>
            Make a value label for an <see cref="F:Alt.GUI.ZedGraph.AxisType.Exponent"/> <see cref="T:Alt.GUI.ZedGraph.Axis"/>.
            </summary>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="index">
            The zero-based, ordinal index of the label to be generated.  For example, a value of 2 would
            cause the third value label on the axis to be generated.
            </param>
            <param name="dVal">
            The numeric value associated with the label.  This value is ignored for log (<see cref="P:Alt.GUI.ZedGraph.Scale.IsLog"/>)
            and text (<see cref="P:Alt.GUI.ZedGraph.Scale.IsText"/>) type axes.
            </param>
            <returns>The resulting value label as a <see cref="T:System.String"/></returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ExponentScale.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ExponentScale.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Fill">
            <summary>
            A class that encapsulates color-fill properties for an object.  The <see cref="T:Alt.GUI.ZedGraph.Fill"/> class
            is used in <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/>, <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>, <see cref="T:Alt.GUI.ZedGraph.Legend"/>,
            <see cref="T:Alt.GUI.ZedGraph.Bar"/>, and <see cref="T:Alt.GUI.ZedGraph.Line"/> objects.
            </summary>
            
            <author> John Champion </author>
            <version> $Revision: 3.22 $ $Date: 2007-01-26 09:01:49 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Fill.schema">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Fill._color">
            <summary>
            Private field that stores the fill color.  Use the public
            property <see cref="P:Alt.GUI.ZedGraph.Fill.Color"/> to access this value.  This property is
            only applicable if the <see cref="P:Alt.GUI.ZedGraph.Fill.Type"/> is not <see cref="F:Alt.GUI.ZedGraph.FillType.None"/>.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Fill._secondaryValueGradientColor">
            <summary>
            Private field that stores the secondary color for gradientByValue fills.  Use the public
            property <see cref="P:Alt.GUI.ZedGraph.Fill.SecondaryValueGradientColor"/> to access this value.  This property is
            only applicable if the <see cref="P:Alt.GUI.ZedGraph.Fill.Type"/> is <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByX"/>,
            <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByY"/>, or <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByZ"/>.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Fill._brush">
            <summary>
            Private field that stores the custom fill brush.  Use the public
            property <see cref="P:Alt.GUI.ZedGraph.Fill.Brush"/> to access this value.  This property is
            only applicable if the 
            <see cref="P:Alt.GUI.ZedGraph.Fill.Type"/> property is set to <see cref="F:Alt.GUI.ZedGraph.FillType.Brush"/>.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Fill._type">
            <summary>
            Private field that determines the type of color fill.  Use the public
            property <see cref="P:Alt.GUI.ZedGraph.Fill.Type"/> to access this value.  The fill color
            is determined by the property <see cref="P:Alt.GUI.ZedGraph.Fill.Color"/> or
            <see cref="P:Alt.GUI.ZedGraph.Fill.Brush"/>.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Fill._isScaled">
            <summary>
            Private field that determines if the brush will be scaled to the bounding box
            of the filled object.  If this value is false, then the brush will only be aligned
            with the filled object based on the <see cref="P:Alt.GUI.ZedGraph.Fill.AlignH"/> and <see cref="P:Alt.GUI.ZedGraph.Fill.AlignV"/>
            properties.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Fill._alignH">
            <summary>
            Private field that determines how the brush will be aligned with the filled object
            in the horizontal direction.  This value is a <see cref="T:Alt.GUI.ZedGraph.AlignH"/> enumeration.
            This field only applies if <see cref="P:Alt.GUI.ZedGraph.Fill.IsScaled"/> is false.
            properties.
            </summary>
            <seealso cref="P:Alt.GUI.ZedGraph.Fill.AlignH"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Fill.AlignV"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Fill._alignV">
            <summary>
            Private field that determines how the brush will be aligned with the filled object
            in the vertical direction.  This value is a <see cref="T:Alt.GUI.ZedGraph.AlignV"/> enumeration.
            This field only applies if <see cref="P:Alt.GUI.ZedGraph.Fill.IsScaled"/> is false.
            properties.
            </summary>
            <seealso cref="P:Alt.GUI.ZedGraph.Fill.AlignH"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Fill.AlignV"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Fill._image">
            <summary>
            Private field that saves the image passed to the constructor.
            This is used strictly for serialization.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Fill._wrapMode">
            <summary>
            Private field that saves the image wrapmode passed to the constructor.
            This is used strictly for serialization.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Fill._colorList">
            <summary>
            Private field that saves the list of colors used to create the
            <see cref="T:Alt.Sketch.LinearGradientBrush"/> in the constructor.  This is used strictly
            for serialization.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Fill._positionList">
            <summary>
            Private field that saves the list of positions used to create the
            <see cref="T:Alt.Sketch.LinearGradientBrush"/> in the constructor.  This is used strictly
            for serialization.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Fill._angle">
            <summary>
            Private field the saves the angle of the fill.  This is used strictly for serialization.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Fill.Init">
            <summary>
            Generic initializer to default values
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Fill.#ctor">
            <summary>
            The default constructor.  Initialized to no fill.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Fill.#ctor(Alt.Sketch.Color,Alt.Sketch.Brush,Alt.GUI.ZedGraph.FillType)">
            <summary>
            Constructor that specifies the color, brush, and type for this fill.
            </summary>
            <param name="color">The color of the fill for solid fills</param>
            <param name="brush">A custom brush for fills.  Can be a <see cref="T:Alt.Sketch.SolidColorBrush"/>,
            <see cref="T:Alt.Sketch.LinearGradientBrush"/>, or <see cref="T:Alt.Sketch.TextureBrush"/>.</param>
            <param name="type">The <see cref="T:Alt.GUI.ZedGraph.FillType"/> for this fill.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Fill.#ctor(Alt.Sketch.Color)">
            <summary>
            Constructor that creates a solid color-fill, setting <see cref="P:Alt.GUI.ZedGraph.Fill.Type"/> to
            <see cref="F:Alt.GUI.ZedGraph.FillType.Solid"/>, and setting <see cref="P:Alt.GUI.ZedGraph.Fill.Color"/> to the
            specified color value.
            </summary>
            <param name="color">The color of the solid fill</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Fill.#ctor(Alt.Sketch.Color,Alt.Sketch.Color,System.Single)">
            <summary>
            Constructor that creates a linear gradient color-fill, setting <see cref="P:Alt.GUI.ZedGraph.Fill.Type"/> to
            <see cref="F:Alt.GUI.ZedGraph.FillType.Brush"/> using the specified colors and angle.
            </summary>
            <param name="color1">The first color for the gradient fill</param>
            <param name="color2">The second color for the gradient fill</param>
            <param name="angle">The angle (degrees) of the gradient fill</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Fill.#ctor(Alt.Sketch.Color,Alt.Sketch.Color)">
            <summary>
            Constructor that creates a linear gradient color-fill, setting <see cref="P:Alt.GUI.ZedGraph.Fill.Type"/> to
            <see cref="F:Alt.GUI.ZedGraph.FillType.Brush"/> using the specified colors.
            </summary>
            <param name="color1">The first color for the gradient fill</param>
            <param name="color2">The second color for the gradient fill</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Fill.#ctor(Alt.Sketch.Color,Alt.Sketch.Color,Alt.Sketch.Color)">
            <summary>
            Constructor that creates a linear gradient color-fill, setting <see cref="P:Alt.GUI.ZedGraph.Fill.Type"/> to
            <see cref="F:Alt.GUI.ZedGraph.FillType.Brush"/> using the specified colors.  This gradient fill
            consists of three colors.
            </summary>
            <param name="color1">The first color for the gradient fill</param>
            <param name="color2">The second color for the gradient fill</param>
            <param name="color3">The third color for the gradient fill</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Fill.#ctor(Alt.Sketch.Color,Alt.Sketch.Color,Alt.Sketch.Color,System.Single)">
            <summary>
            Constructor that creates a linear gradient color-fill, setting <see cref="P:Alt.GUI.ZedGraph.Fill.Type"/> to
            <see cref="F:Alt.GUI.ZedGraph.FillType.Brush"/> using the specified colors.  This gradient fill
            consists of three colors
            </summary>
            <param name="color1">The first color for the gradient fill</param>
            <param name="color2">The second color for the gradient fill</param>
            <param name="color3">The third color for the gradient fill</param>
            <param name="angle">The angle (degrees) of the gradient fill</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Fill.#ctor(Alt.Sketch.ColorBlend)">
            <summary>
            Constructor that creates a linear gradient multi-color-fill, setting <see cref="P:Alt.GUI.ZedGraph.Fill.Type"/> to
            <see cref="F:Alt.GUI.ZedGraph.FillType.Brush"/> using the specified colors.  This gradient fill
            consists of many colors based on a <see cref="T:Alt.Sketch.ColorBlend"/> object.  The gradient
            angle is defaulted to zero.
            </summary>
            <param name="blend">The <see cref="T:Alt.Sketch.ColorBlend"/> object that defines the colors
            and positions along the gradient.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Fill.#ctor(Alt.Sketch.ColorBlend,System.Single)">
            <summary>
            Constructor that creates a linear gradient multi-color-fill, setting <see cref="P:Alt.GUI.ZedGraph.Fill.Type"/> to
            <see cref="F:Alt.GUI.ZedGraph.FillType.Brush"/> using the specified colors.  This gradient fill
            consists of many colors based on a <see cref="T:Alt.Sketch.ColorBlend"/> object, drawn at the
            specified angle (degrees).
            </summary>
            <param name="blend">The <see cref="T:Alt.Sketch.ColorBlend"/> object that defines the colors
            and positions along the gradient.</param>
            <param name="angle">The angle (degrees) of the gradient fill</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Fill.#ctor(Alt.Sketch.Color[])">
            <summary>
            Constructor that creates a linear gradient multi-color-fill, setting <see cref="P:Alt.GUI.ZedGraph.Fill.Type"/> to
            <see cref="F:Alt.GUI.ZedGraph.FillType.Brush"/> using the specified colors.  This gradient fill
            consists of many colors based on an array of <see cref="P:Alt.GUI.ZedGraph.Fill.Color"/> objects, drawn at an
            angle of zero (degrees).  The <see paramref="colors"/> array is used to create
            a <see cref="T:Alt.Sketch.ColorBlend"/> object assuming a even linear distribution of the colors
            across the gradient.
            </summary>
            <param name="colors">The array of <see cref="P:Alt.GUI.ZedGraph.Fill.Color"/> objects that defines the colors
            along the gradient.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Fill.#ctor(Alt.Sketch.Color[],System.Single)">
            <summary>
            Constructor that creates a linear gradient multi-color-fill, setting <see cref="P:Alt.GUI.ZedGraph.Fill.Type"/> to
            <see cref="F:Alt.GUI.ZedGraph.FillType.Brush"/> using the specified colors.  This gradient fill
            consists of many colors based on an array of <see cref="P:Alt.GUI.ZedGraph.Fill.Color"/> objects, drawn at the
            specified angle (degrees).  The <see paramref="colors"/> array is used to create
            a <see cref="T:Alt.Sketch.ColorBlend"/> object assuming a even linear distribution of the colors
            across the gradient.
            </summary>
            <param name="colors">The array of <see cref="P:Alt.GUI.ZedGraph.Fill.Color"/> objects that defines the colors
            along the gradient.</param>
            <param name="angle">The angle (degrees) of the gradient fill</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Fill.#ctor(Alt.Sketch.Color[],System.Double[])">
            <summary>
            Constructor that creates a linear gradient multi-color-fill, setting <see cref="P:Alt.GUI.ZedGraph.Fill.Type"/> to
            <see cref="F:Alt.GUI.ZedGraph.FillType.Brush"/> using the specified colors.  This gradient fill
            consists of many colors based on an array of <see cref="P:Alt.GUI.ZedGraph.Fill.Color"/> objects, drawn at the
            an angle of zero (degrees).  The <see paramref="colors"/> array is used to create
            a <see cref="T:Alt.Sketch.ColorBlend"/> object assuming a even linear distribution of the colors
            across the gradient.
            </summary>
            <param name="colors">The array of <see cref="P:Alt.GUI.ZedGraph.Fill.Color"/> objects that defines the colors
            along the gradient.</param>
            <param name="positions">The array of floating point values that defines the color
            positions along the gradient.  Values should range from 0 to 1.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Fill.#ctor(Alt.Sketch.Color[],System.Double[],System.Single)">
            <summary>
            Constructor that creates a linear gradient multi-color-fill, setting <see cref="P:Alt.GUI.ZedGraph.Fill.Type"/> to
            <see cref="F:Alt.GUI.ZedGraph.FillType.Brush"/> using the specified colors.  This gradient fill
            consists of many colors based on an array of <see cref="P:Alt.GUI.ZedGraph.Fill.Color"/> objects, drawn at the
            specified angle (degrees).  The <see paramref="colors"/> array is used to create
            a <see cref="T:Alt.Sketch.ColorBlend"/> object assuming a even linear distribution of the colors
            across the gradient.
            </summary>
            <param name="colors">The array of <see cref="P:Alt.GUI.ZedGraph.Fill.Color"/> objects that defines the colors
            along the gradient.</param>
            <param name="positions">The array of floating point values that defines the color
            positions along the gradient.  Values should range from 0 to 1.</param>
            <param name="angle">The angle (degrees) of the gradient fill</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Fill.#ctor(Alt.Sketch.Bitmap,Alt.Sketch.WrapMode)">
            <summary>
            Constructor that creates a texture fill, setting <see cref="P:Alt.GUI.ZedGraph.Fill.Type"/> to
            <see cref="F:Alt.GUI.ZedGraph.FillType.Brush"/> and using the specified image.
            </summary>
            <param name="image">The <see cref="!:Image"/> to use for filling</param>
            <param name="wrapMode">The <see cref="T:Alt.Sketch.WrapMode"/> class that controls the image wrapping properties</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Fill.#ctor(Alt.Sketch.Brush)">
            <summary>
            Constructor that creates a <see cref="P:Alt.GUI.ZedGraph.Fill.Brush"/> fill, using a user-supplied, custom
            <see cref="P:Alt.GUI.ZedGraph.Fill.Brush"/>.  The brush will be scaled to fit the destination screen object
            unless you manually change <see cref="P:Alt.GUI.ZedGraph.Fill.IsScaled"/> to false;
            </summary>
            <param name="brush">The <see cref="P:Alt.GUI.ZedGraph.Fill.Brush"/> to use for fancy fills.  Typically, this would
            be a <see cref="T:Alt.Sketch.LinearGradientBrush"/> or a <see cref="T:Alt.Sketch.TextureBrush"/> class</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Fill.#ctor(Alt.Sketch.Brush,System.Boolean)">
            <summary>
            Constructor that creates a <see cref="P:Alt.GUI.ZedGraph.Fill.Brush"/> fill, using a user-supplied, custom
            <see cref="P:Alt.GUI.ZedGraph.Fill.Brush"/>.  The brush will be scaled to fit the destination screen object
            according to the <see paramref="isScaled"/> parameter.
            </summary>
            <param name="brush">The <see cref="P:Alt.GUI.ZedGraph.Fill.Brush"/> to use for fancy fills.  Typically, this would
            be a <see cref="T:Alt.Sketch.LinearGradientBrush"/> or a <see cref="T:Alt.Sketch.TextureBrush"/> class</param>
            <param name="isScaled">Determines if the brush will be scaled to fit the bounding box
            of the destination object.  true to scale it, false to leave it unscaled</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Fill.#ctor(Alt.Sketch.Brush,Alt.GUI.ZedGraph.AlignH,Alt.GUI.ZedGraph.AlignV)">
            <summary>
            Constructor that creates a <see cref="P:Alt.GUI.ZedGraph.Fill.Brush"/> fill, using a user-supplied, custom
            <see cref="P:Alt.GUI.ZedGraph.Fill.Brush"/>.  This constructor will make the brush unscaled (see <see cref="P:Alt.GUI.ZedGraph.Fill.IsScaled"/>),
            but it provides <see paramref="alignH"/> and <see paramref="alignV"/> parameters to control
            alignment of the brush with respect to the filled object.
            </summary>
            <param name="brush">The <see cref="P:Alt.GUI.ZedGraph.Fill.Brush"/> to use for fancy fills.  Typically, this would
            be a <see cref="T:Alt.Sketch.LinearGradientBrush"/> or a <see cref="T:Alt.Sketch.TextureBrush"/> class</param>
            <param name="alignH">Controls the horizontal alignment of the brush within the filled object
            (see <see cref="P:Alt.GUI.ZedGraph.Fill.AlignH"/></param>
            <param name="alignV">Controls the vertical alignment of the brush within the filled object
            (see <see cref="P:Alt.GUI.ZedGraph.Fill.AlignV"/></param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Fill.#ctor(Alt.GUI.ZedGraph.Fill)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The Fill object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Fill.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.Fill.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Fill.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Fill.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Fill.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Fill.MakeBrush(Alt.Sketch.Rect)">
            <summary>
            Create a fill brush using current properties.  This method will construct a brush based on the
            settings of <see cref="P:Alt.GUI.ZedGraph.Fill.Type"/>, <see cref="P:Alt.GUI.ZedGraph.Fill.Color"/>
            and <see cref="P:Alt.GUI.ZedGraph.Fill.Brush"/>.  If
            <see cref="P:Alt.GUI.ZedGraph.Fill.Type"/> is set to <see cref="F:Alt.GUI.ZedGraph.FillType.Brush"/> and
            <see cref="P:Alt.GUI.ZedGraph.Fill.Brush"/>
            is null, then a <see cref="T:Alt.Sketch.LinearGradientBrush"/> will be created between the colors of
            <see cref="!:System.Drawing.Color.White"/> and <see cref="P:Alt.GUI.ZedGraph.Fill.Color"/>.
            </summary>
            <param name="rect">A rectangle that bounds the object to be filled.  This determines
            the start and end of the gradient fill.</param>
            <returns>A <see cref="!:System.Drawing.Brush"/> class representing the fill brush</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Fill.MakeBrush(Alt.Sketch.Rect,Alt.GUI.ZedGraph.PointPair)">
            <summary>
            Create a fill brush using current properties.  This method will construct a brush based on the
            settings of <see cref="P:Alt.GUI.ZedGraph.Fill.Type"/>, <see cref="P:Alt.GUI.ZedGraph.Fill.Color"/>
            and <see cref="P:Alt.GUI.ZedGraph.Fill.Brush"/>.  If
            <see cref="P:Alt.GUI.ZedGraph.Fill.Type"/> is set to <see cref="F:Alt.GUI.ZedGraph.FillType.Brush"/> and
            <see cref="P:Alt.GUI.ZedGraph.Fill.Brush"/>
            is null, then a <see cref="T:Alt.Sketch.LinearGradientBrush"/> will be created between the colors of
            <see cref="!:System.Drawing.Color.White"/> and <see cref="P:Alt.GUI.ZedGraph.Fill.Color"/>.
            </summary>
            <param name="rect">A rectangle that bounds the object to be filled.  This determines
            the start and end of the gradient fill.</param>
            <param name="dataValue">The data value to be used for a value-based
            color gradient.  This is only applicable for <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByX"/>,
            <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByY"/> or <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByZ"/>.</param>
            <returns>A <see cref="!:System.Drawing.Brush"/> class representing the fill brush</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Fill.Draw(Alt.Sketch.Graphics,Alt.Sketch.Rect)">
            <summary>
            Fill the background of the <see cref="T:Alt.Sketch.Rect"/> area, using the
            fill type from this <see cref="T:Alt.GUI.ZedGraph.Fill"/>.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="rect">The <see cref="T:Alt.Sketch.Rect"/> struct specifying the area
            to be filled</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Fill.Draw(Alt.Sketch.Graphics,Alt.Sketch.Rect,Alt.GUI.ZedGraph.PointPair)">
            <summary>
            Fill the background of the <see cref="T:Alt.Sketch.Rect"/> area, using the
            fill type from this <see cref="T:Alt.GUI.ZedGraph.Fill"/>.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="rect">The <see cref="T:Alt.Sketch.Rect"/> struct specifying the area
            to be filled</param>
            <param name="pt">The data value to be used in case it's a
            <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByX"/>, <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByY"/>, or
            <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByZ"/> <see cref="T:Alt.GUI.ZedGraph.FillType"/>.</param>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Fill.Color">
            <summary>
            The fill color.  This property is used as a single color to make a solid fill
            (<see cref="P:Alt.GUI.ZedGraph.Fill.Type"/> is <see cref="F:Alt.GUI.ZedGraph.FillType.Solid"/>), or it can be used in 
            combination with <see cref="!:System.Drawing.Color.White"/> to make a
            <see cref="T:Alt.Sketch.LinearGradientBrush"/>
            when <see cref="P:Alt.GUI.ZedGraph.Fill.Type"/> is <see cref="F:Alt.GUI.ZedGraph.FillType.Brush"/> and <see cref="P:Alt.GUI.ZedGraph.Fill.Brush"/>
            is null.
            </summary>
            <seealso cref="P:Alt.GUI.ZedGraph.Fill.Type"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Fill.SecondaryValueGradientColor">
            <summary>
            Gets or sets the secondary color for gradientByValue fills.
            </summary>
            <remarks>
            This property is only applicable if the <see cref="P:Alt.GUI.ZedGraph.Fill.Type"/> is
            <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByX"/>,
            <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByY"/>, or
            <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByZ"/>.  Once the gradient-by-value logic picks
            a color, a new gradient will be created using the SecondaryValueGradientColor, the
            resulting gradient-by-value color, and the angle setting for this
            <see cref="T:Alt.GUI.ZedGraph.Fill"/>. Use a value of <see cref="!:System.Drawing.Color.Empty">Color.Empty</see> to have
            a solid-color <see cref="T:Alt.GUI.ZedGraph.Fill"/> resulting from a gradient-by-value
            <see cref="T:Alt.GUI.ZedGraph.FillType"/>.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Fill.Brush">
            <summary>
            The custom fill brush.  This can be a <see cref="T:Alt.Sketch.SolidColorBrush"/>, a
            <see cref="T:Alt.Sketch.LinearGradientBrush"/>, or a <see cref="T:Alt.Sketch.TextureBrush"/>.  This property is
            only applicable if the <see cref="P:Alt.GUI.ZedGraph.Fill.Type"/> property is set
            to <see cref="F:Alt.GUI.ZedGraph.FillType.Brush"/>.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Fill.Type">
            <summary>
            Determines the type of fill, which can be either solid
            color (<see cref="F:Alt.GUI.ZedGraph.FillType.Solid"/>) or a custom brush
            (<see cref="F:Alt.GUI.ZedGraph.FillType.Brush"/>).  See <see cref="P:Alt.GUI.ZedGraph.Fill.Type"/> for
            more information.
            </summary>
            <seealso cref="P:Alt.GUI.ZedGraph.Fill.Color"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Fill.IsVisible">
            <summary>
            This property determines the type of color fill. 
            Returns true if the <see cref="P:Alt.GUI.ZedGraph.Fill.Type"/> property is either
            <see cref="F:Alt.GUI.ZedGraph.FillType.Solid"/> or
            <see cref="F:Alt.GUI.ZedGraph.FillType.Brush"/>.  If set to true, this property
            will automatically set the <see cref="P:Alt.GUI.ZedGraph.Fill.Type"/> to
            <see cref="F:Alt.GUI.ZedGraph.FillType.Brush"/>.  If set to false, this property
            will automatically set the <see cref="P:Alt.GUI.ZedGraph.Fill.Type"/> to
            <see cref="F:Alt.GUI.ZedGraph.FillType.None"/>.  In order to get a regular
            solid-color fill, you have to manually set <see cref="P:Alt.GUI.ZedGraph.Fill.Type"/>
            to <see cref="F:Alt.GUI.ZedGraph.FillType.Solid"/>.
            </summary>
            <seealso cref="P:Alt.GUI.ZedGraph.Fill.Color"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Fill.Brush"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Fill.Type"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Fill.IsScaled">
            <summary>
            Determines if the brush will be scaled to the bounding box
            of the filled object.  If this value is false, then the brush will only be aligned
            with the filled object based on the <see cref="P:Alt.GUI.ZedGraph.Fill.AlignH"/> and <see cref="P:Alt.GUI.ZedGraph.Fill.AlignV"/>
            properties.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Fill.AlignH">
            <summary>
            Determines how the brush will be aligned with the filled object
            in the horizontal direction.  This value is a <see cref="T:Alt.GUI.ZedGraph.AlignH"/> enumeration.
            This field only applies if <see cref="P:Alt.GUI.ZedGraph.Fill.IsScaled"/> is false.
            </summary>
            <seealso cref="P:Alt.GUI.ZedGraph.Fill.AlignV"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Fill.AlignV">
            <summary>
            Determines how the brush will be aligned with the filled object
            in the vertical direction.  This value is a <see cref="T:Alt.GUI.ZedGraph.AlignV"/> enumeration.
            This field only applies if <see cref="P:Alt.GUI.ZedGraph.Fill.IsScaled"/> is false.
            </summary>
            <seealso cref="P:Alt.GUI.ZedGraph.Fill.AlignH"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Fill.IsGradientValueType">
            <summary>
            Returns a boolean value indicating whether or not this fill is a "Gradient-By-Value"
            type.  This is true for <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByX"/>, <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByY"/>,
            or <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByZ"/>.
            </summary>
            <remarks>
            The gradient by value fill method allows the fill color for each point or bar to
            be based on a value for that point (either X, Y, or Z in the <see cref="T:Alt.GUI.ZedGraph.IPointList"/>.
            For example, assume a <see cref="T:Alt.GUI.ZedGraph.Fill"/> class is defined with a linear gradient ranging from
            <see cref="!:System.Drawing.Color.Blue"/> to <see cref="!:System.Drawing.Color.Red"/> and the <see cref="P:Alt.GUI.ZedGraph.Fill.Type"/>
            is set to <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByY"/>.  If <see cref="P:Alt.GUI.ZedGraph.Fill.RangeMin"/> is set to 
            100.0 and <see cref="P:Alt.GUI.ZedGraph.Fill.RangeMax"/> is set to 200.0, then a point that has a Y value of
            100 or less will be colored blue, a point with a Y value of 200 or more will be
            colored red, and a point between 100 and 200 will have a color based on a linear scale
            between blue and red.  Note that the fill color is always solid for any given point.
            You can use the Z value from <see cref="T:Alt.GUI.ZedGraph.IPointList"/> along with
            <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByZ"/> to color individual points according to some
            property that is independent of the X,Y point pair.
            </remarks>
            <value>true if this is a Gradient-by-value type, false otherwise</value>
            <seealso cref="F:Alt.GUI.ZedGraph.FillType.GradientByX"/>
            <seealso cref="F:Alt.GUI.ZedGraph.FillType.GradientByY"/>
            <seealso cref="F:Alt.GUI.ZedGraph.FillType.GradientByZ"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Fill.RangeMin">
            <summary>
            The minimum user-scale value for the gradient-by-value determination.  This defines
            the user-scale value for the start of the gradient.
            </summary>
            <seealso cref="F:Alt.GUI.ZedGraph.FillType.GradientByX"/>
            <seealso cref="F:Alt.GUI.ZedGraph.FillType.GradientByY"/>
            <seealso cref="F:Alt.GUI.ZedGraph.FillType.GradientByZ"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Fill.IsGradientValueType"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Fill.RangeMax"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Fill.RangeDefault"/>
            <value>A double value, in user scale unit</value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Fill.RangeMax">
            <summary>
            The maximum user-scale value for the gradient-by-value determination.  This defines
            the user-scale value for the end of the gradient.
            </summary>
            <seealso cref="F:Alt.GUI.ZedGraph.FillType.GradientByX"/>
            <seealso cref="F:Alt.GUI.ZedGraph.FillType.GradientByY"/>
            <seealso cref="F:Alt.GUI.ZedGraph.FillType.GradientByZ"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Fill.IsGradientValueType"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Fill.RangeMin"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Fill.RangeDefault"/>
            <value>A double value, in user scale unit</value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Fill.RangeDefault">
            <summary>
            The default user-scale value for the gradient-by-value determination.  This defines the
            value that will be used when there is no point value available, or the actual point value
            is invalid.
            </summary>
            <remarks>
            Note that this value, when defined, will determine the color that is used in the legend.
            If this value is set to double.MaxValue, then it remains "undefined."  In this case, the
            legend symbols will actually be filled with a color gradient representing the range of
            colors.
            </remarks>
            <seealso cref="F:Alt.GUI.ZedGraph.FillType.GradientByX"/>
            <seealso cref="F:Alt.GUI.ZedGraph.FillType.GradientByY"/>
            <seealso cref="F:Alt.GUI.ZedGraph.FillType.GradientByZ"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Fill.IsGradientValueType"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Fill.RangeMin"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Fill.RangeMax"/>
            <value>A double value, in user scale unit</value>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Fill.Default">
            <summary>
            A simple struct that defines the
            default property values for the <see cref="T:Alt.GUI.ZedGraph.Fill"/> class.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Fill.Default.IsScaled">
            <summary>
            The default scaling mode for <see cref="P:Alt.GUI.ZedGraph.Fill.Brush"/> fills.
            This is the default value for the <see cref="P:Alt.GUI.ZedGraph.Fill.IsScaled"/> property.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Fill.Default.AlignH">
            <summary>
            The default horizontal alignment for <see cref="P:Alt.GUI.ZedGraph.Fill.Brush"/> fills.
            This is the default value for the <see cref="P:Alt.GUI.ZedGraph.Fill.AlignH"/> property.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Fill.Default.AlignV">
            <summary>
            The default vertical alignment for <see cref="P:Alt.GUI.ZedGraph.Fill.Brush"/> fills.
            This is the default value for the <see cref="P:Alt.GUI.ZedGraph.Fill.AlignV"/> property.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.FilteredPointList">
             <summary>
             An example of an <see cref="T:Alt.GUI.ZedGraph.IPointList"/> implementation that stores large datasets, and
             selectively filters the output data depending on the displayed range.
             </summary>
             <remarks>
             This class will refilter the data points each time <see cref="M:Alt.GUI.ZedGraph.FilteredPointList.SetBounds(System.Double,System.Double,System.Int32)"/> is called.  The
             data are filtered down to <see cref="P:Alt.GUI.ZedGraph.FilteredPointList.MaxPts"/> points, within the data bounds of
             a minimum and maximum data range.  The data are filtered by simply skipping
             points to achieve the desired total number of points.  Input arrays are assumed to be
             monotonically increasing in X, and evenly spaced in X.
             </remarks>
             <seealso cref="T:Alt.GUI.ZedGraph.PointPairList"/>
             <seealso cref="T:Alt.GUI.ZedGraph.BasicArrayPointList"/>
             <seealso cref="T:Alt.GUI.ZedGraph.IPointList"/>
             <seealso cref="T:Alt.GUI.ZedGraph.IPointListEdit"/>
            
             <author> John Champion with mods by Christophe Holmes</author>
             <version> $Revision: 1.11 $ $Date: 2007-11-29 02:15:39 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.FilteredPointList._x">
            <summary>
            Instance of an array of x values
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.FilteredPointList._y">
            <summary>
            Instance of an array of x values
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.FilteredPointList._maxPts">
            <summary>
            This is the maximum number of points that you want to see in the filtered dataset
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.FilteredPointList._minBoundIndex">
            <summary>
            The index of the xMinBound above
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.FilteredPointList._maxBoundIndex">
            <summary>
            The index of the xMaxBound above
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.FilteredPointList.#ctor(System.Double[],System.Double[])">
            <summary>
            Constructor to initialize the PointPairList from two arrays of
            type double.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.FilteredPointList.#ctor(Alt.GUI.ZedGraph.FilteredPointList)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The FilteredPointList from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.FilteredPointList.Clone">
            <summary>
            Deep-copy clone routine
            </summary>
            <returns>A new, independent copy of the FilteredPointList</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.FilteredPointList.SetBounds(System.Double,System.Double,System.Int32)">
            <summary>
            Set the data bounds to the specified minimum, maximum, and point count.  Use values of
            min=double.MinValue and max=double.MaxValue to get the full range of data.  Use maxPts=-1
            to not limit the number of points.  Call this method anytime the zoom range is changed.
            </summary>
            <param name="min">The lower bound for the X data of interest</param>
            <param name="max">The upper bound for the X data of interest</param>
            <param name="maxPts">The maximum number of points allowed to be
            output by the filter</param>
        </member>
        <member name="P:Alt.GUI.ZedGraph.FilteredPointList.Item(System.Int32)">
            <summary>
            Indexer to access the specified <see cref="T:Alt.GUI.ZedGraph.PointPair"/> object by
            its ordinal position in the list.
            </summary>
            <remarks>
            Returns <see cref="F:Alt.GUI.ZedGraph.PointPairBase.Missing"/> for any value of <see paramref="index"/>
            that is outside of its corresponding array bounds.
            </remarks>
            <param name="index">The ordinal position (zero-based) of the
            <see cref="T:Alt.GUI.ZedGraph.PointPair"/> object to be accessed.</param>
            <value>A <see cref="T:Alt.GUI.ZedGraph.PointPair"/> object reference.</value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.FilteredPointList.Count">
            <summary>
            Returns the number of points according to the current state of the filter.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.FilteredPointList.MaxPts">
            <summary>
            Gets the desired number of filtered points to output.  You can set this value by
            calling <see cref="M:Alt.GUI.ZedGraph.FilteredPointList.SetBounds(System.Double,System.Double,System.Int32)"/>.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.FontSpec">
            <summary>
            The <see cref="T:Alt.GUI.ZedGraph.FontSpec"/> class is a generic font class that maintains the font family,
            attributes, colors, border and fill modes, font size, and angle information.
            This class can render text with a variety of alignment options using the
            <see cref="T:Alt.GUI.ZedGraph.AlignH"/> and <see cref="T:Alt.GUI.ZedGraph.AlignV"/> parameters in the
            <see cref="!:Draw(Graphics,PaneBase,string,float,float,AlignH,AlignV,float)"/> method.
            </summary>
            
            <author> John Champion </author>
            <version> $Revision: 3.24 $ $Date: 2007-01-25 07:56:08 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.FontSpec.schema">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.FontSpec._fontColor">
            <summary>
            Private field that stores the color of the font characters for this
            <see cref="T:Alt.GUI.ZedGraph.FontSpec"/>.  Use the public property <see cref="P:Alt.GUI.ZedGraph.FontSpec.FontColor"/>
            to access this value.
            </summary>
            <value>A system <see cref="!:System.Drawing.Color"/> reference.</value>
        </member>
        <member name="F:Alt.GUI.ZedGraph.FontSpec._family">
            <summary>
            Private field that stores the font family name for this <see cref="T:Alt.GUI.ZedGraph.FontSpec"/>.
            Use the public property <see cref="P:Alt.GUI.ZedGraph.FontSpec.Family"/> to access this value.
            </summary>
            <value>A text string with the font family name, e.g., "Arial"</value>
        </member>
        <member name="F:Alt.GUI.ZedGraph.FontSpec._isBold">
            <summary>
            Private field that determines whether this <see cref="T:Alt.GUI.ZedGraph.FontSpec"/> is
            drawn with bold typeface.
            Use the public property <see cref="P:Alt.GUI.ZedGraph.FontSpec.IsBold"/> to access this value.
            </summary>
            <value>A boolean value, true for bold, false for normal</value>
        </member>
        <member name="F:Alt.GUI.ZedGraph.FontSpec._isItalic">
            <summary>
            Private field that determines whether this <see cref="T:Alt.GUI.ZedGraph.FontSpec"/> is
            drawn with italic typeface.
            Use the public property <see cref="P:Alt.GUI.ZedGraph.FontSpec.IsItalic"/> to access this value.
            </summary>
            <value>A boolean value, true for italic, false for normal</value>
        </member>
        <member name="F:Alt.GUI.ZedGraph.FontSpec._isUnderline">
            <summary>
            Private field that determines whether this <see cref="T:Alt.GUI.ZedGraph.FontSpec"/> is
            drawn with underlined typeface.
            Use the public property <see cref="P:Alt.GUI.ZedGraph.FontSpec.IsUnderline"/> to access this value.
            </summary>
            <value>A boolean value, true for underline, false for normal</value>
        </member>
        <member name="F:Alt.GUI.ZedGraph.FontSpec._fill">
            <summary>
            Private field that stores the <see cref="T:Alt.GUI.ZedGraph.Fill"/> data for this
            <see cref="T:Alt.GUI.ZedGraph.FontSpec"/>.  Use the public property <see cref="P:Alt.GUI.ZedGraph.FontSpec.Fill"/> to
            access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.FontSpec._border">
            <summary>
            Private field that determines the properties of the border around the text.
            Use the public property <see cref="P:Alt.GUI.ZedGraph.FontSpec.Border"/> to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.FontSpec._angle">
            <summary>
            Private field that determines the angle at which this
            <see cref="T:Alt.GUI.ZedGraph.FontSpec"/> object is drawn.  Use the public property
            <see cref="P:Alt.GUI.ZedGraph.FontSpec.Angle"/> to access this value.
            </summary>
            <value>The angle of the font, measured in anti-clockwise degrees from
            horizontal.  Negative values are permitted.</value>
        </member>
        <member name="F:Alt.GUI.ZedGraph.FontSpec._stringAlignment">
            <summary>
            Private field that determines the alignment with which this
            <see cref="T:Alt.GUI.ZedGraph.FontSpec"/> object is drawn.  This alignment really only
            affects multi-line strings.  Use the public property
            <see cref="P:Alt.GUI.ZedGraph.FontSpec.StringAlignment"/> to access this value.
            </summary>
            <value>A <see cref="P:Alt.GUI.ZedGraph.FontSpec.StringAlignment"/> enumeration.</value>
        </member>
        <member name="F:Alt.GUI.ZedGraph.FontSpec._size">
            <summary>
            Private field that determines the size of the font for this
            <see cref="T:Alt.GUI.ZedGraph.FontSpec"/> object.  Use the public property
            <see cref="P:Alt.GUI.ZedGraph.FontSpec.Size"/> to access this value.
            </summary>
            <value>The size of the font, measured in points (1/72 inch).</value>
        </member>
        <member name="F:Alt.GUI.ZedGraph.FontSpec._font">
            <summary>
            Private field that stores a reference to the <see cref="T:Alt.Sketch.Font"/>
            object for this <see cref="T:Alt.GUI.ZedGraph.FontSpec"/>.  This font object will be at
            the actual drawn size <see cref="F:Alt.GUI.ZedGraph.FontSpec._scaledSize"/> according to the current
            size of the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>.  Use the public method
            <see cref="M:Alt.GUI.ZedGraph.FontSpec.GetFont(System.Single)"/> to access this font object.
            </summary>
            <value>A reference to a <see cref="T:Alt.Sketch.Font"/> object</value>
        </member>
        <member name="F:Alt.GUI.ZedGraph.FontSpec._isAntiAlias">
            <summary>
            Private field that determines if the <see cref="T:Alt.GUI.ZedGraph.FontSpec"/> will be
            displayed using anti-aliasing logic.
            Use the public property <see cref="P:Alt.GUI.ZedGraph.FontSpec.IsAntiAlias"/> to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.FontSpec._isDropShadow">
            <summary>
            Private field that determines if the <see cref="T:Alt.GUI.ZedGraph.FontSpec"/> will be
            displayed with a drop shadow.
            Use the public property <see cref="P:Alt.GUI.ZedGraph.FontSpec.IsDropShadow"/> to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.FontSpec._dropShadowColor">
            <summary>
            Private field that determines the color of the dropshadow for this
            <see cref="T:Alt.GUI.ZedGraph.FontSpec"/>.
            Use the public property <see cref="P:Alt.GUI.ZedGraph.FontSpec.DropShadowColor"/> to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.FontSpec._dropShadowAngle">
            <summary>
            Private field that determines the offset angle of the dropshadow for this
            <see cref="T:Alt.GUI.ZedGraph.FontSpec"/>.
            Use the public property <see cref="P:Alt.GUI.ZedGraph.FontSpec.DropShadowAngle"/> to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.FontSpec._dropShadowOffset">
            <summary>
            Private field that determines the offset distance of the dropshadow for this
            <see cref="T:Alt.GUI.ZedGraph.FontSpec"/>.
            Use the public property <see cref="P:Alt.GUI.ZedGraph.FontSpec.DropShadowOffset"/> to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.FontSpec._superScriptFont">
            <summary>
            Private field that stores a reference to the <see cref="T:Alt.Sketch.Font"/>
            object that will be used for superscripts.  This font object will be a
            fraction of the <see cref="T:Alt.GUI.ZedGraph.FontSpec"/> <see cref="F:Alt.GUI.ZedGraph.FontSpec._scaledSize"/>,
            based on the value of <see cref="F:Alt.GUI.ZedGraph.FontSpec.Default.SuperSize"/>.  This
            property is internal, and has no public access.
            </summary>
            <value>A reference to a <see cref="T:Alt.Sketch.Font"/> object</value>
        </member>
        <member name="F:Alt.GUI.ZedGraph.FontSpec._scaledSize">
            <summary>
            Private field that temporarily stores the scaled size of the font for this
            <see cref="T:Alt.GUI.ZedGraph.FontSpec"/> object.  This represents the actual on-screen
            size, rather than the <see cref="P:Alt.GUI.ZedGraph.FontSpec.Size"/> that represents the reference
            size for a "full-sized" <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>.
            </summary>
            <value>The size of the font, measured in points (1/72 inch).</value>
        </member>
        <member name="M:Alt.GUI.ZedGraph.FontSpec.#ctor">
            <summary>
            Construct a <see cref="T:Alt.GUI.ZedGraph.FontSpec"/> object with default properties.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.FontSpec.#ctor(System.String,System.Single,Alt.Sketch.Color,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Construct a <see cref="T:Alt.GUI.ZedGraph.FontSpec"/> object with the given properties.  All other properties
            are defaulted according to the values specified in the <see cref="T:Alt.GUI.ZedGraph.FontSpec.Default"/>
            default class.
            </summary>
            <param name="family">A text string representing the font family
            (default is "Arial")</param>
            <param name="size">A size of the font in points.  This size will be scaled
            based on the ratio of the <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/> dimension to the
            <see cref="P:Alt.GUI.ZedGraph.PaneBase.BaseDimension"/> of the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object. </param>
            <param name="color">The color with which to render the font</param>
            <param name="isBold">true for a bold typeface, false otherwise</param>
            <param name="isItalic">true for an italic typeface, false otherwise</param>
            <param name="isUnderline">true for an underlined font, false otherwise</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.FontSpec.#ctor(System.String,System.Single,Alt.Sketch.Color,System.Boolean,System.Boolean,System.Boolean,Alt.Sketch.Color,Alt.Sketch.Brush,Alt.GUI.ZedGraph.FillType)">
            <summary>
            Construct a <see cref="T:Alt.GUI.ZedGraph.FontSpec"/> object with the given properties.  All other properties
            are defaulted according to the values specified in the <see cref="T:Alt.GUI.ZedGraph.FontSpec.Default"/>
            default class.
            </summary>
            <param name="family">A text string representing the font family
            (default is "Arial")</param>
            <param name="size">A size of the font in points.  This size will be scaled
            based on the ratio of the <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/> dimension to the
            <see cref="P:Alt.GUI.ZedGraph.PaneBase.BaseDimension"/> of the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object. </param>
            <param name="color">The color with which to render the font</param>
            <param name="isBold">true for a bold typeface, false otherwise</param>
            <param name="isItalic">true for an italic typeface, false otherwise</param>
            <param name="isUnderline">true for an underlined font, false otherwise</param>
            <param name="fillColor">The <see cref="T:Alt.Sketch.Color"/> to use for filling in the text background</param>
            <param name="fillBrush">The <see cref="T:Alt.Sketch.Brush"/> to use for filling in the text background</param>
            <param name="fillType">The <see cref="T:Alt.GUI.ZedGraph.FillType"/> to use for the
            text background</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.FontSpec.#ctor(Alt.GUI.ZedGraph.FontSpec)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The FontSpec object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.FontSpec.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.FontSpec.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.FontSpec.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.FontSpec.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.FontSpec.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.FontSpec.Remake(System.Double,System.Double,System.Double@,Alt.Sketch.Font@)">
            <summary>
            Recreate the font based on a new scaled size.  The font
            will only be recreated if the scaled size has changed by
            at least 0.1 points.
            </summary>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <param name="size">The unscaled size of the font, in points</param>
            <param name="scaledSize">The scaled size of the font, in points</param>
            <param name="font">A reference to the <see cref="T:Alt.Sketch.Font"/> object</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.FontSpec.GetFont(System.Single)">
            <summary>
            Get the <see cref="T:Alt.Sketch.Font"/> class for the current scaled font.
            </summary>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <returns>Returns a reference to a <see cref="T:Alt.Sketch.Font"/> object
            with a size of <see cref="F:Alt.GUI.ZedGraph.FontSpec._scaledSize"/>, and font <see cref="P:Alt.GUI.ZedGraph.FontSpec.Family"/>.
            </returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.FontSpec.Draw(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.PaneBase,System.String,System.Double,System.Double,Alt.GUI.ZedGraph.AlignH,Alt.GUI.ZedGraph.AlignV,System.Double)">
            <summary>
            Render the specified <paramref name="text"/> to the specifed
            <see cref="T:Alt.Sketch.Graphics"/> device.  The text, border, and fill options
            will be rendered as required.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.PaneBase"/> object that is the parent or
            owner of this object.
            </param>
            <param name="text">A string value containing the text to be
            displayed.  This can be multiple lines, separated by newline ('\n')
            characters</param>
            <param name="x">The X location to display the text, in screen
            coordinates, relative to the horizontal (<see cref="T:Alt.GUI.ZedGraph.AlignH"/>)
            alignment parameter <paramref name="alignH"/></param>
            <param name="y">The Y location to display the text, in screen
            coordinates, relative to the vertical (<see cref="T:Alt.GUI.ZedGraph.AlignV"/>
            alignment parameter <paramref name="alignV"/></param>
            <param name="alignH">A horizontal alignment parameter specified
            using the <see cref="T:Alt.GUI.ZedGraph.AlignH"/> enum type</param>
            <param name="alignV">A vertical alignment parameter specified
            using the <see cref="T:Alt.GUI.ZedGraph.AlignV"/> enum type</param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.FontSpec.Draw(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.PaneBase,System.String,System.Double,System.Double,Alt.GUI.ZedGraph.AlignH,Alt.GUI.ZedGraph.AlignV,System.Double,Alt.Sketch.Size)">
            <summary>
            Render the specified <paramref name="text"/> to the specifed
            <see cref="T:Alt.Sketch.Graphics"/> device.  The text, border, and fill options
            will be rendered as required.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.PaneBase"/> object that is the parent or
            owner of this object.
            </param>
            <param name="text">A string value containing the text to be
            displayed.  This can be multiple lines, separated by newline ('\n')
            characters</param>
            <param name="x">The X location to display the text, in screen
            coordinates, relative to the horizontal (<see cref="T:Alt.GUI.ZedGraph.AlignH"/>)
            alignment parameter <paramref name="alignH"/></param>
            <param name="y">The Y location to display the text, in screen
            coordinates, relative to the vertical (<see cref="T:Alt.GUI.ZedGraph.AlignV"/>
            alignment parameter <paramref name="alignV"/></param>
            <param name="alignH">A horizontal alignment parameter specified
            using the <see cref="T:Alt.GUI.ZedGraph.AlignH"/> enum type</param>
            <param name="alignV">A vertical alignment parameter specified
            using the <see cref="T:Alt.GUI.ZedGraph.AlignV"/> enum type</param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <param name="layoutArea">The limiting area (<see cref="P:Alt.GUI.ZedGraph.FontSpec.Size"/>) into which the text
            must fit.  The actual rectangle may be smaller than this, but the text will be wrapped
            to accomodate the area.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.FontSpec.DrawTenPower(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,System.String,System.Double,System.Double,Alt.GUI.ZedGraph.AlignH,Alt.GUI.ZedGraph.AlignV,System.Double)">
            <summary>
            Render the specified <paramref name="text"/> to the specifed
            <see cref="T:Alt.Sketch.Graphics"/> device.  The text, border, and fill options
            will be rendered as required.  This special case method will show the
            specified text as a power of 10, using the <see cref="F:Alt.GUI.ZedGraph.FontSpec.Default.SuperSize"/>
            and <see cref="F:Alt.GUI.ZedGraph.FontSpec.Default.SuperShift"/>.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="text">A string value containing the text to be
            displayed.  This can be multiple lines, separated by newline ('\n')
            characters</param>
            <param name="x">The X location to display the text, in screen
            coordinates, relative to the horizontal (<see cref="T:Alt.GUI.ZedGraph.AlignH"/>)
            alignment parameter <paramref name="alignH"/></param>
            <param name="y">The Y location to display the text, in screen
            coordinates, relative to the vertical (<see cref="T:Alt.GUI.ZedGraph.AlignV"/>
            alignment parameter <paramref name="alignV"/></param>
            <param name="alignH">A horizontal alignment parameter specified
            using the <see cref="T:Alt.GUI.ZedGraph.AlignH"/> enum type</param>
            <param name="alignV">A vertical alignment parameter specified
            using the <see cref="T:Alt.GUI.ZedGraph.AlignV"/> enum type</param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.FontSpec.GetHeight(System.Double)">
            <summary>
            Get the height of the scaled font
            </summary>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <returns>The scaled font height, in pixels</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.FontSpec.GetWidth(Alt.Sketch.Graphics,System.Double)">
            <summary>
            Get the average character width of the scaled font.  The average width is
            based on the character 'x'
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <returns>The scaled font width, in pixels</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.FontSpec.GetWidth(Alt.Sketch.Graphics,System.String,System.Double)">
            <summary>
            Get the total width of the specified text string
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="text">The text string for which the width is to be calculated
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <returns>The scaled text width, in pixels</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.FontSpec.MeasureString(Alt.Sketch.Graphics,System.String,System.Double)">
            <summary>
            Get a <see cref="P:Alt.GUI.ZedGraph.FontSpec.Size"/> struct representing the width and height
            of the specified text string, based on the scaled font size
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="text">The text string for which the width is to be calculated
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <returns>The scaled text dimensions, in pixels, in the form of
            a <see cref="P:Alt.GUI.ZedGraph.FontSpec.Size"/> struct</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.FontSpec.MeasureString(Alt.Sketch.Graphics,System.String,System.Double,Alt.Sketch.Size)">
            <summary>
            Get a <see cref="P:Alt.GUI.ZedGraph.FontSpec.Size"/> struct representing the width and height
            of the specified text string, based on the scaled font size, and using
            the specified <see cref="P:Alt.GUI.ZedGraph.FontSpec.Size"/> as an outer limit.
            </summary>
            <remarks>
            This method will allow the text to wrap as necessary to fit the 
            <see paramref="layoutArea"/>.
            </remarks>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="text">The text string for which the width is to be calculated
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <param name="layoutArea">The limiting area (<see cref="P:Alt.GUI.ZedGraph.FontSpec.Size"/>) into which the text
            must fit.  The actual rectangle may be smaller than this, but the text will be wrapped
            to accomodate the area.</param>
            <returns>The scaled text dimensions, in pixels, in the form of
            a <see cref="P:Alt.GUI.ZedGraph.FontSpec.Size"/> struct</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.FontSpec.BoundingBox(Alt.Sketch.Graphics,System.String,System.Double)">
            <summary>
            Get a <see cref="P:Alt.GUI.ZedGraph.FontSpec.Size"/> struct representing the width and height
            of the bounding box for the specified text string, based on the scaled font size.
            </summary>
            <remarks>
            This routine differs from <see cref="!:MeasureString(Graphics,string,float)"/> in that it takes into
            account the rotation angle of the font, and gives the dimensions of the
            bounding box that encloses the text at the specified angle.
            </remarks>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="text">The text string for which the width is to be calculated
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <returns>The scaled text dimensions, in pixels, in the form of
            a <see cref="P:Alt.GUI.ZedGraph.FontSpec.Size"/> struct</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.FontSpec.BoundingBox(Alt.Sketch.Graphics,System.String,System.Double,Alt.Sketch.Size)">
            <summary>
            Get a <see cref="P:Alt.GUI.ZedGraph.FontSpec.Size"/> struct representing the width and height
            of the bounding box for the specified text string, based on the scaled font size.
            </summary>
            <remarks>
            This routine differs from <see cref="!:MeasureString(Graphics,string,float)"/> in that it takes into
            account the rotation angle of the font, and gives the dimensions of the
            bounding box that encloses the text at the specified angle.
            </remarks>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="text">The text string for which the width is to be calculated
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <param name="layoutArea">The limiting area (<see cref="P:Alt.GUI.ZedGraph.FontSpec.Size"/>) into which the text
            must fit.  The actual rectangle may be smaller than this, but the text will be wrapped
            to accomodate the area.</param>
            <returns>The scaled text dimensions, in pixels, in the form of
            a <see cref="P:Alt.GUI.ZedGraph.FontSpec.Size"/> struct</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.FontSpec.BoundingBoxTenPower(Alt.Sketch.Graphics,System.String,System.Double)">
            <summary>
            Get a <see cref="P:Alt.GUI.ZedGraph.FontSpec.Size"/> struct representing the width and height
            of the bounding box for the specified text string, based on the scaled font size.
            </summary>
            <remarks>
            This special case method will show the specified string as a power of 10,
            superscripted and downsized according to the
            <see cref="F:Alt.GUI.ZedGraph.FontSpec.Default.SuperSize"/> and <see cref="F:Alt.GUI.ZedGraph.FontSpec.Default.SuperShift"/>.
            This routine differs from <see cref="!:MeasureString(Graphics,string,float)"/> in that it takes into
            account the rotation angle of the font, and gives the dimensions of the
            bounding box that encloses the text at the specified angle.
            </remarks>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="text">The text string for which the width is to be calculated
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <returns>The scaled text dimensions, in pixels, in the form of
            a <see cref="P:Alt.GUI.ZedGraph.FontSpec.Size"/> struct</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.FontSpec.PointInBox(Alt.Sketch.Point,Alt.Sketch.Graphics,System.String,System.Double,System.Double,Alt.GUI.ZedGraph.AlignH,Alt.GUI.ZedGraph.AlignV,System.Double)">
            <summary>
            Determines if the specified screen point lies within the bounding box of
            the text, taking into account alignment and rotation parameters.
            </summary>
            <param name="pt">The screen point, in pixel units</param>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="text">A string value containing the text to be
            displayed.  This can be multiple lines, separated by newline ('\n')
            characters</param>
            <param name="x">The X location to display the text, in screen
            coordinates, relative to the horizontal (<see cref="T:Alt.GUI.ZedGraph.AlignH"/>)
            alignment parameter <paramref name="alignH"/></param>
            <param name="y">The Y location to display the text, in screen
            coordinates, relative to the vertical (<see cref="T:Alt.GUI.ZedGraph.AlignV"/>
            alignment parameter <paramref name="alignV"/></param>
            <param name="alignH">A horizontal alignment parameter specified
            using the <see cref="T:Alt.GUI.ZedGraph.AlignH"/> enum type</param>
            <param name="alignV">A vertical alignment parameter specified
            using the <see cref="T:Alt.GUI.ZedGraph.AlignV"/> enum type</param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <returns>true if the point lies within the bounding box, false otherwise</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.FontSpec.PointInBox(Alt.Sketch.Point,Alt.Sketch.Graphics,System.String,System.Double,System.Double,Alt.GUI.ZedGraph.AlignH,Alt.GUI.ZedGraph.AlignV,System.Double,Alt.Sketch.Size)">
            <summary>
            Determines if the specified screen point lies within the bounding box of
            the text, taking into account alignment and rotation parameters.
            </summary>
            <param name="pt">The screen point, in pixel units</param>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="text">A string value containing the text to be
            displayed.  This can be multiple lines, separated by newline ('\n')
            characters</param>
            <param name="x">The X location to display the text, in screen
            coordinates, relative to the horizontal (<see cref="T:Alt.GUI.ZedGraph.AlignH"/>)
            alignment parameter <paramref name="alignH"/></param>
            <param name="y">The Y location to display the text, in screen
            coordinates, relative to the vertical (<see cref="T:Alt.GUI.ZedGraph.AlignV"/>
            alignment parameter <paramref name="alignV"/></param>
            <param name="alignH">A horizontal alignment parameter specified
            using the <see cref="T:Alt.GUI.ZedGraph.AlignH"/> enum type</param>
            <param name="alignV">A vertical alignment parameter specified
            using the <see cref="T:Alt.GUI.ZedGraph.AlignV"/> enum type</param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <param name="layoutArea">The limiting area (<see cref="P:Alt.GUI.ZedGraph.FontSpec.Size"/>) into which the text
            must fit.  The actual rectangle may be smaller than this, but the text will be wrapped
            to accomodate the area.</param>
            <returns>true if the point lies within the bounding box, false otherwise</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.FontSpec.GetBox(Alt.Sketch.Graphics,System.String,System.Double,System.Double,Alt.GUI.ZedGraph.AlignH,Alt.GUI.ZedGraph.AlignV,System.Double,Alt.Sketch.Size)">
            <summary>
            Returns a polygon that defines the bounding box of
            the text, taking into account alignment and rotation parameters.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="text">A string value containing the text to be
            displayed.  This can be multiple lines, separated by newline ('\n')
            characters</param>
            <param name="x">The X location to display the text, in screen
            coordinates, relative to the horizontal (<see cref="T:Alt.GUI.ZedGraph.AlignH"/>)
            alignment parameter <paramref name="alignH"/></param>
            <param name="y">The Y location to display the text, in screen
            coordinates, relative to the vertical (<see cref="T:Alt.GUI.ZedGraph.AlignV"/>
            alignment parameter <paramref name="alignV"/></param>
            <param name="alignH">A horizontal alignment parameter specified
            using the <see cref="T:Alt.GUI.ZedGraph.AlignH"/> enum type</param>
            <param name="alignV">A vertical alignment parameter specified
            using the <see cref="T:Alt.GUI.ZedGraph.AlignV"/> enum type</param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <param name="layoutArea">The limiting area (<see cref="P:Alt.GUI.ZedGraph.FontSpec.Size"/>) into which the text
            must fit.  The actual rectangle may be smaller than this, but the text will be wrapped
            to accomodate the area.</param>
            <returns>A polygon of 4 points defining the area of this text</returns>
        </member>
        <member name="P:Alt.GUI.ZedGraph.FontSpec.FontColor">
            <summary>
            The color of the font characters for this <see cref="T:Alt.GUI.ZedGraph.FontSpec"/>.
            Note that the border and background
            colors are set using the <see cref="P:Alt.GUI.ZedGraph.LineBase.Color"/> and
            <see cref="P:Alt.GUI.ZedGraph.Fill.Color"/> properties, respectively.
            </summary>
            <value>A system <see cref="!:System.Drawing.Color"/> reference.</value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.FontSpec.Family">
            <summary>
            The font family name for this <see cref="T:Alt.GUI.ZedGraph.FontSpec"/>.
            </summary>
            <value>A text string with the font family name, e.g., "Arial"</value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.FontSpec.IsBold">
            <summary>
            Determines whether this <see cref="T:Alt.GUI.ZedGraph.FontSpec"/> is
            drawn with bold typeface.
            </summary>
            <value>A boolean value, true for bold, false for normal</value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.FontSpec.IsItalic">
            <summary>
            Determines whether this <see cref="T:Alt.GUI.ZedGraph.FontSpec"/> is
            drawn with italic typeface.
            </summary>
            <value>A boolean value, true for italic, false for normal</value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.FontSpec.IsUnderline">
            <summary>
            Determines whether this <see cref="T:Alt.GUI.ZedGraph.FontSpec"/> is
            drawn with underlined typeface.
            </summary>
            <value>A boolean value, true for underline, false for normal</value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.FontSpec.Angle">
            <summary>
            The angle at which this <see cref="T:Alt.GUI.ZedGraph.FontSpec"/> object is drawn.
            </summary>
            <value>The angle of the font, measured in anti-clockwise degrees from
            horizontal.  Negative values are permitted.</value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.FontSpec.StringAlignment">
            <summary>
            Determines the alignment with which this
            <see cref="T:Alt.GUI.ZedGraph.FontSpec"/> object is drawn.  This alignment really only
            affects multi-line strings.
            </summary>
            <value>A <see cref="P:Alt.GUI.ZedGraph.FontSpec.StringAlignment"/> enumeration.</value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.FontSpec.Size">
            <summary>
            The size of the font for this <see cref="T:Alt.GUI.ZedGraph.FontSpec"/> object.
            </summary>
            <value>The size of the font, measured in points (1/72 inch).</value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.FontSpec.Border">
            <summary>
            Gets or sets the <see cref="P:Alt.GUI.ZedGraph.FontSpec.Border"/> class used to draw the border border
            around this text.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.FontSpec.Fill">
            <summary>
            Gets or sets the <see cref="T:Alt.GUI.ZedGraph.Fill"/> data for this
            <see cref="T:Alt.GUI.ZedGraph.FontSpec"/>, which controls how the background
            behind the text is filled.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.FontSpec.IsAntiAlias">
            <summary>
            Gets or sets a value that determines if the <see cref="T:Alt.GUI.ZedGraph.FontSpec"/> will be
            drawn using anti-aliasing logic within GDI+.
            </summary>
            <remarks>
            If this property is set to true, it will override the current setting of
            <see cref="P:Alt.Sketch.Graphics.SmoothingMode"/> by setting the value temporarily to
            <see cref="F:Alt.Sketch.SmoothingMode.HighQuality"/>.  If this property is set to false,
            the the current setting of <see cref="P:Alt.Sketch.Graphics.SmoothingMode"/> will be
            left as-is.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.FontSpec.IsDropShadow">
            <summary>
            Gets or sets a value that determines if the <see cref="T:Alt.GUI.ZedGraph.FontSpec"/> will be
            displayed with a drop shadow.
            </summary>
            <seealso cref="P:Alt.GUI.ZedGraph.FontSpec.DropShadowColor"/>
            <seealso cref="P:Alt.GUI.ZedGraph.FontSpec.DropShadowAngle"/>
            <seealso cref="P:Alt.GUI.ZedGraph.FontSpec.DropShadowOffset"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.FontSpec.DropShadowColor">
            <summary>
            Gets or sets the color of the drop shadow for this <see cref="T:Alt.GUI.ZedGraph.FontSpec"/>.
            </summary>
            <remarks>
            This value only applies if <see cref="P:Alt.GUI.ZedGraph.FontSpec.IsDropShadow"/> is true.
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.FontSpec.IsDropShadow"/>
            <seealso cref="P:Alt.GUI.ZedGraph.FontSpec.DropShadowAngle"/>
            <seealso cref="P:Alt.GUI.ZedGraph.FontSpec.DropShadowOffset"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.FontSpec.DropShadowAngle">
            <summary>
            Gets or sets the offset angle of the drop shadow for this <see cref="T:Alt.GUI.ZedGraph.FontSpec"/>.
            </summary>
            <remarks>
            This value only applies if <see cref="P:Alt.GUI.ZedGraph.FontSpec.IsDropShadow"/> is true.
            </remarks>
            <value>The angle, measured in anti-clockwise degrees from
            horizontal.  Negative values are permitted.</value>
            <seealso cref="P:Alt.GUI.ZedGraph.FontSpec.IsDropShadow"/>
            <seealso cref="P:Alt.GUI.ZedGraph.FontSpec.DropShadowColor"/>
            <seealso cref="P:Alt.GUI.ZedGraph.FontSpec.DropShadowOffset"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.FontSpec.DropShadowOffset">
            <summary>
            Gets or sets the offset distance of the drop shadow for this <see cref="T:Alt.GUI.ZedGraph.FontSpec"/>.
            </summary>
            <remarks>
            This value only applies if <see cref="P:Alt.GUI.ZedGraph.FontSpec.IsDropShadow"/> is true.
            </remarks>
            <value>The offset distance, measured as a fraction of the scaled font height.</value>
            <seealso cref="P:Alt.GUI.ZedGraph.FontSpec.IsDropShadow"/>
            <seealso cref="P:Alt.GUI.ZedGraph.FontSpec.DropShadowColor"/>
            <seealso cref="P:Alt.GUI.ZedGraph.FontSpec.DropShadowAngle"/>
        </member>
        <member name="T:Alt.GUI.ZedGraph.FontSpec.Default">
            <summary>
            A simple struct that defines the
            default property values for the <see cref="T:Alt.GUI.ZedGraph.FontSpec"/> class.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.FontSpec.Default.SuperSize">
            <summary>
            The default size fraction of the superscript font, expressed as a fraction
            of the size of the main font.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.FontSpec.Default.SuperShift">
            <summary>
            The default shift fraction of the superscript, expressed as a
            fraction of the superscripted character height.  This is the height
            above the main font (a zero shift means the main font and the superscript
            font have the tops aligned).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.FontSpec.Default.FillColor">
            <summary>
            The default color for filling in the background of the text block
            (<see cref="P:Alt.GUI.ZedGraph.Fill.Color"/> property).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.FontSpec.Default.FillBrush">
            <summary>
            The default custom brush for filling in this <see cref="T:Alt.GUI.ZedGraph.FontSpec"/>
            (<see cref="P:Alt.GUI.ZedGraph.Fill.Brush"/> property).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.FontSpec.Default.FillType">
            <summary>
            The default fill mode for this <see cref="T:Alt.GUI.ZedGraph.FontSpec"/>
            (<see cref="P:Alt.GUI.ZedGraph.Fill.Type"/> property).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.FontSpec.Default.StringAlignment">
            <summary>
            Default value for the alignment with which this
            <see cref="T:Alt.GUI.ZedGraph.FontSpec"/> object is drawn.  This alignment really only
            affects multi-line strings.
            </summary>
            <value>A <see cref="F:Alt.GUI.ZedGraph.FontSpec.Default.StringAlignment"/> enumeration.</value>
        </member>
        <member name="F:Alt.GUI.ZedGraph.FontSpec.Default.IsDropShadow">
            <summary>
            Default value for <see cref="P:Alt.GUI.ZedGraph.FontSpec.IsDropShadow"/>, which determines
            if the drop shadow is displayed for this <see cref="T:Alt.GUI.ZedGraph.FontSpec"/>.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.FontSpec.Default.IsAntiAlias">
            <summary>
            Default value for <see cref="P:Alt.GUI.ZedGraph.FontSpec.IsAntiAlias"/>, which determines
            if anti-aliasing logic is used for this <see cref="T:Alt.GUI.ZedGraph.FontSpec"/>.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.FontSpec.Default.DropShadowColor">
            <summary>
            Default value for <see cref="P:Alt.GUI.ZedGraph.FontSpec.DropShadowColor"/>, which determines
            the color of the drop shadow for this <see cref="T:Alt.GUI.ZedGraph.FontSpec"/>.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.FontSpec.Default.DropShadowAngle">
            <summary>
            Default value for <see cref="P:Alt.GUI.ZedGraph.FontSpec.DropShadowAngle"/>, which determines
            the offset angle of the drop shadow for this <see cref="T:Alt.GUI.ZedGraph.FontSpec"/>.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.FontSpec.Default.DropShadowOffset">
            <summary>
            Default value for <see cref="P:Alt.GUI.ZedGraph.FontSpec.DropShadowOffset"/>, which determines
            the offset distance of the drop shadow for this <see cref="T:Alt.GUI.ZedGraph.FontSpec"/>.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.GasGaugeNeedle">
            <summary>
            A class representing a needle on the GasGuage chart
            <see cref="T:Alt.GUI.ZedGraph.GasGaugeNeedle"/>s.
            </summary>
            <author> Jay Mistry </author>
            <version> $Revision: 1.2 $ $Date: 2007-08-11 14:37:47 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GasGaugeNeedle.schema2">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GasGaugeNeedle._needleValue">
            <summary>
            Value of this needle
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GasGaugeNeedle._needleWidth">
            <summary>
            Width of the line being drawn
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GasGaugeNeedle._color">
            <summary>
            Color of the needle line
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GasGaugeNeedle._sweepAngle">
            <summary>
            Internally calculated angle that places this needle relative to the MinValue and
            MaxValue of 180 degree GasGuage
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GasGaugeNeedle._fill">
            <summary>
            Private field that stores the <see cref="T:Alt.GUI.ZedGraph.Fill"/> data for this
            <see cref="T:Alt.GUI.ZedGraph.GasGaugeNeedle"/>. Use the public property <see cref="P:Alt.GUI.ZedGraph.GasGaugeNeedle.Fill"/> to
            access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GasGaugeNeedle._labelDetail">
            <summary>
            A <see cref="T:Alt.GUI.ZedGraph.TextObj"/> which will customize the label display of this
            <see cref="T:Alt.GUI.ZedGraph.GasGaugeNeedle"/>
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GasGaugeNeedle._border">
            <summary>
            Private field that stores the <see cref="P:Alt.GUI.ZedGraph.GasGaugeNeedle.Border"/> class that defines the
            properties of the border around this <see cref="T:Alt.GUI.ZedGraph.GasGaugeNeedle"/>. Use the public
            property <see cref="P:Alt.GUI.ZedGraph.GasGaugeNeedle.Border"/> to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GasGaugeNeedle._boundingRectangle">
            <summary>
            The bounding rectangle for this <see cref="T:Alt.GUI.ZedGraph.GasGaugeNeedle"/>.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GasGaugeNeedle._slicePath">
            <summary>
            Private field to hold the GraphicsPath of this <see cref="T:Alt.GUI.ZedGraph.GasGaugeNeedle"/> to be
            used for 'hit testing'.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GasGaugeNeedle.#ctor(System.String,System.Double,Alt.Sketch.Color)">
            <summary>
            Create a new <see cref="T:Alt.GUI.ZedGraph.GasGaugeNeedle"/>
            </summary>
            <param name="label">The value associated with this <see cref="T:Alt.GUI.ZedGraph.GasGaugeNeedle"/>
            instance.</param>
            <param name="color">The display color for this <see cref="T:Alt.GUI.ZedGraph.GasGaugeNeedle"/>
            instance.</param>
            <param name="val">The value of this <see cref="T:Alt.GUI.ZedGraph.GasGaugeNeedle"/>.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GasGaugeNeedle.#ctor(Alt.GUI.ZedGraph.GasGaugeNeedle)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="ggn">The <see cref="T:Alt.GUI.ZedGraph.GasGaugeNeedle"/> object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GasGaugeNeedle.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.GasGaugeNeedle.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GasGaugeNeedle.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GasGaugeNeedle.IsZIncluded(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Gets a flag indicating if the Z data range should be included in the axis scaling calculations.
            </summary>
            <param name="pane">The parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> of this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>.
            </param>
            <value>true if the Z data are included, false otherwise</value>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GasGaugeNeedle.IsXIndependent(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Gets a flag indicating if the X axis is the independent axis for this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>
            </summary>
            <param name="pane">The parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> of this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>.
            </param>
            <value>true if the X axis is independent, false otherwise</value>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GasGaugeNeedle.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GasGaugeNeedle.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GasGaugeNeedle.Draw(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,System.Int32,System.Double)">
            <summary>
            Do all rendering associated with this <see cref="T:Alt.GUI.ZedGraph.GasGaugeNeedle"/> item to the specified
            <see cref="T:Alt.Sketch.Graphics"/> device. This method is normally only
            called by the Draw method of the parent <see cref="T:Alt.GUI.ZedGraph.CurveList"/>
            collection object.
            </summary>
            <param name="g">
            A graphic device object to be drawn into. This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="pos">Not used for rendering GasGaugeNeedle</param>
            <param name="scaleFactor">Not used for rendering GasGaugeNeedle</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GasGaugeNeedle.DrawLegendKey(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,Alt.Sketch.Rect,System.Double)">
            <summary>
            Render the label for this <see cref="T:Alt.GUI.ZedGraph.GasGaugeNeedle"/>.
            </summary>
            <param name="g">
            A graphic device object to be drawn into. This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A graphic device object to be drawn into. This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="rect">Bounding rectangle for this <see cref="T:Alt.GUI.ZedGraph.GasGaugeNeedle"/>.</param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects. This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param> 
        </member>
        <member name="M:Alt.GUI.ZedGraph.GasGaugeNeedle.GetCoords(Alt.GUI.ZedGraph.GraphPane,System.Int32,System.String@)">
            <summary>
            Determine the coords for the rectangle associated with a specified point for 
            this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>
            </summary>
            <param name="pane">The <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> to which this curve belongs</param>
            <param name="i">The index of the point of interest</param>
            <param name="coords">A list of coordinates that represents the "rect" for
            this point (used in an html AREA tag)</param>
            <returns>true if it's a valid point, false otherwise</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GasGaugeNeedle.CalculateGasGaugeParameters(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Calculate the values needed to properly display this <see cref="T:Alt.GUI.ZedGraph.GasGaugeNeedle"/>.
            </summary>
            <param name="pane">
            A graphic device object to be drawn into. This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GasGaugeNeedle.CalcRectangle(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,System.Double,Alt.Sketch.Rect)">
            <summary>
            Calculate the <see cref="T:Alt.Sketch.Rect"/> that will be used to define the bounding rectangle of
            the GasGaugeNeedle.
            </summary>
            <remarks>This rectangle always lies inside of the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>, and it is
            normally a square so that the pie itself is not oval-shaped.</remarks>
            <param name="g">
            A graphic device object to be drawn into. This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects. This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param> 
            <param name="chartRect">The <see cref="T:Alt.Sketch.Rect"/> (normally the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>)
            that bounds this pie.</param>
            <returns></returns>
        </member>
        <member name="P:Alt.GUI.ZedGraph.GasGaugeNeedle.NeedleWidth">
            <summary>
            Gets or Sets the NeedleWidth of this <see cref="T:Alt.GUI.ZedGraph.GasGaugeNeedle"/>
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.GasGaugeNeedle.Border">
            <summary>
            Gets or Sets the Border of this <see cref="T:Alt.GUI.ZedGraph.GasGaugeNeedle"/>
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.GasGaugeNeedle.SlicePath">
            <summary>
            Gets or Sets the SlicePath of this <see cref="T:Alt.GUI.ZedGraph.GasGaugeNeedle"/>
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.GasGaugeNeedle.LabelDetail">
            <summary>
            Gets or Sets the LableDetail of this <see cref="T:Alt.GUI.ZedGraph.GasGaugeNeedle"/>
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.GasGaugeNeedle.NeedleColor">
            <summary>
            Gets or Sets the NeedelColor of this <see cref="T:Alt.GUI.ZedGraph.GasGaugeNeedle"/>
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.GasGaugeNeedle.Fill">
            <summary>
            Gets or Sets the Fill of this <see cref="T:Alt.GUI.ZedGraph.GasGaugeNeedle"/>
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.GasGaugeNeedle.SweepAngle">
            <summary>
            Private property that Gets or Sets the SweepAngle of this <see cref="T:Alt.GUI.ZedGraph.GasGaugeNeedle"/>
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.GasGaugeNeedle.NeedleValue">
            <summary>
            Gets or Sets the NeedleValue of this <see cref="T:Alt.GUI.ZedGraph.GasGaugeNeedle"/>
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.GasGaugeNeedle.Default">
            <summary>
            Specify the default property values for the <see cref="T:Alt.GUI.ZedGraph.GasGaugeNeedle"/> class.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GasGaugeNeedle.Default.NeedleWidth">
            <summary>
            The default width of the gas gauge needle.  Units are points, scaled according
            to <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/>
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GasGaugeNeedle.Default.BorderWidth">
            <summary>
            The default pen width to be used for drawing the border around the GasGaugeNeedle
            (<see cref="P:Alt.GUI.ZedGraph.LineBase.Width"/> property). Units are points.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GasGaugeNeedle.Default.IsBorderVisible">
            <summary>
            The default border mode for GasGaugeNeedle (<see cref="P:Alt.GUI.ZedGraph.LineBase.IsVisible"/>
            property).
            true to display frame around GasGaugeNeedle, false otherwise
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GasGaugeNeedle.Default.BorderColor">
            <summary>
            The default color for drawing frames around GasGaugeNeedle
            (<see cref="P:Alt.GUI.ZedGraph.LineBase.Color"/> property).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GasGaugeNeedle.Default.FillType">
            <summary>
            The default fill type for filling the GasGaugeNeedle.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GasGaugeNeedle.Default.FillColor">
            <summary>
            The default color for filling in the GasGaugeNeedle
            (<see cref="P:Alt.GUI.ZedGraph.Fill.Color"/> property).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GasGaugeNeedle.Default.FillBrush">
            <summary>
            The default custom brush for filling in the GasGaugeNeedle.
            (<see cref="P:Alt.GUI.ZedGraph.Fill.Brush"/> property).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GasGaugeNeedle.Default.isVisible">
             <summary>
            Default value for controlling <see cref="T:Alt.GUI.ZedGraph.GasGaugeNeedle"/> display.
             </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GasGaugeNeedle.Default.FontSize">
            <summary>
            The default font size for <see cref="P:Alt.GUI.ZedGraph.GasGaugeNeedle.LabelDetail"/> entries
            (<see cref="P:Alt.GUI.ZedGraph.FontSpec.Size"/> property). Units are
            in points (1/72 inch).
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.GasGaugeRegion">
            <summary>
            A class representing a region on the GasGuage chart
            <see cref="T:Alt.GUI.ZedGraph.GasGaugeRegion"/>s.
            </summary>
            <author> Jay Mistry </author>
            <version> $Revision: 1.2 $ $Date: 2007-07-30 05:26:23 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GasGaugeRegion.schema2">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GasGaugeRegion._minValue">
            <summary>
            Defines the minimum value of this <see cref="T:Alt.GUI.ZedGraph.GasGaugeRegion"/>
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GasGaugeRegion._maxValue">
            <summary>
            Defines the maximum value of this <see cref="T:Alt.GUI.ZedGraph.GasGaugeRegion"/>
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GasGaugeRegion._color">
            <summary>
            Defines the Color of this <see cref="T:Alt.GUI.ZedGraph.GasGaugeRegion"/>
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GasGaugeRegion._startAngle">
            <summary>
            Internally calculated; Start angle of this pie that defines this <see cref="T:Alt.GUI.ZedGraph.GasGaugeRegion"/>
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GasGaugeRegion._sweepAngle">
            <summary>
            Internally calculated; Sweep angle of this pie that defines this <see cref="T:Alt.GUI.ZedGraph.GasGaugeRegion"/>
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GasGaugeRegion._fill">
            <summary>
            Private	field	that stores the	<see cref="T:Alt.GUI.ZedGraph.Fill"/> data for this
            <see cref="T:Alt.GUI.ZedGraph.GasGaugeRegion"/>.	 Use the public property <see cref="P:Alt.GUI.ZedGraph.GasGaugeRegion.Fill"/> to
            access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GasGaugeRegion._labelDetail">
            <summary>
            A <see cref="T:Alt.GUI.ZedGraph.TextObj"/> which will customize the label display of this
            <see cref="T:Alt.GUI.ZedGraph.GasGaugeRegion"/>
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GasGaugeRegion._border">
            <summary>
            Private	field	that stores the	<see cref="P:Alt.GUI.ZedGraph.GasGaugeRegion.Border"/> class that defines	the
            properties of the	border around	this <see cref="T:Alt.GUI.ZedGraph.GasGaugeRegion"/>. Use the public
            property	<see cref="P:Alt.GUI.ZedGraph.GasGaugeRegion.Border"/> to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GasGaugeRegion._boundingRectangle">
            <summary>
            The bounding rectangle for this <see cref="T:Alt.GUI.ZedGraph.GasGaugeRegion"/>.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GasGaugeRegion._slicePath">
            <summary>
            Private field to hold the GraphicsPath of this <see cref="T:Alt.GUI.ZedGraph.GasGaugeRegion"/> to be
            used for 'hit testing'.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GasGaugeRegion.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GasGaugeRegion.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GasGaugeRegion.#ctor(System.String,System.Double,System.Double,Alt.Sketch.Color)">
            <summary>
            Create a new <see cref="T:Alt.GUI.ZedGraph.GasGaugeRegion"/>
            </summary>
            <param name="label">The value associated with this <see cref="T:Alt.GUI.ZedGraph.GasGaugeRegion"/> instance.</param>
            <param name="color">The display color for this <see cref="T:Alt.GUI.ZedGraph.GasGaugeRegion"/> instance.</param>
            <param name="minVal">The minimum value of this <see cref="T:Alt.GUI.ZedGraph.GasGaugeNeedle"/>.</param>
            <param name="maxVal">The maximum value of this <see cref="T:Alt.GUI.ZedGraph.GasGaugeNeedle"/>.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GasGaugeRegion.#ctor(Alt.GUI.ZedGraph.GasGaugeRegion)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="ggr">The <see cref="T:Alt.GUI.ZedGraph.GasGaugeRegion"/> object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GasGaugeRegion.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.GasGaugeRegion.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GasGaugeRegion.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GasGaugeRegion.IsZIncluded(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Gets a flag indicating if the Z data range should be included in the axis scaling calculations.
            </summary>
            <param name="pane">The parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> of this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>.
            </param>
            <value>true if the Z data are included, false otherwise</value>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GasGaugeRegion.IsXIndependent(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Gets a flag indicating if the X axis is the independent axis for this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>
            </summary>
            <param name="pane">The parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> of this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>.
            </param>
            <value>true if the X axis is independent, false otherwise</value>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GasGaugeRegion.Draw(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,System.Int32,System.Double)">
            <summary>
            Do all rendering associated with this <see cref="T:Alt.GUI.ZedGraph.GasGaugeRegion"/> item to the specified
            <see cref="T:Alt.Sketch.Graphics"/> device. This method is normally only
            called by the Draw method of the parent <see cref="T:Alt.GUI.ZedGraph.CurveList"/>
            collection object.
            </summary>
            <param name="g">
            A graphic device object to be drawn into. This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="pos">Not used for rendering GasGaugeNeedle</param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects. This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>	
        </member>
        <member name="M:Alt.GUI.ZedGraph.GasGaugeRegion.DrawLegendKey(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,Alt.Sketch.Rect,System.Double)">
            <summary>
            Render the label for this <see cref="T:Alt.GUI.ZedGraph.GasGaugeRegion"/>.
            </summary>
            <param name="g">
            A graphic device object to be drawn into. This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A graphic device object to be drawn into. This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="rect">Bounding rectangle for this <see cref="T:Alt.GUI.ZedGraph.GasGaugeRegion"/>.</param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects. This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>		
        </member>
        <member name="M:Alt.GUI.ZedGraph.GasGaugeRegion.GetCoords(Alt.GUI.ZedGraph.GraphPane,System.Int32,System.String@)">
            <summary>
            Determine the coords for the rectangle associated with a specified point for 
            this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>
            </summary>
            <param name="pane">The <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> to which this curve belongs</param>
            <param name="i">The index of the point of interest</param>
            <param name="coords">A list of coordinates that represents the "rect" for
            this point (used in an html AREA tag)</param>
            <returns>true if it's a valid point, false otherwise</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GasGaugeRegion.CalculateGasGuageParameters(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Calculate the values needed to properly display this <see cref="T:Alt.GUI.ZedGraph.GasGaugeRegion"/>.
            </summary>
            <param name="pane">
            A graphic device object to be drawn into. This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GasGaugeRegion.CalcRectangle(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,System.Double,Alt.Sketch.Rect)">
            <summary>
            Calculate the <see cref="T:Alt.Sketch.Rect"/> that will be used to define the bounding rectangle of
            the GasGaugeNeedle.
            </summary>
            <remarks>This rectangle always lies inside of the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>, and it is
            normally a square so that the pie itself is not oval-shaped.</remarks>
            <param name="g">
            A graphic device object to be drawn into. This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects. This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>				
            <param name="chartRect">The <see cref="T:Alt.Sketch.Rect"/> (normally the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>)
            that bounds this pie.</param>
            <returns></returns>
        </member>
        <member name="P:Alt.GUI.ZedGraph.GasGaugeRegion.SlicePath">
            <summary>
            Gets or sets the SlicePath of this <see cref="T:Alt.GUI.ZedGraph.GasGaugeRegion"/>
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.GasGaugeRegion.LabelDetail">
            <summary>
            Gets or sets the LabelDetail of this <see cref="T:Alt.GUI.ZedGraph.GasGaugeRegion"/>
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.GasGaugeRegion.Border">
            <summary>
            Gets or sets the Border of this <see cref="T:Alt.GUI.ZedGraph.GasGaugeRegion"/>
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.GasGaugeRegion.RegionColor">
            <summary>
            Gets or sets the RegionColor of this <see cref="T:Alt.GUI.ZedGraph.GasGaugeRegion"/>
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.GasGaugeRegion.Fill">
            <summary>
            Gets or sets the Fill of this <see cref="T:Alt.GUI.ZedGraph.GasGaugeRegion"/>
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.GasGaugeRegion.SweepAngle">
            <summary>
            Gets or sets the SweepAngle of this <see cref="T:Alt.GUI.ZedGraph.GasGaugeRegion"/>
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.GasGaugeRegion.StartAngle">
            <summary>
            Gets or sets the StartAngle of this <see cref="T:Alt.GUI.ZedGraph.GasGaugeRegion"/>
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.GasGaugeRegion.MinValue">
            <summary>
            Gets or sets the MinValue of this <see cref="T:Alt.GUI.ZedGraph.GasGaugeRegion"/>
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.GasGaugeRegion.MaxValue">
            <summary>
            Gets or sets the MaxValue of this <see cref="T:Alt.GUI.ZedGraph.GasGaugeRegion"/>
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.GasGaugeRegion.Default">
            <summary>
            Specify the default property values for the <see cref="T:Alt.GUI.ZedGraph.GasGaugeRegion"/> class.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GasGaugeRegion.Default.BorderWidth">
            <summary>
            The default border pen width for the <see cref="T:Alt.GUI.ZedGraph.GasGaugeRegion"/>
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GasGaugeRegion.Default.FillType">
            <summary>
            The default fill type for the <see cref="T:Alt.GUI.ZedGraph.GasGaugeRegion"/>
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GasGaugeRegion.Default.IsBorderVisible">
            <summary>
            The default value for the visibility of the <see cref="T:Alt.GUI.ZedGraph.GasGaugeRegion"/> border.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GasGaugeRegion.Default.BorderColor">
            <summary>
            The default value for the color of the <see cref="T:Alt.GUI.ZedGraph.GasGaugeRegion"/> border
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GasGaugeRegion.Default.FillColor">
            <summary>
            The default value for the color of the <see cref="T:Alt.GUI.ZedGraph.GasGaugeRegion"/> fill
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GasGaugeRegion.Default.FillBrush">
            <summary>
            The default value for the fill brush of the <see cref="T:Alt.GUI.ZedGraph.GasGaugeRegion"/>
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GasGaugeRegion.Default.isVisible">
            <summary>
            The default value for the visibility of the <see cref="T:Alt.GUI.ZedGraph.GasGaugeRegion"/> fill.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GasGaugeRegion.Default.FontSize">
            <summary>
            The default value for the font size of the <see cref="T:Alt.GUI.ZedGraph.GasGaugeRegion"/> labels.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.GraphObjList">
            <summary>
            A collection class containing a list of <see cref="T:Alt.GUI.ZedGraph.TextObj"/> objects
            to be displayed on the graph.
            </summary>
            
            <author> John Champion </author>
            <version> $Revision: 3.1 $ $Date: 2006-06-24 20:26:44 $ </version>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphObjList.#ctor">
            <summary>
            Default constructor for the <see cref="T:Alt.GUI.ZedGraph.GraphObjList"/> collection class
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphObjList.#ctor(Alt.GUI.ZedGraph.GraphObjList)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:Alt.GUI.ZedGraph.GraphObjList"/> object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphObjList.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.GraphObjList.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphObjList.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphObjList.IndexOfTag(System.String)">
            <summary>
            Return the zero-based position index of the
            <see cref="T:Alt.GUI.ZedGraph.GraphObj"/> with the specified <see cref="F:Alt.GUI.ZedGraph.GraphObj.Tag"/>.
            </summary>
            <remarks>In order for this method to work, the <see cref="F:Alt.GUI.ZedGraph.GraphObj.Tag"/>
            property must be of type <see cref="T:System.String"/>.</remarks>
            <param name="tag">The <see cref="T:System.String"/> tag that is in the
            <see cref="F:Alt.GUI.ZedGraph.GraphObj.Tag"/> attribute of the item to be found.
            </param>
            <returns>The zero-based index of the specified <see cref="T:Alt.GUI.ZedGraph.GraphObj"/>,
            or -1 if the <see cref="T:Alt.GUI.ZedGraph.GraphObj"/> is not in the list</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphObjList.Move(System.Int32,System.Int32)">
            <summary>
            Move the position of the object at the specified index
            to the new relative position in the list.</summary>
            <remarks>For Graphic type objects, this method controls the
            Z-Order of the items.  Objects at the beginning of the list
            appear in front of objects at the end of the list.</remarks>
            <param name="index">The zero-based index of the object
            to be moved.</param>
            <param name="relativePos">The relative number of positions to move
            the object.  A value of -1 will move the
            object one position earlier in the list, a value
            of 1 will move it one position later.  To move an item to the
            beginning of the list, use a large negative value (such as -999).
            To move it to the end of the list, use a large positive value.
            </param>
            <returns>The new position for the object, or -1 if the object
            was not found.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphObjList.Draw(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.PaneBase,System.Double,Alt.GUI.ZedGraph.ZOrder)">
            <summary>
            Render text to the specified <see cref="T:Alt.Sketch.Graphics"/> device
            by calling the Draw method of each <see cref="T:Alt.GUI.ZedGraph.GraphObj"/> object in
            the collection.
            </summary>
            <remarks>This method is normally only called by the Draw method
            of the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object.
            </remarks>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.PaneBase"/> object that is the parent or
            owner of this object.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <param name="zOrder">A <see cref="T:Alt.GUI.ZedGraph.ZOrder"/> enumeration that controls
            the placement of this <see cref="T:Alt.GUI.ZedGraph.GraphObj"/> relative to other
            graphic objects.  The order of <see cref="T:Alt.GUI.ZedGraph.GraphObj"/>'s with the
            same <see cref="T:Alt.GUI.ZedGraph.ZOrder"/> value is control by their order in
            this <see cref="T:Alt.GUI.ZedGraph.GraphObjList"/>.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphObjList.FindPoint(Alt.Sketch.Point,Alt.GUI.ZedGraph.PaneBase,Alt.Sketch.Graphics,System.Double,System.Int32@)">
            <summary>
            Determine if a mouse point is within any <see cref="T:Alt.GUI.ZedGraph.GraphObj"/>, and if so, 
            return the index number of the the <see cref="T:Alt.GUI.ZedGraph.GraphObj"/>.
            </summary>
            <param name="mousePt">The screen point, in pixel coordinates.</param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.PaneBase"/> object that is the parent or
            owner of this object.
            </param>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <param name="index">The index number of the <see cref="T:Alt.GUI.ZedGraph.TextObj"/>
             that is under the mouse point.  The <see cref="T:Alt.GUI.ZedGraph.TextObj"/> object is
            accessible via the <see cref="T:Alt.GUI.ZedGraph.GraphObjList"/> indexer property.
            </param>
            <returns>true if the mouse point is within a <see cref="T:Alt.GUI.ZedGraph.GraphObj"/> bounding
            box, false otherwise.</returns>
            <seealso cref="M:Alt.GUI.ZedGraph.GraphPane.FindNearestObject(Alt.Sketch.Point,Alt.Sketch.Graphics,System.Object@,System.Int32@)"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.GraphObjList.Item(System.String)">
            <summary>
            Indexer to access the specified <see cref="T:Alt.GUI.ZedGraph.GraphObj"/> object by its <see cref="F:Alt.GUI.ZedGraph.GraphObj.Tag"/>.
            Note that the <see cref="F:Alt.GUI.ZedGraph.GraphObj.Tag"/> must be a <see cref="T:System.String"/> type for this method
            to work.
            </summary>
            <param name="tag">The <see cref="T:System.String"/> type tag to search for.</param>
            <value>A <see cref="T:Alt.GUI.ZedGraph.GraphObj"/> object reference.</value>
            <seealso cref="M:Alt.GUI.ZedGraph.GraphObjList.IndexOfTag(System.String)"/>
        </member>
        <member name="T:Alt.GUI.ZedGraph.GraphPane">
            <summary>
            Class <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> encapsulates the graph pane, which is all display elements
            associated with an individual graph.
            </summary>
            <remarks>This class is the outside "wrapper"
            for the ZedGraph classes, and provides the interface to access the attributes
            of the graph.  You can have multiple graphs in the same document or form,
            just instantiate multiple GraphPane's.
            </remarks>
            
            <author> John Champion modified by Jerry Vos </author>
            <version> $Revision: 3.81 $ $Date: 2007-09-30 07:44:11 $ </version>
        </member>
        <member name="T:Alt.GUI.ZedGraph.PaneBase">
            <summary>
            An abstract base class that defines basic functionality for handling a pane.  This class is the
            parent class for <see cref="T:Alt.GUI.ZedGraph.MasterPane"/> and <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>.
            </summary>
            
            <author>John Champion</author>
            <version> $Revision: 3.32 $ $Date: 2007-11-05 18:28:56 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PaneBase.schema">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PaneBase._rect">
            <summary>
            The rectangle that defines the full area into which the pane is rendered.  Units are pixels.
            Use the public property <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/> to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PaneBase._title">
            <summary>Private field that holds the main title of the pane.  Use the
            public property <see cref="P:Alt.GUI.ZedGraph.PaneBase.Title"/> to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PaneBase._legend">
            <summary>Private field instance of the <see cref="T:Alt.GUI.ZedGraph.Legend"/> class.  Use the
            public property <see cref="P:Alt.GUI.ZedGraph.PaneBase.Legend"/> to access this class.</summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PaneBase._tag">
            <summary>
            Private field that stores the user-defined tag for this <see cref="T:Alt.GUI.ZedGraph.PaneBase"/>.  This tag
            can be any user-defined value.  If it is a <see cref="T:System.String"/> type, it can be used as
            a parameter to the <see cref="M:Alt.GUI.ZedGraph.PaneList.IndexOfTag(System.String)"/> method.  Use the public property
            <see cref="P:Alt.GUI.ZedGraph.PaneBase.Tag"/> to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PaneBase._margin">
            <summary>
            private field to store the margin values for this <see cref="T:Alt.GUI.ZedGraph.PaneBase"/>. Use the
            public property <see cref="P:Alt.GUI.ZedGraph.PaneBase.Margin"/> to access this property.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PaneBase._isFontsScaled">
            <summary>Private field that determines whether or not the fonts, tics, gaps, etc.
            will be scaled according to the actual graph size.  true for font and feature scaling
            with graph size, false for fixed font sizes (scaleFactor = 1.0 constant).
            Use the public property <see cref="P:Alt.GUI.ZedGraph.PaneBase.IsFontsScaled"/> to access this value. </summary>
            <seealso cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/>
            <seealso cref="P:Alt.GUI.ZedGraph.PaneBase.IsPenWidthScaled"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PaneBase._isPenWidthScaled">
            <summary>
            Private field that controls whether or not pen widths are scaled according to the
            size of the graph.  This value is only applicable if <see cref="P:Alt.GUI.ZedGraph.PaneBase.IsFontsScaled"/>
            is true.  If <see cref="P:Alt.GUI.ZedGraph.PaneBase.IsFontsScaled"/> is false, then no scaling will be done,
            regardless of the value of <see cref="P:Alt.GUI.ZedGraph.PaneBase.IsPenWidthScaled"/>.
            </summary>
            <value>true to scale the pen widths according to the size of the graph,
            false otherwise.</value>
            <seealso cref="P:Alt.GUI.ZedGraph.PaneBase.IsFontsScaled"/>
            <seealso cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PaneBase._fill">
            <summary>
            Private field that stores the <see cref="T:Alt.GUI.ZedGraph.Fill"/> data for the
            <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/> background.  Use the public property <see cref="P:Alt.GUI.ZedGraph.PaneBase.Fill"/> to
            access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PaneBase._border">
            <summary>
            Private field that stores the <see cref="T:Alt.GUI.ZedGraph.Border"/> data for the
            <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/> border.  Use the public property <see cref="P:Alt.GUI.ZedGraph.PaneBase.Border"/> to
            access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PaneBase._graphObjList">
            <summary>Private field instance of the <see cref="T:Alt.GUI.ZedGraph.GraphObjList"/> class.  Use the
            public property <see cref="P:Alt.GUI.ZedGraph.PaneBase.GraphObjList"/> to access this class.</summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PaneBase._baseDimension">
            <summary>Private field that determines the base size of the pane, in inches.
            Fonts, tics, gaps, etc. are scaled according to this base size.
            Use the public property <see cref="P:Alt.GUI.ZedGraph.PaneBase.BaseDimension"/> to access this value. </summary>
            <seealso cref="F:Alt.GUI.ZedGraph.PaneBase._isFontsScaled"/>
            <seealso cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PaneBase._titleGap">
            <summary>
            private field that stores the gap between the bottom of the pane title and the
            client area of the pane.  This is expressed as a fraction of the title character height.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PaneBase.#ctor">
            <summary>
            Default constructor for the <see cref="T:Alt.GUI.ZedGraph.PaneBase"/> class.  Leaves the <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/> empty.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PaneBase.#ctor(System.String,Alt.Sketch.Rect)">
            <summary>
            Default constructor for the <see cref="T:Alt.GUI.ZedGraph.PaneBase"/> class.  Specifies the <see cref="P:Alt.GUI.ZedGraph.PaneBase.Title"/> of
            the <see cref="T:Alt.GUI.ZedGraph.PaneBase"/>, and the size of the <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/>.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PaneBase.#ctor(Alt.GUI.ZedGraph.PaneBase)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:Alt.GUI.ZedGraph.PaneBase"/> object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PaneBase.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of Clone
            </summary>
            <remarks>
            Note that this method must be called with an explicit cast to ICloneable, and
            that it is inherently virtual.  For example:
            <code>
            ParentClass foo = new ChildClass();
            ChildClass bar = (ChildClass) ((ICloneable)foo).Clone();
            </code>
            Assume that ChildClass is inherited from ParentClass.  Even though foo is declared with
            ParentClass, it is actually an instance of ChildClass.  Calling the ICloneable implementation
            of Clone() on foo actually calls ChildClass.Clone() as if it were a virtual function.
            </remarks>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PaneBase.ShallowClone">
            <summary>
            Create a shallow, memberwise copy of this class.
            </summary>
            <remarks>
            Note that this method uses MemberWiseClone, which will copy all
            members (shallow) including those of classes derived from this class.</remarks>
            <returns>a new copy of the class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PaneBase.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PaneBase.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PaneBase.Draw(Alt.Sketch.Graphics)">
            <summary>
            Do all rendering associated with this <see cref="T:Alt.GUI.ZedGraph.PaneBase"/> to the specified
            <see cref="T:Alt.Sketch.Graphics"/> device.  This abstract method is implemented by the child
            classes.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PaneBase.CalcClientRect(Alt.Sketch.Graphics,System.Double)">
            <summary>
            Calculate the client area rectangle based on the <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/>.
            </summary>
            <remarks>The client rectangle is the actual area available for <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>
            or <see cref="T:Alt.GUI.ZedGraph.MasterPane"/> items after taking out space for the margins and the title.
            This method does not take out the area required for the <see cref="P:Alt.GUI.ZedGraph.PaneBase.Legend"/>.
            To do so, you must separately call <see cref="M:Alt.GUI.ZedGraph.Legend.CalcRect(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.PaneBase,System.Double,Alt.Sketch.Rect@)"/>.
            </remarks>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="scaleFactor">
            The scaling factor for the features of the graph based on the <see cref="F:Alt.GUI.ZedGraph.PaneBase.Default.BaseDimension"/>.  This
            scaling factor is calculated by the <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method.  The scale factor
            represents a linear multiple to be applied to font sizes, symbol sizes, etc.
            </param>
            <returns>The calculated chart rect, in pixel coordinates.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PaneBase.DrawPaneFrame(Alt.Sketch.Graphics,System.Double)">
            <summary>
            Draw the border _border around the <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/> area.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="scaleFactor">
            The scaling factor for the features of the graph based on the <see cref="P:Alt.GUI.ZedGraph.PaneBase.BaseDimension"/>.  This
            scaling factor is calculated by the <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method.  The scale factor
            represents a linear multiple to be applied to font sizes, symbol sizes, etc.
            </param>		
        </member>
        <member name="M:Alt.GUI.ZedGraph.PaneBase.DrawTitle(Alt.Sketch.Graphics,System.Double)">
            <summary>
            Draw the <see cref="P:Alt.GUI.ZedGraph.PaneBase.Title"/> on the graph, centered at the top of the pane.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="scaleFactor">
            The scaling factor for the features of the graph based on the <see cref="P:Alt.GUI.ZedGraph.PaneBase.BaseDimension"/>.  This
            scaling factor is calculated by the <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method.  The scale factor
            represents a linear multiple to be applied to font sizes, symbol sizes, etc.
            </param>		
        </member>
        <member name="M:Alt.GUI.ZedGraph.PaneBase.ReSize(Alt.Sketch.Graphics,Alt.Sketch.Rect)">
            <summary>
            Change the size of the <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/>.  Override this method to handle resizing the contents
            as required.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="rect">The new size for the <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/>.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor">
            <summary>
            Calculate the scaling factor based on the ratio of the current <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/> dimensions and
            the <see cref="F:Alt.GUI.ZedGraph.PaneBase.Default.BaseDimension"/>.
            </summary>
            <remarks>This scaling factor is used to proportionally scale the
            features of the <see cref="T:Alt.GUI.ZedGraph.MasterPane"/> so that small graphs don't have huge fonts, and vice versa.
            The scale factor represents a linear multiple to be applied to font sizes, symbol sizes, tic sizes,
            gap sizes, pen widths, etc.  The units of the scale factor are "World Pixels" per "Standard Point".
            If any object size, in points, is multiplied by this scale factor, the result is the size, in pixels,
            that the object should be drawn using the standard GDI+ drawing instructions.  A "Standard Point"
            is a dimension based on points (1/72nd inch) assuming that the <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/> size
            matches the <see cref="F:Alt.GUI.ZedGraph.PaneBase.Default.BaseDimension"/>.
            Note that "World Pixels" will still be transformed by the GDI+ transform matrices to result
            in "Output Device Pixels", but "World Pixels" are the reference basis for the drawing commands.
            </remarks>
            <returns>
            A <see cref="T:System.Single"/> value representing the scaling factor to use for the rendering calculations.
            </returns>
            <seealso cref="P:Alt.GUI.ZedGraph.PaneBase.BaseDimension"/>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PaneBase.ScaledPenWidth(System.Double,System.Double)">
            <summary>
            Calculate the scaled pen width, taking into account the scaleFactor and the
            setting of the <see cref="P:Alt.GUI.ZedGraph.PaneBase.IsPenWidthScaled"/> property of the pane.
            </summary>
            <param name="penWidth">The pen width, in points (1/72 inch)</param>
            <param name="scaleFactor">
            The scaling factor for the features of the graph based on the <see cref="P:Alt.GUI.ZedGraph.PaneBase.BaseDimension"/>.  This
            scaling factor is calculated by the <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method.  The scale factor
            represents a linear multiple to be applied to font sizes, symbol sizes, etc.
            </param>
            <returns>The scaled pen width, in world pixels</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PaneBase.GetImage">
            <summary>
            Build a <see cref="T:Alt.Sketch.Bitmap"/> object containing the graphical rendering of
            all the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> objects in this list.
            </summary>
            <value>A <see cref="T:Alt.Sketch.Bitmap"/> object rendered with the current graph.</value>
            <seealso cref="M:Alt.GUI.ZedGraph.PaneBase.GetImage(System.Int32,System.Int32,System.Single)"/>
            <seealso cref="!:GetMetafile()"/>
            <seealso cref="!:GetMetafile(int,int)"/>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PaneBase.GetImage(System.Boolean)">
            <summary>
            Build a <see cref="T:Alt.Sketch.Bitmap"/> object containing the graphical rendering of
            all the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> objects in this list.
            </summary>
            <value>A <see cref="T:Alt.Sketch.Bitmap"/> object rendered with the current graph.</value>
            <seealso cref="M:Alt.GUI.ZedGraph.PaneBase.GetImage(System.Int32,System.Int32,System.Single)"/>
            <seealso cref="!:GetMetafile()"/>
            <seealso cref="!:GetMetafile(int,int)"/>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PaneBase.GetImage(System.Int32,System.Int32,System.Single,System.Boolean)">
            <summary>
            Gets an image for the current GraphPane, scaled to the specified size and resolution.
            </summary>
            <param name="width">The scaled width of the bitmap in pixels</param>
            <param name="height">The scaled height of the bitmap in pixels</param>
            <param name="dpi">The resolution of the bitmap, in dots per inch</param>
            <param name="isAntiAlias">true for anti-aliased rendering, false otherwise</param>
            <seealso cref="M:Alt.GUI.ZedGraph.PaneBase.GetImage"/>
            <seealso cref="!:GetMetafile()"/>
            <seealso cref="!:GetMetafile(int,int)"/>
            <seealso cref="T:Alt.Sketch.Bitmap"/>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PaneBase.GetImage(System.Int32,System.Int32,System.Single)">
            <summary>
            Gets an image for the current GraphPane, scaled to the specified size and resolution.
            </summary>
            <param name="width">The scaled width of the bitmap in pixels</param>
            <param name="height">The scaled height of the bitmap in pixels</param>
            <param name="dpi">The resolution of the bitmap, in dots per inch</param>
            <seealso cref="M:Alt.GUI.ZedGraph.PaneBase.GetImage"/>
            <seealso cref="!:GetMetafile()"/>
            <seealso cref="!:GetMetafile(int,int)"/>
            <seealso cref="T:Alt.Sketch.Bitmap"/>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PaneBase.SetAntiAliasMode(Alt.Sketch.Graphics,System.Boolean)">
            <summary>
            Setup a <see cref="T:Alt.Sketch.Graphics"/> instance with appropriate antialias settings.
            </summary>
            <remarks>
            No settings are modified if <paramref name="isAntiAlias"/> is set to false.  This method
            does not restore original settings, it presumes that the Graphics instance will be
            disposed.</remarks>
            <param name="g">An existing <see cref="T:Alt.Sketch.Graphics"/> instance</param>
            <param name="isAntiAlias">true to render in anti-alias mode, false otherwise</param>
        </member>
        <member name="P:Alt.GUI.ZedGraph.PaneBase.Rect">
            <summary>
            The rectangle that defines the full area into which all graphics
            will be rendered.
            </summary>
            <remarks>Note that this rectangle has x, y, width, and height.  Most of the
            GDI+ graphic primitive actually draw one pixel beyond those dimensions.  For
            example, for a rectangle of ( X=0, Y=0, Width=100, Height=100 ), GDI+ would
            draw into pixels 0 through 100, which is actually 101 pixels.  For the
            ZedGraph Rect, a Width of 100 pixels means that pixels 0 through 99 are used</remarks>
            <value>Units are pixels.</value>
            <seealso cref="M:Alt.GUI.ZedGraph.PaneBase.ReSize(Alt.Sketch.Graphics,Alt.Sketch.Rect)"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.PaneBase.Legend">
            <summary>
            Accesses the <see cref="P:Alt.GUI.ZedGraph.PaneBase.Legend"/> for this <see cref="T:Alt.GUI.ZedGraph.PaneBase"/>
            </summary>
            <value>A reference to a <see cref="P:Alt.GUI.ZedGraph.PaneBase.Legend"/> object</value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.PaneBase.Title">
            <summary>
            Gets the <see cref="T:Alt.GUI.ZedGraph.Label"/> instance that contains the text and attributes of the title.
            This text can be multiple lines separated by newline characters ('\n').
            </summary>
            <seealso cref="T:Alt.GUI.ZedGraph.FontSpec"/>
            <seealso cref="F:Alt.GUI.ZedGraph.PaneBase.Default.FontColor"/>
            <seealso cref="F:Alt.GUI.ZedGraph.PaneBase.Default.FontBold"/>
            <seealso cref="F:Alt.GUI.ZedGraph.PaneBase.Default.FontItalic"/>
            <seealso cref="F:Alt.GUI.ZedGraph.PaneBase.Default.FontUnderline"/>
            <seealso cref="F:Alt.GUI.ZedGraph.PaneBase.Default.FontFamily"/>
            <seealso cref="F:Alt.GUI.ZedGraph.PaneBase.Default.FontSize"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.PaneBase.Tag">
            <summary>
            Gets or sets the user-defined tag for this <see cref="T:Alt.GUI.ZedGraph.PaneBase"/>.  This tag
            can be any user-defined value.  If it is a <see cref="T:System.String"/> type, it can be used as
            a parameter to the <see cref="M:Alt.GUI.ZedGraph.PaneList.IndexOfTag(System.String)"/> method.
            </summary>
            <remarks>
            Note that, if you are going to Serialize ZedGraph data, then any type
            that you store in <see cref="P:Alt.GUI.ZedGraph.PaneBase.Tag"/> must be a serializable type (or
            it will cause an exception).
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.PaneBase.Border">
            <summary>
            Gets or sets the <see cref="T:Alt.GUI.ZedGraph.Border"/> class for drawing the border
            border around the <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/>
            </summary>
            <seealso cref="F:Alt.GUI.ZedGraph.PaneBase.Default.BorderColor"/>
            <seealso cref="F:Alt.GUI.ZedGraph.PaneBase.Default.BorderPenWidth"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.PaneBase.Fill">
            <summary>
            Gets or sets the <see cref="T:Alt.GUI.ZedGraph.Fill"/> data for the
            filling the background of the <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/>.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.PaneBase.GraphObjList">
            <summary>
            Gets or sets the list of <see cref="T:Alt.GUI.ZedGraph.GraphObj"/> items for this <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>
            </summary>
            <value>A reference to a <see cref="P:Alt.GUI.ZedGraph.PaneBase.GraphObjList"/> collection object</value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.PaneBase.Margin">
            <summary>
            Gets or sets the <see cref="T:Alt.GUI.ZedGraph.Margin"/> instance that controls the space between
            the edge of the <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/> and the rendered content of the graph.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.PaneBase.BaseDimension">
            <summary>
            BaseDimension is a double precision value that sets "normal" pane size on
            which all the settings are based.  The BaseDimension is in inches.  For
            example, if the BaseDimension is 8.0 inches and the
            <see cref="P:Alt.GUI.ZedGraph.PaneBase.Title"/> size is 14 points.  Then the pane title font
            will be 14 points high when the <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/> is approximately 8.0
            inches wide.  If the Rect is 4.0 inches wide, the pane title font will be
            7 points high.  Most features of the graph are scaled in this manner.
            </summary>
            <value>The base dimension reference for the <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/>, in inches</value>
            <seealso cref="F:Alt.GUI.ZedGraph.PaneBase.Default.BaseDimension"/>
            <seealso cref="P:Alt.GUI.ZedGraph.PaneBase.IsFontsScaled"/>
            <seealso cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.PaneBase.TitleGap">
            <summary>
            Gets or sets the gap between the bottom of the pane title and the
            client area of the pane.  This is expressed as a fraction of the scaled
            <see cref="P:Alt.GUI.ZedGraph.PaneBase.Title"/> character height.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.PaneBase.IsFontsScaled">
            <summary>
            Determines if the font sizes, tic sizes, gap sizes, etc. will be scaled according to
            the size of the <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/> and the <see cref="P:Alt.GUI.ZedGraph.PaneBase.BaseDimension"/>.  If this
            value is set to false, then the font sizes and tic sizes will always be exactly as
            specified, without any scaling.
            </summary>
            <value>True to have the fonts and tics scaled, false to have them constant</value>
            <seealso cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.PaneBase.IsPenWidthScaled">
            <summary>
            Gets or sets the property that controls whether or not pen widths are scaled for this
            <see cref="T:Alt.GUI.ZedGraph.PaneBase"/>.
            </summary>
            <remarks>This value is only applicable if <see cref="P:Alt.GUI.ZedGraph.PaneBase.IsFontsScaled"/>
            is true.  If <see cref="P:Alt.GUI.ZedGraph.PaneBase.IsFontsScaled"/> is false, then no scaling will be done,
            regardless of the value of <see cref="P:Alt.GUI.ZedGraph.PaneBase.IsPenWidthScaled"/>.  Note that scaling the pen
            widths can cause "artifacts" to appear at typical screen resolutions.  This occurs
            because of roundoff differences; in some cases the pen width may round to 1 pixel wide
            and in another it may round to 2 pixels wide.  The result is typically undesirable.
            Therefore, this option defaults to false.  This option is primarily useful for high
            resolution output, such as printer output or high resolution bitmaps (from
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.GetImage(System.Int32,System.Int32,System.Single)"/>) where it is desirable to have the pen width
            be consistent with the screen image.
            </remarks>
            <value>true to scale the pen widths according to the size of the graph,
            false otherwise.</value>
            <seealso cref="P:Alt.GUI.ZedGraph.PaneBase.IsFontsScaled"/>
            <seealso cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/>
        </member>
        <member name="T:Alt.GUI.ZedGraph.PaneBase.Default">
            <summary>
            A simple struct that defines the default property values for the <see cref="T:Alt.GUI.ZedGraph.PaneBase"/> class.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PaneBase.Default.IsShowTitle">
            <summary>
            The default display mode for the title at the top of the pane
            (<see cref="P:Alt.GUI.ZedGraph.PaneBase.Title"/> <see cref="P:Alt.GUI.ZedGraph.Label.IsVisible"/> property).  true to
            display a title, false otherwise.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PaneBase.Default.FontFamily">
            <summary>
            The default font family for the title
            (<see cref="P:Alt.GUI.ZedGraph.PaneBase.Title"/> property).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PaneBase.Default.FontSize">
            <summary>
            The default font size (points) for the
            <see cref="P:Alt.GUI.ZedGraph.PaneBase.Title"/> (<see cref="P:Alt.GUI.ZedGraph.FontSpec.Size"/> property).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PaneBase.Default.FontColor">
            <summary>
            The default font color for the
            <see cref="P:Alt.GUI.ZedGraph.PaneBase.Title"/>
            (<see cref="P:Alt.GUI.ZedGraph.FontSpec.FontColor"/> property).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PaneBase.Default.FontBold">
            <summary>
            The default font bold mode for the
            <see cref="P:Alt.GUI.ZedGraph.PaneBase.Title"/>
            (<see cref="P:Alt.GUI.ZedGraph.FontSpec.IsBold"/> property). true
            for a bold typeface, false otherwise.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PaneBase.Default.FontItalic">
            <summary>
            The default font italic mode for the
            <see cref="P:Alt.GUI.ZedGraph.PaneBase.Title"/>
            (<see cref="P:Alt.GUI.ZedGraph.FontSpec.IsItalic"/> property). true
            for an italic typeface, false otherwise.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PaneBase.Default.FontUnderline">
            <summary>
            The default font underline mode for the
            <see cref="P:Alt.GUI.ZedGraph.PaneBase.Title"/>
            (<see cref="P:Alt.GUI.ZedGraph.FontSpec.IsUnderline"/> property). true
            for an underlined typeface, false otherwise.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PaneBase.Default.IsBorderVisible">
            <summary>
            The default border mode for the <see cref="T:Alt.GUI.ZedGraph.PaneBase"/>.
            (<see cref="P:Alt.GUI.ZedGraph.PaneBase.Border"/> property). true
            to draw a border around the <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/>,
            false otherwise.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PaneBase.Default.BorderColor">
            <summary>
            The default color for the <see cref="T:Alt.GUI.ZedGraph.PaneBase"/> border.
            (<see cref="P:Alt.GUI.ZedGraph.PaneBase.Border"/> property). 
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PaneBase.Default.FillColor">
            <summary>
            The default color for the <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/> background.
            (<see cref="P:Alt.GUI.ZedGraph.PaneBase.Fill"/> property). 
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PaneBase.Default.BorderPenWidth">
            <summary>
            The default pen width for the <see cref="T:Alt.GUI.ZedGraph.PaneBase"/> border.
            (<see cref="P:Alt.GUI.ZedGraph.PaneBase.Border"/> property).  Units are in points (1/72 inch).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PaneBase.Default.BaseDimension">
            <summary>
            The default dimension of the <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/>, which
            defines a normal sized plot.  This dimension is used to scale the
            fonts, symbols, etc. according to the actual size of the
            <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/>.
            </summary>
            <seealso cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PaneBase.Default.IsPenWidthScaled">
            <summary>
            The default setting for the <see cref="P:Alt.GUI.ZedGraph.PaneBase.IsPenWidthScaled"/> option.
            true to have all pen widths scaled according to <see cref="P:Alt.GUI.ZedGraph.PaneBase.BaseDimension"/>,
            false otherwise.
            </summary>
            <seealso cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PaneBase.Default.IsFontsScaled">
            <summary>
            The default setting for the <see cref="P:Alt.GUI.ZedGraph.PaneBase.IsFontsScaled"/> option.
            true to have all fonts scaled according to <see cref="P:Alt.GUI.ZedGraph.PaneBase.BaseDimension"/>,
            false otherwise.
            </summary>
            <seealso cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PaneBase.Default.TitleGap">
            <summary>
            The default value for the <see cref="P:Alt.GUI.ZedGraph.PaneBase.TitleGap"/> property, expressed as
            a fraction of the scaled <see cref="P:Alt.GUI.ZedGraph.PaneBase.Title"/> character height.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GraphPane.schema2">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GraphPane._xAxis">
            <summary>Private field instance of the <see cref="T:Alt.GUI.ZedGraph.XAxis"/> class.  Use the
            public property <see cref="P:Alt.GUI.ZedGraph.GraphPane.XAxis"/> to access this class.</summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GraphPane._x2Axis">
            <summary>Private field instance of the <see cref="T:Alt.GUI.ZedGraph.XAxis"/> class.  Use the
            public property <see cref="P:Alt.GUI.ZedGraph.GraphPane.X2Axis"/> to access this class.</summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GraphPane._yAxisList">
            <summary>Private field instance of the <see cref="T:Alt.GUI.ZedGraph.YAxisList"/> class.  Use the
            public property <see cref="P:Alt.GUI.ZedGraph.GraphPane.YAxisList"/> to access this class.</summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GraphPane._y2AxisList">
            <summary>Private field instance of the <see cref="T:Alt.GUI.ZedGraph.Y2AxisList"/> class.  Use the
            public property <see cref="P:Alt.GUI.ZedGraph.GraphPane.Y2AxisList"/> to access this class.</summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GraphPane._curveList">
            <summary>Private field instance of the <see cref="T:Alt.GUI.ZedGraph.CurveList"/> class.  Use the
            public property <see cref="P:Alt.GUI.ZedGraph.GraphPane.CurveList"/> to access this class.</summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GraphPane._zoomStack">
            <summary>
            private value that contains a <see cref="T:Alt.GUI.ZedGraph.ZoomStateStack"/>, which stores prior
            <see cref="T:Alt.GUI.ZedGraph.ZoomState"/> objects containing scale range information.  This enables
            zooming and panning functionality for the <see cref="T:Alt.GUI.ZedGraph.ZedGraphControl"/>.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GraphPane._isIgnoreInitial">
            <summary>Private field that determines whether or not initial zero values will
            be included or excluded when determining the Y or Y2 axis scale range.
            Use the public property <see cref="P:Alt.GUI.ZedGraph.GraphPane.IsIgnoreInitial"/> to access
            this value. </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GraphPane._isIgnoreMissing">
            <summary>Private field that determines whether or not initial
            <see cref="F:Alt.GUI.ZedGraph.PointPairBase.Missing"/> values will cause the line segments of
            a curve to be discontinuous.  If this field is true, then the curves
            will be plotted as continuous lines as if the Missing values did not
            exist.
            Use the public property <see cref="P:Alt.GUI.ZedGraph.GraphPane.IsIgnoreMissing"/> to access
            this value. </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GraphPane._isBoundedRanges">
            <summary> private field that determines if the auto-scaled axis ranges will subset the
            data points based on any manually set scale range values.  Use the public property
            <see cref="P:Alt.GUI.ZedGraph.GraphPane.IsBoundedRanges"/> to access this value.</summary>
            <remarks>The bounds provide a means to subset the data.  For example, if all the axes are set to
            autoscale, then the full range of data are used.  But, if the XAxis.Min and XAxis.Max values
            are manually set, then the Y data range will reflect the Y values within the bounds of
            XAxis.Min and XAxis.Max.</remarks>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GraphPane._isAlignGrids">
            <summary>
            private field that determines if ZedGraph should modify the scale ranges for the Y and Y2
            axes such that the number of steps, and therefore the grid lines, line up.  Use the
            public property <see cref="P:Alt.GUI.ZedGraph.GraphPane.IsAlignGrids"/> to acccess this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GraphPane._lineType">
            <summary>Private field that determines how the <see cref="T:Alt.GUI.ZedGraph.LineItem"/>
            graphs will be displayed. See the <see cref="T:Alt.GUI.ZedGraph.LineType"/> enum
            for the individual types available.
            To access this value, use the public property <see cref="P:Alt.GUI.ZedGraph.GraphPane.LineType"/>.
            </summary>
            <seealso cref="F:Alt.GUI.ZedGraph.GraphPane.Default.LineType"/>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphPane.#ctor">
            <summary>
            Default Constructor.  Sets the <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/> to (0, 0, 500, 375), and
            sets the <see cref="P:Alt.GUI.ZedGraph.PaneBase.Title"/> and <see cref="P:Alt.GUI.ZedGraph.Axis.Title"/> values to empty
            strings.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphPane.#ctor(Alt.Sketch.Rect,System.String,System.String,System.String)">
            <summary>
            Constructor for the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object.  This routine will
            initialize all member variables and classes, setting appropriate default
            values as defined in the <see cref="T:Alt.GUI.ZedGraph.GraphPane.Default"/> class.
            </summary>
            <param name="rect"> A rectangular screen area where the graph is to be displayed.
            This area can be any size, and can be resize at any time using the
            <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/> property.
            </param>
            <param name="title">The <see cref="P:Alt.GUI.ZedGraph.PaneBase.Title"/> for this <see cref="T:Alt.GUI.ZedGraph.GraphPane"/></param>
            <param name="xTitle">The <see cref="P:Alt.GUI.ZedGraph.Axis.Title"/> for the <see cref="P:Alt.GUI.ZedGraph.GraphPane.XAxis"/></param>
            <param name="yTitle">The <see cref="P:Alt.GUI.ZedGraph.Axis.Title"/> for the <see cref="P:Alt.GUI.ZedGraph.GraphPane.YAxis"/></param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphPane.#ctor(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The GraphPane object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphPane.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.GraphPane.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphPane.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphPane.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphPane.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GraphPane.m_AxisChangeTempBitmap">
            <summary>
            AxisChange causes the axes scale ranges to be recalculated based on the current data range.
            </summary>
            <remarks>
            There is no obligation to call AxisChange() for manually scaled axes.  AxisChange() is only
            intended to handle auto scaling operations.  Call this function anytime you change, add, or
            remove curve data to insure that the scale range of the axes are appropriate for the data range.
            This method calculates
            a scale minimum, maximum, and step size for each axis based on the current curve data.
            Only the axis attributes (min, max, step) that are set to auto-range
            (<see cref="P:Alt.GUI.ZedGraph.Scale.MinAuto"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.MaxAuto"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStepAuto"/>)
            will be modified.  You must call <see cref="M:Alt.GUI.Control.Invalidate"/> after calling
            AxisChange to make sure the display gets updated.<br/>
            This overload of AxisChange just uses the default Graphics instance for the screen.
            If you have a Graphics instance available from your AltGUI, you should use
            the <see cref="M:Alt.GUI.ZedGraph.GraphPane.AxisChange(Alt.Sketch.Graphics)"/> overload instead.
            </remarks>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphPane.AxisChange(Alt.Sketch.Graphics)">
            <summary>
            AxisChange causes the axes scale ranges to be recalculated based on the current data range.
            </summary>
            <remarks>
            There is no obligation to call AxisChange() for manually scaled axes.  AxisChange() is only
            intended to handle auto scaling operations.  Call this function anytime you change, add, or
            remove curve data to insure that the scale range of the axes are appropriate for the data range.
            This method calculates
            a scale minimum, maximum, and step size for each axis based on the current curve data.
            Only the axis attributes (min, max, step) that are set to auto-range
            (<see cref="P:Alt.GUI.ZedGraph.Scale.MinAuto"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.MaxAuto"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStepAuto"/>)
            will be modified.  You must call
            <see cref="M:Alt.GUI.Control.Invalidate"/> after calling AxisChange to make sure the display gets updated.
            </remarks>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphPane.Draw(Alt.Sketch.Graphics)">
            <summary>
            Draw all elements in the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> to the specified graphics device.
            </summary>
            <remarks>This method
            should be part of the Paint() update process.  Calling this routine will redraw all
            features of the graph.  No preparation is required other than an instantiated
            <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object.
            </remarks>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphPane.CalcChartRect(Alt.Sketch.Graphics)">
            <summary>
            Calculate the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/> based on the <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/>.
            </summary>
            <remarks>The ChartRect
            is the plot area bounded by the axes, and the rect is the total area as
            specified by the client application.
            </remarks>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <returns>The calculated chart rect, in pixel coordinates.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphPane.CalcChartRect(Alt.Sketch.Graphics,System.Double)">
            <summary>
            Calculate the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/> based on the <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/>.
            </summary>
            <remarks>The ChartRect
            is the plot area bounded by the axes, and the rect is the total area as
            specified by the client application.
            </remarks>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="scaleFactor">
            The scaling factor for the features of the graph based on the <see cref="P:Alt.GUI.ZedGraph.PaneBase.BaseDimension"/>.  This
            scaling factor is calculated by the <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method.  The scale factor
            represents a linear multiple to be applied to font sizes, symbol sizes, etc.
            </param>
            <returns>The calculated chart rect, in pixel coordinates.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphPane.SetMinSpaceBuffer(Alt.Sketch.Graphics,System.Single,System.Boolean)">
            <summary>
            This method will set the <see cref="P:Alt.GUI.ZedGraph.Axis.MinSpace"/> property for all three axes;
            <see cref="P:Alt.GUI.ZedGraph.GraphPane.XAxis"/>, <see cref="P:Alt.GUI.ZedGraph.GraphPane.YAxis"/>, and <see cref="P:Alt.GUI.ZedGraph.GraphPane.Y2Axis"/>.
            </summary>
            <remarks>The <see cref="P:Alt.GUI.ZedGraph.Axis.MinSpace"/>
            is calculated using the currently required space multiplied by a fraction
            (<paramref>bufferFraction</paramref>).
            The currently required space is calculated using <see cref="M:Alt.GUI.ZedGraph.Axis.CalcSpace(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,System.Double,System.Double@)"/>, and is
            based on current data ranges, font sizes, etc.  The "space" is actually the amount of space
            required to fit the tic marks, scale labels, and axis title.
            The calculation is done by calling the <see cref="M:Alt.GUI.ZedGraph.Axis.SetMinSpaceBuffer(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,System.Double,System.Boolean)"/> method for
            each <see cref="T:Alt.GUI.ZedGraph.Axis"/>.
            </remarks>
            <param name="g">A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.</param>
            <param name="bufferFraction">The amount of space to allocate for the axis, expressed
            as a fraction of the currently required space.  For example, a value of 1.2 would
            allow for 20% extra above the currently required space.</param>
            <param name="isGrowOnly">If true, then this method will only modify the <see cref="P:Alt.GUI.ZedGraph.Axis.MinSpace"/>
            property if the calculated result is more than the current value.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphPane.AddCurve(System.String,System.Double[],System.Double[],Alt.Sketch.Color)">
            <summary>
            Add a curve (<see cref="T:Alt.GUI.ZedGraph.CurveItem"/> object) to the plot with
            the given data points (double arrays) and properties.
            This is simplified way to add curves without knowledge of the
            <see cref="P:Alt.GUI.ZedGraph.GraphPane.CurveList"/> class.  An alternative is to use
            the <see cref="T:Alt.GUI.ZedGraph.CurveList"/> Add() method.
            </summary>
            <param name="label">The text label (string) for the curve that will be
            used as a <see cref="T:Alt.GUI.ZedGraph.Legend"/> entry.</param>
            <param name="x">An array of double precision X values (the
            independent values) that define the curve.</param>
            <param name="y">An array of double precision Y values (the
            dependent values) that define the curve.</param>
            <param name="color">The color to used for the curve line,
            symbols, etc.</param>
            <returns>A <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> class for the newly created curve.
            This can then be used to access all of the curve properties that
            are not defined as arguments to the
            <see cref="M:Alt.GUI.ZedGraph.GraphPane.AddCurve(System.String,System.Double[],System.Double[],Alt.Sketch.Color)"/> method.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphPane.AddCurve(System.String,Alt.GUI.ZedGraph.IPointList,Alt.Sketch.Color)">
            <summary>
            Add a curve (<see cref="T:Alt.GUI.ZedGraph.CurveItem"/> object) to the plot with
            the given data points (<see cref="T:Alt.GUI.ZedGraph.IPointList"/>) and properties.
            This is simplified way to add curves without knowledge of the
            <see cref="P:Alt.GUI.ZedGraph.GraphPane.CurveList"/> class.  An alternative is to use
            the <see cref="T:Alt.GUI.ZedGraph.CurveList"/> Add() method.
            </summary>
            <param name="label">The text label (string) for the curve that will be
            used as a <see cref="T:Alt.GUI.ZedGraph.Legend"/> entry.</param>
            <param name="points">A <see cref="T:Alt.GUI.ZedGraph.IPointList"/> of double precision value pairs that define
            the X and Y values for this curve</param>
            <param name="color">The color to used for the curve line,
            symbols, etc.</param>
            <returns>A <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> class for the newly created curve.
            This can then be used to access all of the curve properties that
            are not defined as arguments to the
            <see cref="M:Alt.GUI.ZedGraph.GraphPane.AddCurve(System.String,Alt.GUI.ZedGraph.IPointList,Alt.Sketch.Color)"/> method.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphPane.AddCurve(System.String,System.Double[],System.Double[],Alt.Sketch.Color,Alt.GUI.ZedGraph.SymbolType)">
            <summary>
            Add a curve (<see cref="T:Alt.GUI.ZedGraph.CurveItem"/> object) to the plot with
            the given data points (double arrays) and properties.
            This is simplified way to add curves without knowledge of the
            <see cref="P:Alt.GUI.ZedGraph.GraphPane.CurveList"/> class.  An alternative is to use
            the <see cref="T:Alt.GUI.ZedGraph.CurveList"/> Add() method.
            </summary>
            <param name="label">The text label (string) for the curve that will be
            used as a <see cref="T:Alt.GUI.ZedGraph.Legend"/> entry.</param>
            <param name="x">An array of double precision X values (the
            independent values) that define the curve.</param>
            <param name="y">An array of double precision Y values (the
            dependent values) that define the curve.</param>
            <param name="color">The color to used for the curve line,
            symbols, etc.</param>
            <param name="symbolType">A symbol type (<see cref="T:Alt.GUI.ZedGraph.SymbolType"/>)
            that will be used for this curve.</param>
            <returns>A <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> class for the newly created curve.
            This can then be used to access all of the curve properties that
            are not defined as arguments to the
            <see cref="M:Alt.GUI.ZedGraph.GraphPane.AddCurve(System.String,System.Double[],System.Double[],Alt.Sketch.Color,Alt.GUI.ZedGraph.SymbolType)"/> method.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphPane.AddCurve(System.String,Alt.GUI.ZedGraph.IPointList,Alt.Sketch.Color,Alt.GUI.ZedGraph.SymbolType)">
            <summary>
            Add a curve (<see cref="T:Alt.GUI.ZedGraph.CurveItem"/> object) to the plot with
            the given data points (<see cref="T:Alt.GUI.ZedGraph.IPointList"/>) and properties.
            This is simplified way to add curves without knowledge of the
            <see cref="P:Alt.GUI.ZedGraph.GraphPane.CurveList"/> class.  An alternative is to use
            the <see cref="T:Alt.GUI.ZedGraph.CurveList"/> Add() method.
            </summary>
            <param name="label">The text label (string) for the curve that will be
            used as a <see cref="T:Alt.GUI.ZedGraph.Legend"/> entry.</param>
            <param name="points">A <see cref="T:Alt.GUI.ZedGraph.IPointList"/> of double precision value pairs that define
            the X and Y values for this curve</param>
            <param name="color">The color to used for the curve line,
            symbols, etc.</param>
            <param name="symbolType">A symbol type (<see cref="T:Alt.GUI.ZedGraph.SymbolType"/>)
            that will be used for this curve.</param>
            <returns>A <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> class for the newly created curve.
            This can then be used to access all of the curve properties that
            are not defined as arguments to the
            <see cref="M:Alt.GUI.ZedGraph.GraphPane.AddCurve(System.String,Alt.GUI.ZedGraph.IPointList,Alt.Sketch.Color,Alt.GUI.ZedGraph.SymbolType)"/> method.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphPane.AddStick(System.String,System.Double[],System.Double[],Alt.Sketch.Color)">
            <summary>
            Add a stick graph (<see cref="T:Alt.GUI.ZedGraph.StickItem"/> object) to the plot with
            the given data points (double arrays) and properties.
            This is simplified way to add curves without knowledge of the
            <see cref="P:Alt.GUI.ZedGraph.GraphPane.CurveList"/> class.  An alternative is to use
            the <see cref="T:Alt.GUI.ZedGraph.CurveList"/> Add() method.
            </summary>
            <param name="label">The text label (string) for the curve that will be
            used as a <see cref="T:Alt.GUI.ZedGraph.Legend"/> entry.</param>
            <param name="x">An array of double precision X values (the
            independent values) that define the curve.</param>
            <param name="y">An array of double precision Y values (the
            dependent values) that define the curve.</param>
            <param name="color">The color to used for the curve line,
            symbols, etc.</param>
            <returns>A <see cref="T:Alt.GUI.ZedGraph.StickItem"/> class for the newly created curve.
            This can then be used to access all of the curve properties that
            are not defined as arguments to the
            <see cref="M:Alt.GUI.ZedGraph.GraphPane.AddStick(System.String,System.Double[],System.Double[],Alt.Sketch.Color)"/> method.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphPane.AddStick(System.String,Alt.GUI.ZedGraph.IPointList,Alt.Sketch.Color)">
            <summary>
            Add a stick graph (<see cref="T:Alt.GUI.ZedGraph.StickItem"/> object) to the plot with
            the given data points (<see cref="T:Alt.GUI.ZedGraph.IPointList"/>) and properties.
            This is simplified way to add curves without knowledge of the
            <see cref="P:Alt.GUI.ZedGraph.GraphPane.CurveList"/> class.  An alternative is to use
            the <see cref="T:Alt.GUI.ZedGraph.CurveList"/> Add() method.
            </summary>
            <param name="label">The text label (string) for the curve that will be
            used as a <see cref="T:Alt.GUI.ZedGraph.Legend"/> entry.</param>
            <param name="points">A <see cref="T:Alt.GUI.ZedGraph.IPointList"/> of double precision value pairs that define
            the X and Y values for this curve</param>
            <param name="color">The color to used for the curve line,
            symbols, etc.</param>
            <returns>A <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> class for the newly created curve.
            This can then be used to access all of the curve properties that
            are not defined as arguments to the
            <see cref="M:Alt.GUI.ZedGraph.GraphPane.AddStick(System.String,Alt.GUI.ZedGraph.IPointList,Alt.Sketch.Color)"/> method.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphPane.AddOHLCBar(System.String,Alt.GUI.ZedGraph.IPointList,Alt.Sketch.Color)">
            <summary>
            Add a candlestick graph (<see cref="T:Alt.GUI.ZedGraph.OHLCBarItem"/> object) to the plot with
            the given data points (<see cref="T:Alt.GUI.ZedGraph.IPointList"/>) and properties.
            </summary>
            <remarks>
            This is simplified way to add curves without knowledge of the
            <see cref="P:Alt.GUI.ZedGraph.GraphPane.CurveList"/> class.  An alternative is to use
            the <see cref="T:Alt.GUI.ZedGraph.CurveList"/> Add() method.
            Note that the <see cref="T:Alt.GUI.ZedGraph.IPointList"/>
            should contain <see cref="T:Alt.GUI.ZedGraph.StockPt"/> objects instead of <see cref="T:Alt.GUI.ZedGraph.PointPair"/>
            objects in order to contain all the data values required for this curve type.
            </remarks>
            <param name="label">The text label (string) for the curve that will be
            used as a <see cref="T:Alt.GUI.ZedGraph.Legend"/> entry.</param>
            <param name="points">A <see cref="T:Alt.GUI.ZedGraph.IPointList"/> of double precision value pairs that define
            the X and Y values for this curve</param>
            <param name="color">The color to used for the curve line,
            symbols, etc.</param>
            <returns>A <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> class for the newly created curve.
            This can then be used to access all of the curve properties that
            are not defined as arguments to the
            <see cref="M:Alt.GUI.ZedGraph.GraphPane.AddOHLCBar(System.String,Alt.GUI.ZedGraph.IPointList,Alt.Sketch.Color)"/> method.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphPane.AddJapaneseCandleStick(System.String,Alt.GUI.ZedGraph.IPointList)">
            <summary>
            Add a japanesecandlestick graph (<see cref="T:Alt.GUI.ZedGraph.JapaneseCandleStickItem"/> object) to the plot with
            the given data points (<see cref="T:Alt.GUI.ZedGraph.IPointList"/>) and properties.
            </summary>
            <remarks>
            This is simplified way to add curves without knowledge of the
            <see cref="P:Alt.GUI.ZedGraph.GraphPane.CurveList"/> class.  An alternative is to use
            the <see cref="T:Alt.GUI.ZedGraph.CurveList"/> Add() method.
            Note that the <see cref="T:Alt.GUI.ZedGraph.IPointList"/>
            should contain <see cref="T:Alt.GUI.ZedGraph.StockPt"/> objects instead of <see cref="T:Alt.GUI.ZedGraph.PointPair"/>
            objects in order to contain all the data values required for this curve type.
            </remarks>
            <param name="label">The text label (string) for the curve that will be
            used as a <see cref="T:Alt.GUI.ZedGraph.Legend"/> entry.</param>
            <param name="points">A <see cref="T:Alt.GUI.ZedGraph.IPointList"/> of double precision value pairs that define
            the X and Y values for this curve</param>
            <returns>A <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> class for the newly created curve.
            This can then be used to access all of the curve properties that
            are not defined as arguments to the
            <see cref="M:Alt.GUI.ZedGraph.GraphPane.AddJapaneseCandleStick(System.String,Alt.GUI.ZedGraph.IPointList)"/> method.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphPane.AddErrorBar(System.String,System.Double[],System.Double[],System.Double[],Alt.Sketch.Color)">
            <summary>
            Add an error bar set (<see cref="T:Alt.GUI.ZedGraph.ErrorBarItem"/> object) to the plot with
            the given data points (<see cref="T:Alt.GUI.ZedGraph.IPointList"/>) and properties.
            This is simplified way to add curves without knowledge of the
            <see cref="P:Alt.GUI.ZedGraph.GraphPane.CurveList"/> class.  An alternative is to use
            the <see cref="T:Alt.GUI.ZedGraph.CurveList"/> Add() method.
            </summary>
            <param name="label">The text label (string) for the curve that will be
            used as a <see cref="T:Alt.GUI.ZedGraph.Legend"/> entry.</param>
            <param name="x">An array of double precision X values (the
            independent values) that define the curve.</param>
            <param name="y">An array of double precision Y values (the
            dependent values) that define the curve.</param>
            <param name="baseValue">An array of double precision values that define the
            base value (the bottom) of the bars for this curve.
            </param>
            <param name="color">The color to used for the curve line,
            symbols, etc.</param>
            <returns>An <see cref="T:Alt.GUI.ZedGraph.ErrorBarItem"/> class for the newly created curve.
            This can then be used to access all of the curve properties that
            are not defined as arguments to the
            <see cref="M:Alt.GUI.ZedGraph.GraphPane.AddErrorBar(System.String,Alt.GUI.ZedGraph.IPointList,Alt.Sketch.Color)"/> method.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphPane.AddErrorBar(System.String,Alt.GUI.ZedGraph.IPointList,Alt.Sketch.Color)">
            <summary>
            Add an error bar set (<see cref="T:Alt.GUI.ZedGraph.ErrorBarItem"/> object) to the plot with
            the given data points (<see cref="T:Alt.GUI.ZedGraph.IPointList"/>) and properties.
            This is simplified way to add curves without knowledge of the
            <see cref="P:Alt.GUI.ZedGraph.GraphPane.CurveList"/> class.  An alternative is to use
            the <see cref="T:Alt.GUI.ZedGraph.CurveList"/> Add() method.
            </summary>
            <param name="label">The text label (string) for the curve that will be
            used as a <see cref="T:Alt.GUI.ZedGraph.Legend"/> entry.</param>
            <param name="points">A <see cref="T:Alt.GUI.ZedGraph.IPointList"/> of double precision value pairs that define
            the X and Y values for this curve</param>
            <param name="color">The color to used for the curve line,
            symbols, etc.</param>
            <returns>An <see cref="T:Alt.GUI.ZedGraph.ErrorBarItem"/> class for the newly created curve.
            This can then be used to access all of the curve properties that
            are not defined as arguments to the
            <see cref="M:Alt.GUI.ZedGraph.GraphPane.AddErrorBar(System.String,Alt.GUI.ZedGraph.IPointList,Alt.Sketch.Color)"/> method.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphPane.AddBar(System.String,Alt.GUI.ZedGraph.IPointList,Alt.Sketch.Color)">
            <summary>
            Add a bar type curve (<see cref="T:Alt.GUI.ZedGraph.CurveItem"/> object) to the plot with
            the given data points (<see cref="T:Alt.GUI.ZedGraph.IPointList"/>) and properties.
            This is simplified way to add curves without knowledge of the
            <see cref="P:Alt.GUI.ZedGraph.GraphPane.CurveList"/> class.  An alternative is to use
            the <see cref="T:Alt.GUI.ZedGraph.CurveList"/> Add() method.
            </summary>
            <param name="label">The text label (string) for the curve that will be
            used as a <see cref="T:Alt.GUI.ZedGraph.Legend"/> entry.</param>
            <param name="points">A <see cref="T:Alt.GUI.ZedGraph.IPointList"/> of double precision value pairs that define
            the X and Y values for this curve</param>
            <param name="color">The color to used to fill the bars</param>
            <returns>A <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> class for the newly created bar curve.
            This can then be used to access all of the curve properties that
            are not defined as arguments to the
            <see cref="M:Alt.GUI.ZedGraph.GraphPane.AddBar(System.String,Alt.GUI.ZedGraph.IPointList,Alt.Sketch.Color)"/> method.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphPane.AddBar(System.String,System.Double[],System.Double[],Alt.Sketch.Color)">
            <summary>
            Add a bar type curve (<see cref="T:Alt.GUI.ZedGraph.CurveItem"/> object) to the plot with
            the given data points (double arrays) and properties.
            This is simplified way to add curves without knowledge of the
            <see cref="P:Alt.GUI.ZedGraph.GraphPane.CurveList"/> class.  An alternative is to use
            the <see cref="T:Alt.GUI.ZedGraph.CurveList"/> Add() method.
            </summary>
            <param name="label">The text label (string) for the curve that will be
            used as a <see cref="T:Alt.GUI.ZedGraph.Legend"/> entry.</param>
            <param name="x">An array of double precision X values (the
            independent values) that define the curve.</param>
            <param name="y">An array of double precision Y values (the
            dependent values) that define the curve.</param>
            <param name="color">The color to used for the bars</param>
            <returns>A <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> class for the newly created bar curve.
            This can then be used to access all of the curve properties that
            are not defined as arguments to the
            <see cref="M:Alt.GUI.ZedGraph.GraphPane.AddBar(System.String,System.Double[],System.Double[],Alt.Sketch.Color)"/> method.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphPane.AddHiLowBar(System.String,System.Double[],System.Double[],System.Double[],Alt.Sketch.Color)">
            <summary>
            Add a "High-Low" bar type curve (<see cref="T:Alt.GUI.ZedGraph.HiLowBarItem"/> object) to the plot with
            the given data points (double arrays) and properties.
            This is simplified way to add curves without knowledge of the
            <see cref="P:Alt.GUI.ZedGraph.GraphPane.CurveList"/> class.  An alternative is to use
            the <see cref="T:Alt.GUI.ZedGraph.CurveList"/> Add() method.
            </summary>
            <param name="label">The text label (string) for the curve that will be
            used as a <see cref="T:Alt.GUI.ZedGraph.Legend"/> entry.</param>
            <param name="x">An array of double precision X values (the
            independent values) that define the curve.</param>
            <param name="y">An array of double precision Y values (the
            dependent values) that define the curve.</param>
            <param name="baseVal">An array of double precision values that define the
            base value (the bottom) of the bars for this curve.
            </param>
            <param name="color">The color to used for the bars</param>
            <returns>A <see cref="T:Alt.GUI.ZedGraph.HiLowBarItem"/> class for the newly created bar curve.
            This can then be used to access all of the curve properties that
            are not defined as arguments to the
            <see cref="M:Alt.GUI.ZedGraph.GraphPane.AddHiLowBar(System.String,System.Double[],System.Double[],System.Double[],Alt.Sketch.Color)"/> method.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphPane.AddHiLowBar(System.String,Alt.GUI.ZedGraph.IPointList,Alt.Sketch.Color)">
            <summary>
            Add a hi-low bar type curve (<see cref="T:Alt.GUI.ZedGraph.CurveItem"/> object) to the plot with
            the given data points (<see cref="T:Alt.GUI.ZedGraph.IPointList"/>) and properties.
            This is simplified way to add curves without knowledge of the
            <see cref="P:Alt.GUI.ZedGraph.GraphPane.CurveList"/> class.  An alternative is to use
            the <see cref="T:Alt.GUI.ZedGraph.CurveList"/> Add() method.
            </summary>
            <param name="label">The text label (string) for the curve that will be
            used as a <see cref="T:Alt.GUI.ZedGraph.Legend"/> entry.</param>
            <param name="points">A <see cref="T:Alt.GUI.ZedGraph.IPointList"/> of double precision value Trio's that define
            the X, Y, and lower dependent values for this curve</param>
            <param name="color">The color to used to fill the bars</param>
            <returns>A <see cref="T:Alt.GUI.ZedGraph.HiLowBarItem"/> class for the newly created bar curve.
            This can then be used to access all of the curve properties that
            are not defined as arguments to the
            <see cref="M:Alt.GUI.ZedGraph.GraphPane.AddHiLowBar(System.String,Alt.GUI.ZedGraph.IPointList,Alt.Sketch.Color)"/> method.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphPane.AddPieSlice(System.Double,Alt.Sketch.Color,System.Double,System.String)">
            <summary>
            Add a <see cref="T:Alt.GUI.ZedGraph.PieItem"/> to the display.
            </summary>
            <param name="value">The value associated with this <see cref="T:Alt.GUI.ZedGraph.PieItem"/>item.</param>
            <param name="color">The display color for this <see cref="T:Alt.GUI.ZedGraph.PieItem"/>item.</param>
            <param name="displacement">The amount this <see cref="T:Alt.GUI.ZedGraph.PieItem"/>item will be 
            displaced from the center of the <see cref="T:Alt.GUI.ZedGraph.PieItem"/>.</param>
            <param name="label">Text label for this <see cref="T:Alt.GUI.ZedGraph.PieItem"/></param>
            <returns>a reference to the <see cref="T:Alt.GUI.ZedGraph.PieItem"/> constructed</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphPane.AddPieSlice(System.Double,Alt.Sketch.Color,Alt.Sketch.Color,System.Single,System.Double,System.String)">
            <summary>
            Add a <see cref="T:Alt.GUI.ZedGraph.PieItem"/> to the display, providing a gradient fill for the pie color.
            </summary>
            <param name="value">The value associated with this <see cref="T:Alt.GUI.ZedGraph.PieItem"/> instance.</param>
            <param name="color1">The starting display color for the gradient <see cref="T:Alt.GUI.ZedGraph.Fill"/> for this
            <see cref="T:Alt.GUI.ZedGraph.PieItem"/> instance.</param>
            <param name="color2">The ending display color for the gradient <see cref="T:Alt.GUI.ZedGraph.Fill"/> for this
            <see cref="T:Alt.GUI.ZedGraph.PieItem"/> instance.</param>
            <param name="fillAngle">The angle for the gradient <see cref="T:Alt.GUI.ZedGraph.Fill"/>.</param>
            <param name="displacement">The amount this <see cref="T:Alt.GUI.ZedGraph.PieItem"/>  instance will be 
            displaced from the center point.</param>
            <param name="label">Text label for this <see cref="T:Alt.GUI.ZedGraph.PieItem"/> instance.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphPane.AddPieSlices(System.Double[],System.String[])">
             <summary>
            Creates all the <see cref="T:Alt.GUI.ZedGraph.PieItem"/>s for a single Pie Chart. 
             </summary>
             <param name="values">double array containing all <see cref="P:Alt.GUI.ZedGraph.PieItem.Value"/>s
             for a single PieChart.
             </param>
             <param name="labels"> string array containing all <see cref="P:Alt.GUI.ZedGraph.CurveItem.Label"/>s
             for a single PieChart.
             </param>
             <returns>an array containing references to all <see cref="T:Alt.GUI.ZedGraph.PieItem"/>s comprising
             the Pie Chart.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphPane.GeneralTransform(Alt.Sketch.Point,Alt.GUI.ZedGraph.CoordType)">
            <summary>
            Transform a data point from the specified coordinate type
            (<see cref="T:Alt.GUI.ZedGraph.CoordType"/>) to screen coordinates (pixels).
            </summary>
            <remarks>This method implicitly assumes that <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>
            has already been calculated via <see cref="M:Alt.GUI.ZedGraph.GraphPane.AxisChange"/> or
            <see cref="M:Alt.GUI.ZedGraph.GraphPane.Draw(Alt.Sketch.Graphics)"/> methods, or the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/> is
            set manually (see <see cref="P:Alt.GUI.ZedGraph.Chart.IsRectAuto"/>).</remarks>
            <param name="ptF">The X,Y pair that defines the point in user
            coordinates.</param>
            <param name="coord">A <see cref="T:Alt.GUI.ZedGraph.CoordType"/> type that defines the
            coordinate system in which the X,Y pair is defined.</param>
            <returns>A point in screen coordinates that corresponds to the
            specified user point.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphPane.GeneralTransform(System.Double,System.Double,Alt.GUI.ZedGraph.CoordType)">
            <summary>
            Transform a data point from the specified coordinate type
            (<see cref="T:Alt.GUI.ZedGraph.CoordType"/>) to screen coordinates (pixels).
            </summary>
            <remarks>This method implicitly assumes that <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>
            has already been calculated via <see cref="M:Alt.GUI.ZedGraph.GraphPane.AxisChange"/> or
            <see cref="M:Alt.GUI.ZedGraph.GraphPane.Draw(Alt.Sketch.Graphics)"/> methods, or the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/> is
            set manually (see <see cref="P:Alt.GUI.ZedGraph.Chart.IsRectAuto"/>).
            Note that this method is more accurate than the <see cref="M:Alt.GUI.ZedGraph.GraphPane.GeneralTransform(Alt.Sketch.Point,Alt.GUI.ZedGraph.CoordType)"/>
            overload, since it uses double types.  This would typically only be significant for
            <see cref="F:Alt.GUI.ZedGraph.AxisType.Date"/> coordinates.
            </remarks>
            <param name="x">The x coordinate that defines the location in user space</param>
            <param name="y">The y coordinate that defines the location in user space</param>
            <param name="coord">A <see cref="T:Alt.GUI.ZedGraph.CoordType"/> type that defines the
            coordinate system in which the X,Y pair is defined.</param>
            <returns>A point in screen coordinates that corresponds to the
            specified user point.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphPane.ReverseTransform(Alt.Sketch.Point,System.Double@,System.Double@)">
            <summary>
            Return the user scale values that correspond to the specified screen
            coordinate position (pixels).  This overload assumes the default
            <see cref="P:Alt.GUI.ZedGraph.GraphPane.XAxis"/> and <see cref="P:Alt.GUI.ZedGraph.GraphPane.YAxis"/>.
            </summary>
            <remarks>This method implicitly assumes that <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>
            has already been calculated via <see cref="M:Alt.GUI.ZedGraph.GraphPane.AxisChange"/> or
            <see cref="M:Alt.GUI.ZedGraph.GraphPane.Draw(Alt.Sketch.Graphics)"/> methods, or the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/> is
            set manually (see <see cref="P:Alt.GUI.ZedGraph.Chart.IsRectAuto"/>).</remarks>
            <param name="ptF">The X,Y pair that defines the screen coordinate
            point of interest</param>
            <param name="x">The resultant value in user coordinates from the
            <see cref="P:Alt.GUI.ZedGraph.GraphPane.XAxis"/></param>
            <param name="y">The resultant value in user coordinates from the
            primary <see cref="P:Alt.GUI.ZedGraph.GraphPane.YAxis"/></param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphPane.ReverseTransform(Alt.Sketch.Point,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Return the user scale values that correspond to the specified screen
            coordinate position (pixels).
            </summary>
            <remarks>This method implicitly assumes that <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>
            has already been calculated via <see cref="M:Alt.GUI.ZedGraph.GraphPane.AxisChange"/> or
            <see cref="M:Alt.GUI.ZedGraph.GraphPane.Draw(Alt.Sketch.Graphics)"/> methods, or the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/> is
            set manually (see <see cref="P:Alt.GUI.ZedGraph.Chart.IsRectAuto"/>).</remarks>
            <param name="ptF">The X,Y pair that defines the screen coordinate
            point of interest</param>
            <param name="x">The resultant value in user coordinates from the
            <see cref="P:Alt.GUI.ZedGraph.GraphPane.XAxis"/></param>
            <param name="x2">The resultant value in user coordinates from the
            <see cref="P:Alt.GUI.ZedGraph.GraphPane.X2Axis"/></param>
            <param name="y">The resultant value in user coordinates from the
            primary <see cref="P:Alt.GUI.ZedGraph.GraphPane.YAxis"/></param>
            <param name="y2">The resultant value in user coordinates from the
            primary <see cref="P:Alt.GUI.ZedGraph.GraphPane.Y2Axis"/></param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphPane.ReverseTransform(Alt.Sketch.Point,System.Boolean,System.Boolean,System.Int32,System.Double@,System.Double@)">
            <summary>
            Return the user scale values that correspond to the specified screen
            coordinate position (pixels).
            </summary>
            <remarks>This method implicitly assumes that <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>
            has already been calculated via <see cref="M:Alt.GUI.ZedGraph.GraphPane.AxisChange"/> or
            <see cref="M:Alt.GUI.ZedGraph.GraphPane.Draw(Alt.Sketch.Graphics)"/> methods, or the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/> is
            set manually (see <see cref="P:Alt.GUI.ZedGraph.Chart.IsRectAuto"/>).</remarks>
            <param name="ptF">The X,Y pair that defines the screen coordinate
            point of interest</param>
            <param name="isX2Axis">true to return data that corresponds to an
            <see cref="P:Alt.GUI.ZedGraph.GraphPane.X2Axis"/>, false for an <see cref="P:Alt.GUI.ZedGraph.GraphPane.XAxis"/>.</param>
            <param name="isY2Axis">true to return data that corresponds to a
            <see cref="P:Alt.GUI.ZedGraph.GraphPane.Y2Axis"/>, false for a <see cref="P:Alt.GUI.ZedGraph.GraphPane.YAxis"/>.</param>
            <param name="yAxisIndex">The ordinal index of the Y or Y2 axis from which
            to return data (see <seealso cref="P:Alt.GUI.ZedGraph.GraphPane.YAxisList"/>, <seealso cref="P:Alt.GUI.ZedGraph.GraphPane.Y2AxisList"/>)
            </param>
            <param name="x">The resultant value in user coordinates from the
            <see cref="P:Alt.GUI.ZedGraph.GraphPane.XAxis"/></param>
            <param name="y">The resultant value in user coordinates from the
            primary <see cref="P:Alt.GUI.ZedGraph.GraphPane.YAxis"/></param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphPane.ReverseTransform(Alt.Sketch.Point,System.Double@,System.Double@,System.Double[]@,System.Double[]@)">
            <summary>
            Return the user scale values that correspond to the specified screen
            coordinate position (pixels) for all y axes.
            </summary>
            <remarks>This method implicitly assumes that <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>
            has already been calculated via <see cref="M:Alt.GUI.ZedGraph.GraphPane.AxisChange"/> or
            <see cref="M:Alt.GUI.ZedGraph.GraphPane.Draw(Alt.Sketch.Graphics)"/> methods, or the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/> is
            set manually (see <see cref="P:Alt.GUI.ZedGraph.Chart.IsRectAuto"/>).</remarks>
            <param name="ptF">The X,Y pair that defines the screen coordinate
            point of interest</param>
            <param name="x">The resultant value in user coordinates from the
            <see cref="P:Alt.GUI.ZedGraph.GraphPane.XAxis"/></param>
            <param name="x2">The resultant value in user coordinates from the
            <see cref="P:Alt.GUI.ZedGraph.GraphPane.X2Axis"/></param>
            <param name="y">An array of resultant values in user coordinates from the
            list of <see cref="P:Alt.GUI.ZedGraph.GraphPane.YAxis"/> instances.  This method allocates the
            array for you, according to the number of <see cref="P:Alt.GUI.ZedGraph.GraphPane.YAxis"/> objects
            in the list.</param>
            <param name="y2">An array of resultant values in user coordinates from the
            list of <see cref="P:Alt.GUI.ZedGraph.GraphPane.Y2Axis"/> instances.  This method allocates the
            array for you, according to the number of <see cref="P:Alt.GUI.ZedGraph.GraphPane.Y2Axis"/> objects
            in the list.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphPane.AddYAxis(System.String)">
            <summary>
            Add a secondary <see cref="P:Alt.GUI.ZedGraph.GraphPane.YAxis"/> (left side) to the list of axes
            in the Graph.
            </summary>
            <remarks>
            Note that the primary <see cref="P:Alt.GUI.ZedGraph.GraphPane.YAxis"/> is always included by default.
            This method turns off the <see cref="T:Alt.GUI.ZedGraph.MajorTic"/> and <see cref="T:Alt.GUI.ZedGraph.MinorTic"/>
            <see cref="P:Alt.GUI.ZedGraph.MinorTic.IsOpposite"/> and <see cref="P:Alt.GUI.ZedGraph.MinorTic.IsInside"/>
            properties by default.
            </remarks>
            <param name="title">The title for the <see cref="P:Alt.GUI.ZedGraph.GraphPane.YAxis"/>.</param>
            <returns>the ordinal position (index) in the <see cref="P:Alt.GUI.ZedGraph.GraphPane.YAxisList"/>.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphPane.AddY2Axis(System.String)">
            <summary>
            Add a secondary <see cref="P:Alt.GUI.ZedGraph.GraphPane.Y2Axis"/> (right side) to the list of axes
            in the Graph.
            </summary>
            <remarks>
            Note that the primary <see cref="P:Alt.GUI.ZedGraph.GraphPane.Y2Axis"/> is always included by default.
            This method turns off the <see cref="T:Alt.GUI.ZedGraph.MajorTic"/> and <see cref="T:Alt.GUI.ZedGraph.MinorTic"/>
            <see cref="P:Alt.GUI.ZedGraph.MinorTic.IsOpposite"/> and <see cref="P:Alt.GUI.ZedGraph.MinorTic.IsInside"/>
            properties by default.
            </remarks>
            <param name="title">The title for the <see cref="P:Alt.GUI.ZedGraph.GraphPane.Y2Axis"/>.</param>
            <returns>the ordinal position (index) in the <see cref="P:Alt.GUI.ZedGraph.GraphPane.Y2AxisList"/>.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphPane.FindNearestObject(Alt.Sketch.Point,Alt.Sketch.Graphics,System.Object@,System.Int32@)">
            <summary>
            Find the object that lies closest to the specified mouse (screen) point.
            </summary>
            <remarks>
            This method will search through all of the graph objects, such as
            <see cref="T:Alt.GUI.ZedGraph.Axis"/>, <see cref="T:Alt.GUI.ZedGraph.Legend"/>, <see cref="P:Alt.GUI.ZedGraph.PaneBase.Title"/>,
            <see cref="T:Alt.GUI.ZedGraph.GraphObj"/>, and <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>.
            If the mouse point is within the bounding box of the items (or in the case
            of <see cref="T:Alt.GUI.ZedGraph.ArrowObj"/> and <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>, within
            <see cref="F:Alt.GUI.ZedGraph.GraphPane.Default.NearestTol"/> pixels), then the object will be returned.
            You must check the type of the object to determine what object was
            selected (for example, "if ( object is Legend ) ...").  The
            <see paramref="index"/> parameter returns the index number of the item
            within the selected object (such as the point number within a
            <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> object.
            </remarks>
            <param name="mousePt">The screen point, in pixel coordinates.</param>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="nearestObj">A reference to the nearest object to the
            specified screen point.  This can be any of <see cref="T:Alt.GUI.ZedGraph.Axis"/>,
            <see cref="T:Alt.GUI.ZedGraph.Legend"/>, <see cref="P:Alt.GUI.ZedGraph.PaneBase.Title"/>,
            <see cref="T:Alt.GUI.ZedGraph.TextObj"/>, <see cref="T:Alt.GUI.ZedGraph.ArrowObj"/>, or <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>.
            Note: If the pane title is selected, then the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object
            will be returned.
            </param>
            <param name="index">The index number of the item within the selected object
            (where applicable).  For example, for a <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> object,
            <see paramref="index"/> will be the index number of the nearest data point,
            accessible via <see cref="P:Alt.GUI.ZedGraph.CurveItem.Points">CurveItem.Points[index]</see>.
            index will be -1 if no data points are available.</param>
            <returns>true if an object was found, false otherwise.</returns>
            <seealso cref="M:Alt.GUI.ZedGraph.GraphPane.FindNearestObject(Alt.Sketch.Point,Alt.Sketch.Graphics,System.Object@,System.Int32@)"/>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphPane.FindNearestPoint(Alt.Sketch.Point,Alt.GUI.ZedGraph.CurveItem,Alt.GUI.ZedGraph.CurveItem@,System.Int32@)">
            <summary>
            Find the data point that lies closest to the specified mouse (screen)
            point for the specified curve.
            </summary>
            <remarks>
            This method will search only through the points for the specified
            curve to determine which point is
            nearest the mouse point.  It will only consider points that are within
            <see cref="F:Alt.GUI.ZedGraph.GraphPane.Default.NearestTol"/> pixels of the screen point.
            </remarks>
            <param name="mousePt">The screen point, in pixel coordinates.</param>
            <param name="nearestCurve">A reference to the <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>
            instance that contains the closest point.  nearestCurve will be null if
            no data points are available.</param>
            <param name="targetCurve">A <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> object containing
            the data points to be searched.</param>
            <param name="iNearest">The index number of the closest point.  The
            actual data vpoint will then be <see cref="P:Alt.GUI.ZedGraph.CurveItem.Points">CurveItem.Points[iNearest]</see>
            .  iNearest will
            be -1 if no data points are available.</param>
            <returns>true if a point was found and that point lies within
            <see cref="F:Alt.GUI.ZedGraph.GraphPane.Default.NearestTol"/> pixels
            of the screen point, false otherwise.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphPane.FindNearestPoint(Alt.Sketch.Point,Alt.GUI.ZedGraph.CurveItem@,System.Int32@)">
            <summary>
            Find the data point that lies closest to the specified mouse (screen)
            point.
            </summary>
            <remarks>
            This method will search through all curves in
            <see cref="P:Alt.GUI.ZedGraph.GraphPane.CurveList"/> to find which point is
            nearest.  It will only consider points that are within
            <see cref="F:Alt.GUI.ZedGraph.GraphPane.Default.NearestTol"/> pixels of the screen point.
            </remarks>
            <param name="mousePt">The screen point, in pixel coordinates.</param>
            <param name="nearestCurve">A reference to the <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>
            instance that contains the closest point.  nearestCurve will be null if
            no data points are available.</param>
            <param name="iNearest">The index number of the closest point.  The
            actual data vpoint will then be <see cref="P:Alt.GUI.ZedGraph.CurveItem.Points">CurveItem.Points[iNearest]</see>
            .  iNearest will
            be -1 if no data points are available.</param>
            <returns>true if a point was found and that point lies within
            <see cref="F:Alt.GUI.ZedGraph.GraphPane.Default.NearestTol"/> pixels
            of the screen point, false otherwise.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphPane.FindNearestPoint(Alt.Sketch.Point,Alt.GUI.ZedGraph.CurveList,Alt.GUI.ZedGraph.CurveItem@,System.Int32@)">
            <summary>
            Find the data point that lies closest to the specified mouse (screen)
            point.
            </summary>
            <remarks>
            This method will search through the specified list of curves to find which point is
            nearest.  It will only consider points that are within
            <see cref="F:Alt.GUI.ZedGraph.GraphPane.Default.NearestTol"/> pixels of the screen point, and it will
            only consider <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>'s that are in 
            <paramref name="targetCurveList"/>.
            </remarks>
            <param name="mousePt">The screen point, in pixel coordinates.</param>
            <param name="targetCurveList">A <see cref="P:Alt.GUI.ZedGraph.GraphPane.CurveList"/> object containing
            a subset of <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>'s to be searched.</param>
            <param name="nearestCurve">A reference to the <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>
            instance that contains the closest point.  nearestCurve will be null if
            no data points are available.</param>
            <param name="iNearest">The index number of the closest point.  The
            actual data vpoint will then be <see cref="P:Alt.GUI.ZedGraph.CurveItem.Points">CurveItem.Points[iNearest]</see>
            .  iNearest will
            be -1 if no data points are available.</param>
            <returns>true if a point was found and that point lies within
            <see cref="F:Alt.GUI.ZedGraph.GraphPane.Default.NearestTol"/> pixels
            of the screen point, false otherwise.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphPane.FindLinkableObject(Alt.Sketch.Point,Alt.Sketch.Graphics,System.Double,System.Object@,Alt.GUI.ZedGraph.Link@,System.Int32@)">
            <summary>
            Search through the <see cref="T:Alt.GUI.ZedGraph.GraphObjList"/> and <see cref="P:Alt.GUI.ZedGraph.GraphPane.CurveList"/> for
            items that contain active <see cref="T:Alt.GUI.ZedGraph.Link"/> objects.
            </summary>
            <param name="mousePt">The mouse location where the click occurred</param>
            <param name="g">An appropriate <see cref="T:Alt.Sketch.Graphics"/> instance</param>
            <param name="scaleFactor">The current scaling factor for drawing operations.</param>
            <param name="source">The clickable object that was found.  Typically a type of
            <see cref="T:Alt.GUI.ZedGraph.GraphObj"/> or a type of <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>.</param>
            <param name="link">The <see cref="T:Alt.GUI.ZedGraph.Link"/> instance that is contained within
            the <see paramref="source"/> object.</param>
            <param name="index">An index value, indicating which point was clicked for
            <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> type objects.</param>
            <returns>returns true if a clickable link was found under the
            <see paramref="mousePt"/>, or false otherwise.
            </returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.GraphPane.FindContainedObjects(Alt.Sketch.Rect,Alt.Sketch.Graphics,Alt.GUI.ZedGraph.CurveList@)">
            <summary>
            Find any objects that exist within the specified (screen) rectangle.
            This method will search through all of the graph objects, such as
            <see cref="T:Alt.GUI.ZedGraph.Axis"/>, <see cref="T:Alt.GUI.ZedGraph.Legend"/>, <see cref="P:Alt.GUI.ZedGraph.PaneBase.Title"/>,
            <see cref="T:Alt.GUI.ZedGraph.GraphObj"/>, and <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>.
            and see if the objects' bounding boxes are within the specified (screen) rectangle
            This method returns true if any are found.
            </summary>
        </member>
        <member name="E:Alt.GUI.ZedGraph.GraphPane.AxisChangeEvent">
            <summary>
            Subscribe to this event to be notified when <see cref="M:Alt.GUI.ZedGraph.GraphPane.AxisChange"/> is called.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.GraphPane.CurveList">
            <summary>
            Gets or sets the list of <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> items for this <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>
            </summary>
            <value>A reference to a <see cref="P:Alt.GUI.ZedGraph.GraphPane.CurveList"/> collection object</value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.GraphPane.XAxis">
            <summary>
            Accesses the <see cref="P:Alt.GUI.ZedGraph.GraphPane.XAxis"/> for this graph
            </summary>
            <value>A reference to a <see cref="P:Alt.GUI.ZedGraph.GraphPane.XAxis"/> object</value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.GraphPane.X2Axis">
            <summary>
            Accesses the <see cref="P:Alt.GUI.ZedGraph.GraphPane.X2Axis"/> for this graph
            </summary>
            <value>A reference to a <see cref="P:Alt.GUI.ZedGraph.GraphPane.X2Axis"/> object</value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.GraphPane.YAxis">
            <summary>
            Accesses the primary <see cref="P:Alt.GUI.ZedGraph.GraphPane.YAxis"/> for this graph
            </summary>
            <value>A reference to a <see cref="P:Alt.GUI.ZedGraph.GraphPane.YAxis"/> object</value>
            <seealso cref="P:Alt.GUI.ZedGraph.GraphPane.YAxisList"/>
            <seealso cref="P:Alt.GUI.ZedGraph.GraphPane.Y2AxisList"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.GraphPane.Y2Axis">
            <summary>
            Accesses the primary <see cref="P:Alt.GUI.ZedGraph.GraphPane.Y2Axis"/> for this graph
            </summary>
            <value>A reference to a <see cref="P:Alt.GUI.ZedGraph.GraphPane.Y2Axis"/> object</value>
            <seealso cref="P:Alt.GUI.ZedGraph.GraphPane.YAxisList"/>
            <seealso cref="P:Alt.GUI.ZedGraph.GraphPane.Y2AxisList"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.GraphPane.YAxisList">
            <summary>
            Gets the collection of Y axes that belong to this <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.GraphPane.Y2AxisList">
            <summary>
            Gets the collection of Y2 axes that belong to this <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.GraphPane.Chart">
            <summary>
            Gets the <see cref="P:Alt.GUI.ZedGraph.GraphPane.Chart"/> instance for this <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.GraphPane.BarSettings">
            <summary>
            Gets the <see cref="P:Alt.GUI.ZedGraph.GraphPane.BarSettings"/> instance for this <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>,
            which stores the global properties for bar type charts.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.GraphPane.IsIgnoreInitial">
            <summary>
            Gets or sets a boolean value that affects the data range that is considered
            for the automatic scale ranging.
            </summary>
            <remarks>If true, then initial data points where the Y value
            is zero are not included when automatically determining the scale <see cref="P:Alt.GUI.ZedGraph.Scale.Min"/>,
            <see cref="P:Alt.GUI.ZedGraph.Scale.Max"/>, and <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/> size.
            All data after the first non-zero Y value are included.
            </remarks>
            <seealso cref="F:Alt.GUI.ZedGraph.GraphPane.Default.IsIgnoreInitial"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.GraphPane.IsBoundedRanges">
            <summary> Gets or sets a boolean value that determines if the auto-scaled axis ranges will
            subset the data points based on any manually set scale range values.</summary>
            <remarks>The bounds provide a means to subset the data.  For example, if all the axes are set to
            autoscale, then the full range of data are used.  But, if the XAxis.Min and XAxis.Max values
            are manually set, then the Y data range will reflect the Y values within the bounds of
            XAxis.Min and XAxis.Max.  Set to true to subset the data, or false to always include
            all data points when calculating scale ranges.</remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.GraphPane.IsIgnoreMissing">
            <summary>Gets or sets a value that determines whether or not initial
            <see cref="F:Alt.GUI.ZedGraph.PointPairBase.Missing"/> values will cause the line segments of
            a curve to be discontinuous.
            </summary>
            <remarks>If this field is true, then the curves
            will be plotted as continuous lines as if the Missing values did not exist.
            Use the public property <see cref="P:Alt.GUI.ZedGraph.GraphPane.IsIgnoreMissing"/> to access
            this value. </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.GraphPane.IsAlignGrids">
            <summary>
            Gets or sets a value that determines if ZedGraph should modify the scale ranges
            for the Y and Y2 axes such that the number of major steps, and therefore the
            major grid lines, line up.
            </summary>
            <remarks>
            This property affects the way that <see cref="M:Alt.GUI.ZedGraph.GraphPane.AxisChange"/> selects the scale
            ranges for the Y and Y2 axes.  It applies to the scale ranges of all Y and Y2 axes,
            but only if the <see cref="P:Alt.GUI.ZedGraph.Scale.MaxAuto"/> is set to true.<br/>
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.GraphPane.LineType">
            <summary>Determines how the <see cref="T:Alt.GUI.ZedGraph.LineItem"/>
            graphs will be displayed. See the <see cref="T:Alt.GUI.ZedGraph.LineType"/> enum
            for the individual types available.
            </summary>
            <seealso cref="F:Alt.GUI.ZedGraph.GraphPane.Default.LineType"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.GraphPane.IsZoomed">
            <summary>
            Gets a value that indicates whether or not the <see cref="T:Alt.GUI.ZedGraph.ZoomStateStack"/> for
            this <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> is empty.  Note that this value is only used for
            the <see cref="T:Alt.GUI.ZedGraph.ZedGraphControl"/>.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.GraphPane.ZoomStack">
            <summary>
            Gets a reference to the <see cref="T:Alt.GUI.ZedGraph.ZoomStateStack"/> for this <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.GraphPane.AxisChangeEventHandler">
            <summary>
            A delegate to provide notification through the <see cref="E:Alt.GUI.ZedGraph.GraphPane.AxisChangeEvent"/>
            when <see cref="M:Alt.GUI.ZedGraph.GraphPane.AxisChange"/> is called.
            </summary>
            <param name="pane">The <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> for which AxisChange() has
            been called.</param>
            <seealso cref="E:Alt.GUI.ZedGraph.GraphPane.AxisChangeEvent"/>
        </member>
        <member name="T:Alt.GUI.ZedGraph.GraphPane.Default">
            <summary>
            A simple struct that defines the
            default property values for the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> class.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GraphPane.Default.IsIgnoreInitial">
            <summary>
            The default settings for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> scale ignore initial
            zero values option (<see cref="P:Alt.GUI.ZedGraph.GraphPane.IsIgnoreInitial"/> property).
            true to have the auto-scale-range code ignore the initial data points
            until the first non-zero Y value, false otherwise.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GraphPane.Default.IsBoundedRanges">
            <summary>
            The default settings for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> scale bounded ranges option
            (<see cref="P:Alt.GUI.ZedGraph.GraphPane.IsBoundedRanges"/> property).
            true to have the auto-scale-range code subset the data according to any
            manually set scale values, false otherwise.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GraphPane.Default.LineType">
            <summary>The default value for the <see cref="P:Alt.GUI.ZedGraph.GraphPane.LineType"/> property, which
            determines if the lines are drawn in normal or "stacked" mode.  See the
            <see cref="T:Alt.GUI.ZedGraph.LineType"/> for more information.
            </summary>
            <seealso cref="P:Alt.GUI.ZedGraph.GraphPane.LineType"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GraphPane.Default.ClusterScaleWidth">
            <summary>
            The default width of a bar cluster 
            on a <see cref="T:Alt.GUI.ZedGraph.Bar"/> graph.  This value only applies to
            <see cref="T:Alt.GUI.ZedGraph.Bar"/> graphs, and only when the
            <see cref="P:Alt.GUI.ZedGraph.Axis.Type"/> is <see cref="F:Alt.GUI.ZedGraph.AxisType.Linear"/>,
            <see cref="F:Alt.GUI.ZedGraph.AxisType.Log"/> or <see cref="F:Alt.GUI.ZedGraph.AxisType.Date"/>.
            This dimension is expressed in terms of X scale user units.
            </summary>
            <seealso cref="F:Alt.GUI.ZedGraph.BarSettings.Default.MinClusterGap"/>
            <seealso cref="P:Alt.GUI.ZedGraph.BarSettings.MinBarGap"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.GraphPane.Default.NearestTol">
            <summary>
            The tolerance that is applied to the
            <see cref="M:Alt.GUI.ZedGraph.GraphPane.FindNearestPoint(Alt.Sketch.Point,Alt.GUI.ZedGraph.CurveItem@,System.Int32@)"/> routine.
            If a given curve point is within this many pixels of the mousePt, the curve
            point is considered to be close enough for selection as a nearest point
            candidate.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.HiLowBar">
            <summary>
            This class handles the drawing of the curve <see cref="T:Alt.GUI.ZedGraph.HiLowBar"/> objects.
            The Hi-Low Bars are the "floating" bars that have a lower and upper value and
            appear at each defined point.
            </summary>
            
            <author> John Champion </author>
            <version> $Revision: 3.18 $ $Date: 2007-10-26 08:19:49 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.HiLowBar.schema2">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.HiLowBar._size">
            <summary>
            Private field that stores the size (width) of this
            <see cref="T:Alt.GUI.ZedGraph.HiLowBar"/> in points (1/72 inch).  Use the public
            property <see cref="P:Alt.GUI.ZedGraph.HiLowBar.Size"/> to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.HiLowBar._isAutoSize">
            <summary>
            Private field that determines whether the bar width will be based on
            the <see cref="P:Alt.GUI.ZedGraph.HiLowBar.Size"/> value, or it will be based on available
            space similar to <see cref="T:Alt.GUI.ZedGraph.BarItem"/> objects.  Use the public property
            <see cref="P:Alt.GUI.ZedGraph.HiLowBar.IsAutoSize"/> to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.HiLowBar._userScaleSize">
            <summary>
            The result of the autosize calculation, which is the size of the bars in
            user scale units.  This is converted to pixels at draw time.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.HiLowBar.#ctor">
            <summary>
            Default constructor that sets all <see cref="T:Alt.GUI.ZedGraph.HiLowBar"/> properties to default
            values as defined in the <see cref="T:Alt.GUI.ZedGraph.Bar.Default"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.HiLowBar.#ctor(Alt.Sketch.Color)">
            <summary>
            Default constructor that sets the 
            <see cref="T:Alt.Sketch.Color"/> as specified, and the remaining
            <see cref="T:Alt.GUI.ZedGraph.HiLowBar"/> properties to default
            values as defined in the <see cref="T:Alt.GUI.ZedGraph.Bar.Default"/> class.
            The specified color is only applied to the
            <see cref="P:Alt.GUI.ZedGraph.Fill.Color"/>, and the <see cref="P:Alt.GUI.ZedGraph.LineBase.Color"/>
            will be defaulted.
            </summary>
            <param name="color">A <see cref="T:Alt.Sketch.Color"/> value indicating
            the <see cref="P:Alt.GUI.ZedGraph.Fill.Color"/>
            of the Bar.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.HiLowBar.#ctor(Alt.Sketch.Color,System.Single)">
            <summary>
            Default constructor that sets the 
            <see cref="T:Alt.Sketch.Color"/> and <see cref="P:Alt.GUI.ZedGraph.HiLowBar.Size"/> as specified, and the remaining
            <see cref="T:Alt.GUI.ZedGraph.HiLowBar"/> properties to default
            values as defined in the <see cref="T:Alt.GUI.ZedGraph.Bar.Default"/> class.
            The specified color is only applied to the
            <see cref="P:Alt.GUI.ZedGraph.Fill.Color"/>, and the <see cref="P:Alt.GUI.ZedGraph.LineBase.Color"/>
            will be defaulted.
            </summary>
            <param name="color">A <see cref="T:Alt.Sketch.Color"/> value indicating
            the <see cref="P:Alt.GUI.ZedGraph.Fill.Color"/>
            of the Bar.
            </param>
            <param name="size">The size (width) of the <see cref="T:Alt.GUI.ZedGraph.HiLowBar"/>'s, in points
            (1/72nd inch)</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.HiLowBar.#ctor(Alt.GUI.ZedGraph.HiLowBar)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:Alt.GUI.ZedGraph.HiLowBar"/> object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.HiLowBar.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.HiLowBar.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.HiLowBar.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.HiLowBar.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.HiLowBar.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.HiLowBar.GetBarWidth(Alt.GUI.ZedGraph.GraphPane,Alt.GUI.ZedGraph.Axis,System.Single)">
            <summary>
            Returns the width of the bar, in pixels, based on the settings for
            <see cref="P:Alt.GUI.ZedGraph.HiLowBar.Size"/> and <see cref="P:Alt.GUI.ZedGraph.HiLowBar.IsAutoSize"/>.
            </summary>
            <param name="pane">The parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object.</param>
            <param name="baseAxis">The <see cref="T:Alt.GUI.ZedGraph.Axis"/> object that
            represents the bar base (independent axis).</param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <returns>The width of each bar, in pixel units</returns>
        </member>
        <member name="P:Alt.GUI.ZedGraph.HiLowBar.Size">
            <summary>
            Gets or sets the size of the <see cref="T:Alt.GUI.ZedGraph.HiLowBar"/>
            </summary>
            <remarks>The size of the bars can be set by this value, which
            is then scaled according to the scaleFactor (see
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/>).  Alternatively,
            if <see cref="P:Alt.GUI.ZedGraph.HiLowBar.IsAutoSize"/> is true, the bar width will
            be set according to the maximum available cluster width less
            the cluster gap (see <see cref="M:Alt.GUI.ZedGraph.BarSettings.GetClusterWidth"/>
            and <see cref="P:Alt.GUI.ZedGraph.BarSettings.MinClusterGap"/>).  That is, if
            <see cref="P:Alt.GUI.ZedGraph.HiLowBar.IsAutoSize"/> is true, then the value of
            <see cref="P:Alt.GUI.ZedGraph.HiLowBar.Size"/> will be ignored.  If you modify the value of Size,
            then <see cref="P:Alt.GUI.ZedGraph.HiLowBar.IsAutoSize"/> will be automatically set to false.
            </remarks>
            <value>Size in points (1/72 inch)</value>
            <seealso cref="F:Alt.GUI.ZedGraph.HiLowBar.Default.Size"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.HiLowBar.IsAutoSize">
            <summary>
            Determines whether the bar width will be based on
            the <see cref="P:Alt.GUI.ZedGraph.HiLowBar.Size"/> value, or it will be based on available
            space similar to <see cref="T:Alt.GUI.ZedGraph.BarItem"/> objects.
            </summary>
            <remarks>If true, then the value of <see cref="P:Alt.GUI.ZedGraph.HiLowBar.Size"/> is ignored. 
            If this value is true, then <see cref="P:Alt.GUI.ZedGraph.BarSettings.MinClusterGap"/> will be used to
            determine the total space between each bar.  If the base axis is non-ordinal, then
            <see cref="P:Alt.GUI.ZedGraph.BarSettings.ClusterScaleWidth"/> will be active.  In this case, you may
            want to make sure that <see cref="P:Alt.GUI.ZedGraph.BarSettings.ClusterScaleWidthAuto"/> is true.
            </remarks>
        </member>
        <member name="T:Alt.GUI.ZedGraph.HiLowBar.Default">
            <summary>
            A simple struct that defines the
            default property values for the <see cref="T:Alt.GUI.ZedGraph.HiLowBar"/> class.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.HiLowBar.Default.Size">
            <summary>
            The default size (width) for the bars (<see cref="P:Alt.GUI.ZedGraph.HiLowBar.Size"/> property),
            in units of points.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.HiLowBar.Default.IsAutoSize">
            <summary>
            Default value for the <see cref="P:Alt.GUI.ZedGraph.HiLowBar.IsAutoSize"/> property.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.HiLowBarItem">
            <summary>
            Encapsulates an "High-Low" Bar curve type that displays a bar in which both
            the bottom and the top of the bar are set by data valuesfrom the
            <see cref="T:Alt.GUI.ZedGraph.PointPair"/> struct.
            </summary>
            <remarks>The <see cref="T:Alt.GUI.ZedGraph.HiLowBarItem"/> type is intended for displaying
            bars that cover a band of data, such as a confidence interval, "waterfall"
            chart, etc.  The position of each bar is set
            according to the <see cref="T:Alt.GUI.ZedGraph.PointPair"/> values.  The independent axis
            is assigned with <see cref="P:Alt.GUI.ZedGraph.BarSettings.Base"/>, and is a
            <see cref="T:Alt.GUI.ZedGraph.BarBase"/> enum type.  If <see cref="P:Alt.GUI.ZedGraph.BarSettings.Base"/>
            is set to <see cref="F:Alt.GUI.ZedGraph.BarBase.Y"/> or <see cref="F:Alt.GUI.ZedGraph.BarBase.Y2"/>, then
            the bars will actually be horizontal, since the X axis becomes the
            value axis and the Y or Y2 axis becomes the independent axis.</remarks>
            <author> John Champion </author>
            <version> $Revision: 3.18 $ $Date: 2007-11-03 04:41:28 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.HiLowBarItem.schema3">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.HiLowBarItem.#ctor(System.String,System.Double[],System.Double[],System.Double[],Alt.Sketch.Color)">
            <summary>
            Create a new <see cref="T:Alt.GUI.ZedGraph.HiLowBarItem"/> using the specified properties.
            </summary>
            <param name="label">The label that will appear in the legend.</param>
            <param name="x">An array of double precision values that define
            the independent (X axis) values for this curve</param>
            <param name="y">An array of double precision values that define
            the dependent (Y axis) values for this curve</param>
            <param name="baseVal">An array of double precision values that define the
            base value (the bottom) of the bars for this curve.
            </param>
            <param name="color">A <see cref="T:Alt.Sketch.Color"/> value that will be applied to
            the <see cref="P:Alt.GUI.ZedGraph.Bar.Fill"/> and <see cref="P:Alt.GUI.ZedGraph.Bar.Border"/> properties.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.HiLowBarItem.#ctor(System.String,Alt.GUI.ZedGraph.IPointList,Alt.Sketch.Color)">
            <summary>
            Create a new <see cref="T:Alt.GUI.ZedGraph.HiLowBarItem"/> using the specified properties.
            </summary>
            <param name="label">The label that will appear in the legend.</param>
            <param name="points">A <see cref="T:Alt.GUI.ZedGraph.IPointList"/> of double precision value trio's that define
            the X, Y, and lower dependent values for this curve</param>
            <param name="color">A <see cref="T:Alt.Sketch.Color"/> value that will be applied to
            the <see cref="P:Alt.GUI.ZedGraph.Bar.Fill"/> and <see cref="P:Alt.GUI.ZedGraph.Bar.Border"/> properties.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.HiLowBarItem.#ctor(Alt.GUI.ZedGraph.HiLowBarItem)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:Alt.GUI.ZedGraph.HiLowBarItem"/> object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.HiLowBarItem.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.HiLowBarItem.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.HiLowBarItem.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.HiLowBarItem.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.HiLowBarItem.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="T:Alt.GUI.ZedGraph.HSBColor">
            <summary>
            Hue-Saturation-Brightness Color class to store a color value, and to manage conversions
            to and from RGB colors in the <see cref="T:Alt.Sketch.Color"/> struct.
            </summary>
            <remarks>
            This class is based on code from http://www.cs.rit.edu/~ncs/color/ by Eugene Vishnevsky.
            This struct stores the hue, saturation, brightness, and alpha values internally as
            <see cref="T:System.Byte"/> values from 0 to 255.  The hue represents a fraction of the 360 degrees
            of color space available. The saturation is the color intensity, where 0 represents gray scale
            and 255 is the most colored.  For the brightness, 0 represents black and 255
            represents white.
            </remarks>
        </member>
        <member name="F:Alt.GUI.ZedGraph.HSBColor.H">
            <summary>
            The color hue value, ranging from 0 to 255.
            </summary>
            <remarks>
            This property is actually a rescaling of the 360 degrees on the color wheel to 255
            possible values.  Therefore, every 42.5 units is a new sector, with the following
            convention:  red=0, yellow=42.5, green=85, cyan=127.5, blue=170, magenta=212.5
            </remarks>
        </member>
        <member name="F:Alt.GUI.ZedGraph.HSBColor.S">
            <summary>
            The color saturation (intensity) value, ranging from 0 (gray scale) to 255 (most colored).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.HSBColor.B">
            <summary>
            The brightness value, ranging from 0 (black) to 255 (white).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.HSBColor.A">
            <summary>
            The alpha value (opacity), ranging from 0 (transparent) to 255 (opaque).
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.HSBColor.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor to load an <see cref="T:Alt.GUI.ZedGraph.HSBColor"/> struct from hue, saturation and
            brightness values
            </summary>
            <param name="h">The color hue value, ranging from 0 to 255</param>
            <param name="s">The color saturation (intensity) value, ranging from 0 (gray scale)
            to 255 (most colored)</param>
            <param name="b">The brightness value, ranging from 0 (black) to 255 (white)</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.HSBColor.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor to load an <see cref="T:Alt.GUI.ZedGraph.HSBColor"/> struct from hue, saturation,
            brightness, and alpha values
            </summary>
            <param name="h">The color hue value, ranging from 0 to 255</param>
            <param name="s">The color saturation (intensity) value, ranging from 0 (gray scale)
            to 255 (most colored)</param>
            <param name="b">The brightness value, ranging from 0 (black) to 255 (white)</param>
            <param name="a">The alpha value (opacity), ranging from 0 (transparent) to
            255 (opaque)</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.HSBColor.#ctor(Alt.Sketch.Color)">
            <summary>
            Constructor to load an <see cref="T:Alt.GUI.ZedGraph.HSBColor"/> struct from a system
            <see cref="T:Alt.Sketch.Color"/> struct.
            </summary>
            <param name="color">An rgb <see cref="T:Alt.Sketch.Color"/> struct containing the equivalent
            color you want to generate</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.HSBColor.op_Implicit(Alt.GUI.ZedGraph.HSBColor)~Alt.Sketch.Color">
            <summary>
            Implicit conversion operator to convert directly from an <see cref="T:Alt.GUI.ZedGraph.HSBColor"/> to
            a <see cref="T:Alt.Sketch.Color"/> struct.
            </summary>
            <param name="hsbColor">The <see cref="T:Alt.GUI.ZedGraph.HSBColor"/> struct to be converted</param>
            <returns>An equivalent <see cref="T:Alt.Sketch.Color"/> struct that can be used in the GDI+
            graphics library</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.HSBColor.ToRGB(Alt.GUI.ZedGraph.HSBColor)">
            <summary>
            Convert an <see cref="T:Alt.GUI.ZedGraph.HSBColor"/> value to an equivalent <see cref="T:Alt.Sketch.Color"/> value.
            </summary>
            <remarks>
            This method is based on code from http://www.cs.rit.edu/~ncs/color/ by Eugene Vishnevsky.
            </remarks>
            <param name="hsbColor">The <see cref="T:Alt.GUI.ZedGraph.HSBColor"/> struct to be converted</param>
            <returns>An equivalent <see cref="T:Alt.Sketch.Color"/> struct, compatible with the GDI+ library</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.HSBColor.ToRGB">
            <summary>
            Convert this <see cref="T:Alt.GUI.ZedGraph.HSBColor"/> value to an equivalent <see cref="T:Alt.Sketch.Color"/> value.
            </summary>
            <remarks>
            This method is based on code from http://www.cs.rit.edu/~ncs/color/ by Eugene Vishnevsky.
            </remarks>
            <returns>An equivalent <see cref="T:Alt.Sketch.Color"/> struct, compatible with the GDI+ library</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.HSBColor.FromRGB">
            <summary>
            Convert a <see cref="T:Alt.Sketch.Color"/> value to an equivalent <see cref="T:Alt.GUI.ZedGraph.HSBColor"/> value.
            </summary>
            <remarks>
            This method is based on code from http://www.cs.rit.edu/~ncs/color/ by Eugene Vishnevsky.
            </remarks>
            <returns>An equivalent <see cref="T:Alt.GUI.ZedGraph.HSBColor"/> struct</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.HSBColor.FromRGB(Alt.Sketch.Color)">
            <summary>
            Convert a <see cref="T:Alt.Sketch.Color"/> value to an equivalent <see cref="T:Alt.GUI.ZedGraph.HSBColor"/> value.
            </summary>
            <remarks>
            This method is based on code from http://www.cs.rit.edu/~ncs/color/ by Eugene Vishnevsky.
            </remarks>
            <param name="rgbColor">The <see cref="T:Alt.Sketch.Color"/> struct to be converted</param>
            <returns>An equivalent <see cref="T:Alt.GUI.ZedGraph.HSBColor"/> struct</returns>
        </member>
        <member name="T:Alt.GUI.ZedGraph.ImageObj">
            <summary>
            A class that represents an image object on the graph.  A list of
            <see cref="T:Alt.GUI.ZedGraph.GraphObj"/> objects is maintained by the <see cref="T:Alt.GUI.ZedGraph.GraphObjList"/>
            collection class.
            </summary>
            
            <author> John Champion </author>
            <version> $Revision: 3.2 $ $Date: 2006-09-09 17:32:01 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ImageObj.schema2">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ImageObj._image">
            <summary>
            Private field that stores the image.  Use the public property <see cref="P:Alt.GUI.ZedGraph.ImageObj.Image"/>
            to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ImageObj._isScaled">
            <summary>
            Private field that determines if the image will be scaled to the output rectangle.
            </summary>
            <value>true to scale the image, false to draw the image unscaled, but clipped
            to the destination rectangle</value>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ImageObj.#ctor">
            <overloads>Constructors for the <see cref="T:Alt.GUI.ZedGraph.ImageObj"/> object</overloads>
            <summary>
            A default constructor that places a null <see cref="!:System.Drawing.Image"/> at a
            default <see cref="T:Alt.Sketch.Rect"/> of (0,0,1,1)
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ImageObj.#ctor(Alt.Sketch.Bitmap,Alt.Sketch.Rect)">
            <summary>
            A constructor that allows the <see cref="!:System.Drawing.Image"/> and
            <see cref="T:Alt.Sketch.Rect"/> location for the
            <see cref="T:Alt.GUI.ZedGraph.ImageObj"/> to be pre-specified.
            </summary>
            <param name="image">A <see cref="!:System.Drawing.Image"/> class that defines
            the image</param>
            <param name="rect">A <see cref="T:Alt.Sketch.Rect"/> struct that defines the
            image location, specifed in units based on the
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/> property.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ImageObj.#ctor(Alt.Sketch.Bitmap,Alt.Sketch.Rect,Alt.GUI.ZedGraph.CoordType,Alt.GUI.ZedGraph.AlignH,Alt.GUI.ZedGraph.AlignV)">
            <overloads>Constructors for the <see cref="T:Alt.GUI.ZedGraph.ImageObj"/> object</overloads>
            <summary>
            A constructor that allows the <see cref="!:System.Drawing.Image"/> and
            <see cref="T:Alt.Sketch.Rect"/> location for the
            <see cref="T:Alt.GUI.ZedGraph.ImageObj"/> to be pre-specified.
            </summary>
            <param name="image">A <see cref="!:System.Drawing.Image"/> class that defines
            the image</param>
            <param name="rect">A <see cref="T:Alt.Sketch.Rect"/> struct that defines the
            image location, specifed in units based on the
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/> property.</param>
            <param name="coordType">The <see cref="T:Alt.GUI.ZedGraph.CoordType"/> enum value that
            indicates what type of coordinate system the x and y parameters are
            referenced to.</param>
            <param name="alignH">The <see cref="T:Alt.GUI.ZedGraph.AlignH"/> enum that specifies
            the horizontal alignment of the object with respect to the (x,y) location</param>
            <param name="alignV">The <see cref="T:Alt.GUI.ZedGraph.AlignV"/> enum that specifies
            the vertical alignment of the object with respect to the (x,y) location</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ImageObj.#ctor(Alt.Sketch.Bitmap,System.Double,System.Double,System.Double,System.Double)">
            <overloads>Constructors for the <see cref="T:Alt.GUI.ZedGraph.ImageObj"/> object</overloads>
            <summary>
            A constructor that allows the <see cref="!:System.Drawing.Image"/> and
            individual <see cref="T:System.Single"/> coordinate locations for the
            <see cref="T:Alt.GUI.ZedGraph.ImageObj"/> to be pre-specified.
            </summary>
            <param name="image">A <see cref="!:System.Drawing.Image"/> class that defines
            the image</param>
            <param name="left">The position of the left side of the rectangle that defines the
            <see cref="T:Alt.GUI.ZedGraph.ImageObj"/> location.  The units of this position are specified by the
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/> property.</param>
            <param name="top">The position of the top side of the rectangle that defines the
            <see cref="T:Alt.GUI.ZedGraph.ImageObj"/> location.  The units of this position are specified by the
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/> property.</param>
            <param name="width">The width of the rectangle that defines the
            <see cref="T:Alt.GUI.ZedGraph.ImageObj"/> location.  The units of this position are specified by the
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/> property.</param>
            <param name="height">The height of the rectangle that defines the
            <see cref="T:Alt.GUI.ZedGraph.ImageObj"/> location.  The units of this position are specified by the
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/> property.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ImageObj.#ctor(Alt.GUI.ZedGraph.ImageObj)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:Alt.GUI.ZedGraph.ImageObj"/> object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ImageObj.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.ImageObj.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ImageObj.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ImageObj.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ImageObj.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ImageObj.Draw(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.PaneBase,System.Double)">
            <summary>
            Render this object to the specified <see cref="T:Alt.Sketch.Graphics"/> device
            This method is normally only called by the Draw method
            of the parent <see cref="T:Alt.GUI.ZedGraph.GraphObjList"/> collection object.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.PaneBase"/> object that is the parent or
            owner of this object.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ImageObj.PointInBox(Alt.Sketch.Point,Alt.GUI.ZedGraph.PaneBase,Alt.Sketch.Graphics,System.Double)">
            <summary>
            Determine if the specified screen point lies inside the bounding box of this
            <see cref="T:Alt.GUI.ZedGraph.ArrowObj"/>.  The bounding box is calculated assuming a distance
            of <see cref="F:Alt.GUI.ZedGraph.GraphPane.Default.NearestTol"/> pixels around the arrow segment.
            </summary>
            <param name="pt">The screen point, in pixels</param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.PaneBase"/> object that is the parent or
            owner of this object.
            </param>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <returns>true if the point lies in the bounding box, false otherwise</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ImageObj.GetCoords(Alt.GUI.ZedGraph.PaneBase,Alt.Sketch.Graphics,System.Double,System.String@,System.String@)">
            <summary>
            Determines the shape type and Coords values for this GraphObj
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ImageObj.Image">
            <summary>
            The <see cref="!:System.Drawing.Image"/> object.
            </summary>
            <value> A <see cref="!:System.Drawing.Image"/> class reference. </value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ImageObj.IsScaled">
            <summary>
            Gets or sets a property that determines if the image will be scaled to the
            output rectangle (see <see cref="T:Alt.GUI.ZedGraph.Location"/>).
            </summary>
            <value>true to scale the image, false to draw the image unscaled, but clipped
            to the destination rectangle</value>
        </member>
        <member name="T:Alt.GUI.ZedGraph.ImageObj.Default">
            <summary>
            A simple struct that defines the
            default property values for the <see cref="T:Alt.GUI.ZedGraph.ImageObj"/> class.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ImageObj.Default.IsScaled">
            <summary>
            Default value for the <see cref="T:Alt.GUI.ZedGraph.ImageObj"/>
            <see cref="P:Alt.GUI.ZedGraph.ImageObj.IsScaled"/> property.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.IPointListEdit">
            <summary>
            An interface to a collection class containing data
            that define the set of points to be displayed on the curve.
            </summary>
            <remarks>
            This interface is designed to allow customized data abstraction.  The default data
            collection class is <see cref="T:Alt.GUI.ZedGraph.PointPairList"/>, however, you can define your own
            data collection class using the <see cref="T:Alt.GUI.ZedGraph.IPointList"/> interface.  This
            <see cref="T:Alt.GUI.ZedGraph.IPointListEdit"/> interface adds the ability to remove and add points
            to the list, and so is used by the <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> class for the
            <see cref="M:Alt.GUI.ZedGraph.CurveItem.AddPoint(System.Double,System.Double)"/>, <see cref="M:Alt.GUI.ZedGraph.CurveItem.RemovePoint(System.Int32)"/>, and
            <see cref="M:Alt.GUI.ZedGraph.CurveItem.Clear"/> methods.
            </remarks>
            <seealso cref="T:Alt.GUI.ZedGraph.PointPairList"/>
            <seealso cref="T:Alt.GUI.ZedGraph.BasicArrayPointList"/>
            <seealso cref="T:Alt.GUI.ZedGraph.IPointList"/>
            <seealso cref="T:Alt.GUI.ZedGraph.FilteredPointList"/>
            
            <author> John Champion</author>
            <version> $Revision: 3.6 $ $Date: 2006-10-19 04:40:14 $ </version>
        </member>
        <member name="M:Alt.GUI.ZedGraph.IPointListEdit.Add(Alt.GUI.ZedGraph.PointPair)">
            <summary>
            Appends a point to the end of the list.  The data are passed in as a <see cref="T:Alt.GUI.ZedGraph.PointPair"/>
            object.
            </summary>
            <param name="point">The <see cref="T:Alt.GUI.ZedGraph.PointPair"/> object containing the data to be added.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.IPointListEdit.Add(System.Double,System.Double)">
            <summary>
            Appends a point to the end of the list.  The data are passed in as two <see cref="T:System.Double"/>
            types.
            </summary>
            <param name="x">The <see cref="T:System.Double"/> value containing the X data to be added.</param>
            <param name="y">The <see cref="T:System.Double"/> value containing the Y data to be added.</param>
            <returns>The ordinal position (zero-based), at which the new point was added.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.IPointListEdit.RemoveAt(System.Int32)">
            <summary>
            Removes a single data point from the list at the specified ordinal location
            (zero based).
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.IPointListEdit.Clear">
            <summary>
            Clears all data points from the list.  After calling this method,
            <see cref="P:Alt.GUI.ZedGraph.IPointList.Count"/> will be zero.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.IPointListEdit.Item(System.Int32)">
            <summary>
            Indexer to access a data point by its ordinal position in the collection.
            </summary>
            <remarks>
            This is the standard interface that ZedGraph uses to access the data.  Although
            you must pass a <see cref="T:Alt.GUI.ZedGraph.PointPair"/> here, your internal data storage format
            can be anything.
            </remarks>
            <param name="index">The ordinal position (zero-based) of the
            data point to be accessed.</param>
            <value>A <see cref="T:Alt.GUI.ZedGraph.PointPair"/> object instance.</value>
        </member>
        <member name="T:Alt.GUI.ZedGraph.JapaneseCandleStick">
            <summary>
            This class handles the drawing of the curve <see cref="T:Alt.GUI.ZedGraph.JapaneseCandleStick"/> objects.
            </summary>
            
            <author> John Champion </author>
            <version> $Revision: 3.10 $ $Date: 2007-04-16 00:03:02 $ </version>
        </member>
        <member name="T:Alt.GUI.ZedGraph.OHLCBar">
            <summary>
            This class handles the drawing of the curve <see cref="T:Alt.GUI.ZedGraph.OHLCBar"/> objects.
            </summary>
            
            <author> John Champion </author>
            <version> $Revision: 3.5 $ $Date: 2007-04-16 00:03:02 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.OHLCBar.schema">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.OHLCBar._isOpenCloseVisible">
            <summary>
            Private field that stores the visibility of the <see cref="T:Alt.GUI.ZedGraph.OHLCBar"/> open and
            close line segments ("wings").  Use the public
            property <see cref="P:Alt.GUI.ZedGraph.OHLCBar.IsOpenCloseVisible"/> to access this value.  If this value is
            false, the wings will not be shown.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.OHLCBar._size">
            <summary>
            Private field that stores the total width for the Opening/Closing line
            segments.  Use the public property <see cref="P:Alt.GUI.ZedGraph.OHLCBar.Size"/> to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.OHLCBar._isAutoSize">
            <summary>
            Private field that determines if the <see cref="P:Alt.GUI.ZedGraph.OHLCBar.Size"/> property will be
            calculated automatically based on the minimum axis scale step size between
            bars.  Use the public property <see cref="P:Alt.GUI.ZedGraph.OHLCBar.IsAutoSize"/> to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.OHLCBar._userScaleSize">
            <summary>
            The result of the autosize calculation, which is the size of the bars in
            user scale units.  This is converted to pixels at draw time.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.OHLCBar.#ctor">
            <summary>
            Default constructor that sets all <see cref="T:Alt.GUI.ZedGraph.OHLCBar"/> properties to
            default values as defined in the <see cref="T:Alt.GUI.ZedGraph.OHLCBar.Default"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.OHLCBar.#ctor(Alt.Sketch.Color)">
            <summary>
            Default constructor that sets the
            <see cref="T:Alt.Sketch.Color"/> as specified, and the remaining
            <see cref="T:Alt.GUI.ZedGraph.OHLCBar"/> properties to default
            values as defined in the <see cref="T:Alt.GUI.ZedGraph.OHLCBar.Default"/> class.
            </summary>
            <param name="color">A <see cref="T:Alt.Sketch.Color"/> value indicating
            the color of the symbol
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.OHLCBar.#ctor(Alt.GUI.ZedGraph.OHLCBar)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:Alt.GUI.ZedGraph.OHLCBar"/> object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.OHLCBar.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.OHLCBar.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.OHLCBar.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.OHLCBar.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.OHLCBar.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.OHLCBar.Draw(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,System.Boolean,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,Alt.Sketch.Pen)">
            <summary>
            Draw the <see cref="T:Alt.GUI.ZedGraph.OHLCBar"/> to the specified <see cref="T:Alt.Sketch.Graphics"/>
            device at the specified location.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="isXBase">boolean value that indicates if the "base" axis for this
            <see cref="T:Alt.GUI.ZedGraph.OHLCBar"/> is the X axis.  True for an <see cref="T:Alt.GUI.ZedGraph.XAxis"/> base,
            false for a <see cref="T:Alt.GUI.ZedGraph.YAxis"/> or <see cref="T:Alt.GUI.ZedGraph.Y2Axis"/> base.</param>
            <param name="pixBase">The independent axis position of the center of the candlestick in
            pixel units</param>
            <param name="pixHigh">The dependent axis position of the top of the candlestick in
            pixel units</param>
            <param name="pixLow">The dependent axis position of the bottom of the candlestick in
            pixel units</param>
            <param name="pixOpen">The dependent axis position of the opening value of the candlestick in
            pixel units</param>
            <param name="pixClose">The dependent axis position of the closing value of the candlestick in
            pixel units</param>
            <param name="halfSize">
            The scaled width of the candlesticks, pixels</param>
            <param name="pen">A pen with attributes of <see cref="T:Alt.Sketch.Color"/> and
            <see cref="P:Alt.GUI.ZedGraph.LineBase.Width"/> for this <see cref="T:Alt.GUI.ZedGraph.OHLCBar"/></param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.OHLCBar.Draw(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,Alt.GUI.ZedGraph.OHLCBarItem,Alt.GUI.ZedGraph.Axis,Alt.GUI.ZedGraph.Axis,System.Double)">
            <summary>
            Draw all the <see cref="T:Alt.GUI.ZedGraph.OHLCBar"/>'s to the specified <see cref="T:Alt.Sketch.Graphics"/>
            device as a candlestick at each defined point.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="curve">A <see cref="T:Alt.GUI.ZedGraph.OHLCBarItem"/> object representing the
            <see cref="T:Alt.GUI.ZedGraph.OHLCBar"/>'s to be drawn.</param>
            <param name="baseAxis">The <see cref="T:Alt.GUI.ZedGraph.Axis"/> class instance that defines the base (independent)
            axis for the <see cref="T:Alt.GUI.ZedGraph.OHLCBar"/></param>
            <param name="valueAxis">The <see cref="T:Alt.GUI.ZedGraph.Axis"/> class instance that defines the value (dependent)
            axis for the <see cref="T:Alt.GUI.ZedGraph.OHLCBar"/></param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.OHLCBar.GetBarWidth(Alt.GUI.ZedGraph.GraphPane,Alt.GUI.ZedGraph.Axis,System.Double)">
            <summary>
            Returns the width of the candleStick, in pixels, based on the settings for
            <see cref="P:Alt.GUI.ZedGraph.OHLCBar.Size"/> and <see cref="P:Alt.GUI.ZedGraph.OHLCBar.IsAutoSize"/>.
            </summary>
            <param name="pane">The parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object.</param>
            <param name="baseAxis">The <see cref="T:Alt.GUI.ZedGraph.Axis"/> object that
            represents the bar base (independent axis).</param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <returns>The width of each bar, in pixel units</returns>
        </member>
        <member name="P:Alt.GUI.ZedGraph.OHLCBar.IsOpenCloseVisible">
            <summary>
            Gets or sets a property that shows or hides the <see cref="T:Alt.GUI.ZedGraph.OHLCBar"/> open/close "wings".
            </summary>
            <value>true to show the CandleStick wings, false to hide them</value>
            <seealso cref="F:Alt.GUI.ZedGraph.OHLCBar.Default.IsOpenCloseVisible"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.OHLCBar.Size">
            <summary>
            Gets or sets the total width to be used for drawing the opening/closing line
            segments ("wings") of the <see cref="T:Alt.GUI.ZedGraph.OHLCBar"/> items. Units are points.
            </summary>
            <remarks>The size of the candlesticks can be set by this value, which
            is then scaled according to the scaleFactor (see
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/>).  Alternatively,
            if <see cref="P:Alt.GUI.ZedGraph.OHLCBar.IsAutoSize"/> is true, the bar width will
            be set according to the maximum available cluster width less
            the cluster gap (see <see cref="M:Alt.GUI.ZedGraph.BarSettings.GetClusterWidth"/>
            and <see cref="P:Alt.GUI.ZedGraph.BarSettings.MinClusterGap"/>).  That is, if
            <see cref="P:Alt.GUI.ZedGraph.OHLCBar.IsAutoSize"/> is true, then the value of
            <see cref="P:Alt.GUI.ZedGraph.OHLCBar.Size"/> will be ignored.  If you modify the value of Size,
            then <see cref="P:Alt.GUI.ZedGraph.OHLCBar.IsAutoSize"/> will be automatically set to false.
            </remarks>
            <value>Size in points (1/72 inch)</value>
            <seealso cref="F:Alt.GUI.ZedGraph.OHLCBar.Default.Size"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.OHLCBar.IsAutoSize">
            <summary>
            Gets or sets a value that determines if the <see cref="P:Alt.GUI.ZedGraph.OHLCBar.Size"/> property will be
            calculated automatically based on the minimum axis scale step size between
            bars.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.OHLCBar.Default">
            <summary>
            A simple struct that defines the
            default property values for the <see cref="T:Alt.GUI.ZedGraph.OHLCBar"/> class.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.OHLCBar.Default.Size">
            <summary>
            The default width for the candlesticks (see <see cref="P:Alt.GUI.ZedGraph.OHLCBar.Size"/>),
            in units of points.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.OHLCBar.Default.IsOpenCloseVisible">
            <summary>
            The default display mode for symbols (<see cref="P:Alt.GUI.ZedGraph.OHLCBar.IsOpenCloseVisible"/> property).
            true to display symbols, false to hide them.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.OHLCBar.Default.IsAutoSize">
            <summary>
            The default value for the <see cref="P:Alt.GUI.ZedGraph.OHLCBar.IsAutoSize"/> property.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.JapaneseCandleStick.schema2">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.JapaneseCandleStick._risingFill">
            <summary>
            Private field to store the <see cref="T:Alt.GUI.ZedGraph.Fill"/> class to be used for filling the
            candlestick "bars" when the <see cref="F:Alt.GUI.ZedGraph.StockPt.Close"/> value is greater than
            the <see cref="F:Alt.GUI.ZedGraph.StockPt.Open"/> value.  See the public property
            <see cref="P:Alt.GUI.ZedGraph.JapaneseCandleStick.RisingFill"/> to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.JapaneseCandleStick._fallingFill">
            <summary>
            Private field to store the <see cref="T:Alt.GUI.ZedGraph.Fill"/> class to be used for filling the
            candlestick "bars" when the <see cref="F:Alt.GUI.ZedGraph.StockPt.Close"/> value is less than
            the <see cref="F:Alt.GUI.ZedGraph.StockPt.Open"/> value.  See the public property
            <see cref="P:Alt.GUI.ZedGraph.JapaneseCandleStick.FallingFill"/> to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.JapaneseCandleStick._risingBorder">
            <summary>
            Private field to store the <see cref="T:Alt.GUI.ZedGraph.Border"/> class to be used for drawing the
            candlestick "bars" when the <see cref="F:Alt.GUI.ZedGraph.StockPt.Close"/> value is greater than
            the <see cref="F:Alt.GUI.ZedGraph.StockPt.Open"/> value.  See the public property
            <see cref="P:Alt.GUI.ZedGraph.JapaneseCandleStick.RisingBorder"/> to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.JapaneseCandleStick._fallingBorder">
            <summary>
            Private field to store the <see cref="T:Alt.GUI.ZedGraph.Border"/> class to be used for drawing the
            candlestick "bars" when the <see cref="F:Alt.GUI.ZedGraph.StockPt.Close"/> value is less than
            the <see cref="F:Alt.GUI.ZedGraph.StockPt.Open"/> value.  See the public property
            <see cref="P:Alt.GUI.ZedGraph.JapaneseCandleStick.FallingBorder"/> to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.JapaneseCandleStick._fallingColor">
            <summary>
            Private field that stores the CandleStick color when the <see cref="F:Alt.GUI.ZedGraph.StockPt.Close"/> 
            value is less than the <see cref="F:Alt.GUI.ZedGraph.StockPt.Open"/> value.  Use the public
            property <see cref="P:Alt.GUI.ZedGraph.JapaneseCandleStick.FallingColor"/> to access this value.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.JapaneseCandleStick.#ctor">
            <summary>
            Default constructor that sets all <see cref="T:Alt.GUI.ZedGraph.JapaneseCandleStick"/> properties to
            default values as defined in the <see cref="T:Alt.GUI.ZedGraph.JapaneseCandleStick.Default"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.JapaneseCandleStick.#ctor(Alt.GUI.ZedGraph.JapaneseCandleStick)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:Alt.GUI.ZedGraph.JapaneseCandleStick"/> object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.JapaneseCandleStick.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.JapaneseCandleStick.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.JapaneseCandleStick.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.JapaneseCandleStick.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.JapaneseCandleStick.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.JapaneseCandleStick.Draw(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,System.Boolean,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,Alt.Sketch.Pen,Alt.GUI.ZedGraph.Fill,Alt.GUI.ZedGraph.Border,Alt.GUI.ZedGraph.PointPair)">
            <summary>
            Draw the <see cref="T:Alt.GUI.ZedGraph.JapaneseCandleStick"/> to the specified <see cref="T:Alt.Sketch.Graphics"/>
            device at the specified location.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="isXBase">boolean value that indicates if the "base" axis for this
            <see cref="T:Alt.GUI.ZedGraph.JapaneseCandleStick"/> is the X axis.  True for an <see cref="T:Alt.GUI.ZedGraph.XAxis"/> base,
            false for a <see cref="T:Alt.GUI.ZedGraph.YAxis"/> or <see cref="T:Alt.GUI.ZedGraph.Y2Axis"/> base.</param>
            <param name="pixBase">The independent axis position of the center of the candlestick in
            pixel units</param>
            <param name="pixHigh">The high value position of the candlestick in
            pixel units</param>
            <param name="pixLow">The low value position of the candlestick in
            pixel units</param>
            <param name="pixOpen">The opening value position of the candlestick in
            pixel units</param>
            <param name="pixClose">The closing value position of the candlestick in
            pixel units</param>
            <param name="halfSize">The scaled width of one-half of a bar, in pixels</param>
            <param name="scaleFactor">
            The scaling factor for the features of the graph based on the <see cref="P:Alt.GUI.ZedGraph.PaneBase.BaseDimension"/>.  This
            scaling factor is calculated by the <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method.  The scale factor
            represents a linear multiple to be applied to font sizes, symbol sizes, etc.</param>
            <param name="pen">A pen with the <see cref="T:Alt.Sketch.Color"/> attribute for this
            <see cref="T:Alt.GUI.ZedGraph.JapaneseCandleStick"/></param>
            <param name="fill">
            The <see cref="T:Alt.GUI.ZedGraph.Fill"/> instance to be used for filling this
            <see cref="T:Alt.GUI.ZedGraph.JapaneseCandleStick"/>
            </param>
            <param name="border">The <see cref="T:Alt.GUI.ZedGraph.Border"/> instance to be used for drawing the
            border around the <see cref="T:Alt.GUI.ZedGraph.JapaneseCandleStick"/> filled box</param>
            <param name="pt">The <see cref="T:Alt.GUI.ZedGraph.PointPair"/> to be used for determining the
            <see cref="T:Alt.GUI.ZedGraph.Fill"/>, just in case it's a <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByX"/>,
            <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByY"/>, or
            <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByZ"/> <see cref="T:Alt.GUI.ZedGraph.FillType"/></param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.JapaneseCandleStick.Draw(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,Alt.GUI.ZedGraph.JapaneseCandleStickItem,Alt.GUI.ZedGraph.Axis,Alt.GUI.ZedGraph.Axis,System.Double)">
            <summary>
            Draw all the <see cref="T:Alt.GUI.ZedGraph.JapaneseCandleStick"/>'s to the specified <see cref="T:Alt.Sketch.Graphics"/>
            device as a candlestick at each defined point.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="curve">A <see cref="T:Alt.GUI.ZedGraph.JapaneseCandleStickItem"/> object representing the
            <see cref="T:Alt.GUI.ZedGraph.JapaneseCandleStick"/>'s to be drawn.</param>
            <param name="baseAxis">The <see cref="T:Alt.GUI.ZedGraph.Axis"/> class instance that defines the base (independent)
            axis for the <see cref="T:Alt.GUI.ZedGraph.JapaneseCandleStick"/></param>
            <param name="valueAxis">The <see cref="T:Alt.GUI.ZedGraph.Axis"/> class instance that defines the value (dependent)
            axis for the <see cref="T:Alt.GUI.ZedGraph.JapaneseCandleStick"/></param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="P:Alt.GUI.ZedGraph.JapaneseCandleStick.RisingFill">
            <summary>
            Gets or sets the <see cref="T:Alt.GUI.ZedGraph.Fill"/> class that is used to fill the candlestick
            "bars" when the <see cref="F:Alt.GUI.ZedGraph.StockPt.Close"/> value is greater than the
            <see cref="F:Alt.GUI.ZedGraph.StockPt.Open"/> value.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.JapaneseCandleStick.FallingFill">
            <summary>
            Gets or sets the <see cref="T:Alt.GUI.ZedGraph.Fill"/> class that is used to fill the candlestick
            "bars" when the <see cref="F:Alt.GUI.ZedGraph.StockPt.Close"/> value is less than the
            <see cref="F:Alt.GUI.ZedGraph.StockPt.Open"/> value.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.JapaneseCandleStick.RisingBorder">
            <summary>
            The <see cref="T:Alt.GUI.ZedGraph.Border"/> instance to be used for drawing the border frame of
            the candlestick "bars" when the <see cref="F:Alt.GUI.ZedGraph.StockPt.Close"/> value is greater than the
            <see cref="F:Alt.GUI.ZedGraph.StockPt.Open"/> value.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.JapaneseCandleStick.FallingBorder">
            <summary>
            The <see cref="T:Alt.GUI.ZedGraph.Border"/> instance to be used for drawing the border frame of
            the candlestick "bars" when the <see cref="F:Alt.GUI.ZedGraph.StockPt.Close"/> value is less than the
            <see cref="F:Alt.GUI.ZedGraph.StockPt.Open"/> value.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.JapaneseCandleStick.FallingColor">
            <summary>
            Gets or sets the <see cref="!:System.Drawing.Color"/> data for this
            <see cref="T:Alt.GUI.ZedGraph.JapaneseCandleStick"/> when the value of the candlestick is
            falling.
            </summary>
            <remarks>This property only controls the color of
            the vertical line when the value is falling.  The rising color is controlled
            by the <see cref="P:Alt.GUI.ZedGraph.LineBase.Color"/> property.
            </remarks>
        </member>
        <member name="T:Alt.GUI.ZedGraph.JapaneseCandleStick.Default">
            <summary>
            A simple struct that defines the
            default property values for the <see cref="T:Alt.GUI.ZedGraph.JapaneseCandleStick"/> class.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.JapaneseCandleStick.Default.RisingColor">
            <summary>
            The default fillcolor for drawing the rising case CandleSticks
            (<see cref="P:Alt.GUI.ZedGraph.JapaneseCandleStick.RisingFill"/> property).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.JapaneseCandleStick.Default.FallingColor">
            <summary>
            The default fillcolor for drawing the falling case CandleSticks
            (<see cref="P:Alt.GUI.ZedGraph.JapaneseCandleStick.FallingFill"/> property).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.JapaneseCandleStick.Default.RisingBorder">
            <summary>
            The default color for the border of the rising CandleSticks
            (<see cref="P:Alt.GUI.ZedGraph.JapaneseCandleStick.RisingBorder"/> property).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.JapaneseCandleStick.Default.FallingBorder">
            <summary>
            The default color for the border of the falling CandleSticks
            (<see cref="P:Alt.GUI.ZedGraph.JapaneseCandleStick.FallingBorder"/> property).
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.JapaneseCandleStickItem">
            <summary>
            Encapsulates a Japanese CandleStick curve type that displays a vertical (or horizontal)
            line displaying the range of data values at each sample point, plus a filled bar
            signifying the opening and closing value for the sample.
            </summary>
            <remarks>For this type to work properly, your <see cref="T:Alt.GUI.ZedGraph.IPointList"/> must contain
            <see cref="T:Alt.GUI.ZedGraph.StockPt"/> objects, rather than ordinary <see cref="T:Alt.GUI.ZedGraph.PointPair"/> types.
            This is because the <see cref="T:Alt.GUI.ZedGraph.OHLCBarItem"/> type actually displays 5 data values
            but the <see cref="T:Alt.GUI.ZedGraph.PointPair"/> only stores 3 data values.  The <see cref="T:Alt.GUI.ZedGraph.StockPt"/>
            stores <see cref="P:Alt.GUI.ZedGraph.StockPt.Date"/>, <see cref="F:Alt.GUI.ZedGraph.StockPt.Close"/>,
            <see cref="F:Alt.GUI.ZedGraph.StockPt.Open"/>, <see cref="P:Alt.GUI.ZedGraph.StockPt.High"/>, and
            <see cref="P:Alt.GUI.ZedGraph.StockPt.Low"/> members.
            For a JapaneseCandleStick chart, the range between opening and closing values
            is drawn as a filled bar, with the filled color different
            (<see cref="P:Alt.GUI.ZedGraph.JapaneseCandleStick.RisingFill"/>) for the case of
            <see cref="F:Alt.GUI.ZedGraph.StockPt.Close"/>
            higher than <see cref="F:Alt.GUI.ZedGraph.StockPt.Open"/>, and
            <see cref="P:Alt.GUI.ZedGraph.JapaneseCandleStick.FallingFill"/>
            for the reverse.  The width of the bar is controlled
            by the <see cref="P:Alt.GUI.ZedGraph.OHLCBar.Size"/> property, which is specified in
            points (1/72nd inch), and scaled according to <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/>.
            The candlesticks are drawn horizontally or vertically depending on the
            value of <see cref="P:Alt.GUI.ZedGraph.BarSettings.Base"/>, which is a
            <see cref="T:Alt.GUI.ZedGraph.BarBase"/> enum type.</remarks>
            <author> John Champion </author>
            <version> $Revision: 3.6 $ $Date: 2007-12-31 00:23:05 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.JapaneseCandleStickItem.schema2">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.JapaneseCandleStickItem._stick">
            <summary>
            Private field that stores a reference to the <see cref="T:Alt.GUI.ZedGraph.OHLCBar"/>
            class defined for this <see cref="T:Alt.GUI.ZedGraph.OHLCBarItem"/>.  Use the public
            property <see cref="T:Alt.GUI.ZedGraph.OHLCBar"/> to access this value.
            </summary>
            
        </member>
        <member name="M:Alt.GUI.ZedGraph.JapaneseCandleStickItem.IsXIndependent(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Gets a flag indicating if the X axis is the independent axis for this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>
            </summary>
            <param name="pane">The parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> of this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>.
            </param>
            <value>true if the X axis is independent, false otherwise</value>
        </member>
        <member name="M:Alt.GUI.ZedGraph.JapaneseCandleStickItem.IsZIncluded(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Gets a flag indicating if the Z data range should be included in the axis scaling calculations.
            </summary>
            <remarks>
            IsZIncluded is true for <see cref="T:Alt.GUI.ZedGraph.JapaneseCandleStickItem"/> objects, since the Y and Z
            values are defined as the High and Low values for the day.</remarks>
            <param name="pane">The parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> of this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>.
            </param>
            <value>true if the Z data are included, false otherwise</value>
        </member>
        <member name="M:Alt.GUI.ZedGraph.JapaneseCandleStickItem.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:Alt.GUI.ZedGraph.OHLCBarItem"/>, specifying only the legend label.
            </summary>
            <param name="label">The label that will appear in the legend.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.JapaneseCandleStickItem.#ctor(System.String,Alt.GUI.ZedGraph.IPointList)">
            <summary>
            Create a new <see cref="T:Alt.GUI.ZedGraph.JapaneseCandleStickItem"/> using the specified properties.
            </summary>
            <param name="label">The label that will appear in the legend.</param>
            <param name="points">An <see cref="T:Alt.GUI.ZedGraph.IPointList"/> of double precision values that define
            the Date, Close, Open, High, and Low values for the curve.  Note that this
            <see cref="T:Alt.GUI.ZedGraph.IPointList"/> should contain <see cref="T:Alt.GUI.ZedGraph.StockPt"/> items rather
            than <see cref="T:Alt.GUI.ZedGraph.PointPair"/> items.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.JapaneseCandleStickItem.#ctor(Alt.GUI.ZedGraph.JapaneseCandleStickItem)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:Alt.GUI.ZedGraph.JapaneseCandleStickItem"/> object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.JapaneseCandleStickItem.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.JapaneseCandleStickItem.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.JapaneseCandleStickItem.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.JapaneseCandleStickItem.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.JapaneseCandleStickItem.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.JapaneseCandleStickItem.Draw(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,System.Int32,System.Double)">
            <summary>
            Do all rendering associated with this <see cref="T:Alt.GUI.ZedGraph.OHLCBarItem"/> to the specified
            <see cref="T:Alt.Sketch.Graphics"/> device.  This method is normally only
            called by the Draw method of the parent <see cref="T:Alt.GUI.ZedGraph.CurveList"/>
            collection object.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="pos">The ordinal position of the current <see cref="T:Alt.GUI.ZedGraph.OHLCBarItem"/>
            curve.</param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.JapaneseCandleStickItem.DrawLegendKey(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,Alt.Sketch.Rect,System.Double)">
            <summary>
            Draw a legend key entry for this <see cref="T:Alt.GUI.ZedGraph.OHLCBarItem"/> at the specified location
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="rect">The <see cref="T:Alt.Sketch.Rect"/> struct that specifies the
            location for the legend key</param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.JapaneseCandleStickItem.GetCoords(Alt.GUI.ZedGraph.GraphPane,System.Int32,System.String@)">
            <summary>
            Determine the coords for the rectangle associated with a specified point for 
            this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>
            </summary>
            <param name="pane">The <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> to which this curve belongs</param>
            <param name="i">The index of the point of interest</param>
            <param name="coords">A list of coordinates that represents the "rect" for
            this point (used in an html AREA tag)</param>
            <returns>true if it's a valid point, false otherwise</returns>
        </member>
        <member name="P:Alt.GUI.ZedGraph.JapaneseCandleStickItem.Stick">
            <summary>
            Gets a reference to the <see cref="T:Alt.GUI.ZedGraph.JapaneseCandleStick"/> class defined
            for this <see cref="T:Alt.GUI.ZedGraph.JapaneseCandleStickItem"/>.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Legend">
            <summary>
            This class encapsulates the chart <see cref="T:Alt.GUI.ZedGraph.Legend"/> that is displayed
            in the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>
            </summary>
            
            <author> John Champion </author>
            <version> $Revision: 3.41 $ $Date: 2007-08-11 19:24:55 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Legend.schema">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Legend._rect">
            <summary> Private field to hold the bounding rectangle around the legend.
            This bounding rectangle varies with the number of legend entries, font sizes,
            etc., and is re-calculated by <see cref="M:Alt.GUI.ZedGraph.Legend.CalcRect(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.PaneBase,System.Double,Alt.Sketch.Rect@)"/> at each redraw.
            Use the public readonly property <see cref="P:Alt.GUI.ZedGraph.Legend.Rect"/> to access this
            rectangle.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Legend._position">
            <summary>Private field to hold the legend location setting.  This field
            contains the <see cref="T:Alt.GUI.ZedGraph.LegendPos"/> enum type to specify the area of
            the graph where the legend will be positioned.  Use the public property
            <see cref="T:Alt.GUI.ZedGraph.LegendPos"/> to access this value.
            </summary>
            <seealso cref="F:Alt.GUI.ZedGraph.Legend.Default.Position"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Legend._isHStack">
            <summary>
            Private field to enable/disable horizontal stacking of the legend entries.
            If this value is false, then the legend entries will always be a single column.
            Use the public property <see cref="P:Alt.GUI.ZedGraph.Legend.IsHStack"/> to access this value.
            </summary>
            <seealso cref="F:Alt.GUI.ZedGraph.Legend.Default.IsHStack"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Legend._isVisible">
            <summary>
            Private field to enable/disable drawing of the entire legend.
            If this value is false, then the legend will not be drawn.
            Use the public property <see cref="P:Alt.GUI.ZedGraph.Legend.IsVisible"/> to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Legend._fill">
            <summary>
            Private field that stores the <see cref="T:Alt.GUI.ZedGraph.Fill"/> data for this
            <see cref="T:Alt.GUI.ZedGraph.Legend"/>.  Use the public property <see cref="P:Alt.GUI.ZedGraph.Legend.Fill"/> to
            access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Legend._border">
            <summary>
            Private field that stores the <see cref="T:Alt.GUI.ZedGraph.Border"/> data for this
            <see cref="T:Alt.GUI.ZedGraph.Legend"/>.  Use the public property <see cref="P:Alt.GUI.ZedGraph.Legend.Border"/> to
            access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Legend._fontSpec">
            <summary>
            Private field to maintain the <see cref="P:Alt.GUI.ZedGraph.Legend.FontSpec"/> class that
            maintains font attributes for the entries in this legend.  Use
            the <see cref="P:Alt.GUI.ZedGraph.Legend.FontSpec"/> property to access this class.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Legend._location">
            <summary>
            Private field to maintain the <see cref="T:Alt.GUI.ZedGraph.Legend"/> location.  This object
            is only applicable if the <see cref="P:Alt.GUI.ZedGraph.Legend.Position"/> property is set to
            <see cref="F:Alt.GUI.ZedGraph.LegendPos.Float"/>.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Legend._hStack">
            <summary>
            Private temporary field to maintain the number of columns (horizontal stacking) to be used
            for drawing the <see cref="T:Alt.GUI.ZedGraph.Legend"/>.  This value is only valid during a draw operation.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Legend._legendItemWidth">
            <summary>
            Private temporary field to maintain the width of each column in the
            <see cref="T:Alt.GUI.ZedGraph.Legend"/>.  This value is only valid during a draw operation.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Legend._legendItemHeight">
            <summary>
            Private temporary field to maintain the height of each row in the
            <see cref="T:Alt.GUI.ZedGraph.Legend"/>.  This value is only valid during a draw operation.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Legend._gap">
            <summary>
            Private field to store the gap between the legend and the chart rectangle.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Legend._isReverse">
            <summary>
            Private field to select output order of legend entries.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Legend._tmpSize">
            <summary>
            Private temporary field to maintain the characteristic "gap" for the legend.
            This is normal the height of the largest font in the legend.
            This value is only valid during a draw operation.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Legend._isShowLegendSymbols">
            <summary>
            Private field to enable/diable drawing the line and symbol samples in the
            legend.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Legend.#ctor">
            <summary>
            Default constructor that sets all <see cref="T:Alt.GUI.ZedGraph.Legend"/> properties to default
            values as defined in the <see cref="T:Alt.GUI.ZedGraph.Legend.Default"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Legend.#ctor(Alt.GUI.ZedGraph.Legend)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The XAxis object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Legend.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.Legend.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Legend.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Legend.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Legend.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Legend.Draw(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.PaneBase,System.Double)">
            <summary>
            Render the <see cref="T:Alt.GUI.ZedGraph.Legend"/> to the specified <see cref="T:Alt.Sketch.Graphics"/> device.
            </summary>
            <remarks>
            This method is normally only called by the Draw method
            of the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object.
            </remarks>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.PaneBase"/> object that is the parent or
            owner of this object.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Legend.FindPoint(Alt.Sketch.Point,Alt.GUI.ZedGraph.PaneBase,System.Double,System.Int32@)">
            <summary>
            Determine if a mouse point is within the legend, and if so, which legend
            entry (<see cref="T:Alt.GUI.ZedGraph.CurveItem"/>) is nearest.
            </summary>
            <param name="mousePt">The screen point, in pixel coordinates.</param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.PaneBase"/> object that is the parent or
            owner of this object.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <param name="index">The index number of the <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> legend
            entry that is under the mouse point.  The <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> object is
            accessible via <see cref="P:Alt.GUI.ZedGraph.GraphPane.CurveList">CurveList[index]</see>.
            </param>
            <returns>true if the mouse point is within the <see cref="T:Alt.GUI.ZedGraph.Legend"/> bounding
            box, false otherwise.</returns>
            <seealso cref="M:Alt.GUI.ZedGraph.GraphPane.FindNearestObject(Alt.Sketch.Point,Alt.Sketch.Graphics,System.Object@,System.Int32@)"/>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Legend.CalcRect(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.PaneBase,System.Double,Alt.Sketch.Rect@)">
            <summary>
            Calculate the <see cref="T:Alt.GUI.ZedGraph.Legend"/> rectangle (<see cref="P:Alt.GUI.ZedGraph.Legend.Rect"/>),
            taking into account the number of required legend
            entries, and the legend drawing preferences.
            </summary>
            <remarks>Adjust the size of the
            <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/> for the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> to accomodate the
            space required by the legend.
            </remarks>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.PaneBase"/> object that is the parent or
            owner of this object.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <param name="tChartRect">
            The rectangle that contains the area bounded by the axes, in pixel units.
            <seealso cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>
            </param>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Legend.Rect">
            <summary>
            Get the bounding rectangle for the <see cref="T:Alt.GUI.ZedGraph.Legend"/> in screen coordinates
            </summary>
            <value>A screen rectangle in pixel units</value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Legend.FontSpec">
            <summary>
            Access to the <see cref="T:Alt.GUI.ZedGraph.FontSpec"/> class used to render
            the <see cref="T:Alt.GUI.ZedGraph.Legend"/> entries
            </summary>
            <value>A reference to a <see cref="T:Alt.GUI.ZedGraph.Legend"/> object</value>
            <seealso cref="F:Alt.GUI.ZedGraph.Legend.Default.FontColor"/>
            <seealso cref="F:Alt.GUI.ZedGraph.Legend.Default.FontBold"/>
            <seealso cref="F:Alt.GUI.ZedGraph.Legend.Default.FontItalic"/>
            <seealso cref="F:Alt.GUI.ZedGraph.Legend.Default.FontUnderline"/>
            <seealso cref="F:Alt.GUI.ZedGraph.Legend.Default.FontFamily"/>
            <seealso cref="F:Alt.GUI.ZedGraph.Legend.Default.FontSize"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Legend.IsVisible">
            <summary>
            Gets or sets a property that shows or hides the <see cref="T:Alt.GUI.ZedGraph.Legend"/> entirely
            </summary>
            <value> true to show the <see cref="T:Alt.GUI.ZedGraph.Legend"/>, false to hide it </value>
            <seealso cref="F:Alt.GUI.ZedGraph.Legend.Default.IsVisible"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Legend.Border">
            <summary>
            The <see cref="P:Alt.GUI.ZedGraph.Legend.Border"/> class used to draw the border border around this <see cref="T:Alt.GUI.ZedGraph.Legend"/>.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Legend.Fill">
            <summary>
            Gets or sets the <see cref="T:Alt.GUI.ZedGraph.Fill"/> data for this
            <see cref="T:Alt.GUI.ZedGraph.Legend"/> background.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Legend.IsHStack">
            <summary>
            Sets or gets a property that allows the <see cref="T:Alt.GUI.ZedGraph.Legend"/> items to
            stack horizontally in addition to the vertical stacking
            </summary>
            <value>true to allow horizontal stacking, false otherwise
            </value>
            <seealso cref="F:Alt.GUI.ZedGraph.Legend.Default.IsHStack"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Legend.Position">
            <summary>
            Sets or gets the location of the <see cref="T:Alt.GUI.ZedGraph.Legend"/> on the
            <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> using the <see cref="T:Alt.GUI.ZedGraph.LegendPos"/> enum type
            </summary>
            <seealso cref="F:Alt.GUI.ZedGraph.Legend.Default.Position"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Legend.Location">
            <summary>
            Gets or sets the <see cref="P:Alt.GUI.ZedGraph.Legend.Location"/> data for the <see cref="T:Alt.GUI.ZedGraph.Legend"/>.
            This property is only applicable if <see cref="P:Alt.GUI.ZedGraph.Legend.Position"/> is set
            to <see cref="F:Alt.GUI.ZedGraph.LegendPos.Float"/>.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Legend.Gap">
            <summary>
            Gets or sets the gap size between the legend and the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>.
            </summary>
            <remarks>
            This is expressed as a fraction of the largest scaled character height for any
            of the fonts used in the legend.  Each <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> in the legend can
            optionally have its own <see cref="P:Alt.GUI.ZedGraph.Legend.FontSpec"/> specification.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Legend.IsReverse">
            <summary>
            Gets or sets a value that determines if the legend entries are displayed in normal order
            (matching the order in the <see cref="T:Alt.GUI.ZedGraph.CurveList"/>, or in reverse order.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Legend.IsShowLegendSymbols">
            <summary>
            Gets or sets a value that determines whether the line and symbol keys will be displayed
            in the legend.
            </summary>
            <remarks>
            Note: If this value is set to false (so that only the curve label text is displayed
            with no legend keys), then the color of the font for the legend entry of each curve
            will automatically be set to match the <see cref="P:Alt.GUI.ZedGraph.CurveItem.Color"/> setting for that curve.
            You can override this behavior by specifying a specific font to be used for each
            individual curve with the <see cref="P:Alt.GUI.ZedGraph.Label.FontSpec">CurveItem.Label.FontSpec</see>
            property.
            </remarks>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Legend.Default">
            <summary>
            A simple struct that defines the
            default property values for the <see cref="T:Alt.GUI.ZedGraph.Legend"/> class.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Legend.Default.BorderWidth">
            <summary>
            The default pen width for the <see cref="T:Alt.GUI.ZedGraph.Legend"/> border border.
            (<see cref="P:Alt.GUI.ZedGraph.LineBase.Width"/> property).  Units are in pixels.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Legend.Default.BorderColor">
            <summary>
            The default color for the <see cref="T:Alt.GUI.ZedGraph.Legend"/> border border.
            (<see cref="P:Alt.GUI.ZedGraph.LineBase.Color"/> property). 
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Legend.Default.FillColor">
            <summary>
            The default color for the <see cref="T:Alt.GUI.ZedGraph.Legend"/> background.
            (<see cref="P:Alt.GUI.ZedGraph.Fill.Color"/> property).  Use of this
            color depends on the status of the <see cref="P:Alt.GUI.ZedGraph.Fill.Type"/>
            property.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Legend.Default.FillBrush">
            <summary>
            The default custom brush for filling in this <see cref="T:Alt.GUI.ZedGraph.Legend"/>.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Legend.Default.FillType">
            <summary>
            The default fill mode for the <see cref="T:Alt.GUI.ZedGraph.Legend"/> background.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Legend.Default.Position">
            <summary>
            The default location for the <see cref="T:Alt.GUI.ZedGraph.Legend"/> on the graph
            (<see cref="P:Alt.GUI.ZedGraph.Legend.Location"/> property).  This property is
            defined as a <see cref="T:Alt.GUI.ZedGraph.LegendPos"/> enumeration.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Legend.Default.IsBorderVisible">
            <summary>
            The default border mode for the <see cref="T:Alt.GUI.ZedGraph.Legend"/>.
            (<see cref="P:Alt.GUI.ZedGraph.LineBase.IsVisible"/> property). true
            to draw a border around the <see cref="P:Alt.GUI.ZedGraph.Legend.Rect"/>,
            false otherwise.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Legend.Default.IsVisible">
            <summary>
            The default display mode for the <see cref="T:Alt.GUI.ZedGraph.Legend"/>.
            (<see cref="P:Alt.GUI.ZedGraph.Legend.IsVisible"/> property). true
            to show the legend,
            false to hide it.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Legend.Default.IsFilled">
            <summary>
            The default fill mode for the <see cref="T:Alt.GUI.ZedGraph.Legend"/> background
            (<see cref="P:Alt.GUI.ZedGraph.Fill.Type"/> property).
            true to fill-in the background with color,
            false to leave the background transparent.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Legend.Default.IsHStack">
            <summary>
            The default horizontal stacking mode for the <see cref="T:Alt.GUI.ZedGraph.Legend"/>
            (<see cref="P:Alt.GUI.ZedGraph.Legend.IsHStack"/> property).
            true to allow horizontal legend item stacking, false to allow
            only vertical legend orientation.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Legend.Default.FontFamily">
            <summary>
            The default font family for the <see cref="T:Alt.GUI.ZedGraph.Legend"/> entries
            (<see cref="P:Alt.GUI.ZedGraph.FontSpec.Family"/> property).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Legend.Default.FontSize">
            <summary>
            The default font size for the <see cref="T:Alt.GUI.ZedGraph.Legend"/> entries
            (<see cref="P:Alt.GUI.ZedGraph.FontSpec.Size"/> property).  Units are
            in points (1/72 inch).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Legend.Default.FontColor">
            <summary>
            The default font color for the <see cref="T:Alt.GUI.ZedGraph.Legend"/> entries
            (<see cref="P:Alt.GUI.ZedGraph.FontSpec.FontColor"/> property).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Legend.Default.FontBold">
            <summary>
            The default font bold mode for the <see cref="T:Alt.GUI.ZedGraph.Legend"/> entries
            (<see cref="P:Alt.GUI.ZedGraph.FontSpec.IsBold"/> property). true
            for a bold typeface, false otherwise.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Legend.Default.FontItalic">
            <summary>
            The default font italic mode for the <see cref="T:Alt.GUI.ZedGraph.Legend"/> entries
            (<see cref="P:Alt.GUI.ZedGraph.FontSpec.IsItalic"/> property). true
            for an italic typeface, false otherwise.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Legend.Default.FontUnderline">
            <summary>
            The default font underline mode for the <see cref="T:Alt.GUI.ZedGraph.Legend"/> entries
            (<see cref="P:Alt.GUI.ZedGraph.FontSpec.IsUnderline"/> property). true
            for an underlined typeface, false otherwise.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Legend.Default.FontFillColor">
            <summary>
            The default color for filling in the scale text background
            (see <see cref="P:Alt.GUI.ZedGraph.Fill.Color"/> property).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Legend.Default.FontFillBrush">
            <summary>
            The default custom brush for filling in the scale text background
            (see <see cref="P:Alt.GUI.ZedGraph.Fill.Brush"/> property).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Legend.Default.FontFillType">
            <summary>
            The default fill mode for filling in the scale text background
            (see <see cref="P:Alt.GUI.ZedGraph.Fill.Type"/> property).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Legend.Default.Gap">
            <summary>
            The default gap size between the legend and the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>.
            This is the default value of <see cref="P:Alt.GUI.ZedGraph.Legend.Gap"/>.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Legend.Default.IsReverse">
            <summary>
            Default value for the <see cref="P:Alt.GUI.ZedGraph.Legend.IsReverse"/> property.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Legend.Default.IsShowLegendSymbols">
            <summary>
            Default value for the <see cref="P:Alt.GUI.ZedGraph.Legend.IsShowLegendSymbols"/> property.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Line">
            <summary>
            A class representing all the characteristics of the Line
            segments that make up a curve on the graph.
            </summary>
            
            <author> John Champion </author>
            <version> $Revision: 3.50 $ $Date: 2007-12-30 23:27:39 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Line.schema">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Line._isSmooth">
            <summary>
            Private field that stores the smoothing flag for this
            <see cref="T:Alt.GUI.ZedGraph.Line"/>.  Use the public
            property <see cref="P:Alt.GUI.ZedGraph.Line.IsSmooth"/> to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Line._smoothTension">
            <summary>
            Private field that stores the smoothing tension
            for this <see cref="T:Alt.GUI.ZedGraph.Line"/>.  Use the public property
            <see cref="P:Alt.GUI.ZedGraph.Line.SmoothTension"/> to access this value.
            </summary>
            <value>A floating point value indicating the level of smoothing.
            0.0F for no smoothing, 1.0F for lots of smoothing, &gt;1.0 for odd
            smoothing.</value>
            <seealso cref="P:Alt.GUI.ZedGraph.Line.IsSmooth"/>
            <seealso cref="F:Alt.GUI.ZedGraph.Line.Default.IsSmooth"/>
            <seealso cref="F:Alt.GUI.ZedGraph.Line.Default.SmoothTension"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Line._stepType">
            <summary>
            Private field that stores the <see cref="T:Alt.GUI.ZedGraph.StepType"/> for this
            <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>.  Use the public
            property <see cref="P:Alt.GUI.ZedGraph.Line.StepType"/> to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Line._fill">
            <summary>
            Private field that stores the <see cref="T:Alt.GUI.ZedGraph.Fill"/> data for this
            <see cref="T:Alt.GUI.ZedGraph.Line"/>.  Use the public property <see cref="P:Alt.GUI.ZedGraph.Line.Fill"/> to
            access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Line._isOptimizedDraw">
            <summary>
            Private field that determines if this <see cref="T:Alt.GUI.ZedGraph.Line"/> will be drawn with
            optimizations enabled.  Use the public
            property <see cref="P:Alt.GUI.ZedGraph.Line.IsOptimizedDraw"/> to access this value.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Line.#ctor">
            <summary>
            Default constructor that sets all <see cref="T:Alt.GUI.ZedGraph.Line"/> properties to default
            values as defined in the <see cref="T:Alt.GUI.ZedGraph.Line.Default"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Line.#ctor(Alt.Sketch.Color)">
            <summary>
            Constructor that sets the color property to the specified value, and sets
            the remaining <see cref="T:Alt.GUI.ZedGraph.Line"/> properties to default
            values as defined in the <see cref="T:Alt.GUI.ZedGraph.Line.Default"/> class.
            </summary>
            <param name="color">The color to assign to this new Line object</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Line.#ctor(Alt.GUI.ZedGraph.Line)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The Line object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Line.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.Line.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Line.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Line.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Line.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Line.Draw(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,Alt.GUI.ZedGraph.CurveItem,System.Double)">
            <summary>
            Do all rendering associated with this <see cref="T:Alt.GUI.ZedGraph.Line"/> to the specified
            <see cref="T:Alt.Sketch.Graphics"/> device.  This method is normally only
            called by the Draw method of the parent <see cref="T:Alt.GUI.ZedGraph.LineItem"/> object.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="curve">A <see cref="T:Alt.GUI.ZedGraph.LineItem"/> representing this
            curve.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Line.DrawSegment(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Render a single <see cref="T:Alt.GUI.ZedGraph.Line"/> segment to the specified
            <see cref="T:Alt.Sketch.Graphics"/> device.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <param name="x1">The x position of the starting point that defines the
            line segment in screen pixel units</param>
            <param name="y1">The y position of the starting point that defines the
            line segment in screen pixel units</param>
            <param name="x2">The x position of the ending point that defines the
            line segment in screen pixel units</param>
            <param name="y2">The y position of the ending point that defines the
            line segment in screen pixel units</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Line.DrawSticks(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,Alt.GUI.ZedGraph.CurveItem,System.Double)">
            <summary>
            Render the <see cref="T:Alt.GUI.ZedGraph.Line"/>'s as vertical sticks (from a <see cref="T:Alt.GUI.ZedGraph.StickItem"/>) to
            the specified <see cref="T:Alt.Sketch.Graphics"/> device.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="curve">A <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> representing this
            curve.</param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Line.DrawSmoothFilledCurve(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,Alt.GUI.ZedGraph.CurveItem,System.Double)">
            <summary>
            Draw the this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> to the specified <see cref="T:Alt.Sketch.Graphics"/>
            device using the specified smoothing property (<see cref="P:Alt.GUI.ZedGraph.Line.SmoothTension"/>).
            The routine draws the line segments and the area fill (if any, see <see cref="T:Alt.GUI.ZedGraph.FillType"/>;
            the symbols are drawn by the <see cref="M:Alt.GUI.ZedGraph.Symbol.Draw(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,Alt.GUI.ZedGraph.LineItem,System.Double,System.Boolean)"/> method.  This method
            is normally only called by the Draw method of the
            <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> object.  Note that the <see cref="P:Alt.GUI.ZedGraph.Line.StepType"/> property
            is ignored for smooth lines (e.g., when <see cref="P:Alt.GUI.ZedGraph.Line.IsSmooth"/> is true).
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="curve">A <see cref="T:Alt.GUI.ZedGraph.LineItem"/> representing this
            curve.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Line.DrawCurve(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,Alt.GUI.ZedGraph.CurveItem,System.Double)">
            <summary>
            Draw the this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> to the specified <see cref="T:Alt.Sketch.Graphics"/>
            device.  The format (stair-step or line) of the curve is
            defined by the <see cref="P:Alt.GUI.ZedGraph.Line.StepType"/> property.  The routine
            only draws the line segments; the symbols are drawn by the
            <see cref="M:Alt.GUI.ZedGraph.Symbol.Draw(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,Alt.GUI.ZedGraph.LineItem,System.Double,System.Boolean)"/> method.  This method
            is normally only called by the Draw method of the
            <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> object
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="curve">A <see cref="T:Alt.GUI.ZedGraph.LineItem"/> representing this
            curve.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Line.DrawCurveOriginal(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,Alt.GUI.ZedGraph.CurveItem,System.Single)">
            <summary>
            Draw the this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> to the specified <see cref="T:Alt.Sketch.Graphics"/>
            device.  The format (stair-step or line) of the curve is
            defined by the <see cref="P:Alt.GUI.ZedGraph.Line.StepType"/> property.  The routine
            only draws the line segments; the symbols are drawn by the
            <see cref="M:Alt.GUI.ZedGraph.Symbol.Draw(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,Alt.GUI.ZedGraph.LineItem,System.Double,System.Boolean)"/> method.  This method
            is normally only called by the Draw method of the
            <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> object
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="curve">A <see cref="T:Alt.GUI.ZedGraph.LineItem"/> representing this
            curve.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Line.InterpolatePoint(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,Alt.GUI.ZedGraph.CurveItem,Alt.GUI.ZedGraph.PointPair,System.Double,Alt.Sketch.Pen,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            This method just handles the case where one or more of the coordinates are outrageous,
            or GDI+ threw an exception.  This method attempts to correct the outrageous coordinates by
            interpolating them to a point (along the original line) that lies at the edge of the ChartRect
            so that GDI+ will handle it properly.  GDI+ will throw an exception, or just plot the data
            incorrectly if the coordinates are too large (empirically, this appears to be when the
            coordinate value is greater than 5,000,000 or less than -5,000,000).  Although you typically
            would not see coordinates like this, if you repeatedly zoom in on a ZedGraphControl, eventually
            all your points will be way outside the bounds of the plot.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Line.BuildPointsArray(Alt.GUI.ZedGraph.GraphPane,Alt.GUI.ZedGraph.CurveItem,Alt.Sketch.Point[]@,System.Int32@)">
            <summary>
            Build an array of <see cref="T:Alt.Sketch.Point"/> values (pixel coordinates) that represents
            the current curve.  Note that this drawing routine ignores <see cref="F:Alt.GUI.ZedGraph.PointPairBase.Missing"/>
            values, but it does not "break" the line to indicate values are missing.
            </summary>
            <param name="pane">A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.</param>
            <param name="curve">A <see cref="T:Alt.GUI.ZedGraph.LineItem"/> representing this
            curve.</param>
            <param name="arrPoints">An array of <see cref="T:Alt.Sketch.Point"/> values in pixel
            coordinates representing the current curve.</param>
            <param name="count">The number of points contained in the "arrPoints"
            parameter.</param>
            <returns>true for a successful points array build, false for data problems</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Line.BuildLowPointsArray(Alt.GUI.ZedGraph.GraphPane,Alt.GUI.ZedGraph.CurveItem,Alt.Sketch.Point[]@,System.Int32@)">
            <summary>
            Build an array of <see cref="T:Alt.Sketch.Point"/> values (pixel coordinates) that represents
            the low values for the current curve.
            </summary>
            <remarks>Note that this drawing routine ignores <see cref="F:Alt.GUI.ZedGraph.PointPairBase.Missing"/>
            values, but it does not "break" the line to indicate values are missing.
            </remarks>
            <param name="pane">A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.</param>
            <param name="curve">A <see cref="T:Alt.GUI.ZedGraph.LineItem"/> representing this
            curve.</param>
            <param name="arrPoints">An array of <see cref="T:Alt.Sketch.Point"/> values in pixel
            coordinates representing the current curve.</param>
            <param name="count">The number of points contained in the "arrPoints"
            parameter.</param>
            <returns>true for a successful points array build, false for data problems</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Line.CloseCurve(Alt.GUI.ZedGraph.GraphPane,Alt.GUI.ZedGraph.CurveItem,Alt.Sketch.Point[],System.Int32,System.Double,Alt.Sketch.GraphicsPath)">
            <summary>
            Close off a <see cref="T:Alt.Sketch.GraphicsPath"/> that defines a curve
            </summary>
            <param name="pane">A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.</param>
            <param name="curve">A <see cref="T:Alt.GUI.ZedGraph.LineItem"/> representing this
            curve.</param>
            <param name="arrPoints">An array of <see cref="T:Alt.Sketch.Point"/> values in screen pixel
            coordinates representing the current curve.</param>
            <param name="count">The number of points contained in the "arrPoints"
            parameter.</param>
            <param name="yMin">The Y axis value location where the X axis crosses.</param>
            <param name="path">The <see cref="T:Alt.Sketch.GraphicsPath"/> class that represents the curve.</param>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Line.IsSmooth">
            <summary>
            Gets or sets a property that determines if this <see cref="T:Alt.GUI.ZedGraph.Line"/>
            will be drawn smooth.  The "smoothness" is controlled by
            the <see cref="P:Alt.GUI.ZedGraph.Line.SmoothTension"/> property.
            </summary>
            <value>true to smooth the line, false to just connect the dots
            with linear segments</value>
            <seealso cref="P:Alt.GUI.ZedGraph.Line.SmoothTension"/>
            <seealso cref="F:Alt.GUI.ZedGraph.Line.Default.IsSmooth"/>
            <seealso cref="F:Alt.GUI.ZedGraph.Line.Default.SmoothTension"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Line.SmoothTension">
            <summary>
            Gets or sets a property that determines the smoothing tension
            for this <see cref="T:Alt.GUI.ZedGraph.Line"/>.  This property is only used if
            <see cref="P:Alt.GUI.ZedGraph.Line.IsSmooth"/> is true.  A tension value 0.0 will just
            draw ordinary line segments like an unsmoothed line.  A tension
            value of 1.0 will be smooth.  Values greater than 1.0 will generally
            give odd results.
            </summary>
            <value>A floating point value indicating the level of smoothing.
            0.0F for no smoothing, 1.0F for lots of smoothing, &gt;1.0 for odd
            smoothing.</value>
            <seealso cref="P:Alt.GUI.ZedGraph.Line.IsSmooth"/>
            <seealso cref="F:Alt.GUI.ZedGraph.Line.Default.IsSmooth"/>
            <seealso cref="F:Alt.GUI.ZedGraph.Line.Default.SmoothTension"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Line.StepType">
            <summary>
            Determines if the <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> will be drawn by directly connecting the
            points from the <see cref="P:Alt.GUI.ZedGraph.CurveItem.Points"/> data collection,
            or if the curve will be a "stair-step" in which the points are
            connected by a series of horizontal and vertical lines that
            represent discrete, constant values.  Note that the values can
            be forward oriented <c>ForwardStep</c> (<see cref="T:Alt.GUI.ZedGraph.StepType"/>) or
            rearward oriented <c>RearwardStep</c>.
            That is, the points are defined at the beginning or end
            of the constant value for which they apply, respectively.
            The <see cref="P:Alt.GUI.ZedGraph.Line.StepType"/> property is ignored for lines
            that have <see cref="P:Alt.GUI.ZedGraph.Line.IsSmooth"/> set to true.
            </summary>
            <value><see cref="T:Alt.GUI.ZedGraph.StepType"/> enum value</value>
            <seealso cref="F:Alt.GUI.ZedGraph.Line.Default.StepType"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Line.Fill">
            <summary>
            Gets or sets the <see cref="T:Alt.GUI.ZedGraph.Fill"/> data for this
            <see cref="T:Alt.GUI.ZedGraph.Line"/>.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Line.IsOptimizedDraw">
            <summary>
            Gets or sets a boolean value that determines if this <see cref="T:Alt.GUI.ZedGraph.Line"/> will be drawn with
            optimizations enabled.
            </summary>
            <remarks>
            Normally, the optimizations can be used without a problem, especially if the data
            are sorted.  The optimizations are particularly helpful with very large datasets.
            However, if the data are very discontinuous (for example, a curve that doubles back
            on itself), then the optimizations can cause drawing artifacts in the form of
            missing line segments.  The default option for this mode is false, so you must
            explicitly enable it for each <see cref="P:Alt.GUI.ZedGraph.LineItem.Line">LineItem.Line</see>.
            Also note that, even if the optimizations are enabled explicitly, no actual
            optimization will be done for datasets of less than 1000 points.
            </remarks>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Line.Default">
            <summary>
            A simple struct that defines the
            default property values for the <see cref="T:Alt.GUI.ZedGraph.Line"/> class.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Line.Default.Color">
            <summary>
            The default color for curves (line segments connecting the points).
            This is the default value for the <see cref="P:Alt.GUI.ZedGraph.LineBase.Color"/> property.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Line.Default.FillColor">
            <summary>
            The default color for filling in the area under the curve
            (<see cref="P:Alt.GUI.ZedGraph.Fill.Color"/> property).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Line.Default.FillBrush">
            <summary>
            The default custom brush for filling in the area under the curve
            (<see cref="P:Alt.GUI.ZedGraph.Fill.Brush"/> property).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Line.Default.FillType">
            <summary>
            The default fill mode for the curve (<see cref="P:Alt.GUI.ZedGraph.Fill.Type"/> property).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Line.Default.IsSmooth">
            <summary>
            The default value for the <see cref="P:Alt.GUI.ZedGraph.Line.IsSmooth"/>
            property.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Line.Default.SmoothTension">
            <summary>
            The default value for the <see cref="P:Alt.GUI.ZedGraph.Line.SmoothTension"/> property.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Line.Default.IsOptimizedDraw">
            <summary>
            The default value for the <see cref="P:Alt.GUI.ZedGraph.Line.IsOptimizedDraw"/> property.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Line.Default.StepType">
            <summary>
            Default value for the curve type property
            (<see cref="P:Alt.GUI.ZedGraph.Line.StepType"/>).  This determines if the curve
            will be drawn by directly connecting the points from the
            <see cref="P:Alt.GUI.ZedGraph.CurveItem.Points"/> data collection,
            or if the curve will be a "stair-step" in which the points are
            connected by a series of horizontal and vertical lines that
            represent discrete, staticant values.  Note that the values can
            be forward oriented <code>ForwardStep</code> (<see cref="F:Alt.GUI.ZedGraph.Line.Default.StepType"/>) or
            rearward oriented <code>RearwardStep</code>.
            That is, the points are defined at the beginning or end
            of the staticant value for which they apply, respectively.
            </summary>
            <value><see cref="F:Alt.GUI.ZedGraph.Line.Default.StepType"/> enum value</value>
        </member>
        <member name="T:Alt.GUI.ZedGraph.LinearAsOrdinalScale">
            <summary>
            The LinearAsOrdinalScale class inherits from the <see cref="T:Alt.GUI.ZedGraph.Scale"/> class, and implements
            the features specific to <see cref="F:Alt.GUI.ZedGraph.AxisType.LinearAsOrdinal"/>.
            </summary>
            <remarks>
            LinearAsOrdinal is an ordinal axis that will have labels formatted with values from the actual data
            values of the first <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> in the <see cref="T:Alt.GUI.ZedGraph.CurveList"/>.
            Although the tics are labeled with real data values, the actual points will be
            evenly-spaced in spite of the data values.  For example, if the X values of the first curve
            are 1, 5, and 100, then the tic labels will show 1, 5, and 100, but they will be equal
            distance from each other.
            </remarks>
            
            <author> John Champion  </author>
            <version> $Revision: 1.10 $ $Date: 2007-04-16 00:03:02 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.LinearAsOrdinalScale.schema2">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LinearAsOrdinalScale.#ctor(Alt.GUI.ZedGraph.Axis)">
            <summary>
            Default constructor that defines the owner <see cref="T:Alt.GUI.ZedGraph.Axis"/>
            (containing object) for this new object.
            </summary>
            <param name="owner">The owner, or containing object, of this instance</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LinearAsOrdinalScale.#ctor(Alt.GUI.ZedGraph.Scale,Alt.GUI.ZedGraph.Axis)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:Alt.GUI.ZedGraph.LinearAsOrdinalScale"/> object from which to copy</param>
            <param name="owner">The <see cref="T:Alt.GUI.ZedGraph.Axis"/> object that will own the
            new instance of <see cref="T:Alt.GUI.ZedGraph.LinearAsOrdinalScale"/></param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LinearAsOrdinalScale.Clone(Alt.GUI.ZedGraph.Axis)">
            <summary>
            Create a new clone of the current item, with a new owner assignment
            </summary>
            <param name="owner">The new <see cref="T:Alt.GUI.ZedGraph.Axis"/> instance that will be
            the owner of the new Scale</param>
            <returns>A new <see cref="T:Alt.GUI.ZedGraph.Scale"/> clone.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LinearAsOrdinalScale.PickScale(Alt.GUI.ZedGraph.GraphPane,Alt.Sketch.Graphics,System.Double)">
            <summary>
            Select a reasonable ordinal axis scale given a range of data values, with the expectation that
            linear values will be displayed.
            </summary>
            <remarks>
            This method only applies to <see cref="F:Alt.GUI.ZedGraph.AxisType.DateAsOrdinal"/> type axes, and it
            is called by the general <see cref="M:Alt.GUI.ZedGraph.Scale.PickScale(Alt.GUI.ZedGraph.GraphPane,Alt.Sketch.Graphics,System.Double)"/> method.  For this type,
            the first curve is the "master", which contains the dates to be applied.
            <para>On Exit:</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.Min"/> is set to scale minimum (if <see cref="P:Alt.GUI.ZedGraph.Scale.MinAuto"/> = true)</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.Max"/> is set to scale maximum (if <see cref="P:Alt.GUI.ZedGraph.Scale.MaxAuto"/> = true)</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/> is set to scale step size (if <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStepAuto"/> = true)</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.MinorStep"/> is set to scale minor step size (if <see cref="P:Alt.GUI.ZedGraph.Scale.MinorStepAuto"/> = true)</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.Mag"/> is set to a magnitude multiplier according to the data</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.Format"/> is set to the display format for the values (this controls the
            number of decimal places, whether there are thousands separators, currency types, etc.)</para>
            </remarks>
            <param name="pane">A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object
            associated with this <see cref="T:Alt.GUI.ZedGraph.Axis"/></param>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <seealso cref="M:Alt.GUI.ZedGraph.LinearAsOrdinalScale.PickScale(Alt.GUI.ZedGraph.GraphPane,Alt.Sketch.Graphics,System.Double)"/>
            <seealso cref="F:Alt.GUI.ZedGraph.AxisType.Ordinal"/>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LinearAsOrdinalScale.MakeLabel(Alt.GUI.ZedGraph.GraphPane,System.Int32,System.Double)">
            <summary>
            Make a value label for an <see cref="F:Alt.GUI.ZedGraph.AxisType.LinearAsOrdinal"/> <see cref="T:Alt.GUI.ZedGraph.Axis"/>.
            </summary>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="index">
            The zero-based, ordinal index of the label to be generated.  For example, a value of 2 would
            cause the third value label on the axis to be generated.
            </param>
            <param name="dVal">
            The numeric value associated with the label.  This value is ignored for log (<see cref="P:Alt.GUI.ZedGraph.Scale.IsLog"/>)
            and text (<see cref="P:Alt.GUI.ZedGraph.Scale.IsText"/>) type axes.
            </param>
            <returns>The resulting value label as a <see cref="T:System.String"/></returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LinearAsOrdinalScale.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LinearAsOrdinalScale.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="P:Alt.GUI.ZedGraph.LinearAsOrdinalScale.Type">
            <summary>
            Return the <see cref="T:Alt.GUI.ZedGraph.AxisType"/> for this <see cref="T:Alt.GUI.ZedGraph.Scale"/>, which is
            <see cref="F:Alt.GUI.ZedGraph.AxisType.LinearAsOrdinal"/>.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.LinearScale">
            <summary>
            The LinearScale class inherits from the <see cref="T:Alt.GUI.ZedGraph.Scale"/> class, and implements
            the features specific to <see cref="F:Alt.GUI.ZedGraph.AxisType.Linear"/>.
            </summary>
            <remarks>
            LinearScale is the normal, default cartesian axis.
            </remarks>
            
            <author> John Champion  </author>
            <version> $Revision: 1.10 $ $Date: 2007-04-16 00:03:02 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.LinearScale.schema2">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LinearScale.#ctor(Alt.GUI.ZedGraph.Axis)">
            <summary>
            Default constructor that defines the owner <see cref="T:Alt.GUI.ZedGraph.Axis"/>
            (containing object) for this new object.
            </summary>
            <param name="owner">The owner, or containing object, of this instance</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LinearScale.#ctor(Alt.GUI.ZedGraph.Scale,Alt.GUI.ZedGraph.Axis)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:Alt.GUI.ZedGraph.LinearScale"/> object from which to copy</param>
            <param name="owner">The <see cref="T:Alt.GUI.ZedGraph.Axis"/> object that will own the
            new instance of <see cref="T:Alt.GUI.ZedGraph.LinearScale"/></param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LinearScale.Clone(Alt.GUI.ZedGraph.Axis)">
            <summary>
            Create a new clone of the current item, with a new owner assignment
            </summary>
            <param name="owner">The new <see cref="T:Alt.GUI.ZedGraph.Axis"/> instance that will be
            the owner of the new Scale</param>
            <returns>A new <see cref="T:Alt.GUI.ZedGraph.Scale"/> clone.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LinearScale.PickScale(Alt.GUI.ZedGraph.GraphPane,Alt.Sketch.Graphics,System.Double)">
            <summary>
            Select a reasonable linear axis scale given a range of data values.
            </summary>
            <remarks>
            This method only applies to <see cref="F:Alt.GUI.ZedGraph.AxisType.Linear"/> type axes, and it
            is called by the general <see cref="M:Alt.GUI.ZedGraph.Scale.PickScale(Alt.GUI.ZedGraph.GraphPane,Alt.Sketch.Graphics,System.Double)"/> method.  The scale range is chosen
            based on increments of 1, 2, or 5 (because they are even divisors of 10).  This
            method honors the <see cref="P:Alt.GUI.ZedGraph.Scale.MinAuto"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.MaxAuto"/>,
            and <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStepAuto"/> autorange settings.
            In the event that any of the autorange settings are false, the
            corresponding <see cref="P:Alt.GUI.ZedGraph.Scale.Min"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.Max"/>, or <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/>
            setting is explicitly honored, and the remaining autorange settings (if any) will
            be calculated to accomodate the non-autoranged values.  The basic defaults for
            scale selection are defined using <see cref="F:Alt.GUI.ZedGraph.Scale.Default.ZeroLever"/>,
            <see cref="F:Alt.GUI.ZedGraph.Scale.Default.TargetXSteps"/>, and <see cref="F:Alt.GUI.ZedGraph.Scale.Default.TargetYSteps"/>
            from the <see cref="T:Alt.GUI.ZedGraph.Scale.Default"/> default class.
            <para>On Exit:</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.Min"/> is set to scale minimum (if <see cref="P:Alt.GUI.ZedGraph.Scale.MinAuto"/> = true)</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.Max"/> is set to scale maximum (if <see cref="P:Alt.GUI.ZedGraph.Scale.MaxAuto"/> = true)</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/> is set to scale step size (if <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStepAuto"/> = true)</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.MinorStep"/> is set to scale minor step size (if <see cref="P:Alt.GUI.ZedGraph.Scale.MinorStepAuto"/> = true)</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.Mag"/> is set to a magnitude multiplier according to the data</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.Format"/> is set to the display format for the values (this controls the
            number of decimal places, whether there are thousands separators, currency types, etc.)</para>
            </remarks>
            <param name="pane">A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object
            associated with this <see cref="T:Alt.GUI.ZedGraph.Axis"/></param>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <seealso cref="M:Alt.GUI.ZedGraph.LinearScale.PickScale(Alt.GUI.ZedGraph.GraphPane,Alt.Sketch.Graphics,System.Double)"/>
            <seealso cref="F:Alt.GUI.ZedGraph.AxisType.Linear"/>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LinearScale.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LinearScale.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="P:Alt.GUI.ZedGraph.LinearScale.Type">
            <summary>
            Return the <see cref="T:Alt.GUI.ZedGraph.AxisType"/> for this <see cref="T:Alt.GUI.ZedGraph.Scale"/>, which is
            <see cref="F:Alt.GUI.ZedGraph.AxisType.Linear"/>.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.LineItem">
            <summary>
            Encapsulates a curve type that is displayed as a line and/or a set of
            symbols at each point.
            </summary>
            
            <author> John Champion </author>
            <version> $Revision: 3.22 $ $Date: 2007-08-10 16:22:54 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.LineItem.schema2">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.LineItem._symbol">
            <summary>
            Private field that stores a reference to the <see cref="T:Alt.GUI.ZedGraph.Symbol"/>
            class defined for this <see cref="T:Alt.GUI.ZedGraph.LineItem"/>.  Use the public
            property <see cref="P:Alt.GUI.ZedGraph.LineItem.Symbol"/> to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.LineItem._line">
            <summary>
            Private field that stores a reference to the <see cref="T:Alt.GUI.ZedGraph.Line"/>
            class defined for this <see cref="T:Alt.GUI.ZedGraph.LineItem"/>.  Use the public
            property <see cref="P:Alt.GUI.ZedGraph.LineItem.Line"/> to access this value.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LineItem.IsZIncluded(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Gets a flag indicating if the Z data range should be included in the axis scaling calculations.
            </summary>
            <param name="pane">The parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> of this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>.
            </param>
            <value>true if the Z data are included, false otherwise</value>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LineItem.IsXIndependent(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Gets a flag indicating if the X axis is the independent axis for this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>
            </summary>
            <param name="pane">The parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> of this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>.
            </param>
            <value>true if the X axis is independent, false otherwise</value>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LineItem.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:Alt.GUI.ZedGraph.LineItem"/>, specifying only the legend <see cref="P:Alt.GUI.ZedGraph.CurveItem.Label"/>.
            </summary>
            <param name="label">The _label that will appear in the legend.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LineItem.#ctor(System.String,System.Double[],System.Double[],Alt.Sketch.Color,Alt.GUI.ZedGraph.SymbolType,System.Single)">
            <summary>
            Create a new <see cref="T:Alt.GUI.ZedGraph.LineItem"/> using the specified properties.
            </summary>
            <param name="label">The _label that will appear in the legend.</param>
            <param name="x">An array of double precision values that define
            the independent (X axis) values for this curve</param>
            <param name="y">An array of double precision values that define
            the dependent (Y axis) values for this curve</param>
            <param name="color">A <see cref="T:Alt.Sketch.Color"/> value that will be applied to
            the <see cref="P:Alt.GUI.ZedGraph.LineItem.Line"/> and <see cref="P:Alt.GUI.ZedGraph.LineItem.Symbol"/> properties.
            </param>
            <param name="symbolType">A <see cref="T:Alt.GUI.ZedGraph.SymbolType"/> enum specifying the
            type of symbol to use for this <see cref="T:Alt.GUI.ZedGraph.LineItem"/>.  Use <see cref="F:Alt.GUI.ZedGraph.SymbolType.None"/>
            to hide the symbols.</param>
            <param name="lineWidth">The width (in points) to be used for the <see cref="P:Alt.GUI.ZedGraph.LineItem.Line"/>.  This
            width is scaled based on <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/>.  Use a value of zero to
            hide the line (see <see cref="P:Alt.GUI.ZedGraph.LineBase.IsVisible"/>).</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LineItem.#ctor(System.String,System.Double[],System.Double[],Alt.Sketch.Color,Alt.GUI.ZedGraph.SymbolType)">
            <summary>
            Create a new <see cref="T:Alt.GUI.ZedGraph.LineItem"/> using the specified properties.
            </summary>
            <param name="label">The _label that will appear in the legend.</param>
            <param name="x">An array of double precision values that define
            the independent (X axis) values for this curve</param>
            <param name="y">An array of double precision values that define
            the dependent (Y axis) values for this curve</param>
            <param name="color">A <see cref="T:Alt.Sketch.Color"/> value that will be applied to
            the <see cref="P:Alt.GUI.ZedGraph.LineItem.Line"/> and <see cref="P:Alt.GUI.ZedGraph.LineItem.Symbol"/> properties.
            </param>
            <param name="symbolType">A <see cref="T:Alt.GUI.ZedGraph.SymbolType"/> enum specifying the
            type of symbol to use for this <see cref="T:Alt.GUI.ZedGraph.LineItem"/>.  Use <see cref="F:Alt.GUI.ZedGraph.SymbolType.None"/>
            to hide the symbols.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LineItem.#ctor(System.String,Alt.GUI.ZedGraph.IPointList,Alt.Sketch.Color,Alt.GUI.ZedGraph.SymbolType,System.Single)">
            <summary>
            Create a new <see cref="T:Alt.GUI.ZedGraph.LineItem"/> using the specified properties.
            </summary>
            <param name="label">The _label that will appear in the legend.</param>
            <param name="points">A <see cref="T:Alt.GUI.ZedGraph.IPointList"/> of double precision value pairs that define
            the X and Y values for this curve</param>
            <param name="color">A <see cref="T:Alt.Sketch.Color"/> value that will be applied to
            the <see cref="P:Alt.GUI.ZedGraph.LineItem.Line"/> and <see cref="P:Alt.GUI.ZedGraph.LineItem.Symbol"/> properties.
            </param>
            <param name="symbolType">A <see cref="T:Alt.GUI.ZedGraph.SymbolType"/> enum specifying the
            type of symbol to use for this <see cref="T:Alt.GUI.ZedGraph.LineItem"/>.  Use <see cref="F:Alt.GUI.ZedGraph.SymbolType.None"/>
            to hide the symbols.</param>
            <param name="lineWidth">The width (in points) to be used for the <see cref="P:Alt.GUI.ZedGraph.LineItem.Line"/>.  This
            width is scaled based on <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/>.  Use a value of zero to
            hide the line (see <see cref="P:Alt.GUI.ZedGraph.LineBase.IsVisible"/>).</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LineItem.#ctor(System.String,Alt.GUI.ZedGraph.IPointList,Alt.Sketch.Color,Alt.GUI.ZedGraph.SymbolType)">
            <summary>
            Create a new <see cref="T:Alt.GUI.ZedGraph.LineItem"/> using the specified properties.
            </summary>
            <param name="label">The _label that will appear in the legend.</param>
            <param name="points">A <see cref="T:Alt.GUI.ZedGraph.IPointList"/> of double precision value pairs that define
            the X and Y values for this curve</param>
            <param name="color">A <see cref="T:Alt.Sketch.Color"/> value that will be applied to
            the <see cref="P:Alt.GUI.ZedGraph.LineItem.Line"/> and <see cref="P:Alt.GUI.ZedGraph.LineItem.Symbol"/> properties.
            </param>
            <param name="symbolType">A <see cref="T:Alt.GUI.ZedGraph.SymbolType"/> enum specifying the
            type of symbol to use for this <see cref="T:Alt.GUI.ZedGraph.LineItem"/>.  Use <see cref="F:Alt.GUI.ZedGraph.SymbolType.None"/>
            to hide the symbols.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LineItem.#ctor(Alt.GUI.ZedGraph.LineItem)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:Alt.GUI.ZedGraph.LineItem"/> object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LineItem.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.LineItem.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LineItem.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LineItem.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LineItem.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LineItem.Draw(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,System.Int32,System.Double)">
            <summary>
            Do all rendering associated with this <see cref="T:Alt.GUI.ZedGraph.LineItem"/> to the specified
            <see cref="T:Alt.Sketch.Graphics"/> device.  This method is normally only
            called by the Draw method of the parent <see cref="T:Alt.GUI.ZedGraph.CurveList"/>
            collection object.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="pos">The ordinal position of the current <see cref="T:Alt.GUI.ZedGraph.Bar"/>
            curve.</param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LineItem.DrawLegendKey(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,Alt.Sketch.Rect,System.Double)">
            <summary>
            Draw a legend key entry for this <see cref="T:Alt.GUI.ZedGraph.LineItem"/> at the specified location
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="rect">The <see cref="T:Alt.Sketch.Rect"/> struct that specifies the
            location for the legend key</param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LineItem.MakeUnique(Alt.GUI.ZedGraph.ColorSymbolRotator)">
            <summary>
            Loads some pseudo unique colors/symbols into this LineItem.  This
            is mainly useful for differentiating a set of new LineItems without
            having to pick your own colors/symbols.
            <seealso cref="M:Alt.GUI.ZedGraph.CurveItem.MakeUnique(Alt.GUI.ZedGraph.ColorSymbolRotator)"/>
            </summary>
            <param name="rotator">
            The <see cref="T:Alt.GUI.ZedGraph.ColorSymbolRotator"/> that is used to pick the color
             and symbol for this method call.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LineItem.GetCoords(Alt.GUI.ZedGraph.GraphPane,System.Int32,System.String@)">
            <summary>
            Determine the coords for the rectangle associated with a specified point for 
            this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>
            </summary>
            <param name="pane">The <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> to which this curve belongs</param>
            <param name="i">The index of the point of interest</param>
            <param name="coords">A list of coordinates that represents the "rect" for
            this point (used in an html AREA tag)</param>
            <returns>true if it's a valid point, false otherwise</returns>
        </member>
        <member name="P:Alt.GUI.ZedGraph.LineItem.Symbol">
            <summary>
            Gets or sets the <see cref="T:Alt.GUI.ZedGraph.Symbol"/> class instance defined
            for this <see cref="T:Alt.GUI.ZedGraph.LineItem"/>.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.LineItem.Line">
            <summary>
            Gets or sets the <see cref="T:Alt.GUI.ZedGraph.Line"/> class instance defined
            for this <see cref="T:Alt.GUI.ZedGraph.LineItem"/>.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Link">
            <summary>
            A class that maintains hyperlink information for a clickable object on the graph.
            </summary>
            
            <author> John Champion </author>
            <version> $Revision: 3.6 $ $Date: 2007-04-16 00:03:02 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Link.schema">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
            <remarks>
            schema started with 10 for ZedGraph version 5
            </remarks>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Link._title">
            <summary>
            Internal field that stores the title string for this link.  
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Link._url">
            <summary>
            Internal field that stores the url string for this link
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Link._target">
            <summary>
            Internal field that stores the target string for this link
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Link._isEnabled">
            <summary>
            Internal field that determines if this link is "live".
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Link.Tag">
            <summary>
            A tag object for use by the user.  This can be used to store additional
            information associated with the <see cref="T:Alt.GUI.ZedGraph.Link"/>.  ZedGraph does
            not use this value for any purpose.
            </summary>
            <remarks>
            Note that, if you are going to Serialize ZedGraph data, then any type
            that you store in <see cref="F:Alt.GUI.ZedGraph.Link.Tag"/> must be a serializable type (or
            it will cause an exception).
            </remarks>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Link.#ctor">
            <summary>
            Default constructor.  Set all properties to string.Empty, or null.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Link.#ctor(System.String,System.String,System.String)">
            <summary>
            Construct a Link instance from a specified title, url, and target.
            </summary>
            <param name="title">The title for the link (which shows up in the tooltip).</param>
            <param name="url">The URL destination for the link.</param>
            <param name="target">The target for the link (typically "_blank" or "_self").</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Link.#ctor(Alt.GUI.ZedGraph.Link)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:Alt.GUI.ZedGraph.Link"/> object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Link.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.Link.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Link.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Link.MakeCurveItemUrl(Alt.GUI.ZedGraph.GraphPane,Alt.GUI.ZedGraph.CurveItem,System.Int32)">
            <summary>
            Create a URL for a <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> that includes the index of the
            point that was selected.
            </summary>
            <remarks>
            An "index" parameter is added to the <see cref="P:Alt.GUI.ZedGraph.Link.Url"/> property for this
            link to indicate which point was selected.  Further, if the 
            X or Y axes that correspond to this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> are of
            <see cref="F:Alt.GUI.ZedGraph.AxisType.Text"/>, then an
            additional parameter will be added containing the text value that
            corresponds to the <paramref name="index"/> of the selected point.
            The <see cref="T:Alt.GUI.ZedGraph.XAxis"/> text parameter will be labeled "xtext", and
            the <see cref="T:Alt.GUI.ZedGraph.YAxis"/> text parameter will be labeled "ytext".
            </remarks>
            <param name="index">The zero-based index of the selected point</param>
            <param name="pane">The <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> of interest</param>
            <param name="curve">The <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> for which to
            make the url string.</param>
            <returns>A string containing the url with an index parameter added.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Link.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Link.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Link.Title">
            <summary>
            Gets or sets the title string for this link.
            </summary>
            <remarks>
            For web controls, this title will be shown as a tooltip when the mouse
            hovers over the area of the object that owns this link.  Set the value to
            <see cref="F:System.String.Empty"/> to have no title.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Link.Url">
            <summary>
            Gets or sets the url string for this link.
            </summary>
            <remarks>
            Set this value to <see cref="F:System.String.Empty"/> if you don't want to have
            a hyperlink associated with the object to which this link belongs.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Link.Target">
            <summary>
            Gets or sets the target string for this link.
            </summary>
            <remarks>
            This value should be set to a valid target associated with the "Target"
            property of an html hyperlink.  Typically, this would be "_blank" to open
            a new browser window, or "_self" to open in the current browser.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Link.IsEnabled">
            <summary>
            Gets or sets a property that determines if this link is active.  True to have
            a clickable link, false to ignore the link.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Link.IsActive">
            <summary>
            Gets a value that indicates if this <see cref="T:Alt.GUI.ZedGraph.Link"/> is enabled
            (see <see cref="P:Alt.GUI.ZedGraph.Link.IsEnabled"/>), and that either the
            <see cref="P:Alt.GUI.ZedGraph.Link.Url"/> or the <see cref="P:Alt.GUI.ZedGraph.Link.Title"/> is non-null.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Location">
            <summary>
            A class than contains information about the position of an object on the graph.
            </summary>
            
            <author> John Champion </author>
            <version> $Revision: 3.14 $ $Date: 2006-06-24 20:26:43 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Location.schema">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Location._alignV">
            <summary> Private field to store the vertical alignment property for
            this object.  Use the public property <see cref="P:Alt.GUI.ZedGraph.Location.AlignV"/>
            to access this value.  The value of this field is a <see cref="P:Alt.GUI.ZedGraph.Location.AlignV"/> enum.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Location._alignH">
            <summary> Private field to store the horizontal alignment property for
            this object.  Use the public property <see cref="P:Alt.GUI.ZedGraph.Location.AlignH"/>
            to access this value.  The value of this field is a <see cref="P:Alt.GUI.ZedGraph.Location.AlignH"/> enum.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Location._x">
            <summary> Private fields to store the X and Y coordinate positions for
            this object.  Use the public properties <see cref="P:Alt.GUI.ZedGraph.Location.X"/> and
            <see cref="P:Alt.GUI.ZedGraph.Location.Y"/> to access these values.  The coordinate type stored here is
            dependent upon the setting of <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/>.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Location._y">
            <summary> Private fields to store the X and Y coordinate positions for
            this object.  Use the public properties <see cref="P:Alt.GUI.ZedGraph.Location.X"/> and
            <see cref="P:Alt.GUI.ZedGraph.Location.Y"/> to access these values.  The coordinate type stored here is
            dependent upon the setting of <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/>.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Location._width">
            <summary> Private fields to store the X and Y coordinate positions for
            this object.  Use the public properties <see cref="P:Alt.GUI.ZedGraph.Location.X"/> and
            <see cref="P:Alt.GUI.ZedGraph.Location.Y"/> to access these values.  The coordinate type stored here is
            dependent upon the setting of <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/>.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Location._height">
            <summary> Private fields to store the X and Y coordinate positions for
            this object.  Use the public properties <see cref="P:Alt.GUI.ZedGraph.Location.X"/> and
            <see cref="P:Alt.GUI.ZedGraph.Location.Y"/> to access these values.  The coordinate type stored here is
            dependent upon the setting of <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/>.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Location._coordinateFrame">
            <summary>
            Private field to store the coordinate system to be used for defining the
            object position.  Use the public property
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/> to access this value. The coordinate system
            is defined with the <see cref="T:Alt.GUI.ZedGraph.CoordType"/> enum.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Location.#ctor">
            <summary>
            Default constructor for the <see cref="T:Alt.GUI.ZedGraph.Location"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Location.#ctor(System.Double,System.Double,Alt.GUI.ZedGraph.CoordType)">
            <summary>
            Constructor for the <see cref="T:Alt.GUI.ZedGraph.Location"/> class that specifies the
            x, y position and the <see cref="T:Alt.GUI.ZedGraph.CoordType"/>.
            </summary>
            <remarks>
            The (x,y) position corresponds to the top-left corner;
            </remarks>
            <param name="x">The x position, specified in units of <see paramref="coordType"/>.
            </param>
            <param name="y">The y position, specified in units of <see paramref="coordType"/>.
            </param>
            <param name="coordType">The <see cref="T:Alt.GUI.ZedGraph.CoordType"/> enum that specifies the
            units for <see paramref="x"/> and <see paramref="y"/></param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Location.#ctor(System.Double,System.Double,Alt.GUI.ZedGraph.CoordType,Alt.GUI.ZedGraph.AlignH,Alt.GUI.ZedGraph.AlignV)">
            <summary>
            Constructor for the <see cref="T:Alt.GUI.ZedGraph.Location"/> class that specifies the
            x, y position and the <see cref="T:Alt.GUI.ZedGraph.CoordType"/>.
            </summary>
            <remarks>
            The (x,y) position corresponds to the top-left corner;
            </remarks>
            <param name="x">The x position, specified in units of <see paramref="coordType"/>.
            </param>
            <param name="y">The y position, specified in units of <see paramref="coordType"/>.
            </param>
            <param name="coordType">The <see cref="T:Alt.GUI.ZedGraph.CoordType"/> enum that specifies the
            units for <see paramref="x"/> and <see paramref="y"/></param>
            <param name="alignH">The <see cref="T:Alt.GUI.ZedGraph.AlignH"/> enum that specifies
            the horizontal alignment of the object with respect to the (x,y) location</param>
            <param name="alignV">The <see cref="T:Alt.GUI.ZedGraph.AlignV"/> enum that specifies
            the vertical alignment of the object with respect to the (x,y) location</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Location.#ctor(System.Double,System.Double,System.Double,System.Double,Alt.GUI.ZedGraph.CoordType,Alt.GUI.ZedGraph.AlignH,Alt.GUI.ZedGraph.AlignV)">
            <summary>
            Constructor for the <see cref="T:Alt.GUI.ZedGraph.Location"/> class that specifies the
            (x, y), (width, height), and the <see cref="T:Alt.GUI.ZedGraph.CoordType"/>.
            </summary>
            <remarks>
            The (x,y) position
            corresponds to the starting position, the (x2, y2) coorresponds to the ending position
            (typically used for <see cref="T:Alt.GUI.ZedGraph.ArrowObj"/>'s).
            </remarks>
            <param name="x">The x position, specified in units of <see paramref="coordType"/>.
            </param>
            <param name="y">The y position, specified in units of <see paramref="coordType"/>.
            </param>
            <param name="width">The width, specified in units of <see paramref="coordType"/>.
            </param>
            <param name="height">The height, specified in units of <see paramref="coordType"/>.
            </param>
            <param name="coordType">The <see cref="T:Alt.GUI.ZedGraph.CoordType"/> enum that specifies the
            units for <see paramref="x"/> and <see paramref="y"/></param>
            <param name="alignH">The <see cref="T:Alt.GUI.ZedGraph.AlignH"/> enum that specifies
            the horizontal alignment of the object with respect to the (x,y) location</param>
            <param name="alignV">The <see cref="T:Alt.GUI.ZedGraph.AlignV"/> enum that specifies
            the vertical alignment of the object with respect to the (x,y) location</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Location.#ctor(Alt.GUI.ZedGraph.Location)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:Alt.GUI.ZedGraph.Location"/> object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Location.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.Location.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Location.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Location.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Location.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Location.Transform(Alt.GUI.ZedGraph.PaneBase)">
            <summary>
            Transform this <see cref="T:Alt.GUI.ZedGraph.Location"/> object to display device
            coordinates using the properties of the specified <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>.
            </summary>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.PaneBase"/> object that contains
            the <see cref="T:Alt.GUI.ZedGraph.Axis"/> classes which will be used for the transform.
            </param>
            <returns>A point in display device coordinates that corresponds to the
            specified user point.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Location.Transform(Alt.GUI.ZedGraph.PaneBase,System.Double,System.Double,Alt.GUI.ZedGraph.CoordType)">
            <summary>
            Transform a data point from the specified coordinate type
            (<see cref="T:Alt.GUI.ZedGraph.CoordType"/>) to display device coordinates (pixels).
            </summary>
            <remarks>
            If <see paramref="pane"/> is not of type <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>, then
            only the <see cref="F:Alt.GUI.ZedGraph.CoordType.PaneFraction"/> transformation is available.
            </remarks>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.PaneBase"/> object that contains
            the <see cref="T:Alt.GUI.ZedGraph.Axis"/> classes which will be used for the transform.
            </param>
            <param name="x">The x coordinate that defines the point in user
            space.</param>
            <param name="y">The y coordinate that defines the point in user
            space.</param>
            <param name="coord">A <see cref="T:Alt.GUI.ZedGraph.CoordType"/> type that defines the
            coordinate system in which the X,Y pair is defined.</param>
            <returns>A point in display device coordinates that corresponds to the
            specified user point.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Location.TransformTopLeft(Alt.GUI.ZedGraph.PaneBase,System.Double,System.Double)">
            <summary>
            Transform this <see cref="T:Alt.GUI.ZedGraph.Location"/> from the coordinate system
            as specified by <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/> to the device coordinates
            of the specified <see cref="T:Alt.GUI.ZedGraph.PaneBase"/> object.
            </summary>
            <remarks>
            The returned
            <see cref="T:Alt.Sketch.Point"/> struct represents the top-left corner of the
            object that honors the <see cref="T:Alt.GUI.ZedGraph.Location"/> properties.
            The <see cref="P:Alt.GUI.ZedGraph.Location.AlignH"/> and <see cref="P:Alt.GUI.ZedGraph.Location.AlignV"/> properties are honored in 
            this transformation.
            </remarks>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.PaneBase"/> object that contains
            the <see cref="T:Alt.GUI.ZedGraph.Axis"/> classes which will be used for the transform.
            </param>
            <param name="width">The width of the object in device pixels</param>
            <param name="height">The height of the object in device pixels</param>
            <returns>The top-left corner of the object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Location.TransformTopLeft(Alt.GUI.ZedGraph.PaneBase)">
            <summary>
            The <see cref="T:Alt.Sketch.Point"/> for this object as defined by the
            <see cref="P:Alt.GUI.ZedGraph.Location.X"/> and <see cref="P:Alt.GUI.ZedGraph.Location.Y"/>
            properties.
            </summary>
            <remarks>
            This method transforms the location to output device pixel units.
            The <see cref="P:Alt.GUI.ZedGraph.Location.AlignH"/> and <see cref="P:Alt.GUI.ZedGraph.Location.AlignV"/> properties are ignored for
            this transformation (see <see cref="!:TransformTopLeft(PaneBase,float,float)"/>).
            </remarks>
            <value>A <see cref="T:Alt.Sketch.Point"/> in pixel units.</value>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Location.TransformBottomRight(Alt.GUI.ZedGraph.PaneBase)">
            <summary>
            The <see cref="T:Alt.Sketch.Point"/> for this object as defined by the
            <see cref="P:Alt.GUI.ZedGraph.Location.X2"/> and <see cref="P:Alt.GUI.ZedGraph.Location.Y2"/> properties.
            </summary>
            <remarks>
            This method transforms the location to output device pixel units.
            The <see cref="P:Alt.GUI.ZedGraph.Location.AlignH"/> and <see cref="P:Alt.GUI.ZedGraph.Location.AlignV"/> properties are ignored for
            this transformation (see <see cref="!:TransformTopLeft(PaneBase,float,float)"/>).
            </remarks>
            <value>A <see cref="T:Alt.Sketch.Point"/> in pixel units.</value>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Location.TransformRect(Alt.GUI.ZedGraph.PaneBase)">
            <summary>
            Transform the <see cref="P:Alt.GUI.ZedGraph.Location.Rect"/> for this object as defined by the
            <see cref="P:Alt.GUI.ZedGraph.Location.X"/>, <see cref="P:Alt.GUI.ZedGraph.Location.Y"/>, <see cref="P:Alt.GUI.ZedGraph.Location.Width"/>, and
            <see cref="P:Alt.GUI.ZedGraph.Location.Height"/> properties.
            </summary>
            <remarks>
            This method transforms the location to output device pixel units.
            The <see cref="P:Alt.GUI.ZedGraph.Location.AlignH"/> and <see cref="P:Alt.GUI.ZedGraph.Location.AlignV"/> properties are honored in 
            this transformation.
            </remarks>
            <value>A <see cref="P:Alt.GUI.ZedGraph.Location.Rect"/> in pixel units.</value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Location.AlignH">
            <summary>
            A horizontal alignment parameter for this object specified
            using the <see cref="P:Alt.GUI.ZedGraph.Location.AlignH"/> enum type.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Location.AlignV">
            <summary>
            A vertical alignment parameter for this object specified
            using the <see cref="P:Alt.GUI.ZedGraph.Location.AlignV"/> enum type.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Location.CoordinateFrame">
            <summary>
            The coordinate system to be used for defining the object position
            </summary>
            <value> The coordinate system is defined with the <see cref="T:Alt.GUI.ZedGraph.CoordType"/>
            enum</value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Location.X">
            <summary>
            The x position of the object.
            </summary>
            <remarks>
            The units of this position
            are specified by the <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/> property.
            The object will be aligned to this position based on the
            <see cref="P:Alt.GUI.ZedGraph.Location.AlignH"/> property.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Location.Y">
            <summary>
            The y position of the object.
            </summary>
            <remarks>
            The units of this position
            are specified by the <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/> property.
            The object will be aligned to this position based on the
            <see cref="P:Alt.GUI.ZedGraph.Location.AlignV"/> property.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Location.X1">
            <summary>
            The x1 position of the object (an alias for the x position).
            </summary>
            <remarks>
            The units of this position
            are specified by the <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/> property.
            The object will be aligned to this position based on the
            <see cref="P:Alt.GUI.ZedGraph.Location.AlignH"/> property.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Location.Y1">
            <summary>
            The y1 position of the object (an alias for the y position).
            </summary>
            <remarks>
            The units of this position
            are specified by the <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/> property.
            The object will be aligned to this position based on the
            <see cref="P:Alt.GUI.ZedGraph.Location.AlignV"/> property.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Location.Width">
            <summary>
            The width of the object.
            </summary>
            <remarks>
            The units of this position are specified by the
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/> property.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Location.Height">
            <summary>
            The height of the object.
            </summary>
            <remarks>
            The units of this position are specified by the
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/> property.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Location.X2">
            <summary>
            The x2 position of the object.
            </summary>
            <remarks>
            The units of this position are specified by the
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/> property.
            The object will be aligned to this position based on the
            <see cref="P:Alt.GUI.ZedGraph.Location.AlignH"/> property.  This position is only used for
            objects such as <see cref="T:Alt.GUI.ZedGraph.ArrowObj"/>, where it makes sense
            to have a second coordinate.  Note that the X2 position is stored
            internally as a <see cref="P:Alt.GUI.ZedGraph.Location.Width"/> offset from <see cref="P:Alt.GUI.ZedGraph.Location.X"/>.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Location.Y2">
            <summary>
            The y2 position of the object.
            </summary>
            <remarks>
            The units of this position
            are specified by the <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/> property.
            The object will be aligned to this position based on the
            <see cref="P:Alt.GUI.ZedGraph.Location.AlignV"/> property.  This position is only used for
            objects such as <see cref="T:Alt.GUI.ZedGraph.ArrowObj"/>, where it makes sense
            to have a second coordinate.  Note that the Y2 position is stored
            internally as a <see cref="P:Alt.GUI.ZedGraph.Location.Height"/> offset from <see cref="P:Alt.GUI.ZedGraph.Location.Y"/>.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Location.Rect">
            <summary>
            The <see cref="P:Alt.GUI.ZedGraph.Location.Rect"/> for this object as defined by the
            <see cref="P:Alt.GUI.ZedGraph.Location.X"/>, <see cref="P:Alt.GUI.ZedGraph.Location.Y"/>, <see cref="P:Alt.GUI.ZedGraph.Location.Width"/>, and
            <see cref="P:Alt.GUI.ZedGraph.Location.Height"/> properties.
            </summary>
            <remarks>
            Note that this method reduces the precision of the location coordinates from double
            precision to single precision.  In some cases, such as <see cref="F:Alt.GUI.ZedGraph.AxisType.Date"/>, it
            may affect the resolution of the point location.
            </remarks>
            <value>A <see cref="P:Alt.GUI.ZedGraph.Location.Rect"/> in <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/>
            units.</value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Location.TopLeft">
            <summary>
            The top-left <see cref="T:Alt.Sketch.Point"/> for this <see cref="T:Alt.GUI.ZedGraph.Location"/>.
            </summary>
            <remarks>
            Note that this method reduces the precision of the location coordinates from double
            precision to single precision.  In some cases, such as <see cref="F:Alt.GUI.ZedGraph.AxisType.Date"/>, it
            may affect the resolution of the point location.
            </remarks>
            <value>A <see cref="T:Alt.Sketch.Point"/> in <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/> units.</value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Location.BottomRight">
            <summary>
            The bottom-right <see cref="T:Alt.Sketch.Point"/> for this <see cref="T:Alt.GUI.ZedGraph.Location"/>.
            </summary>
            <remarks>
            Note that this method reduces the precision of the location coordinates from double
            precision to single precision.  In some cases, such as <see cref="F:Alt.GUI.ZedGraph.AxisType.Date"/>, it
            may affect the resolution of the point location.
            </remarks>
            <value>A <see cref="T:Alt.Sketch.Point"/> in <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/> units.</value>
        </member>
        <member name="T:Alt.GUI.ZedGraph.LogScale">
            <summary>
            The LogScale class inherits from the <see cref="T:Alt.GUI.ZedGraph.Scale"/> class, and implements
            the features specific to <see cref="F:Alt.GUI.ZedGraph.AxisType.Log"/>.
            </summary>
            <remarks>
            LogScale is a non-linear axis in which the values are scaled using the base 10
            <see cref="M:System.Math.Log(System.Double)"/>
            function.
            </remarks>
            
            <author> John Champion  </author>
            <version> $Revision: 1.12 $ $Date: 2007-04-16 00:03:02 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.LogScale.schema2">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LogScale.#ctor(Alt.GUI.ZedGraph.Axis)">
            <summary>
            Default constructor that defines the owner <see cref="T:Alt.GUI.ZedGraph.Axis"/>
            (containing object) for this new object.
            </summary>
            <param name="owner">The owner, or containing object, of this instance</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LogScale.#ctor(Alt.GUI.ZedGraph.Scale,Alt.GUI.ZedGraph.Axis)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:Alt.GUI.ZedGraph.LogScale"/> object from which to copy</param>
            <param name="owner">The <see cref="T:Alt.GUI.ZedGraph.Axis"/> object that will own the
            new instance of <see cref="T:Alt.GUI.ZedGraph.LogScale"/></param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LogScale.Clone(Alt.GUI.ZedGraph.Axis)">
            <summary>
            Create a new clone of the current item, with a new owner assignment
            </summary>
            <param name="owner">The new <see cref="T:Alt.GUI.ZedGraph.Axis"/> instance that will be
            the owner of the new Scale</param>
            <returns>A new <see cref="T:Alt.GUI.ZedGraph.Scale"/> clone.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LogScale.SetupScaleData(Alt.GUI.ZedGraph.GraphPane,Alt.GUI.ZedGraph.Axis)">
            <summary>
            Setup some temporary transform values in preparation for rendering the <see cref="T:Alt.GUI.ZedGraph.Axis"/>.
            </summary>
            <remarks>
            This method is typically called by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>
            object as part of the <see cref="M:Alt.GUI.ZedGraph.GraphPane.Draw(Alt.Sketch.Graphics)"/> method.  It is also
            called by <see cref="M:Alt.GUI.ZedGraph.GraphPane.GeneralTransform(System.Double,System.Double,Alt.GUI.ZedGraph.CoordType)"/> and
            <see cref="M:Alt.GUI.ZedGraph.GraphPane.ReverseTransform(Alt.Sketch.Point,System.Double@,System.Double@)"/>
            methods to setup for coordinate transformations.
            </remarks>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="axis">
            The parent <see cref="T:Alt.GUI.ZedGraph.Axis"/> for this <see cref="T:Alt.GUI.ZedGraph.Scale"/>
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LogScale.Linearize(System.Double)">
            <summary>
            Convert a value to its linear equivalent for this type of scale.
            </summary>
            <remarks>
            The default behavior is to just return the value unchanged.  However,
            for <see cref="F:Alt.GUI.ZedGraph.AxisType.Log"/> and <see cref="F:Alt.GUI.ZedGraph.AxisType.Exponent"/>,
            it returns the log or power equivalent.
            </remarks>
            <param name="val">The value to be converted</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LogScale.DeLinearize(System.Double)">
            <summary>
            Convert a value from its linear equivalent to its actual scale value
            for this type of scale.
            </summary>
            <remarks>
            The default behavior is to just return the value unchanged.  However,
            for <see cref="F:Alt.GUI.ZedGraph.AxisType.Log"/> and <see cref="F:Alt.GUI.ZedGraph.AxisType.Exponent"/>,
            it returns the anti-log or inverse-power equivalent.
            </remarks>
            <param name="val">The value to be converted</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LogScale.CalcMajorTicValue(System.Double,System.Double)">
            <summary>
            Determine the value for any major tic.
            </summary>
            <remarks>
            This method properly accounts for <see cref="P:Alt.GUI.ZedGraph.Scale.IsLog"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.IsText"/>,
            and other axis format settings.
            </remarks>
            <param name="baseVal">
            The value of the first major tic (floating point double)
            </param>
            <param name="tic">
            The major tic number (0 = first major tic).  For log scales, this is the actual power of 10.
            </param>
            <returns>
            The specified major tic value (floating point double).
            </returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LogScale.CalcMinorTicValue(System.Double,System.Int32)">
            <summary>
            Determine the value for any minor tic.
            </summary>
            <remarks>
            This method properly accounts for <see cref="P:Alt.GUI.ZedGraph.Scale.IsLog"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.IsText"/>,
            and other axis format settings.
            </remarks>
            <param name="baseVal">
            The value of the first major tic (floating point double).  This tic value is the base
            reference for all tics (including minor ones).
            </param>
            <param name="iTic">
            The major tic number (0 = first major tic).  For log scales, this is the actual power of 10.
            </param>
            <returns>
            The specified minor tic value (floating point double).
            </returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LogScale.CalcMinorStart(System.Double)">
            <summary>
            Internal routine to determine the ordinals of the first minor tic mark
            </summary>
            <param name="baseVal">
            The value of the first major tic for the axis.
            </param>
            <returns>
            The ordinal position of the first minor tic, relative to the first major tic.
            This value can be negative (e.g., -3 means the first minor tic is 3 minor step
            increments before the first major tic.
            </returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LogScale.CalcBaseTic">
            <summary>
            Determine the value for the first major tic.
            </summary>
            <remarks>
            This is done by finding the first possible value that is an integral multiple of
            the step size, taking into account the date/time units if appropriate.
            This method properly accounts for <see cref="P:Alt.GUI.ZedGraph.Scale.IsLog"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.IsText"/>,
            and other axis format settings.
            </remarks>
            <returns>
            First major tic value (floating point double).
            </returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LogScale.CalcNumTics">
            <summary>
            Internal routine to determine the ordinals of the first and last major axis label.
            </summary>
            <returns>
            This is the total number of major tics for this axis.
            </returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LogScale.PickScale(Alt.GUI.ZedGraph.GraphPane,Alt.Sketch.Graphics,System.Double)">
            <summary>
            Select a reasonable base 10 logarithmic axis scale given a range of data values.
            </summary>
            <remarks>
            This method only applies to <see cref="F:Alt.GUI.ZedGraph.AxisType.Log"/> type axes, and it
            is called by the general <see cref="M:Alt.GUI.ZedGraph.LogScale.PickScale(Alt.GUI.ZedGraph.GraphPane,Alt.Sketch.Graphics,System.Double)"/> method.  The scale range is chosen
            based always on powers of 10 (full log cycles).  This
            method honors the <see cref="P:Alt.GUI.ZedGraph.Scale.MinAuto"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.MaxAuto"/>,
            and <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStepAuto"/> autorange settings.
            In the event that any of the autorange settings are false, the
            corresponding <see cref="P:Alt.GUI.ZedGraph.Scale.Min"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.Max"/>, or <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/>
            setting is explicitly honored, and the remaining autorange settings (if any) will
            be calculated to accomodate the non-autoranged values.  For log axes, the MinorStep
            value is not used.
            <para>On Exit:</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.Min"/> is set to scale minimum (if <see cref="P:Alt.GUI.ZedGraph.Scale.MinAuto"/> = true)</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.Max"/> is set to scale maximum (if <see cref="P:Alt.GUI.ZedGraph.Scale.MaxAuto"/> = true)</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/> is set to scale step size (if <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStepAuto"/> = true)</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.Mag"/> is set to a magnitude multiplier according to the data</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.Format"/> is set to the display format for the values (this controls the
            number of decimal places, whether there are thousands separators, currency types, etc.)</para>
            </remarks>
            <param name="pane">A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object
            associated with this <see cref="T:Alt.GUI.ZedGraph.Axis"/></param>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <seealso cref="M:Alt.GUI.ZedGraph.LogScale.PickScale(Alt.GUI.ZedGraph.GraphPane,Alt.Sketch.Graphics,System.Double)"/>
            <seealso cref="F:Alt.GUI.ZedGraph.AxisType.Log"/>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LogScale.MakeLabel(Alt.GUI.ZedGraph.GraphPane,System.Int32,System.Double)">
            <summary>
            Make a value label for an <see cref="F:Alt.GUI.ZedGraph.AxisType.Log"/> <see cref="T:Alt.GUI.ZedGraph.Axis"/>.
            </summary>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="index">
            The zero-based, ordinal index of the label to be generated.  For example, a value of 2 would
            cause the third value label on the axis to be generated.
            </param>
            <param name="dVal">
            The numeric value associated with the label.  This value is ignored for log (<see cref="P:Alt.GUI.ZedGraph.Scale.IsLog"/>)
            and text (<see cref="P:Alt.GUI.ZedGraph.Scale.IsText"/>) type axes.
            </param>
            <returns>The resulting value label as a <see cref="T:System.String"/></returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LogScale.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.LogScale.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="P:Alt.GUI.ZedGraph.LogScale.Type">
            <summary>
            Return the <see cref="T:Alt.GUI.ZedGraph.AxisType"/> for this <see cref="T:Alt.GUI.ZedGraph.Scale"/>, which is
            <see cref="F:Alt.GUI.ZedGraph.AxisType.Log"/>.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.LogScale.Min">
            <summary>
            Gets or sets the minimum value for this scale.
            </summary>
            <remarks>
            The set property is specifically adapted for <see cref="F:Alt.GUI.ZedGraph.AxisType.Log"/> scales,
            in that it automatically limits the setting to values greater than zero.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.LogScale.Max">
            <summary>
            Gets or sets the maximum value for this scale.
            </summary>
            <remarks>
            The set property is specifically adapted for <see cref="F:Alt.GUI.ZedGraph.AxisType.Log"/> scales,
            in that it automatically limits the setting to values greater than zero.
            <see cref="T:Alt.GUI.ZedGraph.XDate"/> struct.
            </remarks>
        </member>
        <member name="T:Alt.GUI.ZedGraph.MajorGrid">
            <summary>
            Class that handles the data associated with the major grid lines on the chart.
            Inherits from <see cref="T:Alt.GUI.ZedGraph.MinorGrid"/>.
            </summary>
            
            <author> John Champion </author>
            <version> $Revision: 3.1 $ $Date: 2006-06-24 20:26:44 $ </version>
        </member>
        <member name="T:Alt.GUI.ZedGraph.MinorGrid">
            <summary>
            Class that holds the specific properties for the minor grid.
            </summary>
            <author> John Champion </author>
            <version> $Revision: 3.1 $ $Date: 2006-06-24 20:26:44 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.MinorGrid.schema">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.MinorGrid.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.MinorGrid.#ctor(Alt.GUI.ZedGraph.MinorGrid)">
            <summary>
            Copy constructor
            </summary>
            <param name="rhs">The source <see cref="T:Alt.GUI.ZedGraph.MinorGrid"/> to be copied.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.MinorGrid.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.MinorGrid.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.MinorGrid.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.MinorGrid.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.MinorGrid.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="P:Alt.GUI.ZedGraph.MinorGrid.IsVisible">
            <summary>
            Gets or sets a value that determines if the major <see cref="T:Alt.GUI.ZedGraph.Axis"/> gridlines
            (at each labeled value) will be visible
            </summary>
            <value>true to show the gridlines, false otherwise</value>
            <seealso cref="F:Alt.GUI.ZedGraph.MinorGrid.Default.IsVisible">Default.IsShowGrid</seealso>.
            <seealso cref="P:Alt.GUI.ZedGraph.MinorGrid.Color"/>
            <seealso cref="P:Alt.GUI.ZedGraph.MinorGrid.PenWidth"/>
            <seealso cref="P:Alt.GUI.ZedGraph.MinorGrid.DashOn"/>
            <seealso cref="P:Alt.GUI.ZedGraph.MinorGrid.DashOff"/>
            <seealso cref="P:Alt.GUI.ZedGraph.MinorGrid.IsVisible"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.MinorGrid.DashOn">
            <summary>
            The "Dash On" mode for drawing the grid.
            </summary>
            <remarks>
            This is the distance,
            in points (1/72 inch), of the dash segments that make up the dashed grid lines.
            </remarks>
            <value>The dash on length is defined in points (1/72 inch)</value>
            <seealso cref="P:Alt.GUI.ZedGraph.MinorGrid.DashOff"/>
            <seealso cref="P:Alt.GUI.ZedGraph.MinorGrid.IsVisible"/>
            <seealso cref="F:Alt.GUI.ZedGraph.MinorGrid.Default.DashOn"/>.
        </member>
        <member name="P:Alt.GUI.ZedGraph.MinorGrid.DashOff">
            <summary>
            The "Dash Off" mode for drawing the grid.
            </summary>
            <remarks>
            This is the distance,
            in points (1/72 inch), of the spaces between the dash segments that make up
            the dashed grid lines.
            </remarks>
            <value>The dash off length is defined in points (1/72 inch)</value>
            <seealso cref="P:Alt.GUI.ZedGraph.MinorGrid.DashOn"/>
            <seealso cref="P:Alt.GUI.ZedGraph.MinorGrid.IsVisible"/>
            <seealso cref="F:Alt.GUI.ZedGraph.MinorGrid.Default.DashOff"/>.
        </member>
        <member name="P:Alt.GUI.ZedGraph.MinorGrid.PenWidth">
            <summary>
            The pen width used for drawing the grid lines.
            </summary>
            <value>The grid pen width is defined in points (1/72 inch)</value>
            <seealso cref="P:Alt.GUI.ZedGraph.MinorGrid.IsVisible"/>
            <seealso cref="F:Alt.GUI.ZedGraph.MinorGrid.Default.PenWidth"/>.
            <seealso cref="P:Alt.GUI.ZedGraph.MinorGrid.Color"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.MinorGrid.Color">
            <summary>
            The color to use for drawing this <see cref="T:Alt.GUI.ZedGraph.Axis"/> grid.
            </summary>
            <value> The color is defined using the
            <see cref="!:System.Drawing.Color"/> class</value>
            <seealso cref="F:Alt.GUI.ZedGraph.MinorGrid.Default.Color"/>.
            <seealso cref="P:Alt.GUI.ZedGraph.MinorGrid.PenWidth"/>
        </member>
        <member name="T:Alt.GUI.ZedGraph.MinorGrid.Default">
            <summary>
            A simple struct that defines the
            default property values for the <see cref="T:Alt.GUI.ZedGraph.MinorGrid"/> class.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.MinorGrid.Default.DashOn">
            <summary>
            The default "dash on" size for drawing the <see cref="T:Alt.GUI.ZedGraph.Axis"/> minor grid
            (<see cref="P:Alt.GUI.ZedGraph.MinorGrid.DashOn"/> property). Units are in points (1/72 inch).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.MinorGrid.Default.DashOff">
            <summary>
            The default "dash off" size for drawing the <see cref="T:Alt.GUI.ZedGraph.Axis"/> minor grid
            (<see cref="P:Alt.GUI.ZedGraph.MinorGrid.DashOff"/> property). Units are in points (1/72 inch).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.MinorGrid.Default.PenWidth">
            <summary>
            The default pen width for drawing the <see cref="T:Alt.GUI.ZedGraph.Axis"/> minor grid
            (<see cref="P:Alt.GUI.ZedGraph.MinorGrid.PenWidth"/> property). Units are in points (1/72 inch).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.MinorGrid.Default.Color">
            <summary>
            The default color for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> minor grid lines
            (<see cref="P:Alt.GUI.ZedGraph.MinorGrid.Color"/> property).  This color only affects the
            minor grid lines.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.MinorGrid.Default.IsVisible">
            <summary>
            The default display mode for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> minor grid lines
            (<see cref="P:Alt.GUI.ZedGraph.MinorGrid.IsVisible"/> property). true
            to show the minor grid lines, false to hide them.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.MajorGrid.schema2">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.MajorGrid.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.MajorGrid.#ctor(Alt.GUI.ZedGraph.MajorGrid)">
            <summary>
            Copy constructor
            </summary>
            <param name="rhs">The source <see cref="T:Alt.GUI.ZedGraph.MajorGrid"/> to be copied.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.MajorGrid.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.MajorGrid.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.MajorGrid.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.MajorGrid.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.MajorGrid.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="P:Alt.GUI.ZedGraph.MajorGrid.IsZeroLine">
            <summary>
            Gets or sets a boolean value that determines if a line will be drawn at the
            zero value for the axis.
            </summary>
            <remarks>
            The zero line is a line that divides the negative values from the positive values.
            The default is set according to
            <see cref="F:Alt.GUI.ZedGraph.XAxis.Default.IsZeroLine"/>, <see cref="F:Alt.GUI.ZedGraph.YAxis.Default.IsZeroLine"/>,
            <see cref="F:Alt.GUI.ZedGraph.Y2Axis.Default.IsZeroLine"/>,
            </remarks>
            <value>true to show the zero line, false otherwise</value>
        </member>
        <member name="T:Alt.GUI.ZedGraph.MajorGrid.Default">
            <summary>
            A simple struct that defines the
            default property values for the <see cref="T:Alt.GUI.ZedGraph.MajorGrid"/> class.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.MajorGrid.Default.DashOn">
            <summary>
            The default "dash on" size for drawing the <see cref="T:Alt.GUI.ZedGraph.Axis"/> grid
            (<see cref="P:Alt.GUI.ZedGraph.MinorGrid.DashOn"/> property). Units are in points (1/72 inch).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.MajorGrid.Default.DashOff">
            <summary>
            The default "dash off" size for drawing the <see cref="T:Alt.GUI.ZedGraph.Axis"/> grid
            (<see cref="P:Alt.GUI.ZedGraph.MinorGrid.DashOff"/> property). Units are in points (1/72 inch).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.MajorGrid.Default.PenWidth">
            <summary>
            The default pen width for drawing the <see cref="T:Alt.GUI.ZedGraph.Axis"/> grid
            (<see cref="P:Alt.GUI.ZedGraph.MinorGrid.PenWidth"/> property). Units are in points (1/72 inch).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.MajorGrid.Default.Color">
            <summary>
            The default color for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> grid lines
            (<see cref="P:Alt.GUI.ZedGraph.MinorGrid.Color"/> property).  This color only affects the
            grid lines.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.MajorGrid.Default.IsVisible">
            <summary>
            The default display mode for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> grid lines
            (<see cref="P:Alt.GUI.ZedGraph.MinorGrid.IsVisible"/> property). true
            to show the grid lines, false to hide them.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.MajorGrid.Default.IsZeroLine">
            <summary>
            The default boolean value that determines if a line will be drawn at the
            zero value for the axis.
            </summary>
            <remarks>
            The zero line is a line that divides the negative values from the positive values.
            The default is set according to
            <see cref="F:Alt.GUI.ZedGraph.XAxis.Default.IsZeroLine"/>, <see cref="F:Alt.GUI.ZedGraph.YAxis.Default.IsZeroLine"/>,
            <see cref="F:Alt.GUI.ZedGraph.Y2Axis.Default.IsZeroLine"/>,
            </remarks>
            <value>true to show the zero line, false otherwise</value>
        </member>
        <member name="T:Alt.GUI.ZedGraph.MajorTic">
            <summary>
            Class that holds the specific properties for the major tics.  Inherits from
            <see cref="T:Alt.GUI.ZedGraph.MinorTic"/>.
            </summary>
            <author> John Champion </author>
            <version> $Revision: 3.1 $ $Date: 2006-06-24 20:26:44 $ </version>
        </member>
        <member name="T:Alt.GUI.ZedGraph.MinorTic">
            <summary>
            Class that holds the specific properties for the minor tics.
            </summary>
            <author> John Champion </author>
            <version> $Revision: 3.1 $ $Date: 2006-06-24 20:26:44 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.MinorTic.schema">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.MinorTic.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.MinorTic.#ctor(Alt.GUI.ZedGraph.MinorTic)">
            <summary>
            Copy constructor.
            </summary>
            <param name="rhs">The <see cref="T:Alt.GUI.ZedGraph.MinorTic"/> that is to be copied.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.MinorTic.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.MinorTic.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.MinorTic.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.MinorTic.ScaledTic(System.Double)">
            <summary>
            Calculate the scaled tic size for this <see cref="T:Alt.GUI.ZedGraph.Axis"/>
            </summary>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <returns>The scaled tic size, in points (1/72 inch)</returns>
            <seealso cref="P:Alt.GUI.ZedGraph.MinorTic.Size"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.FontSpec"/>
            <seealso cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/>
        </member>
        <member name="M:Alt.GUI.ZedGraph.MinorTic.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.MinorTic.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.MinorTic.Draw(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,Alt.Sketch.Pen,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw a tic mark at the specified single position.  This includes the inner, outer,
            cross and opposite tic marks as required.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="pen">Graphic <see cref="T:Alt.Sketch.Pen"/> with which to draw the tic mark.</param>
            <param name="pixVal">The pixel location of the tic mark on this
            <see cref="T:Alt.GUI.ZedGraph.Axis"/></param>
            <param name="topPix">The pixel value of the top of the axis border</param>
            <param name="shift">The number of pixels to shift this axis, based on the
            value of <see cref="P:Alt.GUI.ZedGraph.Axis.Cross"/>.  A positive value is into the ChartRect relative to
            the default axis position.</param>
            <param name="scaledTic">The scaled size of a minor tic, in pixel units</param>
        </member>
        <member name="P:Alt.GUI.ZedGraph.MinorTic.Color">
            <summary>
            The color to use for drawing the tics of this class instance
            </summary>
            <value> The color is defined using the
            <see cref="!:System.Drawing.Color"/> class</value>
            <seealso cref="F:Alt.GUI.ZedGraph.MinorTic.Default.Color"/>.
            <seealso cref="P:Alt.GUI.ZedGraph.MinorTic.IsOutside"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Axis.IsVisible"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.MinorTic.Size">
            <summary>
            The length of the major tic marks.
            </summary>
            <remarks>
            This length will be scaled
            according to the <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> for the
            <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>
            </remarks>
            <value>The tic size is measured in points (1/72 inch)</value>
            <seealso cref="F:Alt.GUI.ZedGraph.MinorTic.Default.Size"/>.
            <seealso cref="P:Alt.GUI.ZedGraph.MinorTic.IsOutside"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Axis.IsVisible"/>
            <seealso cref="P:Alt.GUI.ZedGraph.MinorTic.Color"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.MinorTic.IsAllTics">
            <summary>
            This is convenience property sets the status of all the different
            tic properties in this instance to the same value.  true to activate all tics,
            false to clear all tics.
            </summary>
            <remarks>
            This setting does not persist.  That is, you can clear all the tics with
            <see cref="P:Alt.GUI.ZedGraph.MinorTic.IsAllTics"/> = false, then activate them individually (example:
            <see cref="P:Alt.GUI.ZedGraph.MinorTic.IsOutside"/> = true).
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.MinorTic.IsOutside"/>
            <seealso cref="P:Alt.GUI.ZedGraph.MinorTic.IsInside"/>
            <seealso cref="P:Alt.GUI.ZedGraph.MinorTic.IsOpposite"/>
            <seealso cref="P:Alt.GUI.ZedGraph.MinorTic.IsCrossInside"/>
            <seealso cref="P:Alt.GUI.ZedGraph.MinorTic.IsCrossOutside"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.MinorTic.IsOutside">
            <summary>
            Gets or sets a property that determines whether or not the minor outside tic marks
            are shown.
            </summary>
            <remarks>
            These are the tic marks on the outside of the <see cref="T:Alt.GUI.ZedGraph.Axis"/> border.
            The minor tic spacing is controlled by <see cref="P:Alt.GUI.ZedGraph.Scale.MinorStep"/>.
            </remarks>
            <value>true to show the minor outside tic marks, false otherwise</value>
            <seealso cref="F:Alt.GUI.ZedGraph.MinorTic.Default.IsOutside"/>.
            <seealso cref="P:Alt.GUI.ZedGraph.MinorTic.IsOutside"/>
            <seealso cref="P:Alt.GUI.ZedGraph.MinorTic.IsInside"/>
            <seealso cref="P:Alt.GUI.ZedGraph.MinorTic.IsOpposite"/>
            <seealso cref="P:Alt.GUI.ZedGraph.MinorTic.IsCrossInside"/>
            <seealso cref="P:Alt.GUI.ZedGraph.MinorTic.IsCrossOutside"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.MinorTic.IsInside">
            <summary>
            Gets or sets a property that determines whether or not the major inside tic marks
            are shown.
            </summary>
            <remarks>
            These are the tic marks on the inside of the <see cref="T:Alt.GUI.ZedGraph.Axis"/> border.
            The major tic spacing is controlled by <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/>.
            </remarks>
            <value>true to show the major inside tic marks, false otherwise</value>
            <seealso cref="F:Alt.GUI.ZedGraph.MinorTic.Default.IsInside"/>.
            <seealso cref="P:Alt.GUI.ZedGraph.MinorTic.IsOutside"/>
            <seealso cref="P:Alt.GUI.ZedGraph.MinorTic.IsInside"/>
            <seealso cref="P:Alt.GUI.ZedGraph.MinorTic.IsOpposite"/>
            <seealso cref="P:Alt.GUI.ZedGraph.MinorTic.IsCrossInside"/>
            <seealso cref="P:Alt.GUI.ZedGraph.MinorTic.IsCrossOutside"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.MinorTic.IsOpposite">
            <summary>
            Gets or sets a property that determines whether or not the major opposite tic marks
            are shown.
            </summary>
            <remarks>
            These are the tic marks on the inside of the <see cref="T:Alt.GUI.ZedGraph.Axis"/> border on
            the opposite side from the axis.
            The major tic spacing is controlled by <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/>.
            </remarks>
            <value>true to show the major opposite tic marks, false otherwise</value>
            <seealso cref="F:Alt.GUI.ZedGraph.MinorTic.Default.IsOpposite"/>.
            <seealso cref="P:Alt.GUI.ZedGraph.MinorTic.IsOutside"/>
            <seealso cref="P:Alt.GUI.ZedGraph.MinorTic.IsInside"/>
            <seealso cref="P:Alt.GUI.ZedGraph.MinorTic.IsOpposite"/>
            <seealso cref="P:Alt.GUI.ZedGraph.MinorTic.IsCrossInside"/>
            <seealso cref="P:Alt.GUI.ZedGraph.MinorTic.IsCrossOutside"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.MinorTic.IsCrossOutside">
            <summary>
            Gets or sets the display mode for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> major outside 
            "cross" tic marks.
            </summary>
            <remarks>
            The "cross" tics are a special, additional set of tic marks that
            always appear on the actual axis, even if it has been shifted due
            to the <see cref="P:Alt.GUI.ZedGraph.Axis.Cross"/> setting.  The other tic marks are always
            fixed to the edges of the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>.  The cross tics
            are normally not displayed, since, if <see cref="P:Alt.GUI.ZedGraph.Axis.CrossAuto"/> is true,
            they will exactly overlay the "normal" and "inside" tics.  If
            <see cref="P:Alt.GUI.ZedGraph.Axis.CrossAuto"/> is false, then you will most likely want to
            enable the cross tics.
            The major tic spacing is controlled by <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/>.
            </remarks>
            <value>true to show the major cross tic marks, false otherwise</value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.MinorTic.IsCrossInside">
            <summary>
            Gets or sets the display mode for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> major inside 
            "cross" tic marks.
            </summary>
            <remarks>
            The "cross" tics are a special, additional set of tic marks that
            always appear on the actual axis, even if it has been shifted due
            to the <see cref="P:Alt.GUI.ZedGraph.Axis.Cross"/> setting.  The other tic marks are always
            fixed to the edges of the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>.  The cross tics
            are normally not displayed, since, if <see cref="P:Alt.GUI.ZedGraph.Axis.CrossAuto"/> is true,
            they will exactly overlay the "normal" and "inside" tics.  If
            <see cref="P:Alt.GUI.ZedGraph.Axis.CrossAuto"/> is false, then you will most likely want to
            enable the cross tics.
            The major tic spacing is controlled by <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/>.
            </remarks>
            <value>true to show the major cross tic marks, false otherwise</value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.MinorTic.PenWidth">
            <summary>
            Gets or sets the pen width to be used when drawing the tic marks for
            this <see cref="T:Alt.GUI.ZedGraph.Axis"/>
            </summary>
            <value>The pen width is defined in points (1/72 inch)</value>
            <seealso cref="F:Alt.GUI.ZedGraph.MinorTic.Default.PenWidth"/>.
            <seealso cref="P:Alt.GUI.ZedGraph.MinorTic.IsOutside"/>
            <seealso cref="P:Alt.GUI.ZedGraph.MinorTic.Color"/>
        </member>
        <member name="T:Alt.GUI.ZedGraph.MinorTic.Default">
            <summary>
            A simple struct that defines the
            default property values for the <see cref="T:Alt.GUI.ZedGraph.MinorTic"/> class.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.MinorTic.Default.Size">
            <summary>
            The default size for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> minor tic marks.
            (<see cref="P:Alt.GUI.ZedGraph.MinorTic.Size"/> property). Units are in points (1/72 inch).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.MinorTic.Default.PenWidth">
            <summary>
            The default pen width for drawing the <see cref="T:Alt.GUI.ZedGraph.Axis"/> tic marks.
            (<see cref="P:Alt.GUI.ZedGraph.MinorTic.PenWidth"/> property). Units are in points (1/72 inch).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.MinorTic.Default.IsOutside">
            <summary>
            The display mode for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> minor outside tic marks
            (<see cref="P:Alt.GUI.ZedGraph.MinorTic.IsOutside"/> property).
            The minor tic spacing is controlled by <see cref="P:Alt.GUI.ZedGraph.Scale.MinorStep"/>.
            </summary>
            <value>true to show the minor tic marks (outside the axis),
            false otherwise</value>
        </member>
        <member name="F:Alt.GUI.ZedGraph.MinorTic.Default.IsInside">
            <summary>
            The display mode for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> minor inside tic marks
            (<see cref="P:Alt.GUI.ZedGraph.MinorTic.IsInside"/> property).
            The minor tic spacing is controlled by <see cref="P:Alt.GUI.ZedGraph.Scale.MinorStep"/>.
            </summary>
            <value>true to show the minor tic marks (inside the axis),
            false otherwise</value>
        </member>
        <member name="F:Alt.GUI.ZedGraph.MinorTic.Default.IsOpposite">
            <summary>
            The display mode for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> minor opposite tic marks
            (<see cref="P:Alt.GUI.ZedGraph.MinorTic.IsOpposite"/> property).
            The minor tic spacing is controlled by <see cref="P:Alt.GUI.ZedGraph.Scale.MinorStep"/>.
            </summary>
            <value>true to show the minor tic marks
            (inside the axis on the opposite side),
            false otherwise</value>
        </member>
        <member name="F:Alt.GUI.ZedGraph.MinorTic.Default.IsCrossOutside">
            <summary>
            The default display mode for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> minor outside 
            "cross" tic marks (<see cref="P:Alt.GUI.ZedGraph.MinorTic.IsCrossOutside"/> property).
            </summary>
            <remarks>
            The "cross" tics are a special, additional set of tic marks that
            always appear on the actual axis, even if it has been shifted due
            to the <see cref="P:Alt.GUI.ZedGraph.Axis.Cross"/> setting.  The other tic marks are always
            fixed to the edges of the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>.  The cross tics
            are normally not displayed, since, if <see cref="P:Alt.GUI.ZedGraph.Axis.CrossAuto"/> is true,
            they will exactly overlay the "normal" and "inside" tics.  If
            <see cref="P:Alt.GUI.ZedGraph.Axis.CrossAuto"/> is false, then you will most likely want to
            enable the cross tics.
            The minor tic spacing is controlled by <see cref="P:Alt.GUI.ZedGraph.Scale.MinorStep"/>.
            </remarks>
            <value>true to show the major cross tic marks, false otherwise</value>
        </member>
        <member name="F:Alt.GUI.ZedGraph.MinorTic.Default.IsCrossInside">
            <summary>
            The default display mode for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> minor inside 
            "cross" tic marks (<see cref="P:Alt.GUI.ZedGraph.MinorTic.IsCrossInside"/> property).
            </summary>
            <remarks>
            The "cross" tics are a special, additional set of tic marks that
            always appear on the actual axis, even if it has been shifted due
            to the <see cref="P:Alt.GUI.ZedGraph.Axis.Cross"/> setting.  The other tic marks are always
            fixed to the edges of the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>.  The cross tics
            are normally not displayed, since, if <see cref="P:Alt.GUI.ZedGraph.Axis.CrossAuto"/> is true,
            they will exactly overlay the "normal" and "inside" tics.  If
            <see cref="P:Alt.GUI.ZedGraph.Axis.CrossAuto"/> is false, then you will most likely want to
            enable the cross tics.
            The major tic spacing is controlled by <see cref="P:Alt.GUI.ZedGraph.Scale.MinorStep"/>.
            </remarks>
            <value>true to show the major cross tic marks, false otherwise</value>
        </member>
        <member name="F:Alt.GUI.ZedGraph.MinorTic.Default.Color">
            <summary>
            The default color for minor tics (<see cref="P:Alt.GUI.ZedGraph.MinorTic.Color"/> property).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.MajorTic.schema2">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.MajorTic.#ctor">
            <summary>
            Default constructor for <see cref="T:Alt.GUI.ZedGraph.MajorTic"/>.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.MajorTic.#ctor(Alt.GUI.ZedGraph.MajorTic)">
            <summary>
            Copy constructor.
            </summary>
            <param name="rhs">The <see cref="T:Alt.GUI.ZedGraph.MajorTic"/> that is to be copied.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.MajorTic.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.MajorTic.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.MajorTic.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.MajorTic.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.MajorTic.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="P:Alt.GUI.ZedGraph.MajorTic.IsBetweenLabels">
            <summary>
            Gets or sets a property that determines whether or not the major tics will be drawn
            inbetween the labels, rather than right at the labels.
            </summary>
            <remarks>
            Note that this setting is only
            applicable if <see cref="P:Alt.GUI.ZedGraph.Axis.Type"/> = <see cref="F:Alt.GUI.ZedGraph.AxisType.Text"/>.
            </remarks>
            <value>true to place the text between the labels for text axes, false otherwise</value>
            <seealso cref="P:Alt.GUI.ZedGraph.MinorTic.IsOutside"/>
            <seealso cref="P:Alt.GUI.ZedGraph.MinorTic.IsInside"/>
            <seealso cref="P:Alt.GUI.ZedGraph.MinorTic.IsOpposite"/>
            <seealso cref="P:Alt.GUI.ZedGraph.MinorTic.IsCrossOutside"/>
            <seealso cref="P:Alt.GUI.ZedGraph.MinorTic.IsCrossInside"/>
        </member>
        <member name="T:Alt.GUI.ZedGraph.MajorTic.Default">
            <summary>
            A simple struct that defines the
            default property values for the <see cref="T:Alt.GUI.ZedGraph.MinorTic"/> class.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.MajorTic.Default.Size">
            <summary>
            The default size for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> tic marks.
            (<see cref="P:Alt.GUI.ZedGraph.MinorTic.Size"/> property). Units are in points (1/72 inch).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.MajorTic.Default.PenWidth">
            <summary>
            The default pen width for drawing the <see cref="T:Alt.GUI.ZedGraph.Axis"/> tic marks.
            (<see cref="P:Alt.GUI.ZedGraph.MinorTic.PenWidth"/> property). Units are in points (1/72 inch).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.MajorTic.Default.IsOutside">
            <summary>
            The display mode for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> major outside tic marks
            (<see cref="P:Alt.GUI.ZedGraph.MinorTic.IsOutside"/> property).
            The major tic spacing is controlled by <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/>.
            </summary>
            <value>true to show the major tic marks (outside the axis),
            false otherwise</value>
        </member>
        <member name="F:Alt.GUI.ZedGraph.MajorTic.Default.IsInside">
            <summary>
            The display mode for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> major inside tic marks
            (<see cref="P:Alt.GUI.ZedGraph.MinorTic.IsInside"/> property).
            The major tic spacing is controlled by <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/>.
            </summary>
            <value>true to show the major tic marks (inside the axis),
            false otherwise</value>
        </member>
        <member name="F:Alt.GUI.ZedGraph.MajorTic.Default.IsOpposite">
            <summary>
            The display mode for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> major opposite tic marks
            (<see cref="P:Alt.GUI.ZedGraph.MinorTic.IsOpposite"/> property).
            The major tic spacing is controlled by <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/>.
            </summary>
            <value>true to show the major tic marks
            (inside the axis on the opposite side),
            false otherwise</value>
        </member>
        <member name="F:Alt.GUI.ZedGraph.MajorTic.Default.IsCrossOutside">
            <summary>
            The default display mode for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> major outside 
            "cross" tic marks (<see cref="P:Alt.GUI.ZedGraph.MinorTic.IsCrossOutside"/> property).
            </summary>
            <remarks>
            The "cross" tics are a special, additional set of tic marks that
            always appear on the actual axis, even if it has been shifted due
            to the <see cref="P:Alt.GUI.ZedGraph.Axis.Cross"/> setting.  The other tic marks are always
            fixed to the edges of the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>.  The cross tics
            are normally not displayed, since, if <see cref="P:Alt.GUI.ZedGraph.Axis.CrossAuto"/> is true,
            they will exactly overlay the "normal" and "inside" tics.  If
            <see cref="P:Alt.GUI.ZedGraph.Axis.CrossAuto"/> is false, then you will most likely want to
            enable the cross tics.
            The major tic spacing is controlled by <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/>.
            </remarks>
            <value>true to show the major cross tic marks, false otherwise</value>
        </member>
        <member name="F:Alt.GUI.ZedGraph.MajorTic.Default.IsCrossInside">
            <summary>
            The default display mode for the <see cref="T:Alt.GUI.ZedGraph.Axis"/> major inside 
            "cross" tic marks (<see cref="P:Alt.GUI.ZedGraph.MinorTic.IsCrossInside"/> property).
            </summary>
            <remarks>
            The "cross" tics are a special, additional set of tic marks that
            always appear on the actual axis, even if it has been shifted due
            to the <see cref="P:Alt.GUI.ZedGraph.Axis.Cross"/> setting.  The other tic marks are always
            fixed to the edges of the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>.  The cross tics
            are normally not displayed, since, if <see cref="P:Alt.GUI.ZedGraph.Axis.CrossAuto"/> is true,
            they will exactly overlay the "normal" and "inside" tics.  If
            <see cref="P:Alt.GUI.ZedGraph.Axis.CrossAuto"/> is false, then you will most likely want to
            enable the cross tics.
            The major tic spacing is controlled by <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/>.
            </remarks>
            <value>true to show the major cross tic marks, false otherwise</value>
        </member>
        <member name="F:Alt.GUI.ZedGraph.MajorTic.Default.Color">
            <summary>
            The default color for major tics (<see cref="P:Alt.GUI.ZedGraph.MinorTic.Color"/> property).
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Margin">
            <summary>
            Class that handles that stores the margin properties for the GraphPane
            </summary>
            
            <author> John Champion </author>
            <version> $Revision: 3.1 $ $Date: 2006-06-24 20:26:44 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Margin.schema">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Margin._left">
            <summary>
            Private fields that store the size of the margin around the edge of the pane which will be
            kept blank.  Use the public properties <see cref="P:Alt.GUI.ZedGraph.Margin.Left"/>, <see cref="P:Alt.GUI.ZedGraph.Margin.Right"/>,
            <see cref="P:Alt.GUI.ZedGraph.Margin.Top"/>, <see cref="P:Alt.GUI.ZedGraph.Margin.Bottom"/> to access these values.
            </summary>
            <value>Units are points (1/72 inch)</value>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Margin._right">
            <summary>
            Private fields that store the size of the margin around the edge of the pane which will be
            kept blank.  Use the public properties <see cref="P:Alt.GUI.ZedGraph.Margin.Left"/>, <see cref="P:Alt.GUI.ZedGraph.Margin.Right"/>,
            <see cref="P:Alt.GUI.ZedGraph.Margin.Top"/>, <see cref="P:Alt.GUI.ZedGraph.Margin.Bottom"/> to access these values.
            </summary>
            <value>Units are points (1/72 inch)</value>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Margin._top">
            <summary>
            Private fields that store the size of the margin around the edge of the pane which will be
            kept blank.  Use the public properties <see cref="P:Alt.GUI.ZedGraph.Margin.Left"/>, <see cref="P:Alt.GUI.ZedGraph.Margin.Right"/>,
            <see cref="P:Alt.GUI.ZedGraph.Margin.Top"/>, <see cref="P:Alt.GUI.ZedGraph.Margin.Bottom"/> to access these values.
            </summary>
            <value>Units are points (1/72 inch)</value>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Margin._bottom">
            <summary>
            Private fields that store the size of the margin around the edge of the pane which will be
            kept blank.  Use the public properties <see cref="P:Alt.GUI.ZedGraph.Margin.Left"/>, <see cref="P:Alt.GUI.ZedGraph.Margin.Right"/>,
            <see cref="P:Alt.GUI.ZedGraph.Margin.Top"/>, <see cref="P:Alt.GUI.ZedGraph.Margin.Bottom"/> to access these values.
            </summary>
            <value>Units are points (1/72 inch)</value>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Margin.#ctor">
            <summary>
            Constructor to build a <see cref="T:Alt.GUI.ZedGraph.Margin"/> from the default values.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Margin.#ctor(Alt.GUI.ZedGraph.Margin)">
            <summary>
            Copy constructor
            </summary>
            <param name="rhs">the <see cref="T:Alt.GUI.ZedGraph.Margin"/> instance to be copied.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Margin.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.Margin.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Margin.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Margin.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Margin.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Margin.Left">
            <summary>
            Gets or sets a float value that determines the margin area between the left edge of the
            <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/> rectangle and the features of the graph.
            </summary>
            <value>This value is in units of points (1/72 inch), and is scaled
            linearly with the graph size.</value>
            <seealso cref="F:Alt.GUI.ZedGraph.Margin.Default.Left"/>
            <seealso cref="P:Alt.GUI.ZedGraph.PaneBase.IsFontsScaled"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Margin.Right"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Margin.Top"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Margin.Bottom"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Margin.Right">
            <summary>
            Gets or sets a float value that determines the margin area between the right edge of the
            <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/> rectangle and the features of the graph.
            </summary>
            <value>This value is in units of points (1/72 inch), and is scaled
            linearly with the graph size.</value>
            <seealso cref="F:Alt.GUI.ZedGraph.Margin.Default.Right"/>
            <seealso cref="P:Alt.GUI.ZedGraph.PaneBase.IsFontsScaled"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Margin.Left"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Margin.Top"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Margin.Bottom"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Margin.Top">
            <summary>
            Gets or sets a float value that determines the margin area between the top edge of the
            <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/> rectangle and the features of the graph.
            </summary>
            <value>This value is in units of points (1/72 inch), and is scaled
            linearly with the graph size.</value>
            <seealso cref="F:Alt.GUI.ZedGraph.Margin.Default.Top"/>
            <seealso cref="P:Alt.GUI.ZedGraph.PaneBase.IsFontsScaled"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Margin.Left"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Margin.Right"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Margin.Bottom"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Margin.Bottom">
            <summary>
            Gets or sets a float value that determines the margin area between the bottom edge of the
            <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/> rectangle and the features of the graph.
            </summary>
            <value>This value is in units of points (1/72 inch), and is scaled
            linearly with the graph size.</value>
            <seealso cref="F:Alt.GUI.ZedGraph.Margin.Default.Bottom"/>
            <seealso cref="P:Alt.GUI.ZedGraph.PaneBase.IsFontsScaled"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Margin.Left"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Margin.Right"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Margin.Top"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Margin.All">
            <summary>
            Concurrently sets all outer margin values to a single value.
            </summary>
            <value>This value is in units of points (1/72 inch), and is scaled
            linearly with the graph size.</value>
            <seealso cref="P:Alt.GUI.ZedGraph.PaneBase.IsFontsScaled"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Margin.Bottom"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Margin.Left"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Margin.Right"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Margin.Top"/>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Margin.Default">
            <summary>
            A simple struct that defines the default property values for the <see cref="T:Alt.GUI.ZedGraph.Margin"/> class.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Margin.Default.Left">
            <summary>
            The default value for the <see cref="P:Alt.GUI.ZedGraph.Margin.Left"/> property, which is
            the size of the space on the left side of the <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/>.
            </summary>
            <value>Units are points (1/72 inch)</value>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Margin.Default.Right">
            <summary>
            The default value for the <see cref="P:Alt.GUI.ZedGraph.Margin.Right"/> property, which is
            the size of the space on the right side of the <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/>.
            </summary>
            <value>Units are points (1/72 inch)</value>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Margin.Default.Top">
            <summary>
            The default value for the <see cref="P:Alt.GUI.ZedGraph.Margin.Top"/> property, which is
            the size of the space on the top side of the <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/>.
            </summary>
            <value>Units are points (1/72 inch)</value>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Margin.Default.Bottom">
            <summary>
            The default value for the <see cref="P:Alt.GUI.ZedGraph.Margin.Bottom"/> property, which is
            the size of the space on the bottom side of the <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/>.
            </summary>
            <value>Units are points (1/72 inch)</value>
        </member>
        <member name="T:Alt.GUI.ZedGraph.MasterPane">
            <summary>
            A collection class containing a list of <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> objects
            organized together in some form.
            </summary>
            
            <author>John Champion</author>
            <version> $Revision: 3.26 $ $Date: 2007-11-05 18:28:56 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.MasterPane.schema2">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.MasterPane._paneList">
            <summary>
            Private field that holds a collection of <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> objects for inclusion
            in this <see cref="T:Alt.GUI.ZedGraph.MasterPane"/>.  Use the public property <see cref="P:Alt.GUI.ZedGraph.MasterPane.PaneList"/>
            to access this collection.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.MasterPane._innerPaneGap">
            <summary>
            Private field that sets the amount of space between the GraphPanes.  Use the public property
            <see cref="P:Alt.GUI.ZedGraph.MasterPane.InnerPaneGap"/> to access this value;
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.MasterPane._isUniformLegendEntries">
             <summary>
            Private field that stores a boolean value which signifies whether all 
            <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>s in the chart use the same entries in their 
            <see cref="T:Alt.GUI.ZedGraph.Legend"/>  If set to true, only one set of entries will be displayed in 
            this <see cref="T:Alt.GUI.ZedGraph.Legend"/> instance.  If set to false, this instance will display all 
            entries from all <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>s.
             </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.MasterPane._isCommonScaleFactor">
            <summary>
            private field that determines if the
            <see cref="M:Alt.GUI.ZedGraph.MasterPane.DoLayout(Alt.Sketch.Graphics)"/>
            function will automatically set
            the <see cref="P:Alt.GUI.ZedGraph.PaneBase.BaseDimension"/> of each <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> in the
            <see cref="P:Alt.GUI.ZedGraph.MasterPane.PaneList"/> such that the scale factors have the same value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.MasterPane._paneLayout">
            <summary>
            private field that saves the paneLayout format specified when
            <see cref="M:Alt.GUI.ZedGraph.MasterPane.SetLayout(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.PaneLayout)"/> was called. This value will
            default to <see cref="F:Alt.GUI.ZedGraph.MasterPane.Default.PaneLayout"/> if
            <see cref="M:Alt.GUI.ZedGraph.MasterPane.SetLayout(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.PaneLayout)"/> (or an overload) was never called.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.MasterPane._isColumnSpecified">
            <summary>
            Private field that stores the boolean value that determines whether
            <see cref="F:Alt.GUI.ZedGraph.MasterPane._countList"/> is specifying rows or columns.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.MasterPane._countList">
            <summary>
            private field that stores the row/column item count that was specified to the
            <see cref="M:Alt.GUI.ZedGraph.MasterPane.SetLayout(Alt.Sketch.Graphics,System.Boolean,System.Int32[],System.Single[])"/> method.  This values will be
            null if <see cref="M:Alt.GUI.ZedGraph.MasterPane.SetLayout(Alt.Sketch.Graphics,System.Boolean,System.Int32[],System.Single[])"/> was never called.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.MasterPane._prop">
            <summary>
            private field that stores the row/column size proportional values as specified
            to the <see cref="M:Alt.GUI.ZedGraph.MasterPane.SetLayout(Alt.Sketch.Graphics,System.Boolean,System.Int32[],System.Single[])"/> method.  This
            value will be null if <see cref="M:Alt.GUI.ZedGraph.MasterPane.SetLayout(Alt.Sketch.Graphics,System.Boolean,System.Int32[],System.Single[])"/>
            was never called.  
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.MasterPane._isAntiAlias">
            <summary>
            private field that determines if anti-aliased drawing will be forced on.  Use the
            public property <see cref="P:Alt.GUI.ZedGraph.MasterPane.IsAntiAlias"/> to access this value.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.MasterPane.#ctor">
            <summary>
            Default constructor for the class.  Sets the <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/> to (0, 0, 500, 375).
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.MasterPane.#ctor(System.String,Alt.Sketch.Rect)">
            <summary>
            Default constructor for the class.  Specifies the <see cref="P:Alt.GUI.ZedGraph.PaneBase.Title"/> of
            the <see cref="T:Alt.GUI.ZedGraph.MasterPane"/>, and the size of the <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/>.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.MasterPane.#ctor(Alt.GUI.ZedGraph.MasterPane)">
            <summary>
            The Copy Constructor - Make a deep-copy clone of this class instance.
            </summary>
            <param name="rhs">The <see cref="T:Alt.GUI.ZedGraph.MasterPane"/> object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.MasterPane.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.MasterPane.Clone"/> to make a deep copy.
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.MasterPane.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.MasterPane.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.MasterPane.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.MasterPane.OnDeserialization(System.Object)">
            <summary>
            Respond to the callback when the MasterPane objects are fully initialized.
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.MasterPane.Add(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Add a <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object to the <see cref="P:Alt.GUI.ZedGraph.MasterPane.PaneList"/> collection at the end of the list.
            </summary>
            <param name="pane">A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object to
            be added</param>
            <seealso cref="!:IList.Add"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.MasterPane.m_AxisChangeTempBitmap">
            <summary>
            Call <see cref="M:Alt.GUI.ZedGraph.GraphPane.AxisChange"/> for all <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> objects in the
            <see cref="P:Alt.GUI.ZedGraph.MasterPane.PaneList"/> list.
            </summary>
            <remarks>
            This overload of AxisChange just uses the default Graphics instance for the screen.
            If you have a Graphics instance available from your AltGUI, you should use
            the <see cref="M:Alt.GUI.ZedGraph.MasterPane.AxisChange(Alt.Sketch.Graphics)"/> overload instead.
            </remarks>
        </member>
        <member name="M:Alt.GUI.ZedGraph.MasterPane.AxisChange(Alt.Sketch.Graphics)">
            <summary>
            Call <see cref="M:Alt.GUI.ZedGraph.GraphPane.AxisChange"/> for all <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> objects in the
            <see cref="P:Alt.GUI.ZedGraph.MasterPane.PaneList"/> list.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.MasterPane.ReSize(Alt.Sketch.Graphics)">
            <summary>
            Redo the layout using the current size of the <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/>,
            and also handle resizing the
            contents by calling <see cref="M:Alt.GUI.ZedGraph.MasterPane.DoLayout(Alt.Sketch.Graphics)"/>.
            </summary>
            <remarks>This method will use the pane layout that was specified by a call to
            <see cref="M:Alt.GUI.ZedGraph.MasterPane.SetLayout(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.PaneLayout)"/>.  If
            <see cref="M:Alt.GUI.ZedGraph.MasterPane.SetLayout(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.PaneLayout)"/> has not previously been called,
            it will default to <see cref="F:Alt.GUI.ZedGraph.MasterPane.Default.PaneLayout"/>.
            </remarks>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <seealso cref="M:Alt.GUI.ZedGraph.MasterPane.SetLayout(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.PaneLayout)"/>
            <seealso cref="M:Alt.GUI.ZedGraph.MasterPane.SetLayout(Alt.Sketch.Graphics,System.Int32,System.Int32)"/>
            <seealso cref="M:Alt.GUI.ZedGraph.MasterPane.SetLayout(Alt.Sketch.Graphics,System.Boolean,System.Int32[])"/>
            <seealso cref="M:Alt.GUI.ZedGraph.MasterPane.SetLayout(Alt.Sketch.Graphics,System.Boolean,System.Int32[],System.Single[])"/>
        </member>
        <member name="M:Alt.GUI.ZedGraph.MasterPane.ReSize(Alt.Sketch.Graphics,Alt.Sketch.Rect)">
            <summary>
            Change the size of the <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/>, and also handle resizing the
            contents by calling <see cref="M:Alt.GUI.ZedGraph.MasterPane.DoLayout(Alt.Sketch.Graphics)"/>.
            </summary>
            <remarks>This method will use the pane layout that was specified by a call to
            <see cref="M:Alt.GUI.ZedGraph.MasterPane.SetLayout(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.PaneLayout)"/>.  If
            <see cref="M:Alt.GUI.ZedGraph.MasterPane.SetLayout(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.PaneLayout)"/> has not previously been called,
            it will default to <see cref="F:Alt.GUI.ZedGraph.MasterPane.Default.PaneLayout"/>.
            </remarks>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="rect"></param>
            <seealso cref="M:Alt.GUI.ZedGraph.MasterPane.SetLayout(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.PaneLayout)"/>
            <seealso cref="M:Alt.GUI.ZedGraph.MasterPane.SetLayout(Alt.Sketch.Graphics,System.Int32,System.Int32)"/>
            <seealso cref="M:Alt.GUI.ZedGraph.MasterPane.SetLayout(Alt.Sketch.Graphics,System.Boolean,System.Int32[])"/>
            <seealso cref="M:Alt.GUI.ZedGraph.MasterPane.SetLayout(Alt.Sketch.Graphics,System.Boolean,System.Int32[],System.Single[])"/>
        </member>
        <member name="M:Alt.GUI.ZedGraph.MasterPane.CommonScaleFactor">
            <summary>
            Method that forces the scale factor calculations
            (via <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/>),
            to give a common scale factor for all <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> objects in the
            <see cref="P:Alt.GUI.ZedGraph.MasterPane.PaneList"/>.
            </summary>
            <remarks>
            This will make it such that a given font size will result in the same output font
            size for all <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>'s.  Note that this does not make the scale
            factor for the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>'s the same as that of the
            <see cref="T:Alt.GUI.ZedGraph.MasterPane"/>.
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.MasterPane.IsCommonScaleFactor"/>
        </member>
        <member name="M:Alt.GUI.ZedGraph.MasterPane.Draw(Alt.Sketch.Graphics)">
            <summary>
            Render all the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> objects in the <see cref="P:Alt.GUI.ZedGraph.MasterPane.PaneList"/> to the
            specified graphics device.
            </summary>
            <remarks>This method should be part of the Paint() update process.  Calling this routine
            will redraw all
            features of all the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> items.  No preparation is required other than
            instantiated <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> objects that have been added to the list with the
            <see cref="M:Alt.GUI.ZedGraph.MasterPane.Add(Alt.GUI.ZedGraph.GraphPane)"/> method.
            </remarks>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.MasterPane.FindNearestPaneObject(Alt.Sketch.Point,Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane@,System.Object@,System.Int32@)">
            <summary>
            Find the pane and the object within that pane that lies closest to the specified
            mouse (screen) point.
            </summary>
            <remarks>
            This method first finds the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> within the list that contains
            the specified mouse point.  It then calls the <see cref="M:Alt.GUI.ZedGraph.GraphPane.FindNearestObject(Alt.Sketch.Point,Alt.Sketch.Graphics,System.Object@,System.Int32@)"/>
            method to determine which object, if any, was clicked.  With the exception of the
            <see paramref="pane"/>, all the parameters in this method are identical to those
            in the <see cref="M:Alt.GUI.ZedGraph.GraphPane.FindNearestObject(Alt.Sketch.Point,Alt.Sketch.Graphics,System.Object@,System.Int32@)"/> method.
            If the mouse point lies within the <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/> of any 
            <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> item, then that pane will be returned (otherwise it will be
            null).  Further, within the selected pane, if the mouse point is within the
            bounding box of any of the items (or in the case
            of <see cref="T:Alt.GUI.ZedGraph.ArrowObj"/> and <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>, within
            <see cref="F:Alt.GUI.ZedGraph.GraphPane.Default.NearestTol"/> pixels), then the object will be returned.
            You must check the type of the object to determine what object was
            selected (for example, "if ( object is Legend ) ...").  The
            <see paramref="index"/> parameter returns the index number of the item
            within the selected object (such as the point number within a
            <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> object.
            </remarks>
            <param name="mousePt">The screen point, in pixel coordinates.</param>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that was clicked.</param>
            <param name="nearestObj">A reference to the nearest object to the
            specified screen point.  This can be any of <see cref="T:Alt.GUI.ZedGraph.Axis"/>,
            <see cref="T:Alt.GUI.ZedGraph.Legend"/>, <see cref="P:Alt.GUI.ZedGraph.PaneBase.Title"/>,
            <see cref="T:Alt.GUI.ZedGraph.TextObj"/>, <see cref="T:Alt.GUI.ZedGraph.ArrowObj"/>, or <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>.
            Note: If the pane title is selected, then the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object
            will be returned.
            </param>
            <param name="index">The index number of the item within the selected object
            (where applicable).  For example, for a <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> object,
            <see paramref="index"/> will be the index number of the nearest data point,
            accessible via <see cref="P:Alt.GUI.ZedGraph.CurveItem.Points">CurveItem.Points[index]</see>.
            index will be -1 if no data points are available.</param>
            <returns>true if a <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> was found, false otherwise.</returns>
            <seealso cref="M:Alt.GUI.ZedGraph.GraphPane.FindNearestObject(Alt.Sketch.Point,Alt.Sketch.Graphics,System.Object@,System.Int32@)"/>
        </member>
        <member name="M:Alt.GUI.ZedGraph.MasterPane.FindPane(Alt.Sketch.Point)">
            <summary>
            Find the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> within the <see cref="P:Alt.GUI.ZedGraph.MasterPane.PaneList"/> that contains the
            <see paramref="mousePt"/> within its <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/>.
            </summary>
            <param name="mousePt">The mouse point location where you want to search</param>
            <returns>A <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that contains the mouse point, or
            null if no <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> was found.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.MasterPane.FindChartRect(Alt.Sketch.Point)">
            <summary>
            Find the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> within the <see cref="P:Alt.GUI.ZedGraph.MasterPane.PaneList"/> that contains the
            <see paramref="mousePt"/> within its <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>.
            </summary>
            <param name="mousePt">The mouse point location where you want to search</param>
            <returns>A <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that contains the mouse point, or
            null if no <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> was found.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.MasterPane.SetLayout(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.PaneLayout)">
            <overloads>The SetLayout() methods setup the desired layout of the
            <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> objects within a <see cref="T:Alt.GUI.ZedGraph.MasterPane"/>.  These functions
            do not make any changes, they merely set the parameters so that future calls
            to <see cref="M:Alt.GUI.ZedGraph.PaneBase.ReSize(Alt.Sketch.Graphics,Alt.Sketch.Rect)"/> or <see cref="M:Alt.GUI.ZedGraph.MasterPane.DoLayout(Alt.Sketch.Graphics)"/>
            will use the desired layout.<br/><br/>
            The layout options include a set of "canned" layouts provided by the
            <see cref="T:Alt.GUI.ZedGraph.PaneLayout"/> enumeration, options to just set a specific
            number of rows and columns of panes (and all pane sizes are the same), and more
            customized options of specifying the number or rows in each column or the number of
            columns in each row, along with proportional values that determine the size of each
            individual column or row.
            </overloads>
            <summary>
            Automatically set all of the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/>'s in
            the list to a pre-defined layout configuration from a <see cref="T:Alt.GUI.ZedGraph.PaneLayout"/>
            enumeration.
            </summary>
            <remarks>This method uses a <see cref="T:Alt.GUI.ZedGraph.PaneLayout"/> enumeration to describe the type of layout
            to be used.  Overloads are available that provide other layout options</remarks>
            <param name="paneLayout">A <see cref="T:Alt.GUI.ZedGraph.PaneLayout"/> enumeration that describes how
            the panes should be laid out within the <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/>.</param>
            <param name="g">
            A graphic device object to be drawn into.  This is normally created with a call to
            the CreateGraphics() method of the Control or Form.
            </param>
            <seealso cref="M:Alt.GUI.ZedGraph.MasterPane.SetLayout(Alt.Sketch.Graphics,System.Int32,System.Int32)"/>
            <seealso cref="M:Alt.GUI.ZedGraph.MasterPane.SetLayout(Alt.Sketch.Graphics,System.Boolean,System.Int32[])"/>
            <seealso cref="M:Alt.GUI.ZedGraph.MasterPane.SetLayout(Alt.Sketch.Graphics,System.Boolean,System.Int32[],System.Single[])"/>
        </member>
        <member name="M:Alt.GUI.ZedGraph.MasterPane.SetLayout(Alt.Sketch.Graphics,System.Int32,System.Int32)">
            <summary>
            Automatically set all of the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/>'s in
            the list to a reasonable configuration.
            </summary>
            <remarks>This method explicitly specifies the number of rows and columns to use
            in the layout, and all <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> objects will have the same size.
            Overloads are available that provide other layout options</remarks>
            <param name="g">
            A graphic device object to be drawn into.  This is normally created with a call to
            the CreateGraphics() method of the Control or Form.
            </param>
            <param name="rows">The number of rows of <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> objects
            to include in the layout</param>
            <param name="columns">The number of columns of <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> objects
            to include in the layout</param>
            <seealso cref="M:Alt.GUI.ZedGraph.MasterPane.SetLayout(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.PaneLayout)"/>
            <seealso cref="M:Alt.GUI.ZedGraph.MasterPane.SetLayout(Alt.Sketch.Graphics,System.Boolean,System.Int32[])"/>
            <seealso cref="M:Alt.GUI.ZedGraph.MasterPane.SetLayout(Alt.Sketch.Graphics,System.Boolean,System.Int32[],System.Single[])"/>
        </member>
        <member name="M:Alt.GUI.ZedGraph.MasterPane.SetLayout(Alt.Sketch.Graphics,System.Boolean,System.Int32[])">
            <summary>
            Automatically set all of the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/>'s in
            the list to the specified configuration.
            </summary>
            <remarks>This method specifies the number of rows in each column, or the number of
            columns in each row, allowing for irregular layouts.  Overloads are available that
            provide other layout options.
            </remarks>
            <param name="g">
            A graphic device object to be drawn into.  This is normally created with a call to
            the CreateGraphics() method of the Control or Form.
            </param>
            <param name="isColumnSpecified">Specifies whether the number of columns in each row, or
            the number of rows in each column will be specified.  A value of true indicates the
            number of columns in each row are specified in <see paramref="countList"/>.</param>
            <param name="countList">An integer array specifying either the number of columns in
            each row or the number of rows in each column, depending on the value of
            <see paramref="isColumnSpecified"/>.</param>
            <seealso cref="M:Alt.GUI.ZedGraph.MasterPane.SetLayout(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.PaneLayout)"/>
            <seealso cref="M:Alt.GUI.ZedGraph.MasterPane.SetLayout(Alt.Sketch.Graphics,System.Int32,System.Int32)"/>
            <seealso cref="M:Alt.GUI.ZedGraph.MasterPane.SetLayout(Alt.Sketch.Graphics,System.Boolean,System.Int32[],System.Single[])"/>
        </member>
        <member name="M:Alt.GUI.ZedGraph.MasterPane.SetLayout(Alt.Sketch.Graphics,System.Boolean,System.Int32[],System.Single[])">
            <summary>
            Automatically set all of the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/>'s in
            the list to the specified configuration.
            </summary>
            <remarks>This method specifies the number of panes in each row or column, allowing for
            irregular layouts.</remarks>
            <remarks>This method specifies the number of rows in each column, or the number of
            columns in each row, allowing for irregular layouts.  Additionally, a
            <see paramref="proportion"/> parameter is provided that allows varying column or
            row sizes.  Overloads for SetLayout() are available that provide other layout options.
            </remarks>
            <param name="g">
            A graphic device object to be drawn into.  This is normally created with a call to
            the CreateGraphics() method of the Control or Form.
            </param>
            <param name="isColumnSpecified">Specifies whether the number of columns in each row, or
            the number of rows in each column will be specified.  A value of true indicates the
            number of columns in each row are specified in <see paramref="_countList"/>.</param>
            <param name="countList">An integer array specifying either the number of columns in
            each row or the number of rows in each column, depending on the value of
            <see paramref="isColumnSpecified"/>.</param>
            <param name="proportion">An array of float values specifying proportional sizes for each
            row or column.  Note that these proportions apply to the non-specified dimension -- that is,
            if <see paramref="isColumnSpecified"/> is true, then these proportions apply to the row
            heights, and if <see paramref="isColumnSpecified"/> is false, then these proportions apply
            to the column widths.  The values in this array are arbitrary floats -- the dimension of
            any given row or column is that particular proportional value divided by the sum of all
            the values.  For example, let <see paramref="isColumnSpecified"/> be true, and
            <see paramref="proportion"/> is an array with values of { 1.0, 2.0, 3.0 }.  The sum of
            those values is 6.0.  Therefore, the first row is 1/6th of the available height, the
            second row is 2/6th's of the available height, and the third row is 3/6th's of the
            available height.
            </param>
            <seealso cref="M:Alt.GUI.ZedGraph.MasterPane.SetLayout(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.PaneLayout)"/>
            <seealso cref="M:Alt.GUI.ZedGraph.MasterPane.SetLayout(Alt.Sketch.Graphics,System.Int32,System.Int32)"/>
            <seealso cref="M:Alt.GUI.ZedGraph.MasterPane.SetLayout(Alt.Sketch.Graphics,System.Boolean,System.Int32[])"/>
        </member>
        <member name="M:Alt.GUI.ZedGraph.MasterPane.DoLayout(Alt.Sketch.Graphics)">
            <summary>
            Modify the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/> sizes of each
            <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> such that they fit within the <see cref="T:Alt.GUI.ZedGraph.MasterPane"/>
            in a pre-configured layout.
            </summary>
            <remarks>The <see cref="M:Alt.GUI.ZedGraph.MasterPane.SetLayout(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.PaneLayout)"/> method (and overloads) is
            used for setting the layout configuration.</remarks>
            <seealso cref="M:Alt.GUI.ZedGraph.MasterPane.SetLayout(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.PaneLayout)"/>
            <seealso cref="M:Alt.GUI.ZedGraph.MasterPane.SetLayout(Alt.Sketch.Graphics,System.Int32,System.Int32)"/>
            <seealso cref="M:Alt.GUI.ZedGraph.MasterPane.SetLayout(Alt.Sketch.Graphics,System.Boolean,System.Int32[])"/>
            <seealso cref="M:Alt.GUI.ZedGraph.MasterPane.SetLayout(Alt.Sketch.Graphics,System.Boolean,System.Int32[],System.Single[])"/>
        </member>
        <member name="M:Alt.GUI.ZedGraph.MasterPane.DoLayout(Alt.Sketch.Graphics,System.Int32,System.Int32)">
            <summary>
            Internal method that applies a previously set layout with a specific
            row and column count.  This method is only called by
            <see cref="M:Alt.GUI.ZedGraph.MasterPane.DoLayout(Alt.Sketch.Graphics)"/>.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.MasterPane.DoLayout(Alt.Sketch.Graphics,System.Boolean,System.Int32[],System.Single[])">
            <summary>
            Internal method that applies a previously set layout with a rows per column or
            columns per row configuration.  This method is only called by
            <see cref="M:Alt.GUI.ZedGraph.MasterPane.DoLayout(Alt.Sketch.Graphics)"/>.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.MasterPane.PaneList">
            <summary>
            Gets or sets the <see cref="P:Alt.GUI.ZedGraph.MasterPane.PaneList"/> collection instance that holds the list of
            <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> objects that are included in this <see cref="T:Alt.GUI.ZedGraph.MasterPane"/>.
            </summary>
            <seealso cref="M:Alt.GUI.ZedGraph.MasterPane.Add(Alt.GUI.ZedGraph.GraphPane)"/>
            <seealso cref="P:Alt.GUI.ZedGraph.MasterPane.Item(System.Int32)"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.MasterPane.InnerPaneGap">
            <summary>
            Gets or sets the size of the margin between adjacent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>
            objects.
            </summary>
            <remarks>This property is scaled according to <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/>,
            based on <see cref="P:Alt.GUI.ZedGraph.PaneBase.BaseDimension"/>.  The default value comes from
            <see cref="F:Alt.GUI.ZedGraph.MasterPane.Default.InnerPaneGap"/>.
            </remarks>
            <value>The value is in points (1/72nd inch).</value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.MasterPane.IsUniformLegendEntries">
            <summary>
            Gets or set the value of the	 <see cref="P:Alt.GUI.ZedGraph.MasterPane.IsUniformLegendEntries"/>
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.MasterPane.IsCommonScaleFactor">
            <summary>
            Gets or sets a value that determines if the
            <see cref="M:Alt.GUI.ZedGraph.MasterPane.DoLayout(Alt.Sketch.Graphics)"/> method will automatically set the
            <see cref="P:Alt.GUI.ZedGraph.PaneBase.BaseDimension"/>
            of each <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> in the <see cref="P:Alt.GUI.ZedGraph.MasterPane.PaneList"/> such that the
            scale factors have the same value.
            </summary>
            <remarks>
            The scale factors, calculated by <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/>, determine
            scaled font sizes, tic lengths, etc.  This function will insure that for
            multiple graphpanes, a certain specified font size will be the same for
            all the panes.
            </remarks>
            <seealso cref="M:Alt.GUI.ZedGraph.MasterPane.SetLayout(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.PaneLayout)"/>
            <seealso cref="M:Alt.GUI.ZedGraph.MasterPane.SetLayout(Alt.Sketch.Graphics,System.Int32,System.Int32)"/>
            <seealso cref="M:Alt.GUI.ZedGraph.MasterPane.SetLayout(Alt.Sketch.Graphics,System.Boolean,System.Int32[])"/>
            <seealso cref="M:Alt.GUI.ZedGraph.MasterPane.SetLayout(Alt.Sketch.Graphics,System.Boolean,System.Int32[],System.Single[])"/>
            <seealso cref="M:Alt.GUI.ZedGraph.MasterPane.ReSize(Alt.Sketch.Graphics,Alt.Sketch.Rect)"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.MasterPane.IsAntiAlias">
            <summary>
            Gets or sets a value that determines if all drawing operations for this
            <see cref="T:Alt.GUI.ZedGraph.MasterPane"/> will be forced to operate in Anti-alias mode.
            Note that if this value is set to "true", it overrides the setting for sub-objects.
            Otherwise, the sub-object settings (such as <see cref="P:Alt.GUI.ZedGraph.FontSpec.IsAntiAlias"/>)
            will be honored.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.MasterPane.Item(System.Int32)">
            <summary>
            Indexer to access the specified <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object from <see cref="P:Alt.GUI.ZedGraph.MasterPane.PaneList"/>
            by its ordinal position in the list.
            </summary>
            <param name="index">The ordinal position (zero-based) of the
            <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object to be accessed.</param>
            <value>A <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object reference.</value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.MasterPane.Item(System.String)">
            <summary>
            Indexer to access the specified <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object from <see cref="P:Alt.GUI.ZedGraph.MasterPane.PaneList"/>
            by its <see cref="P:Alt.GUI.ZedGraph.PaneBase.Title"/> string.
            </summary>
            <param name="title">The string title of the
            <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object to be accessed.</param>
            <value>A <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object reference.</value>
        </member>
        <member name="T:Alt.GUI.ZedGraph.MasterPane.Default">
            <summary>
            A simple struct that defines the
            default property values for the <see cref="T:Alt.GUI.ZedGraph.MasterPane"/> class.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.MasterPane.Default.PaneLayout">
            <summary>
            The default pane layout for
            <see cref="M:Alt.GUI.ZedGraph.MasterPane.DoLayout(Alt.Sketch.Graphics)"/>
            method calls.
            </summary>
            <seealso cref="M:Alt.GUI.ZedGraph.MasterPane.SetLayout(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.PaneLayout)"/>
            <seealso cref="M:Alt.GUI.ZedGraph.MasterPane.SetLayout(Alt.Sketch.Graphics,System.Int32,System.Int32)"/>
            <seealso cref="M:Alt.GUI.ZedGraph.MasterPane.SetLayout(Alt.Sketch.Graphics,System.Boolean,System.Int32[])"/>
            <seealso cref="M:Alt.GUI.ZedGraph.MasterPane.SetLayout(Alt.Sketch.Graphics,System.Boolean,System.Int32[],System.Single[])"/>
            <seealso cref="M:Alt.GUI.ZedGraph.MasterPane.ReSize(Alt.Sketch.Graphics,Alt.Sketch.Rect)"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.MasterPane.Default.InnerPaneGap">
            <summary>
            The default value for the <see cref="F:Alt.GUI.ZedGraph.MasterPane.Default.InnerPaneGap"/> property.
            This is the size of the margin between adjacent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>
            objects, in units of points (1/72 inch).
            </summary>
            <seealso cref="P:Alt.GUI.ZedGraph.MasterPane.InnerPaneGap"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.MasterPane.Default.IsShowLegend">
            <summary>
            The default value for the <see cref="P:Alt.GUI.ZedGraph.Legend.IsVisible"/> property for
            the <see cref="T:Alt.GUI.ZedGraph.MasterPane"/> class.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.MasterPane.Default.IsUniformLegendEntries">
            <summary>
            The default value for the <see cref="F:Alt.GUI.ZedGraph.MasterPane.Default.IsUniformLegendEntries"/> property.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.MasterPane.Default.IsCommonScaleFactor">
            <summary>
            The default value for the <see cref="F:Alt.GUI.ZedGraph.MasterPane.Default.IsCommonScaleFactor"/> property.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.DataPoint">
            <summary>
            A simple storage struct to maintain an individual sampling of data.  This only
            contains two data values in order to reduce to memory load for large datasets.
            (e.g., no Tag or Z property)
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.DataPoint.X">
            <summary>
            The X value for the point, stored as a double type.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.DataPoint.Y">
            <summary>
            The Y value for the point, stored as a double type.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.NoDupePointList">
            <summary>
            A collection class to maintain a set of samples.
            </summary>
            <remarks>This type, intended for very
            large datasets, will reduce the number of points displayed by eliminating
            individual points that overlay (at the same pixel location) on the graph.
            Note that this type probably does not make sense for line plots, but is intended
            primarily for scatter plots.
            </remarks>
            
            <author> John Champion </author>
            <version> $Revision: 3.5 $ $Date: 2007-06-02 06:56:03 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.NoDupePointList._isFiltered">
            <summary>
            Protected field that stores a value indicating whether or not the data have been filtered.
            If the data have not been filtered, then <see cref="P:Alt.GUI.ZedGraph.NoDupePointList.Count"/> will be equal to
            <see cref="P:Alt.GUI.ZedGraph.NoDupePointList.TotalCount"/>.  Use the public property <see cref="P:Alt.GUI.ZedGraph.NoDupePointList.IsFiltered"/> to
            access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.NoDupePointList._filteredCount">
            <summary>
            Protected field that stores the number of data points after filtering (e.g.,
            <see cref="M:Alt.GUI.ZedGraph.NoDupePointList.FilterData(Alt.GUI.ZedGraph.GraphPane,Alt.GUI.ZedGraph.Axis,Alt.GUI.ZedGraph.Axis)"/> has been called).  The <see cref="P:Alt.GUI.ZedGraph.NoDupePointList.Count"/> property
            returns the total count for an unfiltered dataset, or <see cref="F:Alt.GUI.ZedGraph.NoDupePointList._filteredCount"/>
            for a dataset that has been filtered.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.NoDupePointList._visibleIndicies">
            <summary>
            Protected array of indices for all the points that are currently visible.  This only
            applies if <see cref="P:Alt.GUI.ZedGraph.NoDupePointList.IsFiltered"/> is true.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.NoDupePointList._filterMode">
            <summary>
            Protected field that stores a value that determines how close a point must be to a prior
            neighbor in order to be filtered out.  Use the public property <see cref="P:Alt.GUI.ZedGraph.NoDupePointList.FilterMode"/>
            to access this value.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.NoDupePointList.Add(Alt.GUI.ZedGraph.PointPair)">
            <summary>
            Append a data point to the collection
            </summary>
            <param name="pt">The <see cref="T:Alt.GUI.ZedGraph.PointPair"/> value to append</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.NoDupePointList.Add(System.Double,System.Double)">
            <summary>
            Append a point to the collection
            </summary>
            <param name="x">The x value of the point to append</param>
            <param name="y">The y value of the point to append</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.NoDupePointList.Clone">
            <summary>
            typesafe clone method
            </summary>
            <returns>A new cloned NoDupePointList.  This returns a copy of the structure,
            but it does not duplicate the data (it just keeps a reference to the original)
            </returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.NoDupePointList.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.NoDupePointList.#ctor(Alt.GUI.ZedGraph.NoDupePointList)">
            <summary>
            copy constructor -- this returns a copy of the structure,
            but it does not duplicate the data (it just keeps a reference to the original)
            </summary>
            <param name="rhs">The NoDupePointList to be copied</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.NoDupePointList.GetDataPointAt(System.Int32)">
            <summary>
            Protected method to access the internal DataPoint collection, without any
            translation to a PointPair.
            </summary>
            <param name="index">The ordinal position of the DataPoint of interest</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.NoDupePointList.ClearFilter">
            <summary>
            Clears any filtering previously done by a call to <see cref="M:Alt.GUI.ZedGraph.NoDupePointList.FilterData(Alt.GUI.ZedGraph.GraphPane,Alt.GUI.ZedGraph.Axis,Alt.GUI.ZedGraph.Axis)"/>.
            After calling this method, all data points will be visible, and
            <see cref="P:Alt.GUI.ZedGraph.NoDupePointList.Count"/> will be equal to <see cref="P:Alt.GUI.ZedGraph.NoDupePointList.TotalCount"/>.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.NoDupePointList.FilterData(Alt.GUI.ZedGraph.GraphPane,Alt.GUI.ZedGraph.Axis,Alt.GUI.ZedGraph.Axis)">
            <summary>
            Go through the collection, and hide (filter out) any points that fall on the
            same pixel location as a previously included point.
            </summary>
            <remarks>
            This method does not delete any points, it just temporarily hides them until
            the next call to <see cref="M:Alt.GUI.ZedGraph.NoDupePointList.FilterData(Alt.GUI.ZedGraph.GraphPane,Alt.GUI.ZedGraph.Axis,Alt.GUI.ZedGraph.Axis)"/> or <see cref="M:Alt.GUI.ZedGraph.NoDupePointList.ClearFilter"/>.
            You should call <see cref="M:Alt.GUI.ZedGraph.NoDupePointList.FilterData(Alt.GUI.ZedGraph.GraphPane,Alt.GUI.ZedGraph.Axis,Alt.GUI.ZedGraph.Axis)"/> once your collection of points has
            been constructed.  You may need to call <see cref="M:Alt.GUI.ZedGraph.NoDupePointList.FilterData(Alt.GUI.ZedGraph.GraphPane,Alt.GUI.ZedGraph.Axis,Alt.GUI.ZedGraph.Axis)"/> again if
            you add points, or if the chart rect changes size (by resizing, printing,
            image save, etc.), or if the scale range changes.
            You must call <see cref="M:Alt.GUI.ZedGraph.GraphPane.AxisChange"/> before calling
            this method so that the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect">GraphPane.Chart.Rect</see>
            and the scale ranges are valid.  This method is not valid for
            ordinal axes (but ordinal axes don't make sense for very large datasets
            anyway).
            </remarks>
            <param name="pane">The <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> into which the data
            will be plotted. </param>
            <param name="yAxis">The <see cref="T:Alt.GUI.ZedGraph.Axis"/> class to be used in the Y direction
            for plotting these data.  This can be a <see cref="T:Alt.GUI.ZedGraph.YAxis"/> or a 
            <see cref="T:Alt.GUI.ZedGraph.Y2Axis"/>, and can be a primary or secondary axis (if multiple Y or Y2
            axes are being used).
            </param>
            <param name="xAxis">The <see cref="T:Alt.GUI.ZedGraph.Axis"/> class to be used in the X direction
            for plotting these data.  This can be an <see cref="T:Alt.GUI.ZedGraph.XAxis"/> or a 
            <see cref="T:Alt.GUI.ZedGraph.X2Axis"/>.
            </param>
        </member>
        <member name="P:Alt.GUI.ZedGraph.NoDupePointList.FilterMode">
            <summary>
            Gets or sets a value that determines how close a point must be to a prior
            neighbor in order to be filtered out.
            </summary>
            <remarks>
            A value of 0 indicates that subsequent
            points must coincide exactly at the same pixel location.  A value of 1 or more
            indicates that number of pixels distance from a prior point that will cause
            a new point to be filtered out.  For example, a value of 2 means that, once
            a particular pixel location is taken, any subsequent point that lies within 2
            pixels of that location will be filtered out.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.NoDupePointList.IsFiltered">
            <summary>
            Gets a value indicating whether or not the data have been filtered.  If the data
            have not been filtered, then <see cref="P:Alt.GUI.ZedGraph.NoDupePointList.Count"/> will be equal to
            <see cref="P:Alt.GUI.ZedGraph.NoDupePointList.TotalCount"/>.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.NoDupePointList.Item(System.Int32)">
            <summary>
            Indexer: get the DataPoint instance at the specified ordinal position in the list
            </summary>
            <remarks>
            This method will throw an exception if the index is out of range.  This can happen
            if the index is less than the number of filtered values, or if data points are
            removed from a filtered dataset with updating the filter (by calling
            <see cref="M:Alt.GUI.ZedGraph.NoDupePointList.FilterData(Alt.GUI.ZedGraph.GraphPane,Alt.GUI.ZedGraph.Axis,Alt.GUI.ZedGraph.Axis)"/>).
            </remarks>
            <param name="index">The ordinal position in the list of points</param>
            <returns>Returns a <see cref="T:Alt.GUI.ZedGraph.PointPair"/> instance.  The <see cref="F:Alt.GUI.ZedGraph.PointPair.Z"/>
            and <see cref="F:Alt.GUI.ZedGraph.PointPair.Tag"/> properties will be defaulted to
            <see cref="F:Alt.GUI.ZedGraph.PointPairBase.Missing"/> and null, respectively.
            </returns>
        </member>
        <member name="P:Alt.GUI.ZedGraph.NoDupePointList.Count">
            <summary>
            Gets the number of active samples in the collection.  This is the number of
            samples that are non-duplicates.  See the <see cref="P:Alt.GUI.ZedGraph.NoDupePointList.TotalCount"/> property
            to get the total number of samples in the list.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.NoDupePointList.TotalCount">
            <summary>
            Gets the total number of samples in the collection.  See the <see cref="P:Alt.GUI.ZedGraph.NoDupePointList.Count"/>
            property to get the number of active (non-duplicate) samples in the list.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.OHLCBarItem">
            <summary>
            Encapsulates a CandleStick curve type that displays a vertical (or horizontal)
            line displaying the range of data values at each sample point, plus an starting
            mark and an ending mark signifying the opening and closing value for the sample.
            </summary>
            <remarks>For this type to work properly, your <see cref="T:Alt.GUI.ZedGraph.IPointList"/> must contain
            <see cref="T:Alt.GUI.ZedGraph.StockPt"/> objects, rather than ordinary <see cref="T:Alt.GUI.ZedGraph.PointPair"/> types.
            This is because the <see cref="T:Alt.GUI.ZedGraph.OHLCBarItem"/> type actually displays 5 data values
            but the <see cref="T:Alt.GUI.ZedGraph.PointPair"/> only stores 3 data values.  The <see cref="T:Alt.GUI.ZedGraph.StockPt"/>
            stores <see cref="P:Alt.GUI.ZedGraph.StockPt.Date"/>, <see cref="F:Alt.GUI.ZedGraph.StockPt.Close"/>,
            <see cref="F:Alt.GUI.ZedGraph.StockPt.Open"/>, <see cref="P:Alt.GUI.ZedGraph.StockPt.High"/>, and
            <see cref="P:Alt.GUI.ZedGraph.StockPt.Low"/> members.
            For a vertical CandleStick chart, the opening value is drawn as a horizontal line
            segment to the left of the vertical range bar, and the closing value is a horizontal
            line segment to the right.  The total length of these two line segments is controlled
            by the <see cref="P:Alt.GUI.ZedGraph.OHLCBar.Size"/> property, which is specified in
            points (1/72nd inch), and scaled according to <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/>.
            The candlesticks are drawn horizontally or vertically depending on the
            value of <see cref="P:Alt.GUI.ZedGraph.BarSettings.Base"/>, which is a
            <see cref="T:Alt.GUI.ZedGraph.BarBase"/> enum type.</remarks>
            <author> John Champion </author>
            <version> $Revision: 3.4 $ $Date: 2007-12-31 00:23:05 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.OHLCBarItem.schema2">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.OHLCBarItem._bar">
            <summary>
            Private field that stores a reference to the <see cref="T:Alt.GUI.ZedGraph.OHLCBar"/>
            class defined for this <see cref="T:Alt.GUI.ZedGraph.OHLCBarItem"/>.  Use the public
            property <see cref="T:Alt.GUI.ZedGraph.OHLCBar"/> to access this value.
            </summary>
            
        </member>
        <member name="M:Alt.GUI.ZedGraph.OHLCBarItem.IsXIndependent(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Gets a flag indicating if the X axis is the independent axis for this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>
            </summary>
            <param name="pane">The parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> of this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>.
            </param>
            <value>true if the X axis is independent, false otherwise</value>
        </member>
        <member name="M:Alt.GUI.ZedGraph.OHLCBarItem.IsZIncluded(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Gets a flag indicating if the Z data range should be included in the axis scaling calculations.
            </summary>
            <remarks>
            IsZIncluded is true for <see cref="T:Alt.GUI.ZedGraph.OHLCBarItem"/> objects, since the Y and Z
            values are defined as the High and Low values for the day.</remarks>
            <param name="pane">The parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> of this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>.
            </param>
            <value>true if the Z data are included, false otherwise</value>
        </member>
        <member name="M:Alt.GUI.ZedGraph.OHLCBarItem.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:Alt.GUI.ZedGraph.OHLCBarItem"/>, specifying only the legend label.
            </summary>
            <param name="label">The label that will appear in the legend.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.OHLCBarItem.#ctor(System.String,Alt.GUI.ZedGraph.IPointList,Alt.Sketch.Color)">
            <summary>
            Create a new <see cref="T:Alt.GUI.ZedGraph.OHLCBarItem"/> using the specified properties.
            </summary>
            <param name="label">The _label that will appear in the legend.</param>
            <param name="points">An <see cref="T:Alt.GUI.ZedGraph.IPointList"/> of double precision values that define
            the Date, Close, Open, High, and Low values for the curve.  Note that this
            <see cref="T:Alt.GUI.ZedGraph.IPointList"/> should contain <see cref="T:Alt.GUI.ZedGraph.StockPt"/> items rather
            than <see cref="T:Alt.GUI.ZedGraph.PointPair"/> items.
            </param>
            <param name="color">
            The <see cref="!:System.Drawing.Color"/> to use for drawing the candlesticks.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.OHLCBarItem.#ctor(Alt.GUI.ZedGraph.OHLCBarItem)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:Alt.GUI.ZedGraph.OHLCBarItem"/> object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.OHLCBarItem.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.OHLCBarItem.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.OHLCBarItem.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.OHLCBarItem.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.OHLCBarItem.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.OHLCBarItem.Draw(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,System.Int32,System.Double)">
            <summary>
            Do all rendering associated with this <see cref="T:Alt.GUI.ZedGraph.OHLCBarItem"/> to the specified
            <see cref="T:Alt.Sketch.Graphics"/> device.  This method is normally only
            called by the Draw method of the parent <see cref="T:Alt.GUI.ZedGraph.CurveList"/>
            collection object.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="pos">The ordinal position of the current <see cref="T:Alt.GUI.ZedGraph.OHLCBarItem"/>
            curve.</param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.OHLCBarItem.DrawLegendKey(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,Alt.Sketch.Rect,System.Double)">
            <summary>
            Draw a legend key entry for this <see cref="T:Alt.GUI.ZedGraph.OHLCBarItem"/> at the specified location
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="rect">The <see cref="T:Alt.Sketch.Rect"/> struct that specifies the
            location for the legend key</param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.OHLCBarItem.GetCoords(Alt.GUI.ZedGraph.GraphPane,System.Int32,System.String@)">
            <summary>
            Determine the coords for the rectangle associated with a specified point for 
            this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>
            </summary>
            <param name="pane">The <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> to which this curve belongs</param>
            <param name="i">The index of the point of interest</param>
            <param name="coords">A list of coordinates that represents the "rect" for
            this point (used in an html AREA tag)</param>
            <returns>true if it's a valid point, false otherwise</returns>
        </member>
        <member name="P:Alt.GUI.ZedGraph.OHLCBarItem.Bar">
            <summary>
            Gets a reference to the <see cref="T:Alt.GUI.ZedGraph.OHLCBar"/> class defined
            for this <see cref="T:Alt.GUI.ZedGraph.OHLCBarItem"/>.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.OrdinalScale">
            <summary>
            The OrdinalScale class inherits from the <see cref="T:Alt.GUI.ZedGraph.Scale"/> class, and implements
            the features specific to <see cref="F:Alt.GUI.ZedGraph.AxisType.Ordinal"/>.
            </summary>
            <remarks>
            OrdinalScale is an ordinal axis with tic labels generated at integral values.  An ordinal axis means that
            all data points are evenly spaced at integral values, and the actual coordinate values
            for points corresponding to that axis are ignored.  That is, if the X axis is an
            ordinal type, then all X values associated with the curves are ignored.
            </remarks>
            
            <author> John Champion  </author>
            <version> $Revision: 1.8 $ $Date: 2007-04-16 00:03:02 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.OrdinalScale.schema2">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.OrdinalScale.#ctor(Alt.GUI.ZedGraph.Axis)">
            <summary>
            Default constructor that defines the owner <see cref="T:Alt.GUI.ZedGraph.Axis"/>
            (containing object) for this new object.
            </summary>
            <param name="owner">The owner, or containing object, of this instance</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.OrdinalScale.#ctor(Alt.GUI.ZedGraph.Scale,Alt.GUI.ZedGraph.Axis)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:Alt.GUI.ZedGraph.OrdinalScale"/> object from which to copy</param>
            <param name="owner">The <see cref="T:Alt.GUI.ZedGraph.Axis"/> object that will own the
            new instance of <see cref="T:Alt.GUI.ZedGraph.OrdinalScale"/></param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.OrdinalScale.Clone(Alt.GUI.ZedGraph.Axis)">
            <summary>
            Create a new clone of the current item, with a new owner assignment
            </summary>
            <param name="owner">The new <see cref="T:Alt.GUI.ZedGraph.Axis"/> instance that will be
            the owner of the new Scale</param>
            <returns>A new <see cref="T:Alt.GUI.ZedGraph.Scale"/> clone.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.OrdinalScale.PickScale(Alt.GUI.ZedGraph.GraphPane,Alt.Sketch.Graphics,System.Double)">
            <summary>
            Select a reasonable ordinal axis scale given a range of data values.
            </summary>
            <remarks>
            This method only applies to <see cref="F:Alt.GUI.ZedGraph.AxisType.Ordinal"/> type axes, and it
            is called by the general <see cref="M:Alt.GUI.ZedGraph.Scale.PickScale(Alt.GUI.ZedGraph.GraphPane,Alt.Sketch.Graphics,System.Double)"/> method.  The scale range is chosen
            based on increments of 1, 2, or 5 (because they are even divisors of 10).
            Being an ordinal axis type, the <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/> value will always be integral.  This
            method honors the <see cref="P:Alt.GUI.ZedGraph.Scale.MinAuto"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.MaxAuto"/>,
            and <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStepAuto"/> autorange settings.
            In the event that any of the autorange settings are false, the
            corresponding <see cref="P:Alt.GUI.ZedGraph.Scale.Min"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.Max"/>, or <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/>
            setting is explicitly honored, and the remaining autorange settings (if any) will
            be calculated to accomodate the non-autoranged values.  The basic defaults for
            scale selection are defined using <see cref="F:Alt.GUI.ZedGraph.Scale.Default.ZeroLever"/>,
            <see cref="F:Alt.GUI.ZedGraph.Scale.Default.TargetXSteps"/>, and <see cref="F:Alt.GUI.ZedGraph.Scale.Default.TargetYSteps"/>
            from the <see cref="T:Alt.GUI.ZedGraph.Scale.Default"/> default class.
            <para>On Exit:</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.Min"/> is set to scale minimum (if <see cref="P:Alt.GUI.ZedGraph.Scale.MinAuto"/> = true)</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.Max"/> is set to scale maximum (if <see cref="P:Alt.GUI.ZedGraph.Scale.MaxAuto"/> = true)</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/> is set to scale step size (if <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStepAuto"/> = true)</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.MinorStep"/> is set to scale minor step size (if <see cref="P:Alt.GUI.ZedGraph.Scale.MinorStepAuto"/> = true)</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.Mag"/> is set to a magnitude multiplier according to the data</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.Format"/> is set to the display format for the values (this controls the
            number of decimal places, whether there are thousands separators, currency types, etc.)</para>
            </remarks>
            <param name="pane">A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object
            associated with this <see cref="T:Alt.GUI.ZedGraph.Axis"/></param>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <seealso cref="F:Alt.GUI.ZedGraph.AxisType.Ordinal"/>
        </member>
        <member name="M:Alt.GUI.ZedGraph.OrdinalScale.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.OrdinalScale.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="P:Alt.GUI.ZedGraph.OrdinalScale.Type">
            <summary>
            Return the <see cref="T:Alt.GUI.ZedGraph.AxisType"/> for this <see cref="T:Alt.GUI.ZedGraph.Scale"/>, which is
            <see cref="F:Alt.GUI.ZedGraph.AxisType.Ordinal"/>.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.PaneLayoutMgr">
            <summary>
            internal class to store pane layout details for the <see cref="T:Alt.GUI.ZedGraph.MasterPane"/>
            </summary>
            
            <author> John Champion </author>
            <version> $Revision: 3.1 $ $Date: 2006-06-24 20:26:44 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PaneLayoutMgr.schema">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PaneLayoutMgr._paneLayout">
            <summary>
            private field that saves the paneLayout format specified when
            <see cref="M:Alt.GUI.ZedGraph.PaneLayoutMgr.SetLayout(Alt.GUI.ZedGraph.PaneLayout)"/> was called. This value will
            default to <see cref="F:Alt.GUI.ZedGraph.MasterPane.Default.PaneLayout"/> if
            <see cref="M:Alt.GUI.ZedGraph.PaneLayoutMgr.SetLayout(Alt.GUI.ZedGraph.PaneLayout)"/> (or an overload) was never called.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PaneLayoutMgr._isColumnSpecified">
            <summary>
            Private field that stores the boolean value that determines whether
            <see cref="F:Alt.GUI.ZedGraph.PaneLayoutMgr._countList"/> is specifying rows or columns.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PaneLayoutMgr._countList">
            <summary>
            private field that stores the row/column item count that was specified to the
            <see cref="M:Alt.GUI.ZedGraph.PaneLayoutMgr.SetLayout(System.Boolean,System.Int32[],System.Single[])"/> method.  This values will be
            null if <see cref="M:Alt.GUI.ZedGraph.PaneLayoutMgr.SetLayout(System.Boolean,System.Int32[],System.Single[])"/> was never called.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PaneLayoutMgr._prop">
            <summary>
            private field that stores the row/column size proportional values as specified
            to the <see cref="M:Alt.GUI.ZedGraph.PaneLayoutMgr.SetLayout(System.Boolean,System.Int32[],System.Single[])"/> method.  This
            value will be null if <see cref="M:Alt.GUI.ZedGraph.PaneLayoutMgr.SetLayout(System.Boolean,System.Int32[],System.Single[])"/>
            was never called.  
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PaneLayoutMgr.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.PaneLayoutMgr.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PaneLayoutMgr.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PaneLayoutMgr.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PaneLayoutMgr.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PaneLayoutMgr.SetLayout(Alt.GUI.ZedGraph.PaneLayout)">
            <overloads>The SetLayout() methods setup the desired layout of the
            <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> objects within a <see cref="T:Alt.GUI.ZedGraph.MasterPane"/>.  These functions
            do not make any changes, they merely set the parameters so that future calls
            to <see cref="M:Alt.GUI.ZedGraph.PaneBase.ReSize(Alt.Sketch.Graphics,Alt.Sketch.Rect)"/> or <see cref="M:Alt.GUI.ZedGraph.PaneLayoutMgr.DoLayout(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.MasterPane)"/>
            will use the desired layout.<br/><br/>
            The layout options include a set of "canned" layouts provided by the
            <see cref="T:Alt.GUI.ZedGraph.PaneLayout"/> enumeration, options to just set a specific
            number of rows and columns of panes (and all pane sizes are the same), and more
            customized options of specifying the number or rows in each column or the number of
            columns in each row, along with proportional values that determine the size of each
            individual column or row.
            </overloads>
            <summary>
            Automatically set all of the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/>'s in
            the list to a pre-defined layout configuration from a <see cref="T:Alt.GUI.ZedGraph.PaneLayout"/>
            enumeration.
            </summary>
            <remarks>This method uses a <see cref="T:Alt.GUI.ZedGraph.PaneLayout"/> enumeration to describe the type of layout
            to be used.  Overloads are available that provide other layout options</remarks>
            <param name="paneLayout">A <see cref="T:Alt.GUI.ZedGraph.PaneLayout"/> enumeration that describes how
            the panes should be laid out within the <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/>.</param>
            <seealso cref="M:Alt.GUI.ZedGraph.PaneLayoutMgr.SetLayout(System.Int32,System.Int32)"/>
            <seealso cref="M:Alt.GUI.ZedGraph.PaneLayoutMgr.SetLayout(System.Boolean,System.Int32[])"/>
            <seealso cref="M:Alt.GUI.ZedGraph.PaneLayoutMgr.SetLayout(System.Boolean,System.Int32[],System.Single[])"/>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PaneLayoutMgr.SetLayout(System.Int32,System.Int32)">
            <summary>
            Automatically set all of the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/>'s in
            the list to a reasonable configuration.
            </summary>
            <remarks>This method explicitly specifies the number of rows and columns to use
            in the layout, and all <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> objects will have the same size.
            Overloads are available that provide other layout options</remarks>
            <param name="rows">The number of rows of <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> objects
            to include in the layout</param>
            <param name="columns">The number of columns of <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> objects
            to include in the layout</param>
            <seealso cref="M:Alt.GUI.ZedGraph.PaneLayoutMgr.SetLayout(Alt.GUI.ZedGraph.PaneLayout)"/>
            <seealso cref="M:Alt.GUI.ZedGraph.PaneLayoutMgr.SetLayout(System.Boolean,System.Int32[])"/>
            <seealso cref="M:Alt.GUI.ZedGraph.PaneLayoutMgr.SetLayout(System.Boolean,System.Int32[],System.Single[])"/>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PaneLayoutMgr.SetLayout(System.Boolean,System.Int32[])">
            <summary>
            Automatically set all of the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/>'s in
            the list to the specified configuration.
            </summary>
            <remarks>This method specifies the number of rows in each column, or the number of
            columns in each row, allowing for irregular layouts.  Overloads are available that
            provide other layout options.
            </remarks>
            <param name="isColumnSpecified">Specifies whether the number of columns in each row, or
            the number of rows in each column will be specified.  A value of true indicates the
            number of columns in each row are specified in <see paramref="countList"/>.</param>
            <param name="countList">An integer array specifying either the number of columns in
            each row or the number of rows in each column, depending on the value of
            <see paramref="isColumnSpecified"/>.</param>
            <seealso cref="M:Alt.GUI.ZedGraph.PaneLayoutMgr.SetLayout(Alt.GUI.ZedGraph.PaneLayout)"/>
            <seealso cref="M:Alt.GUI.ZedGraph.PaneLayoutMgr.SetLayout(System.Int32,System.Int32)"/>
            <seealso cref="M:Alt.GUI.ZedGraph.PaneLayoutMgr.SetLayout(System.Boolean,System.Int32[],System.Single[])"/>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PaneLayoutMgr.SetLayout(System.Boolean,System.Int32[],System.Single[])">
            <summary>
            Automatically set all of the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/>'s in
            the list to the specified configuration.
            </summary>
            <remarks>This method specifies the number of panes in each row or column, allowing for
            irregular layouts.</remarks>
            <remarks>This method specifies the number of rows in each column, or the number of
            columns in each row, allowing for irregular layouts.  Additionally, a
            <see paramref="proportion"/> parameter is provided that allows varying column or
            row sizes.  Overloads for SetLayout() are available that provide other layout options.
            </remarks>
            <param name="isColumnSpecified">Specifies whether the number of columns in each row, or
            the number of rows in each column will be specified.  A value of true indicates the
            number of columns in each row are specified in <see paramref="_countList"/>.</param>
            <param name="countList">An integer array specifying either the number of columns in
            each row or the number of rows in each column, depending on the value of
            <see paramref="isColumnSpecified"/>.</param>
            <param name="proportion">An array of float values specifying proportional sizes for each
            row or column.  Note that these proportions apply to the non-specified dimension -- that is,
            if <see paramref="isColumnSpecified"/> is true, then these proportions apply to the row
            heights, and if <see paramref="isColumnSpecified"/> is false, then these proportions apply
            to the column widths.  The values in this array are arbitrary floats -- the dimension of
            any given row or column is that particular proportional value divided by the sum of all
            the values.  For example, let <see paramref="isColumnSpecified"/> be true, and
            <see paramref="proportion"/> is an array with values of { 1.0, 2.0, 3.0 }.  The sum of
            those values is 6.0.  Therefore, the first row is 1/6th of the available height, the
            second row is 2/6th's of the available height, and the third row is 3/6th's of the
            available height.
            </param>
            <seealso cref="M:Alt.GUI.ZedGraph.PaneLayoutMgr.SetLayout(Alt.GUI.ZedGraph.PaneLayout)"/>
            <seealso cref="M:Alt.GUI.ZedGraph.PaneLayoutMgr.SetLayout(System.Int32,System.Int32)"/>
            <seealso cref="M:Alt.GUI.ZedGraph.PaneLayoutMgr.SetLayout(System.Boolean,System.Int32[])"/>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PaneLayoutMgr.DoLayout(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.MasterPane)">
            <summary>
            Modify the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/> sizes of each
            <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> such that they fit within the <see cref="T:Alt.GUI.ZedGraph.MasterPane"/>
            in a pre-configured layout.
            </summary>
            <remarks>The <see cref="M:Alt.GUI.ZedGraph.PaneLayoutMgr.SetLayout(Alt.GUI.ZedGraph.PaneLayout)"/> method (and overloads) is
            used for setting the layout configuration.</remarks>
            <param name="g">A <see cref="T:Alt.Sketch.Graphics"/> instance to be used for font sizing,
            etc. in determining the layout configuration.</param>
            <param name="master">The <see cref="T:Alt.GUI.ZedGraph.MasterPane"/> instance which is to
            be resized.</param>
            <seealso cref="M:Alt.GUI.ZedGraph.PaneLayoutMgr.SetLayout(Alt.GUI.ZedGraph.PaneLayout)"/>
            <seealso cref="M:Alt.GUI.ZedGraph.PaneLayoutMgr.SetLayout(System.Int32,System.Int32)"/>
            <seealso cref="M:Alt.GUI.ZedGraph.PaneLayoutMgr.SetLayout(System.Boolean,System.Int32[])"/>
            <seealso cref="M:Alt.GUI.ZedGraph.PaneLayoutMgr.SetLayout(System.Boolean,System.Int32[],System.Single[])"/>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PaneLayoutMgr.DoLayout(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.MasterPane,System.Int32,System.Int32)">
            <summary>
            Internal method that applies a previously set layout with a specific
            row and column count.  This method is only called by
            <see cref="M:Alt.GUI.ZedGraph.PaneLayoutMgr.DoLayout(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.MasterPane)"/>.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PaneLayoutMgr.DoLayout(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.MasterPane,System.Boolean,System.Int32[],System.Single[])">
            <summary>
            Internal method that applies a previously set layout with a rows per column or
            columns per row configuration.  This method is only called by
            <see cref="M:Alt.GUI.ZedGraph.PaneLayoutMgr.DoLayout(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.MasterPane)"/>.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.PaneList">
            <summary>
            A collection class containing a list of <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> objects.
            </summary>
            
            <author>John Champion</author>
            <version> $Revision: 3.6 $ $Date: 2006-06-24 20:26:43 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PaneList.schema">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PaneList.#ctor">
            <summary>
            Default constructor for the collection class.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PaneList.#ctor(Alt.GUI.ZedGraph.PaneList)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:Alt.GUI.ZedGraph.PaneList"/> object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PaneList.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.PaneList.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PaneList.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PaneList.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PaneList.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PaneList.IndexOf(System.String)">
            <summary>
            Return the zero-based position index of the
            <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> with the specified <see cref="P:Alt.GUI.ZedGraph.PaneBase.Title"/>.
            </summary>
            <remarks>The comparison of titles is not case sensitive, but it must include
            all characters including punctuation, spaces, etc.</remarks>
            <param name="title">The <see cref="T:System.String"/> label that is in the
            <see cref="P:Alt.GUI.ZedGraph.PaneBase.Title"/> attribute of the item to be found.
            </param>
            <returns>The zero-based index of the specified <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>,
            or -1 if the <see cref="P:Alt.GUI.ZedGraph.PaneBase.Title"/> was not found in the list</returns>
            <seealso cref="M:Alt.GUI.ZedGraph.PaneList.IndexOfTag(System.String)"/>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PaneList.IndexOfTag(System.String)">
            <summary>
            Return the zero-based position index of the
            <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> with the specified <see cref="P:Alt.GUI.ZedGraph.PaneBase.Tag"/>.
            </summary>
            <remarks>In order for this method to work, the <see cref="P:Alt.GUI.ZedGraph.PaneBase.Tag"/>
            property must be of type <see cref="T:System.String"/>.</remarks>
            <param name="tagStr">The <see cref="T:System.String"/> tag that is in the
            <see cref="P:Alt.GUI.ZedGraph.PaneBase.Tag"/> attribute of the item to be found.
            </param>
            <returns>The zero-based index of the specified <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>,
            or -1 if the <see cref="P:Alt.GUI.ZedGraph.PaneBase.Tag"/> string is not in the list</returns>
        </member>
        <member name="P:Alt.GUI.ZedGraph.PaneList.Item(System.String)">
            <summary>
            Indexer to access the specified <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object by
            its <see cref="P:Alt.GUI.ZedGraph.PaneBase.Title"/> string.
            </summary>
            <param name="title">The string title of the
            <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object to be accessed.</param>
            <value>A <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object reference.</value>
        </member>
        <member name="T:Alt.GUI.ZedGraph.PieItem">
            <summary>
            A class representing a pie chart object comprised of one or more
            <see cref="T:Alt.GUI.ZedGraph.PieItem"/>s.
            </summary>
            <author> Bob Kaye </author>
            <version> $Revision: 1.32 $ $Date: 2007-07-30 05:26:23 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PieItem.schema2">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PieItem._displacement">
            <summary>
            Percentage (expressed as #.##) of <see cref="T:Alt.GUI.ZedGraph.PieItem"/>	radius  to
            which this <see cref="T:Alt.GUI.ZedGraph.PieItem"/> is to be displaced from the center.
              Displacement is done outward  along the radius
            bisecting the chord of this <see cref="T:Alt.GUI.ZedGraph.PieItem"/>.  Maximum allowable value
            is 0.5.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PieItem._labelDetail">
            <summary>
            A <see cref="T:Alt.GUI.ZedGraph.TextObj"/> which will customize the label display of this
            <see cref="T:Alt.GUI.ZedGraph.PieItem"/>
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PieItem._fill">
            <summary>
            Private	field	that stores the	<see cref="T:Alt.GUI.ZedGraph.Fill"/> data for this
            <see cref="T:Alt.GUI.ZedGraph.PieItem"/>.	 Use the public property <see cref="P:Alt.GUI.ZedGraph.PieItem.Fill"/> to
            access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PieItem._border">
            <summary>
            Private	field	that stores the	<see cref="P:Alt.GUI.ZedGraph.PieItem.Border"/> class that defines	the
            properties of the	border around	this <see cref="T:Alt.GUI.ZedGraph.PieItem"/>. Use the public
            property	<see cref="P:Alt.GUI.ZedGraph.PieItem.Border"/> to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PieItem._pieValue">
            <summary>
            Private field that stores the absolute value of this <see cref="T:Alt.GUI.ZedGraph.PieItem"/> instance.
            Value will be set to zero if submitted value is less than zero. 
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PieItem._labelType">
            <summary>
            An enum that specifies how each <see cref="P:Alt.GUI.ZedGraph.CurveItem.Label"/> for this <see cref="T:Alt.GUI.ZedGraph.PieItem"/> object 
            will be displayed.  Use the public property <see cref="P:Alt.GUI.ZedGraph.PieItem.LabelType"/> to access this data.  
            Use enum <see cref="T:Alt.GUI.ZedGraph.PieLabelType"/>.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PieItem._intersectionPoint">
            <summary>
            The point on the arc of this <see cref="T:Alt.GUI.ZedGraph.PieItem"/> representing the intersection of
            the arc and the explosion radius.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PieItem._boundingRectangle">
            <summary>
            The bounding rectangle for this <see cref="T:Alt.GUI.ZedGraph.PieItem"/>.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PieItem._labelStr">
            <summary>
            The formatted string for this <see cref="T:Alt.GUI.ZedGraph.PieItem"/>'s label.  Formatting is
            done based on  the <see cref="T:Alt.GUI.ZedGraph.PieLabelType"/>.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PieItem._pivotPoint">
            <summary>
            The point at which the line between this <see cref="T:Alt.GUI.ZedGraph.PieItem"/> and its
            label bends to the horizontal.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PieItem._endPoint">
            <summary>
            The point at the end of the line between	this <see cref="T:Alt.GUI.ZedGraph.PieItem"/> and 
            it's label (i.e. the beginning of the label display)
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PieItem._slicePath">
            <summary>
            Private field to hold the GraphicsPath of this <see cref="T:Alt.GUI.ZedGraph.PieItem"/> to be
            used for 'hit testing'.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PieItem._startAngle">
            <summary>
            Private field which holds the angle (in degrees) at which the display of this <see cref="T:Alt.GUI.ZedGraph.PieItem"/>
            object will begin.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PieItem._sweepAngle">
             <summary>
            Private field which holds the length (in degrees) of the arc representing this <see cref="T:Alt.GUI.ZedGraph.PieItem"/> 
            object.
             </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PieItem._midAngle">
             <summary>
            Private field which represents the angle (in degrees) of the radius along which this <see cref="T:Alt.GUI.ZedGraph.PieItem"/>
            object will be displaced, if desired.
             </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PieItem._valueDecimalDigits">
             <summary>
            Private field which determines the number of decimal digits displayed to 
            in a <see cref="T:Alt.GUI.ZedGraph.PieItem"/> label containing a value. 
             </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PieItem._percentDecimalDigits">
             <summary>
            Private field which determines the number of decimal digits displayed 
            in a <see cref="T:Alt.GUI.ZedGraph.PieItem"/> label containing a percent. 
             </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PieItem.IsZIncluded(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Gets a flag indicating if the Z data range should be included in the axis scaling calculations.
            </summary>
            <param name="pane">The parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> of this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>.
            </param>
            <value>true if the Z data are included, false otherwise</value>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PieItem.IsXIndependent(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Gets a flag indicating if the X axis is the independent axis for this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>
            </summary>
            <param name="pane">The parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> of this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>.
            </param>
            <value>true if the X axis is independent, false otherwise</value>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PieItem.#ctor(System.Double,Alt.Sketch.Color,Alt.Sketch.Color,System.Single,System.Double,System.String)">
            <summary>
            Create a new <see cref="T:Alt.GUI.ZedGraph.PieItem"/>, providing a gradient fill for the pie color.
            </summary>
            <param name="pieValue">The value associated with this <see cref="T:Alt.GUI.ZedGraph.PieItem"/> instance.</param>
            <param name="color1">The starting display color for the gradient <see cref="P:Alt.GUI.ZedGraph.PieItem.Fill"/> for this
            <see cref="T:Alt.GUI.ZedGraph.PieItem"/> instance.</param>
            <param name="color2">The ending display color for the gradient <see cref="P:Alt.GUI.ZedGraph.PieItem.Fill"/> for this
            <see cref="T:Alt.GUI.ZedGraph.PieItem"/> instance.</param>
            <param name="fillAngle">The angle for the gradient <see cref="P:Alt.GUI.ZedGraph.PieItem.Fill"/>.</param>
            <param name="displacement">The amount this <see cref="T:Alt.GUI.ZedGraph.PieItem"/>  instance will be 
            displaced from the center point.</param>
            <param name="label">Text label for this <see cref="T:Alt.GUI.ZedGraph.PieItem"/> instance.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PieItem.#ctor(System.Double,Alt.Sketch.Color,System.Double,System.String)">
            <summary>
            Create a new <see cref="T:Alt.GUI.ZedGraph.PieItem"/>.
            </summary>
            <param name="pieValue">The value associated with this <see cref="T:Alt.GUI.ZedGraph.PieItem"/> instance.</param>
            <param name="color">The display color for this <see cref="T:Alt.GUI.ZedGraph.PieItem"/> instance.</param>
            <param name="displacement">The amount this <see cref="T:Alt.GUI.ZedGraph.PieItem"/>  instance will be 
            displaced from the center point.</param>
            <param name="label">Text label for this <see cref="T:Alt.GUI.ZedGraph.PieItem"/> instance.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PieItem.#ctor(System.Double,System.String)">
            <summary>
            Create a  new <see cref="T:Alt.GUI.ZedGraph.PieItem"/>.
            </summary>
            <param name="pieValue">The value associated with this <see cref="T:Alt.GUI.ZedGraph.PieItem"/> instance.</param>
            <param name="label">Text label for this <see cref="T:Alt.GUI.ZedGraph.PieItem"/> instance</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PieItem.#ctor(Alt.GUI.ZedGraph.PieItem)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:Alt.GUI.ZedGraph.PieItem"/> object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PieItem.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.PieItem.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PieItem.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PieItem.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PieItem.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PieItem.Draw(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,System.Int32,System.Double)">
            <summary>
            Do all rendering associated with this <see cref="T:Alt.GUI.ZedGraph.PieItem"/> item to the specified
            <see cref="T:Alt.Sketch.Graphics"/> device.  This method is normally only
            called by the Draw method of the parent <see cref="T:Alt.GUI.ZedGraph.CurveList"/>
            collection object.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="pos">Not used for rendering Pies</param>param&gt;
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>				
        </member>
        <member name="M:Alt.GUI.ZedGraph.PieItem.CalcPieRect(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,System.Double,Alt.Sketch.Rect)">
            <summary>
            Calculate the <see cref="T:Alt.Sketch.Rect"/> that will be used to define the bounding rectangle of
            the Pie.
            </summary>
            <remarks>This rectangle always lies inside of the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>, and it is
            normally a square so that the pie itself is not oval-shaped.</remarks>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>				
            <param name="chartRect">The <see cref="T:Alt.Sketch.Rect"/> (normally the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>)
            that bounds this pie.</param>
            <returns></returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PieItem.CalcExplodedRect(Alt.Sketch.Rect@)">
            <summary>
            Recalculate the bounding rectangle when a piee slice is displaced.
            </summary>
            <param name="explRect">rectangle to be used for drawing exploded pie</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PieItem.CalculatePieChartParams(Alt.GUI.ZedGraph.GraphPane,System.Double@)">
            <summary>
            Calculate the values needed to properly display this <see cref="T:Alt.GUI.ZedGraph.PieItem"/>.
            </summary>
            <param name="pane">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="maxDisplacement">maximum slice displacement</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PieItem.DrawLabel(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,Alt.Sketch.Rect,System.Double)">
            <summary>
            Render the label for this <see cref="T:Alt.GUI.ZedGraph.PieItem"/>.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="rect">Bounding rectangle for this <see cref="T:Alt.GUI.ZedGraph.PieItem"/>.</param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>				
        </member>
        <member name="M:Alt.GUI.ZedGraph.PieItem.DesignLabel(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,Alt.Sketch.Rect,System.Double)">
            <summary>
            This method collects all the data relative to rendering this <see cref="T:Alt.GUI.ZedGraph.PieItem"/>'s label.
            </summary>
            <param name="g">
             A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="rect">The rectangle used for rendering this <see cref="T:Alt.GUI.ZedGraph.PieItem"/>
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PieItem.CalculateLinePoints(Alt.Sketch.Rect,System.Double)">
            <summary>
            
            </summary>
            <param name="rect"></param>
            <param name="midAngle"></param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PieItem.BuildLabelString(Alt.GUI.ZedGraph.PieItem)">
            <summary>
            Build the string that will be displayed as the slice label as determined by 
            <see cref="P:Alt.GUI.ZedGraph.PieItem.LabelType"/>.
            </summary>
            <param name="curve">reference to the <see cref="T:Alt.GUI.ZedGraph.PieItem"/></param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PieItem.CalcNewBaseRect(System.Double,Alt.Sketch.Rect@)">
            <summary>
            A method which calculates a new size for the bounding rectangle for the non-displaced 
            <see cref="T:Alt.GUI.ZedGraph.PieItem"/>'s in the pie chart.  This method is called after it is found
            that at least one slice is displaced.
            </summary>
            <param name="maxDisplacement">The biggest displacement among the <see cref="T:Alt.GUI.ZedGraph.PieItem"/>s
            making up the pie chart.</param>
            <param name="baseRect">The current bounding rectangle</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PieItem.DrawLegendKey(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,Alt.Sketch.Rect,System.Double)">
            <summary>
            Draw a legend key entry for this <see cref="T:Alt.GUI.ZedGraph.PieItem"/> at the specified location
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="rect">The <see cref="T:Alt.Sketch.Rect"/> struct that specifies the
            location for the legend key</param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PieItem.GetCoords(Alt.GUI.ZedGraph.GraphPane,System.Int32,System.String@)">
            <summary>
            Determine the coords for the rectangle associated with a specified point for 
            this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>
            </summary>
            <param name="pane">The <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> to which this curve belongs</param>
            <param name="i">The index of the point of interest</param>
            <param name="coords">A list of coordinates that represents the "rect" for
            this point (used in an html AREA tag)</param>
            <returns>true if it's a valid point, false otherwise</returns>
        </member>
        <member name="P:Alt.GUI.ZedGraph.PieItem.Displacement">
            <summary>
            Gets or sets the a value which determines the amount, if any, of this <see cref="T:Alt.GUI.ZedGraph.PieItem"/>  
            displacement.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.PieItem.SlicePath">
            <summary>
            Gets a path representing this <see cref="T:Alt.GUI.ZedGraph.PieItem"/>
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.PieItem.LabelDetail">
            <summary>
            Gets or sets the <see cref="T:Alt.GUI.ZedGraph.TextObj"/> to be used
            for displaying this <see cref="T:Alt.GUI.ZedGraph.PieItem"/>'s label.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.PieItem.Border">
            <summary>
            Gets or sets the <see cref="P:Alt.GUI.ZedGraph.PieItem.Border"/> object so as to be able to modify
            its properties.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.PieItem.Fill">
            <summary>
            Gets or sets the <see cref="P:Alt.GUI.ZedGraph.PieItem.Fill"/> object which is used to fill the
            pie slice with color.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.PieItem.SweepAngle">
            <summary>
            Gets or sets the arc length (in degrees) of this <see cref="T:Alt.GUI.ZedGraph.PieItem"/>.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.PieItem.StartAngle">
            <summary>
            Gets or sets the starting angle (in degrees) of this <see cref="T:Alt.GUI.ZedGraph.PieItem"/>.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.PieItem.MidAngle">
            <summary>
            Gets or sets the angle (in degrees) of the radius along which 
            this <see cref="T:Alt.GUI.ZedGraph.PieItem"/> will be displaced.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.PieItem.Value">
            <summary>
             Gets or sets the value of this <see cref="T:Alt.GUI.ZedGraph.PieItem"/>.  
             Minimum value is 0. 
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.PieItem.LabelType">
            <summary>
            Gets or sets the <see cref="T:Alt.GUI.ZedGraph.PieLabelType"/> to be used in displaying 
            <see cref="T:Alt.GUI.ZedGraph.PieItem"/> labels.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.PieItem.ValueDecimalDigits">
            <summary>
            Gets or sets the number of decimal digits to be displayed in a <see cref="T:Alt.GUI.ZedGraph.PieItem"/> 
            value label.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.PieItem.PercentDecimalDigits">
            <summary>
            Gets or sets the number of decimal digits to be displayed in a <see cref="T:Alt.GUI.ZedGraph.PieItem"/> 
            percent label.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.PieItem.Default">
            <summary>
            Specify the default property values for the <see cref="T:Alt.GUI.ZedGraph.PieItem"/> class.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PieItem.Default.Displacement">
             <summary>
            Default <see cref="T:Alt.GUI.ZedGraph.PieItem"/> displacement.
             </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PieItem.Default.BorderWidth">
            <summary>
            The default pen width	to be used for drawing the	border around	the PieItem
            (<see cref="P:Alt.GUI.ZedGraph.LineBase.Width"/> property). Units are points.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PieItem.Default.FillType">
            <summary>
            The default fill mode for this PieItem (<see cref="P:Alt.GUI.ZedGraph.Fill.Type"/> property).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PieItem.Default.IsBorderVisible">
            <summary>
            The default border mode for PieItem (<see cref="P:Alt.GUI.ZedGraph.LineBase.IsVisible"/> property).
            true to	display frame around PieItem, false otherwise
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PieItem.Default.BorderColor">
            <summary>
            The default color for drawing	frames around	PieItem
            (<see cref="P:Alt.GUI.ZedGraph.LineBase.Color"/> property).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PieItem.Default.FillColor">
            <summary>
            The default color for filling in	the PieItem
            (<see cref="P:Alt.GUI.ZedGraph.Fill.Color"/>	property).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PieItem.Default.FillBrush">
            <summary>
            The default custom brush for filling in the PieItem.
            (<see cref="P:Alt.GUI.ZedGraph.Fill.Brush"/> property).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PieItem.Default.isVisible">
             <summary>
            Default value for controlling <see cref="T:Alt.GUI.ZedGraph.PieItem"/> display.
             </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PieItem.Default.LabelType">
            <summary>
            Default value for <see cref="P:Alt.GUI.ZedGraph.PieItem.LabelType"/>.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PieItem.Default.FontSize">
            <summary>
            The default font size for  <see cref="P:Alt.GUI.ZedGraph.PieItem.LabelDetail"/> entries
            (<see cref="P:Alt.GUI.ZedGraph.FontSpec.Size"/> property).  Units are
            in points (1/72 inch).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PieItem.Default.ValueDecimalDigits">
            <summary>
            Default value for the number of decimal digits  
            to be displayed when <see cref="F:Alt.GUI.ZedGraph.PieItem.Default.LabelType"/>  contains a value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PieItem.Default.PercentDecimalDigits">
            <summary>
            Default value for the number of decimal digits  
            to be displayed where <see cref="F:Alt.GUI.ZedGraph.PieItem.Default.LabelType"/> contains a percent.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.PointD">
            <summary>
            Simple struct that stores X and Y coordinates as doubles.
            </summary>
            
            <author> John Champion </author>
            <version> $Revision: 3.1 $ $Date: 2006-06-24 20:26:44 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PointD.X">
            <summary>
            The X coordinate
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PointD.Y">
            <summary>
            The Y coordinate
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointD.#ctor(System.Double,System.Double)">
            <summary>
            Construct a <see cref="T:Alt.GUI.ZedGraph.PointD"/> object from two double values.
            </summary>
            <param name="x">The X coordinate</param>
            <param name="y">The Y coordinate</param>
        </member>
        <member name="T:Alt.GUI.ZedGraph.PointPair">
            <summary>
            A simple point represented by an (X,Y,Z) group of double values.
            </summary>
            
            <author> Jerry Vos modified by John Champion </author>
            <version> $Revision: 3.26 $ $Date: 2007-11-28 02:38:22 $ </version>
        </member>
        <member name="T:Alt.GUI.ZedGraph.PointPairBase">
            <summary>
            This is a base class that provides base-level functionality for a data point consisting
            of an (X,Y) pair of double values.
            </summary>
            <remarks>
            This class is typically a base class for actual <see cref="T:Alt.GUI.ZedGraph.PointPair"/> type implementations.
            </remarks>
            
            <author> Jerry Vos modified by John Champion </author>
            <version> $Revision: 1.4 $ $Date: 2007-04-16 00:03:02 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PointPairBase.Missing">
            <summary>
            Missing values are represented internally using <see cref="F:System.Double.MaxValue"/>.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PointPairBase.DefaultFormat">
            <summary>
            The default format to be used for displaying point values via the
            <see cref="M:Alt.GUI.ZedGraph.PointPairBase.ToString"/> method.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PointPairBase.schema">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PointPairBase.X">
            <summary>
            This PointPair's X coordinate
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PointPairBase.Y">
            <summary>
            This PointPair's Y coordinate
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPairBase.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPairBase.#ctor(System.Double,System.Double)">
            <summary>
            Creates a point pair with the specified X and Y.
            </summary>
            <param name="x">This pair's x coordinate.</param>
            <param name="y">This pair's y coordinate.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPairBase.#ctor(Alt.Sketch.Point)">
            <summary>
            Creates a point pair from the specified <see cref="T:Alt.Sketch.Point"/> struct.
            </summary>
            <param name="pt">The <see cref="T:Alt.Sketch.Point"/> struct from which to get the
            new <see cref="T:Alt.GUI.ZedGraph.PointPair"/> values.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPairBase.#ctor(Alt.GUI.ZedGraph.PointPairBase)">
            <summary>
            The PointPairBase copy constructor.
            </summary>
            <param name="rhs">The basis for the copy.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPairBase.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPairBase.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPairBase.IsValueInvalid(System.Double)">
            <summary>
            static method to determine if the specified point value is invalid.
            </summary>
            <remarks>The value is considered invalid if it is <see cref="F:Alt.GUI.ZedGraph.PointPairBase.Missing"/>,
            <see cref="F:System.Double.PositiveInfinity"/>, <see cref="F:System.Double.NegativeInfinity"/>
            or <see cref="F:System.Double.NaN"/>.</remarks>
            <param name="value">The value to be checked for validity.</param>
            <returns>true if the value is invalid, false otherwise</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPairBase.op_Implicit(Alt.GUI.ZedGraph.PointPairBase)~Alt.Sketch.Point">
            <summary>
            Implicit conversion from PointPair to Point.  Note that this conversion
            can result in data loss, since the data are being cast from a type
            double (64 bit) to a float (32 bit).
            </summary>
            <param name="pair">The PointPair struct on which to operate</param>
            <returns>A Point struct equivalent to the PointPair</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPairBase.Equals(System.Object)">
            <summary>
            Compare two <see cref="T:Alt.GUI.ZedGraph.PointPairBase"/> objects for equality.  To be equal, X and Y
            must be exactly the same between the two objects.
            </summary>
            <param name="obj">The <see cref="T:Alt.GUI.ZedGraph.PointPairBase"/> object to be compared with.</param>
            <returns>true if the <see cref="T:Alt.GUI.ZedGraph.PointPairBase"/> objects are equal, false otherwise</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPairBase.GetHashCode">
            <summary>
            Return the HashCode from the base class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPairBase.ToString">
            <summary>
            Format this PointPair value using the default format.  Example:  "( 12.345, -16.876 )".
            The two double values are formatted with the "g" format type.
            </summary>
            <returns>A string representation of the PointPair</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPairBase.ToString(System.String)">
            <summary>
            Format this PointPair value using a general format string.
            Example:  a format string of "e2" would give "( 1.23e+001, -1.69e+001 )".
            </summary>
            <param name="format">A format string that will be used to format each of
            the two double type values (see <see cref="M:System.Double.ToString"/>).</param>
            <returns>A string representation of the PointPair</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPairBase.ToString(System.String,System.String)">
            <summary>
            Format this PointPair value using different general format strings for the X and Y values.
            Example:  a format string of "e2" would give "( 1.23e+001, -1.69e+001 )".
            The Z value is not displayed (see <see cref="M:Alt.GUI.ZedGraph.PointPair.ToString(System.String,System.String,System.String)"/>).
            </summary>
            <param name="formatX">A format string that will be used to format the X
            double type value (see <see cref="M:System.Double.ToString"/>).</param>
            <param name="formatY">A format string that will be used to format the Y
            double type value (see <see cref="M:System.Double.ToString"/>).</param>
            <returns>A string representation of the PointPair</returns>
        </member>
        <member name="P:Alt.GUI.ZedGraph.PointPairBase.IsMissing">
            <summary>
            Readonly value that determines if either the X or the Y
            coordinate in this PointPair is a missing value.
            </summary>
            <returns>true if either value is missing</returns>
        </member>
        <member name="P:Alt.GUI.ZedGraph.PointPairBase.IsInvalid">
            <summary>
            Readonly value that determines if either the X or the Y
            coordinate in this PointPair is an invalid (not plotable) value.
            It is considered invalid if it is missing (equal to System.Double.Max),
            Infinity, or NaN.
            </summary>
            <returns>true if either value is invalid</returns>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PointPair.schema2">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PointPair.Z">
            <summary>
            This PointPair's Z coordinate.  Also used for the lower value (dependent axis)
            for <see cref="T:Alt.GUI.ZedGraph.HiLowBarItem"/> and <see cref="T:Alt.GUI.ZedGraph.ErrorBarItem"/> charts.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PointPair.Tag">
            <summary>
            A tag object for use by the user.  This can be used to store additional
            information associated with the <see cref="T:Alt.GUI.ZedGraph.PointPair"/>.  ZedGraph never
            modifies this value, but if it is a <see cref="T:System.String"/> type, it
            may be displayed in a <see cref="T:Alt.GUI.ToolTip"/>
            within the <see cref="T:Alt.GUI.ZedGraph.ZedGraphControl"/> object.
            </summary>
            <remarks>
            Note that, if you are going to Serialize ZedGraph data, then any type
            that you store in <see cref="F:Alt.GUI.ZedGraph.PointPair.Tag"/> must be a serializable type (or
            it will cause an exception).
            </remarks>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPair.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPair.#ctor(System.Double,System.Double)">
            <summary>
            Creates a point pair with the specified X and Y.
            </summary>
            <param name="x">This pair's x coordinate.</param>
            <param name="y">This pair's y coordinate.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPair.#ctor(System.Double,System.Double,System.String)">
            <summary>
            Creates a point pair with the specified X, Y, and
            label (<see cref="F:Alt.GUI.ZedGraph.PointPair.Tag"/>).
            </summary>
            <param name="x">This pair's x coordinate.</param>
            <param name="y">This pair's y coordinate.</param>
            <param name="label">This pair's string label (<see cref="F:Alt.GUI.ZedGraph.PointPair.Tag"/>)</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPair.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates a point pair with the specified X, Y, and base value.
            </summary>
            <param name="x">This pair's x coordinate.</param>
            <param name="y">This pair's y coordinate.</param>
            <param name="z">This pair's z or lower dependent coordinate.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPair.#ctor(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Creates a point pair with the specified X, Y, base value, and
            string label (<see cref="F:Alt.GUI.ZedGraph.PointPair.Tag"/>).
            </summary>
            <param name="x">This pair's x coordinate.</param>
            <param name="y">This pair's y coordinate.</param>
            <param name="z">This pair's z or lower dependent coordinate.</param>
            <param name="label">This pair's string label (<see cref="F:Alt.GUI.ZedGraph.PointPair.Tag"/>)</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPair.#ctor(System.Double,System.Double,System.Double,System.Object)">
            <summary>
            Creates a point pair with the specified X, Y, base value, and
            (<see cref="F:Alt.GUI.ZedGraph.PointPair.Tag"/>).
            </summary>
            <param name="x">This pair's x coordinate.</param>
            <param name="y">This pair's y coordinate.</param>
            <param name="z">This pair's z or lower dependent coordinate.</param>
            <param name="tag">This pair's <see cref="F:Alt.GUI.ZedGraph.PointPair.Tag"/> property</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPair.#ctor(Alt.Sketch.Point)">
            <summary>
            Creates a point pair from the specified <see cref="T:Alt.Sketch.Point"/> struct.
            </summary>
            <param name="pt">The <see cref="T:Alt.Sketch.Point"/> struct from which to get the
            new <see cref="T:Alt.GUI.ZedGraph.PointPair"/> values.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPair.#ctor(Alt.GUI.ZedGraph.PointPair)">
            <summary>
            The PointPair copy constructor.
            </summary>
            <param name="rhs">The basis for the copy.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPair.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.PointPair.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPair.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPair.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPair.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPair.Equals(System.Object)">
            <summary>
            Compare two <see cref="T:Alt.GUI.ZedGraph.PointPair"/> objects for equality.  To be equal, X, Y, and Z
            must be exactly the same between the two objects.
            </summary>
            <param name="obj">The <see cref="T:Alt.GUI.ZedGraph.PointPair"/> object to be compared with.</param>
            <returns>true if the <see cref="T:Alt.GUI.ZedGraph.PointPair"/> objects are equal, false otherwise</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPair.GetHashCode">
            <summary>
            Return the HashCode from the base class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPair.ToString(System.Boolean)">
            <summary>
            Format this PointPair value using the default format.  Example:  "( 12.345, -16.876 )".
            The two double values are formatted with the "g" format type.
            </summary>
            <param name="isShowZ">true to show the third "Z" or low dependent value coordinate</param>
            <returns>A string representation of the PointPair</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPair.ToString(System.String,System.Boolean)">
            <summary>
            Format this PointPair value using a general format string.
            Example:  a format string of "e2" would give "( 1.23e+001, -1.69e+001 )".
            If <see paramref="isShowZ"/>
            is true, then the third "Z" coordinate is also shown.
            </summary>
            <param name="format">A format string that will be used to format each of
            the two double type values (see <see cref="M:System.Double.ToString"/>).</param>
            <returns>A string representation of the PointPair</returns>
            <param name="isShowZ">true to show the third "Z" or low dependent value coordinate</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPair.ToString(System.String,System.String,System.String)">
            <summary>
            Format this PointPair value using different general format strings for the X, Y, and Z values.
            Example:  a format string of "e2" would give "( 1.23e+001, -1.69e+001 )".
            </summary>
            <param name="formatX">A format string that will be used to format the X
            double type value (see <see cref="M:System.Double.ToString"/>).</param>
            <param name="formatY">A format string that will be used to format the Y
            double type value (see <see cref="M:System.Double.ToString"/>).</param>
            <param name="formatZ">A format string that will be used to format the Z
            double type value (see <see cref="M:System.Double.ToString"/>).</param>
            <returns>A string representation of the PointPair</returns>
        </member>
        <member name="P:Alt.GUI.ZedGraph.PointPair.IsInvalid3D">
            <summary>
            Readonly value that determines if either the X, Y, or Z
            coordinate in this PointPair is an invalid (not plotable) value.
            It is considered invalid if it is missing (equal to System.Double.Max),
            Infinity, or NaN.
            </summary>
            <returns>true if any value is invalid</returns>
        </member>
        <member name="P:Alt.GUI.ZedGraph.PointPair.LowValue">
            <summary>
            The "low" value for this point (lower dependent-axis value).
            This is really just an alias for <see cref="F:Alt.GUI.ZedGraph.PointPair.Z"/>.
            </summary>
            <value>The lower dependent value for this <see cref="T:Alt.GUI.ZedGraph.PointPair"/>.</value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.PointPair.ColorValue">
            <summary>
            The ColorValue property is just an alias for the <see cref="F:Alt.GUI.ZedGraph.PointPair.Z"/>
            property.
            </summary>
            <remarks>
            For other types, such as the <see cref="T:Alt.GUI.ZedGraph.StockPt"/>, the <see cref="T:Alt.GUI.ZedGraph.StockPt"/>
            can be mapped to a unique value.  This is used with the
            <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByColorValue"/> option.
            </remarks>
        </member>
        <member name="T:Alt.GUI.ZedGraph.PointPair.PointPairComparerY">
            <summary>
            Compares points based on their y values.  Is setup to be used in an
            ascending order sort.
            <seealso cref="M:System.Collections.ArrayList.Sort"/>
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPair.PointPairComparerY.Compare(Alt.GUI.ZedGraph.PointPair,Alt.GUI.ZedGraph.PointPair)">
            <summary>
            Compares two <see cref="T:Alt.GUI.ZedGraph.PointPair"/>s.
            </summary>
            <param name="l">Point to the left.</param>
            <param name="r">Point to the right.</param>
            <returns>-1, 0, or 1 depending on l.Y's relation to r.Y</returns>
        </member>
        <member name="T:Alt.GUI.ZedGraph.PointPair.PointPairComparer">
            <summary>
            Compares points based on their x values.  Is setup to be used in an
            ascending order sort.
            <seealso cref="M:System.Collections.ArrayList.Sort"/>
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPair.PointPairComparer.#ctor(Alt.GUI.ZedGraph.SortType)">
            <summary>
            Constructor for PointPairComparer.
            </summary>
            <param name="type">The axis type on which to sort.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPair.PointPairComparer.Compare(Alt.GUI.ZedGraph.PointPair,Alt.GUI.ZedGraph.PointPair)">
            <summary>
            Compares two <see cref="T:Alt.GUI.ZedGraph.PointPair"/>s.
            </summary>
            <param name="l">Point to the left.</param>
            <param name="r">Point to the right.</param>
            <returns>-1, 0, or 1 depending on l.X's relation to r.X</returns>
        </member>
        <member name="T:Alt.GUI.ZedGraph.PointPair4">
            <summary>
            The basic <see cref="T:Alt.GUI.ZedGraph.PointPair"/> class holds three data values (X, Y, Z).  This
            class extends the basic PointPair to contain four data values (X, Y, Z, T).
            </summary>
            
            <author> John Champion </author>
            <version> $Revision: 3.3 $ $Date: 2007-03-17 18:43:44 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PointPair4.schema3">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PointPair4.T">
            <summary>
            This PointPair4's T coordinate.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPair4.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPair4.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a point pair with the specified X, Y, Z, and T value.
            </summary>
            <param name="x">This pair's x coordinate.</param>
            <param name="y">This pair's y coordinate.</param>
            <param name="z">This pair's z coordinate.</param>
            <param name="t">This pair's t coordinate.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPair4.#ctor(System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Creates a point pair with the specified X, Y, base value, and
            label (<see cref="F:Alt.GUI.ZedGraph.PointPair.Tag"/>).
            </summary>
            <param name="x">This pair's x coordinate.</param>
            <param name="y">This pair's y coordinate.</param>
            <param name="z">This pair's z coordinate.</param>
            <param name="t">This pair's t coordinate.</param>
            <param name="label">This pair's string label (<see cref="F:Alt.GUI.ZedGraph.PointPair.Tag"/>)</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPair4.#ctor(Alt.GUI.ZedGraph.PointPair4)">
            <summary>
            The PointPair4 copy constructor.
            </summary>
            <param name="rhs">The basis for the copy.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPair4.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPair4.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPair4.ToString(System.Boolean)">
            <summary>
            Format this PointPair4 value using the default format.  Example:  "( 12.345, -16.876 )".
            The two double values are formatted with the "g" format type.
            </summary>
            <param name="isShowZT">true to show the third "Z" and fourth "T" value coordinates</param>
            <returns>A string representation of the PointPair4</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPair4.ToString(System.String,System.Boolean)">
            <summary>
            Format this PointPair value using a general format string.
            Example:  a format string of "e2" would give "( 1.23e+001, -1.69e+001 )".
            If <see paramref="isShowZ"/>
            is true, then the third "Z" coordinate is also shown.
            </summary>
            <param name="format">A format string that will be used to format each of
            the two double type values (see <see cref="M:System.Double.ToString"/>).</param>
            <returns>A string representation of the PointPair</returns>
            <param name="isShowZT">true to show the third "Z" or low dependent value coordinate</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPair4.ToString(System.String,System.String,System.String,System.String)">
            <summary>
            Format this PointPair value using different general format strings for the X, Y, and Z values.
            Example:  a format string of "e2" would give "( 1.23e+001, -1.69e+001 )".
            </summary>
            <param name="formatX">A format string that will be used to format the X
            double type value (see <see cref="M:System.Double.ToString"/>).</param>
            <param name="formatY">A format string that will be used to format the Y
            double type value (see <see cref="M:System.Double.ToString"/>).</param>
            <param name="formatZ">A format string that will be used to format the Z
            double type value (see <see cref="M:System.Double.ToString"/>).</param>
            <param name="formatT">A format string that will be used to format the T
            double type value (see <see cref="M:System.Double.ToString"/>).</param>
            <returns>A string representation of the PointPair</returns>
        </member>
        <member name="P:Alt.GUI.ZedGraph.PointPair4.IsInvalid4D">
            <summary>
            Readonly value that determines if either the X, Y, Z, or T
            coordinate in this PointPair4 is an invalid (not plotable) value.
            It is considered invalid if it is missing (equal to System.Double.Max),
            Infinity, or NaN.
            </summary>
            <returns>true if any value is invalid</returns>
        </member>
        <member name="T:Alt.GUI.ZedGraph.PointPairCV">
            <summary>
            A simple instance that stores a data point (X, Y, Z).  This differs from a regular
            <see cref="T:Alt.GUI.ZedGraph.PointPair"/> in that it maps the <see cref="P:Alt.GUI.ZedGraph.PointPairCV.ColorValue"/> property
            to an independent value.  That is, <see cref="P:Alt.GUI.ZedGraph.PointPairCV.ColorValue"/> and
            <see cref="F:Alt.GUI.ZedGraph.PointPair.Z"/> are not related (as they are in the
            <see cref="T:Alt.GUI.ZedGraph.PointPair"/>).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PointPairCV.schema3">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PointPairCV._colorValue">
            <summary>
            This is a user value that can be anything.  It is used to provide special 
            property-based coloration to the graph elements.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPairCV.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates a point pair with the specified X, Y, and base value.
            </summary>
            <param name="x">This pair's x coordinate.</param>
            <param name="y">This pair's y coordinate.</param>
            <param name="z">This pair's z or lower dependent coordinate.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPairCV.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPairCV.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="P:Alt.GUI.ZedGraph.PointPairCV.ColorValue">
            <summary>
            The ColorValue property.  This is used with the
            <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByColorValue"/> option.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.PointPairList">
            <summary>
            A collection class containing a list of <see cref="T:Alt.GUI.ZedGraph.PointPair"/> objects
            that define the set of points to be displayed on the curve.
            </summary>
            <seealso cref="T:Alt.GUI.ZedGraph.BasicArrayPointList"/>
            <seealso cref="T:Alt.GUI.ZedGraph.IPointList"/>
            
            <author> Jerry Vos based on code by John Champion
            modified by John Champion</author>
            <version> $Revision: 3.37 $ $Date: 2007-06-29 15:39:07 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PointPairList._sorted">
            <summary>Private field to maintain the sort status of this
            <see cref="T:Alt.GUI.ZedGraph.PointPairList"/>.  Use the public property
            <see cref="P:Alt.GUI.ZedGraph.PointPairList.Sorted"/> to access this value.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPairList.#ctor">
            <summary>
            Default constructor for the collection class
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPairList.#ctor(System.Double[],System.Double[])">
            <summary>
            Constructor to initialize the PointPairList from two arrays of
            type double.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPairList.#ctor(Alt.GUI.ZedGraph.IPointList)">
            <summary>
            Constructor to initialize the PointPairList from an IPointList
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPairList.#ctor(System.Double[],System.Double[],System.Double[])">
            <summary>
            Constructor to initialize the PointPairList from three arrays of
            type double.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPairList.#ctor(Alt.GUI.ZedGraph.PointPairList)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The PointPairList from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPairList.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.PointPairList.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPairList.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPairList.Add(Alt.GUI.ZedGraph.PointPair)">
            <summary>
            Add a <see cref="T:Alt.GUI.ZedGraph.PointPair"/> object to the collection at the end of the list.
            </summary>
            <param name="point">The <see cref="T:Alt.GUI.ZedGraph.PointPair"/> object to
            be added</param>
            <returns>The zero-based ordinal index where the point was added in the list.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPairList.Add(Alt.GUI.ZedGraph.PointPairList)">
            <summary>
            Add a <see cref="T:Alt.GUI.ZedGraph.PointPairList"/> object to the collection at the end of the list.
            </summary>
            <param name="pointList">A reference to the <see cref="T:Alt.GUI.ZedGraph.PointPairList"/> object to
            be added</param>
            <returns>The zero-based ordinal index where the last point was added in the list,
            or -1 if no points were added.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPairList.Add(System.Double[],System.Double[])">
            <summary>
            Add a set of points to the PointPairList from two arrays of type double.
            If either array is null, then a set of ordinal values is automatically
            generated in its place (see <see cref="F:Alt.GUI.ZedGraph.AxisType.Ordinal"/>.
            If the arrays are of different size, then the larger array prevails and the
            smaller array is padded with <see cref="F:Alt.GUI.ZedGraph.PointPairBase.Missing"/> values.
            </summary>
            <param name="x">A double[] array of X values</param>
            <param name="y">A double[] array of Y values</param>
            <returns>The zero-based ordinal index where the last point was added in the list,
            or -1 if no points were added.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPairList.Add(System.Double[],System.Double[],System.Double[])">
            <summary>
            Add a set of points to the <see cref="T:Alt.GUI.ZedGraph.PointPairList"/> from three arrays of type double.
            If the X or Y array is null, then a set of ordinal values is automatically
            generated in its place (see <see cref="F:Alt.GUI.ZedGraph.AxisType.Ordinal"/>.  If the <see paramref="baseVal"/>
            is null, then it is set to zero.
            If the arrays are of different size, then the larger array prevails and the
            smaller array is padded with <see cref="F:Alt.GUI.ZedGraph.PointPairBase.Missing"/> values.
            </summary>
            <param name="x">A double[] array of X values</param>
            <param name="y">A double[] array of Y values</param>
            <param name="z">A double[] array of Z or lower-dependent axis values</param>
            <returns>The zero-based ordinal index where the last point was added in the list,
            or -1 if no points were added.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPairList.Add(System.Double,System.Double)">
            <summary>
            Add a single point to the <see cref="T:Alt.GUI.ZedGraph.PointPairList"/> from values of type double.
            </summary>
            <param name="x">The X value</param>
            <param name="y">The Y value</param>
            <returns>The zero-based ordinal index where the point was added in the list.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPairList.Add(System.Double,System.Double,System.String)">
            <summary>
            Add a single point to the <see cref="T:Alt.GUI.ZedGraph.PointPairList"/> from values of type double.
            </summary>
            <param name="x">The X value</param>
            <param name="y">The Y value</param>
            <param name="tag">The Tag value for the PointPair</param>
            <returns>The zero-based ordinal index where the point was added in the list.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPairList.Add(System.Double,System.Double,System.Double)">
            <summary>
            Add a single point to the <see cref="T:Alt.GUI.ZedGraph.PointPairList"/> from values of type double.
            </summary>
            <param name="x">The X value</param>
            <param name="y">The Y value</param>
            <param name="z">The Z or lower dependent axis value</param>
            <returns>The zero-based ordinal index where the point was added
            in the list.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPairList.Add(System.Double,System.Double,System.Double,System.String)">
            <summary>
            Add a single point to the <see cref="T:Alt.GUI.ZedGraph.PointPairList"/> from values of type double.
            </summary>
            <param name="x">The X value</param>
            <param name="y">The Y value</param>
            <param name="z">The Z or lower dependent axis value</param>
            <param name="tag">The Tag value for the PointPair</param>
            <returns>The zero-based ordinal index where the point was added
            in the list.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPairList.Insert(System.Int32,Alt.GUI.ZedGraph.PointPair)">
            <summary>
            Add a <see cref="T:Alt.GUI.ZedGraph.PointPair"/> object to the collection at the specified,
            zero-based, index location.
            </summary>
            <param name="index">
            The zero-based ordinal index where the point is to be added in the list.
            </param>
            <param name="point">
            The <see cref="T:Alt.GUI.ZedGraph.PointPair"/> object to be added.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPairList.Insert(System.Int32,System.Double,System.Double)">
            <summary>
            Add a single point (from values of type double ) to the <see cref="T:Alt.GUI.ZedGraph.PointPairList"/> at the specified,
            zero-based, index location.
            </summary>
            <param name="index">
            The zero-based ordinal index where the point is to be added in the list.
            </param>
            <param name="x">The X value</param>
            <param name="y">The Y value</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPairList.Insert(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Add a single point (from values of type double ) to the <see cref="T:Alt.GUI.ZedGraph.PointPairList"/> at the specified,
            zero-based, index location.
            </summary>
            <param name="index">
            The zero-based ordinal index where the point is to be added in the list.
            </param>
            <param name="x">The X value</param>
            <param name="y">The Y value</param>
            <param name="z">The Z or lower dependent axis value</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPairList.IndexOfTag(System.String)">
            <summary>
            Return the zero-based position index of the
            <see cref="T:Alt.GUI.ZedGraph.PointPair"/> with the specified label <see cref="F:Alt.GUI.ZedGraph.PointPair.Tag"/>.
            </summary>
            <remarks>The <see cref="F:Alt.GUI.ZedGraph.PointPair.Tag"/> object must be of type <see cref="T:System.String"/>
            for this method to find it.</remarks>
            <param name="label">The <see cref="T:System.String"/> label that is in the
            <see cref="F:Alt.GUI.ZedGraph.PointPair.Tag"/> attribute of the item to be found.
            </param>
            <returns>The zero-based index of the specified <see cref="T:Alt.GUI.ZedGraph.PointPair"/>,
            or -1 if the <see cref="T:Alt.GUI.ZedGraph.PointPair"/> is not in the list</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPairList.Equals(System.Object)">
            <summary>
            Compare two <see cref="T:Alt.GUI.ZedGraph.PointPairList"/> objects to see if they are equal.
            </summary>
            <remarks>Equality is based on equal count of <see cref="T:Alt.GUI.ZedGraph.PointPair"/> items, and
            each individual <see cref="T:Alt.GUI.ZedGraph.PointPair"/> must be equal (as per the
            <see cref="M:Alt.GUI.ZedGraph.PointPair.Equals(System.Object)"/> method.</remarks>
            <param name="obj">The <see cref="T:Alt.GUI.ZedGraph.PointPairList"/> to be compared with for equality.</param>
            <returns>true if the <see cref="T:Alt.GUI.ZedGraph.PointPairList"/> objects are equal, false otherwise.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPairList.GetHashCode">
            <summary>
            Return the HashCode from the base class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPairList.Sort">
            <summary>
            Sorts the list according to the point x values. Will not sort the 
            list if the list is already sorted.
            </summary>
            <returns>If the list was sorted before sort was called</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPairList.Sort(Alt.GUI.ZedGraph.SortType)">
             <summary>
             Sorts the list according to the point values . Will not sort the 
             list if the list is already sorted.
             </summary>
             <param name="type"></param>  The <see cref="T:Alt.GUI.ZedGraph.SortType"/>
            used to determine whether the X or Y values will be used to sort
            the list
             <returns>If the list was sorted before sort was called</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPairList.SetX(System.Double[])">
            <summary>
            Set the X values for this <see cref="T:Alt.GUI.ZedGraph.PointPairList"/> from the specified
            array of double values.
            </summary>
            <remarks>
            If <see paramref="x"/> has more values than
            this list, then the extra values will be ignored.  If <see paramref="x"/>
            has less values, then the corresponding <see cref="T:Alt.GUI.ZedGraph.PointPairList"/> values
            will not be changed.  That is, if the <see cref="T:Alt.GUI.ZedGraph.PointPairList"/> has 20 values
            and <see paramref="x"/> has 15 values, then the first 15 values of the
            <see cref="T:Alt.GUI.ZedGraph.PointPairList"/> will be changed, and the last 5 values will not be
            changed.
            </remarks>
            <param name="x">An array of double values that will replace the existing X
            values in the <see cref="T:Alt.GUI.ZedGraph.PointPairList"/>.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPairList.SetY(System.Double[])">
            <summary>
            Set the Y values for this <see cref="T:Alt.GUI.ZedGraph.PointPairList"/> from the specified
            array of double values.
            </summary>
            <remarks>
            If <see paramref="y"/> has more values than
            this list, then the extra values will be ignored.  If <see paramref="y"/>
            has less values, then the corresponding <see cref="T:Alt.GUI.ZedGraph.PointPairList"/> values
            will not be changed.  That is, if the <see cref="T:Alt.GUI.ZedGraph.PointPairList"/> has 20 values
            and <see paramref="y"/> has 15 values, then the first 15 values of the
            <see cref="T:Alt.GUI.ZedGraph.PointPairList"/> will be changed, and the last 5 values will not be
            changed.
            </remarks>
            <param name="y">An array of double values that will replace the existing Y
            values in the <see cref="T:Alt.GUI.ZedGraph.PointPairList"/>.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPairList.SetZ(System.Double[])">
            <summary>
            Set the Z values for this <see cref="T:Alt.GUI.ZedGraph.PointPairList"/> from the specified
            array of double values.
            </summary>
            <remarks>
            If <see paramref="z"/> has more values than
            this list, then the extra values will be ignored.  If <see paramref="z"/>
            has less values, then the corresponding <see cref="T:Alt.GUI.ZedGraph.PointPairList"/> values
            will not be changed.  That is, if the <see cref="T:Alt.GUI.ZedGraph.PointPairList"/> has 20 values
            and <see paramref="z"/> has 15 values, then the first 15 values of the
            <see cref="T:Alt.GUI.ZedGraph.PointPairList"/> will be changed, and the last 5 values will not be
            changed.
            </remarks>
            <param name="z">An array of double values that will replace the existing Z
            values in the <see cref="T:Alt.GUI.ZedGraph.PointPairList"/>.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPairList.SumY(Alt.GUI.ZedGraph.PointPairList)">
            <summary>
            Add the Y values from the specified <see cref="T:Alt.GUI.ZedGraph.PointPairList"/> object to this
            <see cref="T:Alt.GUI.ZedGraph.PointPairList"/>.  If <see paramref="sumList"/> has more values than
            this list, then the extra values will be ignored.  If <see paramref="sumList"/>
            has less values, the missing values are assumed to be zero.
            </summary>
            <param name="sumList">A reference to the <see cref="T:Alt.GUI.ZedGraph.PointPairList"/> object to
            be summed into the this <see cref="T:Alt.GUI.ZedGraph.PointPairList"/>.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPairList.SumX(Alt.GUI.ZedGraph.PointPairList)">
            <summary>
            Add the X values from the specified <see cref="T:Alt.GUI.ZedGraph.PointPairList"/> object to this
            <see cref="T:Alt.GUI.ZedGraph.PointPairList"/>.  If <see paramref="sumList"/> has more values than
            this list, then the extra values will be ignored.  If <see paramref="sumList"/>
            has less values, the missing values are assumed to be zero.
            </summary>
            <param name="sumList">A reference to the <see cref="T:Alt.GUI.ZedGraph.PointPairList"/> object to
            be summed into the this <see cref="T:Alt.GUI.ZedGraph.PointPairList"/>.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPairList.InterpolateX(System.Double)">
            <summary>
            Linearly interpolate the data to find an arbitraty Y value that corresponds to the specified X value.
            </summary>
            <remarks>
            This method uses linear interpolation with a binary search algorithm.  It therefore
            requires that the x data be monotonically increasing.  Missing values are not allowed.  This
            method will extrapolate outside the range of the PointPairList if necessary.
            </remarks>
            <param name="xTarget">The target X value on which to interpolate</param>
            <returns>The Y value that corresponds to the <see paramref="xTarget"/> value.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPairList.SplineInterpolateX(System.Double,System.Double)">
            <summary>
            Use Cardinal Splines to Interpolate the data to find an arbitraty Y value that corresponds to
            the specified X value.
            </summary>
            <remarks>
            This method uses cardinal spline interpolation with a binary search algorithm.  It therefore
            requires that the x data be monotonically increasing.  Missing values are not allowed.  This
            method will not extrapolate outside the range of the PointPairList (it returns
            <see cref="F:Alt.GUI.ZedGraph.PointPairBase.Missing"/> if extrapolation would be required).  WARNING: Cardinal
            spline interpolation can generate curves with non-unique X values for higher tension
            settings.  That is, there may be multiple X values for the same Y value.  This routine
            follows the path of the spline curve until it reaches the FIRST OCCURRENCE of the
            target X value.  It does not check to see if other solutions are possible.
            </remarks>
            <param name="xTarget">The target X value on which to interpolate</param>
            <param name="tension">The tension setting that controls the curvature of the spline fit.
            Typical values are between 0 and 1, where 0 is a linear fit, and 1 is lots of "roundness".
            Values greater than 1 may give odd results.
            </param>
            <returns>The Y value that corresponds to the <see paramref="xTarget"/> value.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPairList.InterpolateY(System.Double)">
            <summary>
            Linearly interpolate the data to find an arbitraty X value that corresponds to the specified Y value.
            </summary>
            <remarks>
            This method uses linear interpolation with a binary search algorithm.  It therefore
            requires that the Y data be monotonically increasing.  Missing values are not allowed.  This
            method will extrapolate outside the range of the PointPairList if necessary.
            </remarks>
            <param name="yTarget">The target Y value on which to interpolate</param>
            <returns>The X value that corresponds to the <see paramref="yTarget"/> value.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPairList.LinearRegression(Alt.GUI.ZedGraph.IPointList,System.Int32)">
            <summary>
            Use linear regression to form a least squares fit of an existing
            <see cref="T:Alt.GUI.ZedGraph.IPointList"/> instance.
            </summary>
            <remarks>The output <see cref="T:Alt.GUI.ZedGraph.PointPairList"/> will cover the
            same X range of data as the original dataset.
            </remarks>
            <param name="points">An <see cref="T:Alt.GUI.ZedGraph.IPointList"/> instance containing
            the data to be regressed.</param>
            <param name="pointCount">The number of desired points to be included
            in the resultant <see cref="T:Alt.GUI.ZedGraph.PointPairList"/>.
            </param>
            <returns>A new <see cref="T:Alt.GUI.ZedGraph.PointPairList"/> containing the resultant
            data fit.
            </returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PointPairList.LinearRegression(Alt.GUI.ZedGraph.IPointList,System.Int32,System.Double,System.Double)">
            <summary>
            Use linear regression to form a least squares fit of an existing
            <see cref="T:Alt.GUI.ZedGraph.IPointList"/> instance.
            </summary>
            <param name="points">An <see cref="T:Alt.GUI.ZedGraph.IPointList"/> instance containing
            the data to be regressed.</param>
            <param name="pointCount">The number of desired points to be included
            in the resultant <see cref="T:Alt.GUI.ZedGraph.PointPairList"/>.
            </param>
            <param name="minX">The minimum X value of the resultant
            <see cref="T:Alt.GUI.ZedGraph.PointPairList"/>.</param>
            <param name="maxX">The maximum X value of the resultant
            <see cref="T:Alt.GUI.ZedGraph.PointPairList"/>.</param>
            <returns>A new <see cref="T:Alt.GUI.ZedGraph.PointPairList"/> containing the resultant
            data fit.
            </returns>
            <author> Brian Chappell - lazarusds
                     modified by John Champion</author>
        </member>
        <member name="P:Alt.GUI.ZedGraph.PointPairList.Sorted">
            <summary>
            true if the list is currently sorted.
            </summary>
            <seealso cref="M:Alt.GUI.ZedGraph.PointPairList.Sort"/>
        </member>
        <member name="T:Alt.GUI.ZedGraph.PolyObj">
            <summary>
            A class that represents a bordered and/or filled polygon object on
            the graph.  A list of <see cref="T:Alt.GUI.ZedGraph.PolyObj"/> objects is maintained by
            the <see cref="T:Alt.GUI.ZedGraph.GraphObjList"/> collection class.
            </summary>
            
            <author> John Champion </author>
            <version> $Revision: 3.4 $ $Date: 2007-01-25 07:56:09 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PolyObj.schema3">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PolyObj._isClosedFigure">
            <summary>
            private value that determines if the polygon will be automatically closed.
            true to close the figure, false to leave it "open."  Use the public property
            <see cref="P:Alt.GUI.ZedGraph.PolyObj.IsClosedFigure"/> to access this value.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PolyObj.#ctor(Alt.GUI.ZedGraph.PointD[],Alt.Sketch.Color,Alt.Sketch.Color)">
            <overloads>Constructors for the <see cref="T:Alt.GUI.ZedGraph.PolyObj"/> object</overloads>
            <summary>
            A constructor that allows the position, border color, and solid fill color
            of the <see cref="T:Alt.GUI.ZedGraph.PolyObj"/> to be pre-specified.
            </summary>
            <param name="borderColor">An arbitrary <see cref="!:System.Drawing.Color"/> specification
            for the box border</param>
            <param name="fillColor">An arbitrary <see cref="!:System.Drawing.Color"/> specification
            for the box fill (will be a solid color fill)</param>
            <param name="points">The <see cref="T:Alt.GUI.ZedGraph.PointD"/> array that defines
            the polygon.  This will be in units determined by
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/>.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PolyObj.#ctor(Alt.GUI.ZedGraph.PointD[])">
            <summary>
            A constructor that allows the position
            of the <see cref="T:Alt.GUI.ZedGraph.PolyObj"/> to be pre-specified.  Other properties are defaulted.
            </summary>
            <param name="points">The <see cref="T:Alt.GUI.ZedGraph.PointD"/> array that defines
            the polygon.  This will be in units determined by
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/>.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PolyObj.#ctor">
            <summary>
            A default constructor that creates a <see cref="T:Alt.GUI.ZedGraph.PolyObj"/> from an empty
            <see cref="T:Alt.GUI.ZedGraph.PointD"/> array.  Other properties are defaulted.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PolyObj.#ctor(Alt.GUI.ZedGraph.PointD[],Alt.Sketch.Color,Alt.Sketch.Color,Alt.Sketch.Color)">
            <summary>
            A constructor that allows the position, border color, and two-color
            gradient fill colors
            of the <see cref="T:Alt.GUI.ZedGraph.PolyObj"/> to be pre-specified.
            </summary>
            <param name="borderColor">An arbitrary <see cref="!:System.Drawing.Color"/> specification
            for the box border</param>
            <param name="fillColor1">An arbitrary <see cref="!:System.Drawing.Color"/> specification
            for the start of the box gradient fill</param>
            <param name="fillColor2">An arbitrary <see cref="!:System.Drawing.Color"/> specification
            for the end of the box gradient fill</param>
            <param name="points">The <see cref="T:Alt.GUI.ZedGraph.PointD"/> array that defines
            the polygon.  This will be in units determined by
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/>.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PolyObj.#ctor(Alt.GUI.ZedGraph.PolyObj)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:Alt.GUI.ZedGraph.PolyObj"/> object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PolyObj.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.PolyObj.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PolyObj.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PolyObj.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PolyObj.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PolyObj.Draw(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.PaneBase,System.Double)">
            <summary>
            Render this object to the specified <see cref="T:Alt.Sketch.Graphics"/> device.
            </summary>
            <remarks>
            This method is normally only called by the Draw method
            of the parent <see cref="T:Alt.GUI.ZedGraph.GraphObjList"/> collection object.
            </remarks>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.PaneBase"/> object that is the parent or
            owner of this object.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PolyObj.PointInBox(Alt.Sketch.Point,Alt.GUI.ZedGraph.PaneBase,Alt.Sketch.Graphics,System.Double)">
            <summary>
            Determine if the specified screen point lies inside the bounding box of this
            <see cref="T:Alt.GUI.ZedGraph.PolyObj"/>.
            </summary>
            <param name="pt">The screen point, in pixels</param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.PaneBase"/> object that is the parent or
            owner of this object.
            </param>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <returns>true if the point lies in the bounding box, false otherwise</returns>
        </member>
        <member name="P:Alt.GUI.ZedGraph.PolyObj.Points">
            <summary>
            Gets or sets the <see cref="T:Alt.GUI.ZedGraph.PointD"/> array that defines
            the polygon.  This will be in units determined by
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/>.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.PolyObj.IsClosedFigure">
            <summary>
            Gets or sets a value that determines if the polygon will be automatically closed.
            true to close the figure, false to leave it "open."
            </summary>
            <remarks>
            This boolean determines whether or not the CloseFigure() method will be called
            to fully close the path of the polygon.  This value defaults to true, and for any
            closed figure it should fine.  If you want to draw a line that does not close into
            a shape, then you should set this value to false.  For a figure that is naturally
            closed (e.g., the first point of the polygon is the same as the last point),
            leaving this value set to false may result in minor pixel artifacts due to
            rounding.
            </remarks>
        </member>
        <member name="T:Alt.GUI.ZedGraph.RadarPointList">
            <summary>
            A class containing a set of data values to be plotted as a RadarPlot.
            This class will effectively convert the data into <see cref="T:Alt.GUI.ZedGraph.PointPair"/> objects
            by converting the polar coordinates to rectangular coordinates
            </summary>
            <seealso cref="T:Alt.GUI.ZedGraph.BasicArrayPointList"/>
            <seealso cref="T:Alt.GUI.ZedGraph.IPointList"/>
            <seealso cref="T:Alt.GUI.ZedGraph.IPointListEdit"/>
            
            <author>Jerry Vos and John Champion</author>
            <version> $Revision: 3.5 $ $Date: 2007-04-16 00:03:02 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.RadarPointList._clockwise">
            <summary>
            Default to clockwise rotation as this is the standard for radar charts
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.RadarPointList._rotation">
            <summary>
            Default to 90 degree rotation so main axis is in the 12 o'clock position,
            which is the standard for radar charts.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.RadarPointList.GetAt(System.Int32)">
            <summary>
            Get the raw data
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.RadarPointList.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.RadarPointList.#ctor(Alt.GUI.ZedGraph.RadarPointList)">
            <summary>
            Copy Constructor
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.RadarPointList.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.RadarPointList.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.RadarPointList.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.RadarPointList.Add(System.Double,System.Double)">
            <summary>
            Add a single point to the <see cref="T:Alt.GUI.ZedGraph.RadarPointList"/> from two values of type double.
            </summary>
            <param name="r">The radial coordinate value</param>
            <param name="z">The 'Z' coordinate value, which is not normally used for plotting,
            but can be used for <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByZ"/> type fills</param>
            <returns>The zero-based ordinal index where the point was added in the list.</returns>
        </member>
        <member name="P:Alt.GUI.ZedGraph.RadarPointList.Item(System.Int32)">
            <summary>
            Indexer to access the specified <see cref="T:Alt.GUI.ZedGraph.PointPair"/> object by
            its ordinal position in the list.  This method does the calculations
            to convert the data from polar to rectangular coordinates.
            </summary>
            <param name="index">The ordinal position (zero-based) of the
            <see cref="T:Alt.GUI.ZedGraph.PointPair"/> object to be accessed.</param>
            <value>A <see cref="T:Alt.GUI.ZedGraph.PointPair"/> object reference.</value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.RadarPointList.Clockwise">
            <summary>
            Indicates if points should be added in clockwise or counter-clockwise order
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.RadarPointList.Rotation">
            <summary>
            Sets the angular rotation (starting angle) for the initial axis
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.RadarPointList.Count">
            <summary>
            gets the number of points available in the list
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.RollingPointPairList">
             <summary>
             A class that provides a rolling list of <see cref="T:Alt.GUI.ZedGraph.PointPair"/> objects.
             This is essentially a 
             first-in-first-out (FIFO) queue with a fixed capacity which allows 'rolling' 
             (or oscilloscope like) graphs to be be animated without having the overhead of an
             ever-growing ArrayList.
             
             The queue is constructed with a fixed capacity and new points can be enqueued. When the 
             capacity is reached the oldest (first in) PointPair is overwritten. However, when 
             accessing via <see cref="T:Alt.GUI.ZedGraph.IPointList"/>, the <see cref="T:Alt.GUI.ZedGraph.PointPair"/> objects are
             seen in the order in which they were enqeued.
            
             RollingPointPairList supports data editing through the <see cref="T:Alt.GUI.ZedGraph.IPointListEdit"/>
             interface.
             
             <author>Colin Green with mods by John Champion</author>
             <version> $Date: 2007-11-05 04:33:26 $ </version>
             </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.RollingPointPairList.schema">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.RollingPointPairList._mBuffer">
            <summary>
            An array of PointPair objects that acts as the underlying buffer.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.RollingPointPairList._headIdx">
            <summary>
            The index of the previously enqueued item. -1 if buffer is empty.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.RollingPointPairList._tailIdx">
            <summary>
            The index of the next item to be dequeued. -1 if buffer is empty.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.RollingPointPairList.#ctor(System.Int32)">
            <summary>
            Constructs an empty buffer with the specified capacity.
            </summary>
            <param name="capacity">Number of elements in the rolling list.  This number
            cannot be changed once the RollingPointPairList is constructed.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.RollingPointPairList.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructs an empty buffer with the specified capacity.  Pre-allocates space
            for all PointPair's in the list if <paramref name="preLoad"/> is true.
            </summary>
            <param name="capacity">Number of elements in the rolling list.  This number
            cannot be changed once the RollingPointPairList is constructed.</param>
            <param name="preLoad">true to pre-allocate all PointPair instances in
            the list, false otherwise.  Note that in order to be memory efficient,
            the <see cref="M:Alt.GUI.ZedGraph.RollingPointPairList.Add(System.Double,System.Double,System.Double)"/> method should be used to add
            data.  Avoid the <see cref="M:Alt.GUI.ZedGraph.RollingPointPairList.Add(Alt.GUI.ZedGraph.PointPair)"/> method.
            </param>
            <seealso cref="M:Alt.GUI.ZedGraph.RollingPointPairList.Add(System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:Alt.GUI.ZedGraph.RollingPointPairList.#ctor(Alt.GUI.ZedGraph.IPointList)">
            <summary>
            Constructs a buffer with a copy of the items within the provided
            <see cref="T:Alt.GUI.ZedGraph.IPointList"/>.
            The <see cref="P:Alt.GUI.ZedGraph.RollingPointPairList.Capacity"/> is set to the length of the provided list.
            </summary>
            <param name="rhs">The <see cref="T:Alt.GUI.ZedGraph.IPointList"/> to be copied.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.RollingPointPairList.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.RollingPointPairList.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.RollingPointPairList.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.RollingPointPairList.Clear">
            <summary>
            Clear the buffer of all <see cref="T:Alt.GUI.ZedGraph.PointPair"/> objects.
            Note that the <see cref="P:Alt.GUI.ZedGraph.RollingPointPairList.Capacity"/> remains unchanged.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.RollingPointPairList.GetNextIndex">
            <summary>
            Calculate that the next index in the buffer that should receive a new data point.
            Note that this method actually advances the buffer, so a datapoint should be
            added at _mBuffer[_headIdx].
            </summary>
            <returns>The index position of the new head element</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.RollingPointPairList.Add(Alt.GUI.ZedGraph.PointPair)">
            <summary>
            Add a <see cref="T:Alt.GUI.ZedGraph.PointPair"/> onto the head of the queue,
            overwriting old values if the buffer is full.
            </summary>
            <param name="item">The <see cref="T:Alt.GUI.ZedGraph.PointPair"/> to be added.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.RollingPointPairList.Add(Alt.GUI.ZedGraph.IPointList)">
            <summary>
            Add an <see cref="T:Alt.GUI.ZedGraph.IPointList"/> object to the head of the queue.
            </summary>
            <param name="pointList">A reference to the <see cref="T:Alt.GUI.ZedGraph.IPointList"/> object to
            be added</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.RollingPointPairList.Remove">
            <summary>
            Remove an old item from the tail of the queue.
            </summary>
            <returns>The removed item. Throws an <see cref="T:System.InvalidOperationException"/>
            if the buffer was empty. 
            Check the buffer's length (<see cref="P:Alt.GUI.ZedGraph.RollingPointPairList.Count"/>) or the <see cref="P:Alt.GUI.ZedGraph.RollingPointPairList.IsEmpty"/>
            property to avoid exceptions.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.RollingPointPairList.RemoveAt(System.Int32)">
            <summary>
            Remove the <see cref="T:Alt.GUI.ZedGraph.PointPair"/> at the specified index
            </summary>
            <remarks>
            All items in the queue that lie after <paramref name="index"/> will
            be shifted back by one, and the queue will be one item shorter.
            </remarks>
            <param name="index">The ordinal position of the item to be removed.
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if index is less than
            zero or greater than or equal to <see cref="P:Alt.GUI.ZedGraph.RollingPointPairList.Count"/>
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.RollingPointPairList.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Remove a range of <see cref="T:Alt.GUI.ZedGraph.PointPair"/> objects starting at the specified index
            </summary>
            <remarks>
            All items in the queue that lie after <paramref name="index"/> will
            be shifted back, and the queue will be <paramref name="count"/> items shorter.
            </remarks>
            <param name="index">The ordinal position of the item to be removed.
            Throws an <see cref="T:System.ArgumentOutOfRangeException"/> if index is less than
            zero or greater than or equal to <see cref="P:Alt.GUI.ZedGraph.RollingPointPairList.Count"/>
            </param>
            <param name="count">The number of items to be removed.  Throws an
            <see cref="T:System.ArgumentOutOfRangeException"/> if <paramref name="count"/> is less than zero
            or greater than the total available items in the queue</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.RollingPointPairList.Pop">
            <summary>
            Pop an item off the head of the queue.
            </summary>
            <returns>The popped item. Throws an exception if the buffer was empty.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.RollingPointPairList.Peek">
            <summary>
            Peek at the <see cref="T:Alt.GUI.ZedGraph.PointPair"/> item at the head of the queue.
            </summary>
            <returns>The <see cref="T:Alt.GUI.ZedGraph.PointPair"/> item at the head of the queue.
            Throws an <see cref="T:System.InvalidOperationException"/> if the buffer was empty.
            </returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.RollingPointPairList.Add(System.Double,System.Double,System.Double,System.Object)">
            <summary>
            Add a set of values onto the head of the queue,
            overwriting old values if the buffer is full.
            </summary>
            <remarks>
            This method is much more efficient that the <see cref="M:Alt.GUI.ZedGraph.RollingPointPairList.Add(Alt.GUI.ZedGraph.PointPair)">Add(PointPair)</see>
            method, since it does not require that a new PointPair instance be provided.
            If the buffer already contains a <see cref="T:Alt.GUI.ZedGraph.PointPair"/> at the head position,
            then the x, y, z, and tag values will be copied into the existing PointPair.
            Otherwise, a new PointPair instance must be created.
            In this way, each PointPair position in the rolling list will only be allocated one time.
            To truly be memory efficient, the <see cref="M:Alt.GUI.ZedGraph.RollingPointPairList.Remove"/>, <see cref="M:Alt.GUI.ZedGraph.RollingPointPairList.RemoveAt(System.Int32)"/>,
            and <see cref="M:Alt.GUI.ZedGraph.RollingPointPairList.Pop"/> methods should be avoided.  Also, the <paramref name="tag"/> property
            for this method should be null, since it is a reference type.
            </remarks>
            <param name="x">The X value</param>
            <param name="y">The Y value</param>
            <param name="z">The Z value</param>
            <param name="tag">The Tag value for the PointPair</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.RollingPointPairList.Add(System.Double,System.Double)">
            <summary>
            Add a set of values onto the head of the queue,
            overwriting old values if the buffer is full.
            </summary>
            <remarks>
            This method is much more efficient that the <see cref="M:Alt.GUI.ZedGraph.RollingPointPairList.Add(Alt.GUI.ZedGraph.PointPair)">Add(PointPair)</see>
            method, since it does not require that a new PointPair instance be provided.
            If the buffer already contains a <see cref="T:Alt.GUI.ZedGraph.PointPair"/> at the head position,
            then the x, y, z, and tag values will be copied into the existing PointPair.
            Otherwise, a new PointPair instance must be created.
            In this way, each PointPair position in the rolling list will only be allocated one time.
            To truly be memory efficient, the <see cref="M:Alt.GUI.ZedGraph.RollingPointPairList.Remove"/>, <see cref="M:Alt.GUI.ZedGraph.RollingPointPairList.RemoveAt(System.Int32)"/>,
            and <see cref="M:Alt.GUI.ZedGraph.RollingPointPairList.Pop"/> methods should be avoided.
            </remarks>
            <param name="x">The X value</param>
            <param name="y">The Y value</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.RollingPointPairList.Add(System.Double,System.Double,System.Object)">
            <summary>
            Add a set of values onto the head of the queue,
            overwriting old values if the buffer is full.
            </summary>
            <remarks>
            This method is much more efficient that the <see cref="M:Alt.GUI.ZedGraph.RollingPointPairList.Add(Alt.GUI.ZedGraph.PointPair)">Add(PointPair)</see>
            method, since it does not require that a new PointPair instance be provided.
            If the buffer already contains a <see cref="T:Alt.GUI.ZedGraph.PointPair"/> at the head position,
            then the x, y, z, and tag values will be copied into the existing PointPair.
            Otherwise, a new PointPair instance must be created.
            In this way, each PointPair position in the rolling list will only be allocated one time.
            To truly be memory efficient, the <see cref="M:Alt.GUI.ZedGraph.RollingPointPairList.Remove"/>, <see cref="M:Alt.GUI.ZedGraph.RollingPointPairList.RemoveAt(System.Int32)"/>,
            and <see cref="M:Alt.GUI.ZedGraph.RollingPointPairList.Pop"/> methods should be avoided.  Also, the <paramref name="tag"/> property
            for this method should be null, since it is a reference type.
            </remarks>
            <param name="x">The X value</param>
            <param name="y">The Y value</param>
            <param name="tag">The Tag value for the PointPair</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.RollingPointPairList.Add(System.Double,System.Double,System.Double)">
            <summary>
            Add a set of values onto the head of the queue,
            overwriting old values if the buffer is full.
            </summary>
            <remarks>
            This method is much more efficient that the <see cref="M:Alt.GUI.ZedGraph.RollingPointPairList.Add(Alt.GUI.ZedGraph.PointPair)">Add(PointPair)</see>
            method, since it does not require that a new PointPair instance be provided.
            If the buffer already contains a <see cref="T:Alt.GUI.ZedGraph.PointPair"/> at the head position,
            then the x, y, z, and tag values will be copied into the existing PointPair.
            Otherwise, a new PointPair instance must be created.
            In this way, each PointPair position in the rolling list will only be allocated one time.
            To truly be memory efficient, the <see cref="M:Alt.GUI.ZedGraph.RollingPointPairList.Remove"/>, <see cref="M:Alt.GUI.ZedGraph.RollingPointPairList.RemoveAt(System.Int32)"/>,
            and <see cref="M:Alt.GUI.ZedGraph.RollingPointPairList.Pop"/> methods should be avoided.
            </remarks>
            <param name="x">The X value</param>
            <param name="y">The Y value</param>
            <param name="z">The Z value</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.RollingPointPairList.Add(System.Double[],System.Double[])">
            <summary>
            Add a set of points to the <see cref="T:Alt.GUI.ZedGraph.RollingPointPairList"/>
            from two arrays of type double.
            If either array is null, then a set of ordinal values is automatically
            generated in its place (see <see cref="F:Alt.GUI.ZedGraph.AxisType.Ordinal"/>).
            If the arrays are of different size, then the larger array prevails and the
            smaller array is padded with <see cref="F:Alt.GUI.ZedGraph.PointPairBase.Missing"/> values.
            </summary>
            <param name="x">A double[] array of X values</param>
            <param name="y">A double[] array of Y values</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.RollingPointPairList.Add(System.Double[],System.Double[],System.Double[])">
            <summary>
            Add a set of points to the <see cref="T:Alt.GUI.ZedGraph.RollingPointPairList"/> from
            three arrays of type double.
            If the X or Y array is null, then a set of ordinal values is automatically
            generated in its place (see <see cref="F:Alt.GUI.ZedGraph.AxisType.Ordinal"/>.
            If the <see paramref="z"/> value
            is null, then it is set to zero.
            If the arrays are of different size, then the larger array prevails and the
            smaller array is padded with <see cref="F:Alt.GUI.ZedGraph.PointPairBase.Missing"/> values.
            </summary>
            <param name="x">A double[] array of X values</param>
            <param name="y">A double[] array of Y values</param>
            <param name="z">A double[] array of Z values</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.RollingPointPairList.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.RollingPointPairList.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="P:Alt.GUI.ZedGraph.RollingPointPairList.Capacity">
            <summary>
            Gets the capacity of the rolling buffer.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.RollingPointPairList.Count">
            <summary>
            Gets the count of items within the rolling buffer. Note that this may be less than
            the capacity.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.RollingPointPairList.IsEmpty">
            <summary>
            Gets a bolean that indicates if the buffer is empty.
            Alternatively you can test Count==0.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.RollingPointPairList.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Alt.GUI.ZedGraph.PointPair"/> at the specified index in the buffer.
            </summary>
            <remarks>
            Index must be within the current size of the buffer, e.g., the set
            method will not expand the buffer even if <see cref="P:Alt.GUI.ZedGraph.RollingPointPairList.Capacity"/> is available
            </remarks>
        </member>
        <member name="T:Alt.GUI.ZedGraph.PerfDataType">
            <summary>
            An enum used to specify the X or Y data type of interest -- see
            <see cref="F:Alt.GUI.ZedGraph.SampleMultiPointList.XData"/> and <see cref="F:Alt.GUI.ZedGraph.SampleMultiPointList.YData"/>.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PerfDataType.Time">
            <summary>
            The time (seconds) at which these data are measured
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PerfDataType.Distance">
            <summary>
            The distance traveled, meters
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PerfDataType.Velocity">
            <summary>
            The instantaneous velocity, meters per second
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PerfDataType.Acceleration">
            <summary>
            The instantaneous acceleration, meters per second squared
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.PerformanceData">
            <summary>
            Sample data structure containing a variety of data values, in this case the values
            are related in that they correspond to the same time value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PerformanceData.time">
            <summary>
            The time (seconds) at which these data are measured
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PerformanceData.distance">
            <summary>
            The distance traveled, meters
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PerformanceData.velocity">
            <summary>
            The instantaneous velocity, meters per second
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PerformanceData.acceleration">
            <summary>
            The instantaneous acceleration, meters per second squared
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.PerformanceData.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor that specifies each data value in the PerformanceData struct
            </summary>
            <param name="time">The time (seconds) at which these data are measured</param>
            <param name="distance">The distance traveled, meters</param>
            <param name="velocity">The instantaneous velocity, meters per second</param>
            <param name="acceleration">The instantaneous acceleration, meters per second squared</param>
        </member>
        <member name="P:Alt.GUI.ZedGraph.PerformanceData.Item(Alt.GUI.ZedGraph.PerfDataType)">
            <summary>
            Gets or sets the data value as specified by the <see cref="T:Alt.GUI.ZedGraph.PerfDataType"/> enum
            </summary>
            <param name="type">The required data value type</param>
        </member>
        <member name="T:Alt.GUI.ZedGraph.SampleMultiPointList">
            <summary>
            A sample class that holds an internal collection, and implements the
            <see cref="T:Alt.GUI.ZedGraph.IPointList"/> interface so that it can be used by ZedGraph as curve data.
            </summary>
            <remarks>
            This particular class efficiently implements the data storage so that the class
            can be cloned without duplicating the data points.  For example, you can create
            a <see cref="T:Alt.GUI.ZedGraph.SampleMultiPointList"/>, populate it with values, and set
            <see cref="F:Alt.GUI.ZedGraph.SampleMultiPointList.XData"/> = <see cref="F:Alt.GUI.ZedGraph.PerfDataType.Time"/> and
            <see cref="F:Alt.GUI.ZedGraph.SampleMultiPointList.YData"/> = <see cref="F:Alt.GUI.ZedGraph.PerfDataType.Distance"/>.
            You can then clone this <see cref="T:Alt.GUI.ZedGraph.SampleMultiPointList"/> to a new one, and set
            <see cref="F:Alt.GUI.ZedGraph.SampleMultiPointList.YData"/> = <see cref="F:Alt.GUI.ZedGraph.PerfDataType.Velocity"/>.
            Each of these <see cref="T:Alt.GUI.ZedGraph.SampleMultiPointList"/>'s can then be used as an
            <see cref="!:ZedGraph.GraphPane.AddCurve(string,IPointList,Color)"/> argument,
            thereby plotting a distance vs time curve and a velocity vs time curve.  There
            will still be only one copy of the data in memory.
            </remarks>
        </member>
        <member name="F:Alt.GUI.ZedGraph.SampleMultiPointList.DataCollection">
            <summary>
            This is where the data are stored.  Duplicating the <see cref="T:Alt.GUI.ZedGraph.SampleMultiPointList"/>
            copies the reference to this <see cref="T:Alt.Collections.ArrayList"/>, but does not actually duplicate
            the data.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.SampleMultiPointList.XData">
            <summary>
            Determines what X data will be returned by the indexer of this list.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.SampleMultiPointList.YData">
            <summary>
            Determines what Y data will be returned by the indexer of this list.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.SampleMultiPointList.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.SampleMultiPointList.#ctor(Alt.GUI.ZedGraph.SampleMultiPointList)">
            <summary>
            The Copy Constructor.  This method does NOT duplicate the data, it merely makes
            another "Window" into the same collection.  You can make multiple copies and
            set the <see cref="F:Alt.GUI.ZedGraph.SampleMultiPointList.XData"/> and/or <see cref="F:Alt.GUI.ZedGraph.SampleMultiPointList.YData"/> properties to different
            values to plot different data, while maintaining only one copy of the original values.
            </summary>
            <param name="rhs">The <see cref="T:Alt.GUI.ZedGraph.SampleMultiPointList"/> from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.SampleMultiPointList.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.SampleMultiPointList.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.SampleMultiPointList.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.SampleMultiPointList.Add(Alt.GUI.ZedGraph.PerformanceData)">
            <summary>
            Adds the specified <see cref="T:Alt.GUI.ZedGraph.PerformanceData"/> struct to the end of the collection.
            </summary>
            <param name="perfData">A <see cref="T:Alt.GUI.ZedGraph.PerformanceData"/> struct to be added</param>
            <returns>The ordinal position in the collection where the values were added</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.SampleMultiPointList.RemoveAt(System.Int32)">
            <summary>
            Remove the <see cref="T:Alt.GUI.ZedGraph.PerformanceData"/> struct from the list at the specified
            ordinal location.
            </summary>
            <param name="index">The ordinal location of the <see cref="T:Alt.GUI.ZedGraph.PerformanceData"/>
            struct to be removed</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.SampleMultiPointList.Insert(System.Int32,Alt.GUI.ZedGraph.PerformanceData)">
            <summary>
            Insert the specified <see cref="T:Alt.GUI.ZedGraph.PerformanceData"/> struct into the list at
            the specified ordinal location.
            </summary>
            <param name="index">The ordinal location at which to insert</param>
            <param name="perfData">The <see cref="T:Alt.GUI.ZedGraph.PerformanceData"/> struct to be inserted</param>
        </member>
        <member name="P:Alt.GUI.ZedGraph.SampleMultiPointList.Item(System.Int32)">
            <summary>
            Indexer to access the data.  This gets the appropriate data and converts to
            the <see cref="T:Alt.GUI.ZedGraph.PointPair"/> struct that is compatible with ZedGraph.  The
            actual data returned depends on the values of <see cref="F:Alt.GUI.ZedGraph.SampleMultiPointList.XData"/> and
            <see cref="F:Alt.GUI.ZedGraph.SampleMultiPointList.YData"/>.
            </summary>
            <param name="index">The ordinal position of the desired point in the list</param>
            <returns>A <see cref="T:Alt.GUI.ZedGraph.PointPair"/> corresponding to the specified ordinal data position</returns>
        </member>
        <member name="P:Alt.GUI.ZedGraph.SampleMultiPointList.Count">
            <summary>
            Gets the number of data points in the collection
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.SampleType">
            <summary>
            enumeration used to indicate which type of data will be plotted.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.SampleType.Time">
            <summary>
            Designates the "Time" property will be used
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.SampleType.Position">
            <summary>
            Designates the "Position" property will be used
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.SampleType.VelocityInst">
            <summary>
            Designates the Instantaneous Velocity property will be used
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.SampleType.TimeDiff">
            <summary>
            Designates the "Time since start" property will be used
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.SampleType.VelocityAvg">
            <summary>
            Designates the Average Velocity property will be used
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Sample">
            <summary>
            A simple storage class to maintain an individual sampling of data
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Sample.Time">
            <summary>
            The time of the sample
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Sample.Position">
            <summary>
            The position at sample time
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Sample.Velocity">
            <summary>
            The instantaneous velocity at sample time
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.SamplePointList">
            <summary>
            A collection class to maintain a set of samples
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.SamplePointList.XType">
            <summary>
            Determines what data type gets plotted for the X values
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.SamplePointList.YType">
            <summary>
            Determines what data type gets plotted for the Y values
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.SamplePointList.GetValue(Alt.GUI.ZedGraph.Sample,Alt.GUI.ZedGraph.SampleType)">
            <summary>
            Get the specified data type from the specified sample
            </summary>
            <param name="sample">The sample instance of interest</param>
            <param name="type">The data type to be extracted from the sample</param>
            <returns>A double value representing the requested data</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.SamplePointList.Add(Alt.GUI.ZedGraph.Sample)">
            <summary>
            Append a sample to the collection
            </summary>
            <param name="sample">The sample to append</param>
            <returns>The ordinal position at which the sample was added</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.SamplePointList.Clone">
            <summary>
            typesafe clone method
            </summary>
            <returns>A new cloned SamplePointList.  This returns a copy of the structure,
            but it does not duplicate the data (it just keeps a reference to the original)
            </returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.SamplePointList.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.SamplePointList.#ctor(Alt.GUI.ZedGraph.SamplePointList)">
            <summary>
            copy constructor -- this returns a copy of the structure,
            but it does not duplicate the data (it just keeps a reference to the original)
            </summary>
            <param name="rhs">The SamplePointList to be copied</param>
        </member>
        <member name="P:Alt.GUI.ZedGraph.SamplePointList.Item(System.Int32)">
            <summary>
            Indexer: get the Sample instance at the specified ordinal position in the list
            </summary>
            <param name="index">The ordinal position in the list of samples</param>
            <returns>Returns a <see cref="T:Alt.GUI.ZedGraph.PointPair"/> instance containing the
            data specified by <see cref="F:Alt.GUI.ZedGraph.SamplePointList.XType"/> and <see cref="F:Alt.GUI.ZedGraph.SamplePointList.YType"/>
            </returns>
        </member>
        <member name="P:Alt.GUI.ZedGraph.SamplePointList.Count">
            <summary>
            Gets the number of samples in the collection
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.ScaleState">
            <summary>
            A class that captures an <see cref="T:Alt.GUI.ZedGraph.Axis"/> scale range.
            </summary>
            <remarks>This structure is used by the <see cref="T:Alt.GUI.ZedGraph.ZoomState"/> class to store
            <see cref="T:Alt.GUI.ZedGraph.Axis"/> scale range settings in a collection for later retrieval.
            The class stores the <see cref="P:Alt.GUI.ZedGraph.Scale.Min"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.Max"/>,
            <see cref="P:Alt.GUI.ZedGraph.Scale.MinorStep"/>, and <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/> properties, along with
            the corresponding auto-scale settings: <see cref="P:Alt.GUI.ZedGraph.Scale.MinAuto"/>,
            <see cref="P:Alt.GUI.ZedGraph.Scale.MaxAuto"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.MinorStepAuto"/>,
            and <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStepAuto"/>.</remarks>
            <author> John Champion </author>
            <version> $Revision: 3.2 $ $Date: 2007-02-19 08:05:24 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ScaleState._min">
            <summary>
            The axis range data for <see cref="P:Alt.GUI.ZedGraph.Scale.Min"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.Max"/>,
            <see cref="P:Alt.GUI.ZedGraph.Scale.MinorStep"/>, and <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/>
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ScaleState._minorStep">
            <summary>
            The axis range data for <see cref="P:Alt.GUI.ZedGraph.Scale.Min"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.Max"/>,
            <see cref="P:Alt.GUI.ZedGraph.Scale.MinorStep"/>, and <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/>
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ScaleState._majorStep">
            <summary>
            The axis range data for <see cref="P:Alt.GUI.ZedGraph.Scale.Min"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.Max"/>,
            <see cref="P:Alt.GUI.ZedGraph.Scale.MinorStep"/>, and <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/>
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ScaleState._max">
            <summary>
            The axis range data for <see cref="P:Alt.GUI.ZedGraph.Scale.Min"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.Max"/>,
            <see cref="P:Alt.GUI.ZedGraph.Scale.MinorStep"/>, and <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/>
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ScaleState._minAuto">
            <summary>
            The status of <see cref="P:Alt.GUI.ZedGraph.Scale.MinAuto"/>,
            <see cref="P:Alt.GUI.ZedGraph.Scale.MaxAuto"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.MinorStepAuto"/>,
            and <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStepAuto"/>
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ScaleState._minorStepAuto">
            <summary>
            The status of <see cref="P:Alt.GUI.ZedGraph.Scale.MinAuto"/>,
            <see cref="P:Alt.GUI.ZedGraph.Scale.MaxAuto"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.MinorStepAuto"/>,
            and <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStepAuto"/>
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ScaleState._majorStepAuto">
            <summary>
            The status of <see cref="P:Alt.GUI.ZedGraph.Scale.MinAuto"/>,
            <see cref="P:Alt.GUI.ZedGraph.Scale.MaxAuto"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.MinorStepAuto"/>,
            and <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStepAuto"/>
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ScaleState._maxAuto">
            <summary>
            The status of <see cref="P:Alt.GUI.ZedGraph.Scale.MinAuto"/>,
            <see cref="P:Alt.GUI.ZedGraph.Scale.MaxAuto"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.MinorStepAuto"/>,
            and <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStepAuto"/>
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ScaleState._formatAuto">
            <summary>
            The status of <see cref="P:Alt.GUI.ZedGraph.Scale.MinAuto"/>,
            <see cref="P:Alt.GUI.ZedGraph.Scale.MaxAuto"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.MinorStepAuto"/>,
            and <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStepAuto"/>
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ScaleState._magAuto">
            <summary>
            The status of <see cref="P:Alt.GUI.ZedGraph.Scale.MinAuto"/>,
            <see cref="P:Alt.GUI.ZedGraph.Scale.MaxAuto"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.MinorStepAuto"/>,
            and <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStepAuto"/>
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ScaleState._minorUnit">
            <summary>
            The status of <see cref="P:Alt.GUI.ZedGraph.Scale.MajorUnit"/> and <see cref="P:Alt.GUI.ZedGraph.Scale.MinorUnit"/>
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ScaleState._majorUnit">
            <summary>
            The status of <see cref="P:Alt.GUI.ZedGraph.Scale.MajorUnit"/> and <see cref="P:Alt.GUI.ZedGraph.Scale.MinorUnit"/>
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ScaleState.#ctor(Alt.GUI.ZedGraph.Axis)">
            <summary>
            Construct a <see cref="T:Alt.GUI.ZedGraph.ScaleState"/> from the specified <see cref="T:Alt.GUI.ZedGraph.Axis"/>
            </summary>
            <param name="axis">The <see cref="T:Alt.GUI.ZedGraph.Axis"/> from which to collect the scale
            range settings.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ScaleState.#ctor(Alt.GUI.ZedGraph.ScaleState)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:Alt.GUI.ZedGraph.ScaleState"/> object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ScaleState.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.ScaleState.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ScaleState.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ScaleState.ApplyScale(Alt.GUI.ZedGraph.Axis)">
            <summary>
            Copy the properties from this <see cref="T:Alt.GUI.ZedGraph.ScaleState"/> out to the specified <see cref="T:Alt.GUI.ZedGraph.Axis"/>.
            </summary>
            <param name="axis">The <see cref="T:Alt.GUI.ZedGraph.Axis"/> reference to which the properties should be
            copied</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ScaleState.IsChanged(Alt.GUI.ZedGraph.Axis)">
            <summary>
            Determine if the state contained in this <see cref="T:Alt.GUI.ZedGraph.ScaleState"/> object is different from
            the state of the specified <see cref="T:Alt.GUI.ZedGraph.Axis"/>.
            </summary>
            <param name="axis">The <see cref="T:Alt.GUI.ZedGraph.Axis"/> object with which to compare states.</param>
            <returns>true if the states are different, false otherwise</returns>
        </member>
        <member name="T:Alt.GUI.ZedGraph.ScaleStateList">
            <summary>
            A collection class that maintains a list of <see cref="T:Alt.GUI.ZedGraph.ScaleState"/>
            objects, corresponding to the list of <see cref="T:Alt.GUI.ZedGraph.Axis"/> objects
            from <see cref="P:Alt.GUI.ZedGraph.GraphPane.YAxisList"/> or <see cref="P:Alt.GUI.ZedGraph.GraphPane.Y2AxisList"/>.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ScaleStateList.#ctor(Alt.GUI.ZedGraph.YAxisList)">
            <summary>
            Construct a new <see cref="T:Alt.GUI.ZedGraph.ScaleStateList"/> automatically from an
            existing <see cref="T:Alt.GUI.ZedGraph.YAxisList"/>.
            </summary>
            <param name="list">The <see cref="T:Alt.GUI.ZedGraph.YAxisList"/> (a list of Y axes),
            from which to retrieve the state and create the <see cref="T:Alt.GUI.ZedGraph.ScaleState"/>
            objects.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ScaleStateList.#ctor(Alt.GUI.ZedGraph.Y2AxisList)">
            <summary>
            Construct a new <see cref="T:Alt.GUI.ZedGraph.ScaleStateList"/> automatically from an
            existing <see cref="T:Alt.GUI.ZedGraph.Y2AxisList"/>.
            </summary>
            <param name="list">The <see cref="T:Alt.GUI.ZedGraph.Y2AxisList"/> (a list of Y axes),
            from which to retrieve the state and create the <see cref="T:Alt.GUI.ZedGraph.ScaleState"/>
            objects.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ScaleStateList.#ctor(Alt.GUI.ZedGraph.ScaleStateList)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:Alt.GUI.ZedGraph.ScaleStateList"/> object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ScaleStateList.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.ScaleStateList.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ScaleStateList.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ScaleStateList.IsChanged(Alt.GUI.ZedGraph.YAxisList)">
            <summary>
            Iterate through the list of <see cref="T:Alt.GUI.ZedGraph.ScaleState"/> objects, comparing them
            to the state of the specified <see cref="T:Alt.GUI.ZedGraph.YAxisList"/> <see cref="T:Alt.GUI.ZedGraph.Axis"/>
            objects.
            </summary>
            <param name="list">A <see cref="T:Alt.GUI.ZedGraph.YAxisList"/> object specifying a list of
            <see cref="T:Alt.GUI.ZedGraph.Axis"/> objects to be compared with this <see cref="T:Alt.GUI.ZedGraph.ScaleStateList"/>.
            </param>
            <returns>true if a difference is found, false otherwise</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ScaleStateList.IsChanged(Alt.GUI.ZedGraph.Y2AxisList)">
            <summary>
            Iterate through the list of <see cref="T:Alt.GUI.ZedGraph.ScaleState"/> objects, comparing them
            to the state of the specified <see cref="T:Alt.GUI.ZedGraph.Y2AxisList"/> <see cref="T:Alt.GUI.ZedGraph.Axis"/>
            objects.
            </summary>
            <param name="list">A <see cref="T:Alt.GUI.ZedGraph.Y2AxisList"/> object specifying a list of
            <see cref="T:Alt.GUI.ZedGraph.Axis"/> objects to be compared with this <see cref="T:Alt.GUI.ZedGraph.ScaleStateList"/>.
            </param>
            <returns>true if a difference is found, false otherwise</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ScaleStateList.ApplyScale(Alt.GUI.ZedGraph.YAxisList)">
            <summary>
            
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ScaleStateList.ApplyScale(Alt.GUI.ZedGraph.Y2AxisList)">
            <summary>
            
            </summary>
            <param name="list"></param>
        </member>
        <member name="T:Alt.GUI.ZedGraph.ScrollRange">
            <summary>
            A simple struct to store minimum and maximum <see cref="T:System.Double"/> type
            values for the scroll range
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ScrollRange.#ctor(System.Double,System.Double,System.Boolean)">
            <summary>
            Construct a <see cref="T:Alt.GUI.ZedGraph.ScrollRange"/> object given the specified data values.
            </summary>
            <param name="min">The minimum axis value limit for the scroll bar</param>
            <param name="max">The maximum axis value limit for the scroll bar</param>
            <param name="isScrollable">true to make this item scrollable, false otherwise</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ScrollRange.#ctor(System.Boolean)">
            <summary>
            Sets the scroll range to default values of zero, and sets the <see cref="P:Alt.GUI.ZedGraph.ScrollRange.IsScrollable"/>
            property as specified.
            </summary>
            <param name="isScrollable">true to make this item scrollable, false otherwise</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ScrollRange.#ctor(Alt.GUI.ZedGraph.ScrollRange)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:Alt.GUI.ZedGraph.ScrollRange"/> object from which to copy</param>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ScrollRange.IsScrollable">
            <summary>
            Gets or sets a property that determines if the <see cref="T:Alt.GUI.ZedGraph.Axis"/> corresponding to
            this <see cref="T:Alt.GUI.ZedGraph.ScrollRange"/> object can be scrolled.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ScrollRange.Min">
            <summary>
            The minimum axis value limit for the scroll bar.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ScrollRange.Max">
            <summary>
            The maximum axis value limit for the scroll bar.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.ScrollRangeList">
            <summary>
            A collection class containing a list of <see cref="T:Alt.GUI.ZedGraph.ScrollRange"/> objects.
            </summary>
            
            <author>John Champion</author>
            <version> $Revision: 3.3 $ $Date: 2006-06-24 20:26:43 $ </version>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ScrollRangeList.#ctor">
            <summary>
            Default constructor for the collection class.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ScrollRangeList.#ctor(Alt.GUI.ZedGraph.ScrollRangeList)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:Alt.GUI.ZedGraph.ScrollRangeList"/> object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ScrollRangeList.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.ScrollRangeList.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ScrollRangeList.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ScrollRangeList.Item(System.Int32)">
            <summary>
            Indexer to access the specified <see cref="T:Alt.GUI.ZedGraph.ScrollRange"/> object by
            its ordinal position in the list.
            </summary>
            <param name="index">The ordinal position (zero-based) of the
            <see cref="T:Alt.GUI.ZedGraph.ScrollRange"/> object to be accessed.</param>
            <value>A <see cref="T:Alt.GUI.ZedGraph.ScrollRange"/> object instance</value>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Selection">
            <summary>
            </summary>
            <remarks>
            </remarks>
            
            <author> John Champion and JCarpenter </author>
            <version> $Revision: 3.5 $ $Date: 2007-03-11 02:08:16 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Selection.Border">
            <summary>
            The <see cref="F:Alt.GUI.ZedGraph.Selection.Border"/> type to be used for drawing "selected"
            <see cref="T:Alt.GUI.ZedGraph.PieItem"/>, <see cref="T:Alt.GUI.ZedGraph.BarItem"/>, <see cref="T:Alt.GUI.ZedGraph.HiLowBarItem"/>,
            <see cref="T:Alt.GUI.ZedGraph.OHLCBarItem"/>, and <see cref="T:Alt.GUI.ZedGraph.JapaneseCandleStickItem"/> item types.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Selection.Fill">
            <summary>
            The <see cref="F:Alt.GUI.ZedGraph.Selection.Fill"/> type to be used for drawing "selected"
            <see cref="T:Alt.GUI.ZedGraph.PieItem"/>, <see cref="T:Alt.GUI.ZedGraph.BarItem"/>, <see cref="T:Alt.GUI.ZedGraph.HiLowBarItem"/>,
            and <see cref="T:Alt.GUI.ZedGraph.JapaneseCandleStickItem"/> item types.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Selection.Line">
            <summary>
            The <see cref="F:Alt.GUI.ZedGraph.Selection.Line"/> type to be used for drawing "selected"
            <see cref="T:Alt.GUI.ZedGraph.LineItem"/> and <see cref="T:Alt.GUI.ZedGraph.StickItem"/> types
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Selection.Symbol">
            <summary>
            The <see cref="F:Alt.GUI.ZedGraph.Selection.Symbol"/> type to be used for drawing "selected"
            <see cref="T:Alt.GUI.ZedGraph.LineItem"/> and <see cref="T:Alt.GUI.ZedGraph.ErrorBarItem"/> types.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Selection.Select(Alt.GUI.ZedGraph.MasterPane,Alt.GUI.ZedGraph.CurveItem)">
            <summary>
            Place a <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> in the selection list, removing all other
            items.
            </summary>
            <param name="master">The <see cref="T:Alt.GUI.ZedGraph.MasterPane"/> that is the "owner"
            of the <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>'s.</param>
            <param name="ci">The <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> to be added to the list.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Selection.Select(Alt.GUI.ZedGraph.MasterPane,Alt.GUI.ZedGraph.CurveList)">
            <summary>
            Place a list of <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>'s in the selection list, removing all other
            items.
            </summary>
            <param name="master">The <see cref="T:Alt.GUI.ZedGraph.MasterPane"/> that is the "owner"
            of the <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>'s.</param>
            <param name="ciList">The list of <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> to be added to the list.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Selection.AddToSelection(Alt.GUI.ZedGraph.MasterPane,Alt.GUI.ZedGraph.CurveItem)">
            <summary>
            Add a <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> to the selection list.
            </summary>
            <param name="master">The <see cref="T:Alt.GUI.ZedGraph.MasterPane"/> that is the "owner"
            of the <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>'s.</param>
            <param name="ci">The <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> to be added to the list.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Selection.AddToSelection(Alt.GUI.ZedGraph.MasterPane,Alt.GUI.ZedGraph.CurveList)">
            <summary>
            Add a list of <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>'s to the selection list.
            </summary>
            <param name="master">The <see cref="T:Alt.GUI.ZedGraph.MasterPane"/> that is the "owner"
            of the <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>'s.</param>
            <param name="ciList">The list of <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>'s to be added to the list.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Selection.RemoveFromSelection(Alt.GUI.ZedGraph.MasterPane,Alt.GUI.ZedGraph.CurveItem)">
            <summary>
            Remove the specified <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> from the selection list.
            </summary>
            <param name="master">The <see cref="T:Alt.GUI.ZedGraph.MasterPane"/> that is the "owner"
            of the <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>'s.</param>
            <param name="ci">The <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> to be removed from the list.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Selection.ClearSelection(Alt.GUI.ZedGraph.MasterPane)">
            <summary>
            Clear the selection list and trigger a <see cref="E:Alt.GUI.ZedGraph.Selection.SelectionChangedEvent"/>.
            </summary>
            <param name="master">The <see cref="T:Alt.GUI.ZedGraph.MasterPane"/> that "owns" the selection list.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Selection.ClearSelection(Alt.GUI.ZedGraph.MasterPane,System.Boolean)">
            <summary>
            Clear the selection list and optionally trigger a <see cref="E:Alt.GUI.ZedGraph.Selection.SelectionChangedEvent"/>.
            </summary>
            <param name="master">The <see cref="T:Alt.GUI.ZedGraph.MasterPane"/> that "owns" the selection list.</param>
            <param name="sendEvent">true to trigger a <see cref="E:Alt.GUI.ZedGraph.Selection.SelectionChangedEvent"/>,
            false otherwise.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Selection.UpdateSelection(Alt.GUI.ZedGraph.MasterPane)">
            <summary>
            Mark the <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>'s that are included in the selection list
            by setting the <see cref="P:Alt.GUI.ZedGraph.CurveItem.IsSelected"/> property to true.
            </summary>
            <param name="master">The <see cref="T:Alt.GUI.ZedGraph.MasterPane"/> that "owns" the selection list.</param>
        </member>
        <member name="E:Alt.GUI.ZedGraph.Selection.SelectionChangedEvent">
            <summary>
            Subscribe to this event to receive notice 
            that the list of selected CurveItems has changed
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.StickItem">
            <summary>
            Encapsulates a curve type that is displayed as a series of vertical "sticks",
            one at each defined point.
            </summary>
            <remarks>
            The sticks run from the zero value of the Y axis, to the Y point defined in each
            <see cref="T:Alt.GUI.ZedGraph.PointPair"/> of the <see cref="T:Alt.GUI.ZedGraph.IPointList"/> (see <see cref="P:Alt.GUI.ZedGraph.CurveItem.Points"/>).
            The properties of the sticks are defined in the <see cref="T:Alt.GUI.ZedGraph.Line"/> property.
            Normally, the <see cref="T:Alt.GUI.ZedGraph.Symbol"/> is not visible.  However, if you manually enable the
            <see cref="T:Alt.GUI.ZedGraph.Symbol"/> using the <see cref="P:Alt.GUI.ZedGraph.Symbol.IsVisible"/> property, the
            symbols will be drawn at the "Z" value from each <see cref="T:Alt.GUI.ZedGraph.PointPair"/> (see
            <see cref="F:Alt.GUI.ZedGraph.PointPair.Z"/>).
            </remarks>
            
            <author> John Champion </author>
            <version> $Revision: 1.7 $ $Date: 2007-01-25 07:56:09 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.StickItem.schema3">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.StickItem.IsZIncluded(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Gets a flag indicating if the Z data range should be included in the axis scaling calculations.
            </summary>
            <param name="pane">The parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> of this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>.
            </param>
            <value>true if the Z data are included, false otherwise</value>
        </member>
        <member name="M:Alt.GUI.ZedGraph.StickItem.IsXIndependent(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Gets a flag indicating if the X axis is the independent axis for this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>
            </summary>
            <param name="pane">The parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> of this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>.
            </param>
            <value>true if the X axis is independent, false otherwise</value>
        </member>
        <member name="M:Alt.GUI.ZedGraph.StickItem.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:Alt.GUI.ZedGraph.StickItem"/>, specifying only the legend <see cref="P:Alt.GUI.ZedGraph.CurveItem.Label"/>.
            </summary>
            <param name="label">The label that will appear in the legend.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.StickItem.#ctor(System.String,System.Double[],System.Double[],Alt.Sketch.Color,System.Single)">
            <summary>
            Create a new <see cref="T:Alt.GUI.ZedGraph.StickItem"/> using the specified properties.
            </summary>
            <param name="label">The label that will appear in the legend.</param>
            <param name="x">An array of double precision values that define
            the independent (X axis) values for this curve</param>
            <param name="y">An array of double precision values that define
            the dependent (Y axis) values for this curve</param>
            <param name="color">A <see cref="T:Alt.Sketch.Color"/> value that will be applied to
            the <see cref="T:Alt.GUI.ZedGraph.Line"/> and <see cref="T:Alt.GUI.ZedGraph.Symbol"/> properties.
            </param>
            <param name="lineWidth">The width (in points) to be used for the <see cref="T:Alt.GUI.ZedGraph.Line"/>.  This
            width is scaled based on <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/>.  Use a value of zero to
            hide the line (see <see cref="P:Alt.GUI.ZedGraph.LineBase.IsVisible"/>).</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.StickItem.#ctor(System.String,System.Double[],System.Double[],Alt.Sketch.Color)">
            <summary>
            Create a new <see cref="T:Alt.GUI.ZedGraph.StickItem"/> using the specified properties.
            </summary>
            <param name="label">The label that will appear in the legend.</param>
            <param name="x">An array of double precision values that define
            the independent (X axis) values for this curve</param>
            <param name="y">An array of double precision values that define
            the dependent (Y axis) values for this curve</param>
            <param name="color">A <see cref="T:Alt.Sketch.Color"/> value that will be applied to
            the <see cref="T:Alt.GUI.ZedGraph.Line"/> and <see cref="T:Alt.GUI.ZedGraph.Symbol"/> properties.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.StickItem.#ctor(System.String,Alt.GUI.ZedGraph.IPointList,Alt.Sketch.Color)">
            <summary>
            Create a new <see cref="T:Alt.GUI.ZedGraph.StickItem"/> using the specified properties.
            </summary>
            <param name="label">The label that will appear in the legend.</param>
            <param name="points">A <see cref="T:Alt.GUI.ZedGraph.IPointList"/> of double precision value pairs that define
            the X and Y values for this curve</param>
            <param name="color">A <see cref="T:Alt.Sketch.Color"/> value that will be applied to
            the <see cref="T:Alt.GUI.ZedGraph.Line"/> and <see cref="T:Alt.GUI.ZedGraph.Symbol"/> properties.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.StickItem.#ctor(System.String,Alt.GUI.ZedGraph.IPointList,Alt.Sketch.Color,System.Single)">
            <summary>
            Create a new <see cref="T:Alt.GUI.ZedGraph.StickItem"/> using the specified properties.
            </summary>
            <param name="label">The label that will appear in the legend.</param>
            <param name="points">A <see cref="T:Alt.GUI.ZedGraph.IPointList"/> of double precision value pairs that define
            the X and Y values for this curve</param>
            <param name="color">A <see cref="T:Alt.Sketch.Color"/> value that will be applied to
            the <see cref="T:Alt.GUI.ZedGraph.Line"/> and <see cref="T:Alt.GUI.ZedGraph.Symbol"/> properties.
            </param>
            <param name="lineWidth">The width (in points) to be used for the <see cref="T:Alt.GUI.ZedGraph.Line"/>.  This
            width is scaled based on <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/>.  Use a value of zero to
            hide the line (see <see cref="P:Alt.GUI.ZedGraph.LineBase.IsVisible"/>).</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.StickItem.#ctor(Alt.GUI.ZedGraph.StickItem)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:Alt.GUI.ZedGraph.StickItem"/> object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.StickItem.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.StickItem.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.StickItem.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.StickItem.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.StickItem.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="T:Alt.GUI.ZedGraph.StockPointList">
            <summary>
            A collection class containing a list of <see cref="T:Alt.GUI.ZedGraph.StockPt"/> objects
            that define the set of points to be displayed on the curve.
            </summary>
            
            <author> John Champion based on code by Jerry Vos</author>
            <version> $Revision: 3.4 $ $Date: 2007-02-18 05:51:54 $ </version>
        </member>
        <member name="M:Alt.GUI.ZedGraph.StockPointList.#ctor">
            <summary>
            Default constructor for the collection class
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.StockPointList.#ctor(Alt.GUI.ZedGraph.StockPointList)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The StockPointList from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.StockPointList.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.StockPointList.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.StockPointList.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.StockPointList.Add(Alt.GUI.ZedGraph.StockPt)">
            <summary>
            Add a <see cref="T:Alt.GUI.ZedGraph.StockPt"/> object to the collection at the end of the list.
            </summary>
            <param name="point">The <see cref="T:Alt.GUI.ZedGraph.StockPt"/> object to
            be added</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.StockPointList.Add(Alt.GUI.ZedGraph.PointPair)">
            <summary>
            Add a <see cref="T:Alt.GUI.ZedGraph.PointPair"/> object to the collection at the end of the list.
            </summary>
            <param name="point">The <see cref="T:Alt.GUI.ZedGraph.PointPair"/> object to be added</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.StockPointList.Add(System.Double,System.Double)">
            <summary>
            Add a <see cref="T:Alt.GUI.ZedGraph.StockPt"/> object to the collection at the end of the list using
            the specified values.  The unspecified values (low, open, close) are all set to
            <see cref="F:Alt.GUI.ZedGraph.PointPairBase.Missing"/>.
            </summary>
            <param name="date">An <see cref="T:Alt.GUI.ZedGraph.XDate"/> value</param>
            <param name="high">The high value for the day</param>
            <returns>The zero-based ordinal index where the point was added in the list.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.StockPointList.Add(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Add a single point to the <see cref="T:Alt.GUI.ZedGraph.PointPairList"/> from values of type double.
            </summary>
            <param name="date">An <see cref="T:Alt.GUI.ZedGraph.XDate"/> value</param>
            <param name="high">The high value for the day</param>
            <param name="low">The low value for the day</param>
            <param name="open">The opening value for the day</param>
            <param name="close">The closing value for the day</param>
            <param name="vol">The trading volume for the day</param>
            <returns>The zero-based ordinal index where the point was added in the list.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.StockPointList.GetAt(System.Int32)">
            <summary>
            Access the <see cref="T:Alt.GUI.ZedGraph.StockPt"/> at the specified ordinal index.
            </summary>
            <remarks>
            To be compatible with the <see cref="T:Alt.GUI.ZedGraph.IPointList"/> interface, the
            <see cref="T:Alt.GUI.ZedGraph.StockPointList"/> must implement an index that returns a
            <see cref="T:Alt.GUI.ZedGraph.PointPair"/> rather than a <see cref="T:Alt.GUI.ZedGraph.StockPt"/>.  This method
            will return the actual <see cref="T:Alt.GUI.ZedGraph.StockPt"/> at the specified position.
            </remarks>
            <param name="index">The ordinal position (zero-based) in the list</param>
            <returns>The specified <see cref="T:Alt.GUI.ZedGraph.StockPt"/>.
            </returns>
        </member>
        <member name="P:Alt.GUI.ZedGraph.StockPointList.Item(System.Int32)">
            <summary>
            Indexer to access the specified <see cref="T:Alt.GUI.ZedGraph.StockPt"/> object by
            its ordinal position in the list.
            </summary>
            <param name="index">The ordinal position (zero-based) of the
            <see cref="T:Alt.GUI.ZedGraph.StockPt"/> object to be accessed.</param>
            <value>A <see cref="T:Alt.GUI.ZedGraph.StockPt"/> object reference.</value>
        </member>
        <member name="T:Alt.GUI.ZedGraph.StockPt">
            <summary>
            The basic <see cref="T:Alt.GUI.ZedGraph.PointPair"/> class holds three data values (X, Y, Z).  This
            class extends the basic PointPair to contain five data values (X, Y, Z, Open, Close).
            </summary>
            <remarks>
            The values are remapped to <see cref="P:Alt.GUI.ZedGraph.StockPt.Date"/>, <see cref="P:Alt.GUI.ZedGraph.StockPt.High"/>,
            <see cref="P:Alt.GUI.ZedGraph.StockPt.Low"/>, <see cref="F:Alt.GUI.ZedGraph.StockPt.Open"/>, and <see cref="F:Alt.GUI.ZedGraph.StockPt.Close"/>.
            </remarks>
            
            <author> John Champion </author>
            <version> $Revision: 3.4 $ $Date: 2007-02-07 07:46:46 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.StockPt.schema3">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.StockPt.Open">
            <summary>
            This opening value
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.StockPt.Close">
            <summary>
            This closing value
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.StockPt.Vol">
            <summary>
            This daily trading volume
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.StockPt._colorValue">
            <summary>
            This is a user value that can be anything.  It is used to provide special 
            property-based coloration to the graph elements.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.StockPt.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.StockPt.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Construct a new StockPt from the specified data values
            </summary>
            <param name="date">The trading date (<see cref="T:Alt.GUI.ZedGraph.XDate"/>)</param>
            <param name="open">The opening stock price</param>
            <param name="close">The closing stock price</param>
            <param name="high">The daily high stock price</param>
            <param name="low">The daily low stock price</param>
            <param name="vol">The daily trading volume</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.StockPt.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Construct a new StockPt from the specified data values including a Tag property
            </summary>
            <param name="date">The trading date (<see cref="T:Alt.GUI.ZedGraph.XDate"/>)</param>
            <param name="open">The opening stock price</param>
            <param name="close">The closing stock price</param>
            <param name="high">The daily high stock price</param>
            <param name="low">The daily low stock price</param>
            <param name="vol">The daily trading volume</param>
            <param name="tag">The user-defined <see cref="F:Alt.GUI.ZedGraph.PointPair.Tag"/> property.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.StockPt.#ctor(Alt.GUI.ZedGraph.StockPt)">
            <summary>
            The StockPt copy constructor.
            </summary>
            <param name="rhs">The basis for the copy.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.StockPt.#ctor(Alt.GUI.ZedGraph.PointPair)">
            <summary>
            The StockPt copy constructor.
            </summary>
            <param name="rhs">The basis for the copy.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.StockPt.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.StockPt.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.StockPt.ToString(System.Boolean)">
            <summary>
            Format this StockPt value using the default format.  Example:  "( 12.345, -16.876 )".
            The two double values are formatted with the "g" format type.
            </summary>
            <param name="isShowAll">true to show all the value coordinates</param>
            <returns>A string representation of the <see cref="T:Alt.GUI.ZedGraph.StockPt"/>.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.StockPt.ToString(System.String,System.Boolean)">
            <summary>
            Format this PointPair value using a general format string.
            Example:  a format string of "e2" would give "( 1.23e+001, -1.69e+001 )".
            If <see paramref="isShowAll"/>
            is true, then the third all coordinates are shown.
            </summary>
            <param name="format">A format string that will be used to format each of
            the two double type values (see <see cref="M:System.Double.ToString"/>).</param>
            <returns>A string representation of the PointPair</returns>
            <param name="isShowAll">true to show all the value coordinates</param>
        </member>
        <member name="P:Alt.GUI.ZedGraph.StockPt.Date">
            <summary>
            Map the Date property to the X value
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.StockPt.High">
            <summary>
            Map the high property to the Y value
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.StockPt.Low">
            <summary>
            Map the low property to the Z value
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.StockPt.ColorValue">
            <summary>
            The ColorValue property.  This is used with the
            <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByColorValue"/> option.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.StockPt.IsInvalid5D">
            <summary>
            Readonly value that determines if either the Date, Close, Open, High, or Low
            coordinate in this StockPt is an invalid (not plotable) value.
            It is considered invalid if it is missing (equal to System.Double.Max),
            Infinity, or NaN.
            </summary>
            <returns>true if any value is invalid</returns>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Symbol">
            <summary>
            This class handles the drawing of the curve <see cref="T:Alt.GUI.ZedGraph.Symbol"/> objects.
            The symbols are the small shapes that appear over each defined point
            along the curve.
            </summary>
            
            <author> John Champion </author>
            <version> $Revision: 3.37 $ $Date: 2007-09-19 06:41:56 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Symbol.schema">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Symbol._size">
            <summary>
            Private field that stores the size of this
            <see cref="T:Alt.GUI.ZedGraph.Symbol"/> in points (1/72 inch).  Use the public
            property <see cref="P:Alt.GUI.ZedGraph.Symbol.Size"/> to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Symbol._type">
            <summary>
            Private field that stores the <see cref="T:Alt.GUI.ZedGraph.SymbolType"/> for this
            <see cref="T:Alt.GUI.ZedGraph.Symbol"/>.  Use the public
            property <see cref="P:Alt.GUI.ZedGraph.Symbol.Type"/> to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Symbol._isAntiAlias">
            <summary>
            private field that determines if the symbols are drawn using
            Anti-Aliasing capabilities from the <see cref="T:Alt.Sketch.Graphics"/> class.
            Use the public property <see cref="P:Alt.GUI.ZedGraph.Symbol.IsAntiAlias"/> to access
            this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Symbol._isVisible">
            <summary>
            Private field that stores the visibility of this
            <see cref="T:Alt.GUI.ZedGraph.Symbol"/>.  Use the public
            property <see cref="P:Alt.GUI.ZedGraph.Symbol.IsVisible"/> to access this value.  If this value is
            false, the symbols will not be shown (but the <see cref="T:Alt.GUI.ZedGraph.Line"/> may
            still be shown).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Symbol._fill">
            <summary>
            Private field that stores the <see cref="T:Alt.GUI.ZedGraph.Fill"/> data for this
            <see cref="T:Alt.GUI.ZedGraph.Symbol"/>.  Use the public property <see cref="P:Alt.GUI.ZedGraph.Symbol.Fill"/> to
            access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Symbol._border">
            <summary>
            Private field that stores the <see cref="T:Alt.GUI.ZedGraph.Border"/> data for this
            <see cref="T:Alt.GUI.ZedGraph.Symbol"/>.  Use the public property <see cref="P:Alt.GUI.ZedGraph.Symbol.Border"/> to
            access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Symbol._userSymbol">
            <summary>
            Private field that stores the user defined <see cref="T:Alt.Sketch.GraphicsPath"/> data for this
            <see cref="T:Alt.GUI.ZedGraph.Symbol"/>.  Use the public property <see cref="P:Alt.GUI.ZedGraph.Symbol.UserSymbol"/> to
            access this value.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Symbol.#ctor">
            <summary>
            Default constructor that sets all <see cref="T:Alt.GUI.ZedGraph.Symbol"/> properties to default
            values as defined in the <see cref="T:Alt.GUI.ZedGraph.Symbol.Default"/> class.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Symbol.#ctor(Alt.GUI.ZedGraph.SymbolType,Alt.Sketch.Color)">
            <summary>
            Default constructor that sets the <see cref="T:Alt.GUI.ZedGraph.SymbolType"/> and
            <see cref="T:Alt.Sketch.Color"/> as specified, and the remaining
            <see cref="T:Alt.GUI.ZedGraph.Symbol"/> properties to default
            values as defined in the <see cref="T:Alt.GUI.ZedGraph.Symbol.Default"/> class.
            </summary>
            <param name="type">A <see cref="T:Alt.GUI.ZedGraph.SymbolType"/> enum value
            indicating the shape of the symbol</param>
            <param name="color">A <see cref="T:Alt.Sketch.Color"/> value indicating
            the color of the symbol
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Symbol.#ctor(Alt.GUI.ZedGraph.Symbol)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The Symbol object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Symbol.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.Symbol.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Symbol.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Symbol.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Symbol.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Symbol.DrawSymbol(Alt.Sketch.Graphics,System.Int32,System.Int32,Alt.Sketch.GraphicsPath,Alt.Sketch.Pen,Alt.Sketch.Brush)">
            <summary>
            Draw the <see cref="T:Alt.GUI.ZedGraph.Symbol"/> to the specified <see cref="T:Alt.Sketch.Graphics"/> device
            at the specified location.  This routine draws a single symbol.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="x">The x position of the center of the symbol in
            pixel units</param>
            <param name="y">The y position of the center of the symbol in
            pixel units</param>
            <param name="path">A <see cref="T:Alt.Sketch.GraphicsPath"/> previously constructed by
            <see cref="M:Alt.GUI.ZedGraph.Symbol.MakePath(Alt.Sketch.Graphics,System.Double)"/> for this symbol</param>
            <param name="pen">A <see cref="T:Alt.Sketch.Pen"/> class representing the standard pen for this symbol</param>
            <param name="brush">A <see cref="T:Alt.Sketch.Brush"/> class representing a default solid brush for this symbol
            If this symbol uses a <see cref="T:Alt.Sketch.LinearGradientBrush"/>, it will be created on the fly for
            each point, since it has to be scaled to the individual point coordinates.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Symbol.DrawSymbol(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,System.Int32,System.Int32,System.Double,System.Boolean,Alt.GUI.ZedGraph.PointPair)">
            <summary>
            Draw the <see cref="T:Alt.GUI.ZedGraph.Symbol"/> to the specified <see cref="T:Alt.Sketch.Graphics"/> device
            at the specified location.  This routine draws a single symbol.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="x">The x position of the center of the symbol in
            pixel units</param>
            <param name="y">The y position of the center of the symbol in
            pixel units</param>
            <param name="scaleFactor">
            The scaling factor for the features of the graph based on the <see cref="P:Alt.GUI.ZedGraph.PaneBase.BaseDimension"/>.  This
            scaling factor is calculated by the <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method.  The scale factor
            represents a linear multiple to be applied to font sizes, symbol sizes, etc.
            </param>
            <param name="dataValue">The data value to be used for a value-based
            color gradient.  This is only applicable for <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByX"/>,
            <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByY"/> or <see cref="F:Alt.GUI.ZedGraph.FillType.GradientByZ"/>.</param>
            <param name="isSelected">Indicates that the <see cref="T:Alt.GUI.ZedGraph.Symbol"/> should be drawn
            with attributes from the <see cref="T:Alt.GUI.ZedGraph.Selection"/> class.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Symbol.MakePath(Alt.Sketch.Graphics,System.Double)">
            <summary>
            Create a <see cref="T:Alt.Sketch.GraphicsPath"/> struct for the current symbol based on the
            specified scaleFactor and assuming the symbol will be centered at position 0,0.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="scaleFactor">
            The scaling factor for the features of the graph based on the <see cref="P:Alt.GUI.ZedGraph.PaneBase.BaseDimension"/>.  This
            scaling factor is calculated by the <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method.  The scale factor
            represents a linear multiple to be applied to font sizes, symbol sizes, etc.</param>
            <returns>Returns the <see cref="T:Alt.Sketch.GraphicsPath"/> for the current symbol</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Symbol.Draw(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,Alt.GUI.ZedGraph.LineItem,System.Double,System.Boolean)">
            <summary>
            Draw this <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> to the specified <see cref="T:Alt.Sketch.Graphics"/>
            device as a symbol at each defined point.  The routine
            only draws the symbols; the lines are draw by the
            <see cref="M:Alt.GUI.ZedGraph.Line.DrawCurve(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,Alt.GUI.ZedGraph.CurveItem,System.Double)"/> method.  This method
            is normally only called by the Draw method of the
            <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> object
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="curve">A <see cref="T:Alt.GUI.ZedGraph.LineItem"/> representing this
            curve.</param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <param name="isSelected">Indicates that the <see cref="T:Alt.GUI.ZedGraph.Symbol"/> should be drawn
            with attributes from the <see cref="T:Alt.GUI.ZedGraph.Selection"/> class.
            </param>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Symbol.Size">
            <summary>
            Gets or sets the size of the <see cref="T:Alt.GUI.ZedGraph.Symbol"/>
            </summary>
            <value>Size in points (1/72 inch)</value>
            <seealso cref="F:Alt.GUI.ZedGraph.Symbol.Default.Size"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Symbol.Type">
            <summary>
            Gets or sets the type (shape) of the <see cref="T:Alt.GUI.ZedGraph.Symbol"/>
            </summary>
            <value>A <see cref="T:Alt.GUI.ZedGraph.SymbolType"/> enum value indicating the shape</value>
            <seealso cref="F:Alt.GUI.ZedGraph.Symbol.Default.Type"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Symbol.IsAntiAlias">
            <summary>
            Gets or sets a value that determines if the symbols are drawn using
            Anti-Aliasing capabilities from the <see cref="T:Alt.Sketch.Graphics"/> class.
            </summary>
            <remarks>
            If this value is set to true, then the <see cref="P:Alt.Sketch.Graphics.SmoothingMode"/>
            property will be set to <see cref="F:Alt.Sketch.SmoothingMode.HighQuality"/> only while
            this <see cref="T:Alt.GUI.ZedGraph.Symbol"/> is drawn.  A value of false will leave the value of
            <see cref="P:Alt.Sketch.Graphics.SmoothingMode"/> unchanged.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Symbol.IsVisible">
            <summary>
            Gets or sets a property that shows or hides the <see cref="T:Alt.GUI.ZedGraph.Symbol"/>.
            </summary>
            <value>true to show the symbol, false to hide it</value>
            <seealso cref="F:Alt.GUI.ZedGraph.Symbol.Default.IsVisible"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Symbol.Fill">
            <summary>
            Gets or sets the <see cref="T:Alt.GUI.ZedGraph.Fill"/> data for this
            <see cref="T:Alt.GUI.ZedGraph.Symbol"/>.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Symbol.Border">
            <summary>
            Gets or sets the <see cref="T:Alt.GUI.ZedGraph.Border"/> data for this
            <see cref="T:Alt.GUI.ZedGraph.Symbol"/>, which controls the border outline of the symbol.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Symbol.UserSymbol">
            <summary>
            Gets or sets the <see cref="T:Alt.Sketch.GraphicsPath"/> data for this
            <see cref="T:Alt.GUI.ZedGraph.Symbol"/>, describing the user-defined symbol type.
            </summary>
            <remarks>
            This value only applies if <see cref="P:Alt.GUI.ZedGraph.Symbol.Type">Symbol.Type</see>
            is <see cref="F:Alt.GUI.ZedGraph.SymbolType.UserDefined">SymbolType.UserDefined</see>
            </remarks>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Symbol.Default">
            <summary>
            A simple struct that defines the
            default property values for the <see cref="T:Alt.GUI.ZedGraph.Symbol"/> class.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Symbol.Default.Size">
            <summary>
            The default size for curve symbols (<see cref="P:Alt.GUI.ZedGraph.Symbol.Size"/> property),
            in units of points.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Symbol.Default.PenWidth">
            <summary>
            The default pen width to be used for drawing curve symbols
            (<see cref="P:Alt.GUI.ZedGraph.LineBase.Width"/> property).  Units are points.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Symbol.Default.FillColor">
            <summary>
            The default color for filling in this <see cref="T:Alt.GUI.ZedGraph.Symbol"/>
            (<see cref="P:Alt.GUI.ZedGraph.Fill.Color"/> property).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Symbol.Default.FillBrush">
            <summary>
            The default custom brush for filling in this <see cref="T:Alt.GUI.ZedGraph.Symbol"/>
            (<see cref="P:Alt.GUI.ZedGraph.Fill.Brush"/> property).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Symbol.Default.FillType">
            <summary>
            The default fill mode for the curve (<see cref="P:Alt.GUI.ZedGraph.Fill.Type"/> property).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Symbol.Default.Type">
            <summary>
            The default symbol type for curves (<see cref="P:Alt.GUI.ZedGraph.Symbol.Type"/> property).
            This is defined as a <see cref="T:Alt.GUI.ZedGraph.SymbolType"/> enumeration.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Symbol.Default.IsAntiAlias">
            <summary>
            The default value for the <see cref="P:Alt.GUI.ZedGraph.Symbol.IsAntiAlias"/>
            property.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Symbol.Default.IsVisible">
            <summary>
            The default display mode for symbols (<see cref="P:Alt.GUI.ZedGraph.Symbol.IsVisible"/> property).
            true to display symbols, false to hide them.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Symbol.Default.IsBorderVisible">
            <summary>
            The default for drawing frames around symbols (<see cref="P:Alt.GUI.ZedGraph.LineBase.IsVisible"/> property).
            true to display symbol frames, false to hide them.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Symbol.Default.BorderColor">
            <summary>
            The default color for drawing symbols (<see cref="P:Alt.GUI.ZedGraph.LineBase.Color"/> property).
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.TextObj">
            <summary>
            A class that represents a text object on the graph.  A list of
            <see cref="T:Alt.GUI.ZedGraph.GraphObj"/> objects is maintained by the
            <see cref="T:Alt.GUI.ZedGraph.GraphObjList"/> collection class.
            </summary>
            
            <author> John Champion </author>
            <version> $Revision: 3.4 $ $Date: 2007-01-25 07:56:09 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.TextObj.schema2">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.TextObj._text">
            <summary> Private field to store the actual text string for this
            <see cref="T:Alt.GUI.ZedGraph.TextObj"/>.  Use the public property <see cref="P:Alt.GUI.ZedGraph.TextObj.Text"/>
            to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.TextObj._fontSpec">
            <summary>
            Private field to store the <see cref="P:Alt.GUI.ZedGraph.TextObj.FontSpec"/> class used to render
            this <see cref="T:Alt.GUI.ZedGraph.TextObj"/>.  Use the public property <see cref="P:Alt.GUI.ZedGraph.TextObj.FontSpec"/>
            to access this class.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.TextObj._layoutArea">
            <summary>
            Private field holding the Size into which this <see cref="T:Alt.GUI.ZedGraph.TextObj"/>
            should be rendered. Use the public property <see cref="P:Alt.GUI.ZedGraph.TextObj.LayoutArea"/>
            to access this value.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.TextObj.#ctor(System.String,System.Double,System.Double)">
            <summary>
            Constructor that sets all <see cref="T:Alt.GUI.ZedGraph.TextObj"/> properties to default
            values as defined in the <see cref="T:Alt.GUI.ZedGraph.TextObj.Default"/> class.
            </summary>
            <param name="text">The text to be displayed.</param>
            <param name="x">The x position of the text.  The units
            of this position are specified by the
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/> property.  The text will be
            aligned to this position based on the <see cref="T:Alt.GUI.ZedGraph.AlignH"/>
            property.</param>
            <param name="y">The y position of the text.  The units
            of this position are specified by the
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/> property.  The text will be
            aligned to this position based on the
            <see cref="T:Alt.GUI.ZedGraph.AlignV"/> property.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.TextObj.#ctor(System.String,System.Double,System.Double,Alt.GUI.ZedGraph.CoordType)">
            <summary>
            Constructor that sets all <see cref="T:Alt.GUI.ZedGraph.TextObj"/> properties to default
            values as defined in the <see cref="T:Alt.GUI.ZedGraph.TextObj.Default"/> class.
            </summary>
            <param name="text">The text to be displayed.</param>
            <param name="x">The x position of the text.  The units
            of this position are specified by the
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/> property.  The text will be
            aligned to this position based on the <see cref="T:Alt.GUI.ZedGraph.AlignH"/>
            property.</param>
            <param name="y">The y position of the text.  The units
            of this position are specified by the
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/> property.  The text will be
            aligned to this position based on the
            <see cref="T:Alt.GUI.ZedGraph.AlignV"/> property.</param>
            <param name="coordType">The <see cref="T:Alt.GUI.ZedGraph.CoordType"/> enum value that
            indicates what type of coordinate system the x and y parameters are
            referenced to.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.TextObj.#ctor(System.String,System.Double,System.Double,Alt.GUI.ZedGraph.CoordType,Alt.GUI.ZedGraph.AlignH,Alt.GUI.ZedGraph.AlignV)">
            <summary>
            Constructor that sets all <see cref="T:Alt.GUI.ZedGraph.TextObj"/> properties to default
            values as defined in the <see cref="T:Alt.GUI.ZedGraph.TextObj.Default"/> class.
            </summary>
            <param name="text">The text to be displayed.</param>
            <param name="x">The x position of the text.  The units
            of this position are specified by the
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/> property.  The text will be
            aligned to this position based on the <see cref="T:Alt.GUI.ZedGraph.AlignH"/>
            property.</param>
            <param name="y">The y position of the text.  The units
            of this position are specified by the
            <see cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/> property.  The text will be
            aligned to this position based on the
            <see cref="T:Alt.GUI.ZedGraph.AlignV"/> property.</param>
            <param name="coordType">The <see cref="T:Alt.GUI.ZedGraph.CoordType"/> enum value that
            indicates what type of coordinate system the x and y parameters are
            referenced to.</param>
            <param name="alignH">The <see cref="T:Alt.GUI.ZedGraph.AlignH"/> enum that specifies
            the horizontal alignment of the object with respect to the (x,y) location</param>
            <param name="alignV">The <see cref="T:Alt.GUI.ZedGraph.AlignV"/> enum that specifies
            the vertical alignment of the object with respect to the (x,y) location</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.TextObj.#ctor">
            <summary>
            Parameterless constructor that initializes a new <see cref="T:Alt.GUI.ZedGraph.TextObj"/>.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.TextObj.#ctor(Alt.GUI.ZedGraph.TextObj)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:Alt.GUI.ZedGraph.TextObj"/> object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.TextObj.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.TextObj.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.TextObj.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.TextObj.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.TextObj.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.TextObj.Draw(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.PaneBase,System.Double)">
            <summary>
            Render this <see cref="T:Alt.GUI.ZedGraph.TextObj"/> object to the specified <see cref="T:Alt.Sketch.Graphics"/> device
            This method is normally only called by the Draw method
            of the parent <see cref="T:Alt.GUI.ZedGraph.GraphObjList"/> collection object.
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.PaneBase"/> object that is the parent or
            owner of this object.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.TextObj.PointInBox(Alt.Sketch.Point,Alt.GUI.ZedGraph.PaneBase,Alt.Sketch.Graphics,System.Double)">
            <summary>
            Determine if the specified screen point lies inside the bounding box of this
            <see cref="T:Alt.GUI.ZedGraph.TextObj"/>.  This method takes into account rotation and alignment
            parameters of the text, as specified in the <see cref="P:Alt.GUI.ZedGraph.TextObj.FontSpec"/>.
            </summary>
            <param name="pt">The screen point, in pixels</param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.PaneBase"/> object that is the parent or
            owner of this object.
            </param>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <returns>true if the point lies in the bounding box, false otherwise</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.TextObj.GetCoords(Alt.GUI.ZedGraph.PaneBase,Alt.Sketch.Graphics,System.Double,System.String@,System.String@)">
            <summary>
            Determines the shape type and Coords values for this GraphObj
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.TextObj.LayoutArea">
            <summary>
            
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.TextObj.Text">
            <summary>
            The <see cref="T:Alt.GUI.ZedGraph.TextObj"/> to be displayed.  This text can be multi-line by
            including newline ('\n') characters between the lines.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.TextObj.FontSpec">
            <summary>
            Gets a reference to the <see cref="P:Alt.GUI.ZedGraph.TextObj.FontSpec"/> class used to render
            this <see cref="T:Alt.GUI.ZedGraph.TextObj"/>
            </summary>
            <seealso cref="F:Alt.GUI.ZedGraph.TextObj.Default.FontColor"/>
            <seealso cref="F:Alt.GUI.ZedGraph.TextObj.Default.FontBold"/>
            <seealso cref="F:Alt.GUI.ZedGraph.TextObj.Default.FontItalic"/>
            <seealso cref="F:Alt.GUI.ZedGraph.TextObj.Default.FontUnderline"/>
            <seealso cref="F:Alt.GUI.ZedGraph.TextObj.Default.FontFamily"/>
            <seealso cref="F:Alt.GUI.ZedGraph.TextObj.Default.FontSize"/>
        </member>
        <member name="T:Alt.GUI.ZedGraph.TextObj.Default">
            <summary>
            A simple struct that defines the
            default property values for the <see cref="T:Alt.GUI.ZedGraph.TextObj"/> class.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.TextObj.Default.FontFamily">
            <summary>
            The default font family for the <see cref="T:Alt.GUI.ZedGraph.TextObj"/> text
            (<see cref="P:Alt.GUI.ZedGraph.FontSpec.Family"/> property).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.TextObj.Default.FontSize">
            <summary>
            The default font size for the <see cref="T:Alt.GUI.ZedGraph.TextObj"/> text
            (<see cref="P:Alt.GUI.ZedGraph.FontSpec.Size"/> property).  Units are
            in points (1/72 inch).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.TextObj.Default.FontColor">
            <summary>
            The default font color for the <see cref="T:Alt.GUI.ZedGraph.TextObj"/> text
            (<see cref="P:Alt.GUI.ZedGraph.FontSpec.FontColor"/> property).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.TextObj.Default.FontBold">
            <summary>
            The default font bold mode for the <see cref="T:Alt.GUI.ZedGraph.TextObj"/> text
            (<see cref="P:Alt.GUI.ZedGraph.FontSpec.IsBold"/> property). true
            for a bold typeface, false otherwise.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.TextObj.Default.FontUnderline">
            <summary>
            The default font underline mode for the <see cref="T:Alt.GUI.ZedGraph.TextObj"/> text
            (<see cref="P:Alt.GUI.ZedGraph.FontSpec.IsUnderline"/> property). true
            for an underlined typeface, false otherwise.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.TextObj.Default.FontItalic">
            <summary>
            The default font italic mode for the <see cref="T:Alt.GUI.ZedGraph.TextObj"/> text
            (<see cref="P:Alt.GUI.ZedGraph.FontSpec.IsItalic"/> property). true
            for an italic typeface, false otherwise.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.TextScale">
            <summary>
            The TextScale class inherits from the <see cref="T:Alt.GUI.ZedGraph.Scale"/> class, and implements
            the features specific to <see cref="F:Alt.GUI.ZedGraph.AxisType.Text"/>.
            </summary>
            <remarks>
            TextScale is an ordinal axis with user-defined text labels.  An ordinal axis means that
            all data points are evenly spaced at integral values, and the actual coordinate values
            for points corresponding to that axis are ignored.  That is, if the X axis is an
            ordinal type, then all X values associated with the curves are ignored.
            </remarks>
            
            <author> John Champion  </author>
            <version> $Revision: 1.8 $ $Date: 2006-08-25 05:19:09 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.TextScale.schema2">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.TextScale.#ctor(Alt.GUI.ZedGraph.Scale,Alt.GUI.ZedGraph.Axis)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:Alt.GUI.ZedGraph.TextScale"/> object from which to copy</param>
            <param name="owner">The <see cref="T:Alt.GUI.ZedGraph.Axis"/> object that will own the
            new instance of <see cref="T:Alt.GUI.ZedGraph.TextScale"/></param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.TextScale.Clone(Alt.GUI.ZedGraph.Axis)">
            <summary>
            Create a new clone of the current item, with a new owner assignment
            </summary>
            <param name="owner">The new <see cref="T:Alt.GUI.ZedGraph.Axis"/> instance that will be
            the owner of the new Scale</param>
            <returns>A new <see cref="T:Alt.GUI.ZedGraph.Scale"/> clone.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.TextScale.CalcMinorStart(System.Double)">
            <summary>
            Internal routine to determine the ordinals of the first minor tic mark
            </summary>
            <param name="baseVal">
            The value of the first major tic for the axis.
            </param>
            <returns>
            The ordinal position of the first minor tic, relative to the first major tic.
            This value can be negative (e.g., -3 means the first minor tic is 3 minor step
            increments before the first major tic.
            </returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.TextScale.CalcBaseTic">
            <summary>
            Determine the value for the first major tic.
            </summary>
            <remarks>
            This is done by finding the first possible value that is an integral multiple of
            the step size, taking into account the date/time units if appropriate.
            This method properly accounts for <see cref="P:Alt.GUI.ZedGraph.Scale.IsLog"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.IsText"/>,
            and other axis format settings.
            </remarks>
            <returns>
            First major tic value (floating point double).
            </returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.TextScale.CalcNumTics">
            <summary>
            Internal routine to determine the ordinals of the first and last major axis label.
            </summary>
            <returns>
            This is the total number of major tics for this axis.
            </returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.TextScale.PickScale(Alt.GUI.ZedGraph.GraphPane,Alt.Sketch.Graphics,System.Double)">
            <summary>
            Select a reasonable text axis scale given a range of data values.
            </summary>
            <remarks>
            This method only applies to <see cref="F:Alt.GUI.ZedGraph.AxisType.Text"/> type axes, and it
            is called by the general <see cref="M:Alt.GUI.ZedGraph.TextScale.PickScale(Alt.GUI.ZedGraph.GraphPane,Alt.Sketch.Graphics,System.Double)"/> method.  This is an ordinal
            type, such that the labeled values start at 1.0 and increment by 1.0 for
            each successive label.  The maximum number of labels on the graph is
            determined by <see cref="F:Alt.GUI.ZedGraph.Scale.Default.MaxTextLabels"/>.  If necessary, this method will
            set the <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/> value to greater than 1.0 in order to keep the total
            labels displayed below <see cref="F:Alt.GUI.ZedGraph.Scale.Default.MaxTextLabels"/>.  For example, a
            <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/> size of 2.0 would only display every other label on the
            axis.  The <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/> value calculated by this routine is always
            an integral value.  This
            method honors the <see cref="P:Alt.GUI.ZedGraph.Scale.MinAuto"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.MaxAuto"/>,
            and <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStepAuto"/> autorange settings.
            In the event that any of the autorange settings are false, the
            corresponding <see cref="P:Alt.GUI.ZedGraph.Scale.Min"/>, <see cref="P:Alt.GUI.ZedGraph.Scale.Max"/>, or <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/>
            setting is explicitly honored, and the remaining autorange settings (if any) will
            be calculated to accomodate the non-autoranged values.
            <para>On Exit:</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.Min"/> is set to scale minimum (if <see cref="P:Alt.GUI.ZedGraph.Scale.MinAuto"/> = true)</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.Max"/> is set to scale maximum (if <see cref="P:Alt.GUI.ZedGraph.Scale.MaxAuto"/> = true)</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.MajorStep"/> is set to scale step size (if <see cref="P:Alt.GUI.ZedGraph.Scale.MajorStepAuto"/> = true)</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.MinorStep"/> is set to scale minor step size (if <see cref="P:Alt.GUI.ZedGraph.Scale.MinorStepAuto"/> = true)</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.Mag"/> is set to a magnitude multiplier according to the data</para>
            <para><see cref="P:Alt.GUI.ZedGraph.Scale.Format"/> is set to the display format for the values (this controls the
            number of decimal places, whether there are thousands separators, currency types, etc.)</para>
            </remarks>
            <param name="pane">A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object
            associated with this <see cref="T:Alt.GUI.ZedGraph.Axis"/></param>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
            <seealso cref="M:Alt.GUI.ZedGraph.TextScale.PickScale(Alt.GUI.ZedGraph.GraphPane,Alt.Sketch.Graphics,System.Double)"/>
            <seealso cref="F:Alt.GUI.ZedGraph.AxisType.Text"/>
        </member>
        <member name="M:Alt.GUI.ZedGraph.TextScale.MakeLabel(Alt.GUI.ZedGraph.GraphPane,System.Int32,System.Double)">
            <summary>
            Make a value label for an <see cref="F:Alt.GUI.ZedGraph.AxisType.Text"/> <see cref="T:Alt.GUI.ZedGraph.Axis"/>.
            </summary>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="index">
            The zero-based, ordinal index of the label to be generated.  For example, a value of 2 would
            cause the third value label on the axis to be generated.
            </param>
            <param name="dVal">
            The numeric value associated with the label.  This value is ignored for log (<see cref="P:Alt.GUI.ZedGraph.Scale.IsLog"/>)
            and text (<see cref="P:Alt.GUI.ZedGraph.Scale.IsText"/>) type axes.
            </param>
            <returns>The resulting value label as a <see cref="T:System.String"/></returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.TextScale.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.TextScale.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="T:Alt.GUI.ZedGraph.AxisType">
            <summary>
            Enumeration type for the various axis types that are available
            </summary>
            <seealso cref="P:Alt.GUI.ZedGraph.Axis.Type"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.AxisType.Linear">
            <summary> An ordinary, cartesian axis </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.AxisType.Log">
            <summary> A base 10 log axis </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.AxisType.Date">
            <summary> A cartesian axis with calendar dates or times </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.AxisType.Text">
            <summary> An ordinal axis with user-defined text labels.  An ordinal axis means that
            all data points are evenly spaced at integral values, and the actual coordinate values
            for points corresponding to that axis are ignored.  That is, if the X axis is an
            ordinal type, then all X values associated with the curves are ignored.</summary>
            <seealso cref="F:Alt.GUI.ZedGraph.AxisType.Ordinal"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.IsText"/>
            <seealso cref="F:Alt.GUI.ZedGraph.Scale.Default.MaxTextLabels"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.AxisType.Ordinal">
            <summary> An ordinal axis with regular numeric labels.  An ordinal axis means that
            all data points are evenly spaced at integral values, and the actual coordinate values
            for points corresponding to that axis are ignored.  That is, if the X axis is an
            ordinal type, then all X values associated with the curves are ignored. </summary>
            <seealso cref="F:Alt.GUI.ZedGraph.AxisType.Text"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.IsOrdinal"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.AxisType.DateAsOrdinal">
            <summary> An ordinal axis that will have labels formatted with ordinal values corresponding
            to the number of values in each <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>.
            </summary>
            <remarks>
            The <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> data points will be evenly-spaced at ordinal locations, and the
            actual data values are ignored. </remarks>
            <seealso cref="F:Alt.GUI.ZedGraph.AxisType.Text"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.IsOrdinal"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.AxisType.LinearAsOrdinal">
            <summary> An ordinal axis that will have labels formatted with values from the actual data
            values of the first <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> in the <see cref="T:Alt.GUI.ZedGraph.CurveList"/>.
            </summary>
            <remarks>
            Although the tics are labeled with real data values, the actual points will be
            evenly-spaced in spite of the data values.  For example, if the X values of the first curve
            are 1, 5, and 100, then the tic labels will show 1, 5, and 100, but they will be equal
            distance from each other. </remarks>
            <seealso cref="F:Alt.GUI.ZedGraph.AxisType.Text"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.IsOrdinal"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.AxisType.Exponent">
            <summary> An exponential axis </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.FillType">
            <summary>
            Enumeration type for the various types of fills that can be used with <see cref="T:Alt.GUI.ZedGraph.Bar"/>
            charts.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.FillType.None">
            <summary> No fill </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.FillType.Solid">
            <summary> A solid fill using <see cref="!:System.Drawing.SolidColorBrush"/> </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.FillType.Brush">
            <summary> A custom fill using either <see cref="!:LinearGradientBrush"/> or
            <see cref="!:TextureBrush"/></summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.FillType.GradientByX">
            <summary>
            Fill with a single solid color based on the X value of the data.</summary>
            <remarks>The X value is
            used to determine the color value based on a gradient brush, and using a data range
            of <see cref="P:Alt.GUI.ZedGraph.Fill.RangeMin"/> and <see cref="P:Alt.GUI.ZedGraph.Fill.RangeMax"/>.  You can create a multicolor
            range by initializing the <see cref="T:Alt.GUI.ZedGraph.Fill"/> class with your own custom
            <see cref="F:Alt.GUI.ZedGraph.FillType.Brush"/> object based on a <see cref="!:ColorBlend"/>.  In cases where a
            data value makes no sense (<see cref="P:Alt.GUI.ZedGraph.PaneBase.Fill"/>, <see cref="P:Alt.GUI.ZedGraph.Legend.Fill"/>,
            etc.), a default value of 50% of the range is assumed.  The default range is 0 to 1.
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.Fill.RangeMin"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Fill.RangeMax"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Fill.RangeDefault"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.FillType.GradientByY">
            <summary>
            Fill with a single solid color based on the Z value of the data.</summary>
            <remarks>The Z value is
            used to determine the color value based on a gradient brush, and using a data range
            of <see cref="P:Alt.GUI.ZedGraph.Fill.RangeMin"/> and <see cref="P:Alt.GUI.ZedGraph.Fill.RangeMax"/>.  You can create a multicolor
            range by initializing the <see cref="T:Alt.GUI.ZedGraph.Fill"/> class with your own custom
            <see cref="F:Alt.GUI.ZedGraph.FillType.Brush"/> object based on a <see cref="!:ColorBlend"/>.  In cases where a
            data value makes no sense (<see cref="P:Alt.GUI.ZedGraph.PaneBase.Fill"/>, <see cref="P:Alt.GUI.ZedGraph.Legend.Fill"/>,
            etc.), a default value of 50% of the range is assumed.  The default range is 0 to 1.
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.Fill.RangeMin"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Fill.RangeMax"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Fill.RangeDefault"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.FillType.GradientByZ">
            <summary>
            Fill with a single solid color based on the Z value of the data.</summary>
            <remarks>The Z value is
            used to determine the color value based on a gradient brush, and using a data range
            of <see cref="P:Alt.GUI.ZedGraph.Fill.RangeMin"/> and <see cref="P:Alt.GUI.ZedGraph.Fill.RangeMax"/>.  You can create a multicolor
            range by initializing the <see cref="T:Alt.GUI.ZedGraph.Fill"/> class with your own custom
            <see cref="F:Alt.GUI.ZedGraph.FillType.Brush"/> object based on a <see cref="!:ColorBlend"/>.  In cases where a
            data value makes no sense (<see cref="P:Alt.GUI.ZedGraph.PaneBase.Fill"/>, <see cref="P:Alt.GUI.ZedGraph.Legend.Fill"/>,
            etc.), a default value of 50% of the range is assumed.  The default range is 0 to 1.
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.Fill.RangeMin"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Fill.RangeMax"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Fill.RangeDefault"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.FillType.GradientByColorValue">
            <summary>
            Fill with a single solid color based on the "ColorValue" property of the data.</summary>
            <remarks>The "ColorValue" property is
            used to determine the color value based on a gradient brush, and using a data range
            of <see cref="P:Alt.GUI.ZedGraph.Fill.RangeMin"/> and <see cref="P:Alt.GUI.ZedGraph.Fill.RangeMax"/>.  You can create a multicolor
            range by initializing the <see cref="T:Alt.GUI.ZedGraph.Fill"/> class with your own custom
            <see cref="F:Alt.GUI.ZedGraph.FillType.Brush"/> object based on a <see cref="!:ColorBlend"/>.  In cases where a
            data value makes no sense (<see cref="P:Alt.GUI.ZedGraph.PaneBase.Fill"/>, <see cref="P:Alt.GUI.ZedGraph.Legend.Fill"/>,
            etc.), a default value of 50% of the range is assumed.  The default range is 0 to 1.
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.Fill.RangeMin"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Fill.RangeMax"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Fill.RangeDefault"/>
        </member>
        <member name="T:Alt.GUI.ZedGraph.DateUnit">
            <summary>
            Enumeration type for the various axis date and time unit types that are available
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.DateUnit.Year">
            <summary> Yearly units <see cref="P:Alt.GUI.ZedGraph.Scale.MajorUnit"/> and <see cref="P:Alt.GUI.ZedGraph.Scale.MinorUnit"/>
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.DateUnit.Month">
            <summary> Monthly units <see cref="P:Alt.GUI.ZedGraph.Scale.MajorUnit"/> and <see cref="P:Alt.GUI.ZedGraph.Scale.MinorUnit"/>
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.DateUnit.Day">
            <summary> Daily units <see cref="P:Alt.GUI.ZedGraph.Scale.MajorUnit"/> and <see cref="P:Alt.GUI.ZedGraph.Scale.MinorUnit"/>
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.DateUnit.Hour">
            <summary> Hourly units <see cref="P:Alt.GUI.ZedGraph.Scale.MajorUnit"/> and <see cref="P:Alt.GUI.ZedGraph.Scale.MinorUnit"/>
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.DateUnit.Minute">
            <summary> Minute units <see cref="P:Alt.GUI.ZedGraph.Scale.MajorUnit"/> and <see cref="P:Alt.GUI.ZedGraph.Scale.MinorUnit"/>
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.DateUnit.Second">
            <summary> Second units <see cref="P:Alt.GUI.ZedGraph.Scale.MajorUnit"/> and <see cref="P:Alt.GUI.ZedGraph.Scale.MinorUnit"/>
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.DateUnit.Millisecond">
            <summary> Millisecond units <see cref="P:Alt.GUI.ZedGraph.Scale.MajorUnit"/> and <see cref="P:Alt.GUI.ZedGraph.Scale.MinorUnit"/>
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.SymbolType">
            <summary>
            Enumeration type for the various symbol shapes that are available
            </summary>
            <seealso cref="P:Alt.GUI.ZedGraph.Symbol.Fill"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.SymbolType.Square">
            <summary> Square-shaped <see cref="T:Alt.GUI.ZedGraph.Symbol"/> </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.SymbolType.Diamond">
            <summary> Rhombus-shaped <see cref="T:Alt.GUI.ZedGraph.Symbol"/> </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.SymbolType.Triangle">
            <summary> Equilateral triangle <see cref="T:Alt.GUI.ZedGraph.Symbol"/> </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.SymbolType.Circle">
            <summary> Uniform circle <see cref="T:Alt.GUI.ZedGraph.Symbol"/> </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.SymbolType.XCross">
            <summary> "X" shaped <see cref="T:Alt.GUI.ZedGraph.Symbol"/>.  This symbol cannot
            be filled since it has no outline. </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.SymbolType.Plus">
            <summary> "+" shaped <see cref="T:Alt.GUI.ZedGraph.Symbol"/>.  This symbol cannot
            be filled since it has no outline. </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.SymbolType.Star">
            <summary> Asterisk-shaped <see cref="T:Alt.GUI.ZedGraph.Symbol"/>.  This symbol
            cannot be filled since it has no outline. </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.SymbolType.TriangleDown">
            <summary> Unilateral triangle <see cref="T:Alt.GUI.ZedGraph.Symbol"/>, pointing
            down. </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.SymbolType.HDash">
            <summary>
            Horizontal dash <see cref="T:Alt.GUI.ZedGraph.Symbol"/>.  This symbol cannot be
            filled since it has no outline.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.SymbolType.VDash">
            <summary>
            Vertical dash <see cref="T:Alt.GUI.ZedGraph.Symbol"/>.  This symbol cannot be
            filled since it has no outline.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.SymbolType.UserDefined">
            <summary> A symbol defined by the <see cref="P:Alt.GUI.ZedGraph.Symbol.UserSymbol"/> propery.
            If no symbol is defined, the <see cref="F:Alt.GUI.ZedGraph.Symbol.Default.Type"/>. symbol will
            be used.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.SymbolType.Default">
            <summary> A Default symbol type (the symbol type will be obtained
            from <see cref="F:Alt.GUI.ZedGraph.Symbol.Default.Type"/>. </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.SymbolType.None">
            <summary> No symbol is shown (this is equivalent to using
            <see cref="P:Alt.GUI.ZedGraph.Symbol.IsVisible"/> = false.</summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.LegendPos">
            <summary>
            Enumeration type that defines the possible legend locations
            </summary>
            <seealso cref="P:Alt.GUI.ZedGraph.Legend.Position"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.LegendPos.Top">
            <summary>
            Locate the <see cref="T:Alt.GUI.ZedGraph.Legend"/> above the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.LegendPos.Left">
            <summary>
            Locate the <see cref="T:Alt.GUI.ZedGraph.Legend"/> on the left side of the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.LegendPos.Right">
            <summary>
            Locate the <see cref="T:Alt.GUI.ZedGraph.Legend"/> on the right side of the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.LegendPos.Bottom">
            <summary>
            Locate the <see cref="T:Alt.GUI.ZedGraph.Legend"/> below the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.LegendPos.InsideTopLeft">
            <summary>
            Locate the <see cref="T:Alt.GUI.ZedGraph.Legend"/> inside the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/> in the
            top-left corner.  
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.LegendPos.InsideTopRight">
            <summary>
            Locate the <see cref="T:Alt.GUI.ZedGraph.Legend"/> inside the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/> in the
            top-right corner. 
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.LegendPos.InsideBotLeft">
            <summary>
            Locate the <see cref="T:Alt.GUI.ZedGraph.Legend"/> inside the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/> in the
            bottom-left corner.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.LegendPos.InsideBotRight">
            <summary>
            Locate the <see cref="T:Alt.GUI.ZedGraph.Legend"/> inside the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/> in the
            bottom-right corner. 
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.LegendPos.Float">
            <summary>
            Locate the <see cref="T:Alt.GUI.ZedGraph.Legend"/> as a floating object above the graph at the
            location specified by <see cref="P:Alt.GUI.ZedGraph.Legend.Location"/>.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.LegendPos.TopCenter">
            <summary>
            Locate the <see cref="T:Alt.GUI.ZedGraph.Legend"/> centered above the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.LegendPos.BottomCenter">
            <summary>
            Locate the <see cref="T:Alt.GUI.ZedGraph.Legend"/> centered below the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.LegendPos.TopFlushLeft">
            <summary>
            Locate the <see cref="T:Alt.GUI.ZedGraph.Legend"/> above the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>, but flush
            against the left margin of the <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/>.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.LegendPos.BottomFlushLeft">
            <summary>
            Locate the <see cref="T:Alt.GUI.ZedGraph.Legend"/> below the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>, but flush
            against the left margin of the <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/>.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.AlignH">
            <summary>
            Enumeration type for the different horizontal text alignment options
            </summary>
            <seealso cref="T:Alt.GUI.ZedGraph.FontSpec"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.AlignH.Left">
            <summary>
            Position the text so that its left edge is aligned with the
            specified X,Y location.  Used by the
            <see cref="!:FontSpec.Draw(Graphics,PaneBase,string,float,float,AlignH,AlignV,float)"/> method.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.AlignH.Center">
            <summary>
            Position the text so that its center is aligned (horizontally) with the
            specified X,Y location.  Used by the
            <see cref="!:FontSpec.Draw(Graphics,PaneBase,string,float,float,AlignH,AlignV,float)"/> method.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.AlignH.Right">
            <summary>
            Position the text so that its right edge is aligned with the
            specified X,Y location.  Used by the
            <see cref="!:FontSpec.Draw(Graphics,PaneBase,string,float,float,AlignH,AlignV,float)"/> method.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.AlignP">
            <summary>
            Enumeration type for the different proximal alignment options
            </summary>
            <seealso cref="T:Alt.GUI.ZedGraph.FontSpec"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Scale.Align"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.AlignP.Inside">
            <summary>
            Position the text so that its "inside" edge (the edge that is
            nearest to the alignment reference point or object) is aligned.
            Used by the <see cref="P:Alt.GUI.ZedGraph.Scale.Align"/> method to align text
            to the axis.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.AlignP.Center">
            <summary>
            Position the text so that its center is aligned with the
            reference object or point.
            Used by the <see cref="P:Alt.GUI.ZedGraph.Scale.Align"/> method to align text
            to the axis.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.AlignP.Outside">
            <summary>
            Position the text so that its right edge (the edge that is
            farthest from the alignment reference point or object) is aligned.
            Used by the <see cref="P:Alt.GUI.ZedGraph.Scale.Align"/> method to align text
            to the axis.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.AlignV">
            <summary>
            Enumeration type for the different vertical text alignment options
            </summary>
            specified X,Y location.  Used by the
            <see cref="!:FontSpec.Draw(Graphics,PaneBase,string,float,float,AlignH,AlignV,float)"/> method.
        </member>
        <member name="F:Alt.GUI.ZedGraph.AlignV.Top">
            <summary>
            Position the text so that its top edge is aligned with the
            specified X,Y location.  Used by the
            <see cref="!:FontSpec.Draw(Graphics,PaneBase,string,float,float,AlignH,AlignV,float)"/> method.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.AlignV.Center">
            <summary>
            Position the text so that its center is aligned (vertically) with the
            specified X,Y location.  Used by the
            <see cref="!:FontSpec.Draw(Graphics,PaneBase,string,float,float,AlignH,AlignV,float)"/> method.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.AlignV.Bottom">
            <summary>
            Position the text so that its bottom edge is aligned with the
            specified X,Y location.  Used by the
            <see cref="!:FontSpec.Draw(Graphics,PaneBase,string,float,float,AlignH,AlignV,float)"/> method.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.CoordType">
            <summary>
            Enumeration type for the user-defined coordinate types available.
            These coordinate types are used the <see cref="T:Alt.GUI.ZedGraph.ArrowObj"/> objects
            and <see cref="T:Alt.GUI.ZedGraph.TextObj"/> objects only.
            </summary>
            <seealso cref="P:Alt.GUI.ZedGraph.Location.CoordinateFrame"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.CoordType.ChartFraction">
            <summary>
            Coordinates are specified as a fraction of the
            <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>.  That is, for the X coordinate, 0.0
            is at the left edge of the ChartRect and 1.0
            is at the right edge of the ChartRect. A value less
            than zero is left of the ChartRect and a value
            greater than 1.0 is right of the ChartRect.  For the Y coordinate, 0.0
            is the top and 1.0 is the bottom.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.CoordType.PaneFraction">
            <summary>
            Coordinates are specified as a fraction of the
            <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/>.  That is, for the X coordinate, 0.0
            is at the left edge of the Rect and 1.0
            is at the right edge of the Rect. A value less
            than zero is left of the Rect and a value
            greater than 1.0 is right of the Rect.  For the Y coordinate, 0.0
            is the top and 1.0 is the bottom.  Note that
            any value less than zero or greater than 1.0 will be outside
            the Rect, and therefore clipped.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.CoordType.AxisXYScale">
            <summary>
            Coordinates are specified according to the user axis scales
            for the <see cref="P:Alt.GUI.ZedGraph.GraphPane.XAxis"/> and <see cref="P:Alt.GUI.ZedGraph.GraphPane.YAxis"/>.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.CoordType.AxisXY2Scale">
            <summary>
            Coordinates are specified according to the user axis scales
            for the <see cref="P:Alt.GUI.ZedGraph.GraphPane.XAxis"/> and <see cref="P:Alt.GUI.ZedGraph.GraphPane.Y2Axis"/>.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.CoordType.XChartFractionYPaneFraction">
            <summary>
            The X coordinate is specified as a fraction of the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>,
            and the Y coordinate is specified as a fraction of the <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/>.
            </summary>
            <remarks>
            For the X coordinate, 0.0
            is at the left edge of the ChartRect and 1.0
            is at the right edge of the ChartRect. A value less
            than zero is left of the ChartRect and a value
            greater than 1.0 is right of the ChartRect.  For the Y coordinate, a value of zero is at
            the left side of the pane, and a value of 1.0 is at the right side of the pane.
            </remarks>
        </member>
        <member name="F:Alt.GUI.ZedGraph.CoordType.XPaneFractionYChartFraction">
            <summary>
            The X coordinate is specified as a fraction of the <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/>,
            and the Y coordinate is specified as a fraction of the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>.
            </summary>
            <remarks>
            For the X coordinate, a value of zero is at
            the left side of the pane, and a value of 1.0 is at the right side of the pane.
            For the Y coordinate, 0.0
            is at the top edge of the ChartRect and 1.0
            is at the bottom edge of the ChartRect. A value less
            than zero is above the ChartRect and a value
            greater than 1.0 is below the ChartRect.
            </remarks>
        </member>
        <member name="F:Alt.GUI.ZedGraph.CoordType.XScaleYChartFraction">
            <summary>
            The X coordinate is specified as an X Scale value, and the Y coordinate
            is specified as a fraction of the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>.
            </summary>
            <remarks>
            For the X coordinate, the value just corresponds to the values of the X scale.
            Values outside the scale range will be
            outside the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>.  For the Y coordinate, 0.0
            is at the top edge of the ChartRect and 1.0
            is at the bottom edge of the ChartRect. A value less
            than zero is above the ChartRect and a value
            greater than 1.0 is below the ChartRect.
            </remarks>
        </member>
        <member name="F:Alt.GUI.ZedGraph.CoordType.XChartFractionYScale">
            <summary>
            The X coordinate is specified as a fraction of the
            <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/> and the Y coordinate is specified as
            a Y scale value.
            </summary>
            <remarks>
            For the X coordinate, 0.0
            is at the left edge of the ChartRect and 1.0
            is at the right edge of the ChartRect. A value less
            than zero is left of the ChartRect and a value
            greater than 1.0 is right of the ChartRect.  For the Y coordinate, the value just
            corresponds to the values of the Y scale.  Values outside the scale range will be
            outside the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>.
            </remarks>
        </member>
        <member name="F:Alt.GUI.ZedGraph.CoordType.XChartFractionY2Scale">
            <summary>
            The X coordinate is specified as a fraction of the
            <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/> and the Y coordinate is specified as
            a Y2 scale value.
            </summary>
            <remarks>
            For the X coordinate, 0.0
            is at the left edge of the ChartRect and 1.0
            is at the right edge of the ChartRect. A value less
            than zero is left of the ChartRect and a value
            greater than 1.0 is right of the ChartRect.  For the Y coordinate, the value just
            corresponds to the values of the Y2 scale.  Values outside the scale range will be
            outside the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>.
            </remarks>
        </member>
        <member name="T:Alt.GUI.ZedGraph.StepType">
            <summary>
            Enumeration type that defines how a curve is drawn.  Curves can be drawn
            as ordinary lines by connecting the points directly, or in a stair-step
            fashion as a series of discrete, constant values.  In a stair step plot,
            all lines segments are either horizontal or vertical.  In a non-step (line)
            plot, the lines can be any angle.
            </summary>
            <seealso cref="P:Alt.GUI.ZedGraph.Line.StepType"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.StepType.ForwardStep">
            <summary>
            Draw the <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> as a stair-step in which each
            point defines the
            beginning (left side) of a new stair.  This implies the points are
            defined at the beginning of an "event."
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.StepType.RearwardStep">
            <summary>
            Draw the <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> as a stair-step in which each
            point defines the end (right side) of a new stair.  This implies
            the points are defined at the end of an "event."
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.StepType.NonStep">
            <summary>
            Draw the <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> as an ordinary line, in which the
            points are connected directly by line segments.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.StepType.ForwardSegment">
            <summary>
            Draw the <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> as a segment in which each point defines the
            beginning (left side) of a new "stair."  This implies the points are defined
            at the beginning of an "event."  Note that ForwardSegment is different
            from ForwardStep in that it does not draw the vertical portion of the step.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.StepType.RearwardSegment">
            <summary>
            Draw the <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> as a segment in which each point defines the
            end (right side) of a new "stair."  This implies the points are defined
            at the end of an "event."  Note that RearwardSegment is different
            from RearwardStep in that it does not draw the vertical portion of the step.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.BarBase">
            <summary>
            Enumeration type that defines the base axis from which <see cref="T:Alt.GUI.ZedGraph.Bar"/> graphs
            are displayed. The bars can be drawn on any of the four axes (<see cref="T:Alt.GUI.ZedGraph.XAxis"/>,
            <see cref="T:Alt.GUI.ZedGraph.X2Axis"/>, <see cref="T:Alt.GUI.ZedGraph.YAxis"/>, and <see cref="T:Alt.GUI.ZedGraph.Y2Axis"/>).
            </summary>
            <seealso cref="P:Alt.GUI.ZedGraph.BarSettings.Base"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.BarBase.X">
            <summary>
            Draw the <see cref="T:Alt.GUI.ZedGraph.Bar"/> chart based from the <see cref="T:Alt.GUI.ZedGraph.XAxis"/>.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.BarBase.X2">
            <summary>
            Draw the <see cref="T:Alt.GUI.ZedGraph.Bar"/> chart based from the <see cref="T:Alt.GUI.ZedGraph.X2Axis"/>.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.BarBase.Y">
            <summary>
            Draw the <see cref="T:Alt.GUI.ZedGraph.Bar"/> chart based from the <see cref="T:Alt.GUI.ZedGraph.YAxis"/>.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.BarBase.Y2">
            <summary>
            Draw the <see cref="T:Alt.GUI.ZedGraph.Bar"/> chart based from the <see cref="T:Alt.GUI.ZedGraph.Y2Axis"/>.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.LineType">
            <summary>
            Enumeration type that defines the available types of <see cref="T:Alt.GUI.ZedGraph.LineItem"/> graphs.
            </summary>
            <seealso cref="P:Alt.GUI.ZedGraph.GraphPane.LineType"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.LineType.Normal">
            <summary>
            Draw the lines as normal.  Any fill area goes from each line down to the X Axis.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.LineType.Stack">
            <summary>
            Draw the lines stacked on top of each other, accumulating values to a total value.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.BarType">
            <summary>
            Enumeration type that defines the available types of <see cref="T:Alt.GUI.ZedGraph.BarItem"/> graphs.
            </summary>
            <seealso cref="P:Alt.GUI.ZedGraph.BarSettings.Type"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.BarType.Cluster">
            <summary>
            Draw each <see cref="T:Alt.GUI.ZedGraph.BarItem"/> side by side in clusters.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.BarType.Overlay">
            <summary>
            Draw the <see cref="T:Alt.GUI.ZedGraph.BarItem"/> bars one on top of the other.  The bars will
            be drawn such that the last bar in the <see cref="T:Alt.GUI.ZedGraph.CurveList"/> will be behind
            all other bars.  Note that the bar values are not summed up for the overlay
            mode.  The data values must be summed before being passed
            to <see cref="!:GraphPane.AddBar(string,IPointList,Color)"/>.
            For example, if the first bar of
            the first <see cref="T:Alt.GUI.ZedGraph.BarItem"/> has a value of 100, and the first bar of
            the second <see cref="T:Alt.GUI.ZedGraph.BarItem"/> has a value of 120, then that bar will
            appear to be 20 units on top of the first bar.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.BarType.SortedOverlay">
            <summary>
            Draw the <see cref="T:Alt.GUI.ZedGraph.BarItem"/> bars one on top of the other.  The bars will
            be drawn such that the bars are sorted according to the maximum value, with
            the tallest bar at each point at the back and the shortest bar at the front.
            This is similar to the <see cref="F:Alt.GUI.ZedGraph.BarType.Overlay"/> mode, but the bars are sorted at
            each base value.
            The data values must be summed before being passed
            to <see cref="!:GraphPane.AddBar(string,IPointList,Color)"/>.  For example, if the first bar of
            the first <see cref="T:Alt.GUI.ZedGraph.BarItem"/> has a value of 100, and the first bar of
            the second <see cref="T:Alt.GUI.ZedGraph.BarItem"/> has a value of 120, then that bar will
            appear to be 20 units on top of the first bar.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.BarType.Stack">
            <summary>
            Draw the <see cref="T:Alt.GUI.ZedGraph.BarItem"/> bars in an additive format so that they stack on
            top of one another.  The value of the last bar drawn will be the sum of the values
            of all prior bars.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.BarType.PercentStack">
             <summary>
             Draw the <see cref="T:Alt.GUI.ZedGraph.BarItem"/> bars in a format whereby the height of each
             represents the percentage of the total each one represents.  Negative values
            are displayed below the zero line as percentages of the absolute total of all values. 
             </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.SortType">
            <summary>
            Enumeration type that defines which set of data points - X or Y - is used  
            <seealso cref="M:System.Collections.ArrayList.Sort"/> to perform the sort.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.SortType.YValues">
            <summary>
            Use the Y values to sort the list.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.SortType.XValues">
            <summary>
            Use the X values to sort the list.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.ZOrder">
            <summary>
            Enumeration that specifies a Z-Order position for <see cref="T:Alt.GUI.ZedGraph.GraphObj"/>
            objects.
            </summary>
            <remarks>This enumeration allows you to set the layering of various graph
            features.  Except for the <see cref="T:Alt.GUI.ZedGraph.GraphObj"/> objects, other feature types
            all have a fixed depth as follows (front to back):
            <list>
            <see cref="T:Alt.GUI.ZedGraph.Legend"/> objects
            The border around <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>
            <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> objects
            The <see cref="T:Alt.GUI.ZedGraph.Axis"/> features
            The background fill of the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>
            The pane <see cref="P:Alt.GUI.ZedGraph.PaneBase.Title"/>
            The background fill of the <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/>
            </list>
            You cannot place anything behind the <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/>
            background fill, but <see cref="P:Alt.GUI.ZedGraph.GraphObj.ZOrder"/> allows you to
            explicitly control the depth of <see cref="T:Alt.GUI.ZedGraph.GraphObj"/> objects
            between all other object types.  For items of equal <see cref="T:Alt.GUI.ZedGraph.ZOrder"/>,
            such as multiple <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>'s or <see cref="T:Alt.GUI.ZedGraph.GraphObj"/>'s
            having the same <see cref="T:Alt.GUI.ZedGraph.ZOrder"/> value, the relative depth is
            controlled by the ordinal position in the list (either
            <see cref="T:Alt.GUI.ZedGraph.CurveList"/> or <see cref="T:Alt.GUI.ZedGraph.GraphObjList"/>).
            <see cref="T:Alt.GUI.ZedGraph.GraphObj"/> objects
            can be placed in the <see cref="T:Alt.GUI.ZedGraph.GraphObjList"/> of either a
            <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> or a <see cref="T:Alt.GUI.ZedGraph.MasterPane"/>.  For a
            <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>-based <see cref="T:Alt.GUI.ZedGraph.GraphObj"/>, all <see cref="T:Alt.GUI.ZedGraph.ZOrder"/>
            values are applicable.  For a <see cref="T:Alt.GUI.ZedGraph.MasterPane"/>-based
            <see cref="T:Alt.GUI.ZedGraph.GraphObj"/>, any <see cref="T:Alt.GUI.ZedGraph.ZOrder"/> value can be used, but there
            are really only three depths:
            <list><see cref="F:Alt.GUI.ZedGraph.ZOrder.H_BehindAll"/> will place the item behind the pane title,
            <see cref="F:Alt.GUI.ZedGraph.ZOrder.A_InFront"/> will place on top of all other graph features,
            any other value places the object above the pane title, but behind the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>'s.
            </list>
            </remarks>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZOrder.H_BehindAll">
            <summary>
            Specifies that the <see cref="T:Alt.GUI.ZedGraph.GraphObj"/> will be behind all other
            objects (including the <see cref="T:Alt.GUI.ZedGraph.PaneBase"/> <see cref="P:Alt.GUI.ZedGraph.PaneBase.Title"/>).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZOrder.G_BehindChartFill">
            <summary>
            Specifies that the <see cref="T:Alt.GUI.ZedGraph.GraphObj"/> will be behind the
            <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/> background <see cref="T:Alt.GUI.ZedGraph.Fill"/>
            (see <see cref="P:Alt.GUI.ZedGraph.Chart.Fill"/>).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZOrder.F_BehindGrid">
            <summary>
            Specifies that the <see cref="T:Alt.GUI.ZedGraph.GraphObj"/> will be behind the grid lines.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZOrder.E_BehindCurves">
            <summary>
            Specifies that the <see cref="T:Alt.GUI.ZedGraph.GraphObj"/> will be behind the
            <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> objects.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZOrder.D_BehindAxis">
            <summary>
            Specifies that the <see cref="T:Alt.GUI.ZedGraph.GraphObj"/> will be behind the
            <see cref="T:Alt.GUI.ZedGraph.Axis"/> objects.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZOrder.C_BehindChartBorder">
            <summary>
            Specifies that the <see cref="T:Alt.GUI.ZedGraph.GraphObj"/> will be behind the
            <see cref="T:Alt.GUI.ZedGraph.Chart"/> border.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZOrder.B_BehindLegend">
            <summary>
            Specifies that the <see cref="T:Alt.GUI.ZedGraph.GraphObj"/> will be behind the
            <see cref="T:Alt.GUI.ZedGraph.Legend"/> object.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZOrder.A_InFront">
            <summary>
            Specifies that the <see cref="T:Alt.GUI.ZedGraph.GraphObj"/> will be in front of
            all other objects, except for the other <see cref="T:Alt.GUI.ZedGraph.GraphObj"/>
            objects that have the same <see cref="T:Alt.GUI.ZedGraph.ZOrder"/> and are before
            this object in the <see cref="T:Alt.GUI.ZedGraph.GraphObjList"/>.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.PieLabelType">
            <summary>
            Enumeration that determines the type of label that is displayed for each pie slice
            (see <see cref="P:Alt.GUI.ZedGraph.PieItem.LabelType"/>).
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PieLabelType.Name_Value">
            <summary>
            Displays <see cref="P:Alt.GUI.ZedGraph.CurveItem.Label"/> and <see cref="P:Alt.GUI.ZedGraph.PieItem.Value"/> for
            a slice in a Pie Chart.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PieLabelType.Name_Percent">
            <summary>
            Displays <see cref="P:Alt.GUI.ZedGraph.CurveItem.Label"/> and <see cref="P:Alt.GUI.ZedGraph.PieItem.Value"/> (as % of total) for
            a slice in a Pie Chart.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PieLabelType.Name_Value_Percent">
            <summary>
            Displays a <see cref="P:Alt.GUI.ZedGraph.CurveItem.Label"/> containing the <see cref="P:Alt.GUI.ZedGraph.PieItem.Value"/> both  
            as an absolute number and as percentage of the total.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PieLabelType.Value">
            <summary>
            Displays <see cref="P:Alt.GUI.ZedGraph.PieItem.Value"/> for
            a slice in a Pie Chart.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PieLabelType.Percent">
            <summary>
            Displays <see cref="P:Alt.GUI.ZedGraph.PieItem.Value"/> (as % of total) for
            a slice in a Pie Chart.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PieLabelType.Name">
            <summary>
            Displays <see cref="P:Alt.GUI.ZedGraph.CurveItem.Label"/> for a slice in a Pie Chart.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PieLabelType.None">
             <summary>
            No label displayed. 
             </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.PaneLayout">
            <summary>
            Define the auto layout options for the
            <see cref="!:MasterPane.SetLayout(Graphics,PaneLayout)"/> method.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PaneLayout.ForceSquare">
            <summary>
            Layout the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>'s so they are in a square grid (always 2x2, 3x3, 4x4),
            leaving blank spaces as required.
            </summary>
            <remarks>For example, a single pane would generate a 1x1 grid, between 2 and 4 panes would generate
            a 2x2 grid, 5 to 9 panes would generate a 3x3 grid.</remarks>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PaneLayout.SquareColPreferred">
            <summary>
            Layout the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>'s so they are in a general square (2x2, 3x3, etc.), but use extra
            columns when necessary (row x column = 1x2, 2x3, 3x4, etc.) depending on the total number
            of panes required.
            </summary>
            <remarks>For example, a 2x2 grid has four panes and a 3x3 grid has 9 panes.  If there are
            6 panes required, then this option will eliminate a row (column preferred) to make a
            2 row x 3 column grid.  With 7 panes, it will make a 3x3 grid with 2 empty spaces.</remarks>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PaneLayout.SquareRowPreferred">
            <summary>
            Layout the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>'s so they are in a general square (2x2, 3x3, etc.), but use extra
            rows when necessary (2x1, 3x2, 4x3, etc.) depending on the total number of panes required.
            </summary>
            <remarks>For example, a 2x2 grid has four panes and a 3x3 grid has 9 panes.  If there are
            6 panes required, then this option will eliminate a column (row preferred) to make a
            3 row x 2 column grid.  With 7 panes, it will make a 3x3 grid with 2 empty spaces.</remarks>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PaneLayout.SingleRow">
            <summary>
            Layout the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>'s in a single row
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PaneLayout.SingleColumn">
            <summary>
            Layout the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>'s in a single column
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PaneLayout.ExplicitCol12">
            <summary>
            Layout the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>'s with an explicit number of columns: The first row has
            1 column and the second row has 2 columns for a total of 3 panes.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PaneLayout.ExplicitCol21">
            <summary>
            Layout the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>'s with an explicit number of columns: The first row has
            2 columns and the second row has 1 column for a total of 3 panes.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PaneLayout.ExplicitCol23">
            <summary>
            Layout the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>'s with an explicit number of columns: The first row has
            2 columns and the second row has 3 columns for a total of 5 panes.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PaneLayout.ExplicitCol32">
            <summary>
            Layout the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>'s with an explicit number of columns: The first row has
            3 columns and the second row has 2 columns for a total of 5 panes.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PaneLayout.ExplicitRow12">
            <summary>
            Layout the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>'s with an explicit number of rows: The first column has
            1 row and the second column has 2 rows for a total of 3 panes.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PaneLayout.ExplicitRow21">
            <summary>
            Layout the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>'s with an explicit number of rows: The first column has
            2 rows and the second column has 1 row for a total of 3 panes.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PaneLayout.ExplicitRow23">
            <summary>
            Layout the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>'s with an explicit number of rows: The first column has
            2 rows and the second column has 3 rows for a total of 5 panes.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.PaneLayout.ExplicitRow32">
            <summary>
            Layout the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>'s with an explicit number of rows: The first column has
            3 rows and the second column has 2 rows for a total of 5 panes.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.RenderModeType">
            <summary>
            Enum for specifying the type of data to be returned by the ZedGraphWeb Render() method.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.RenderModeType.ImageTag">
            <summary>
            Renders as an IMG tag referencing a local generated image. ContentType stays text.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.RenderModeType.RawImage">
            <summary>
            Renders the binary image. ContentType is changed accordingly.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.ValueHandler">
            <summary>
            A class designed to simplify the process of getting the actual value for
            the various stacked and regular curve types
            </summary>
            
            <author> John Champion</author>
            <version> $Revision: 3.21 $ $Date: 2008-12-02 12:55:34 $ </version>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ValueHandler.#ctor(Alt.GUI.ZedGraph.GraphPane,System.Boolean)">
            <summary>
            Basic constructor that saves a reference to the parent
            <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object.
            </summary>
            <param name="pane">The parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object.</param>
            <param name="initialize">A <see cref="T:System.Boolean"/> flag to indicate whether or
            not the drawing variables should be initialized.  Initialization is not
            required if this is part of a ZedGraph internal draw operation (i.e., its in
            the middle of a call to <see cref="M:Alt.GUI.ZedGraph.GraphPane.Draw(Alt.Sketch.Graphics)"/>).  Otherwise, you should
            initialize to make sure the drawing variables are configured.  true to do
            an initialization, false otherwise.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ValueHandler.GetValues(Alt.GUI.ZedGraph.CurveItem,System.Int32,System.Double@,System.Double@,System.Double@)">
            <summary>
            Get the user scale values associate with a particular point of a
            particular curve.</summary>
            <remarks>The main purpose of this method is to handle
            stacked bars, in which case the stacked values are returned rather
            than the individual data values.
            </remarks>
            <param name="curve">A <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> object of interest.</param>
            <param name="iPt">The zero-based point index for the point of interest.</param>
            <param name="baseVal">A <see cref="T:System.Double"/> value representing the value
            for the independent axis.</param>
            <param name="lowVal">A <see cref="T:System.Double"/> value representing the lower
            value for the dependent axis.</param>
            <param name="hiVal">A <see cref="T:System.Double"/> value representing the upper
            value for the dependent axis.</param>
            <returns>true if the data point is value, false for
            <see cref="F:Alt.GUI.ZedGraph.PointPairBase.Missing"/>, invalid, etc. data.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ValueHandler.GetValues(Alt.GUI.ZedGraph.GraphPane,Alt.GUI.ZedGraph.CurveItem,System.Int32,System.Double@,System.Double@,System.Double@)">
            <summary>
            Get the user scale values associate with a particular point of a
            particular curve.</summary>
            <remarks>The main purpose of this method is to handle
            stacked bars and lines, in which case the stacked values are returned rather
            than the individual data values.  However, this method works generically for any
            curve type.
            </remarks>
            <param name="pane">The parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object.</param>
            <param name="curve">A <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> object of interest.</param>
            <param name="iPt">The zero-based point index for the point of interest.</param>
            <param name="baseVal">A <see cref="T:System.Double"/> value representing the value
            for the independent axis.</param>
            <param name="lowVal">A <see cref="T:System.Double"/> value representing the lower
            value for the dependent axis.</param>
            <param name="hiVal">A <see cref="T:System.Double"/> value representing the upper
            value for the dependent axis.</param>
            <returns>true if the data point is value, false for
            <see cref="F:Alt.GUI.ZedGraph.PointPairBase.Missing"/>, invalid, etc. data.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ValueHandler.BarCenterValue(Alt.GUI.ZedGraph.CurveItem,System.Single,System.Int32,System.Double,System.Int32)">
            <summary>
            Calculate the user scale position of the center of the specified bar, using the
            <see cref="T:Alt.GUI.ZedGraph.Axis"/> as specified by <see cref="P:Alt.GUI.ZedGraph.BarSettings.Base"/>.  This method is
            used primarily by the
            <see cref="M:Alt.GUI.ZedGraph.GraphPane.FindNearestPoint(Alt.Sketch.Point,Alt.GUI.ZedGraph.CurveItem@,System.Int32@)"/> method in order to
            determine the bar "location," which is defined as the center of the top of the individual bar.
            </summary>
            <param name="curve">The <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> representing the
            bar of interest.</param>
            <param name="barWidth">The width of each individual bar. This can be calculated using
            the <see cref="M:Alt.GUI.ZedGraph.CurveItem.GetBarWidth(Alt.GUI.ZedGraph.GraphPane)"/> method.</param>
            <param name="iCluster">The cluster number for the bar of interest.  This is the ordinal
            position of the current point.  That is, if a particular <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> has
            10 points, then a value of 3 would indicate the 4th point in the data array.</param>
            <param name="val">The actual independent axis value for the bar of interest.</param>
            <param name="iOrdinal">The ordinal position of the <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> of interest.
            That is, the first bar series is 0, the second is 1, etc.  Note that this applies only
            to the bars.  If a graph includes both bars and lines, then count only the bars.</param>
            <returns>A user scale value position of the center of the bar of interest.</returns>
        </member>
        <member name="T:Alt.GUI.ZedGraph.X2Axis">
            <summary>
            <see cref="T:Alt.GUI.ZedGraph.X2Axis"/> inherits from <see cref="T:Alt.GUI.ZedGraph.Axis"/>, and defines the
            special characteristics of a horizontal axis, specifically located at
            the top of the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/> of the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>
            object
            </summary>
            
            <author> John Champion </author>
            <version> $Revision: 3.1 $ $Date: 2007-04-16 00:03:07 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.X2Axis.schema2">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.X2Axis.#ctor">
            <summary>
            Default constructor that sets all <see cref="T:Alt.GUI.ZedGraph.X2Axis"/> properties to
            default values as defined in the <see cref="T:Alt.GUI.ZedGraph.X2Axis.Default"/> class
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.X2Axis.#ctor(System.String)">
            <summary>
            Default constructor that sets all <see cref="T:Alt.GUI.ZedGraph.X2Axis"/> properties to
            default values as defined in the <see cref="T:Alt.GUI.ZedGraph.X2Axis.Default"/> class, except
            for the axis title
            </summary>
            <param name="title">The <see cref="P:Alt.GUI.ZedGraph.Axis.Title"/> for this axis</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.X2Axis.#ctor(Alt.GUI.ZedGraph.X2Axis)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The X2Axis object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.X2Axis.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.X2Axis.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.X2Axis.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.X2Axis.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.X2Axis.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.X2Axis.SetTransformMatrix(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,System.Double)">
            <summary>
            Setup the Transform Matrix to handle drawing of this <see cref="T:Alt.GUI.ZedGraph.X2Axis"/>
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.X2Axis.IsPrimary(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Determines if this <see cref="T:Alt.GUI.ZedGraph.Axis"/> object is a "primary" one.
            </summary>
            <remarks>
            The primary axes are the <see cref="T:Alt.GUI.ZedGraph.XAxis"/> (always),
            the <see cref="T:Alt.GUI.ZedGraph.X2Axis"/> (always), the first
            <see cref="T:Alt.GUI.ZedGraph.YAxis"/> in the <see cref="P:Alt.GUI.ZedGraph.GraphPane.YAxisList"/> 
            (<see cref="P:Alt.GUI.ZedGraph.CurveItem.YAxisIndex"/> = 0),  and the first
            <see cref="T:Alt.GUI.ZedGraph.Y2Axis"/> in the <see cref="P:Alt.GUI.ZedGraph.GraphPane.Y2AxisList"/> 
            (<see cref="P:Alt.GUI.ZedGraph.CurveItem.YAxisIndex"/> = 0).  Note that
            <see cref="P:Alt.GUI.ZedGraph.GraphPane.YAxis"/> and <see cref="P:Alt.GUI.ZedGraph.GraphPane.Y2Axis"/>
            always reference the primary axes.
            </remarks>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <returns>true for a primary <see cref="T:Alt.GUI.ZedGraph.Axis"/> (for the <see cref="T:Alt.GUI.ZedGraph.X2Axis"/>,
            this is always true), false otherwise</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.X2Axis.CalcCrossShift(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Calculate the "shift" size, in pixels, in order to shift the axis from its default
            location to the value specified by <see cref="P:Alt.GUI.ZedGraph.Axis.Cross"/>.
            </summary>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <returns>The shift amount measured in pixels</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.X2Axis.GetCrossAxis(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Gets the "Cross" axis that corresponds to this axis.
            </summary>
            <remarks>
            The cross axis is the axis which determines the of this Axis when the
            <see cref="P:Alt.GUI.ZedGraph.Axis.Cross">Axis.Cross</see> property is used.  The
            cross axis for any <see cref="T:Alt.GUI.ZedGraph.XAxis"/> or <see cref="T:Alt.GUI.ZedGraph.X2Axis"/>
            is always the primary <see cref="T:Alt.GUI.ZedGraph.YAxis"/>, and
            the cross axis for any <see cref="T:Alt.GUI.ZedGraph.YAxis"/> or <see cref="T:Alt.GUI.ZedGraph.Y2Axis"/> is
            always the primary <see cref="T:Alt.GUI.ZedGraph.XAxis"/>.
            </remarks>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
        </member>
        <member name="T:Alt.GUI.ZedGraph.X2Axis.Default">
            <summary>
            A simple struct that defines the
            default property values for the <see cref="T:Alt.GUI.ZedGraph.X2Axis"/> class.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.X2Axis.Default.IsVisible">
            <summary>
            The default display mode for the <see cref="T:Alt.GUI.ZedGraph.X2Axis"/>
            (<see cref="P:Alt.GUI.ZedGraph.Axis.IsVisible"/> property). true to display the scale
            values, title, tic marks, false to hide the axis entirely.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.X2Axis.Default.IsZeroLine">
            <summary>
            Determines if a line will be drawn at the zero value for the 
            <see cref="T:Alt.GUI.ZedGraph.X2Axis"/>, that is, a line that
            divides the negative values from positive values.
            <seealso cref="P:Alt.GUI.ZedGraph.MajorGrid.IsZeroLine"/>.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.XAxis">
            <summary>
            <see cref="T:Alt.GUI.ZedGraph.XAxis"/> inherits from <see cref="T:Alt.GUI.ZedGraph.Axis"/>, and defines the
            special characteristics of a horizontal axis, specifically located at
            the bottom of the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/> of the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>
            object
            </summary>
            
            <author> John Champion </author>
            <version> $Revision: 3.16 $ $Date: 2007-04-16 00:03:02 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.XAxis.schema2">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XAxis.#ctor">
            <summary>
            Default constructor that sets all <see cref="T:Alt.GUI.ZedGraph.XAxis"/> properties to
            default values as defined in the <see cref="T:Alt.GUI.ZedGraph.XAxis.Default"/> class
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XAxis.#ctor(System.String)">
            <summary>
            Default constructor that sets all <see cref="T:Alt.GUI.ZedGraph.XAxis"/> properties to
            default values as defined in the <see cref="T:Alt.GUI.ZedGraph.XAxis.Default"/> class, except
            for the axis title
            </summary>
            <param name="title">The <see cref="P:Alt.GUI.ZedGraph.Axis.Title"/> for this axis</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XAxis.#ctor(Alt.GUI.ZedGraph.XAxis)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The XAxis object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XAxis.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.XAxis.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XAxis.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XAxis.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XAxis.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XAxis.SetTransformMatrix(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,System.Double)">
            <summary>
            Setup the Transform Matrix to handle drawing of this <see cref="T:Alt.GUI.ZedGraph.XAxis"/>
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XAxis.IsPrimary(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Determines if this <see cref="T:Alt.GUI.ZedGraph.Axis"/> object is a "primary" one.
            </summary>
            <remarks>
            The primary axes are the <see cref="T:Alt.GUI.ZedGraph.XAxis"/> (always), the first
            <see cref="T:Alt.GUI.ZedGraph.YAxis"/> in the <see cref="P:Alt.GUI.ZedGraph.GraphPane.YAxisList"/> 
            (<see cref="P:Alt.GUI.ZedGraph.CurveItem.YAxisIndex"/> = 0),  and the first
            <see cref="T:Alt.GUI.ZedGraph.Y2Axis"/> in the <see cref="P:Alt.GUI.ZedGraph.GraphPane.Y2AxisList"/> 
            (<see cref="P:Alt.GUI.ZedGraph.CurveItem.YAxisIndex"/> = 0).  Note that
            <see cref="P:Alt.GUI.ZedGraph.GraphPane.YAxis"/> and <see cref="P:Alt.GUI.ZedGraph.GraphPane.Y2Axis"/>
            always reference the primary axes.
            </remarks>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <returns>true for a primary <see cref="T:Alt.GUI.ZedGraph.Axis"/> (for the <see cref="T:Alt.GUI.ZedGraph.XAxis"/>,
            this is always true), false otherwise</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XAxis.CalcCrossShift(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Calculate the "shift" size, in pixels, in order to shift the axis from its default
            location to the value specified by <see cref="P:Alt.GUI.ZedGraph.Axis.Cross"/>.
            </summary>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <returns>The shift amount measured in pixels</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XAxis.GetCrossAxis(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Gets the "Cross" axis that corresponds to this axis.
            </summary>
            <remarks>
            The cross axis is the axis which determines the of this Axis when the
            <see cref="P:Alt.GUI.ZedGraph.Axis.Cross">Axis.Cross</see> property is used.  The
            cross axis for any <see cref="T:Alt.GUI.ZedGraph.XAxis"/> or <see cref="T:Alt.GUI.ZedGraph.X2Axis"/>
            is always the primary <see cref="T:Alt.GUI.ZedGraph.YAxis"/>, and
            the cross axis for any <see cref="T:Alt.GUI.ZedGraph.YAxis"/> or <see cref="T:Alt.GUI.ZedGraph.Y2Axis"/> is
            always the primary <see cref="T:Alt.GUI.ZedGraph.XAxis"/>.
            </remarks>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
        </member>
        <member name="T:Alt.GUI.ZedGraph.XAxis.Default">
            <summary>
            A simple struct that defines the
            default property values for the <see cref="T:Alt.GUI.ZedGraph.XAxis"/> class.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.XAxis.Default.IsVisible">
            <summary>
            The default display mode for the <see cref="T:Alt.GUI.ZedGraph.XAxis"/>
            (<see cref="P:Alt.GUI.ZedGraph.Axis.IsVisible"/> property). true to display the scale
            values, title, tic marks, false to hide the axis entirely.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.XAxis.Default.IsZeroLine">
            <summary>
            Determines if a line will be drawn at the zero value for the 
            <see cref="T:Alt.GUI.ZedGraph.XAxis"/>, that is, a line that
            divides the negative values from positive values.
            <seealso cref="P:Alt.GUI.ZedGraph.MajorGrid.IsZeroLine"/>.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.XDate">
            <summary>
            This struct encapsulates a date and time value, and handles associated
            calculations and conversions between various formats.
            </summary>
            <remarks>
            This format stored as a double value representing days since a reference date
            (XL date 0.0 is December 30, 1899 at 00:00 hrs).
            Negative values are permissible, and the
            range of valid dates is from noon on January 1st, 4713 B.C. forward.  Internally, the
            date calculations are done using Astronomical Julian Day numbers.  The Astronomical Julian
            Day number is defined as the number of days since noon on January 1st, 4713 B.C.
            (also referred to as 12:00 on January 1, -4712).
            NOTE: MS Excel actually has an error in the Serial Date calculations because it
            errantly assumes 1900 is a leap year.  The XDate calculations do not have this same
            error.  Therefore, XDate and Excel Date Serial values are 1 day different up until
            the date value of 60 (in Excel, this is February 29th, 1900, and in XDate, this is
            February 28th, 1900).  At a value of 61 (March 1st, 1900) or greater, they agree with
            eachother.
            </remarks>
            <author> John Champion </author>
            <version> $Revision: 3.23 $ $Date: 2007-11-11 06:56:34 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.XDate.XLDay1">
            <summary>
            The Astronomical Julian Day number that corresponds to XL Date 0.0
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.XDate.JulDayMin">
            <summary>
            The minimum valid Julian Day, which corresponds to January 1st, 4713 B.C.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.XDate.JulDayMax">
            <summary>
            The maximum valid Julian Day, which corresponds to December 31st, 9999 A.D.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.XDate.XLDayMin">
            <summary>
            The minimum valid Excel Day, which corresponds to January 1st, 4713 B.C.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.XDate.XLDayMax">
            <summary>
            The maximum valid Excel Day, which corresponds to December 31st, 9999 A.D.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.XDate.MonthsPerYear">
            <summary>
            The number of months in a year
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.XDate.HoursPerDay">
            <summary>
            The number of hours in a day
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.XDate.MinutesPerHour">
            <summary>
            The number of minutes in an hour
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.XDate.SecondsPerMinute">
            <summary>
            The number of seconds in a minute
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.XDate.MinutesPerDay">
            <summary>
            The number of minutes in a day
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.XDate.SecondsPerDay">
            <summary>
            The number of seconds in a day
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.XDate.MillisecondsPerSecond">
            <summary>
            The number of milliseconds in a second
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.XDate.MillisecondsPerDay">
            <summary>
            The number of milliseconds in a day
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.XDate.DefaultFormatStr">
            <summary>
            The default format string to be used in <see cref="M:Alt.GUI.ZedGraph.XDate.ToString"/> when
            no format is provided
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.XDate._xlDate">
            <summary>
            The actual date value in MS Excel format.  This is the only data field in
            the <see cref="T:Alt.GUI.ZedGraph.XDate"/> struct.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.#ctor(System.Double)">
            <summary>
            Construct a date class from an XL date value.
            </summary>
            <param name="xlDate">
            An XL Date value in floating point double format
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.#ctor(System.DateTime)">
            <summary>
            Construct a date class from a <see cref="P:Alt.GUI.ZedGraph.XDate.DateTime"/> struct.
            </summary>
            <param name="dateTime">
            A <see cref="P:Alt.GUI.ZedGraph.XDate.DateTime"/> struct containing the initial date information.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct a date class from a calendar date (year, month, day).  Assumes the time
            of day is 00:00 hrs
            </summary>
            <param name="year">An integer value for the year, e.g., 1995.</param>
            <param name="day">An integer value for the day of the month, e.g., 23.
            It is permissible to have day numbers outside of the 1-31 range,
            which will rollover to the previous or next month and year.</param>
            <param name="month">An integer value for the month of the year, e.g.,
            8 for August.  It is permissible to have months outside of the 1-12 range,
            which will rollover to the previous or next year.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct a date class from a calendar date and time (year, month, day, hour, minute,
            second). 
            </summary>
            <param name="year">An integer value for the year, e.g., 1995.</param>
            <param name="day">An integer value for the day of the month, e.g., 23.
            It is permissible to have day numbers outside of the 1-31 range,
            which will rollover to the previous or next month and year.</param>
            <param name="month">An integer value for the month of the year, e.g.,
            8 for August.  It is permissible to have months outside of the 1-12 range,
            which will rollover to the previous or next year.</param>
            <param name="hour">An integer value for the hour of the day, e.g. 15.
            It is permissible to have hour values outside the 0-23 range, which
            will rollover to the previous or next day.</param>
            <param name="minute">An integer value for the minute, e.g. 45.
            It is permissible to have hour values outside the 0-59 range, which
            will rollover to the previous or next hour.</param>
            <param name="second">An integer value for the second, e.g. 35.
            It is permissible to have second values outside the 0-59 range, which
            will rollover to the previous or next minute.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Construct a date class from a calendar date and time (year, month, day, hour, minute,
            second), where seconds is a <see cref="T:System.Double"/> value (allowing fractional seconds). 
            </summary>
            <param name="year">An integer value for the year, e.g., 1995.</param>
            <param name="day">An integer value for the day of the month, e.g., 23.
            It is permissible to have day numbers outside of the 1-31 range,
            which will rollover to the previous or next month and year.</param>
            <param name="month">An integer value for the month of the year, e.g.,
            8 for August.  It is permissible to have months outside of the 1-12 range,
            which will rollover to the previous or next year.</param>
            <param name="hour">An integer value for the hour of the day, e.g. 15.
            It is permissible to have hour values outside the 0-23 range, which
            will rollover to the previous or next day.</param>
            <param name="minute">An integer value for the minute, e.g. 45.
            It is permissible to have hour values outside the 0-59 range, which
            will rollover to the previous or next hour.</param>
            <param name="second">A double value for the second, e.g. 35.75.
            It is permissible to have second values outside the 0-59 range, which
            will rollover to the previous or next minute.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct a date class from a calendar date and time (year, month, day, hour, minute,
            second, millisecond). 
            </summary>
            <param name="year">An integer value for the year, e.g., 1995.</param>
            <param name="day">An integer value for the day of the month, e.g., 23.
            It is permissible to have day numbers outside of the 1-31 range,
            which will rollover to the previous or next month and year.</param>
            <param name="month">An integer value for the month of the year, e.g.,
            8 for August.  It is permissible to have months outside of the 1-12 range,
            which will rollover to the previous or next year.</param>
            <param name="hour">An integer value for the hour of the day, e.g. 15.
            It is permissible to have hour values outside the 0-23 range, which
            will rollover to the previous or next day.</param>
            <param name="minute">An integer value for the minute, e.g. 45.
            It is permissible to have hour values outside the 0-59 range, which
            will rollover to the previous or next hour.</param>
            <param name="second">An integer value for the second, e.g. 35.
            It is permissible to have second values outside the 0-59 range, which
            will rollover to the previous or next minute.</param>
            <param name="millisecond">An integer value for the millisecond, e.g. 632.
            It is permissible to have millisecond values outside the 0-999 range, which
            will rollover to the previous or next second.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.#ctor(Alt.GUI.ZedGraph.XDate)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The GraphPane object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.CheckValidDate(System.Double)">
            <summary>
            Returns true if the specified date value is in the valid range
            </summary>
            <param name="xlDate">The XL date value to be verified for validity</param>
            <returns>true for a valid date, false otherwise</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.MakeValidDate(System.Double)">
            <summary>
            Take the specified date, and bound it to the valid date range for the XDate struct.
            </summary>
            <param name="xlDate">The date to be bounded</param>
            <returns>An XLDate value that lies between the minimum and maximum valid date ranges
            (see <see cref="F:Alt.GUI.ZedGraph.XDate.XLDayMin"/> and <see cref="F:Alt.GUI.ZedGraph.XDate.XLDayMax"/>)</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.GetDate(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Get the calendar date (year, month, day) corresponding to this instance.
            </summary>
            <param name="year">An integer value for the year, e.g., 1995.</param>
            <param name="day">An integer value for the day of the month, e.g., 23.</param>
            <param name="month">An integer value for the month of the year, e.g.,
            8 for August.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.SetDate(System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the calendar date (year, month, day) of this instance.
            </summary>
            <param name="year">An integer value for the year, e.g., 1995.</param>
            <param name="day">An integer value for the day of the month, e.g., 23.</param>
            <param name="month">An integer value for the month of the year, e.g.,
            8 for August.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.GetDate(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Get the calendar date (year, month, day, hour, minute, second) corresponding
            to this instance.
            </summary>
            <param name="year">An integer value for the year, e.g., 1995.</param>
            <param name="day">An integer value for the day of the month, e.g., 23.</param>
            <param name="month">An integer value for the month of the year, e.g.,
            8 for August.</param>
            <param name="hour">An integer value for the hour of the day, e.g. 15.</param>
            <param name="minute">An integer value for the minute, e.g. 45.</param>
            <param name="second">An integer value for the second, e.g. 35.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.SetDate(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set the calendar date (year, month, day, hour, minute, second) of this instance.
            </summary>
            <param name="year">An integer value for the year, e.g., 1995.</param>
            <param name="day">An integer value for the day of the month, e.g., 23.</param>
            <param name="month">An integer value for the month of the year, e.g.,
            8 for August.</param>
            <param name="hour">An integer value for the hour of the day, e.g. 15.</param>
            <param name="minute">An integer value for the minute, e.g. 45.</param>
            <param name="second">An integer value for the second, e.g. 35.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.GetDayOfYear">
            <summary>
            Get the day of year value (241.345 means the 241st day of the year)
            corresponding to this instance.
            </summary>
            <returns>The day of the year in floating point double format.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.CalendarDateToXLDate(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculate an XL Date from the specified Calendar date (year, month, day, hour, minute, second),
            first normalizing all input data values.
            </summary>
            <remarks>
            The Calendar date is always based on the Gregorian Calendar.  Note that the Gregorian calendar is really
            only valid from October 15, 1582 forward.  The countries that adopted the Gregorian calendar
            first did so on October 4, 1582, so that the next day was October 15, 1582.  Prior to that time
            the Julian Calendar was used.  However, Prior to March 1, 4 AD the treatment of leap years was
            inconsistent, and prior to 45 BC the Julian Calendar did not exist.  The <see cref="T:Alt.GUI.ZedGraph.XDate"/>
            struct projects only Gregorian dates backwards and does not deal with Julian calendar dates at all.  The
            <see cref="M:Alt.GUI.ZedGraph.XDate.ToString(System.Double,System.String)"/> method will just append a "(BC)" notation to the end of any dates
            prior to 1 AD, since the <see cref="P:Alt.GUI.ZedGraph.XDate.DateTime"/> struct throws an exception when formatting earlier dates.
            </remarks>
            <param name="year">
            The integer year value (e.g., 1994).
            </param>
            <param name="month">
            The integer month value (e.g., 7 for July).
            </param>
            <param name="day">
            The integer day value (e.g., 19 for the 19th day of the month).
            </param>
            <param name="hour">
            The integer hour value (e.g., 14 for 2:00 pm).
            </param>
            <param name="minute">
            The integer minute value (e.g., 35 for 35 minutes past the hour).
            </param>
            <param name="second">
            The integer second value (e.g., 42 for 42 seconds past the minute).
            </param>
            <param name="millisecond">
            The integer millisecond value (e.g., 374 for 374 milliseconds past the second).
            </param>
            <returns>The corresponding XL date, expressed in double floating point format</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.CalendarDateToXLDate(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculate an XL Date from the specified Calendar date (year, month, day, hour, minute, second),
            first normalizing all input data values.
            </summary>
            <remarks>
            The Calendar date is always based on the Gregorian Calendar.  Note that the Gregorian calendar is really
            only valid from October 15, 1582 forward.  The countries that adopted the Gregorian calendar
            first did so on October 4, 1582, so that the next day was October 15, 1582.  Prior to that time
            the Julian Calendar was used.  However, Prior to March 1, 4 AD the treatment of leap years was
            inconsistent, and prior to 45 BC the Julian Calendar did not exist.  The <see cref="T:Alt.GUI.ZedGraph.XDate"/>
            struct projects only Gregorian dates backwards and does not deal with Julian calendar dates at all.  The
            <see cref="M:Alt.GUI.ZedGraph.XDate.ToString(System.Double,System.String)"/> method will just append a "(BC)" notation to the end of any dates
            prior to 1 AD, since the <see cref="P:Alt.GUI.ZedGraph.XDate.DateTime"/> struct throws an exception when formatting earlier dates.
            </remarks>
            <param name="year">
            The integer year value (e.g., 1994).
            </param>
            <param name="month">
            The integer month value (e.g., 7 for July).
            </param>
            <param name="day">
            The integer day value (e.g., 19 for the 19th day of the month).
            </param>
            <param name="hour">
            The integer hour value (e.g., 14 for 2:00 pm).
            </param>
            <param name="minute">
            The integer minute value (e.g., 35 for 35 minutes past the hour).
            </param>
            <param name="second">
            The integer second value (e.g., 42 for 42 seconds past the minute).
            </param>
            <returns>The corresponding XL date, expressed in double floating point format</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.CalendarDateToXLDate(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Calculate an XL Date from the specified Calendar date (year, month, day, hour, minute, second),
            first normalizing all input data values.  The seconds value is a double type, allowing fractional
            seconds.
            </summary>
            <remarks>
            The Calendar date is always based on the Gregorian Calendar.  Note that the Gregorian calendar is really
            only valid from October 15, 1582 forward.  The countries that adopted the Gregorian calendar
            first did so on October 4, 1582, so that the next day was October 15, 1582.  Prior to that time
            the Julian Calendar was used.  However, Prior to March 1, 4 AD the treatment of leap years was
            inconsistent, and prior to 45 BC the Julian Calendar did not exist.  The <see cref="T:Alt.GUI.ZedGraph.XDate"/>
            struct projects only Gregorian dates backwards and does not deal with Julian calendar dates at all.  The
            <see cref="M:Alt.GUI.ZedGraph.XDate.ToString(System.Double,System.String)"/> method will just append a "(BC)" notation to the end of any dates
            prior to 1 AD, since the <see cref="P:Alt.GUI.ZedGraph.XDate.DateTime"/> struct throws an exception when formatting earlier dates.
            </remarks>
            <param name="year">
            The integer year value (e.g., 1994).
            </param>
            <param name="month">
            The integer month value (e.g., 7 for July).
            </param>
            <param name="day">
            The integer day value (e.g., 19 for the 19th day of the month).
            </param>
            <param name="hour">
            The integer hour value (e.g., 14 for 2:00 pm).
            </param>
            <param name="minute">
            The integer minute value (e.g., 35 for 35 minutes past the hour).
            </param>
            <param name="second">
            The double second value (e.g., 42.3 for 42.3 seconds past the minute).
            </param>
            <returns>The corresponding XL date, expressed in double floating point format</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.CalendarDateToJulianDay(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculate an Astronomical Julian Day number from the specified Calendar date
            (year, month, day, hour, minute, second), first normalizing all input data values
            </summary>
            <param name="year">
            The integer year value (e.g., 1994).
            </param>
            <param name="month">
            The integer month value (e.g., 7 for July).
            </param>
            <param name="day">
            The integer day value (e.g., 19 for the 19th day of the month).
            </param>
            <param name="hour">
            The integer hour value (e.g., 14 for 2:00 pm).
            </param>
            <param name="minute">
            The integer minute value (e.g., 35 for 35 minutes past the hour).
            </param>
            <param name="second">
            The integer second value (e.g., 42 for 42 seconds past the minute).
            </param>
            <returns>The corresponding Astronomical Julian Day number, expressed in double
            floating point format</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.CalendarDateToJulianDay(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculate an Astronomical Julian Day number from the specified Calendar date
            (year, month, day, hour, minute, second), first normalizing all input data values
            </summary>
            <param name="year">
            The integer year value (e.g., 1994).
            </param>
            <param name="month">
            The integer month value (e.g., 7 for July).
            </param>
            <param name="day">
            The integer day value (e.g., 19 for the 19th day of the month).
            </param>
            <param name="hour">
            The integer hour value (e.g., 14 for 2:00 pm).
            </param>
            <param name="minute">
            The integer minute value (e.g., 35 for 35 minutes past the hour).
            </param>
            <param name="second">
            The integer second value (e.g., 42 for 42 seconds past the minute).
            </param>
            <param name="millisecond">
            The integer second value (e.g., 325 for 325 milliseconds past the minute).
            </param>
            <returns>The corresponding Astronomical Julian Day number, expressed in double
            floating point format</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.NormalizeCalendarDate(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Double@)">
            <summary>
            Normalize a set of Calendar date values (year, month, day, hour, minute, second) to make sure
            that month is between 1 and 12, hour is between 0 and 23, etc.
            </summary>
            <param name="year">
            The integer year value (e.g., 1994).
            </param>
            <param name="month">
            The integer month value (e.g., 7 for July).
            </param>
            <param name="day">
            The integer day value (e.g., 19 for the 19th day of the month).
            </param>
            <param name="hour">
            The integer hour value (e.g., 14 for 2:00 pm).
            </param>
            <param name="minute">
            The integer minute value (e.g., 35 for 35 minutes past the hour).
            </param>
            <param name="second">
            The integer second value (e.g., 42 for 42 seconds past the minute).
            </param>
            <param name="millisecond">
            The double millisecond value (e.g., 325.3 for 325.3 milliseconds past the second).
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate._CalendarDateToXLDate(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Calculate an XL date from the specified Calendar date (year, month, day, hour, minute, second).
            This is the internal trusted version, where all values are assumed to be legitimate
            ( month is between 1 and 12, minute is between 0 and 59, etc. )
            </summary>
            <param name="year">
            The integer year value (e.g., 1994).
            </param>
            <param name="month">
            The integer month value (e.g., 7 for July).
            </param>
            <param name="day">
            The integer day value (e.g., 19 for the 19th day of the month).
            </param>
            <param name="hour">
            The integer hour value (e.g., 14 for 2:00 pm).
            </param>
            <param name="minute">
            The integer minute value (e.g., 35 for 35 minutes past the hour).
            </param>
            <param name="second">
            The integer second value (e.g., 42 for 42 seconds past the minute).
            </param>
            <param name="millisecond">
            The double millisecond value (e.g., 325.3 for 325.3 milliseconds past the second).
            </param>
            <returns>The corresponding XL date, expressed in double floating point format</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate._CalendarDateToJulianDay(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Calculate an Astronomical Julian Day Number from the specified Calendar date
            (year, month, day, hour, minute, second).
            This is the internal trusted version, where all values are assumed to be legitimate
            ( month is between 1 and 12, minute is between 0 and 59, etc. )
            </summary>
            <param name="year">
            The integer year value (e.g., 1994).
            </param>
            <param name="month">
            The integer month value (e.g., 7 for July).
            </param>
            <param name="day">
            The integer day value (e.g., 19 for the 19th day of the month).
            </param>
            <param name="hour">
            The integer hour value (e.g., 14 for 2:00 pm).
            </param>
            <param name="minute">
            The integer minute value (e.g., 35 for 35 minutes past the hour).
            </param>
            <param name="second">
            The integer second value (e.g., 42 for 42 seconds past the minute).
            </param>
            <param name="millisecond">
            The double millisecond value (e.g., 325.3 for 325.3 milliseconds past the second).
            </param>
            <returns>The corresponding Astronomical Julian Day number, expressed in double
            floating point format</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.XLDateToCalendarDate(System.Double,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Calculate a Calendar date (year, month, day, hour, minute, second) corresponding to
            the specified XL date
            </summary>
            <param name="xlDate">
            The XL date value in floating point double format.
            </param>
            <param name="year">
            The integer year value (e.g., 1994).
            </param>
            <param name="month">
            The integer month value (e.g., 7 for July).
            </param>
            <param name="day">
            The integer day value (e.g., 19 for the 19th day of the month).
            </param>
            <param name="hour">
            The integer hour value (e.g., 14 for 2:00 pm).
            </param>
            <param name="minute">
            The integer minute value (e.g., 35 for 35 minutes past the hour).
            </param>
            <param name="second">
            The integer second value (e.g., 42 for 42 seconds past the minute).
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.XLDateToCalendarDate(System.Double,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Calculate a Calendar date (year, month, day, hour, minute, second) corresponding to
            the specified XL date
            </summary>
            <param name="xlDate">
            The XL date value in floating point double format.
            </param>
            <param name="year">
            The integer year value (e.g., 1994).
            </param>
            <param name="month">
            The integer month value (e.g., 7 for July).
            </param>
            <param name="day">
            The integer day value (e.g., 19 for the 19th day of the month).
            </param>
            <param name="hour">
            The integer hour value (e.g., 14 for 2:00 pm).
            </param>
            <param name="minute">
            The integer minute value (e.g., 35 for 35 minutes past the hour).
            </param>
            <param name="second">
            The integer second value (e.g., 42 for 42 seconds past the minute).
            </param>
            <param name="millisecond">
            The integer millisecond value (e.g., 325 for 325 milliseconds past the second).
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.XLDateToCalendarDate(System.Double,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Double@)">
            <summary>
            Calculate a Calendar date (year, month, day, hour, minute, second) corresponding to
            the specified XL date
            </summary>
            <param name="xlDate">
            The XL date value in floating point double format.
            </param>
            <param name="year">
            The integer year value (e.g., 1994).
            </param>
            <param name="month">
            The integer month value (e.g., 7 for July).
            </param>
            <param name="day">
            The integer day value (e.g., 19 for the 19th day of the month).
            </param>
            <param name="hour">
            The integer hour value (e.g., 14 for 2:00 pm).
            </param>
            <param name="minute">
            The integer minute value (e.g., 35 for 35 minutes past the hour).
            </param>
            <param name="second">
            The double second value (e.g., 42.3 for 42.3 seconds past the minute).
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.JulianDayToCalendarDate(System.Double,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Calculate a Calendar date (year, month, day, hour, minute, second) corresponding to
            the Astronomical Julian Day number
            </summary>
            <param name="jDay">
            The Astronomical Julian Day number to be converted
            </param>
            <param name="year">
            The integer year value (e.g., 1994).
            </param>
            <param name="month">
            The integer month value (e.g., 7 for July).
            </param>
            <param name="day">
            The integer day value (e.g., 19 for the 19th day of the month).
            </param>
            <param name="hour">
            The integer hour value (e.g., 14 for 2:00 pm).
            </param>
            <param name="minute">
            The integer minute value (e.g., 35 for 35 minutes past the hour).
            </param>
            <param name="second">
            The integer second value (e.g., 42 for 42 seconds past the minute).
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.JulianDayToCalendarDate(System.Double,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Double@)">
            <summary>
            Calculate a Calendar date (year, month, day, hour, minute, second) corresponding to
            the Astronomical Julian Day number
            </summary>
            <param name="jDay">
            The Astronomical Julian Day number to be converted
            </param>
            <param name="year">
            The integer year value (e.g., 1994).
            </param>
            <param name="month">
            The integer month value (e.g., 7 for July).
            </param>
            <param name="day">
            The integer day value (e.g., 19 for the 19th day of the month).
            </param>
            <param name="hour">
            The integer hour value (e.g., 14 for 2:00 pm).
            </param>
            <param name="minute">
            The integer minute value (e.g., 35 for 35 minutes past the hour).
            </param>
            <param name="second">
            The double second value (e.g., 42.3 for 42.3 seconds past the minute).
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.JulianDayToCalendarDate(System.Double,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Double@)">
            <summary>
            Calculate a Calendar date (year, month, day, hour, minute, second) corresponding to
            the Astronomical Julian Day number
            </summary>
            <param name="jDay">
            The Astronomical Julian Day number to be converted
            </param>
            <param name="year">
            The integer year value (e.g., 1994).
            </param>
            <param name="month">
            The integer month value (e.g., 7 for July).
            </param>
            <param name="day">
            The integer day value (e.g., 19 for the 19th day of the month).
            </param>
            <param name="hour">
            The integer hour value (e.g., 14 for 2:00 pm).
            </param>
            <param name="minute">
            The integer minute value (e.g., 35 for 35 minutes past the hour).
            </param>
            <param name="second">
            The integer second value (e.g., 42 for 42 seconds past the minute).
            </param>
            <param name="millisecond">
            The <see cref="T:System.Double"/> millisecond value (e.g., 342.5 for 342.5 milliseconds past
            the second).
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.XLDateToJulianDay(System.Double)">
            <summary>
            Calculate an Astronomical Julian Day number corresponding to the specified XL date
            </summary>
            <param name="xlDate">
            The XL date value in floating point double format.
            </param>
            <returns>The corresponding Astronomical Julian Day number, expressed in double
            floating point format</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.JulianDayToXLDate(System.Double)">
            <summary>
            Calculate an XL Date corresponding to the specified Astronomical Julian Day number
            </summary>
            <param name="jDay">
            The Astronomical Julian Day number in floating point double format.
            </param>
            <returns>The corresponding XL Date, expressed in double
            floating point format</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.XLDateToDecimalYear(System.Double)">
            <summary>
            Calculate a decimal year value (e.g., 1994.6523) corresponding to the specified XL date
            </summary>
            <param name="xlDate">
            The XL date value in floating point double format.
            </param>
            <returns>The corresponding decimal year value, expressed in double
            floating point format</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.DecimalYearToXLDate(System.Double)">
            <summary>
            Calculate a decimal year value (e.g., 1994.6523) corresponding to the specified XL date
            </summary>
            <param name="yearDec">
            The decimal year value in floating point double format.
            </param>
            <returns>The corresponding XL Date, expressed in double
            floating point format</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.XLDateToDayOfYear(System.Double)">
            <summary>
            Calculate a day-of-year value (e.g., 241.543 corresponds to the 241st day of the year)
            corresponding to the specified XL date
            </summary>
            <param name="xlDate">
            The XL date value in floating point double format.
            </param>
            <returns>The corresponding day-of-year (DoY) value, expressed in double
            floating point format</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.XLDateToDayOfWeek(System.Double)">
            <summary>
            Calculate a day-of-week value (e.g., Sun=0, Mon=1, Tue=2, etc.)
            corresponding to the specified XL date
            </summary>
            <param name="xlDate">
            The XL date value in floating point double format.
            </param>
            <returns>The corresponding day-of-week (DoW) value, expressed in integer format</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.XLDateToDateTime(System.Double)">
            <summary>
            Convert an XL date format to a .Net DateTime struct
            </summary>
            <param name="xlDate">
            The XL date value in floating point double format.
            </param>
            <returns>The corresponding XL Date, expressed in double
            floating point format</returns>
            <returns>The corresponding date in the form of a .Net DateTime struct</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.DateTimeToXLDate(System.DateTime)">
            <summary>
            Convert a .Net DateTime struct to an XL Format date
            </summary>
            <param name="dt">
            The date value in the form of a .Net DateTime struct
            </param>
            <returns>The corresponding XL Date, expressed in double
            floating point format</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.AddMilliseconds(System.Double)">
            <summary>
            Add the specified number of milliseconds (can be fractional) to the current XDate instance.
            </summary>
            <param name="dMilliseconds">
            The incremental number of milliseconds (negative or positive) in floating point double format.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.AddSeconds(System.Double)">
            <summary>
            Add the specified number of seconds (can be fractional) to the current XDate instance.
            </summary>
            <param name="dSeconds">
            The incremental number of seconds (negative or positive) in floating point double format.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.AddMinutes(System.Double)">
            <summary>
            Add the specified number of minutes (can be fractional) to the current XDate instance.
            </summary>
            <param name="dMinutes">
            The incremental number of minutes (negative or positive) in floating point double format.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.AddHours(System.Double)">
            <summary>
            Add the specified number of hours (can be fractional) to the current XDate instance.
            </summary>
            <param name="dHours">
            The incremental number of hours (negative or positive) in floating point double format.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.AddDays(System.Double)">
            <summary>
            Add the specified number of days (can be fractional) to the current XDate instance.
            </summary>
            <param name="dDays">
            The incremental number of days (negative or positive) in floating point double format.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.AddMonths(System.Double)">
            <summary>
            Add the specified number of Months (can be fractional) to the current XDate instance.
            </summary>
            <param name="dMonths">
            The incremental number of months (negative or positive) in floating point double format.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.AddYears(System.Double)">
            <summary>
            Add the specified number of years (can be fractional) to the current XDate instance.
            </summary>
            <param name="dYears">
            The incremental number of years (negative or positive) in floating point double format.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.op_Subtraction(Alt.GUI.ZedGraph.XDate,Alt.GUI.ZedGraph.XDate)">
            <summary>
            '-' operator overload.  When two XDates are subtracted, the number of days between dates
            is returned.
            </summary>
            <param name="lhs">The left-hand-side of the '-' operator (an XDate class)</param>
            <param name="rhs">The right-hand-side of the '-' operator (an XDate class)</param>
            <returns>The days between dates, expressed as a floating point double</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.op_Subtraction(Alt.GUI.ZedGraph.XDate,System.Double)">
            <summary>
            '-' operator overload.  When a double value is subtracted from an XDate, the result is a
            new XDate with the number of days subtracted.
            </summary>
            <param name="lhs">The left-hand-side of the '-' operator (an XDate class)</param>
            <param name="rhs">The right-hand-side of the '-' operator (a double value)</param>
            <returns>An XDate with the rhs number of days subtracted</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.op_Addition(Alt.GUI.ZedGraph.XDate,System.Double)">
            <summary>
            '+' operator overload.  When a double value is added to an XDate, the result is a
            new XDate with the number of days added.
            </summary>
            <param name="lhs">The left-hand-side of the '-' operator (an XDate class)</param>
            <param name="rhs">The right-hand-side of the '+' operator (a double value)</param>
            <returns>An XDate with the rhs number of days added</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.op_Increment(Alt.GUI.ZedGraph.XDate)">
            <summary>
            '++' operator overload.  Increment the date by one day.
            </summary>
            <param name="xDate">The XDate struct on which to operate</param>
            <returns>An XDate one day later than the specified date</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.op_Decrement(Alt.GUI.ZedGraph.XDate)">
            <summary>
            '--' operator overload.  Decrement the date by one day.
            </summary>
            <param name="xDate">The XDate struct on which to operate</param>
            <returns>An XDate one day prior to the specified date</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.op_Implicit(Alt.GUI.ZedGraph.XDate)~System.Double">
            <summary>
            Implicit conversion from XDate to double (an XL Date).
            </summary>
            <param name="xDate">The XDate struct on which to operate</param>
            <returns>A double floating point value representing the XL Date</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.op_Implicit(Alt.GUI.ZedGraph.XDate)~System.Single">
            <summary>
            Implicit conversion from XDate to float (an XL Date).
            </summary>
            <param name="xDate">The XDate struct on which to operate</param>
            <returns>A double floating point value representing the XL Date</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.op_Implicit(System.Double)~Alt.GUI.ZedGraph.XDate">
            <summary>
            Implicit conversion from double (an XL Date) to XDate.
            </summary>
            <param name="xlDate">The XDate struct on which to operate</param>
            <returns>An XDate struct representing the specified xlDate value.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.op_Implicit(Alt.GUI.ZedGraph.XDate)~System.DateTime">
            <summary>
            Implicit conversion from XDate to <see cref="P:Alt.GUI.ZedGraph.XDate.DateTime"/>.
            </summary>
            <param name="xDate">The XDate struct on which to operate</param>
            <returns>A <see cref="P:Alt.GUI.ZedGraph.XDate.DateTime"/> struct representing the specified xDate value.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.op_Implicit(System.DateTime)~Alt.GUI.ZedGraph.XDate">
            <summary>
            Implicit conversion from <see cref="P:Alt.GUI.ZedGraph.XDate.DateTime"/> to <see cref="T:Alt.GUI.ZedGraph.XDate"/>.
            </summary>
            <param name="dt">The <see cref="P:Alt.GUI.ZedGraph.XDate.DateTime"/> struct on which to operate</param>
            <returns>An <see cref="T:Alt.GUI.ZedGraph.XDate"/> struct representing the specified DateTime value.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.Equals(System.Object)">
            <summary>
            Tests whether <param>obj</param> is either an <see cref="T:Alt.GUI.ZedGraph.XDate"/> structure or
            a double floating point value that is equal to the same date as this <c>XDate</c>
            struct instance.
            </summary>
            <param name="obj">The object to compare for equality with this XDate instance.
            This object should be either a type XDate or type double.</param>
            <returns>Returns <c>true</c> if <param>obj</param> is the same date as this
            instance; otherwise, <c>false</c></returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Alt.GUI.ZedGraph.XDate"/> structure.  In this case, the
            hash code is simply the equivalent hash code for the floating point double date value.
            </summary>
            <returns>An integer representing the hash code for this XDate value</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.CompareTo(System.Object)">
            <summary>
            Compares one <see cref="T:Alt.GUI.ZedGraph.XDate"/> object to another.
            </summary>
            <remarks>
            This method will throw an exception if <paramref name="target"/> is not an
            <see cref="T:Alt.GUI.ZedGraph.XDate"/> object.
            </remarks>
            <param name="target">The second <see cref="T:Alt.GUI.ZedGraph.XDate"/> object to be compared.</param>
            <returns>zero if <paramref name="target"/> is equal to the current instance,
            -1 if <paramref name="target"/> is less than the current instance, and
            1 if <paramref name="target"/> is greater than the current instance.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.ToString(System.Double)">
            <summary>
            Format this XDate value using the default format string (<see cref="F:Alt.GUI.ZedGraph.XDate.DefaultFormatStr"/>).
            </summary>
            <remarks>
            The formatting is done using the <see cref="P:Alt.GUI.ZedGraph.XDate.DateTime"/> <see cref="M:System.DateTime.ToString(System.String)"/>
            method in order to provide full localization capability.  The DateTime struct is limited to
            dates from 1 AD onward.  However, all calendar dates in <see cref="T:Alt.GUI.ZedGraph.XDate"/> and <see cref="P:Alt.GUI.ZedGraph.XDate.DateTime"/>
            are projected Gregorian calendar dates.  Since the Gregorian calendar was not implemented
            until October 4, 1582 (or later in some countries), Gregorian dates prior to that time are
            really dates that would have been, had the Gregorian calendar existed.  In order to avoid
            throwing an exception, for dates prior to 1 AD, the year will be converted to a positive
            year and the text "(BC)" is appended to the end of the formatted string.  Under this mode, the
            year sequence is 2BC, 1BC, 1AD, 2AD, etc.  There is no year zero.
            </remarks>
            <param name="xlDate">
            The XL date value to be formatted in floating point double format.
            </param>
            <returns>A string representation of the date</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.ToString">
            <summary>
            Format this XDate value using the default format string (see cref="DefaultFormatStr"/&gt;).
            </summary>
            <remarks>
            The formatting is done using the <see cref="P:Alt.GUI.ZedGraph.XDate.DateTime"/>
            <see cref="M:System.DateTime.ToString(System.String)"/>
            method in order to provide full localization capability.  The DateTime struct is limited to
            dates from 1 AD onward.  However, all calendar dates in <see cref="T:Alt.GUI.ZedGraph.XDate"/> and
            <see cref="P:Alt.GUI.ZedGraph.XDate.DateTime"/>
            are projected Gregorian calendar dates.  Since the Gregorian calendar was not implemented
            until October 4, 1582 (or later in some countries), Gregorian dates prior to that time are
            really dates that would have been, had the Gregorian calendar existed.  In order to avoid
            throwing an exception, for dates prior to 1 AD, the year will be converted to a positive
            year and the text "(BC)" is appended to the end of the formatted string.  Under this mode, the
            year sequence is 2BC, 1BC, 1AD, 2AD, etc.  There is no year zero.
            </remarks>
            <returns>A string representation of the date</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.ToString(System.String)">
            <summary>
            Format this XL Date value using the specified format string.  The format
            string is specified according to the <see cref="P:Alt.GUI.ZedGraph.XDate.DateTime"/> class.
            </summary>
            <remarks>
            The formatting is done using the <see cref="P:Alt.GUI.ZedGraph.XDate.DateTime"/>
            <see cref="M:System.DateTime.ToString(System.String)"/>
            method in order to provide full localization capability.  The DateTime struct is limited to
            dates from 1 AD onward.  However, all calendar dates in <see cref="T:Alt.GUI.ZedGraph.XDate"/> and
            <see cref="P:Alt.GUI.ZedGraph.XDate.DateTime"/>
            are projected Gregorian calendar dates.  Since the Gregorian calendar was not implemented
            until October 4, 1582 (or later in some countries), Gregorian dates prior to that time are
            really dates that would have been, had the Gregorian calendar existed.  In order to avoid
            throwing an exception, for dates prior to 1 AD, the year will be converted to a positive
            year and the text "(BC)" is appended to the end of the formatted string.  Under this mode, the
            year sequence is 2BC, 1BC, 1AD, 2AD, etc.  There is no year zero.
            </remarks>
            <param name="fmtStr">
            The formatting string to be used for the date.  See
            <see cref="T:System.Globalization.DateTimeFormatInfo"/>
            class for a list of the format types available.</param>
            <returns>A string representation of the date</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.XDate.ToString(System.Double,System.String)">
            <summary>
            Format the specified XL Date value using the specified format string.  The format
            string is specified according to the <see cref="P:Alt.GUI.ZedGraph.XDate.DateTime"/> class.
            </summary>
            <remarks>
            The formatting is done using the <see cref="P:Alt.GUI.ZedGraph.XDate.DateTime"/>
            <see cref="M:System.DateTime.ToString(System.String)"/>
            method in order to provide full localization capability.  The DateTime struct is limited to
            dates from 1 AD onward.  However, all calendar dates in <see cref="T:Alt.GUI.ZedGraph.XDate"/> and
            <see cref="P:Alt.GUI.ZedGraph.XDate.DateTime"/>
            are projected Gregorian calendar dates.  Since the Gregorian calendar was not implemented
            until October 4, 1582 (or later in some countries), Gregorian dates prior to that time are
            really dates that would have been, had the Gregorian calendar existed.  In order to avoid
            throwing an exception, for dates prior to 1 AD, the year will be converted to a positive
            year and the text "(BC)" is appended to the end of the formatted string.  Under this mode, the
            year sequence is 2BC, 1BC, 1AD, 2AD, etc.  There is no year zero.
            </remarks>
            <param name="xlDate">
            The XL date value to be formatted in floating point double format.
            </param>
            <param name="fmtStr">
            The formatting string to be used for the date.  See
            <see cref="T:System.Globalization.DateTimeFormatInfo"/>
            for a list of the format types available.</param>
            <returns>A string representation of the date</returns>
        </member>
        <member name="P:Alt.GUI.ZedGraph.XDate.XLDate">
            <summary>
            Gets or sets the date value for this item in MS Excel format.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.XDate.IsValidDate">
            <summary>
            Returns true if this <see cref="T:Alt.GUI.ZedGraph.XDate"/> struct is in the valid date range
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.XDate.DateTime">
            <summary>
            Gets or sets the date value for this item in .Net DateTime format.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.XDate.JulianDay">
            <summary>
            Gets or sets the date value for this item in Julain day format.  This is the
            Astronomical Julian Day number, so a value of 0.0 corresponds to noon GMT on
            January 1st, -4712.  Thus, Julian Day number 2,400,000.0 corresponds to
            noon GMT on November 16, 1858.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.XDate.DecimalYear">
            <summary>
            Gets or sets the decimal year number (i.e., 1997.345) corresponding to this item.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Y2Axis">
            <summary>
            <see cref="T:Alt.GUI.ZedGraph.Y2Axis"/> inherits from <see cref="T:Alt.GUI.ZedGraph.Axis"/>, and defines the
            special characteristics of a vertical axis, specifically located on
            the right side of the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/> of the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>
            object
            </summary>
            
            <author> John Champion </author>
            <version> $Revision: 3.16 $ $Date: 2007-04-16 00:03:05 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Y2Axis.schema2">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Y2Axis.#ctor">
            <summary>
            Default constructor that sets all <see cref="T:Alt.GUI.ZedGraph.Y2Axis"/> properties to
            default values as defined in the <see cref="T:Alt.GUI.ZedGraph.Y2Axis.Default"/> class
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Y2Axis.#ctor(System.String)">
            <summary>
            Default constructor that sets all <see cref="T:Alt.GUI.ZedGraph.Y2Axis"/> properties to
            default values as defined in the <see cref="T:Alt.GUI.ZedGraph.Y2Axis.Default"/> class, except
            for the axis title
            </summary>
            <param name="title">The <see cref="P:Alt.GUI.ZedGraph.Axis.Title"/> for this axis</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Y2Axis.#ctor(Alt.GUI.ZedGraph.Y2Axis)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The Y2Axis object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Y2Axis.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.Y2Axis.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Y2Axis.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Y2Axis.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Y2Axis.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Y2Axis.SetTransformMatrix(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,System.Double)">
            <summary>
            Setup the Transform Matrix to handle drawing of this <see cref="T:Alt.GUI.ZedGraph.Y2Axis"/>
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Y2Axis.IsPrimary(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Determines if this <see cref="T:Alt.GUI.ZedGraph.Axis"/> object is a "primary" one.
            </summary>
            <remarks>
            The primary axes are the <see cref="T:Alt.GUI.ZedGraph.XAxis"/> (always), the first
            <see cref="T:Alt.GUI.ZedGraph.YAxis"/> in the <see cref="P:Alt.GUI.ZedGraph.GraphPane.YAxisList"/> 
            (<see cref="P:Alt.GUI.ZedGraph.CurveItem.YAxisIndex"/> = 0),  and the first
            <see cref="T:Alt.GUI.ZedGraph.Y2Axis"/> in the <see cref="P:Alt.GUI.ZedGraph.GraphPane.Y2AxisList"/> 
            (<see cref="P:Alt.GUI.ZedGraph.CurveItem.YAxisIndex"/> = 0).  Note that
            <see cref="P:Alt.GUI.ZedGraph.GraphPane.YAxis"/> and <see cref="P:Alt.GUI.ZedGraph.GraphPane.Y2Axis"/>
            always reference the primary axes.
            </remarks>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <returns>true for a primary <see cref="T:Alt.GUI.ZedGraph.Axis"/>, false otherwise</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Y2Axis.CalcCrossShift(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Calculate the "shift" size, in pixels, in order to shift the axis from its default
            location to the value specified by <see cref="P:Alt.GUI.ZedGraph.Axis.Cross"/>.
            </summary>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <returns>The shift amount measured in pixels</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Y2Axis.GetCrossAxis(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Gets the "Cross" axis that corresponds to this axis.
            </summary>
            <remarks>
            The cross axis is the axis which determines the of this Axis when the
            <see cref="P:Alt.GUI.ZedGraph.Axis.Cross">Axis.Cross</see> property is used.  The
            cross axis for any <see cref="T:Alt.GUI.ZedGraph.XAxis"/> or <see cref="T:Alt.GUI.ZedGraph.X2Axis"/>
            is always the primary <see cref="T:Alt.GUI.ZedGraph.YAxis"/>, and
            the cross axis for any <see cref="T:Alt.GUI.ZedGraph.YAxis"/> or <see cref="T:Alt.GUI.ZedGraph.Y2Axis"/> is
            always the primary <see cref="T:Alt.GUI.ZedGraph.XAxis"/>.
            </remarks>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Y2Axis.Default">
            <summary>
            A simple subclass of the <see cref="T:Alt.GUI.ZedGraph.Y2Axis.Default"/> class that defines the
            default property values for the <see cref="T:Alt.GUI.ZedGraph.Y2Axis"/> class.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Y2Axis.Default.IsVisible">
            <summary>
            The default display mode for the <see cref="T:Alt.GUI.ZedGraph.Y2Axis"/>
            (<see cref="P:Alt.GUI.ZedGraph.Axis.IsVisible"/> property). true to display the scale
            values, title, tic marks, false to hide the axis entirely.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Y2Axis.Default.IsZeroLine">
            <summary>
            Determines if a line will be drawn at the zero value for the 
            <see cref="T:Alt.GUI.ZedGraph.Y2Axis"/>, that is, a line that
            divides the negative values from positive values.
            <seealso cref="P:Alt.GUI.ZedGraph.MajorGrid.IsZeroLine"/>.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Y2AxisList">
            <summary>
            A collection class containing a list of <see cref="T:Alt.GUI.ZedGraph.YAxis"/> objects.
            </summary>
            
            <author>John Champion</author>
            <version> $Revision: 3.3 $ $Date: 2006-06-24 20:26:43 $ </version>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Y2AxisList.#ctor">
            <summary>
            Default constructor for the collection class.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Y2AxisList.#ctor(Alt.GUI.ZedGraph.Y2AxisList)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:Alt.GUI.ZedGraph.Y2AxisList"/> object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Y2AxisList.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.Y2AxisList.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Y2AxisList.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Y2AxisList.IndexOf(System.String)">
            <summary>
            Return the zero-based position index of the
            <see cref="T:Alt.GUI.ZedGraph.Axis"/> with the specified <see cref="P:Alt.GUI.ZedGraph.Axis.Title"/>.
            </summary>
            <remarks>The comparison of titles is not case sensitive, but it must include
            all characters including punctuation, spaces, etc.</remarks>
            <param name="title">The <see cref="T:System.String"/> label that is in the
            <see cref="P:Alt.GUI.ZedGraph.Axis.Title"/> attribute of the item to be found.
            </param>
            <returns>The zero-based index of the specified <see cref="T:Alt.GUI.ZedGraph.Axis"/>,
            or -1 if the <see cref="P:Alt.GUI.ZedGraph.Axis.Title"/> was not found in the list</returns>
            <seealso cref="M:Alt.GUI.ZedGraph.Y2AxisList.IndexOfTag(System.String)"/>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Y2AxisList.IndexOfTag(System.String)">
            <summary>
            Return the zero-based position index of the
            <see cref="T:Alt.GUI.ZedGraph.Axis"/> with the specified <see cref="F:Alt.GUI.ZedGraph.Axis.Tag"/>.
            </summary>
            <remarks>In order for this method to work, the <see cref="F:Alt.GUI.ZedGraph.Axis.Tag"/>
            property must be of type <see cref="T:System.String"/>.</remarks>
            <param name="tagStr">The <see cref="T:System.String"/> tag that is in the
            <see cref="F:Alt.GUI.ZedGraph.Axis.Tag"/> attribute of the item to be found.
            </param>
            <returns>The zero-based index of the specified <see cref="T:Alt.GUI.ZedGraph.Axis"/>,
            or -1 if the <see cref="F:Alt.GUI.ZedGraph.Axis.Tag"/> string is not in the list</returns>
            <seealso cref="M:Alt.GUI.ZedGraph.Y2AxisList.IndexOf(System.String)"/>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Y2AxisList.Add(System.String)">
            <summary>
            Create a new <see cref="T:Alt.GUI.ZedGraph.Y2Axis"/> and add it to this list.
            </summary>
            <param name="title">The title string for the new axis</param>
            <returns>An integer representing the ordinal position of the new <see cref="T:Alt.GUI.ZedGraph.Y2Axis"/> in
            this <see cref="T:Alt.GUI.ZedGraph.Y2AxisList"/>.  This is the value that you would set the
            <see cref="P:Alt.GUI.ZedGraph.CurveItem.YAxisIndex"/> property of a given <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> to 
            assign it to this new <see cref="T:Alt.GUI.ZedGraph.Y2Axis"/>.  Note that, for a <see cref="T:Alt.GUI.ZedGraph.Y2Axis"/>,
            you would also need to set the <see cref="P:Alt.GUI.ZedGraph.CurveItem.IsY2Axis"/> property to true.</returns>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Y2AxisList.Item(System.Int32)">
            <summary>
            Indexer to access the specified <see cref="T:Alt.GUI.ZedGraph.Axis"/> object by
            its ordinal position in the list.
            </summary>
            <param name="index">The ordinal position (zero-based) of the
            <see cref="T:Alt.GUI.ZedGraph.YAxis"/> object to be accessed.</param>
            <value>An <see cref="T:Alt.GUI.ZedGraph.Axis"/> object reference.</value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Y2AxisList.Item(System.String)">
            <summary>
            Indexer to access the specified <see cref="T:Alt.GUI.ZedGraph.Axis"/> object by
            its <see cref="P:Alt.GUI.ZedGraph.Axis.Title"/> string.
            </summary>
            <param name="title">The string title of the
            <see cref="T:Alt.GUI.ZedGraph.YAxis"/> object to be accessed.</param>
            <value>A <see cref="T:Alt.GUI.ZedGraph.Axis"/> object reference.</value>
        </member>
        <member name="T:Alt.GUI.ZedGraph.YAxis">
            <summary>
            <see cref="T:Alt.GUI.ZedGraph.YAxis"/> inherits from <see cref="T:Alt.GUI.ZedGraph.Axis"/>, and defines the
            special characteristics of a vertical axis, specifically located on
            the right side of the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/> of the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>
            object
            </summary>
            
            <author> John Champion </author>
            <version> $Revision: 3.16 $ $Date: 2007-04-16 00:03:06 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.YAxis.schema2">
            <summary>
            Current schema value that defines the version of the serialized file
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.YAxis.#ctor">
            <summary>
            Default constructor that sets all <see cref="T:Alt.GUI.ZedGraph.YAxis"/> properties to
            default values as defined in the <see cref="T:Alt.GUI.ZedGraph.YAxis.Default"/> class
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.YAxis.#ctor(System.String)">
            <summary>
            Default constructor that sets all <see cref="T:Alt.GUI.ZedGraph.YAxis"/> properties to
            default values as defined in the <see cref="T:Alt.GUI.ZedGraph.YAxis.Default"/> class, except
            for the axis title
            </summary>
            <param name="title">The <see cref="P:Alt.GUI.ZedGraph.Axis.Title"/> for this axis</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.YAxis.#ctor(Alt.GUI.ZedGraph.YAxis)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The YAxis object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.YAxis.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.YAxis.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.YAxis.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.YAxis.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data
            </param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.YAxis.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object
            </summary>
            <param name="info">A <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data</param>
            <param name="context">A <see cref="T:Alt.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.YAxis.SetTransformMatrix(Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane,System.Double)">
            <summary>
            Setup the Transform Matrix to handle drawing of this <see cref="T:Alt.GUI.ZedGraph.YAxis"/>
            </summary>
            <param name="g">
            A graphic device object to be drawn into.  This is normally e.Graphics from the
            PaintEventArgs argument to the Paint() method.
            </param>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <param name="scaleFactor">
            The scaling factor to be used for rendering objects.  This is calculated and
            passed down by the parent <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object using the
            <see cref="M:Alt.GUI.ZedGraph.PaneBase.CalcScaleFactor"/> method, and is used to proportionally adjust
            font sizes, etc. according to the actual size of the graph.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.YAxis.IsPrimary(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Determines if this <see cref="T:Alt.GUI.ZedGraph.Axis"/> object is a "primary" one.
            </summary>
            <remarks>
            The primary axes are the <see cref="T:Alt.GUI.ZedGraph.XAxis"/> (always), the first
            <see cref="T:Alt.GUI.ZedGraph.YAxis"/> in the <see cref="P:Alt.GUI.ZedGraph.GraphPane.YAxisList"/> 
            (<see cref="P:Alt.GUI.ZedGraph.CurveItem.YAxisIndex"/> = 0),  and the first
            <see cref="T:Alt.GUI.ZedGraph.Y2Axis"/> in the <see cref="P:Alt.GUI.ZedGraph.GraphPane.Y2AxisList"/> 
            (<see cref="P:Alt.GUI.ZedGraph.CurveItem.YAxisIndex"/> = 0).  Note that
            <see cref="P:Alt.GUI.ZedGraph.GraphPane.YAxis"/> and <see cref="P:Alt.GUI.ZedGraph.GraphPane.Y2Axis"/>
            always reference the primary axes.
            </remarks>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <returns>true for a primary <see cref="T:Alt.GUI.ZedGraph.Axis"/>, false otherwise</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.YAxis.CalcCrossShift(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Calculate the "shift" size, in pixels, in order to shift the axis from its default
            location to the value specified by <see cref="P:Alt.GUI.ZedGraph.Axis.Cross"/>.
            </summary>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
            <returns>The shift amount measured in pixels</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.YAxis.GetCrossAxis(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Gets the "Cross" axis that corresponds to this axis.
            </summary>
            <remarks>
            The cross axis is the axis which determines the of this Axis when the
            <see cref="P:Alt.GUI.ZedGraph.Axis.Cross">Axis.Cross</see> property is used.  The
            cross axis for any <see cref="T:Alt.GUI.ZedGraph.XAxis"/> or <see cref="T:Alt.GUI.ZedGraph.X2Axis"/>
            is always the primary <see cref="T:Alt.GUI.ZedGraph.YAxis"/>, and
            the cross axis for any <see cref="T:Alt.GUI.ZedGraph.YAxis"/> or <see cref="T:Alt.GUI.ZedGraph.Y2Axis"/> is
            always the primary <see cref="T:Alt.GUI.ZedGraph.XAxis"/>.
            </remarks>
            <param name="pane">
            A reference to the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object that is the parent or
            owner of this object.
            </param>
        </member>
        <member name="T:Alt.GUI.ZedGraph.YAxis.Default">
            <summary>
            A simple struct that defines the
            default property values for the <see cref="T:Alt.GUI.ZedGraph.YAxis"/> class.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.YAxis.Default.IsVisible">
            <summary>
            The default display mode for the <see cref="T:Alt.GUI.ZedGraph.YAxis"/>
            (<see cref="P:Alt.GUI.ZedGraph.Axis.IsVisible"/> property). true to display the scale
            values, title, tic marks, false to hide the axis entirely.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.YAxis.Default.IsZeroLine">
            <summary>
            Determines if a line will be drawn at the zero value for the 
            <see cref="T:Alt.GUI.ZedGraph.YAxis"/>, that is, a line that
            divides the negative values from positive values.
            <seealso cref="P:Alt.GUI.ZedGraph.MajorGrid.IsZeroLine"/>.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.YAxisList">
            <summary>
            A collection class containing a list of <see cref="T:Alt.GUI.ZedGraph.YAxis"/> objects.
            </summary>
            
            <author>John Champion</author>
            <version> $Revision: 3.3 $ $Date: 2006-06-24 20:26:43 $ </version>
        </member>
        <member name="M:Alt.GUI.ZedGraph.YAxisList.#ctor">
            <summary>
            Default constructor for the collection class.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.YAxisList.#ctor(Alt.GUI.ZedGraph.YAxisList)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:Alt.GUI.ZedGraph.YAxisList"/> object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.YAxisList.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.YAxisList.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.YAxisList.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.YAxisList.IndexOf(System.String)">
            <summary>
            Return the zero-based position index of the
            <see cref="T:Alt.GUI.ZedGraph.Axis"/> with the specified <see cref="P:Alt.GUI.ZedGraph.Axis.Title"/>.
            </summary>
            <remarks>The comparison of titles is not case sensitive, but it must include
            all characters including punctuation, spaces, etc.</remarks>
            <param name="title">The <see cref="T:System.String"/> label that is in the
            <see cref="P:Alt.GUI.ZedGraph.Axis.Title"/> attribute of the item to be found.
            </param>
            <returns>The zero-based index of the specified <see cref="T:Alt.GUI.ZedGraph.Axis"/>,
            or -1 if the <see cref="P:Alt.GUI.ZedGraph.Axis.Title"/> was not found in the list</returns>
            <seealso cref="M:Alt.GUI.ZedGraph.YAxisList.IndexOfTag(System.String)"/>
        </member>
        <member name="M:Alt.GUI.ZedGraph.YAxisList.IndexOfTag(System.String)">
            <summary>
            Return the zero-based position index of the
            <see cref="T:Alt.GUI.ZedGraph.Axis"/> with the specified <see cref="F:Alt.GUI.ZedGraph.Axis.Tag"/>.
            </summary>
            <remarks>In order for this method to work, the <see cref="F:Alt.GUI.ZedGraph.Axis.Tag"/>
            property must be of type <see cref="T:System.String"/>.
            </remarks>
            <param name="tagStr">The <see cref="T:System.String"/> tag that is in the
            <see cref="F:Alt.GUI.ZedGraph.Axis.Tag"/> attribute of the item to be found.
            </param>
            <returns>The zero-based index of the specified <see cref="T:Alt.GUI.ZedGraph.Axis"/>,
            or -1 if the <see cref="F:Alt.GUI.ZedGraph.Axis.Tag"/> string is not in the list</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.YAxisList.Add(System.String)">
            <summary>
            Create a new <see cref="T:Alt.GUI.ZedGraph.YAxis"/> and add it to this list.
            </summary>
            <param name="title">The title string for the new axis</param>
            <returns>An integer representing the ordinal position of the new <see cref="T:Alt.GUI.ZedGraph.YAxis"/> in
            this <see cref="T:Alt.GUI.ZedGraph.YAxisList"/>.  This is the value that you would set the
            <see cref="P:Alt.GUI.ZedGraph.CurveItem.YAxisIndex"/> property of a given <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> to 
            assign it to this new <see cref="T:Alt.GUI.ZedGraph.YAxis"/>.</returns>
        </member>
        <member name="P:Alt.GUI.ZedGraph.YAxisList.Item(System.Int32)">
            <summary>
            Indexer to access the specified <see cref="T:Alt.GUI.ZedGraph.Axis"/> object by
            its ordinal position in the list.
            </summary>
            <param name="index">The ordinal position (zero-based) of the
            <see cref="T:Alt.GUI.ZedGraph.YAxis"/> object to be accessed.</param>
            <value>An <see cref="T:Alt.GUI.ZedGraph.Axis"/> object reference.</value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.YAxisList.Item(System.String)">
            <summary>
            Indexer to access the specified <see cref="T:Alt.GUI.ZedGraph.Axis"/> object by
            its <see cref="P:Alt.GUI.ZedGraph.Axis.Title"/> string.
            </summary>
            <param name="title">The string title of the
            <see cref="T:Alt.GUI.ZedGraph.YAxis"/> object to be accessed.</param>
            <value>A <see cref="T:Alt.GUI.ZedGraph.Axis"/> object reference.</value>
        </member>
        <member name="T:Alt.GUI.ZedGraph.ZedGraphException">
             <summary>
             An exception thrown by ZedGraph.  A child class of <see cref="T:Alt.ApplicationException"/>.
             </summary>
            
             <author> Jerry Vos modified by John Champion</author>
             <version> $Revision: 3.2 $ $Date: 2006-06-24 20:26:44 $ </version>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZedGraphException.#ctor(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Alt.GUI.ZedGraph.ZedGraphException"/>
            class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            instance that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            instance that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZedGraphException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception"/> class with a specified
            error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.
            If the innerException parameter is not a null reference, the current exception is raised
            in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZedGraphException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZedGraphException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception"/> class.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.ZoomState">
            <summary>
            A class that captures all the scale range settings for a <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>.
            </summary>
            <remarks>
            This class is used to store scale ranges in order to allow zooming out to
            prior scale range states.  <see cref="T:Alt.GUI.ZedGraph.ZoomState"/> objects are maintained in the
            <see cref="T:Alt.GUI.ZedGraph.ZoomStateStack"/> collection.  The <see cref="T:Alt.GUI.ZedGraph.ZoomState"/> object holds
            a <see cref="T:Alt.GUI.ZedGraph.ScaleState"/> object for each of the three axes; the <see cref="T:Alt.GUI.ZedGraph.XAxis"/>,
            the <see cref="T:Alt.GUI.ZedGraph.YAxis"/>, and the <see cref="T:Alt.GUI.ZedGraph.Y2Axis"/>.
            </remarks>
            <author> John Champion </author>
            <version> $Revision: 3.15 $ $Date: 2007-04-16 00:03:07 $ </version>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZoomState._xAxis">
            <summary>
            <see cref="T:Alt.GUI.ZedGraph.ScaleState"/> objects to store the state data from the axes.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZoomState._x2Axis">
            <summary>
            <see cref="T:Alt.GUI.ZedGraph.ScaleState"/> objects to store the state data from the axes.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZoomState._type">
            <summary>
            An enum value indicating the type of adjustment being made to the
            scale range state.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZoomState.#ctor(Alt.GUI.ZedGraph.GraphPane,Alt.GUI.ZedGraph.ZoomState.StateType)">
            <summary>
            Construct a <see cref="T:Alt.GUI.ZedGraph.ZoomState"/> object from the scale ranges settings contained
            in the specified <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>.
            </summary>
            <param name="pane">The <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> from which to obtain the scale
            range values.
            </param>
            <param name="type">A <see cref="T:Alt.GUI.ZedGraph.ZoomState.StateType"/> enumeration that indicates whether
            this saved state is from a pan or zoom.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZoomState.#ctor(Alt.GUI.ZedGraph.ZoomState)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:Alt.GUI.ZedGraph.ZoomState"/> object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZoomState.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.ZoomState.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZoomState.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZoomState.ApplyState(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Copy the properties from this <see cref="T:Alt.GUI.ZedGraph.ZoomState"/> out to the specified <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>.
            </summary>
            <param name="pane">The <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> to which the scale range properties should be
            copied.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZoomState.IsChanged(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Determine if the state contained in this <see cref="T:Alt.GUI.ZedGraph.ZoomState"/> object is different from
            the state of the specified <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>.
            </summary>
            <param name="pane">The <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object with which to compare states.</param>
            <returns>true if the states are different, false otherwise</returns>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZoomState.Type">
            <summary>
            Gets a <see cref="T:Alt.GUI.ZedGraph.ZoomState.StateType"/> value indicating the type of action (zoom or pan)
            saved by this <see cref="T:Alt.GUI.ZedGraph.ZoomState"/>.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZoomState.TypeString">
            <summary>
            Gets a string representing the type of adjustment that was made when this scale
            state was saved.
            </summary>
            <value>A string representation for the state change type; typically
            "Pan", "Zoom", or "Scroll".</value>
        </member>
        <member name="T:Alt.GUI.ZedGraph.ZoomState.StateType">
            <summary>
            An enumeration that describes whether a given state is the result of a Pan or Zoom
            operation.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZoomState.StateType.Zoom">
            <summary>
            Indicates the <see cref="T:Alt.GUI.ZedGraph.ZoomState"/> object is from a Zoom operation
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZoomState.StateType.WheelZoom">
            <summary>
            Indicates the <see cref="T:Alt.GUI.ZedGraph.ZoomState"/> object is from a Wheel Zoom operation
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZoomState.StateType.Pan">
            <summary>
            Indicates the <see cref="T:Alt.GUI.ZedGraph.ZoomState"/> object is from a Pan operation
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.ZoomState.StateType.Scroll">
            <summary>
            Indicates the <see cref="T:Alt.GUI.ZedGraph.ZoomState"/> object is from a Scroll operation
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.ZoomStateStack">
            <summary>
            A LIFO stack of prior <see cref="T:Alt.GUI.ZedGraph.ZoomState"/> objects, used to allow zooming out to prior
            states (of scale range settings).
            </summary>
            <author> John Champion </author>
            <version> $Revision: 3.1 $ $Date: 2006-06-24 20:26:44 $ </version>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZoomStateStack.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZoomStateStack.#ctor(Alt.GUI.ZedGraph.ZoomStateStack)">
            <summary>
            The Copy Constructor
            </summary>
            <param name="rhs">The <see cref="T:Alt.GUI.ZedGraph.ZoomStateStack"/> object from which to copy</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZoomStateStack.Alt#ICloneable#Clone">
            <summary>
            Implement the <see cref="T:Alt.ICloneable"/> interface in a typesafe manner by just
            calling the typed version of <see cref="M:Alt.GUI.ZedGraph.ZoomStateStack.Clone"/>
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZoomStateStack.Clone">
            <summary>
            Typesafe, deep-copy clone method.
            </summary>
            <returns>A new, independent copy of this class</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZoomStateStack.Push(Alt.GUI.ZedGraph.GraphPane,Alt.GUI.ZedGraph.ZoomState.StateType)">
            <summary>
            Add the scale range information from the specified <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object as a
            new <see cref="T:Alt.GUI.ZedGraph.ZoomState"/> entry on the stack.
            </summary>
            <param name="pane">The <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object from which the scale range
            information should be copied.</param>
            <param name="type">A <see cref="T:Alt.GUI.ZedGraph.ZoomState.StateType"/> enumeration that indicates whether this
            state is the result of a zoom or pan operation.</param>
            <returns>The resultant <see cref="T:Alt.GUI.ZedGraph.ZoomState"/> object that was pushed on the stack.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZoomStateStack.Push(Alt.GUI.ZedGraph.ZoomState)">
            <summary>
            Add the scale range information from the specified <see cref="T:Alt.GUI.ZedGraph.ZoomState"/> object as a
            new <see cref="T:Alt.GUI.ZedGraph.ZoomState"/> entry on the stack.
            </summary>
            <param name="state">The <see cref="T:Alt.GUI.ZedGraph.ZoomState"/> object to be placed on the stack.</param>
            <returns>The <see cref="T:Alt.GUI.ZedGraph.ZoomState"/> object (same as the <see paramref="state"/>
            parameter).</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZoomStateStack.Pop(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Pop a <see cref="T:Alt.GUI.ZedGraph.ZoomState"/> entry from the top of the stack, and apply the properties
            to the specified <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object.
            </summary>
            <param name="pane">The <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object to which the scale range
            information should be copied.</param>
            <returns>The <see cref="T:Alt.GUI.ZedGraph.ZoomState"/> object that was "popped" from the stack and applied
            to the specified <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>.  null if no <see cref="T:Alt.GUI.ZedGraph.ZoomState"/> was
            available (the stack was empty).</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.ZoomStateStack.PopAll(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Pop the <see cref="T:Alt.GUI.ZedGraph.ZoomState"/> entry from the bottom of the stack, and apply the properties
            to the specified <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object.  Clear the stack completely.
            </summary>
            <param name="pane">The <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> object to which the scale range
            information should be copied.</param>
            <returns>The <see cref="T:Alt.GUI.ZedGraph.ZoomState"/> object at the bottom of the stack that was applied
            to the specified <see cref="T:Alt.GUI.ZedGraph.GraphPane"/>.  null if no <see cref="T:Alt.GUI.ZedGraph.ZoomState"/> was
            available (the stack was empty).</returns>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZoomStateStack.IsEmpty">
            <summary>
            Public readonly property that indicates if the stack is empty
            </summary>
            <value>true for an empty stack, false otherwise</value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.ZoomStateStack.Top">
            <summary>
            Gets a reference to the <see cref="T:Alt.GUI.ZedGraph.ZoomState"/> object at the top of the stack,
            without actually removing it from the stack.
            </summary>
            <value>A <see cref="T:Alt.GUI.ZedGraph.ZoomState"/> object reference, or null if the stack is empty.</value>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Demo.AboutForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Demo.ChartTabForm">
            <summary>
            A form that displays a tree, a location for displaying charts, and
            a text box for describing the currently showing chart.
            </summary>
            
            <author> Jerry Vos with mods by John Champion</author>
            <version> $Revision: 1.11 $ $Date: 2006-06-24 20:26:42 $ </version>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Demo.ChartTabForm.loadDemos">
            <summary>
            Loads the demos into the form.<p/>
            
            Is basically going to be
            <code>
            loadDemo(new XXXDemo());
            loadDemo(new YYYDemo());
            </code>
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Demo.ChartTabForm.buildPrimaryTree">
            <summary>
            Builds the top level of the tree, one level for each
            DemoType.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Demo.ChartTabForm.buildPrimaryNode(Alt.GUI.ZedGraph.Demo.DemoType)">
            <summary>
            Builds a top level node in the tree for a DemoType.
            </summary>
            <param name="type">The type of demo.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Demo.ChartTabForm.loadDemo(Alt.GUI.ZedGraph.Demo.ZedGraphDemo)">
            <summary>
            Loads a demo into the correct place in the tree.
            </summary>
            <param name="demo">The demo to load.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Demo.ChartTabForm.TypeToName(Alt.GUI.ZedGraph.Demo.DemoType)">
            <summary>
            Generates a string name for a demo type.
            </summary>
            
            <param name="type">A DemoType</param>
            <returns>A name for the DemoType</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Demo.ChartTabForm.Init(System.Object)">
            <summary>
            Loads a demo into the frame
            </summary>
            <param name="key">The key the demo is stored in demos under</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Demo.ChartTabForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Demo.ChartTabForm.demoTree_AfterSelect(System.Object,Alt.GUI.TreeViewEventArgs)">
            <summary>
            Loads a new demo up based on which demo's name was clicked on in the
            tree.
            </summary>
            
            <param name="sender">The source of the message (unused)</param>
            <param name="e">
            Where the name of the clicked demo is retrieved from
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Demo.ChartTabForm.mnuFExit_Click(System.Object,System.EventArgs)">
            <summary>
            Ends the application.
            </summary>
            <param name="sender">Ignored.</param>
            <param name="e">Ignored.</param>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Demo.ChartTabForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Demo.ChartTabForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Demo.DemoTabForm">
            <summary>
            An implementation of ChartTabForm that loads up ZedGraph demos.
            </summary>
            
            <author> Jerry Vos </author>
            <version> $Revision: 1.12 $ $Date: 2007-01-26 09:01:49 $ </version>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Demo.LicenseForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Demo.BarChartSampleDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Demo.DemoBase">
            <summary>
            An implementation of the things necessary for most ZedGraphDemos.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Demo.ZedGraphDemo">
            <summary>
            Interface for demos.  This allows the demos to be self-contained, 
            simplifying reading their code and allowing for quick switches 
            between demos.
            </summary>
            
            <author> Jerry Vos </author>
            <version> $Revision: 1.2 $ $Date: 2005-03-02 19:18:44 $ </version>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Demo.ZedGraphDemo.Description">
            <summary>
            A description of what this demo is showing.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Demo.ZedGraphDemo.Title">
            <summary>
            The demo's title.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Demo.ZedGraphDemo.ZedGraphControl">
            <summary>
            The control used to display this demo.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Demo.ZedGraphDemo.Types">
            <summary>
            A collection of DemoType objects that this demo applies to.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Demo.DemoBase.Pane">
            <summary>
            The graph pane the chart is show in.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Demo.DemoBase.MasterPane">
            <summary>
            The graph pane the chart is show in.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Demo.DemoBase.GraphPane">
            <summary>
            The graph pane the chart is show in (same as .Pane).
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Demo.DemoBase.ZedGraphControl">
            <summary>
            The control the graph pane is in.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Demo.BarGraphBandDemo">
            <summary>
            Summary description for BarGraphBandDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Demo.BaseTicDemo">
            <summary>
            Summary description for BaseTicDemo
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Demo.ComboDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Demo.CrossLineDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Demo.DateAxisSampleDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Demo.DemoType">
            <summary>
            Types of demos, these are used by ZedGraphDemos to describe what kind
            of demo they are.<p/>
            
            For new types to work in the ChartTabForm the name of the type has to 
            be added to ChartTabForm.TypeToName(...)
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Demo.DualYDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Demo.ErrorBarDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Demo.FilledBarGraphDemo">
            <summary>
            Summary description for BarGraphBandDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Demo.FilledCurveDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Demo.GradientByValueDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Demo.HiLowBarDemo">
            <summary>
            Summary description for HiLowBarDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Demo.HiLowCloseDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Demo.HorizontalBarDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Demo.HorizontalBarSampleDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Demo.HorizontalBarsWithLabelsDemo">
            <summary>
            Summary description for BarGraphBandDemo.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Demo.HorizontalBarsWithLabelsDemo.CreateBarLabels(Alt.GUI.ZedGraph.GraphPane,System.Boolean,System.String)">
            <summary>
            Create a TextLabel for each bar in the GraphPane.
            Call this method only after calling AxisChange()
            </summary>
            <remarks>
            This method will go through the bars, create a label that corresponds to the bar value,
            and place it on the graph depending on user preferences.  This works for horizontal or
            vertical bars in clusters or stacks.</remarks>
            <param name="pane">The GraphPane in which to place the text labels.</param>
            <param name="isBarCenter">true to center the labels inside the bars, false to
            place the labels just above the top of the bar.</param>
            <param name="valueFormat">The double.ToString string format to use for creating
            the labels
            </param>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Demo.ImageForSymbolDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Demo.InitialSampleDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Demo.JapaneseCandleStickDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Demo.LineGraphBandDemo">
            <summary>
            Summary description for BarGraphBandDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Demo.LineStackingDemo">
            <summary>
            Summary description for LineStackingDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Demo.MasterPaneDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Demo.MasterPaneLayout">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Demo.MasterSampleDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Demo.ModInitialSampleDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Demo.MultiPieChartDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Demo.MultiYDemo">
            <summary>
            Summary description for MultiYDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Demo.OHLCBarDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Demo.OverlayBarDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Demo.PercentStkBarDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Demo.PieChartDemo">
            <summary>
            Summary description for PieChartDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Demo.PieSampleDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Demo.SampleMultiPointListDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Demo.SineBarGraphDemo">
            <summary>
            Summary description for BarGraphBandDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Demo.SmoothChartDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Demo.SortedOverlayBarDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Demo.StackedBarSampleDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Demo.StackedBarsWithLabelsDemo">
            <summary>
            Summary description for BarGraphBandDemo.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Demo.StackedBarsWithLabelsDemo.CreateBarLabels(Alt.GUI.ZedGraph.GraphPane,System.Boolean,System.String)">
            <summary>
            Create a TextLabel for each bar in the GraphPane.
            Call this method only after calling AxisChange()
            </summary>
            <remarks>
            This method will go through the bars, create a label that corresponds to the bar value,
            and place it on the graph depending on user preferences.  This works for horizontal or
            vertical bars in clusters or stacks.</remarks>
            <param name="pane">The GraphPane in which to place the text labels.</param>
            <param name="isBarCenter">true to center the labels inside the bars, false to
            place the labels just above the top of the bar.</param>
            <param name="valueFormat">The double.ToString string format to use for creating
            the labels
            </param>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Demo.StepChartDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Demo.StickItemDemo">
            <summary>
            Summary description for StickItemDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Demo.SynchronizedPanes">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Demo.TextAxisSampleDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Demo.TransparentDemo1">
            <summary>
            Summary description for TransparentDemo1.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Demo.VerticalBarsWithLabelsDemo">
            <summary>
            Summary description for BarGraphBandDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl">
            <summary>
            The ZedGraphControl class provides a UserControl interface to the
            <see cref="N:Alt.GUI.ZedGraph"/> class library.  This allows ZedGraph to be installed
            as a control in the Visual Studio toolbox.  You can use the control by simply
            dragging it onto a form in the Visual Studio form editor.  All graph
            attributes are accessible via the <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.GraphPane"/>
            property.
            </summary>
            <author> John Champion revised by Jerry Vos </author>
            <version> $Revision: 3.86 $ $Date: 2007-11-03 04:41:29 $ </version>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.GetObjectState">
            <summary>
            Find the object currently under the mouse cursor, and return its state.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.contextMenuStrip1_Opening(System.Object,Alt.ComponentModel.CancelEventArgs)">
            <summary>
            protected method to handle the popup context menu in the <see cref="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl"/>.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.MenuClick_Copy(System.Object,System.EventArgs)">
            <summary>
            Handler for the "Copy" context menu item.  Copies the current image to a bitmap on the
            clipboard.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.Copy(System.Boolean)">
            <summary>
            Handler for the "Copy" context menu item.  Copies the current image to a bitmap on the
            clipboard.
            </summary>
            <param name="isShowMessage">boolean value that determines whether or not a prompt will be
            displayed.  true to show a message of "Image Copied to ClipBoard".</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ClipboardCopyThread">
            <summary>
            A threaded version of the copy method to avoid crash with MTA
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ImageRender">
            <summary>
            Setup for creation of a new image, applying appropriate anti-alias properties and
            returning the resultant image file
            </summary>
            <returns></returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.MenuClick_ShowValues(System.Object,System.EventArgs)">
            <summary>
            Handler for the "Show Values" context menu item.  Toggles the <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsShowPointValues"/>
            property, which activates the point value tooltips.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.MenuClick_RestoreScale(System.Object,System.EventArgs)">
            <summary>
            Handler for the "Set Scale to Default" context menu item.  Sets the scale ranging to
            full auto mode for all axes.
            </summary>
            <remarks>
            This method differs from the <see cref="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomOutAll(Alt.GUI.ZedGraph.GraphPane)"/> method in that it sets the scales
            to full auto mode.  The <see cref="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomOutAll(Alt.GUI.ZedGraph.GraphPane)"/> method sets the scales to their initial
            setting prior to any user actions (which may or may not be full auto mode).
            </remarks>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.RestoreScale(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Handler for the "Set Scale to Default" context menu item.  Sets the scale ranging to
            full auto mode for all axes.
            </summary>
            <remarks>
            This method differs from the <see cref="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomOutAll(Alt.GUI.ZedGraph.GraphPane)"/> method in that it sets the scales
            to full auto mode.  The <see cref="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomOutAll(Alt.GUI.ZedGraph.GraphPane)"/> method sets the scales to their initial
            setting prior to any user actions (which may or may not be full auto mode).
            </remarks>
            <param name="primaryPane">The <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.GraphPane"/> object which is to have the
            scale restored</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.MenuClick_ZoomOut(System.Object,System.EventArgs)">
            <summary>
            Handler for the "UnZoom/UnPan" context menu item.  Restores the scale ranges to the values
            before the last zoom or pan operation.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomOut(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Handler for the "UnZoom/UnPan" context menu item.  Restores the scale ranges to the values
            before the last zoom, pan, or scroll operation.
            </summary>
            <remarks>
            Triggers a <see cref="E:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomEvent"/> for any type of undo (including pan, scroll, zoom, and
            wheelzoom).  This method will affect all the
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.GraphPane"/> objects in the <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.MasterPane"/> if
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsSynchronizeXAxes"/> or <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsSynchronizeYAxes"/> is true.
            </remarks>
            <param name="primaryPane">The primary <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.GraphPane"/> object which is to be
            zoomed out</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.MenuClick_ZoomOutAll(System.Object,System.EventArgs)">
            <summary>
            Handler for the "Undo All Zoom/Pan" context menu item.  Restores the scale ranges to the values
            before all zoom and pan operations
            </summary>
            <remarks>
            This method differs from the <see cref="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.RestoreScale(Alt.GUI.ZedGraph.GraphPane)"/> method in that it sets the scales
            to their initial setting prior to any user actions.  The <see cref="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.RestoreScale(Alt.GUI.ZedGraph.GraphPane)"/> method
            sets the scales to full auto mode (regardless of what the initial setting may have been).
            </remarks>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomOutAll(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Handler for the "Undo All Zoom/Pan" context menu item.  Restores the scale ranges to the values
            before all zoom and pan operations
            </summary>
            <remarks>
            This method differs from the <see cref="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.RestoreScale(Alt.GUI.ZedGraph.GraphPane)"/> method in that it sets the scales
            to their initial setting prior to any user actions.  The <see cref="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.RestoreScale(Alt.GUI.ZedGraph.GraphPane)"/> method
            sets the scales to full auto mode (regardless of what the initial setting may have been).
            </remarks>
            <param name="primaryPane">The <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.GraphPane"/> object which is to be zoomed out</param>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl._masterPane">
            <summary>
            This private field contains the instance for the MasterPane object of this control.
            You can access the MasterPane object through the public property
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.MasterPane"/>. This is nulled when this Control is
            disposed.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl._isShowPointValues">
            <summary>
            private field that determines whether or not tooltips will be displayed
            when the mouse hovers over data values.  Use the public property
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsShowPointValues"/> to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl._isShowCursorValues">
            <summary>
            private field that determines whether or not tooltips will be displayed
            showing the scale values while the mouse is located within the ChartRect.
            Use the public property <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsShowCursorValues"/> to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl._pointValueFormat">
            <summary>
            private field that determines the format for displaying tooltip values.
            This format is passed to <see cref="M:Alt.GUI.ZedGraph.PointPairBase.ToString(System.String)"/>.
            Use the public property <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.PointValueFormat"/> to access this
            value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl._isShowContextMenu">
            <summary>
            private field that determines whether or not the context menu will be available.  Use the
            public property <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsShowContextMenu"/> to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl._isShowCopyMessage">
            <summary>
            private field that determines whether or not a message box will be shown in response to
            a context menu "Copy" command.  Use the
            public property <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsShowCopyMessage"/> to access this value.
            </summary>
            <remarks>
            Note that, if this value is set to false, the user will receive no indicative feedback
            in response to a Copy action.
            </remarks>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl._isPrintScaleAll">
            <summary>
            private field that determines whether the settings of
            <see cref="P:Alt.GUI.ZedGraph.PaneBase.IsFontsScaled"/> and <see cref="P:Alt.GUI.ZedGraph.PaneBase.IsPenWidthScaled"/>
            will be overridden to true during printing operations.
            </summary>
            <remarks>
            Printing involves pixel maps that are typically of a dramatically different dimension
            than on-screen pixel maps.  Therefore, it becomes more important to scale the fonts and
            lines to give a printed image that looks like what is shown on-screen.  The default
            setting for <see cref="P:Alt.GUI.ZedGraph.PaneBase.IsFontsScaled"/> is true, but the default
            setting for <see cref="P:Alt.GUI.ZedGraph.PaneBase.IsPenWidthScaled"/> is false.
            </remarks>
            <value>
            A value of true will cause both <see cref="P:Alt.GUI.ZedGraph.PaneBase.IsFontsScaled"/> and
            <see cref="P:Alt.GUI.ZedGraph.PaneBase.IsPenWidthScaled"/> to be temporarily set to true during
            printing operations.
            </value>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl._isPrintKeepAspectRatio">
            <summary>
            private field that determines whether or not the visible aspect ratio of the
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.MasterPane"/> <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/> will be preserved
            when printing this <see cref="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl"/>.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl._isPrintFillPage">
            <summary>
            private field that determines whether or not the <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.MasterPane"/>
            <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/> dimensions will be expanded to fill the
            available space when printing this <see cref="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl"/>.
            </summary>
            <remarks>
            If <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsPrintKeepAspectRatio"/> is also true, then the <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.MasterPane"/>
            <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/> dimensions will be expanded to fit as large
            a space as possible while still honoring the visible aspect ratio.
            </remarks>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl._pointDateFormat">
            <summary>
            private field that determines the format for displaying tooltip date values.
            This format is passed to <see cref="M:Alt.GUI.ZedGraph.XDate.ToString(System.String)"/>.
            Use the public property <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.PointDateFormat"/> to access this
            value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl._isEnableVZoom">
            <summary>
            private value that determines whether or not zooming is enabled for the control in the
            vertical direction.  Use the public property <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableVZoom"/> to access this
            value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl._isEnableHZoom">
            <summary>
            private value that determines whether or not zooming is enabled for the control in the
            horizontal direction.  Use the public property <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableHZoom"/> to access this
            value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl._isEnableWheelZoom">
            <summary>
            private value that determines whether or not zooming is enabled with the mousewheel.
            Note that this property is used in combination with the <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableHZoom"/> and
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableVZoom"/> properties to control zoom options.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl._isEnableVEdit">
            <summary>
            private value that determines whether or not point editing is enabled in the
            vertical direction.  Use the public property <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableVEdit"/> to access this
            value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl._isEnableHEdit">
            <summary>
            private value that determines whether or not point editing is enabled in the
            horizontal direction.  Use the public property <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableHEdit"/> to access this
            value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl._isEnableHPan">
            <summary>
            private value that determines whether or not panning is allowed for the control in the
            horizontal direction.  Use the
            public property <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableHPan"/> to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl._isEnableVPan">
            <summary>
            private value that determines whether or not panning is allowed for the control in the
            vertical direction.  Use the
            public property <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableVPan"/> to access this value.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl._isEnableSelection">
            <summary>
            Internal variable that indicates if the control can manage selections. 
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl._selection">
            <summary>
            This private field contains a list of selected CurveItems.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl._linkButtons">
            <summary>
            Gets or sets a value that determines which Mouse button will be used to click on
            linkable objects
            </summary>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.LinkModifierKeys"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl._linkModifierKeys">
            <summary>
            Gets or sets a value that determines which modifier keys will be used to click
            on linkable objects
            </summary>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.LinkButtons"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl._editButtons">
            <summary>
            Gets or sets a value that determines which Mouse button will be used to edit point
            data values
            </summary>
            <remarks>
            This setting only applies if <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableHEdit"/> and/or
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableVEdit"/> are true.
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.EditModifierKeys"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl._editModifierKeys">
            <summary>
            Gets or sets a value that determines which modifier keys will be used to edit point
            data values
            </summary>
            <remarks>
            This setting only applies if <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableHEdit"/> and/or
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableVEdit"/> are true.
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.EditButtons"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl._selectButtons">
            <summary>
            Gets or sets a value that determines which mouse button will be used to select
            <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>'s.
            </summary>
            <remarks>
            This setting only applies if <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableSelection"/> is true.
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.SelectModifierKeys"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl._selectModifierKeys">
            <summary>
            Gets or sets a value that determines which modifier keys will be used to select
            <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>'s.
            </summary>
            <remarks>
            This setting only applies if <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableSelection"/> is true.
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.SelectButtons"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl._zoomButtons">
            <summary>
            Gets or sets a value that determines which Mouse button will be used to perform
            zoom operations
            </summary>
            <remarks>
            This setting only applies if <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableHZoom"/> and/or
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableVZoom"/> are true.
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomModifierKeys"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomButtons2"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomModifierKeys2"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl._zoomModifierKeys">
            <summary>
            Gets or sets a value that determines which modifier keys will be used to perform
            zoom operations
            </summary>
            <remarks>
            This setting only applies if <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableHZoom"/> and/or
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableVZoom"/> are true.
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomButtons"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomButtons2"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomModifierKeys2"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl._zoomButtons2">
            <summary>
            Gets or sets a value that determines which Mouse button will be used as a
            secondary option to perform zoom operations
            </summary>
            <remarks>
            This setting only applies if <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableHZoom"/> and/or
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableVZoom"/> are true.
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomModifierKeys2"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomButtons"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomModifierKeys"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl._zoomModifierKeys2">
            <summary>
            Gets or sets a value that determines which modifier keys will be used as a
            secondary option to perform zoom operations
            </summary>
            <remarks>
            This setting only applies if <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableHZoom"/> and/or
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableVZoom"/> are true.
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomButtons"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomButtons2"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomModifierKeys2"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl._panButtons">
            <summary>
            Gets or sets a value that determines which Mouse button will be used to perform
            panning operations
            </summary>
            <remarks>
            This setting only applies if <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableHPan"/> and/or
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableVPan"/> are true.  A Pan operation (dragging the graph with
            the mouse) should not be confused with a scroll operation (using a scroll bar to
            move the graph).
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.PanModifierKeys"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.PanButtons2"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.PanModifierKeys2"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl._panModifierKeys">
            <summary>
            Gets or sets a value that determines which modifier keys will be used to perform
            panning operations
            </summary>
            <remarks>
            This setting only applies if <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableHPan"/> and/or
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableVPan"/> are true.  A Pan operation (dragging the graph with
            the mouse) should not be confused with a scroll operation (using a scroll bar to
            move the graph).
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.PanButtons"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.PanButtons2"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.PanModifierKeys2"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl._panButtons2">
            <summary>
            Gets or sets a value that determines which Mouse button will be used as a
            secondary option to perform panning operations
            </summary>
            <remarks>
            This setting only applies if <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableHPan"/> and/or
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableVPan"/> are true.  A Pan operation (dragging the graph with
            the mouse) should not be confused with a scroll operation (using a scroll bar to
            move the graph).
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.PanModifierKeys2"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.PanButtons"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.PanModifierKeys"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl._panModifierKeys2">
            <summary>
            Gets or sets a value that determines which modifier keys will be used as a
            secondary option to perform panning operations
            </summary>
            <remarks>
            This setting only applies if <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableHPan"/> and/or
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableVPan"/> are true.  A Pan operation (dragging the graph with
            the mouse) should not be confused with a scroll operation (using a scroll bar to
            move the graph).
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.PanButtons2"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.PanButtons"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.PanModifierKeys"/>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl._isZooming">
            <summary>
            Internal variable that indicates the control is currently being zoomed. 
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl._isPanning">
            <summary>
            Internal variable that indicates the control is currently being panned.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl._isEditing">
            <summary>
            Internal variable that indicates a point value is currently being edited.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl._isSelecting">
            <summary>
            Internal variable that indicates the control is currently using selection. 
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl._dragPane">
            <summary>
            Internal variable that stores the <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.GraphPane"/> reference for the Pane that is
            currently being zoomed or panned.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl._dragStartPt">
            <summary>
            Internal variable that stores a rectangle which is either the zoom rectangle, or the incremental
            pan amount since the last mousemove event.
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl._zoomState">
            <summary>
            private field that stores the state of the scale ranges prior to starting a panning action.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.#ctor(Alt.GUI.Temporary.Gwen.Control.Base)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.Dispose">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if the components should be
            disposed, false otherwise</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.OnPaint(Alt.GUI.PaintEventArgs)">
            <summary>
            Called by the system to update the control on-screen
            </summary>
            <param name="e">
            A PaintEventArgs object containing the Graphics specifications
            for this Paint event.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZedGraphControl_ReSize(System.Object,System.EventArgs)">
            <summary>
            Called when the control has been resized.
            </summary>
            <param name="sender">
            A reference to the control that has been resized.
            </param>
            <param name="e">
            An EventArgs object.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.AxisChange">
            <summary>This performs an axis change command on the graphPane.
            </summary>
            <remarks>
            This is the same as
            <c>ZedGraphControl.GraphPane.AxisChange( ZedGraphControl.CreateGraphics() )</c>, however,
            this method also calls <see cref="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.SetScrollRangeFromData"/> if <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsAutoScrollRange"/>
            is true.
            </remarks>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomStateSave(Alt.GUI.ZedGraph.GraphPane,Alt.GUI.ZedGraph.ZoomState.StateType)">
            <summary>
            Save the current states of the GraphPanes to a separate collection.  Save a single
            (<see paramref="primaryPane"/>) GraphPane if the panes are not synchronized
            (see <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsSynchronizeXAxes"/> and <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsSynchronizeYAxes"/>),
            or save a list of states for all GraphPanes if the panes are synchronized.
            </summary>
            <param name="primaryPane">The primary GraphPane on which zoom/pan/scroll operations
            are taking place</param>
            <param name="type">The <see cref="T:Alt.GUI.ZedGraph.ZoomState.StateType"/> that describes the
            current operation</param>
            <returns>The <see cref="T:Alt.GUI.ZedGraph.ZoomState"/> that corresponds to the
            <see paramref="primaryPane"/>.
            </returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomStateRestore(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Restore the states of the GraphPanes to a previously saved condition (via
            <see cref="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomStateSave(Alt.GUI.ZedGraph.GraphPane,Alt.GUI.ZedGraph.ZoomState.StateType)"/>.  This is essentially an "undo" for live
            pan and scroll actions.  Restores a single
            (<see paramref="primaryPane"/>) GraphPane if the panes are not synchronized
            (see <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsSynchronizeXAxes"/> and <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsSynchronizeYAxes"/>),
            or save a list of states for all GraphPanes if the panes are synchronized.
            </summary>
            <param name="primaryPane">The primary GraphPane on which zoom/pan/scroll operations
            are taking place</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomStatePush(Alt.GUI.ZedGraph.GraphPane)">
            <summary>
            Place the previously saved states of the GraphPanes on the individual GraphPane
            <see cref="P:Alt.GUI.ZedGraph.GraphPane.ZoomStack"/> collections.  This provides for an
            option to undo the state change at a later time.  Save a single
            (<see paramref="primaryPane"/>) GraphPane if the panes are not synchronized
            (see <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsSynchronizeXAxes"/> and <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsSynchronizeYAxes"/>),
            or save a list of states for all GraphPanes if the panes are synchronized.
            </summary>
            <param name="primaryPane">The primary GraphPane on which zoom/pan/scroll operations
            are taking place</param>
            <returns>The <see cref="T:Alt.GUI.ZedGraph.ZoomState"/> that corresponds to the
            <see paramref="primaryPane"/>.
            </returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomStateClear">
            <summary>
            Clear the collection of saved states.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomStatePurge">
            <summary>
            Clear all states from the undo stack for each GraphPane.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZedGraphControl_MouseDown(System.Object,Alt.GUI.MouseEventArgs)">
            <summary>
            Handle a MouseDown event in the <see cref="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl"/>
            </summary>
            <param name="sender">A reference to the <see cref="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl"/></param>
            <param name="e">A <see cref="T:Alt.GUI.MouseEventArgs"/> instance</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.SetCursor">
            <summary>
            Set the cursor according to the current mouse location.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.SetCursor(Alt.Sketch.PointI)">
            <summary>
            Set the cursor according to the current mouse location.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZedGraphControl_KeyUp(System.Object,Alt.GUI.KeyEventArgs)">
            <summary>
            Handle a KeyUp event
            </summary>
            <param name="sender">The <see cref="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl"/> in which the KeyUp occurred.</param>
            <param name="e">A <see cref="T:Alt.GUI.KeyEventArgs"/> instance.</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZedGraphControl_KeyDown(System.Object,Alt.GUI.KeyEventArgs)">
            <summary>
            Handle the Key Events so ZedGraph can Escape out of a panning or zooming operation.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZedGraphControl_MouseUp(System.Object,Alt.GUI.MouseEventArgs)">
            <summary>
            Handle a MouseUp event in the <see cref="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl"/>
            </summary>
            <param name="sender">A reference to the <see cref="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl"/></param>
            <param name="e">A <see cref="T:Alt.GUI.MouseEventArgs"/> instance</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.MakeValueLabel(Alt.GUI.ZedGraph.Axis,System.Double,System.Int32,System.Boolean)">
            <summary>
            Make a string label that corresponds to a user scale value.
            </summary>
            <param name="axis">The axis from which to obtain the scale value.  This determines
            if it's a date value, linear, log, etc.</param>
            <param name="val">The value to be made into a label</param>
            <param name="iPt">The ordinal position of the value</param>
            <param name="isOverrideOrdinal">true to override the ordinal settings of the axis,
            and prefer the actual value instead.</param>
            <returns>The string label.</returns>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZedGraphControl_MouseMove(System.Object,Alt.GUI.MouseEventArgs)">
            <summary>
            protected method for handling MouseMove events to display tooltips over
            individual datapoints.
            </summary>
            <param name="sender">
            A reference to the control that has the MouseMove event.
            </param>
            <param name="e">
            A MouseEventArgs object.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZedGraphControl_MouseWheel(System.Object,Alt.GUI.MouseEventArgs)">
            <summary>
            Handle a MouseWheel event in the <see cref="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl"/>
            </summary>
            <param name="sender">A reference to the <see cref="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl"/></param>
            <param name="e">A <see cref="T:Alt.GUI.MouseEventArgs"/> instance</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomPane(Alt.GUI.ZedGraph.GraphPane,System.Double,Alt.Sketch.Point,System.Boolean,System.Boolean)">
            <summary>
            Zoom a specified pane in or out according to the specified zoom fraction.
            </summary>
            <remarks>
            The zoom will occur on the <see cref="T:Alt.GUI.ZedGraph.XAxis"/>, <see cref="T:Alt.GUI.ZedGraph.YAxis"/>, and
            <see cref="T:Alt.GUI.ZedGraph.Y2Axis"/> only if the corresponding flag, <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableHZoom"/> or
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableVZoom"/>, is true.  Note that if there are multiple Y or Y2 axes, all of
            them will be zoomed.
            </remarks>
            <param name="pane">The <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.GraphPane"/> instance to be zoomed.</param>
            <param name="zoomFraction">The fraction by which to zoom, less than 1 to zoom in, greater than
            1 to zoom out.  For example, 0.9 will zoom in such that the scale is 90% of what it was
            originally.</param>
            <param name="centerPt">The screen position about which the zoom will be centered.  This
            value is only used if <see paramref="isZoomOnCenter"/> is true.
            </param>
            <param name="isZoomOnCenter">true to cause the zoom to be centered on the point
            <see paramref="centerPt"/>, false to center on the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>.
            </param>
            <param name="isRefresh">true to force a refresh of the control, false to leave it unrefreshed</param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomPane(Alt.GUI.ZedGraph.GraphPane,System.Double,Alt.Sketch.Point,System.Boolean)">
            <summary>
            Zoom a specified pane in or out according to the specified zoom fraction.
            </summary>
            <remarks>
            The zoom will occur on the <see cref="T:Alt.GUI.ZedGraph.XAxis"/>, <see cref="T:Alt.GUI.ZedGraph.YAxis"/>, and
            <see cref="T:Alt.GUI.ZedGraph.Y2Axis"/> only if the corresponding flag, <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableHZoom"/> or
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableVZoom"/>, is true.  Note that if there are multiple Y or Y2 axes, all of
            them will be zoomed.
            </remarks>
            <param name="pane">The <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.GraphPane"/> instance to be zoomed.</param>
            <param name="zoomFraction">The fraction by which to zoom, less than 1 to zoom in, greater than
            1 to zoom out.  For example, 0.9 will zoom in such that the scale is 90% of what it was
            originally.</param>
            <param name="centerPt">The screen position about which the zoom will be centered.  This
            value is only used if <see paramref="isZoomOnCenter"/> is true.
            </param>
            <param name="isZoomOnCenter">true to cause the zoom to be centered on the point
            <see paramref="centerPt"/>, false to center on the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomScale(Alt.GUI.ZedGraph.Axis,System.Double,System.Double,System.Boolean)">
            <summary>
            Zoom the specified axis by the specified amount, with the center of the zoom at the
            (optionally) specified point.
            </summary>
            <remarks>
            This method is used for MouseWheel zoom operations</remarks>
            <param name="axis">The <see cref="T:Alt.GUI.ZedGraph.Axis"/> to be zoomed.</param>
            <param name="zoomFraction">The zoom fraction, less than 1.0 to zoom in, greater than 1.0 to
            zoom out.  That is, a value of 0.9 will zoom in such that the scale length is 90% of what
            it previously was.</param>
            <param name="centerVal">The location for the center of the zoom.  This is only used if
            <see paramref="IsZoomOnMouseCenter"/> is true.</param>
            <param name="isZoomOnCenter">true if the zoom is to be centered at the
            <see paramref="centerVal"/> screen position, false for the zoom to be centered within
            the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.PanScale(Alt.GUI.ZedGraph.Axis,System.Double,System.Double)">
            <summary>
            Handle a panning operation for the specified <see cref="T:Alt.GUI.ZedGraph.Axis"/>.
            </summary>
            <param name="axis">The <see cref="T:Alt.GUI.ZedGraph.Axis"/> to be panned</param>
            <param name="startVal">The value where the pan started.  The scale range
            will be shifted by the difference between <see paramref="startVal"/> and
            <see paramref="endVal"/>.
            </param>
            <param name="endVal">The value where the pan ended.  The scale range
            will be shifted by the difference between <see paramref="startVal"/> and
            <see paramref="endVal"/>.
            </param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.HandleSelectionFinish(System.Object,Alt.GUI.MouseEventArgs)">
            <summary>
            Perform selection on curves within the drag pane, or under the mouse click.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.GetImage">
            <summary>
            Gets the graph pane's current image.
            <seealso cref="T:Alt.Sketch.Bitmap"/>
            </summary>
            <exception cref="T:Alt.GUI.ZedGraph.ZedGraphException">
            When the control has been disposed before this call.
            </exception>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.SetScrollRangeFromData">
            <summary>
            Sets the value of the scroll range properties (see <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ScrollMinX"/>,
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ScrollMaxX"/>, <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.YScrollRangeList"/>, and 
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.Y2ScrollRangeList"/> based on the actual range of the data for
            each corresponding <see cref="T:Alt.GUI.ZedGraph.Axis"/>.
            </summary>
            <remarks>
            This method is called automatically by <see cref="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.AxisChange"/> if
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsAutoScrollRange"/>
            is true.  Note that this will not be called if you call AxisChange directly from the
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.GraphPane"/>.  For example, zedGraphControl1.AxisChange() works properly, but
            zedGraphControl1.GraphPane.AxisChange() does not.</remarks>
        </member>
        <member name="E:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ContextMenuBuilder">
            <summary>
            Subscribe to this event to be able to modify the ZedGraph context menu.
            </summary>
            <remarks>
            The context menu is built on the fly after a right mouse click.  You can add menu items
            to this menu by simply modifying the <see paramref="menu"/> parameter.
            </remarks>
        </member>
        <member name="E:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomEvent">
            <summary>
            Subscribe to this event to be notified when the <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.GraphPane"/> is zoomed or panned by the user,
            either via a mouse drag operation or by the context menu commands.
            </summary>
        </member>
        <member name="E:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.PointEditEvent">
            <summary>
            Subscribe to this event to receive notifcation and/or respond after a data
            point has been edited via <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableHEdit"/> and <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableVEdit"/>.
            </summary>
            <example>
            <para>To subscribe to this event, use the following in your Form_Load method:</para>
            <code>zedGraphControl1.PointEditEvent +=
            new ZedGraphControl.PointEditHandler( MyPointEditHandler );</code>
            <para>Add this method to your Form1.cs:</para>
            <code>
               private string MyPointEditHandler( object sender, GraphPane pane, CurveItem curve, int iPt )
               {
                   PointPair pt = curve[iPt];
                   return "This value is " + pt.Y.ToString("f2") + " gallons";
               }</code>
            </example>
        </member>
        <member name="E:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.PointValueEvent">
            <summary>
            Subscribe to this event to provide custom formatting for the tooltips
            </summary>
            <example>
            <para>To subscribe to this event, use the following in your FormLoad method:</para>
            <code>zedGraphControl1.PointValueEvent +=
            new ZedGraphControl.PointValueHandler( MyPointValueHandler );</code>
            <para>Add this method to your Form1.cs:</para>
            <code>
               private string MyPointValueHandler( object sender, GraphPane pane, CurveItem curve, int iPt )
               {
               #region
                   PointPair pt = curve[iPt];
                   return "This value is " + pt.Y.ToString("f2") + " gallons";
               // 
               }</code>
            </example>
        </member>
        <member name="E:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.CursorValueEvent">
            <summary>
            Subscribe to this event to provide custom formatting for the cursor value tooltips
            </summary>
            <example>
            <para>To subscribe to this event, use the following in your FormLoad method:</para>
            <code>zedGraphControl1.CursorValueEvent +=
            new ZedGraphControl.CursorValueHandler( MyCursorValueHandler );</code>
            <para>Add this method to your Form1.cs:</para>
            <code>
               private string MyCursorValueHandler( object sender, GraphPane pane, PointI mousePt )
               {
               #region
            	double x, y;
            	pane.ReverseTransform( mousePt, out x, out y );
            	return "( " + x.ToString( "f2" ) + ", " + y.ToString( "f2" ) + " )";
               // 
               }</code>
            </example>
        </member>
        <member name="E:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.MouseDownEvent">
            <summary>
            Subscribe to this event to provide notification of MouseDown clicks on graph
            objects
            </summary>
            <remarks>
            This event provides for a notification when the mouse is clicked on an object
            within any <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.GraphPane"/> of the <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.MasterPane"/> associated
            with this <see cref="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl"/>.  This event will use the
            <see cref="M:Alt.GUI.ZedGraph.MasterPane.FindNearestPaneObject(Alt.Sketch.Point,Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane@,System.Object@,System.Int32@)"/> method to determine which object
            was clicked.  The boolean value that you return from this handler determines whether
            or not the <see cref="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl"/> will do any further handling of the
            MouseDown event (see <see cref="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZedMouseEventHandler"/>).  Return true if you have
            handled the MouseDown event entirely, and you do not
            want the <see cref="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl"/> to do any further action (e.g., starting
            a zoom operation).  Return false if ZedGraph should go ahead and process the
            MouseDown event.
            </remarks>
        </member>
        <member name="E:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.MouseDown">
            <summary>
            Hide the standard control MouseDown event so that the ZedGraphControl.MouseDownEvent
            can be used.  This is so that the user must return true/false in order to indicate
            whether or not we should respond to the event.
            </summary>
        </member>
        <member name="E:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.MouseUp">
            <summary>
            Hide the standard control MouseUp event so that the ZedGraphControl.MouseUpEvent
            can be used.  This is so that the user must return true/false in order to indicate
            whether or not we should respond to the event.
            </summary>
        </member>
        <member name="E:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.MouseMove">
            <summary>
            Hide the standard control MouseMove event so that the ZedGraphControl.MouseMoveEvent
            can be used.  This is so that the user must return true/false in order to indicate
            whether or not we should respond to the event.
            </summary>
        </member>
        <member name="E:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.MouseUpEvent">
            <summary>
            Subscribe to this event to provide notification of MouseUp clicks on graph
            objects
            </summary>
            <remarks>
            This event provides for a notification when the mouse is clicked on an object
            within any <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.GraphPane"/> of the <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.MasterPane"/> associated
            with this <see cref="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl"/>.  This event will use the
            <see cref="M:Alt.GUI.ZedGraph.MasterPane.FindNearestPaneObject(Alt.Sketch.Point,Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane@,System.Object@,System.Int32@)"/> method to determine which object
            was clicked.  The boolean value that you return from this handler determines whether
            or not the <see cref="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl"/> will do any further handling of the
            MouseUp event (see <see cref="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZedMouseEventHandler"/>).  Return true if you have
            handled the MouseUp event entirely, and you do not
            want the <see cref="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl"/> to do any further action (e.g., starting
            a zoom operation).  Return false if ZedGraph should go ahead and process the
            MouseUp event.
            </remarks>
        </member>
        <member name="E:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.MouseMoveEvent">
            <summary>
            Subscribe to this event to provide notification of MouseMove events over graph
            objects
            </summary>
            <remarks>
            This event provides for a notification when the mouse is moving over on the control.
            The boolean value that you return from this handler determines whether
            or not the <see cref="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl"/> will do any further handling of the
            MouseMove event (see <see cref="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZedMouseEventHandler"/>).  Return true if you
            have handled the MouseMove event entirely, and you do not
            want the <see cref="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl"/> to do any further action.
            Return false if ZedGraph should go ahead and process the MouseMove event.
            </remarks>
        </member>
        <member name="E:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.DoubleClickEvent">
            <summary>
            Subscribe to this event to provide notification of Double Clicks on graph
            objects
            </summary>
            <remarks>
            This event provides for a notification when the mouse is double-clicked on an object
            within any <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.GraphPane"/> of the <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.MasterPane"/> associated
            with this <see cref="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl"/>.  This event will use the
            <see cref="M:Alt.GUI.ZedGraph.MasterPane.FindNearestPaneObject(Alt.Sketch.Point,Alt.Sketch.Graphics,Alt.GUI.ZedGraph.GraphPane@,System.Object@,System.Int32@)"/> method to determine which object
            was clicked.  The boolean value that you return from this handler determines whether
            or not the <see cref="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl"/> will do any further handling of the
            DoubleClick event (see <see cref="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZedMouseEventHandler"/>).  Return true if you have
            handled the DoubleClick event entirely, and you do not
            want the <see cref="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl"/> to do any further action. 
            Return false if ZedGraph should go ahead and process the
            DoubleClick event.
            </remarks>
        </member>
        <member name="E:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.LinkEvent">
            <summary>
            Subscribe to this event to be able to respond to mouse clicks within linked
            objects.
            </summary>
            <remarks>
            Linked objects are typically either <see cref="T:Alt.GUI.ZedGraph.GraphObj"/> type objects or
            <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> type objects.  These object types can include
            hyperlink information allowing for "drill-down" type operation.  
            </remarks>
            <seealso cref="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.LinkEventHandler"/>
            <seealso cref="T:Alt.GUI.ZedGraph.Link"/>
            <seealso cref="P:Alt.GUI.ZedGraph.CurveItem.Link">CurveItem.Link</seealso>
            <seealso cref="P:Alt.GUI.ZedGraph.GraphObj.Link">GraphObj.Link</seealso>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomButtons">
            <summary>
            Gets or sets a value that determines which mouse button will be used as a primary option
            to trigger a zoom event.
            </summary>
            <remarks>
            This value is combined with <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomModifierKeys"/> to determine the actual zoom combination.
            A secondary zoom button/key combination option is available via <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomButtons2"/> and
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomModifierKeys2"/>.  To not use this button/key combination, set the value
            of <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomButtons"/> to <see cref="F:Alt.GUI.MouseButtons.None"/>.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomButtons2">
            <summary>
            Gets or sets a value that determines which mouse button will be used as the secondary option
            to trigger a zoom event.
            </summary>
            <remarks>
            This value is combined with <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomModifierKeys2"/> to determine the actual zoom combination.
            The primary zoom button/key combination option is available via <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomButtons"/> and
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomModifierKeys"/>.  To not use this button/key combination, set the value
            of <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomButtons2"/> to <see cref="F:Alt.GUI.MouseButtons.None"/>.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomModifierKeys">
            <summary>
            Gets or sets a value that determines which modifier keys will be used as a primary option
            to trigger a zoom event.
            </summary>
            <remarks>
            This value is combined with <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomButtons"/> to determine the actual zoom combination.
            A secondary zoom button/key combination option is available via <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomButtons2"/> and
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomModifierKeys2"/>.  To not use this button/key combination, set the value
            of <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomButtons"/> to <see cref="F:Alt.GUI.MouseButtons.None"/>.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomModifierKeys2">
            <summary>
            Gets or sets a value that determines which modifier keys will be used as a secondary option
            to trigger a zoom event.
            </summary>
            <remarks>
            This value is combined with <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomButtons2"/> to determine the actual zoom combination.
            A primary zoom button/key combination option is available via <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomButtons"/> and
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomModifierKeys"/>.  To not use this button/key combination, set the value
            of <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomButtons2"/> to <see cref="F:Alt.GUI.MouseButtons.None"/>.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.PanButtons">
            <summary>
            Gets or sets a value that determines which mouse button will be used as a primary option
            to trigger a pan event.
            </summary>
            <remarks>
            This value is combined with <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.PanModifierKeys"/> to determine the actual pan combination.
            A secondary pan button/key combination option is available via <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.PanButtons2"/> and
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.PanModifierKeys2"/>.  To not use this button/key combination, set the value
            of <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.PanButtons"/> to <see cref="F:Alt.GUI.MouseButtons.None"/>.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.PanButtons2">
            <summary>
            Gets or sets a value that determines which mouse button will be used as the secondary option
            to trigger a pan event.
            </summary>
            <remarks>
            This value is combined with <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.PanModifierKeys2"/> to determine the actual pan combination.
            The primary pan button/key combination option is available via <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.PanButtons"/> and
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.PanModifierKeys"/>.  To not use this button/key combination, set the value
            of <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.PanButtons2"/> to <see cref="F:Alt.GUI.MouseButtons.None"/>.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.PanModifierKeys">
            <summary>
            Gets or sets a value that determines which modifier keys will be used as a primary option
            to trigger a pan event.
            </summary>
            <remarks>
            This value is combined with <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.PanButtons"/> to determine the actual pan combination.
            A secondary pan button/key combination option is available via <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.PanButtons2"/> and
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.PanModifierKeys2"/>.  To not use this button/key combination, set the value
            of <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.PanButtons"/> to <see cref="F:Alt.GUI.MouseButtons.None"/>.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.PanModifierKeys2">
            <summary>
            Gets or sets a value that determines which modifier keys will be used as a secondary option
            to trigger a pan event.
            </summary>
            <remarks>
            This value is combined with <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.PanButtons2"/> to determine the actual pan combination.
            A primary pan button/key combination option is available via <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.PanButtons"/> and
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.PanModifierKeys"/>.  To not use this button/key combination, set the value
            of <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.PanButtons2"/> to <see cref="F:Alt.GUI.MouseButtons.None"/>.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.EditButtons">
            <summary>
            Gets or sets a value that determines which Mouse button will be used to edit point
            data values
            </summary>
            <remarks>
            This setting only applies if <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableHEdit"/> and/or
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableVEdit"/> are true.
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.EditModifierKeys"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.EditModifierKeys">
            <summary>
            Gets or sets a value that determines which modifier keys will be used to edit point
            data values
            </summary>
            <remarks>
            This setting only applies if <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableHEdit"/> and/or
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableVEdit"/> are true.
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.EditButtons"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.SelectButtons">
            <summary>
            Gets or sets a value that determines which Mouse button will be used to 
            select <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>'s.
            </summary>
            <remarks>
            This setting only applies if <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableSelection"/> is true.
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.SelectModifierKeys"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.SelectModifierKeys">
            <summary>
            Gets or sets a value that determines which Modifier keys will be used to 
            select <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>'s.
            </summary>
            <remarks>
            This setting only applies if <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableSelection"/> is true.
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.SelectButtons"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.SelectAppendModifierKeys">
            <summary>
            Gets or sets a value that determines which Modifier keys will be used to 
            append a <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> to the selection list.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.LinkButtons">
            <summary>
            Gets or sets a value that determines which Mouse button will be used to click
            on linkable objects
            </summary>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.LinkModifierKeys"/>
            <seealso cref="E:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.LinkEvent"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.LinkModifierKeys">
            <summary>
            Gets or sets a value that determines which modifier keys will be used to click
            on linkable objects
            </summary>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.LinkButtons"/>
            <seealso cref="E:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.LinkEvent"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.MasterPane">
            <summary>
            Gets or sets the <see cref="T:Alt.GUI.ZedGraph.MasterPane"/> property for the control
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.GraphPane">
            <summary>
            Gets or sets the <see cref="T:Alt.GUI.ZedGraph.GraphPane"/> property for the control
            </summary>
            <remarks>
            <see cref="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl"/> actually uses a <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.MasterPane"/> object
            to hold a list of <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.GraphPane"/> objects.  This property really only
            accesses the first <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.GraphPane"/> in the list.  If there is more
            than one <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.GraphPane"/>, use the <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.MasterPane"/>
            indexer property to access any of the <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.GraphPane"/> objects.</remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsAntiAlias">
            <summary>
            Gets or sets a value that determines if all drawing operations for this control
            will be forced to operate in Anti-alias mode.  Note that if this value is set to
            "true", it overrides the setting for sub-objects.  Otherwise, the sub-object settings
            (such as <see cref="P:Alt.GUI.ZedGraph.FontSpec.IsAntiAlias"/>)
            will be honored.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsShowPointValues">
            <summary>
            Gets or sets a value that determines whether or not tooltips will be displayed
            when the mouse hovers over data values.
            </summary>
            <remarks>The displayed values are taken from <see cref="F:Alt.GUI.ZedGraph.PointPair.Tag"/>
            if it is a <see cref="T:System.String"/> type, or <see cref="M:Alt.GUI.ZedGraph.PointPairBase.ToString"/>
            otherwise (using the <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.PointValueFormat"/> as a format string).
            Additionally, the user can custom format the values using the
            <see cref="E:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.PointValueEvent"/> event.  Note that <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsShowPointValues"/>
            may be overridden by <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsShowCursorValues"/>.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsShowCursorValues">
            <summary>
            Gets or sets a value that determines whether or not tooltips will be displayed
            showing the current scale values when the mouse is within the
            <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/>.
            </summary>
            <remarks>The displayed values are taken from the current mouse position, and formatted
            according to <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.PointValueFormat"/> and/or <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.PointDateFormat"/>.  If this
            value is set to true, it overrides the <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsShowPointValues"/> setting.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableHEdit">
            <summary>
            Gets or sets a value that determines whether or not editing of point data is allowed in
            the horizontal direction.
            </summary>
            <remarks>
            Editing is done by holding down the Alt key, and left-clicking on an individual point of
            a given <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> to drag it to a new location.  The Mouse and Key
            combination for this mode are modifiable using <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.EditButtons"/> and
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.EditModifierKeys"/>.
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.EditButtons"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.EditModifierKeys"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableVEdit"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableVEdit">
            <summary>
            Gets or sets a value that determines whether or not editing of point data is allowed in
            the vertical direction.
            </summary>
            <remarks>
            Editing is done by holding down the Alt key, and left-clicking on an individual point of
            a given <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> to drag it to a new location.  The Mouse and Key
            combination for this mode are modifiable using <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.EditButtons"/> and
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.EditModifierKeys"/>.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableZoom">
            <summary>
            Gets or sets a value that determines whether or not zooming is allowed for the control.
            </summary>
            <remarks>
            Zooming is done by left-clicking inside the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/> to drag
            out a rectangle, indicating the new scale ranges that will be part of the graph.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableHZoom">
            <summary>
            Gets or sets a value that determines whether or not zooming is allowed for the control in
            the horizontal direction.
            </summary>
            <remarks>
            Zooming is done by left-clicking inside the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/> to drag
            out a rectangle, indicating the new scale ranges that will be part of the graph.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableVZoom">
            <summary>
            Gets or sets a value that determines whether or not zooming is allowed for the control in
            the vertical direction.
            </summary>
            <remarks>
            Zooming is done by left-clicking inside the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/> to drag
            out a rectangle, indicating the new scale ranges that will be part of the graph.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableWheelZoom">
            <summary>
            Gets or sets a value that determines whether or not zooming is allowed via the mouse wheel.
            </summary>
            <remarks>
            Wheel zooming is done by rotating the mouse wheel.
            Note that this property is used in combination with the <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableHZoom"/> and
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableVZoom"/> properties to control zoom options.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableHPan">
            <summary>
            Gets or sets a value that determines whether or not panning is allowed for the control in
            the horizontal direction.
            </summary>
            <remarks>
            Panning is done by clicking the middle mouse button (or holding down the shift key
            while clicking the left mouse button) inside the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/> and
            dragging the mouse around to shift the scale ranges as desired.
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableVPan"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableVPan">
            <summary>
            Gets or sets a value that determines whether or not panning is allowed for the control in
            the vertical direction.
            </summary>
            <remarks>
            Panning is done by clicking the middle mouse button (or holding down the shift key
            while clicking the left mouse button) inside the <see cref="P:Alt.GUI.ZedGraph.Chart.Rect"/> and
            dragging the mouse around to shift the scale ranges as desired.
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableHPan"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsShowContextMenu">
            <summary>
            Gets or sets a value that determines whether or not the context menu will be available.
            </summary>
            <remarks>The context menu is a menu that appears when you right-click on the
            <see cref="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl"/>.  It provides options for Zoom, Pan, AutoScale, Clipboard
            Copy, and toggle <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsShowPointValues"/>.
            </remarks>
            <value>true to allow the context menu, false to disable it</value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsShowCopyMessage">
            <summary>
            Gets or sets a value that determines whether or not a message box will be shown
            in response to a context menu "Copy" command.
            </summary>
            <remarks>
            Note that, if this property is set to false, the user will receive no
            indicative feedback in response to a Copy action.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsPrintKeepAspectRatio">
            <summary>
            Gets or sets a value that determines whether or not the visible aspect ratio of the
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.MasterPane"/> <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/> will be preserved
            when printing this <see cref="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl"/>.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsPrintFillPage">
            <summary>
            Gets or sets a value that determines whether or not the <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.MasterPane"/>
            <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/> dimensions will be expanded to fill the
            available space when printing this <see cref="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl"/>.
            </summary>
            <remarks>
            If <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsPrintKeepAspectRatio"/> is also true, then the <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.MasterPane"/>
            <see cref="P:Alt.GUI.ZedGraph.PaneBase.Rect"/> dimensions will be expanded to fit as large
            a space as possible while still honoring the visible aspect ratio.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsPrintScaleAll">
            <summary>
            Gets or sets a value that determines whether the settings of
            <see cref="P:Alt.GUI.ZedGraph.PaneBase.IsFontsScaled"/> and <see cref="P:Alt.GUI.ZedGraph.PaneBase.IsPenWidthScaled"/>
            will be overridden to true during printing operations.
            </summary>
            <remarks>
            Printing involves pixel maps that are typically of a dramatically different dimension
            than on-screen pixel maps.  Therefore, it becomes more important to scale the fonts and
            lines to give a printed image that looks like what is shown on-screen.  The default
            setting for <see cref="P:Alt.GUI.ZedGraph.PaneBase.IsFontsScaled"/> is true, but the default
            setting for <see cref="P:Alt.GUI.ZedGraph.PaneBase.IsPenWidthScaled"/> is false.
            </remarks>
            <value>
            A value of true will cause both <see cref="P:Alt.GUI.ZedGraph.PaneBase.IsFontsScaled"/> and
            <see cref="P:Alt.GUI.ZedGraph.PaneBase.IsPenWidthScaled"/> to be temporarily set to true during
            printing operations.
            </value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsAutoScrollRange">
            <summary>
            Gets or sets a value that controls whether or not the axis value range for the scroll
            bars will be set automatically.
            </summary>
            <remarks>
            If this value is set to true, then the range of the scroll bars will be set automatically
            to the actual range of the data as returned by <see cref="M:Alt.GUI.ZedGraph.CurveList.GetRange(System.Boolean,System.Boolean,Alt.GUI.ZedGraph.GraphPane)"/> at the
            time that <see cref="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.AxisChange"/> was last called.  Note that a value of true
            can override any setting of <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ScrollMinX"/>, <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ScrollMaxX"/>,
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ScrollMinY"/>, <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ScrollMaxY"/>, 
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ScrollMinY2"/>, and <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ScrollMaxY2"/>.  Note also that you must
            call <see cref="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.AxisChange"/> from the <see cref="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl"/> for this to
            work properly (e.g., don't call it directly from the <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.GraphPane"/>.
            Alternatively, you can call <see cref="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.SetScrollRangeFromData"/> at anytime to set
            the scroll bar range.<br/>
            <b>In most cases, you will probably want to disable
            <see cref="P:Alt.GUI.ZedGraph.GraphPane.IsBoundedRanges"/> before activating this option.</b>
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ScrollGrace">
            <summary>
            Set a "grace" value that leaves a buffer area around the data when
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsAutoScrollRange"/> is true.
            </summary>
            <remarks>
            This value represents a fraction of the total range around each axis.  For example, if the
            axis ranges from 0 to 100, then a 0.05 value for ScrollGrace would set the scroll range
            to -5 to 105.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsSynchronizeXAxes">
            <summary>
            Gets or sets a value that determines if the <see cref="T:Alt.GUI.ZedGraph.XAxis"/> <see cref="T:Alt.GUI.ZedGraph.Scale"/>
            ranges for all <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.GraphPane"/> objects in the <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.MasterPane"/> will
            be forced to match.
            </summary>
            <remarks>
            If set to true (default is false), then all of the <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.GraphPane"/> objects
            in the <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.MasterPane"/> associated with this <see cref="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl"/>
            will be forced to have matching scale ranges for the x axis.  That is, zoom, pan,
            and scroll operations will result in zoom/pan/scroll for all graphpanes simultaneously.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsSynchronizeYAxes">
            <summary>
            Gets or sets a value that determines if the <see cref="T:Alt.GUI.ZedGraph.YAxis"/> <see cref="T:Alt.GUI.ZedGraph.Scale"/>
            ranges for all <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.GraphPane"/> objects in the <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.MasterPane"/> will
            be forced to match.
            </summary>
            <remarks>
            If set to true (default is false), then all of the <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.GraphPane"/> objects
            in the <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.MasterPane"/> associated with this <see cref="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl"/>
            will be forced to have matching scale ranges for the y axis.  That is, zoom, pan,
            and scroll operations will result in zoom/pan/scroll for all graphpanes simultaneously.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsScrollY2">
            <summary>
            Gets or sets a value that determines if the vertical scroll bar will affect the Y2 axis.
            </summary>
            <remarks>
            The vertical scroll bar is automatically associated with the Y axis.  With this value, you
            can choose to include or exclude the Y2 axis with the scrolling.  Note that the Y2 axis
            scrolling is handled as a secondary.  The vertical scroll bar position always reflects
            the status of the Y axis.  This can cause the Y2 axis to "jump" when first scrolled if
            the <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ScrollMinY2"/> and <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ScrollMaxY2"/> values are not set to the
            same proportions as <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ScrollMinY"/> and <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ScrollMaxY"/> with respect
            to the actual <see cref="P:Alt.GUI.ZedGraph.Scale.Min"/> and <see cref="P:Alt.GUI.ZedGraph.Scale.Max"/>.  Also note that
            this property is actually just an alias to the <see cref="P:Alt.GUI.ZedGraph.ScrollRange.IsScrollable"/>
            property of the first element of <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.YScrollRangeList"/>.
            </remarks>
            <seealso cref="!:IsShowVScrollBar"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ScrollMinY2"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ScrollMaxY2"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.YScrollRangeList"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.Y2ScrollRangeList"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.YScrollRangeList">
            <summary>
            Access the <see cref="T:Alt.GUI.ZedGraph.ScrollRangeList"/> for the Y axes.
            </summary>
            <remarks>
            This list maintains the user scale ranges for the scroll bars for each axis
            in the <see cref="P:Alt.GUI.ZedGraph.GraphPane.YAxisList"/>.  Each ordinal location in
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.YScrollRangeList"/> corresponds to an equivalent ordinal location
            in <see cref="P:Alt.GUI.ZedGraph.GraphPane.YAxisList"/>.
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ScrollMinY"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ScrollMaxY"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.Y2ScrollRangeList">
            <summary>
            Access the <see cref="T:Alt.GUI.ZedGraph.ScrollRangeList"/> for the Y2 axes.
            </summary>
            <remarks>
            This list maintains the user scale ranges for the scroll bars for each axis
            in the <see cref="P:Alt.GUI.ZedGraph.GraphPane.Y2AxisList"/>.  Each ordinal location in
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.Y2ScrollRangeList"/> corresponds to an equivalent ordinal location
            in <see cref="P:Alt.GUI.ZedGraph.GraphPane.Y2AxisList"/>.
            </remarks>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ScrollMinY2"/>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ScrollMaxY2"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ScrollMinX">
            <summary>
            The minimum value for the X axis scroll range.
            </summary>
            <remarks>
            Effectively, the minimum endpoint of the scroll range will cause the
            <see cref="P:Alt.GUI.ZedGraph.Scale.Min"/> value to be set to <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ScrollMinX"/>.  Note that this
            value applies only to the scroll bar settings.  Axis panning (see <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableHPan"/>)
            is not affected by this value.  Note that this value can be overridden by
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsAutoScrollRange"/> and <see cref="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.SetScrollRangeFromData"/>.
            </remarks>
            <value>A double value indicating the minimum axis value</value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ScrollMaxX">
            <summary>
            The maximum value for the X axis scroll range.
            </summary>
            <remarks>
            Effectively, the maximum endpoint of the scroll range will cause the
            <see cref="P:Alt.GUI.ZedGraph.Scale.Max"/> value to be set to <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ScrollMaxX"/>.  Note that this
            value applies only to the scroll bar settings.  Axis panning (see <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableHPan"/>)
            is not affected by this value.  Note that this value can be overridden by
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsAutoScrollRange"/> and <see cref="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.SetScrollRangeFromData"/>.
            </remarks>
            <value>A double value indicating the maximum axis value</value>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ScrollMinY">
            <summary>
            The minimum value for the Y axis scroll range.
            </summary>
            <remarks>
            Effectively, the minimum endpoint of the scroll range will cause the
            <see cref="P:Alt.GUI.ZedGraph.Scale.Min"/> value to be set to <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ScrollMinY"/>.  Note that this
            value applies only to the scroll bar settings.  Axis panning (see <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableVPan"/>)
            is not affected by this value.  Note that this value can be overridden by
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsAutoScrollRange"/> and <see cref="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.SetScrollRangeFromData"/>.  Also note that
            this property is actually just an alias to the <see cref="P:Alt.GUI.ZedGraph.ScrollRange.Min"/>
            property of the first element of <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.YScrollRangeList"/>.
            </remarks>
            <value>A double value indicating the minimum axis value</value>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.YScrollRangeList"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ScrollMaxY">
            <summary>
            The maximum value for the Y axis scroll range.
            </summary>
            <remarks>
            Effectively, the maximum endpoint of the scroll range will cause the
            <see cref="P:Alt.GUI.ZedGraph.Scale.Max"/> value to be set to <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ScrollMaxY"/>.  Note that this
            value applies only to the scroll bar settings.  Axis panning (see <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableVPan"/>)
            is not affected by this value.  Note that this value can be overridden by
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsAutoScrollRange"/> and <see cref="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.SetScrollRangeFromData"/>.  Also note that
            this property is actually just an alias to the <see cref="P:Alt.GUI.ZedGraph.ScrollRange.Max"/>
            property of the first element of <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.YScrollRangeList"/>.
            </remarks>
            <value>A double value indicating the maximum axis value</value>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.YScrollRangeList"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ScrollMinY2">
            <summary>
            The minimum value for the Y2 axis scroll range.
            </summary>
            <remarks>
            Effectively, the minimum endpoint of the scroll range will cause the
            <see cref="P:Alt.GUI.ZedGraph.Scale.Min"/> value to be set to <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ScrollMinY2"/>.  Note that this
            value applies only to the scroll bar settings.  Axis panning (see <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableVPan"/>)
            is not affected by this value.  Note that this value can be overridden by
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsAutoScrollRange"/> and <see cref="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.SetScrollRangeFromData"/>.  Also note that
            this property is actually just an alias to the <see cref="P:Alt.GUI.ZedGraph.ScrollRange.Min"/>
            property of the first element of <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.Y2ScrollRangeList"/>.
            </remarks>
            <value>A double value indicating the minimum axis value</value>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.Y2ScrollRangeList"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ScrollMaxY2">
            <summary>
            The maximum value for the Y2 axis scroll range.
            </summary>
            <remarks>
            Effectively, the maximum endpoint of the scroll range will cause the
            <see cref="P:Alt.GUI.ZedGraph.Scale.Max"/> value to be set to <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ScrollMaxY2"/>.  Note that this
            value applies only to the scroll bar settings.  Axis panning (see <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableVPan"/>)
            is not affected by this value.  Note that this value can be overridden by
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsAutoScrollRange"/> and <see cref="M:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.SetScrollRangeFromData"/>.  Also note that
            this property is actually just an alias to the <see cref="P:Alt.GUI.ZedGraph.ScrollRange.Max"/>
            property of the first element of <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.Y2ScrollRangeList"/>.
            </remarks>
            <value>A double value indicating the maximum axis value</value>
            <seealso cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.Y2ScrollRangeList"/>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.PointValueFormat">
            <summary>
            Gets or sets the format for displaying tooltip values.
            This format is passed to <see cref="M:Alt.GUI.ZedGraph.PointPairBase.ToString(System.String)"/>.
            </summary>
            <remarks>
            Use the <see cref="T:System.Globalization.NumberFormatInfo"/> type
            to determine the format strings.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.PointDateFormat">
            <summary>
            Gets or sets the format for displaying tooltip values.
            This format is passed to <see cref="M:Alt.GUI.ZedGraph.XDate.ToString(System.String)"/>.
            </summary>
            <remarks>
            Use the <see cref="T:System.Globalization.DateTimeFormatInfo"/> type
            to determine the format strings.
            </remarks>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomStepFraction">
            <summary>
            Gets or sets the step size fraction for zooming with the mouse wheel.
            A value of 0.1 will result in a 10% zoom step for each mouse wheel movement.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsZoomOnMouseCenter">
            <summary>
            Gets or sets a boolean value that determines if zooming with the wheel mouse
            is centered on the mouse location, or centered on the existing graph.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.BeenDisposed">
            <summary>
            This checks if the control has been disposed.  This is synonymous with
            the graph pane having been nulled or disposed.  Therefore this is the
            same as <c>ZedGraphControl.GraphPane == null</c>.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.Selection">
            <summary>
            Readonly property that gets the list of selected CurveItems
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.IsEnableSelection">
            <summary>
            Gets or sets a value that determines whether or not selection is allowed for the control.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ContextMenuObjectState">
            <summary>
            Public enumeration that specifies the type of 
            object present at the Context Menu's mouse location
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ContextMenuObjectState.InactiveSelection">
            <summary>
            The object is an Inactive Curve Item at the Context Menu's mouse position
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ContextMenuObjectState.ActiveSelection">
            <summary>
            The object is an active Curve Item at the Context Menu's mouse position
            </summary>
        </member>
        <member name="F:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ContextMenuObjectState.Background">
            <summary>
            There is no selectable object present at the Context Menu's mouse position
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ContextMenuBuilderEventHandler">
            <summary>
            A delegate that allows subscribing methods to append or modify the context menu.
            </summary>
            <param name="sender">The source <see cref="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl"/> object</param>
            <param name="menuStrip">A reference to the <see cref="T:Alt.GUI.ContextMenuStrip"/> object
            that contains the context menu.
            </param>
            <param name="mousePt">The point at which the mouse was clicked</param>
            <param name="objState">The current context menu state</param>
            <seealso cref="E:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ContextMenuBuilder"/>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomEventHandler">
            <summary>
            A delegate that allows notification of zoom and pan events.
            </summary>
            <param name="sender">The source <see cref="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl"/> object</param>
            <param name="oldState">A <see cref="T:Alt.GUI.ZedGraph.ZoomState"/> object that corresponds to the state of the
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.GraphPane"/> before the zoom or pan event.</param>
            <param name="newState">A <see cref="T:Alt.GUI.ZedGraph.ZoomState"/> object that corresponds to the state of the
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.GraphPane"/> after the zoom or pan event</param>
            <seealso cref="E:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomEvent"/>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ScrollDoneHandler">
            <summary>
            A delegate that allows notification of scroll events.
            </summary>
            <param name="sender">The source <see cref="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl"/> object</param>
            <param name="scrollBar">The source <see cref="T:Alt.GUI.ScrollBar"/> object</param>
            <param name="oldState">A <see cref="T:Alt.GUI.ZedGraph.ZoomState"/> object that corresponds to the state of the
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.GraphPane"/> before the scroll event.</param>
            <param name="newState">A <see cref="T:Alt.GUI.ZedGraph.ZoomState"/> object that corresponds to the state of the
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.GraphPane"/> after the scroll event</param>
            <seealso cref="E:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomEvent"/>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ScrollProgressHandler">
            <summary>
            A delegate that allows notification of scroll events.
            </summary>
            <param name="sender">The source <see cref="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl"/> object</param>
            <param name="scrollBar">The source <see cref="T:Alt.GUI.ScrollBar"/> object</param>
            <param name="oldState">A <see cref="T:Alt.GUI.ZedGraph.ZoomState"/> object that corresponds to the state of the
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.GraphPane"/> before the scroll event.</param>
            <param name="newState">A <see cref="T:Alt.GUI.ZedGraph.ZoomState"/> object that corresponds to the state of the
            <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.GraphPane"/> after the scroll event</param>
            <seealso cref="E:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZoomEvent"/>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.PointEditHandler">
            <summary>
            A delegate that receives notification after a point-edit operation is completed.
            </summary>
            <param name="sender">The source <see cref="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl"/> object</param>
            <param name="pane">The <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.GraphPane"/> object that contains the
            point that has been edited</param>
            <param name="curve">The <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> object that contains the point
            that has been edited</param>
            <param name="iPt">The integer index of the edited <see cref="T:Alt.GUI.ZedGraph.PointPair"/> within the
            <see cref="T:Alt.GUI.ZedGraph.IPointList"/> of the selected <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>
            </param>
            <seealso cref="E:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.PointValueEvent"/>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.PointValueHandler">
            <summary>
            A delegate that allows custom formatting of the point value tooltips
            </summary>
            <param name="sender">The source <see cref="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl"/> object</param>
            <param name="pane">The <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.GraphPane"/> object that contains the point value of interest</param>
            <param name="curve">The <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> object that contains the point value of interest</param>
            <param name="iPt">The integer index of the selected <see cref="T:Alt.GUI.ZedGraph.PointPair"/> within the
            <see cref="T:Alt.GUI.ZedGraph.IPointList"/> of the selected <see cref="T:Alt.GUI.ZedGraph.CurveItem"/></param>
            <seealso cref="E:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.PointValueEvent"/>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.CursorValueHandler">
            <summary>
            A delegate that allows custom formatting of the cursor value tooltips
            </summary>
            <param name="sender">The source <see cref="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl"/> object</param>
            <param name="pane">The <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.GraphPane"/> object that contains the cursor of interest</param>
            <param name="mousePt">The <see cref="T:Alt.Sketch.PointI"/> object that represents the cursor value location</param>
            <seealso cref="E:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.CursorValueEvent"/>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.ZedMouseEventHandler">
            <summary>
            A delegate that allows notification of mouse events on Graph objects.
            </summary>
            <param name="sender">The source <see cref="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl"/> object</param>
            <param name="e">A <see cref="T:Alt.GUI.MouseEventArgs"/> corresponding to this event</param>
            <seealso cref="E:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.MouseDownEvent"/>
            <returns>
            Return true if you have handled the mouse event entirely, and you do not
            want the <see cref="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl"/> to do any further action (e.g., starting
            a zoom operation).  Return false if ZedGraph should go ahead and process the
            mouse event.
            </returns>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.LinkEventHandler">
            <summary>
            A delegate that allows notification of clicks on ZedGraph objects that have
            active links enabled
            </summary>
            <param name="sender">The source <see cref="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl"/> object</param>
            <param name="pane">The source <see cref="P:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl.GraphPane"/> in which the click
            occurred.
            </param>
            <param name="source">The source object which was clicked.  This is typically
            a type of <see cref="T:Alt.GUI.ZedGraph.CurveItem"/> if a curve point was clicked, or
            a type of <see cref="T:Alt.GUI.ZedGraph.GraphObj"/> if a graph object was clicked.
            </param>
            <param name="link">The <see cref="T:Alt.GUI.ZedGraph.Link"/> object, belonging to
            <paramref name="source"/>, that contains the link information
            </param>
            <param name="index">An index value, typically used if a <see cref="T:Alt.GUI.ZedGraph.CurveItem"/>
            was clicked, indicating the ordinal value of the actual point that was clicked.
            </param>
            <returns>
            Return true if you have handled the LinkEvent entirely, and you do not
            want the <see cref="T:Alt.GUI.ZedGraph.Temporary.Gwen.ZedGraphControl"/> to do any further action.
            Return false if ZedGraph should go ahead and process the LinkEvent.
            </returns>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.BarChartSampleDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.DemoBase">
            <summary>
            An implementation of the things necessary for most ZedGraphDemos.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.ZedGraphDemo">
            <summary>
            Interface for demos.  This allows the demos to be self-contained, 
            simplifying reading their code and allowing for quick switches 
            between demos.
            </summary>
            
            <author> Jerry Vos </author>
            <version> $Revision: 1.2 $ $Date: 2005-03-02 19:18:44 $ </version>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.ZedGraphDemo.Description">
            <summary>
            A description of what this demo is showing.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.ZedGraphDemo.Title">
            <summary>
            The demo's title.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.ZedGraphDemo.ZedGraphControl">
            <summary>
            The control used to display this demo.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.ZedGraphDemo.Types">
            <summary>
            A collection of DemoType objects that this demo applies to.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.DemoBase.Pane">
            <summary>
            The graph pane the chart is show in.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.DemoBase.MasterPane">
            <summary>
            The graph pane the chart is show in.
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.DemoBase.GraphPane">
            <summary>
            The graph pane the chart is show in (same as .Pane).
            </summary>
        </member>
        <member name="P:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.DemoBase.ZedGraphControl">
            <summary>
            The control the graph pane is in.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.BarGraphBandDemo">
            <summary>
            Summary description for BarGraphBandDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.BaseTicDemo">
            <summary>
            Summary description for BaseTicDemo
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.ComboDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.CrossLineDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.DateAxisSampleDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.DemoType">
            <summary>
            Types of demos, these are used by ZedGraphDemos to describe what kind
            of demo they are.<p/>
            
            For new types to work in the ChartTabForm the name of the type has to 
            be added to ChartTabForm.TypeToName(...)
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.DualYDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.ErrorBarDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.FilledBarGraphDemo">
            <summary>
            Summary description for BarGraphBandDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.FilledCurveDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.GradientByValueDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.HiLowBarDemo">
            <summary>
            Summary description for HiLowBarDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.HiLowCloseDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.HorizontalBarDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.HorizontalBarSampleDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.HorizontalBarsWithLabelsDemo">
            <summary>
            Summary description for BarGraphBandDemo.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.HorizontalBarsWithLabelsDemo.CreateBarLabels(Alt.GUI.ZedGraph.GraphPane,System.Boolean,System.String)">
            <summary>
            Create a TextLabel for each bar in the GraphPane.
            Call this method only after calling AxisChange()
            </summary>
            <remarks>
            This method will go through the bars, create a label that corresponds to the bar value,
            and place it on the graph depending on user preferences.  This works for horizontal or
            vertical bars in clusters or stacks.</remarks>
            <param name="pane">The GraphPane in which to place the text labels.</param>
            <param name="isBarCenter">true to center the labels inside the bars, false to
            place the labels just above the top of the bar.</param>
            <param name="valueFormat">The double.ToString string format to use for creating
            the labels
            </param>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.ImageForSymbolDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.InitialSampleDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.JapaneseCandleStickDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.LineGraphBandDemo">
            <summary>
            Summary description for BarGraphBandDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.LineStackingDemo">
            <summary>
            Summary description for LineStackingDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.MasterPaneDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.MasterPaneLayout">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.MasterSampleDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.ModInitialSampleDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.MultiPieChartDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.MultiYDemo">
            <summary>
            Summary description for MultiYDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.OHLCBarDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.OverlayBarDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.PercentStkBarDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.PieChartDemo">
            <summary>
            Summary description for PieChartDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.PieSampleDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.SampleMultiPointListDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.SineBarGraphDemo">
            <summary>
            Summary description for BarGraphBandDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.SmoothChartDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.SortedOverlayBarDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.StackedBarSampleDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.StackedBarsWithLabelsDemo">
            <summary>
            Summary description for BarGraphBandDemo.
            </summary>
        </member>
        <member name="M:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.StackedBarsWithLabelsDemo.CreateBarLabels(Alt.GUI.ZedGraph.GraphPane,System.Boolean,System.String)">
            <summary>
            Create a TextLabel for each bar in the GraphPane.
            Call this method only after calling AxisChange()
            </summary>
            <remarks>
            This method will go through the bars, create a label that corresponds to the bar value,
            and place it on the graph depending on user preferences.  This works for horizontal or
            vertical bars in clusters or stacks.</remarks>
            <param name="pane">The GraphPane in which to place the text labels.</param>
            <param name="isBarCenter">true to center the labels inside the bars, false to
            place the labels just above the top of the bar.</param>
            <param name="valueFormat">The double.ToString string format to use for creating
            the labels
            </param>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.StepChartDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.StickItemDemo">
            <summary>
            Summary description for StickItemDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.SynchronizedPanes">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.TextAxisSampleDemo">
            <summary>
            Summary description for SimpleDemo.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.TransparentDemo1">
            <summary>
            Summary description for TransparentDemo1.
            </summary>
        </member>
        <member name="T:Alt.GUI.ZedGraph.Temporary.Gwen.Demo.VerticalBarsWithLabelsDemo">
            <summary>
            Summary description for BarGraphBandDemo.
            </summary>
        </member>
        <member name="T:AForge.MessageTransferHandler">
             <summary>
             A delegate which is used by events notifying abount sent/received message.
             </summary>
             
             <param name="sender">Event sender.</param>
             <param name="eventArgs">Event arguments containing details about the transferred message.</param>
            
        </member>
        <member name="T:AForge.DoublePoint">
            <summary>
            Structure for representing a pair of coordinates of double type.
            </summary>
            
            <remarks><para>The structure is used to store a pair of floating point
            coordinates with double precision.</para>
            
            <para>Sample usage:</para>
            <code>
            // assigning coordinates in the constructor
            DoublePoint p1 = new DoublePoint( 10, 20 );
            // creating a point and assigning coordinates later
            DoublePoint p2;
            p2.X = 30;
            p2.Y = 40;
            // calculating distance between two points
            double distance = p1.DistanceTo( p2 );
            </code>
            </remarks>
            
        </member>
        <member name="F:AForge.DoublePoint.X">
            <summary> 
            X coordinate.
            </summary> 
            
        </member>
        <member name="F:AForge.DoublePoint.Y">
            <summary> 
            Y coordinate.
            </summary> 
            
        </member>
        <member name="M:AForge.DoublePoint.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.DoublePoint"/> structure.
            </summary>
            
            <param name="x">X axis coordinate.</param>
            <param name="y">Y axis coordinate.</param>
            
        </member>
        <member name="M:AForge.DoublePoint.DistanceTo(AForge.DoublePoint)">
            <summary>
            Calculate Euclidean distance between two points.
            </summary>
            
            <param name="anotherPoint">Point to calculate distance to.</param>
            
            <returns>Returns Euclidean distance between this point and
            <paramref name="anotherPoint"/> points.</returns>
            
        </member>
        <member name="M:AForge.DoublePoint.SquaredDistanceTo(AForge.DoublePoint)">
            <summary>
            Calculate squared Euclidean distance between two points.
            </summary>
            
            <param name="anotherPoint">Point to calculate distance to.</param>
            
            <returns>Returns squared Euclidean distance between this point and
            <paramref name="anotherPoint"/> points.</returns>
            
        </member>
        <member name="M:AForge.DoublePoint.op_Addition(AForge.DoublePoint,AForge.DoublePoint)">
            <summary>
            Addition operator - adds values of two points.
            </summary>
            
            <param name="point1">First point for addition.</param>
            <param name="point2">Second point for addition.</param>
            
            <returns>Returns new point which coordinates equal to sum of corresponding
            coordinates of specified points.</returns>
            
        </member>
        <member name="M:AForge.DoublePoint.Add(AForge.DoublePoint,AForge.DoublePoint)">
            <summary>
            Addition operator - adds values of two points.
            </summary>
            
            <param name="point1">First point for addition.</param>
            <param name="point2">Second point for addition.</param>
            
            <returns>Returns new point which coordinates equal to sum of corresponding
            coordinates of specified points.</returns>
            
        </member>
        <member name="M:AForge.DoublePoint.op_Subtraction(AForge.DoublePoint,AForge.DoublePoint)">
             <summary>
             Subtraction operator - subtracts values of two points.
             </summary>
             
             <param name="point1">Point to subtract from.</param>
             <param name="point2">Point to subtract.</param>
             
             <returns>Returns new point which coordinates equal to difference of corresponding
             coordinates of specified points.</returns>
            
        </member>
        <member name="M:AForge.DoublePoint.Subtract(AForge.DoublePoint,AForge.DoublePoint)">
             <summary>
             Subtraction operator - subtracts values of two points.
             </summary>
             
             <param name="point1">Point to subtract from.</param>
             <param name="point2">Point to subtract.</param>
             
             <returns>Returns new point which coordinates equal to difference of corresponding
             coordinates of specified points.</returns>
            
        </member>
        <member name="M:AForge.DoublePoint.op_Addition(AForge.DoublePoint,System.Double)">
            <summary>
            Addition operator - adds scalar to the specified point.
            </summary>
            
            <param name="point">Point to increase coordinates of.</param>
            <param name="valueToAdd">Value to add to coordinates of the specified point.</param>
            
            <returns>Returns new point which coordinates equal to coordinates of
            the specified point increased by specified value.</returns>
            
        </member>
        <member name="M:AForge.DoublePoint.Add(AForge.DoublePoint,System.Double)">
            <summary>
            Addition operator - adds scalar to the specified point.
            </summary>
            
            <param name="point">Point to increase coordinates of.</param>
            <param name="valueToAdd">Value to add to coordinates of the specified point.</param>
            
            <returns>Returns new point which coordinates equal to coordinates of
            the specified point increased by specified value.</returns>
            
        </member>
        <member name="M:AForge.DoublePoint.op_Subtraction(AForge.DoublePoint,System.Double)">
            <summary>
            Subtraction operator - subtracts scalar from the specified point.
            </summary>
            
            <param name="point">Point to decrease coordinates of.</param>
            <param name="valueToSubtract">Value to subtract from coordinates of the specified point.</param>
            
            <returns>Returns new point which coordinates equal to coordinates of
            the specified point decreased by specified value.</returns>
            
        </member>
        <member name="M:AForge.DoublePoint.Subtract(AForge.DoublePoint,System.Double)">
            <summary>
            Subtraction operator - subtracts scalar from the specified point.
            </summary>
            
            <param name="point">Point to decrease coordinates of.</param>
            <param name="valueToSubtract">Value to subtract from coordinates of the specified point.</param>
            
            <returns>Returns new point which coordinates equal to coordinates of
            the specified point decreased by specified value.</returns>
            
        </member>
        <member name="M:AForge.DoublePoint.op_Multiply(AForge.DoublePoint,System.Double)">
             <summary>
             Multiplication operator - multiplies coordinates of the specified point by scalar value.
             </summary>
             
             <param name="point">Point to multiply coordinates of.</param>
             <param name="factor">Multiplication factor.</param>
             
             <returns>Returns new point which coordinates equal to coordinates of
             the specified point multiplied by specified value.</returns>
            
        </member>
        <member name="M:AForge.DoublePoint.Multiply(AForge.DoublePoint,System.Double)">
             <summary>
             Multiplication operator - multiplies coordinates of the specified point by scalar value.
             </summary>
             
             <param name="point">Point to multiply coordinates of.</param>
             <param name="factor">Multiplication factor.</param>
             
             <returns>Returns new point which coordinates equal to coordinates of
             the specified point multiplied by specified value.</returns>
            
        </member>
        <member name="M:AForge.DoublePoint.op_Division(AForge.DoublePoint,System.Double)">
            <summary>
            Division operator - divides coordinates of the specified point by scalar value.
            </summary>
            
            <param name="point">Point to divide coordinates of.</param>
            <param name="factor">Division factor.</param>
            
            <returns>Returns new point which coordinates equal to coordinates of
            the specified point divided by specified value.</returns>
            
        </member>
        <member name="M:AForge.DoublePoint.Divide(AForge.DoublePoint,System.Double)">
            <summary>
            Division operator - divides coordinates of the specified point by scalar value.
            </summary>
            
            <param name="point">Point to divide coordinates of.</param>
            <param name="factor">Division factor.</param>
            
            <returns>Returns new point which coordinates equal to coordinates of
            the specified point divided by specified value.</returns>
            
        </member>
        <member name="M:AForge.DoublePoint.op_Equality(AForge.DoublePoint,AForge.DoublePoint)">
             <summary>
             Equality operator - checks if two points have equal coordinates.
             </summary>
             
             <param name="point1">First point to check.</param>
             <param name="point2">Second point to check.</param>
             
             <returns>Returns <see langword="true"/> if coordinates of specified
             points are equal.</returns>
            
        </member>
        <member name="M:AForge.DoublePoint.op_Inequality(AForge.DoublePoint,AForge.DoublePoint)">
             <summary>
             Inequality operator - checks if two points have different coordinates.
             </summary>
             
             <param name="point1">First point to check.</param>
             <param name="point2">Second point to check.</param>
             
             <returns>Returns <see langword="true"/> if coordinates of specified
             points are not equal.</returns>
            
        </member>
        <member name="M:AForge.DoublePoint.Equals(System.Object)">
            <summary>
            Check if this instance of <see cref="T:AForge.DoublePoint"/> equal to the specified one.
            </summary>
            
            <param name="obj">Another point to check equalty to.</param>
            
            <returns>Return <see langword="true"/> if objects are equal.</returns>
            
        </member>
        <member name="M:AForge.DoublePoint.GetHashCode">
            <summary>
            Get hash code for this instance.
            </summary>
            
            <returns>Returns the hash code for this instance.</returns>
            
        </member>
        <member name="M:AForge.DoublePoint.op_Explicit(AForge.DoublePoint)~AForge.IntPoint">
            <summary>
            Explicit conversion to <see cref="T:AForge.IntPoint"/>.
            </summary>
            
            <param name="point">Double precision point to convert to integer point.</param>
            
            <returns>Returns new integer point which coordinates are explicitly converted
            to integers from coordinates of the specified double precision point by
            casting double values to integers value.</returns>
            
        </member>
        <member name="M:AForge.DoublePoint.op_Explicit(AForge.DoublePoint)~AForge.Point">
            <summary>
            Explicit conversion to <see cref="T:AForge.Point"/>.
            </summary>
            
            <param name="point">Double precision point to convert to single precision point.</param>
            
            <returns>Returns new single precision point which coordinates are explicitly converted
            to floats from coordinates of the specified double precision point by
            casting double values to float value.</returns>
            
        </member>
        <member name="M:AForge.DoublePoint.Round">
            <summary>
            Rounds the double precision point.
            </summary>
            
            <returns>Returns new integer point, which coordinates equal to whole numbers
            nearest to the corresponding coordinates of the double precision point.</returns>
            
        </member>
        <member name="M:AForge.DoublePoint.ToString">
             <summary>
             Get string representation of the class.
             </summary>
             
             <returns>Returns string, which contains values of the point in readable form.</returns>
            
        </member>
        <member name="M:AForge.DoublePoint.EuclideanNorm">
            <summary>
            Calculate Euclidean norm of the vector comprised of the point's 
            coordinates - distance from (0, 0) in other words.
            </summary>
            
            <returns>Returns point's distance from (0, 0) point.</returns>
            
        </member>
        <member name="T:AForge.DoubleRange">
            <summary>
            Represents a double range with minimum and maximum values.
            </summary>
            
            <remarks>
            <para>The class represents a double range with inclusive limits -
            both minimum and maximum values of the range are included into it.
            Mathematical notation of such range is <b>[min, max]</b>.</para>
            
            <para>Sample usage:</para>
            <code>
            // create [0.25, 1.5] range
            DoubleRange range1 = new DoubleRange( 0.25, 1.5 );
            // create [1.00, 2.25] range
            DoubleRange range2 = new DoubleRange( 1.00, 2.25 );
            // check if values is inside of the first range
            if ( range1.IsInside( 0.75 ) )
            {
                // ...
            }
            // check if the second range is inside of the first range
            if ( range1.IsInside( range2 ) )
            {
                // ...
            }
            // check if two ranges overlap
            if ( range1.IsOverlapping( range2 ) )
            {
                // ...
            }
            </code>
            </remarks>
            
        </member>
        <member name="M:AForge.DoubleRange.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.DoubleRange"/> class.
            </summary>
            
            <param name="min">Minimum value of the range.</param>
            <param name="max">Maximum value of the range.</param>
            
        </member>
        <member name="M:AForge.DoubleRange.IsInside(System.Double)">
            <summary>
            Check if the specified value is inside of the range.
            </summary>
            
            <param name="x">Value to check.</param>
            
            <returns><b>True</b> if the specified value is inside of the range or
            <b>false</b> otherwise.</returns>
            
        </member>
        <member name="M:AForge.DoubleRange.IsInside(AForge.DoubleRange)">
            <summary>
            Check if the specified range is inside of the range.
            </summary>
            
            <param name="range">Range to check.</param>
            
            <returns><b>True</b> if the specified range is inside of the range or
            <b>false</b> otherwise.</returns>
            
        </member>
        <member name="M:AForge.DoubleRange.IsOverlapping(AForge.DoubleRange)">
            <summary>
            Check if the specified range overlaps with the range.
            </summary>
            
            <param name="range">Range to check for overlapping.</param>
            
            <returns><b>True</b> if the specified range overlaps with the range or
            <b>false</b> otherwise.</returns>
            
        </member>
        <member name="M:AForge.DoubleRange.ToIntRange(System.Boolean)">
             <summary>
             Convert the signle precision range to integer range.
             </summary>
             
             <param name="provideInnerRange">Specifies if inner integer range must be returned or outer range.</param>
             
             <returns>Returns integer version of the range.</returns>
             
             <remarks>If <paramref name="provideInnerRange"/> is set to <see langword="true"/>, then the
             returned integer range will always fit inside of the current single precision range.
             If it is set to <see langword="false"/>, then current single precision range will always
             fit into the returned integer range.</remarks>
            
        </member>
        <member name="M:AForge.DoubleRange.op_Equality(AForge.DoubleRange,AForge.DoubleRange)">
             <summary>
             Equality operator - checks if two ranges have equal min/max values.
             </summary>
             
             <param name="range1">First range to check.</param>
             <param name="range2">Second range to check.</param>
             
             <returns>Returns <see langword="true"/> if min/max values of specified
             ranges are equal.</returns>
            
        </member>
        <member name="M:AForge.DoubleRange.op_Inequality(AForge.DoubleRange,AForge.DoubleRange)">
             <summary>
             Inequality operator - checks if two ranges have different min/max values.
             </summary>
             
             <param name="range1">First range to check.</param>
             <param name="range2">Second range to check.</param>
             
             <returns>Returns <see langword="true"/> if min/max values of specified
             ranges are not equal.</returns>
            
        </member>
        <member name="M:AForge.DoubleRange.Equals(System.Object)">
            <summary>
            Check if this instance of <see cref="T:AForge.Range"/> equal to the specified one.
            </summary>
            
            <param name="obj">Another range to check equalty to.</param>
            
            <returns>Return <see langword="true"/> if objects are equal.</returns>
            
        </member>
        <member name="M:AForge.DoubleRange.GetHashCode">
            <summary>
            Get hash code for this instance.
            </summary>
            
            <returns>Returns the hash code for this instance.</returns>
            
        </member>
        <member name="M:AForge.DoubleRange.ToString">
             <summary>
             Get string representation of the class.
             </summary>
             
             <returns>Returns string, which contains min/max values of the range in readable form.</returns>
            
        </member>
        <member name="P:AForge.DoubleRange.Min">
            <summary>
            Minimum value of the range.
            </summary>
            
            <remarks><para>The property represents minimum value (left side limit) or the range -
            [<b>min</b>, max].</para></remarks>
            
        </member>
        <member name="P:AForge.DoubleRange.Max">
            <summary>
            Maximum value of the range.
            </summary>
            
            <remarks><para>The property represents maximum value (right side limit) or the range -
            [min, <b>max</b>].</para></remarks>
            
        </member>
        <member name="P:AForge.DoubleRange.Length">
            <summary>
            Length of the range (deffirence between maximum and minimum values).
            </summary>
        </member>
        <member name="T:AForge.CommunicationBufferEventArgs">
            <summary>
            Event arguments holding a buffer sent or received during some communication process.
            </summary>
        </member>
        <member name="M:AForge.CommunicationBufferEventArgs.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.CommunicationBufferEventArgs"/> class.
            </summary>
            
            <param name="message">Message being transfered during communication process.</param>
            
        </member>
        <member name="M:AForge.CommunicationBufferEventArgs.#ctor(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:AForge.CommunicationBufferEventArgs"/> class.
             </summary>
            
             <param name="buffer">Buffer containing the message being transferred during communication process.</param>
             <param name="index">Starting index of the message within the buffer.</param>
             <param name="length">Length of the message within the buffer.</param>
            
        </member>
        <member name="M:AForge.CommunicationBufferEventArgs.GetMessage">
            <summary>
            Get the transfered message.
            </summary>
            
            <returns>Returns copy of the transfered message.</returns>
            
        </member>
        <member name="M:AForge.CommunicationBufferEventArgs.GetMessageString">
             <summary>
             Get the transferred message as string.
             </summary>
             
             <returns>Returns string encoding the transferred message.</returns>
            
        </member>
        <member name="P:AForge.CommunicationBufferEventArgs.MessageLength">
            <summary>
            Length of the transfered message.
            </summary>
        </member>
        <member name="T:AForge.ConnectionFailedException">
            <summary>
            Connection failed exception.
            </summary>
            
            <remarks><para>The exception is thrown in the case if connection to device
            has failed.</para>
            </remarks>
            
        </member>
        <member name="M:AForge.ConnectionFailedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.ConnectionFailedException"/> class.
            </summary>
            
            <param name="message">Exception's message.</param>
            
        </member>
        <member name="T:AForge.ConnectionLostException">
            <summary>
            Connection lost exception.
            </summary>
            
            <remarks><para>The exception is thrown in the case if connection to device
            is lost. When the exception is caught, user may need to reconnect to the device.</para>
            </remarks>
            
        </member>
        <member name="M:AForge.ConnectionLostException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.ConnectionLostException"/> class.
            </summary>
            
            <param name="message">Exception's message.</param>
            
        </member>
        <member name="T:AForge.NotConnectedException">
            <summary>
            Not connected exception.
            </summary>
            
            <remarks><para>The exception is thrown in the case if connection to device
            is not established, but user requests for its services.</para>
            </remarks>
            
        </member>
        <member name="M:AForge.NotConnectedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.NotConnectedException"/> class.
            </summary>
            
            <param name="message">Exception's message.</param>
            
        </member>
        <member name="T:AForge.DeviceBusyException">
            <summary>
            Device busy exception.
            </summary>
            
            <remarks><para>The exception is thrown in the case if access to certain device
            is not available due to the fact that it is currently busy handling other request/connection.</para>
            </remarks>
            
        </member>
        <member name="M:AForge.DeviceBusyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.DeviceBusyException"/> class.
            </summary>
            
            <param name="message">Exception's message.</param>
            
        </member>
        <member name="T:AForge.DeviceErrorException">
             <summary>
             Device error exception.
             </summary>
             
             <remarks><para>The exception is thrown in the case if some error happens with a device, which
             may need to be reported to user.</para></remarks>
            
        </member>
        <member name="M:AForge.DeviceErrorException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.DeviceErrorException"/> class.
            </summary>
            
            <param name="message">Exception's message.</param>
            
        </member>
        <member name="T:AForge.IntPoint">
            <summary>
            Structure for representing a pair of coordinates of integer type.
            </summary>
            
            <remarks><para>The structure is used to store a pair of integer coordinates.</para>
            
            <para>Sample usage:</para>
            <code>
            // assigning coordinates in the constructor
            IntPoint p1 = new IntPoint( 10, 20 );
            // creating a point and assigning coordinates later
            IntPoint p2;
            p2.X = 30;
            p2.Y = 40;
            // calculating distance between two points
            float distance = p1.DistanceTo( p2 );
            </code>
            </remarks>
            
        </member>
        <member name="F:AForge.IntPoint.X">
            <summary> 
            X coordinate.
            </summary> 
            
        </member>
        <member name="F:AForge.IntPoint.Y">
            <summary> 
            Y coordinate.
            </summary> 
            
        </member>
        <member name="M:AForge.IntPoint.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.IntPoint"/> structure.
            </summary>
            
            <param name="x">X axis coordinate.</param>
            <param name="y">Y axis coordinate.</param>
            
        </member>
        <member name="M:AForge.IntPoint.DistanceTo(AForge.IntPoint)">
            <summary>
            Calculate Euclidean distance between two points.
            </summary>
            
            <param name="anotherPoint">Point to calculate distance to.</param>
            
            <returns>Returns Euclidean distance between this point and
            <paramref name="anotherPoint"/> points.</returns>
            
        </member>
        <member name="M:AForge.IntPoint.SquaredDistanceTo(AForge.Point)">
            <summary>
            Calculate squared Euclidean distance between two points.
            </summary>
            
            <param name="anotherPoint">Point to calculate distance to.</param>
            
            <returns>Returns squared Euclidean distance between this point and
            <paramref name="anotherPoint"/> points.</returns>
            
        </member>
        <member name="M:AForge.IntPoint.op_Addition(AForge.IntPoint,AForge.IntPoint)">
            <summary>
            Addition operator - adds values of two points.
            </summary>
            
            <param name="point1">First point for addition.</param>
            <param name="point2">Second point for addition.</param>
            
            <returns>Returns new point which coordinates equal to sum of corresponding
            coordinates of specified points.</returns>
            
        </member>
        <member name="M:AForge.IntPoint.Add(AForge.IntPoint,AForge.IntPoint)">
            <summary>
            Addition operator - adds values of two points.
            </summary>
            
            <param name="point1">First point for addition.</param>
            <param name="point2">Second point for addition.</param>
            
            <returns>Returns new point which coordinates equal to sum of corresponding
            coordinates of specified points.</returns>
            
        </member>
        <member name="M:AForge.IntPoint.op_Subtraction(AForge.IntPoint,AForge.IntPoint)">
             <summary>
             Subtraction operator - subtracts values of two points.
             </summary>
             
             <param name="point1">Point to subtract from.</param>
             <param name="point2">Point to subtract.</param>
             
             <returns>Returns new point which coordinates equal to difference of corresponding
             coordinates of specified points.</returns>
            
        </member>
        <member name="M:AForge.IntPoint.Subtract(AForge.IntPoint,AForge.IntPoint)">
             <summary>
             Subtraction operator - subtracts values of two points.
             </summary>
             
             <param name="point1">Point to subtract from.</param>
             <param name="point2">Point to subtract.</param>
             
             <returns>Returns new point which coordinates equal to difference of corresponding
             coordinates of specified points.</returns>
            
        </member>
        <member name="M:AForge.IntPoint.op_Addition(AForge.IntPoint,System.Int32)">
            <summary>
            Addition operator - adds scalar to the specified point.
            </summary>
            
            <param name="point">Point to increase coordinates of.</param>
            <param name="valueToAdd">Value to add to coordinates of the specified point.</param>
            
            <returns>Returns new point which coordinates equal to coordinates of
            the specified point increased by specified value.</returns>
            
        </member>
        <member name="M:AForge.IntPoint.Add(AForge.IntPoint,System.Int32)">
            <summary>
            Addition operator - adds scalar to the specified point.
            </summary>
            
            <param name="point">Point to increase coordinates of.</param>
            <param name="valueToAdd">Value to add to coordinates of the specified point.</param>
            
            <returns>Returns new point which coordinates equal to coordinates of
            the specified point increased by specified value.</returns>
            
        </member>
        <member name="M:AForge.IntPoint.op_Subtraction(AForge.IntPoint,System.Int32)">
            <summary>
            Subtraction operator - subtracts scalar from the specified point.
            </summary>
            
            <param name="point">Point to decrease coordinates of.</param>
            <param name="valueToSubtract">Value to subtract from coordinates of the specified point.</param>
            
            <returns>Returns new point which coordinates equal to coordinates of
            the specified point decreased by specified value.</returns>
            
        </member>
        <member name="M:AForge.IntPoint.Subtract(AForge.IntPoint,System.Int32)">
            <summary>
            Subtraction operator - subtracts scalar from the specified point.
            </summary>
            
            <param name="point">Point to decrease coordinates of.</param>
            <param name="valueToSubtract">Value to subtract from coordinates of the specified point.</param>
            
            <returns>Returns new point which coordinates equal to coordinates of
            the specified point decreased by specified value.</returns>
            
        </member>
        <member name="M:AForge.IntPoint.op_Multiply(AForge.IntPoint,System.Int32)">
             <summary>
             Multiplication operator - multiplies coordinates of the specified point by scalar value.
             </summary>
             
             <param name="point">Point to multiply coordinates of.</param>
             <param name="factor">Multiplication factor.</param>
             
             <returns>Returns new point which coordinates equal to coordinates of
             the specified point multiplied by specified value.</returns>
            
        </member>
        <member name="M:AForge.IntPoint.Multiply(AForge.IntPoint,System.Int32)">
             <summary>
             Multiplication operator - multiplies coordinates of the specified point by scalar value.
             </summary>
             
             <param name="point">Point to multiply coordinates of.</param>
             <param name="factor">Multiplication factor.</param>
             
             <returns>Returns new point which coordinates equal to coordinates of
             the specified point multiplied by specified value.</returns>
            
        </member>
        <member name="M:AForge.IntPoint.op_Division(AForge.IntPoint,System.Int32)">
            <summary>
            Division operator - divides coordinates of the specified point by scalar value.
            </summary>
            
            <param name="point">Point to divide coordinates of.</param>
            <param name="factor">Division factor.</param>
            
            <returns>Returns new point which coordinates equal to coordinates of
            the specified point divided by specified value.</returns>
            
        </member>
        <member name="M:AForge.IntPoint.Divide(AForge.IntPoint,System.Int32)">
            <summary>
            Division operator - divides coordinates of the specified point by scalar value.
            </summary>
            
            <param name="point">Point to divide coordinates of.</param>
            <param name="factor">Division factor.</param>
            
            <returns>Returns new point which coordinates equal to coordinates of
            the specified point divided by specified value.</returns>
            
        </member>
        <member name="M:AForge.IntPoint.op_Equality(AForge.IntPoint,AForge.IntPoint)">
             <summary>
             Equality operator - checks if two points have equal coordinates.
             </summary>
             
             <param name="point1">First point to check.</param>
             <param name="point2">Second point to check.</param>
             
             <returns>Returns <see langword="true"/> if coordinates of specified
             points are equal.</returns>
            
        </member>
        <member name="M:AForge.IntPoint.op_Inequality(AForge.IntPoint,AForge.IntPoint)">
             <summary>
             Inequality operator - checks if two points have different coordinates.
             </summary>
             
             <param name="point1">First point to check.</param>
             <param name="point2">Second point to check.</param>
             
             <returns>Returns <see langword="true"/> if coordinates of specified
             points are not equal.</returns>
            
        </member>
        <member name="M:AForge.IntPoint.Equals(System.Object)">
            <summary>
            Check if this instance of <see cref="T:AForge.IntPoint"/> equal to the specified one.
            </summary>
            
            <param name="obj">Another point to check equalty to.</param>
            
            <returns>Return <see langword="true"/> if objects are equal.</returns>
            
        </member>
        <member name="M:AForge.IntPoint.GetHashCode">
            <summary>
            Get hash code for this instance.
            </summary>
            
            <returns>Returns the hash code for this instance.</returns>
            
        </member>
        <member name="M:AForge.IntPoint.op_Implicit(AForge.IntPoint)~AForge.Point">
            <summary>
            Implicit conversion to <see cref="T:AForge.Point"/>.
            </summary>
            
            <param name="point">Integer point to convert to single precision point.</param>
            
            <returns>Returns new single precision point which coordinates are implicitly converted
            to floats from coordinates of the specified integer point.</returns>
            
        </member>
        <member name="M:AForge.IntPoint.op_Implicit(AForge.IntPoint)~AForge.DoublePoint">
            <summary>
            Implicit conversion to <see cref="T:AForge.DoublePoint"/>.
            </summary>
            
            <param name="point">Integer point to convert to double precision point.</param>
            
            <returns>Returns new double precision point which coordinates are implicitly converted
            to doubles from coordinates of the specified integer point.</returns>
            
        </member>
        <member name="M:AForge.IntPoint.ToString">
             <summary>
             Get string representation of the class.
             </summary>
             
             <returns>Returns string, which contains values of the point in readable form.</returns>
            
        </member>
        <member name="M:AForge.IntPoint.EuclideanNorm">
            <summary>
            Calculate Euclidean norm of the vector comprised of the point's 
            coordinates - distance from (0, 0) in other words.
            </summary>
            
            <returns>Returns point's distance from (0, 0) point.</returns>
            
        </member>
        <member name="T:AForge.IntRange">
             <summary>
             Represents an integer range with minimum and maximum values.
             </summary>
             
             <remarks>
             <para>The class represents an integer range with inclusive limits -
             both minimum and maximum values of the range are included into it.
             Mathematical notation of such range is <b>[min, max]</b>.</para>
             
             <para>Sample usage:</para>
             <code>
             // create [1, 10] range
             IntRange range1 = new IntRange( 1, 10 );
             // create [5, 15] range
             IntRange range2 = new IntRange( 5, 15 );
             // check if values is inside of the first range
             if ( range1.IsInside( 7 ) )
             {
                 // ...
             }
             // check if the second range is inside of the first range
             if ( range1.IsInside( range2 ) )
             {
                 // ...
             }
             // check if two ranges overlap
             if ( range1.IsOverlapping( range2 ) )
             {
                 // ...
             }
             </code>
             </remarks>
            
        </member>
        <member name="M:AForge.IntRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.IntRange"/> structure.
            </summary>
            
            <param name="min">Minimum value of the range.</param>
            <param name="max">Maximum value of the range.</param>
            
        </member>
        <member name="M:AForge.IntRange.IsInside(System.Int32)">
            <summary>
            Check if the specified value is inside of the range.
            </summary>
            
            <param name="x">Value to check.</param>
            
            <returns><b>True</b> if the specified value is inside of the range or
            <b>false</b> otherwise.</returns>
            
        </member>
        <member name="M:AForge.IntRange.IsInside(AForge.IntRange)">
            <summary>
            Check if the specified range is inside of the range.
            </summary>
            
            <param name="range">Range to check.</param>
            
            <returns><b>True</b> if the specified range is inside of the range or
            <b>false</b> otherwise.</returns>
            
        </member>
        <member name="M:AForge.IntRange.IsOverlapping(AForge.IntRange)">
            <summary>
            Check if the specified range overlaps with the range.
            </summary>
            
            <param name="range">Range to check for overlapping.</param>
            
            <returns><b>True</b> if the specified range overlaps with the range or
            <b>false</b> otherwise.</returns>
            
        </member>
        <member name="M:AForge.IntRange.op_Implicit(AForge.IntRange)~AForge.Range">
            <summary>
            Implicit conversion to <see cref="T:AForge.Range"/>.
            </summary>
            
            <param name="range">Integer range to convert to single precision range.</param>
            
            <returns>Returns new single precision range which min/max values are implicitly converted
            to floats from min/max values of the specified integer range.</returns>
            
        </member>
        <member name="M:AForge.IntRange.op_Equality(AForge.IntRange,AForge.IntRange)">
             <summary>
             Equality operator - checks if two ranges have equal min/max values.
             </summary>
             
             <param name="range1">First range to check.</param>
             <param name="range2">Second range to check.</param>
             
             <returns>Returns <see langword="true"/> if min/max values of specified
             ranges are equal.</returns>
            
        </member>
        <member name="M:AForge.IntRange.op_Inequality(AForge.IntRange,AForge.IntRange)">
             <summary>
             Inequality operator - checks if two ranges have different min/max values.
             </summary>
             
             <param name="range1">First range to check.</param>
             <param name="range2">Second range to check.</param>
             
             <returns>Returns <see langword="true"/> if min/max values of specified
             ranges are not equal.</returns>
            
        </member>
        <member name="M:AForge.IntRange.Equals(System.Object)">
            <summary>
            Check if this instance of <see cref="T:AForge.Range"/> equal to the specified one.
            </summary>
            
            <param name="obj">Another range to check equalty to.</param>
            
            <returns>Return <see langword="true"/> if objects are equal.</returns>
            
        </member>
        <member name="M:AForge.IntRange.GetHashCode">
            <summary>
            Get hash code for this instance.
            </summary>
            
            <returns>Returns the hash code for this instance.</returns>
            
        </member>
        <member name="M:AForge.IntRange.ToString">
             <summary>
             Get string representation of the class.
             </summary>
             
             <returns>Returns string, which contains min/max values of the range in readable form.</returns>
            
        </member>
        <member name="P:AForge.IntRange.Min">
            <summary>
            Minimum value of the range.
            </summary>
            
            <remarks><para>The property represents minimum value (left side limit) or the range -
            [<b>min</b>, max].</para></remarks>
            
        </member>
        <member name="P:AForge.IntRange.Max">
            <summary>
            Maximum value of the range.
            </summary>
            
            <remarks><para>The property represents maximum value (right side limit) or the range -
            [min, <b>max</b>].</para></remarks>
            
        </member>
        <member name="P:AForge.IntRange.Length">
            <summary>
            Length of the range (deffirence between maximum and minimum values).
            </summary>
        </member>
        <member name="T:AForge.Parallel">
             <summary>
             The class provides support for parallel computations, paralleling loop's iterations.
             </summary>
             
             <remarks><para>The class allows to parallel loop's iteration computing them in separate threads,
             what allows their simultaneous execution on multiple CPUs/cores.
             </para></remarks>
            
        </member>
        <member name="M:AForge.Parallel.For(System.Int32,System.Int32,AForge.Parallel.ForLoopBody)">
            <summary>
            Executes a for-loop in which iterations may run in parallel. 
            </summary>
            
            <param name="start">Loop's start index.</param>
            <param name="stop">Loop's stop index.</param>
            <param name="loopBody">Loop's body.</param>
            
            <remarks><para>The method is used to parallel for-loop running its iterations in
            different threads. The <b>start</b> and <b>stop</b> parameters define loop's
            starting and ending loop's indexes. The number of iterations is equal to <b>stop - start</b>.
            </para>
            
            <para>Sample usage:</para>
            <code>
            Parallel.For( 0, 20, delegate( int i )
            // which is equivalent to
            // for ( int i = 0; i &lt; 20; i++ )
            {
                System.Diagnostics.Debug.WriteLine( "Iteration: " + i );
                // ...
            } );
            </code>
            </remarks>
            
        </member>
        <member name="P:AForge.Parallel.ThreadsCount">
            <summary>
            Number of threads used for parallel computations.
            </summary>
            
            <remarks><para>The property sets how many worker threads are created for paralleling
            loops' computations.</para>
            
            <para>By default the property is set to number of CPU's in the system
            (see <see cref="P:System.Environment.ProcessorCount"/>).</para>
            </remarks>
            
        </member>
        <member name="T:AForge.Parallel.ForLoopBody">
            <summary>
            Delegate defining for-loop's body.
            </summary>
            
            <param name="index">Loop's index.</param>
            
        </member>
        <member name="T:AForge.Point">
            <summary>
            Structure for representing a pair of coordinates of float type.
            </summary>
            
            <remarks><para>The structure is used to store a pair of floating point
            coordinates with single precision.</para>
            
            <para>Sample usage:</para>
            <code>
            // assigning coordinates in the constructor
            Point p1 = new Point( 10, 20 );
            // creating a point and assigning coordinates later
            Point p2;
            p2.X = 30;
            p2.Y = 40;
            // calculating distance between two points
            float distance = p1.DistanceTo( p2 );
            </code>
            </remarks>
            
        </member>
        <member name="F:AForge.Point.X">
            <summary> 
            X coordinate.
            </summary> 
            
        </member>
        <member name="F:AForge.Point.Y">
            <summary> 
            Y coordinate.
            </summary> 
            
        </member>
        <member name="M:AForge.Point.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Point"/> structure.
            </summary>
            
            <param name="x">X axis coordinate.</param>
            <param name="y">Y axis coordinate.</param>
            
        </member>
        <member name="M:AForge.Point.DistanceTo(AForge.Point)">
            <summary>
            Calculate Euclidean distance between two points.
            </summary>
            
            <param name="anotherPoint">Point to calculate distance to.</param>
            
            <returns>Returns Euclidean distance between this point and
            <paramref name="anotherPoint"/> points.</returns>
            
        </member>
        <member name="M:AForge.Point.SquaredDistanceTo(AForge.Point)">
            <summary>
            Calculate squared Euclidean distance between two points.
            </summary>
            
            <param name="anotherPoint">Point to calculate distance to.</param>
            
            <returns>Returns squared Euclidean distance between this point and
            <paramref name="anotherPoint"/> points.</returns>
            
        </member>
        <member name="M:AForge.Point.op_Addition(AForge.Point,AForge.Point)">
            <summary>
            Addition operator - adds values of two points.
            </summary>
            
            <param name="point1">First point for addition.</param>
            <param name="point2">Second point for addition.</param>
            
            <returns>Returns new point which coordinates equal to sum of corresponding
            coordinates of specified points.</returns>
            
        </member>
        <member name="M:AForge.Point.Add(AForge.Point,AForge.Point)">
            <summary>
            Addition operator - adds values of two points.
            </summary>
            
            <param name="point1">First point for addition.</param>
            <param name="point2">Second point for addition.</param>
            
            <returns>Returns new point which coordinates equal to sum of corresponding
            coordinates of specified points.</returns>
            
        </member>
        <member name="M:AForge.Point.op_Subtraction(AForge.Point,AForge.Point)">
             <summary>
             Subtraction operator - subtracts values of two points.
             </summary>
             
             <param name="point1">Point to subtract from.</param>
             <param name="point2">Point to subtract.</param>
             
             <returns>Returns new point which coordinates equal to difference of corresponding
             coordinates of specified points.</returns>
            
        </member>
        <member name="M:AForge.Point.Subtract(AForge.Point,AForge.Point)">
             <summary>
             Subtraction operator - subtracts values of two points.
             </summary>
             
             <param name="point1">Point to subtract from.</param>
             <param name="point2">Point to subtract.</param>
             
             <returns>Returns new point which coordinates equal to difference of corresponding
             coordinates of specified points.</returns>
            
        </member>
        <member name="M:AForge.Point.op_Addition(AForge.Point,System.Single)">
            <summary>
            Addition operator - adds scalar to the specified point.
            </summary>
            
            <param name="point">Point to increase coordinates of.</param>
            <param name="valueToAdd">Value to add to coordinates of the specified point.</param>
            
            <returns>Returns new point which coordinates equal to coordinates of
            the specified point increased by specified value.</returns>
            
        </member>
        <member name="M:AForge.Point.Add(AForge.Point,System.Single)">
            <summary>
            Addition operator - adds scalar to the specified point.
            </summary>
            
            <param name="point">Point to increase coordinates of.</param>
            <param name="valueToAdd">Value to add to coordinates of the specified point.</param>
            
            <returns>Returns new point which coordinates equal to coordinates of
            the specified point increased by specified value.</returns>
            
        </member>
        <member name="M:AForge.Point.op_Subtraction(AForge.Point,System.Single)">
            <summary>
            Subtraction operator - subtracts scalar from the specified point.
            </summary>
            
            <param name="point">Point to decrease coordinates of.</param>
            <param name="valueToSubtract">Value to subtract from coordinates of the specified point.</param>
            
            <returns>Returns new point which coordinates equal to coordinates of
            the specified point decreased by specified value.</returns>
            
        </member>
        <member name="M:AForge.Point.Subtract(AForge.Point,System.Single)">
            <summary>
            Subtraction operator - subtracts scalar from the specified point.
            </summary>
            
            <param name="point">Point to decrease coordinates of.</param>
            <param name="valueToSubtract">Value to subtract from coordinates of the specified point.</param>
            
            <returns>Returns new point which coordinates equal to coordinates of
            the specified point decreased by specified value.</returns>
            
        </member>
        <member name="M:AForge.Point.op_Multiply(AForge.Point,System.Single)">
             <summary>
             Multiplication operator - multiplies coordinates of the specified point by scalar value.
             </summary>
             
             <param name="point">Point to multiply coordinates of.</param>
             <param name="factor">Multiplication factor.</param>
             
             <returns>Returns new point which coordinates equal to coordinates of
             the specified point multiplied by specified value.</returns>
            
        </member>
        <member name="M:AForge.Point.Multiply(AForge.Point,System.Single)">
             <summary>
             Multiplication operator - multiplies coordinates of the specified point by scalar value.
             </summary>
             
             <param name="point">Point to multiply coordinates of.</param>
             <param name="factor">Multiplication factor.</param>
             
             <returns>Returns new point which coordinates equal to coordinates of
             the specified point multiplied by specified value.</returns>
            
        </member>
        <member name="M:AForge.Point.op_Division(AForge.Point,System.Single)">
            <summary>
            Division operator - divides coordinates of the specified point by scalar value.
            </summary>
            
            <param name="point">Point to divide coordinates of.</param>
            <param name="factor">Division factor.</param>
            
            <returns>Returns new point which coordinates equal to coordinates of
            the specified point divided by specified value.</returns>
            
        </member>
        <member name="M:AForge.Point.Divide(AForge.Point,System.Single)">
            <summary>
            Division operator - divides coordinates of the specified point by scalar value.
            </summary>
            
            <param name="point">Point to divide coordinates of.</param>
            <param name="factor">Division factor.</param>
            
            <returns>Returns new point which coordinates equal to coordinates of
            the specified point divided by specified value.</returns>
            
        </member>
        <member name="M:AForge.Point.op_Equality(AForge.Point,AForge.Point)">
             <summary>
             Equality operator - checks if two points have equal coordinates.
             </summary>
             
             <param name="point1">First point to check.</param>
             <param name="point2">Second point to check.</param>
             
             <returns>Returns <see langword="true"/> if coordinates of specified
             points are equal.</returns>
            
        </member>
        <member name="M:AForge.Point.op_Inequality(AForge.Point,AForge.Point)">
             <summary>
             Inequality operator - checks if two points have different coordinates.
             </summary>
             
             <param name="point1">First point to check.</param>
             <param name="point2">Second point to check.</param>
             
             <returns>Returns <see langword="true"/> if coordinates of specified
             points are not equal.</returns>
            
        </member>
        <member name="M:AForge.Point.Equals(System.Object)">
            <summary>
            Check if this instance of <see cref="T:AForge.Point"/> equal to the specified one.
            </summary>
            
            <param name="obj">Another point to check equalty to.</param>
            
            <returns>Return <see langword="true"/> if objects are equal.</returns>
            
        </member>
        <member name="M:AForge.Point.GetHashCode">
            <summary>
            Get hash code for this instance.
            </summary>
            
            <returns>Returns the hash code for this instance.</returns>
            
        </member>
        <member name="M:AForge.Point.op_Explicit(AForge.Point)~AForge.IntPoint">
            <summary>
            Explicit conversion to <see cref="T:AForge.IntPoint"/>.
            </summary>
            
            <param name="point">Single precision point to convert to integer point.</param>
            
            <returns>Returns new integer point which coordinates are explicitly converted
            to integers from coordinates of the specified single precision point by
            casting float values to integers value.</returns>
            
        </member>
        <member name="M:AForge.Point.op_Implicit(AForge.Point)~AForge.DoublePoint">
            <summary>
            Implicit conversion to <see cref="T:AForge.DoublePoint"/>.
            </summary>
            
            <param name="point">Single precision point to convert to double precision point.</param>
            
            <returns>Returns new double precision point which coordinates are implicitly converted
            to doubles from coordinates of the specified single precision point.</returns>
            
        </member>
        <member name="M:AForge.Point.Round">
            <summary>
            Rounds the single precision point.
            </summary>
            
            <returns>Returns new integer point, which coordinates equal to whole numbers
            nearest to the corresponding coordinates of the single precision point.</returns>
            
        </member>
        <member name="M:AForge.Point.ToString">
             <summary>
             Get string representation of the class.
             </summary>
             
             <returns>Returns string, which contains values of the point in readable form.</returns>
            
        </member>
        <member name="M:AForge.Point.EuclideanNorm">
            <summary>
            Calculate Euclidean norm of the vector comprised of the point's 
            coordinates - distance from (0, 0) in other words.
            </summary>
            
            <returns>Returns point's distance from (0, 0) point.</returns>
            
        </member>
        <member name="T:AForge.PolishExpression">
            <summary>
            Evaluator of expressions written in reverse polish notation.
            </summary>
            
            <remarks><para>The class evaluates expressions writen in reverse postfix polish notation.</para>
            
            <para>The list of supported functuins is:</para>
            <list type="bullet">
            <item><b>Arithmetic functions</b>: +, -, *, /;</item>
            <item><b>sin</b> - sine;</item>
            <item><b>cos</b> - cosine;</item>
            <item><b>ln</b> - natural logarithm;</item>
            <item><b>exp</b> - exponent;</item>
            <item><b>sqrt</b> - square root.</item>
            </list>
            
            <para>Arguments for these functions could be as usual constants, written as numbers, as variables,
            writen as $&lt;var_number&gt; (<b>$2</b>, for example). The variable number is zero based index
            of variables array.</para>
            
            <para>Sample usage:</para>
            <code>
            // expression written in polish notation
            string expression = "2 $0 / 3 $1 * +";
            // variables for the expression
            double[] vars = new double[] { 3, 4 };
            // expression evaluation
            double result = PolishExpression.Evaluate( expression, vars );
            </code>
            </remarks>
            
        </member>
        <member name="M:AForge.PolishExpression.Evaluate(System.String,System.Double[])">
             <summary>
             Evaluates specified expression.
             </summary>
            
             <param name="expression">Expression written in postfix polish notation.</param>
             <param name="variables">Variables for the expression.</param>
             
             <returns>Evaluated value of the expression.</returns>
             
             <exception cref="T:System.ArgumentException">Unsupported function is used in the expression.</exception>
             <exception cref="T:System.ArgumentException">Incorrect postfix polish expression.</exception>
            
        </member>
        <member name="T:AForge.Range">
             <summary>
             Represents a range with minimum and maximum values, which are single precision numbers (floats).
             </summary>
             
             <remarks>
             <para>The class represents a single precision range with inclusive limits -
             both minimum and maximum values of the range are included into it.
             Mathematical notation of such range is <b>[min, max]</b>.</para>
             
             <para>Sample usage:</para>
             <code>
             // create [0.25, 1.5] range
             Range range1 = new Range( 0.25f, 1.5f );
             // create [1.00, 2.25] range
             Range range2 = new Range( 1.00f, 2.25f );
             // check if values is inside of the first range
             if ( range1.IsInside( 0.75f ) )
             {
                 // ...
             }
             // check if the second range is inside of the first range
             if ( range1.IsInside( range2 ) )
             {
                 // ...
             }
             // check if two ranges overlap
             if ( range1.IsOverlapping( range2 ) )
             {
                 // ...
             }
             </code>
             </remarks>
            
        </member>
        <member name="M:AForge.Range.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Range"/> structure.
            </summary>
            
            <param name="min">Minimum value of the range.</param>
            <param name="max">Maximum value of the range.</param>
            
        </member>
        <member name="M:AForge.Range.IsInside(System.Single)">
            <summary>
            Check if the specified value is inside of the range.
            </summary>
            
            <param name="x">Value to check.</param>
            
            <returns><b>True</b> if the specified value is inside of the range or
            <b>false</b> otherwise.</returns>
            
        </member>
        <member name="M:AForge.Range.IsInside(AForge.Range)">
            <summary>
            Check if the specified range is inside of the range.
            </summary>
            
            <param name="range">Range to check.</param>
            
            <returns><b>True</b> if the specified range is inside of the range or
            <b>false</b> otherwise.</returns>
            
        </member>
        <member name="M:AForge.Range.IsOverlapping(AForge.Range)">
            <summary>
            Check if the specified range overlaps with the range.
            </summary>
            
            <param name="range">Range to check for overlapping.</param>
            
            <returns><b>True</b> if the specified range overlaps with the range or
            <b>false</b> otherwise.</returns>
            
        </member>
        <member name="M:AForge.Range.ToIntRange(System.Boolean)">
             <summary>
             Convert the signle precision range to integer range.
             </summary>
             
             <param name="provideInnerRange">Specifies if inner integer range must be returned or outer range.</param>
             
             <returns>Returns integer version of the range.</returns>
             
             <remarks>If <paramref name="provideInnerRange"/> is set to <see langword="true"/>, then the
             returned integer range will always fit inside of the current single precision range.
             If it is set to <see langword="false"/>, then current single precision range will always
             fit into the returned integer range.</remarks>
            
        </member>
        <member name="M:AForge.Range.op_Equality(AForge.Range,AForge.Range)">
             <summary>
             Equality operator - checks if two ranges have equal min/max values.
             </summary>
             
             <param name="range1">First range to check.</param>
             <param name="range2">Second range to check.</param>
             
             <returns>Returns <see langword="true"/> if min/max values of specified
             ranges are equal.</returns>
            
        </member>
        <member name="M:AForge.Range.op_Inequality(AForge.Range,AForge.Range)">
             <summary>
             Inequality operator - checks if two ranges have different min/max values.
             </summary>
             
             <param name="range1">First range to check.</param>
             <param name="range2">Second range to check.</param>
             
             <returns>Returns <see langword="true"/> if min/max values of specified
             ranges are not equal.</returns>
            
        </member>
        <member name="M:AForge.Range.Equals(System.Object)">
            <summary>
            Check if this instance of <see cref="T:AForge.Range"/> equal to the specified one.
            </summary>
            
            <param name="obj">Another range to check equalty to.</param>
            
            <returns>Return <see langword="true"/> if objects are equal.</returns>
            
        </member>
        <member name="M:AForge.Range.GetHashCode">
            <summary>
            Get hash code for this instance.
            </summary>
            
            <returns>Returns the hash code for this instance.</returns>
            
        </member>
        <member name="M:AForge.Range.ToString">
             <summary>
             Get string representation of the class.
             </summary>
             
             <returns>Returns string, which contains min/max values of the range in readable form.</returns>
            
        </member>
        <member name="P:AForge.Range.Min">
            <summary>
            Minimum value of the range.
            </summary>
            
            <remarks><para>The property represents minimum value (left side limit) or the range -
            [<b>min</b>, max].</para></remarks>
            
        </member>
        <member name="P:AForge.Range.Max">
            <summary>
            Maximum value of the range.
            </summary>
            
            <remarks><para>The property represents maximum value (right side limit) or the range -
            [min, <b>max</b>].</para></remarks>
            
        </member>
        <member name="P:AForge.Range.Length">
            <summary>
            Length of the range (deffirence between maximum and minimum values).
            </summary>
        </member>
        <member name="T:AForge.SystemTools">
            <summary>
            Set of systems tools.
            </summary>
            
            <remarks><para>The class is a container of different system tools, which are used
            across the framework. Some of these tools are platform specific, so their
            implementation is different on different platform, like .NET and Mono.</para>
            </remarks>
            
        </member>
        <member name="M:AForge.SystemTools.CopyUnmanagedMemory(System.IntPtr,System.IntPtr,System.Int32)">
             <summary>
             Copy block of unmanaged memory.
             </summary>
             
             <param name="dst">Destination pointer.</param>
             <param name="src">Source pointer.</param>
             <param name="count">Memory block's length to copy.</param>
             
             <returns>Return's value of <paramref name="dst"/> - pointer to destination.</returns>
             
             <remarks><para>This function is required because of the fact that .NET does
             not provide any way to copy unmanaged blocks, but provides only methods to
             copy from unmanaged memory to managed memory and vise versa.</para></remarks>
            
        </member>
        <member name="M:AForge.SystemTools.CopyUnmanagedMemory(System.Byte*,System.Byte*,System.Int32)">
            <summary>
            Copy block of unmanaged memory.
            </summary>
            
            <param name="dst">Destination pointer.</param>
            <param name="src">Source pointer.</param>
            <param name="count">Memory block's length to copy.</param>
            
            <returns>Return's value of <paramref name="dst"/> - pointer to destination.</returns>
            
            <remarks><para>This function is required because of the fact that .NET does
            not provide any way to copy unmanaged blocks, but provides only methods to
            copy from unmanaged memory to managed memory and vise versa.</para></remarks>
            
        </member>
        <member name="M:AForge.SystemTools.SetUnmanagedMemory(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Fill memory region with specified value.
            </summary>
            
            <param name="dst">Destination pointer.</param>
            <param name="filler">Filler byte's value.</param>
            <param name="count">Memory block's length to fill.</param>
            
            <returns>Return's value of <paramref name="dst"/> - pointer to destination.</returns>
            
        </member>
        <member name="M:AForge.SystemTools.SetUnmanagedMemory(System.Byte*,System.Int32,System.Int32)">
            <summary>
            Fill memory region with specified value.
            </summary>
            
            <param name="dst">Destination pointer.</param>
            <param name="filler">Filler byte's value.</param>
            <param name="count">Memory block's length to fill.</param>
            
            <returns>Return's value of <paramref name="dst"/> - pointer to destination.</returns>
            
        </member>
        <member name="T:AForge.ThreadSafeRandom">
            <summary>
            Thread safe version of the <see cref="T:System.Random"/> class.
            </summary>
            
            <remarks><para>The class inherits the <see cref="T:System.Random"/> and overrides
            its random numbers generation methods providing thread safety by guarding call
            to the base class with a lock. See documentation to <see cref="T:System.Random"/> for
            additional information about the base class.</para></remarks>
            
        </member>
        <member name="M:AForge.ThreadSafeRandom.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.ThreadSafeRandom"/> class.
            </summary>
            
            <remarks>See <see cref="M:System.Random.Next"/> for more information.</remarks>
            
        </member>
        <member name="M:AForge.ThreadSafeRandom.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.ThreadSafeRandom"/> class.
            </summary>
            
            <remarks>A number used to calculate a starting value for the pseudo-random number sequence.
            If a negative number is specified, the absolute value of the number is used.</remarks>
            
            
            <remarks>See <see cref="M:System.Random.Next"/> for more information.</remarks>
            
        </member>
        <member name="M:AForge.ThreadSafeRandom.Next">
            <summary>
            Returns a nonnegative random number.
            </summary>
            
            <returns>Returns a 32-bit signed integer greater than or equal to zero and less than
            <see cref="F:System.Int32.MaxValue"/>.</returns>
            
            <remarks>See <see cref="M:System.Random.Next"/> for more information.</remarks>
            
        </member>
        <member name="M:AForge.ThreadSafeRandom.Next(System.Int32)">
            <summary>
            Returns a nonnegative random number less than the specified maximum.
            </summary>
            
            <param name="maxValue">The exclusive upper bound of the random number to be generated.
            <paramref name="maxValue"/> must be greater than or equal to zero.</param>
            
            <returns>Returns a 32-bit signed integer greater than or equal to zero, and less than <paramref name="maxValue"/>;
            that is, the range of return values ordinarily includes zero but not <paramref name="maxValue"/>.</returns>
            
            <remarks>See <see cref="M:System.Random.Next(System.Int32)"/> for more information.</remarks>
            
        </member>
        <member name="M:AForge.ThreadSafeRandom.Next(System.Int32,System.Int32)">
             <summary>
             Returns a random number within a specified range.
             </summary>
             
             <param name="minValue">The inclusive lower bound of the random number returned.</param>
             <param name="maxValue">The exclusive upper bound of the random number returned.
             <paramref name="maxValue"/> must be greater than or equal to <paramref name="minValue"/>.</param>
             
             <returns>Returns a 32-bit signed integer greater than or equal to <paramref name="minValue"/> and less
             than <paramref name="maxValue"/>; that is, the range of return values includes
             <paramref name="minValue"/> but not <paramref name="maxValue"/>.</returns>
             
             <remarks>See <see cref="M:System.Random.Next(System.Int32,System.Int32)"/> for more information.</remarks>
            
        </member>
        <member name="M:AForge.ThreadSafeRandom.NextBytes(System.Byte[])">
             <summary>
             Fills the elements of a specified array of bytes with random numbers.
             </summary>
             
             <param name="buffer">An array of bytes to contain random numbers.</param>
             
             <remarks>See <see cref="M:System.Random.NextBytes(System.Byte[])"/> for more information.</remarks>
            
        </member>
        <member name="M:AForge.ThreadSafeRandom.NextDouble">
             <summary>
             Returns a random number between 0.0 and 1.0.
             </summary>
             
             <returns>Returns a double-precision floating point number greater than or equal to 0.0, and less than 1.0.</returns>
             
             <remarks>See <see cref="M:System.Random.NextDouble"/> for more information.</remarks>
            
        </member>
        <member name="T:AForge.Fuzzy.Clause">
             <summary>
             This class represents a fuzzy clause, a linguistic expression of the type "Variable IS Value".
             </summary>
             
             <remarks><para>A Fuzzy Clause is used to verify if a linguistic variable can be considered
             as a specific value at a specific moment. Linguistic variables can only assume value of
             their linugistic labels. Because of the nature of the Fuzzy Logic, a Variable can be 
             several of its labels at the same time, with different membership values.</para>
             
             <para>For example, a linguistic variable "temperature" can be "hot" with a membership 0.3
             and "warm" with a membership 0.7 at the same time. To obtain those memberships, Fuzzy Clauses
             "temperature is hot" and "temperature is war" can be built.</para>
             
             <para>Typically Fuzzy Clauses are used to build Fuzzy Rules (<see cref="T:AForge.Fuzzy.Rule"/>).</para>
             
             <para>Sample usage:</para>
             <code>
             // create a linguistic variable to represent temperature
             LinguisticVariable lvTemperature = new LinguisticVariable( "Temperature", 0, 80 );
            
             // create the linguistic labels (fuzzy sets) that compose the temperature 
             TrapezoidalFunction function1 = new TrapezoidalFunction( 10, 15, TrapezoidalFunction.EdgeType.Right );
             FuzzySet fsCold = new FuzzySet( "Cold", function1 );
             TrapezoidalFunction function2 = new TrapezoidalFunction( 10, 15, 20, 25 );
             FuzzySet fsCool = new FuzzySet( "Cool", function2 );
             TrapezoidalFunction function3 = new TrapezoidalFunction( 20, 25, 30, 35 );
             FuzzySet fsWarm = new FuzzySet( "Warm", function3 );
             TrapezoidalFunction function4 = new TrapezoidalFunction( 30, 35, TrapezoidalFunction.EdgeType.Left );
             FuzzySet fsHot  = new FuzzySet( "Hot" , function4 );
            
             // adding labels to the variable
             lvTemperature.AddLabel( fsCold );
             lvTemperature.AddLabel( fsCool );
             lvTemperature.AddLabel( fsWarm );
             lvTemperature.AddLabel( fsHot  );
             
             // creating the Clause
             Clause fuzzyClause = new Clause( lvTemperature, fsHot );
             // setting the numerical input of the variable to evaluate the Clause
             lvTemperature.NumericInput = 35;
             float result = fuzzyClause.Evaluate( );
             Console.WriteLine ( result.ToString( ) );
             </code>    
             </remarks>
             
        </member>
        <member name="M:AForge.Fuzzy.Clause.#ctor(AForge.Fuzzy.LinguisticVariable,AForge.Fuzzy.FuzzySet)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Fuzzy.Clause"/> class.
            </summary>
            
            <param name="variable">Linguistic variable of the clause. </param>
            
            <param name="label">Label of the linguistic variable, a fuzzy set used as label into the linguistic variable.</param>
            
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The label indicated was not found in the linguistic variable.</exception>
            
        </member>
        <member name="M:AForge.Fuzzy.Clause.Evaluate">
            <summary>
            Evaluates the fuzzy clause.
            </summary>
            
            <returns>Degree of membership [0..1] of the clause.</returns>
            
        </member>
        <member name="M:AForge.Fuzzy.Clause.ToString">
            <summary>
            Returns the fuzzy clause in its linguistic representation.
            </summary>
            
            <returns>A string representing the fuzzy clause.</returns>
            
        </member>
        <member name="P:AForge.Fuzzy.Clause.Variable">
            <summary>
            Gets the <see cref="T:AForge.Fuzzy.LinguisticVariable"/> of the <see cref="T:AForge.Fuzzy.Clause"/>.
            </summary>
        </member>
        <member name="P:AForge.Fuzzy.Clause.Label">
            <summary>
            Gets the <see cref="T:AForge.Fuzzy.FuzzySet"/> of the <see cref="T:AForge.Fuzzy.Clause"/>.
            </summary>
        </member>
        <member name="T:AForge.Fuzzy.Database">
            <summary>
            The class represents a fuzzy database, a set of linguistic variables used in a Fuzzy
            Inference System.
            </summary>
            
        </member>
        <member name="M:AForge.Fuzzy.Database.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Fuzzy.Database"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Fuzzy.Database.AddVariable(AForge.Fuzzy.LinguisticVariable)">
            <summary>
            Adds a linguistic variable to the database. 
            </summary>
            
            <param name="variable">A linguistic variable to add.</param>
            
            <exception cref="T:System.NullReferenceException">The linguistic variable was not initialized.</exception>
            <exception cref="T:System.ArgumentException">The linguistic variable name already exists in the database.</exception>
            
        </member>
        <member name="M:AForge.Fuzzy.Database.ClearVariables">
            <summary>
            Removes all the linguistic variables of the database. 
            </summary>
            
        </member>
        <member name="M:AForge.Fuzzy.Database.GetVariable(System.String)">
            <summary>
            Returns an existing linguistic variable from the database.
            </summary>
            
            <param name="variableName">Name of the linguistic variable to retrieve.</param>
            
            <returns>Reference to named <see cref="T:AForge.Fuzzy.LinguisticVariable"/>.</returns>
            
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The variable indicated was not found in the database.</exception>
            
        </member>
        <member name="T:AForge.Fuzzy.CentroidDefuzzifier">
            <summary>
            This class implements the centroid defuzzification method.
            </summary>
            
            <remarks><para>In many applications, a Fuzzy Inference System is used to perform linguistic
            computation, but at the end of the inference process, a numerical value is needed. It does
            not mean that the system needs precision, but simply that a numerical value is required,
            most of the times because it will be used to control another system that needs the number.
            To obtain this numer, a defuzzification method is performed.</para>
            
            <para>This class implements the centroid defuzzification method. The output of a Fuzzy
            Inference System is a set of rules (see <see cref="T:AForge.Fuzzy.Rule"/>) with firing strength greater
            than zero. Those firing strength apply a constraint to the consequent fuzzy sets
            (see <see cref="T:AForge.Fuzzy.FuzzySet"/>) of the rules. Putting all those fuzzy sets togheter results
            in a a shape that is the linguistic output meaning. 
            </para>
            
            <para>The centroid method calculates the center of the area of this shape to obtain the
            numerical representation of the output. It uses a numerical approximation, so a number
            of intervals must be choosen. As the number of intervals grow, the precision of the
            numerical ouput grows. 
            </para>
            
            <para>For a sample usage of the <see cref="T:AForge.Fuzzy.CentroidDefuzzifier"/> see <see cref="T:AForge.Fuzzy.InferenceSystem"/>
            class.</para>
            </remarks>
            
        </member>
        <member name="T:AForge.Fuzzy.IDefuzzifier">
            <summary>
            Interface which specifies set of methods required to be implemented by all defuzzification methods 
            that can be used in Fuzzy Inference Systems. 
            </summary>
            
            <remarks><para>In many applications, a Fuzzy Inference System is used to perform linguistic computation, 
            but at the end of the inference process, a numerical value is needed. It does not mean that the system 
            needs precision, but simply that a numerical value is required, most of the times because it will be used to 
            control another system that needs the number. To obtain this numer, a defuzzification method is performed.</para>
            
            <para>Several deffuzification methods were proposed, and they can be created as classes that 
            implements this interface.</para></remarks>
            
        </member>
        <member name="M:AForge.Fuzzy.IDefuzzifier.Defuzzify(AForge.Fuzzy.FuzzyOutput,AForge.Fuzzy.INorm)">
            <summary>
            Defuzzification method to obtain the numerical representation of a fuzzy output.
            </summary>
            
            <param name="fuzzyOutput">A <see cref="T:AForge.Fuzzy.FuzzyOutput"/> containing the output of
            several rules of a Fuzzy Inference System.</param>
            <param name="normOperator">A <see cref="T:AForge.Fuzzy.INorm"/> operator to be used when constraining
            the label to the firing strength.</param>
            
            <returns>The numerical representation of the fuzzy output.</returns>
            
        </member>
        <member name="M:AForge.Fuzzy.CentroidDefuzzifier.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Fuzzy.CentroidDefuzzifier"/> class.
            </summary>
            
            <param name="intervals">Number of segments that the speech universe will be splited
            to perform the numerical approximation of the center of area.</param>
            
        </member>
        <member name="M:AForge.Fuzzy.CentroidDefuzzifier.Defuzzify(AForge.Fuzzy.FuzzyOutput,AForge.Fuzzy.INorm)">
            <summary>
            Centroid method to obtain the numerical representation of a fuzzy output. The numerical
            value will be the center of the shape formed by the several fuzzy labels with their
            constraints.
            </summary>
            
            <param name="fuzzyOutput">A <see cref="T:AForge.Fuzzy.FuzzyOutput"/> containing the output of several
            rules of a Fuzzy Inference System.</param>
            <param name="normOperator">A <see cref="T:AForge.Fuzzy.INorm"/> operator to be used when constraining
            the label to the firing strength.</param>
            
            <returns>The numerical representation of the fuzzy output.</returns>
            
            <exception cref="T:System.Exception">The numerical output is unavaliable. All memberships are zero.</exception>
            
        </member>
        <member name="T:AForge.Fuzzy.FuzzyOutput">
            <summary>
            The class represents the output of a Fuzzy Inference System. 
            </summary>
            
            <remarks><para>The class keeps set of rule's output - pairs with the output fuzzy label
            and the rule's firing strength.
            </para>
            
            
            <para>Sample usage:</para>
            <code>
            // linguistic labels (fuzzy sets) that compose the distances
            FuzzySet fsNear = new FuzzySet( "Near",
                new TrapezoidalFunction( 15, 50, TrapezoidalFunction.EdgeType.Right ) );
            FuzzySet fsMedium = new FuzzySet( "Medium",
                new TrapezoidalFunction( 15, 50, 60, 100 ) );
            FuzzySet fsFar = new FuzzySet( "Far",
                new TrapezoidalFunction( 60, 100, TrapezoidalFunction.EdgeType.Left ) );
                        
            // front distance (input)
            LinguisticVariable lvFront = new LinguisticVariable( "FrontalDistance", 0, 120 );
            lvFront.AddLabel( fsNear );
            lvFront.AddLabel( fsMedium );
            lvFront.AddLabel( fsFar );
            
            // linguistic labels (fuzzy sets) that compose the angle
            FuzzySet fsZero = new FuzzySet( "Zero",
                new TrapezoidalFunction( -10, 5, 5, 10 ) );
            FuzzySet fsLP = new FuzzySet( "LittlePositive",
                new TrapezoidalFunction( 5, 10, 20, 25 ) );
            FuzzySet fsP = new FuzzySet( "Positive",
                new TrapezoidalFunction( 20, 25, 35, 40 ) );
            FuzzySet fsVP = new FuzzySet( "VeryPositive",
                new TrapezoidalFunction( 35, 40, TrapezoidalFunction.EdgeType.Left ) );
            
            // angle
            LinguisticVariable lvAngle = new LinguisticVariable( "Angle", -10, 50 );
            lvAngle.AddLabel( fsZero );
            lvAngle.AddLabel( fsLP );
            lvAngle.AddLabel( fsP );
            lvAngle.AddLabel( fsVP );
            
            // the database
            Database fuzzyDB = new Database( );
            fuzzyDB.AddVariable( lvFront );
            fuzzyDB.AddVariable( lvAngle );
            
            // creating the inference system
            InferenceSystem IS = new InferenceSystem( fuzzyDB, new CentroidDefuzzifier( 1000 ) );
            
            // going straight
            IS.NewRule( "Rule 1", "IF FrontalDistance IS Far THEN Angle IS Zero" );
            // turning left
            IS.NewRule( "Rule 2", "IF FrontalDistance IS Near THEN Angle IS Positive" );
            
            ...
            // inference section
            
            // setting inputs
            IS.SetInput( "FrontalDistance", 20 );
            
            // getting outputs
            try
            {
                FuzzyOutput fuzzyOutput = IS.ExecuteInference ( "Angle" );
            
                // showing the fuzzy output
                foreach ( FuzzyOutput.OutputConstraint oc in fuzzyOutput.OutputList )
                {
                    Console.WriteLine( oc.Label + " - " + oc.FiringStrength.ToString( ) );
                }
            }
            catch ( Exception )
            {
               ...
            }
            </code>  
            </remarks>
            
        </member>
        <member name="M:AForge.Fuzzy.FuzzyOutput.#ctor(AForge.Fuzzy.LinguisticVariable)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Fuzzy.FuzzyOutput"/> class.
            </summary>
            
            <param name="outputVar">A <see cref="T:AForge.Fuzzy.LinguisticVariable"/> representing a Fuzzy Inference System's output.</param>
            
        </member>
        <member name="M:AForge.Fuzzy.FuzzyOutput.AddOutput(System.String,System.Single)">
            <summary>
            Adds an output to the Fuzzy Output. 
            </summary>
            
            <param name="labelName">The name of a label representing a fuzzy rule's output.</param>
            <param name="firingStrength">The firing strength [0..1] of a fuzzy rule.</param>
            
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The label indicated was not found in the linguistic variable.</exception>
            
        </member>
        <member name="M:AForge.Fuzzy.FuzzyOutput.ClearOutput">
            <summary>
            Removes all the linguistic variables of the database. 
            </summary>
            
        </member>
        <member name="P:AForge.Fuzzy.FuzzyOutput.OutputList">
            <summary>
            A list with <see cref="T:AForge.Fuzzy.FuzzyOutput.OutputConstraint"/> of a Fuzzy Inference System's output.
            </summary>
            
        </member>
        <member name="P:AForge.Fuzzy.FuzzyOutput.OutputVariable">
            <summary>
            Gets the <see cref="T:AForge.Fuzzy.LinguisticVariable"/> acting as a Fuzzy Inference System Output.
            </summary>
            
        </member>
        <member name="T:AForge.Fuzzy.FuzzyOutput.OutputConstraint">
            <summary>
            Inner class to store the pair fuzzy label / firing strength of 
            a fuzzy output.
            </summary>
        </member>
        <member name="M:AForge.Fuzzy.FuzzyOutput.OutputConstraint.#ctor(System.String,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Fuzzy.FuzzyOutput.OutputConstraint"/> class.
            </summary>
            
            <param name="label">A string representing the output label of a <see cref="T:AForge.Fuzzy.Rule"/>.</param>
            <param name="firingStrength">The firing strength of a <see cref="T:AForge.Fuzzy.Rule"/>, to be applied to its output label.</param>
            
        </member>
        <member name="P:AForge.Fuzzy.FuzzyOutput.OutputConstraint.Label">
            <summary>
            The <see cref="T:AForge.Fuzzy.FuzzySet"/> representing the output label of a <see cref="T:AForge.Fuzzy.Rule"/>.
            </summary>
            
        </member>
        <member name="P:AForge.Fuzzy.FuzzyOutput.OutputConstraint.FiringStrength">
            <summary>
            The firing strength of a <see cref="T:AForge.Fuzzy.Rule"/>, to be applied to its output label.
            </summary>
            
        </member>
        <member name="T:AForge.Fuzzy.FuzzySet">
            <summary>
            The class represents a fuzzy set.
            </summary>
            
            <remarks><para>The fuzzy sets are the base for all fuzzy applications. In a classical set, the membership of 
            a given value to the set can always be defined as true (1) or false (0). In fuzzy sets, this membership can be 
            a value in the range [0..1], representing the imprecision existent in many real world applications.</para>
            
            <para>Let us consider, for example, fuzzy sets representing some temperature. In a given application, there is the 
            need to represent a cool and warm temperature. Like in real life, the precise point when the temperature changes from 
            cool to warm is not easy to find, and does not makes sense. If we consider the cool around 20 degrees and warm around 
            30 degrees, it is not simple to find a break point. If we take the mean, we can consider values greater than or equal 
            25 to be warm. But we can still consider 25 a bit cool. And a bit warm at the same time. This is where fuzzy sets can 
            help.</para>
            
            <para>Fuzzy sets are often used to compose Linguistic Variables, used in Fuzzy Inference Systems.</para>
            
            <para>Sample usage:</para>
            <code>
            // creating 2 fuzzy sets to represent Cool and Warm
            TrapezoidalFunction function1 = new TrapezoidalFunction( 13, 18, 23, 28 );
            FuzzySet fsCool = new FuzzySet( "Cool", function1 );
            TrapezoidalFunction function2 = new TrapezoidalFunction( 23, 28, 33, 38 );
            FuzzySet fsWarm = new FuzzySet( "Warm", function2 );
            
            // show membership to the Cool set for some values 
            Console.WriteLine( "COOL" );
            for ( int i = 13; i &lt;= 28; i++ )
                Console.WriteLine( fsCool.GetMembership( i ) );
            
            // show membership to the Warm set for some values 
            Console.WriteLine( "WARM" );
            for ( int i = 23; i &lt;= 38; i++ )
                Console.WriteLine( fsWarm.GetMembership( i ) );
            </code>    
            </remarks>
            
        </member>
        <member name="M:AForge.Fuzzy.FuzzySet.#ctor(System.String,AForge.Fuzzy.IMembershipFunction)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Fuzzy.FuzzySet"/> class.
            </summary>
            
            <param name="name">Name of the fuzzy set.</param>
            <param name="function">Membership function that will define the shape of the fuzzy set. </param>
            
        </member>
        <member name="M:AForge.Fuzzy.FuzzySet.GetMembership(System.Single)">
            <summary>
            Calculate membership of a given value to the fuzzy set.
            </summary>
            
            <param name="x">Value which membership needs to be calculated.</param>
            
            <returns>Degree of membership [0..1] of the value to the fuzzy set.</returns>
            
        </member>
        <member name="P:AForge.Fuzzy.FuzzySet.Name">
            <summary>
            Name of the fuzzy set.
            </summary>
        </member>
        <member name="P:AForge.Fuzzy.FuzzySet.LeftLimit">
            <summary>
            The leftmost x value of the fuzzy set's membership function.
            </summary>
            
        </member>
        <member name="P:AForge.Fuzzy.FuzzySet.RightLimit">
            <summary>
            The rightmost x value of the fuzzy set's membership function.
            </summary>
            
        </member>
        <member name="T:AForge.Fuzzy.InferenceSystem">
            <summary>
            This class represents a Fuzzy Inference System. 
            </summary>
            
            <remarks><para>A Fuzzy Inference System is a model capable of executing fuzzy computing.
            It is mainly composed by a <see cref="T:AForge.Fuzzy.Database"/> with the linguistic variables
            (see <see cref="T:AForge.Fuzzy.LinguisticVariable"/>) and a <see cref="T:AForge.Fuzzy.Rulebase"/>
            with the fuzzy rules (see <see cref="T:AForge.Fuzzy.Rule"/>) that represent the behavior of the system.
            The typical operation of a Fuzzy Inference System is:
            <list type="bullet">
            <item>Get the numeric inputs;</item>
            <item>Use the <see cref="T:AForge.Fuzzy.Database"/> with the linguistic variables
            (see <see cref="T:AForge.Fuzzy.LinguisticVariable"/>) to obtain linguistic meaning for each
            numerical input;</item>
            <item>Verify which rules (see <see cref="T:AForge.Fuzzy.Rule"/>) of the <see cref="T:AForge.Fuzzy.Rulebase"/> are
            activated by the input;</item>
            <item>Combine the consequent of the activated rules to obtain a <see cref="T:AForge.Fuzzy.FuzzyOutput"/>;</item>
            <item>Use some defuzzifier (see <see cref="T:AForge.Fuzzy.IDefuzzifier"/>) to obtain a numerical output. </item>
            </list>
            </para>
            
            <para>The following sample usage is a Fuzzy Inference System that controls an
            auto guided vehicle avoing frontal collisions:</para>
            <code>
            // linguistic labels (fuzzy sets) that compose the distances
            FuzzySet fsNear = new FuzzySet( "Near",
                new TrapezoidalFunction( 15, 50, TrapezoidalFunction.EdgeType.Right ) );
            FuzzySet fsMedium = new FuzzySet( "Medium",
                new TrapezoidalFunction( 15, 50, 60, 100 ) );
            FuzzySet fsFar = new FuzzySet( "Far",
                new TrapezoidalFunction( 60, 100, TrapezoidalFunction.EdgeType.Left ) );
                        
            // front distance (input)
            LinguisticVariable lvFront = new LinguisticVariable( "FrontalDistance", 0, 120 );
            lvFront.AddLabel( fsNear );
            lvFront.AddLabel( fsMedium );
            lvFront.AddLabel( fsFar );
            
            // linguistic labels (fuzzy sets) that compose the angle
            FuzzySet fsZero = new FuzzySet( "Zero",
                new TrapezoidalFunction( -10, 5, 5, 10 ) );
            FuzzySet fsLP = new FuzzySet( "LittlePositive",
                new TrapezoidalFunction( 5, 10, 20, 25 ) );
            FuzzySet fsP = new FuzzySet( "Positive",
                new TrapezoidalFunction( 20, 25, 35, 40 ) );
            FuzzySet fsVP = new FuzzySet( "VeryPositive",
                new TrapezoidalFunction( 35, 40, TrapezoidalFunction.EdgeType.Left ) );
            
            // angle
            LinguisticVariable lvAngle = new LinguisticVariable( "Angle", -10, 50 );
            lvAngle.AddLabel( fsZero );
            lvAngle.AddLabel( fsLP );
            lvAngle.AddLabel( fsP );
            lvAngle.AddLabel( fsVP );
            
            // the database
            Database fuzzyDB = new Database( );
            fuzzyDB.AddVariable( lvFront );
            fuzzyDB.AddVariable( lvAngle );
            
            // creating the inference system
            InferenceSystem IS = new InferenceSystem( fuzzyDB, new CentroidDefuzzifier( 1000 ) );
            
            // going Straight
            IS.NewRule( "Rule 1", "IF FrontalDistance IS Far THEN Angle IS Zero" );
            // Turning Left
            IS.NewRule( "Rule 2", "IF FrontalDistance IS Near THEN Angle IS Positive" );
            
            ...
            // inference section
            
            // setting inputs
            IS.SetInput( "FrontalDistance", 20 );
            
            // getting outputs
            try
            {
                float newAngle = IS.Evaluate( "Angle" );
            }
            catch ( Exception )
            {
            ...
            }
            </code>    
            </remarks>
            
        </member>
        <member name="M:AForge.Fuzzy.InferenceSystem.#ctor(AForge.Fuzzy.Database,AForge.Fuzzy.IDefuzzifier)">
            <summary>
            Initializes a new Fuzzy <see cref="T:AForge.Fuzzy.InferenceSystem"/>.
            </summary>
            
            <param name="database">A fuzzy <see cref="T:AForge.Fuzzy.Database"/> containing the system linguistic variables.</param>
            <param name="defuzzifier">A defuzzyfier method used to evaluate the numeric uotput of the system.</param>
            
        </member>
        <member name="M:AForge.Fuzzy.InferenceSystem.#ctor(AForge.Fuzzy.Database,AForge.Fuzzy.IDefuzzifier,AForge.Fuzzy.INorm,AForge.Fuzzy.ICoNorm)">
            <summary>
            Initializes a new Fuzzy <see cref="T:AForge.Fuzzy.InferenceSystem"/>.
            </summary>
            
            <param name="database">A fuzzy <see cref="T:AForge.Fuzzy.Database"/> containing the system linguistic
            variables.</param>
            <param name="defuzzifier">A defuzzyfier method used to evaluate the numeric otput
            of the system.</param>
            <param name="normOperator">A <see cref="T:AForge.Fuzzy.INorm"/> operator used to evaluate the norms
            in the <see cref="T:AForge.Fuzzy.InferenceSystem"/>. For more information of the norm evaluation see <see cref="T:AForge.Fuzzy.Rule"/>.</param>
            <param name="conormOperator">A <see cref="T:AForge.Fuzzy.ICoNorm"/> operator used to evaluate the
            conorms in the <see cref="T:AForge.Fuzzy.InferenceSystem"/>. For more information of the conorm evaluation see <see cref="T:AForge.Fuzzy.Rule"/>.</param>
            
        </member>
        <member name="M:AForge.Fuzzy.InferenceSystem.NewRule(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:AForge.Fuzzy.Rule"/> and add it to the <see cref="T:AForge.Fuzzy.Rulebase"/> of the 
            <see cref="T:AForge.Fuzzy.InferenceSystem"/>.
            </summary>
            
            <param name="name">Name of the <see cref="T:AForge.Fuzzy.Rule"/> to create.</param>
            <param name="rule">A string representing the fuzzy rule.</param>
            
            <returns>The new <see cref="T:AForge.Fuzzy.Rule"/> reference. </returns>
            
        </member>
        <member name="M:AForge.Fuzzy.InferenceSystem.SetInput(System.String,System.Single)">
            <summary>
            Sets a numerical input for one of the linguistic variables of the <see cref="T:AForge.Fuzzy.Database"/>. 
            </summary>
            
            <param name="variableName">Name of the <see cref="T:AForge.Fuzzy.LinguisticVariable"/>.</param>
            <param name="value">Numeric value to be used as input.</param>
            
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The variable indicated in <paramref name="variableName"/>
            was not found in the database.</exception>
            
        </member>
        <member name="M:AForge.Fuzzy.InferenceSystem.GetLinguisticVariable(System.String)">
            <summary>
            Gets one of the <see cref="T:AForge.Fuzzy.LinguisticVariable"/> of the <see cref="T:AForge.Fuzzy.Database"/>. 
            </summary>
            
            <param name="variableName">Name of the <see cref="T:AForge.Fuzzy.LinguisticVariable"/> to get.</param>
            
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The variable indicated in <paramref name="variableName"/>
            was not found in the database.</exception>
            
        </member>
        <member name="M:AForge.Fuzzy.InferenceSystem.GetRule(System.String)">
            <summary>
            Gets one of the Rules of the <see cref="T:AForge.Fuzzy.Rulebase"/>. 
            </summary>
            
            <param name="ruleName">Name of the <see cref="T:AForge.Fuzzy.Rule"/> to get.</param>
            
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The rule indicated in <paramref name="ruleName"/>
            was not found in the rulebase.</exception>
            
        </member>
        <member name="M:AForge.Fuzzy.InferenceSystem.Evaluate(System.String)">
            <summary>
            Executes the fuzzy inference, obtaining a numerical output for a choosen output
            linguistic variable. 
            </summary>
            
            <param name="variableName">Name of the <see cref="T:AForge.Fuzzy.LinguisticVariable"/> to evaluate.</param>
            
            <returns>The numerical output of the Fuzzy Inference System for the choosen variable.</returns>
            
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The variable indicated was not found in the database.</exception>
            
        </member>
        <member name="M:AForge.Fuzzy.InferenceSystem.ExecuteInference(System.String)">
            <summary>
            Executes the fuzzy inference, obtaining the <see cref="T:AForge.Fuzzy.FuzzyOutput"/> of the system for the required
            <see cref="T:AForge.Fuzzy.LinguisticVariable"/>. 
            </summary>
            
            <param name="variableName">Name of the <see cref="T:AForge.Fuzzy.LinguisticVariable"/> to evaluate.</param>
            
            <returns>A <see cref="T:AForge.Fuzzy.FuzzyOutput"/> containing the fuzzy output of the system for the
            <see cref="T:AForge.Fuzzy.LinguisticVariable"/> specified in <paramref name="variableName"/>.</returns>
            
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The variable indicated was not found in the database.</exception>
            
        </member>
        <member name="T:AForge.Fuzzy.LinguisticVariable">
             <summary>
             The class represents a linguistic variable.
             </summary>
             
             <remarks><para>Linguistic variables are variables that store linguistic values (labels). Fuzzy Inference Systems (FIS)
             use a set of linguistic variables, called the FIS database, to execute fuzzy computation (computing with words). A linguistic
             variable has a name and is composed by a set of <see cref="T:AForge.Fuzzy.FuzzySet"/> called its linguistic labels. When declaring fuzzy 
             statements in a FIS, a linguistic variable can be only assigned or compared to one of its labels. </para>
             
             <para>Let us consider, for example, a linguistic variable <b>temperature</b>. In a given application, temperature can be 
             cold, cool, warm or hot. Those will be the variable's linguistic labels, each one a fuzzy set with its own membership 
             function. Ideally, the labels will represent concepts related to the variable's meaning. Futhermore, fuzzy statements like
             "temperature is warm" or "temperature is not cold" can be used to build a Fuzzy Inference Systems. 
             </para>
             
             <para>Sample usage:</para>
             <code>
             // create a linguistic variable to represent temperature
             LinguisticVariable lvTemperature = new LinguisticVariable( "Temperature", 0, 80 );
            
             // create the linguistic labels (fuzzy sets) that compose the temperature 
             TrapezoidalFunction function1 = new TrapezoidalFunction( 10, 15, TrapezoidalFunction.EdgeType.Right );
             FuzzySet fsCold = new FuzzySet( "Cold", function1 );
             TrapezoidalFunction function2 = new TrapezoidalFunction( 10, 15, 20, 25 );
             FuzzySet fsCool = new FuzzySet( "Cool", function2 );
             TrapezoidalFunction function3 = new TrapezoidalFunction( 20, 25, 30, 35 );
             FuzzySet fsWarm = new FuzzySet( "Warm", function3 );
             TrapezoidalFunction function4 = new TrapezoidalFunction( 30, 35, TrapezoidalFunction.EdgeType.Left );
             FuzzySet fsHot  = new FuzzySet( "Hot" , function4 );
            
             // adding labels to the variable
             lvTemperature.AddLabel( fsCold );
             lvTemperature.AddLabel( fsCool );
             lvTemperature.AddLabel( fsWarm );
             lvTemperature.AddLabel( fsHot  );
            
             // showing the shape of the linguistic variable - the shape of its labels memberships from start to end
             Console.WriteLine( "Cold; Cool; Warm; Hot" );
             for ( float x = 0; x &lt; 80; x += 0.2 )
             {
                 float y1 = lvTemperature.GetLabelMembership( "Cold", x );
                 float y2 = lvTemperature.GetLabelMembership( "Cool", x );
                 float y3 = lvTemperature.GetLabelMembership( "Warm", x );
                 float y4 = lvTemperature.GetLabelMembership( "Hot" , x );
            
                 Console.WriteLine( String.Format( "{0:N}; {1:N}; {2:N}; {3:N}", y1, y2, y3, y4 ) );
             }
             </code>    
             </remarks>
             
        </member>
        <member name="M:AForge.Fuzzy.LinguisticVariable.#ctor(System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Fuzzy.LinguisticVariable"/> class.
            </summary>
            
            <param name="name">Name of the linguistic variable.</param>
            
            <param name="start">Left limit of the valid variable range.</param>
            
            <param name="end">Right limit of the valid variable range.</param>
            
        </member>
        <member name="M:AForge.Fuzzy.LinguisticVariable.AddLabel(AForge.Fuzzy.FuzzySet)">
            <summary>
            Adds a linguistic label to the variable. 
            </summary>
            
            <param name="label">A <see cref="T:AForge.Fuzzy.FuzzySet"/> that will be a linguistic label of the linguistic variable.</param>
            
            <remarks>Linguistic labels are fuzzy sets (<see cref="T:AForge.Fuzzy.FuzzySet"/>). Each
            label of the variable must have a unique name. The range of the label 
            (left and right limits) cannot be greater than 
            the linguistic variable range (start/end).</remarks>
            
            <exception cref="T:System.NullReferenceException">The fuzzy set was not initialized.</exception>
            <exception cref="T:System.ArgumentException">The linguistic label name already exists in the linguistic variable.</exception>
            <exception cref="T:System.ArgumentException">The left limit of the fuzzy set can not be lower than the linguistic variable's starting point.</exception>
            <exception cref="T:System.ArgumentException">"The right limit of the fuzzy set can not be greater than the linguistic variable's ending point."</exception>
            
        </member>
        <member name="M:AForge.Fuzzy.LinguisticVariable.ClearLabels">
            <summary>
            Removes all the linguistic labels of the linguistic variable. 
            </summary>
            
        </member>
        <member name="M:AForge.Fuzzy.LinguisticVariable.GetLabel(System.String)">
            <summary>
            Returns an existing label from the linguistic variable.
            </summary>
            
            <param name="labelName">Name of the label to retrieve.</param>
            
            <returns>Reference to named label (<see cref="T:AForge.Fuzzy.FuzzySet"/>).</returns>
            
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The label indicated was not found in the linguistic variable.</exception>
            
        </member>
        <member name="M:AForge.Fuzzy.LinguisticVariable.GetLabelMembership(System.String,System.Single)">
            <summary>
            Calculate the membership of a given value to a given label. Used to evaluate linguistics clauses like 
            "X IS A", where X is a value and A is a linguistic label.
            </summary>
            
            <param name="labelName">Label (fuzzy set) to evaluate value's membership.</param>
            <param name="value">Value which label's membership will to be calculated.</param>
            
            <returns>Degree of membership [0..1] of the value to the label (fuzzy set).</returns>
            
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The label indicated in labelName was not found in the linguistic variable.</exception>
            
        </member>
        <member name="P:AForge.Fuzzy.LinguisticVariable.NumericInput">
            <summary>
            Numerical value of the input of this linguistic variable.
            </summary>
        </member>
        <member name="P:AForge.Fuzzy.LinguisticVariable.Name">
            <summary>
            Name of the linguistic variable.
            </summary>
        </member>
        <member name="P:AForge.Fuzzy.LinguisticVariable.Start">
            <summary>
            Left limit of the valid variable range.
            </summary>
        </member>
        <member name="P:AForge.Fuzzy.LinguisticVariable.End">
            <summary>
            Right limit of the valid variable range.
            </summary>
        </member>
        <member name="T:AForge.Fuzzy.IMembershipFunction">
            <summary>
            Interface which specifies set of methods required to be implemented by all membership
            functions.
            </summary>
            
            <remarks><para>All membership functions must implement this interface, which is used by
            <see cref="T:AForge.Fuzzy.FuzzySet"/> class to calculate value's membership to a particular fuzzy set.
            </para></remarks>
            
        </member>
        <member name="M:AForge.Fuzzy.IMembershipFunction.GetMembership(System.Single)">
            <summary>
            Calculate membership of a given value to the fuzzy set.
            </summary>
            
            <param name="x">Value which membership will to be calculated.</param>
            
            <returns>Degree of membership [0..1] of the value to the fuzzy set.</returns>
            
        </member>
        <member name="P:AForge.Fuzzy.IMembershipFunction.LeftLimit">
            <summary>
            The leftmost x value of the membership function.
            </summary>
        </member>
        <member name="P:AForge.Fuzzy.IMembershipFunction.RightLimit">
            <summary>
            The rightmost x value of the membership function.
            </summary>
        </member>
        <member name="T:AForge.Fuzzy.PiecewiseLinearFunction">
            <summary>
            Membership function composed by several connected linear functions.
            </summary>
            
            <remarks><para>The piecewise linear is a generic function used by many specific fuzzy membership 
            functions, like the <see cref="T:AForge.Fuzzy.TrapezoidalFunction">trappezoidal function</see>. This class must
            be instantiated with a sequence of points representing the edges of each one of the lines composing the 
            piecewise function.</para>
            
            <para><note>The x-axis points must be ordered (crescent), so the <see cref="M:AForge.Fuzzy.PiecewiseLinearFunction.GetMembership(System.Single)"/> function will use each X value 
            as an ending point for one line and starting point of the next.</note></para>
            
            <para>While trapezoidal and half trapezoidal are classic functions used in fuzzy functions, this class supports any function
            or approximation that can be represented as a sequence of lines.</para>
            
            <para>Sample usage:</para>
            <code>
            // creating an array of points representing a typical trapezoidal function /-\
            Point [] points = new Point[4];
            // point where membership starts to rise
            points[0] = new Point( 10, 0 );
            // maximum membership (1) reached at the second point 
            points[1] = new Point( 20, 1 );
            // membership starts to fall at the third point 
            points[2] = new Point( 30, 1 );
            // membership gets to zero at the last point 
            points[3] = new Point( 40, 0 );
            // creating the instance
            PiecewiseLinearFunction membershipFunction = new PiecewiseLinearFunction( points );
            // getting membership for several points
            for ( int i = 5; i &lt; 45; i++ )
                Console.WriteLine( membershipFunction.GetMembership( i ) );
            </code>
            </remarks>
            
        </member>
        <member name="F:AForge.Fuzzy.PiecewiseLinearFunction.points">
            <summary>
            Vector of (X,Y) coordinates for end/start of each line.
            </summary>
        </member>
        <member name="M:AForge.Fuzzy.PiecewiseLinearFunction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Fuzzy.PiecewiseLinearFunction"/> class. 
            </summary>
            
            <remarks><para>This constructor must be used only by inherited classes to create the
            points vector after the instantiation.</para></remarks>
            
        </member>
        <member name="M:AForge.Fuzzy.PiecewiseLinearFunction.#ctor(AForge.Point[])">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Fuzzy.PiecewiseLinearFunction"/> class.
            </summary>
            
            <param name="points">Array of (X,Y) coordinates of each start/end of the lines.</param>
            
            <remarks><para>Specified point must be in crescent order on X axis and their Y value
            must be in the range of [0, 1].</para></remarks>
            
            <exception cref="T:System.ArgumentException">Points must be in crescent order on X axis.</exception>
            <exception cref="T:System.ArgumentException">Y value of points must be in the range of [0, 1].</exception>
            
        </member>
        <member name="M:AForge.Fuzzy.PiecewiseLinearFunction.GetMembership(System.Single)">
             <summary>
             Calculate membership of a given value to the piecewise function.
             </summary>
             
             <param name="x">Value which membership will to be calculated.</param>
             
             <returns>Degree of membership [0..1] of the value to the fuzzy set.</returns>
             
             <exception cref="T:System.NullReferenceException">Points of the membership function are not initialized.</exception>
            
        </member>
        <member name="P:AForge.Fuzzy.PiecewiseLinearFunction.LeftLimit">
             <summary>
             The leftmost x value of the membership function, given by the first (X,Y) coordinate.
             </summary>
             
             <exception cref="T:System.NullReferenceException">Points of the membership function are not initialized.</exception>
            
        </member>
        <member name="P:AForge.Fuzzy.PiecewiseLinearFunction.RightLimit">
             <summary>
             The rightmost x value of the membership function, given by the last (X,Y) coordinate.
             </summary>
             
             <exception cref="T:System.NullReferenceException">Points of the membership function are not initialized.</exception>
            
        </member>
        <member name="T:AForge.Fuzzy.SingletonFunction">
            <summary>
            Membership function used in fuzzy singletons: fuzzy sets that have just one point with membership value 1. 
            </summary>
            
            <remarks><para>Sometimes it is needed to represent crisp (classical) number in the fuzzy domain. Several approaches 
            can be used, like adding some uncertain (fuzziness) in the original number (the number one, for instance, can be seen as a <see cref="T:AForge.Fuzzy.TrapezoidalFunction"/>
            with -0.5, 1.0 and 0.5 parameters). Another approach is to declare fuzzy singletons: fuzzy sets with only one point returning a none zero membership.</para>
            
            <para>While trapezoidal and half trapezoidal are classic functions used in fuzzy functions, this class supports any function
            or approximation that can be represented as a sequence of lines.</para>
            
            <para>Sample usage:</para>
            <code>
            // creating the instance
            SingletonFunction membershipFunction = new SingletonFunction( 10 );
            // getting membership for several points
            for ( int i = 0; i &lt; 20; i++ )
                Console.WriteLine( membershipFunction.GetMembership( i ) );
            </code>
            </remarks>
            
        </member>
        <member name="F:AForge.Fuzzy.SingletonFunction.support">
            <summary>
            The unique point where the membership value is 1.
            </summary>
        </member>
        <member name="M:AForge.Fuzzy.SingletonFunction.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Fuzzy.SingletonFunction"/> class. 
            </summary>
            
            <param name="support">Support is the only value of x where the membership function is 1.</param>
            
        </member>
        <member name="M:AForge.Fuzzy.SingletonFunction.GetMembership(System.Single)">
            <summary>
            Calculate membership of a given value to the singleton function.
            </summary>
            
            <param name="x">Value which membership will to be calculated.</param>
            
            <returns>Degree of membership {0,1} since singletons do not admit memberships different from 0 and 1. </returns>
            
        </member>
        <member name="P:AForge.Fuzzy.SingletonFunction.LeftLimit">
            <summary>
            The leftmost x value of the membership function, the same value of the support.
            </summary>
            
        </member>
        <member name="P:AForge.Fuzzy.SingletonFunction.RightLimit">
            <summary>
            The rightmost x value of the membership function, the same value of the support.
            </summary>
            
        </member>
        <member name="T:AForge.Fuzzy.TrapezoidalFunction">
            <summary>
            Membership function in the shape of a trapezoid. Can be a half trapzoid if the left or the right side is missing. 
            </summary>
            
            <remarks><para>Since the <see cref="T:AForge.Fuzzy.PiecewiseLinearFunction"/> can represent any piece wise linear
            function, it can represent trapezoids too. But as trapezoids are largely used in the creation of
            Linguistic Variables, this class simplifies the creation of them. </para>
            
            <para>Sample usage:</para>
            <code>
            // creating a typical triangular fuzzy set /\
            TrapezoidalFunction function1 = new TrapezoidalFunction( 10, 20, 30 );
            // creating a right fuzzy set, the rigth side of the set is fuzzy but the left is opened
            TrapezoidalFunction function2 = new TrapezoidalFunction( 10, 20, 30, TrapezoidalFunction.EdgeType.Right );
            </code>
            
            </remarks>
        </member>
        <member name="M:AForge.Fuzzy.TrapezoidalFunction.#ctor(System.Int32)">
            <summary>
            A private constructor used only to reuse code inside of this default constructor.
            </summary>
            
            <param name="size">Size of points vector to create. This size depends of the shape of the 
            trapezoid.</param>
            
        </member>
        <member name="M:AForge.Fuzzy.TrapezoidalFunction.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Fuzzy.TrapezoidalFunction"/> class.
            
            With four points the shape is known as flat fuzzy number or fuzzy interval (/--\).
            </summary>
            
            <param name="m1">X value where the degree of membership starts to raise.</param>
            <param name="m2">X value where the degree of membership reaches the maximum value.</param>
            <param name="m3">X value where the degree of membership starts to fall.</param>
            <param name="m4">X value where the degree of membership reaches the minimum value.</param>
            <param name="max">The maximum value that the membership will reach, [0, 1].</param>
            <param name="min">The minimum value that the membership will reach, [0, 1].</param>
            
        </member>
        <member name="M:AForge.Fuzzy.TrapezoidalFunction.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Fuzzy.TrapezoidalFunction"/> class.
            
            With four points the shape is known as flat fuzzy number or fuzzy interval (/--\).
            </summary>
            
            <param name="m1">X value where the degree of membership starts to raise.</param>
            <param name="m2">X value where the degree of membership reaches the maximum value.</param>
            <param name="m3">X value where the degree of membership starts to fall.</param>
            <param name="m4">X value where the degree of membership reaches the minimum value.</param>
            
            <remarks>
            <para>Maximum membership value is set to <b>1.0</b> and the minimum is set to <b>0.0</b>.</para>
            </remarks>
            
        </member>
        <member name="M:AForge.Fuzzy.TrapezoidalFunction.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Fuzzy.TrapezoidalFunction"/> class.
            
            With three points the shape is known as triangular fuzzy number or just fuzzy number (/\).
            </summary>
            
            <param name="m1">X value where the degree of membership starts to raise.</param>
            <param name="m2">X value where the degree of membership reaches the maximum value and starts to fall.</param>
            <param name="m3">X value where the degree of membership reaches the minimum value.</param>
            <param name="max">The maximum value that the membership will reach, [0, 1].</param>
            <param name="min">The minimum value that the membership will reach, [0, 1].</param>
            
        </member>
        <member name="M:AForge.Fuzzy.TrapezoidalFunction.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Fuzzy.TrapezoidalFunction"/> class.
            
            With three points the shape is known as triangular fuzzy number or just fuzzy number (/\).
            </summary>
            
            <param name="m1">X value where the degree of membership starts to raise.</param>
            <param name="m2">X value where the degree of membership reaches the maximum value and starts to fall.</param>
            <param name="m3">X value where the degree of membership reaches the minimum value.</param>
            
            <remarks>
            <para>Maximum membership value is set to <b>1.0</b> and the minimum is set to <b>0.0</b>.</para>
            </remarks>
            
        </member>
        <member name="M:AForge.Fuzzy.TrapezoidalFunction.#ctor(System.Single,System.Single,System.Single,System.Single,AForge.Fuzzy.TrapezoidalFunction.EdgeType)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Fuzzy.TrapezoidalFunction"/> class.
            
            With two points and an edge this shape can be a left fuzzy number (/) or a right fuzzy number (\).
            </summary>
            
            <param name="m1">Edge = Left: X value where the degree of membership starts to raise.
            Edge = Right: X value where the function starts, with maximum degree of membership. </param>
            <param name="m2">Edge = Left: X value where the degree of membership reaches the maximum.
            Edge = Right: X value where the degree of membership reaches minimum value. </param>
            <param name="max">The maximum value that the membership will reach, [0, 1].</param>
            <param name="min">The minimum value that the membership will reach, [0, 1].</param>
            <param name="edge">Trapezoid's <see cref="T:AForge.Fuzzy.TrapezoidalFunction.EdgeType"/>.</param>
            
        </member>
        <member name="M:AForge.Fuzzy.TrapezoidalFunction.#ctor(System.Single,System.Single,AForge.Fuzzy.TrapezoidalFunction.EdgeType)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Fuzzy.TrapezoidalFunction"/> class.
            
            With three points and an edge this shape can be a left fuzzy number (/--) or a right fuzzy number (--\).
            </summary>
            
            <param name="m1">Edge = Left: X value where the degree of membership starts to raise.
            Edge = Right: X value where the function starts, with maximum degree of membership. </param>
            <param name="m2">Edge = Left: X value where the degree of membership reaches the maximum.
            Edge = Right: X value where the degree of membership reaches minimum value. </param>
            <param name="edge">Trapezoid's <see cref="T:AForge.Fuzzy.TrapezoidalFunction.EdgeType"/>.</param>
            
            <remarks>
            <para>Maximum membership value is set to <b>1.0</b> and the minimum is set to <b>0.0</b>.</para>
            </remarks>
            
        </member>
        <member name="T:AForge.Fuzzy.TrapezoidalFunction.EdgeType">
            <summary>
            Enumeration used to create trapezoidal membership functions with half trapezoids.
            </summary>
            
            <remarks><para>If the value is Left, the trapezoid has the left edge, but right
            is open (/--). If the value is Right, the trapezoid has the right edge, but left
            is open (--\).</para></remarks>
            
        </member>
        <member name="F:AForge.Fuzzy.TrapezoidalFunction.EdgeType.Left">
            <summary>
            The fuzzy side of the trapezoid is at the left side.
            </summary>
        </member>
        <member name="F:AForge.Fuzzy.TrapezoidalFunction.EdgeType.Right">
            <summary>
            The fuzzy side of the trapezoid is at the right side.
            </summary>
        </member>
        <member name="T:AForge.Fuzzy.ICoNorm">
            <summary>
            Interface with the common methods of a Fuzzy CoNorm.
            </summary>
            
            <remarks><para>All fuzzy operators that act as a CoNorm must implement this interface.
            </para></remarks>
            
        </member>
        <member name="M:AForge.Fuzzy.ICoNorm.Evaluate(System.Single,System.Single)">
            <summary>
            Calculates the numerical result of a CoNorm (OR) operation applied to
            two fuzzy membership values.
            </summary>
            
            <param name="membershipA">A fuzzy membership value, [0..1].</param>
            <param name="membershipB">A fuzzy membership value, [0..1].</param>
            
            <returns>The numerical result the operation OR applied to <paramref name="membershipA"/>
            and <paramref name="membershipB"/>.</returns>
            
        </member>
        <member name="T:AForge.Fuzzy.INorm">
            <summary>
            Interface with the common methods of a Fuzzy Norm.
            </summary>
            
            <remarks><para>All fuzzy operators that act as a Norm must implement this interface.
            </para></remarks>
            
        </member>
        <member name="M:AForge.Fuzzy.INorm.Evaluate(System.Single,System.Single)">
            <summary>
            Calculates the numerical result of a Norm (AND) operation applied to
            two fuzzy membership values.
            </summary>
            
            <param name="membershipA">A fuzzy membership value, [0..1].</param>
            <param name="membershipB">A fuzzy membership value, [0..1].</param>
            
            <returns>The numerical result the operation AND applied to <paramref name="membershipA"/>
            and <paramref name="membershipB"/>.</returns>
            
        </member>
        <member name="T:AForge.Fuzzy.IUnaryOperator">
            <summary>
            Interface with the common methods of Fuzzy Unary Operator.
            </summary>
            
            <remarks><para>All fuzzy operators that act as a Unary Operator (NOT, VERY, LITTLE) must implement this interface.
            </para></remarks>
            
        </member>
        <member name="M:AForge.Fuzzy.IUnaryOperator.Evaluate(System.Single)">
            <summary>
            Calculates the numerical result of a Unary operation applied to one
            fuzzy membership value.
            </summary>
            
            <param name="membership">A fuzzy membership value, [0..1].</param>
            
            <returns>The numerical result of the operation applied to <paramref name="membership"/></returns>.
            
        </member>
        <member name="T:AForge.Fuzzy.MaximumCoNorm">
            <summary>
            Maximum CoNorm, used to calculate the linguistic value of a OR operation. 
            </summary>
            
            <remarks><para>The maximum CoNorm uses a maximum operator to compute the OR
            among two fuzzy memberships.</para>
            
            <para>Sample usage:</para>
            <code>
            // creating 2 fuzzy sets to represent Cool (Temperature) and Near (Distance)
            TrapezoidalFunction function1 = new TrapezoidalFunction( 13, 18, 23, 28 );
            FuzzySet fsCool = new FuzzySet( "Cool", function1 );
            TrapezoidalFunction function2 = new TrapezoidalFunction( 23, 28, 33, 38 );
            FuzzySet fsNear = new FuzzySet( "Near", function2 );
            
            // getting memberships
            float m1 = fsCool.GetMembership( 15 );
            float m2 = fsNear.GetMembership( 35 );
            
            // computing the membership of "Cool OR Near"
            MaximumCoNorm OR = new MaximumCoNorm( );
            float result = OR.Evaluate( m1, m2 );
                         
            // show result
            Console.WriteLine( result );
            </code>
            </remarks>
            
            <seealso cref="T:AForge.Fuzzy.ICoNorm"/>
            
        </member>
        <member name="M:AForge.Fuzzy.MaximumCoNorm.Evaluate(System.Single,System.Single)">
            <summary>
            Calculates the numerical result of the OR operation applied to
            two fuzzy membership values.
            </summary>
            
            <param name="membershipA">A fuzzy membership value, [0..1].</param>
            <param name="membershipB">A fuzzy membership value, [0..1].</param>
            
            <returns>The numerical result of the binary operation OR applied to <paramref name="membershipA"/>
            and <paramref name="membershipB"/>.</returns>
            
        </member>
        <member name="T:AForge.Fuzzy.MinimumNorm">
            <summary>
            Minimum Norm, used to calculate the linguistic value of a AND operation. 
            </summary>
            
            <remarks><para>The minimum Norm uses a minimum operator to compute the AND
            among two fuzzy memberships. </para>
            
            <para>Sample usage:</para>
            <code>
            // creating 2 fuzzy sets to represent Cool (Temperature) and Near (Distance)
            TrapezoidalFunction function1 = new TrapezoidalFunction( 13, 18, 23, 28 );
            FuzzySet fsCool = new FuzzySet( "Cool", function1 );
            TrapezoidalFunction function2 = new TrapezoidalFunction( 23, 28, 33, 38 );
            FuzzySet fsNear = new FuzzySet( "Near", function2 );
            
            // getting memberships
            float m1 = fsCool.GetMembership( 15 );
            float m2 = fsNear.GetMembership( 35 );
            
            // computing the membership of "Cool AND Near"
            MinimumNorm AND = new MinimumNorm( );
            float result = AND.Evaluate( m1, m2 );
                         
            // show result
            Console.WriteLine( result );
            </code>
            </remarks>
            
            <seealso cref="T:AForge.Fuzzy.ProductNorm"/>
            
        </member>
        <member name="M:AForge.Fuzzy.MinimumNorm.Evaluate(System.Single,System.Single)">
            <summary>
            Calculates the numerical result of the AND operation applied to
            two fuzzy membership values using the minimum rule.
            </summary>
            
            <param name="membershipA">A fuzzy membership value, [0..1].</param>
            
            <param name="membershipB">A fuzzy membership value, [0..1].</param>
            
            <returns>The numerical result of the AND operation applied to <paramref name="membershipA"/>
            and <paramref name="membershipB"/>.</returns>
            
        </member>
        <member name="T:AForge.Fuzzy.NotOperator">
            <summary>
            NOT operator, used to calculate the complement of a fuzzy set. 
            </summary>
            
            <remarks><para>The NOT operator definition is (1 - m) for all the values of membership m of the fuzzy set.</para>
            
            <para>Sample usage:</para>
            <code>
            // creating a fuzzy sets to represent Cool (Temperature)
            TrapezoidalFunction function1 = new TrapezoidalFunction( 13, 18, 23, 28 );
            FuzzySet fsCool = new FuzzySet( "Cool", function1 );
            
            // getting membership
            float m1 = fsCool.GetMembership( 15 );
            
            // computing the membership of "NOT Cool"
            NotOperator NOT = new NotOperator( );
            float result = NOT.Evaluate( m1 );
                         
            // show result
            Console.WriteLine( result );
            </code>
            </remarks>
            
            <seealso cref="T:AForge.Fuzzy.IUnaryOperator"/>
            
        </member>
        <member name="M:AForge.Fuzzy.NotOperator.Evaluate(System.Single)">
            <summary>
            Calculates the numerical result of the NOT operation applied to
            a fuzzy membership value.
            </summary>
            
            <param name="membership">A fuzzy membership value, [0..1].</param>
            
            <returns>The numerical result of the unary operation NOT applied to <paramref name="membership"/>.</returns>
            
        </member>
        <member name="T:AForge.Fuzzy.ProductNorm">
            <summary>
            Product Norm, used to calculate the linguistic value of a AND operation. 
            </summary>
            
            <remarks><para>The product Norm uses a multiplication operator to compute the
            AND among two fuzzy memberships.</para>
            
            <para>Sample usage:</para>
            <code>
            // creating 2 fuzzy sets to represent Cool (Temperature) and Near (Distance)
            TrapezoidalFunction function1 = new TrapezoidalFunction( 13, 18, 23, 28 );
            FuzzySet fsCool = new FuzzySet( "Cool", function1 );
            TrapezoidalFunction function2 = new TrapezoidalFunction( 23, 28, 33, 38 );
            FuzzySet fsNear = new FuzzySet( "Near", function2 );
            
            // getting memberships
            float m1 = fsCool.GetMembership( 15 );
            float m2 = fsNear.GetMembership( 35 );
            
            // computing the membership of "Cool AND Near"
            ProductNorm AND = new ProductNorm( );
            float result = AND.Evaluate( m1, m2 );
                         
            // show result
            Console.WriteLine( result );
            </code>
            </remarks>
            
            <seealso cref="T:AForge.Fuzzy.MinimumNorm"/>
            
        </member>
        <member name="M:AForge.Fuzzy.ProductNorm.Evaluate(System.Single,System.Single)">
            <summary>
            Calculates the numerical result of the AND operation applied to
            two fuzzy membership values using the product rule.
            </summary>
            
            <param name="membershipA">A fuzzy membership value, [0..1].</param>
            <param name="membershipB">A fuzzy membership value, [0..1].</param>
            
            <returns>The numerical result of the AND operation applied to <paramref name="membershipA"/>
            and <paramref name="membershipB"/>.</returns>
            
        </member>
        <member name="T:AForge.Fuzzy.Rule">
             <summary>
             This class represents a Fuzzy Rule, a linguistic expression representing some behavioral
             aspect of a Fuzzy Inference System. 
             </summary>
             
             <remarks><para>
             A Fuzzy Rule is a fuzzy linguistic instruction that can be executed by a fuzzy system.
             The format of the Fuzzy Rule is:
             </para>
             
             <para><b>IF <i>antecedent</i> THEN <i>consequent</i></b></para>
             
             <para>The antecedent is composed by a set of fuzzy clauses (see <see cref="T:AForge.Fuzzy.Clause"/>) connected
             by fuzzy operations, like <b>AND</b> or <b>OR</b>. The operator <b>NOT</b> can be used to negate expressions: </para>
             
             <para><b>...<i>Clause1</i> AND (<i>Clause2</i> OR <i>Clause3</i>) AND NOT <i>Clause4</i> ...</b></para>
                 
             <para>Fuzzy clauses are written in form <i>Variable IS Value</i>. The NOT operator can be used to negate linguistic values as well:<br/>
             <b>...<i>Variable1 IS Value1</i> AND <i>Variable2 IS NOT Value2</i> ...</b></para>
            
             <para>The consequent is a single of fuzzy clauses (<see cref="T:AForge.Fuzzy.Clause"/>). To perform the
             linguistic computing, the <see cref="T:AForge.Fuzzy.Rule"/> evaluates the clauses and then applies the fuzzy
             operators. Once this is done a value representing the confidence in the antecedent being
             true is obtained, and this is called firing strength of the <see cref="T:AForge.Fuzzy.Rule"/>.</para>
             
             <para>The firing strength is used to discover with how much confidence the consequent
             of a rule is true.</para>
             
             <para>Sample usage:</para>
             <code>
             // create the linguistic labels (fuzzy sets) that compose the temperature 
             TrapezoidalFunction function1 = new TrapezoidalFunction(
                 10, 15, TrapezoidalFunction.EdgeType.Right );
             FuzzySet fsCold = new FuzzySet( "Cold", function1 );
             TrapezoidalFunction function2 = new TrapezoidalFunction( 10, 15, 20, 25 );
             FuzzySet fsCool = new FuzzySet( "Cool", function2 );
             TrapezoidalFunction function3 = new TrapezoidalFunction( 20, 25, 30, 35 );
             FuzzySet fsWarm = new FuzzySet( "Warm", function3 );
             TrapezoidalFunction function4 = new TrapezoidalFunction(
                 30, 35, TrapezoidalFunction.EdgeType.Left );
             FuzzySet fsHot = new FuzzySet( "Hot", function4 );
             
             // create a linguistic variable to represent steel temperature
             LinguisticVariable lvSteel = new LinguisticVariable( "Steel", 0, 80 );
             // adding labels to the variable
             lvSteel.AddLabel( fsCold );
             lvSteel.AddLabel( fsCool );
             lvSteel.AddLabel( fsWarm );
             lvSteel.AddLabel( fsHot );
             
             // create a linguistic variable to represent stove temperature
             LinguisticVariable lvStove = new LinguisticVariable( "Stove", 0, 80 );
             // adding labels to the variable
             lvStove.AddLabel( fsCold );
             lvStove.AddLabel( fsCool );
             lvStove.AddLabel( fsWarm );
             lvStove.AddLabel( fsHot );
             
             // create the linguistic labels (fuzzy sets) that compose the pressure
             TrapezoidalFunction function5 = new TrapezoidalFunction(
                 20, 40, TrapezoidalFunction.EdgeType.Right );
             FuzzySet fsLow = new FuzzySet( "Low", function5 );
             TrapezoidalFunction function6 = new TrapezoidalFunction( 20, 40, 60, 80 );
             FuzzySet fsMedium = new FuzzySet( "Medium", function6 );
             TrapezoidalFunction function7 = new TrapezoidalFunction(
                 60, 80, TrapezoidalFunction.EdgeType.Left );
             FuzzySet fsHigh = new FuzzySet( "High", function7 );
             // create a linguistic variable to represent pressure
             LinguisticVariable lvPressure = new LinguisticVariable( "Pressure", 0, 100 );
             // adding labels to the variable
             lvPressure.AddLabel( fsLow );
             lvPressure.AddLabel( fsMedium );
             lvPressure.AddLabel( fsHigh );
             
             // create a linguistic variable database
             Database db = new Database( );
             db.AddVariable( lvSteel );
             db.AddVariable( lvStove );
             db.AddVariable( lvPressure );
             
             // sample rules just to test the expression parsing
             Rule r1 = new Rule( db, "Test1", "IF Steel is not Cold and Stove is Hot then Pressure is Low" );
             Rule r2 = new Rule( db, "Test2", "IF Steel is Cold and not (Stove is Warm or Stove is Hot) then Pressure is Medium" );
             Rule r3 = new Rule( db, "Test3", "IF Steel is Cold and Stove is Warm or Stove is Hot then Pressure is High" );
             
             // testing the firing strength
             lvSteel.NumericInput = 12;
             lvStove.NumericInput = 35;
             float result = r1.EvaluateFiringStrength( );
             Console.WriteLine( result.ToString( ) );
             </code>    
             </remarks>
             
        </member>
        <member name="M:AForge.Fuzzy.Rule.#ctor(AForge.Fuzzy.Database,System.String,System.String,AForge.Fuzzy.INorm,AForge.Fuzzy.ICoNorm)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Fuzzy.Rule"/> class.
            </summary>
            
            <param name="fuzzyDatabase">A fuzzy <see cref="T:AForge.Fuzzy.Database"/> containig the linguistic variables
            (see <see cref="T:AForge.Fuzzy.LinguisticVariable"/>) that will be used in the Rule.</param>
            
            <param name="name">Name of this <see cref="T:AForge.Fuzzy.Rule"/>.</param>
            
            <param name="rule">A string representing the <see cref="T:AForge.Fuzzy.Rule"/>. It must be a "IF..THEN" statement.
            For a more detailed  description see <see cref="T:AForge.Fuzzy.Rule"/> class.</param>
            
            <param name="normOperator">A class that implements a <see cref="T:AForge.Fuzzy.INorm"/> interface to
            evaluate the AND operations of the Rule. </param>
            
            <param name="coNormOperator">A class that implements a <see cref="T:AForge.Fuzzy.ICoNorm"/> interface
            to evaluate the OR operations of the Rule. </param>
            
        </member>
        <member name="M:AForge.Fuzzy.Rule.#ctor(AForge.Fuzzy.Database,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Fuzzy.Rule"/> class using as
            CoNorm the <see cref="T:AForge.Fuzzy.MaximumCoNorm"/> and as Norm the <see cref="T:AForge.Fuzzy.MinimumNorm"/>.
            </summary>
            
            <param name="fuzzyDatabase">A fuzzy <see cref="T:AForge.Fuzzy.Database"/> containig the linguistic variables
            (see <see cref="T:AForge.Fuzzy.LinguisticVariable"/>) that will be used in the <see cref="T:AForge.Fuzzy.Rule"/>.</param>
            
            <param name="name">Name of this <see cref="T:AForge.Fuzzy.Rule"/>.</param>
            
            <param name="rule">A string representing the <see cref="T:AForge.Fuzzy.Rule"/>. It must be a "IF..THEN"
            statement. For a more detailed description see <see cref="T:AForge.Fuzzy.Rule"/> class.</param>
            
        </member>
        <member name="M:AForge.Fuzzy.Rule.GetRPNExpression">
            <summary>
            Converts the RPN fuzzy expression into a string representation.
            </summary>
            
            <returns>String representation of the RPN fuzzy expression.</returns>
            
        </member>
        <member name="M:AForge.Fuzzy.Rule.Priority(System.String)">
            <summary>
            Defines the priority of the fuzzy operators.
            </summary>
            
            <param name="Operator">A fuzzy operator or openning parenthesis.</param>
            
            <returns>A number indicating the priority of the operator, and zero for openning
            parenthesis.</returns>
            
        </member>
        <member name="M:AForge.Fuzzy.Rule.ParseRule">
            <summary>
            Converts the Fuzzy Rule to RPN (Reverse Polish Notation). For debug proposes, the string representation of the 
            RPN expression can be acessed by calling <see cref="M:AForge.Fuzzy.Rule.GetRPNExpression"/> method.
            </summary>
            
        </member>
        <member name="M:AForge.Fuzzy.Rule.GetRuleTokens(System.String)">
            <summary>
            Performs a preprocessing on the rule, placing unary operators in proper position and breaking the string 
            space separated tokens.
            </summary>
            
            <param name="rule">Rule in string format.</param>
            
            <returns>An array of strings with tokens of the rule.</returns>
            
        </member>
        <member name="M:AForge.Fuzzy.Rule.EvaluateFiringStrength">
            <summary>
            Evaluates the firing strength of the Rule, the degree of confidence that the consequent of this Rule
            must be executed.
            </summary>
            
            <returns>The firing strength [0..1] of the Rule.</returns>
            
        </member>
        <member name="P:AForge.Fuzzy.Rule.Name">
            <summary>
            The name of the fuzzy rule.
            </summary>
            
        </member>
        <member name="P:AForge.Fuzzy.Rule.Output">
            <summary>
            The fuzzy <see cref="T:AForge.Fuzzy.Clause"/> that represents the consequent of the <see cref="T:AForge.Fuzzy.Rule"/>.
            </summary>
            
        </member>
        <member name="T:AForge.Fuzzy.Rulebase">
            <summary>
            The class represents a fuzzy rulebase, a set of fuzzy rules used in a Fuzzy Inference System.
            </summary>
            
        </member>
        <member name="M:AForge.Fuzzy.Rulebase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Fuzzy.Rulebase"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Fuzzy.Rulebase.AddRule(AForge.Fuzzy.Rule)">
            <summary>
            Adds a fuzzy rule to the database. 
            </summary>
            
            <param name="rule">A fuzzy <see cref="T:AForge.Fuzzy.Rule"/> to add to the database.</param>
            
            <exception cref="T:System.NullReferenceException">The fuzzy rule was not initialized.</exception>
            <exception cref="T:System.ArgumentException">The fuzzy rule name already exists in the rulebase.</exception>
            
        </member>
        <member name="M:AForge.Fuzzy.Rulebase.ClearRules">
            <summary>
            Removes all the fuzzy rules of the database. 
            </summary>
            
        </member>
        <member name="M:AForge.Fuzzy.Rulebase.GetRule(System.String)">
            <summary>
            Returns an existing fuzzy rule from the rulebase.
            </summary>
            
            <param name="ruleName">Name of the fuzzy <see cref="T:AForge.Fuzzy.Rule"/> to retrieve.</param>
            
            <returns>Reference to named <see cref="T:AForge.Fuzzy.Rule"/>.</returns>
            
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The rule indicated in ruleName was not found in the rulebase.</exception>
            
        </member>
        <member name="M:AForge.Fuzzy.Rulebase.GetRules">
            <summary>
            Gets all the rules of the rulebase.
            </summary>
            
            <returns>An array with all the rulebase rules.</returns>
            
        </member>
        <member name="T:AForge.Genetic.BinaryChromosome">
            <summary>
            Binary chromosome, which supports length from 2 till 64.
            </summary>
            
            <remarks><para>The binary chromosome is the simplest type of chromosomes,
            which is represented by a set of bits. Maximum number of bits comprising
            the chromosome is 64.</para></remarks>
            
        </member>
        <member name="T:AForge.Genetic.ChromosomeBase">
            <summary>
            Chromosomes' base class.
            </summary>
            
            <remarks><para>The base class provides implementation of some <see cref="T:AForge.Genetic.IChromosome"/>
            methods and properties, which are identical to all types of chromosomes.</para></remarks>
            
        </member>
        <member name="T:AForge.Genetic.IChromosome">
            <summary>
            Chromosome interface.
            </summary>
            
            <remarks><para>The interfase should be implemented by all classes, which implement
            particular chromosome type.</para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.IChromosome.Generate">
            <summary>
            Generate random chromosome value.
            </summary>
            
            <remarks><para>Regenerates chromosome's value using random number generator.</para>
            </remarks>
            
        </member>
        <member name="M:AForge.Genetic.IChromosome.CreateNew">
            <summary>
            Create new random chromosome with same parameters (factory method).
            </summary>
            
            <remarks><para>The method creates new chromosome of the same type, but randomly
            initialized. The method is useful as factory method for those classes, which work
            with chromosome's interface, but not with particular chromosome class.</para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.IChromosome.Clone">
            <summary>
            Clone the chromosome.
            </summary>
            
            <remarks><para>The method clones the chromosome returning the exact copy of it.</para>
            </remarks>
            
        </member>
        <member name="M:AForge.Genetic.IChromosome.Mutate">
            <summary>
            Mutation operator.
            </summary>
            
            <remarks><para>The method performs chromosome's mutation, changing its part randomly.</para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.IChromosome.Crossover(AForge.Genetic.IChromosome)">
            <summary>
            Crossover operator.
            </summary>
            
            <param name="pair">Pair chromosome to crossover with.</param>
            
            <remarks><para>The method performs crossover between two chromosomes – interchanging some parts of chromosomes.</para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.IChromosome.Evaluate(AForge.Genetic.IFitnessFunction)">
            <summary>
            Evaluate chromosome with specified fitness function.
            </summary>
            
            <param name="function">Fitness function to use for evaluation of the chromosome.</param>
            
            <remarks><para>Calculates chromosome's fitness using the specifed fitness function.</para></remarks>
            
        </member>
        <member name="P:AForge.Genetic.IChromosome.Fitness">
            <summary>
            Chromosome's fintess value.
            </summary>
            
            <remarks><para>The fitness value represents chromosome's usefulness - the greater the
            value, the more useful it.</para></remarks>
            
        </member>
        <member name="F:AForge.Genetic.ChromosomeBase.fitness">
            <summary>
            Chromosome's fintess value.
            </summary>
        </member>
        <member name="M:AForge.Genetic.ChromosomeBase.Generate">
            <summary>
            Generate random chromosome value.
            </summary>
            
            <remarks><para>Regenerates chromosome's value using random number generator.</para>
            </remarks>
            
        </member>
        <member name="M:AForge.Genetic.ChromosomeBase.CreateNew">
            <summary>
            Create new random chromosome with same parameters (factory method).
            </summary>
            
            <remarks><para>The method creates new chromosome of the same type, but randomly
            initialized. The method is useful as factory method for those classes, which work
            with chromosome's interface, but not with particular chromosome class.</para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.ChromosomeBase.Clone">
            <summary>
            Clone the chromosome.
            </summary>
            
            <remarks><para>The method clones the chromosome returning the exact copy of it.</para>
            </remarks>
            
        </member>
        <member name="M:AForge.Genetic.ChromosomeBase.Mutate">
            <summary>
            Mutation operator.
            </summary>
            
            <remarks><para>The method performs chromosome's mutation, changing its part randomly.</para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.ChromosomeBase.Crossover(AForge.Genetic.IChromosome)">
            <summary>
            Crossover operator.
            </summary>
            
            <param name="pair">Pair chromosome to crossover with.</param>
            
            <remarks><para>The method performs crossover between two chromosomes – interchanging some parts of chromosomes.</para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.ChromosomeBase.Evaluate(AForge.Genetic.IFitnessFunction)">
             <summary>
             Evaluate chromosome with specified fitness function.
             </summary>
             
             <param name="function">Fitness function to use for evaluation of the chromosome.</param>
             
             <remarks><para>Calculates chromosome's fitness using the specifed fitness function.</para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.ChromosomeBase.CompareTo(System.Object)">
            <summary>
            Compare two chromosomes.
            </summary>
            
            <param name="o">Binary chromosome to compare to.</param>
            
            <returns>Returns comparison result, which equals to 0 if fitness values
            of both chromosomes are equal, 1 if fitness value of this chromosome
            is less than fitness value of the specified chromosome, -1 otherwise.</returns>
            
        </member>
        <member name="P:AForge.Genetic.ChromosomeBase.Fitness">
            <summary>
            Chromosome's fintess value.
            </summary>
            
            <remarks><para>Fitness value (usefulness) of the chromosome calculate by calling
            <see cref="M:AForge.Genetic.ChromosomeBase.Evaluate(AForge.Genetic.IFitnessFunction)"/> method. The greater the value, the more useful the chromosome.
            </para></remarks>
            
        </member>
        <member name="F:AForge.Genetic.BinaryChromosome.MaxLength">
            <summary>
            Chromosome's maximum length.
            </summary>
            
            <remarks><para>Maxim chromosome's length in bits, which is supported
            by the class</para></remarks>
            
        </member>
        <member name="F:AForge.Genetic.BinaryChromosome.length">
            <summary>
            Chromosome's length in bits.
            </summary>
        </member>
        <member name="F:AForge.Genetic.BinaryChromosome.val">
            <summary>
            Numerical chromosome's value.
            </summary>
        </member>
        <member name="F:AForge.Genetic.BinaryChromosome.rand">
            <summary>
            Random number generator for chromosoms generation, crossover, mutation, etc.
            </summary>
        </member>
        <member name="M:AForge.Genetic.BinaryChromosome.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Genetic.BinaryChromosome"/> class.
            </summary>
            
            <param name="length">Chromosome's length in bits, [2, <see cref="F:AForge.Genetic.BinaryChromosome.MaxLength"/>].</param>
            
        </member>
        <member name="M:AForge.Genetic.BinaryChromosome.#ctor(AForge.Genetic.BinaryChromosome)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Genetic.BinaryChromosome"/> class.
            </summary>
            
            <param name="source">Source chromosome to copy.</param>
            
            <remarks><para>This is a copy constructor, which creates the exact copy
            of specified chromosome.</para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.BinaryChromosome.ToString">
            <summary>
            Get string representation of the chromosome.
            </summary>
            
            <returns>Returns string representation of the chromosome.</returns>
            
        </member>
        <member name="M:AForge.Genetic.BinaryChromosome.Generate">
            <summary>
            Generate random chromosome value.
            </summary>
            
            <remarks><para>Regenerates chromosome's value using random number generator.</para>
            </remarks>
            
        </member>
        <member name="M:AForge.Genetic.BinaryChromosome.CreateNew">
            <summary>
            Create new random chromosome with same parameters (factory method).
            </summary>
            
            <remarks><para>The method creates new chromosome of the same type, but randomly
            initialized. The method is useful as factory method for those classes, which work
            with chromosome's interface, but not with particular chromosome type.</para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.BinaryChromosome.Clone">
             <summary>
             Clone the chromosome.
             </summary>
             
             <returns>Return's clone of the chromosome.</returns>
             
             <remarks><para>The method clones the chromosome returning the exact copy of it.</para>
             </remarks>
            
        </member>
        <member name="M:AForge.Genetic.BinaryChromosome.Mutate">
            <summary>
            Mutation operator.
            </summary>
            
            <remarks><para>The method performs chromosome's mutation, changing randomly
            one of its bits.</para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.BinaryChromosome.Crossover(AForge.Genetic.IChromosome)">
             <summary>
             Crossover operator.
             </summary>
             
             <param name="pair">Pair chromosome to crossover with.</param>
             
             <remarks><para>The method performs crossover between two chromosomes – interchanging
             range of bits between these chromosomes.</para></remarks>
            
        </member>
        <member name="P:AForge.Genetic.BinaryChromosome.Length">
            <summary>
            Chromosome's length.
            </summary>
            
            <remarks><para>Length of the chromosome in bits.</para></remarks>
            
        </member>
        <member name="P:AForge.Genetic.BinaryChromosome.Value">
            <summary>
            Chromosome's value.
            </summary>
            
            <remarks><para>Current numerical value of the chromosome.</para></remarks>
            
        </member>
        <member name="P:AForge.Genetic.BinaryChromosome.MaxValue">
            <summary>
            Max possible chromosome's value.
            </summary>
            
            <remarks><para>Maximum possible numerical value, which may be represented
            by the chromosome of current length.</para></remarks>
            
        </member>
        <member name="T:AForge.Genetic.DoubleArrayChromosome">
            <summary>
            Double array chromosome.
            </summary>
            
            <remarks><para>Double array chromosome represents array of double values.
            Array length is in the range of [2, 65536].
            </para>
            
            <para>See documentation to <see cref="M:AForge.Genetic.DoubleArrayChromosome.Mutate"/> and <see cref="M:AForge.Genetic.DoubleArrayChromosome.Crossover(AForge.Genetic.IChromosome)"/> methods
            for information regarding implemented mutation and crossover operators.</para>
            </remarks>
            
        </member>
        <member name="F:AForge.Genetic.DoubleArrayChromosome.MaxLength">
            <summary>
            Chromosome's maximum length.
            </summary>
            
            <remarks><para>Maxim chromosome's length in array elements.</para></remarks>
            
        </member>
        <member name="F:AForge.Genetic.DoubleArrayChromosome.chromosomeGenerator">
            <summary>
            Chromosome generator.
            </summary>
            
            <remarks><para>This random number generator is used to initialize chromosome's genes,
            which is done by calling <see cref="M:AForge.Genetic.DoubleArrayChromosome.Generate"/> method.</para></remarks>
            
        </member>
        <member name="F:AForge.Genetic.DoubleArrayChromosome.mutationMultiplierGenerator">
            <summary>
            Mutation multiplier generator.
            </summary>
            
            <remarks><para>This random number generator is used to generate random multiplier values,
            which are used to multiply chromosome's genes during mutation.</para></remarks>
            
        </member>
        <member name="F:AForge.Genetic.DoubleArrayChromosome.mutationAdditionGenerator">
            <summary>
            Mutation addition generator.
            </summary>
            
            <remarks><para>This random number generator is used to generate random addition values,
            which are used to add to chromosome's genes during mutation.</para></remarks>
            
        </member>
        <member name="F:AForge.Genetic.DoubleArrayChromosome.rand">
            <summary>
            Random number generator for crossover and mutation points selection.
            </summary>
            
            <remarks><para>This random number generator is used to select crossover
            and mutation points.</para></remarks>
            
        </member>
        <member name="F:AForge.Genetic.DoubleArrayChromosome.length">
            <summary>
            Chromosome's length in number of elements.
            </summary>
        </member>
        <member name="F:AForge.Genetic.DoubleArrayChromosome.val">
            <summary>
            Chromosome's value.
            </summary>
        </member>
        <member name="M:AForge.Genetic.DoubleArrayChromosome.#ctor(AForge.Math.Random.IRandomNumberGenerator,AForge.Math.Random.IRandomNumberGenerator,AForge.Math.Random.IRandomNumberGenerator,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Genetic.DoubleArrayChromosome"/> class.
            </summary>
            
            <param name="chromosomeGenerator">Chromosome generator - random number generator, which is 
            used to initialize chromosome's genes, which is done by calling <see cref="M:AForge.Genetic.DoubleArrayChromosome.Generate"/> method
            or in class constructor.</param>
            <param name="mutationMultiplierGenerator">Mutation multiplier generator - random number
            generator, which is used to generate random multiplier values, which are used to
            multiply chromosome's genes during mutation.</param>
            <param name="mutationAdditionGenerator">Mutation addition generator - random number
            generator, which is used to generate random addition values, which are used to
            add to chromosome's genes during mutation.</param>
            <param name="length">Chromosome's length in array elements, [2, <see cref="F:AForge.Genetic.DoubleArrayChromosome.MaxLength"/>].</param>
            
            <remarks><para>The constructor initializes the new chromosome randomly by calling
            <see cref="M:AForge.Genetic.DoubleArrayChromosome.Generate"/> method.</para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.DoubleArrayChromosome.#ctor(AForge.Math.Random.IRandomNumberGenerator,AForge.Math.Random.IRandomNumberGenerator,AForge.Math.Random.IRandomNumberGenerator,System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Genetic.DoubleArrayChromosome"/> class.
            </summary>
            
            <param name="chromosomeGenerator">Chromosome generator - random number generator, which is 
            used to initialize chromosome's genes, which is done by calling <see cref="M:AForge.Genetic.DoubleArrayChromosome.Generate"/> method
            or in class constructor.</param>
            <param name="mutationMultiplierGenerator">Mutation multiplier generator - random number
            generator, which is used to generate random multiplier values, which are used to
            multiply chromosome's genes during mutation.</param>
            <param name="mutationAdditionGenerator">Mutation addition generator - random number
            generator, which is used to generate random addition values, which are used to
            add to chromosome's genes during mutation.</param>
            <param name="values">Values used to initialize the chromosome.</param>
            
            <remarks><para>The constructor initializes the new chromosome with specified <paramref name="values">values</paramref>.
            </para></remarks>
            
            <exception cref="T:System.ArgumentOutOfRangeException">Invalid length of values array.</exception>
            
        </member>
        <member name="M:AForge.Genetic.DoubleArrayChromosome.#ctor(AForge.Genetic.DoubleArrayChromosome)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Genetic.DoubleArrayChromosome"/> class.
            </summary>
            
            <param name="source">Source chromosome to copy.</param>
            
            <remarks><para>This is a copy constructor, which creates the exact copy
            of specified chromosome.</para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.DoubleArrayChromosome.ToString">
            <summary>
            Get string representation of the chromosome.
            </summary>
            
            <returns>Returns string representation of the chromosome.</returns>
            
        </member>
        <member name="M:AForge.Genetic.DoubleArrayChromosome.Generate">
             <summary>
             Generate random chromosome value.
             </summary>
             
             <remarks><para>Regenerates chromosome's value using random number generator.</para>
             </remarks>
            
        </member>
        <member name="M:AForge.Genetic.DoubleArrayChromosome.CreateNew">
             <summary>
             Create new random chromosome with same parameters (factory method).
             </summary>
             
             <remarks><para>The method creates new chromosome of the same type, but randomly
             initialized. The method is useful as factory method for those classes, which work
             with chromosome's interface, but not with particular chromosome type.</para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.DoubleArrayChromosome.Clone">
             <summary>
             Clone the chromosome.
             </summary>
             
             <returns>Return's clone of the chromosome.</returns>
             
             <remarks><para>The method clones the chromosome returning the exact copy of it.</para>
             </remarks>
            
        </member>
        <member name="M:AForge.Genetic.DoubleArrayChromosome.Mutate">
            <summary>
            Mutation operator.
            </summary>
            
            <remarks><para>The method performs chromosome's mutation, adding random number
            to chromosome's gene or multiplying the gene by random number. These random
            numbers are generated with help of <see cref="F:AForge.Genetic.DoubleArrayChromosome.mutationMultiplierGenerator">mutation
            multiplier</see> and <see cref="F:AForge.Genetic.DoubleArrayChromosome.mutationAdditionGenerator">mutation
            addition</see> generators.</para>
            
            <para>The exact type of mutation applied to the particular gene
            is selected randomly each time and depends on <see cref="P:AForge.Genetic.DoubleArrayChromosome.MutationBalancer"/>.
            Before mutation is done a random number is generated in [0, 1] range - if the
            random number is smaller than <see cref="P:AForge.Genetic.DoubleArrayChromosome.MutationBalancer"/>, then multiplication
            mutation is done, otherwise addition mutation.
            </para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.DoubleArrayChromosome.Crossover(AForge.Genetic.IChromosome)">
             <summary>
             Crossover operator.
             </summary>
             
             <param name="pair">Pair chromosome to crossover with.</param>
             
             <remarks><para>The method performs crossover between two chromosomes, selecting
             randomly the exact type of crossover to perform, which depends on <see cref="P:AForge.Genetic.DoubleArrayChromosome.CrossoverBalancer"/>.
             Before crossover is done a random number is generated in [0, 1] range - if the
             random number is smaller than <see cref="P:AForge.Genetic.DoubleArrayChromosome.CrossoverBalancer"/>, then the first crossover
             type is used, otherwise second type is used.</para>
             
             <para>The <b>first crossover type</b> is based on interchanging
             range of genes (array elements) between these chromosomes and is known
             as one point crossover. A crossover point is selected randomly and chromosomes
             interchange genes, which start from the selected point.</para>
             
             <para>The <b>second crossover type</b> is aimed to produce one child, which genes'
             values are between corresponding genes of parents, and another child, which genes'
             values are outside of the range formed by corresponding genes of parents. 
             Let take, for example, two genes with 1.0 and 3.0 valueы (of course chromosomes have
             more genes, but for simplicity lets think about one). First of all we randomly choose
             a factor in the [0, 1] range, let's take 0.4. Then, for each pair of genes (we have
             one pair) we calculate difference value, which is 2.0 in our case. In the result we’ll
             have two children – one between and one outside of the range formed by parents genes' values.
             We may have 1.8 and 3.8 children, or we may have 0.2 and 2.2 children. As we can see
             we add/subtract (chosen randomly) <i>difference * factor</i>. So, this gives us exploration
             in between and in near outside. The randomly chosen factor is applied to all genes
             of the chromosomes participating in crossover.</para>
             </remarks>
            
        </member>
        <member name="P:AForge.Genetic.DoubleArrayChromosome.Length">
             <summary>
             Chromosome's length.
             </summary>
             
             <remarks><para>Length of the chromosome in array elements.</para></remarks>
            
        </member>
        <member name="P:AForge.Genetic.DoubleArrayChromosome.Value">
             <summary>
             Chromosome's value.
             </summary>
             
             <remarks><para>Current value of the chromosome.</para></remarks>
            
        </member>
        <member name="P:AForge.Genetic.DoubleArrayChromosome.MutationBalancer">
            <summary>
            Mutation balancer to control mutation type, [0, 1].
            </summary>
            
            <remarks><para>The property controls type of mutation, which is used more
            frequently. A radnom number is generated each time before doing mutation -
            if the random number is smaller than the specified balance value, then one
            mutation type is used, otherwse another. See <see cref="M:AForge.Genetic.DoubleArrayChromosome.Mutate"/> method
            for more information.</para>
            
            <para>Default value is set to <b>0.5</b>.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Genetic.DoubleArrayChromosome.CrossoverBalancer">
            <summary>
            Crossover balancer to control crossover type, [0, 1].
            </summary>
            
            <remarks><para>The property controls type of crossover, which is used more
            frequently. A radnom number is generated each time before doing crossover -
            if the random number is smaller than the specified balance value, then one
            crossover type is used, otherwse another. See <see cref="M:AForge.Genetic.DoubleArrayChromosome.Crossover(AForge.Genetic.IChromosome)"/> method
            for more information.</para>
            
            <para>Default value is set to <b>0.5</b>.</para>
            </remarks>
            
        </member>
        <member name="T:AForge.Genetic.ExtendedGeneFunction">
             <summary>
             Genetic programming gene, which represents arithmetic functions, common mathematical functions
             and arguments.
             </summary>
            
             <remarks><para>Extended gene function may represent arithmetic functions (+, -, *, /),
             some common mathematical functions (sin, cos, ln, exp, sqrt) or an argument to functions.
             This class is used by Genetic Programming (or Gene Expression Programming)
             chromosomes to build arbitrary expressions with help of genetic operators.</para>
             </remarks>
            
        </member>
        <member name="T:AForge.Genetic.IGPGene">
            <summary>
            Genetic Programming's gene interface.
            </summary>
            
            <remarks><para>This is a gene interface, which is used for building chromosomes
            in Genetic Programming (GP) and Gene Expression Programming (GEP).
            </para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.IGPGene.Clone">
            <summary>
            Clone gene.
            </summary>
            
            <remarks><para>The method clones gene returning the exact copy of it.</para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.IGPGene.Generate">
            <summary>
            Randomize gene with random type and value.
            </summary>
            
            <remarks><para>The method randomizes a gene, setting its type and value randomly.</para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.IGPGene.Generate(AForge.Genetic.GPGeneType)">
            <summary>
            Randomize gene with random value.
            </summary>
            
            <param name="type">Gene type to set.</param>
            
            <remarks><para>The method randomizes a gene, setting its value randomly, but type
            is set to the specified one.</para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.IGPGene.CreateNew">
            <summary>
            Creates new gene with random type and value.
            </summary>
            
            <remarks><para>The method creates new randomly initialized gene .
            The method is useful as factory method for those classes, which work with gene's interface,
            but not with particular gene class.</para>
            </remarks>
            
        </member>
        <member name="M:AForge.Genetic.IGPGene.CreateNew(AForge.Genetic.GPGeneType)">
            <summary>
            Creates new gene with certain type and random value.
            </summary>
            
            <param name="type">Gene type to create.</param>
            
            <remarks><para>The method creates new gene with specified type, but random value.
            The method is useful as factory method for those classes, which work with gene's interface,
            but not with particular gene class.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Genetic.IGPGene.GeneType">
            <summary>
            Gene type.
            </summary>
            
            <remarks><para>The property represents type of a gene - function, argument, etc.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Genetic.IGPGene.ArgumentsCount">
            <summary>
            Arguments count.
            </summary>
            
            <remarks><para>Arguments count of a particular function gene.</para></remarks>
            
        </member>
        <member name="P:AForge.Genetic.IGPGene.MaxArgumentsCount">
            <summary>
            Maximum arguments count.
            </summary>
            
            <remarks><para>Maximum arguments count of a function gene. The property may be used
            by chromosomes' classes to allocate correctly memory for functions' arguments,
            for example.</para></remarks>
            
        </member>
        <member name="F:AForge.Genetic.ExtendedGeneFunction.FunctionsCount">
            <summary>
            Number of different functions supported by the class.
            </summary>
        </member>
        <member name="F:AForge.Genetic.ExtendedGeneFunction.rand">
            <summary>
            Random number generator for chromosoms generation.
            </summary>
        </member>
        <member name="M:AForge.Genetic.ExtendedGeneFunction.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Genetic.ExtendedGeneFunction"/> class.
            </summary>
            
            <param name="variablesCount">Total amount of variables in the task which is supposed
            to be solved.</param>
            
            <remarks><para>The constructor creates randomly initialized gene with random type
            and value by calling <see cref="M:AForge.Genetic.ExtendedGeneFunction.Generate"/> method.</para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.ExtendedGeneFunction.#ctor(System.Int32,AForge.Genetic.GPGeneType)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Genetic.ExtendedGeneFunction"/> class.
            </summary>
            
            <param name="variablesCount">Total amount of variables in the task which is supposed
            to be solved.</param>
            <param name="type">Gene type to set.</param>
            
            <remarks><para>The constructor creates randomly initialized gene with random
            value and preset gene type.</para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.ExtendedGeneFunction.ToString">
             <summary>
             Get string representation of the gene.
             </summary>
             
             <returns>Returns string representation of the gene.</returns>
            
        </member>
        <member name="M:AForge.Genetic.ExtendedGeneFunction.Clone">
            <summary>
            Clone the gene.
            </summary>
            
            <remarks><para>The method clones the chromosome returning the exact copy of it.</para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.ExtendedGeneFunction.Generate">
            <summary>
            Randomize gene with random type and value.
            </summary>
            
            <remarks><para>The method randomizes the gene, setting its type and value randomly.</para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.ExtendedGeneFunction.Generate(AForge.Genetic.GPGeneType)">
             <summary>
             Randomize gene with random value.
             </summary>
             
             <param name="type">Gene type to set.</param>
             
             <remarks><para>The method randomizes a gene, setting its value randomly, but type
             is set to the specified one.</para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.ExtendedGeneFunction.CreateNew">
             <summary>
             Creates new gene with random type and value.
             </summary>
             
             <remarks><para>The method creates new randomly initialized gene .
             The method is useful as factory method for those classes, which work with gene's interface,
             but not with particular gene class.</para>
             </remarks>
            
        </member>
        <member name="M:AForge.Genetic.ExtendedGeneFunction.CreateNew(AForge.Genetic.GPGeneType)">
             <summary>
             Creates new gene with certain type and random value.
             </summary>
             
             <param name="type">Gene type to create.</param>
             
             <remarks><para>The method creates new gene with specified type, but random value.
             The method is useful as factory method for those classes, which work with gene's interface,
             but not with particular gene class.</para>
             </remarks>
            
        </member>
        <member name="P:AForge.Genetic.ExtendedGeneFunction.GeneType">
            <summary>
            Gene type.
            </summary>
            
            <remarks><para>The property represents type of a gene - function, argument, etc.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Genetic.ExtendedGeneFunction.ArgumentsCount">
            <summary>
            Arguments count.
            </summary>
            
            <remarks><para>Arguments count of a particular function gene.</para></remarks>
            
        </member>
        <member name="P:AForge.Genetic.ExtendedGeneFunction.MaxArgumentsCount">
            <summary>
            Maximum arguments count.
            </summary>
            
            <remarks><para>Maximum arguments count of a function gene supported by the class.
            The property may be used by chromosomes' classes to allocate correctly memory for
            functions' arguments, for example.</para></remarks>
            
        </member>
        <member name="T:AForge.Genetic.ExtendedGeneFunction.Functions">
            <summary>
            Enumeration of supported functions.
            </summary>
        </member>
        <member name="F:AForge.Genetic.ExtendedGeneFunction.Functions.Add">
            <summary>
            Addition operator.
            </summary>
        </member>
        <member name="F:AForge.Genetic.ExtendedGeneFunction.Functions.Subtract">
            <summary>
            Suntraction operator.
            </summary>
        </member>
        <member name="F:AForge.Genetic.ExtendedGeneFunction.Functions.Multiply">
            <summary>
            Multiplication operator.
            </summary>
        </member>
        <member name="F:AForge.Genetic.ExtendedGeneFunction.Functions.Divide">
            <summary>
            Division operator.
            </summary>
        </member>
        <member name="F:AForge.Genetic.ExtendedGeneFunction.Functions.Sin">
            <summary>
            Sine function.
            </summary>
        </member>
        <member name="F:AForge.Genetic.ExtendedGeneFunction.Functions.Cos">
            <summary>
            Cosine function.
            </summary>
        </member>
        <member name="F:AForge.Genetic.ExtendedGeneFunction.Functions.Ln">
            <summary>
            Natural logarithm function.
            </summary>
        </member>
        <member name="F:AForge.Genetic.ExtendedGeneFunction.Functions.Exp">
            <summary>
            Exponent function.
            </summary>
        </member>
        <member name="F:AForge.Genetic.ExtendedGeneFunction.Functions.Sqrt">
            <summary>
            Square root function.
            </summary>
        </member>
        <member name="T:AForge.Genetic.GEPChromosome">
            <summary>
            The chromosome represents a Gene Expression, which is used for
            different tasks of Genetic Expression Programming (GEP).
            </summary>
            
            <remarks><para>This type of chromosome represents combination of ideas taken from
            Genetic Algorithms (GA), where chromosomes are linear structures of fixed length, and
            Genetic Programming (GP), where chromosomes are expression trees. The GEP chromosome
            is also a fixed length linear structure, but with some additional features which
            make it possible to generate valid expression tree from any GEP chromosome.</para>
            
            <para>The theory of Gene Expression Programming is well described in the next paper:
            <b>Ferreira, C., 2001. Gene Expression Programming: A New Adaptive Algorithm for Solving
            Problems. Complex Systems, Vol. 13, issue 2: 87-129</b>. A copy of the paper may be
            obtained on the
            <a href="http://www.gene-expression-programming.com/">gene expression programming</a> web site.</para>
            </remarks>
            
        </member>
        <member name="F:AForge.Genetic.GEPChromosome.headLength">
            <summary>
            Length of GEP chromosome's head.
            </summary>
            
            <remarks><para>GEP chromosome's head is a part of chromosome, which may contain both
            functions' and arguments' nodes. The rest of chromosome (tail) may contain only arguments' nodes.
            </para></remarks>
            
        </member>
        <member name="F:AForge.Genetic.GEPChromosome.length">
            <summary>
            GEP chromosome's length.
            </summary>
            
            <remarks><para><note>The variable keeps chromosome's length, but not expression length represented by the
            chromosome.</note></para></remarks>
            
        </member>
        <member name="F:AForge.Genetic.GEPChromosome.genes">
            <summary>
            Array of chromosome's genes.
            </summary>
        </member>
        <member name="F:AForge.Genetic.GEPChromosome.rand">
            <summary>
            Random generator used for chromosoms' generation.
            </summary>
        </member>
        <member name="M:AForge.Genetic.GEPChromosome.#ctor(AForge.Genetic.IGPGene,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:AForge.Genetic.GEPChromosome"/> class.
             </summary>
             
             <param name="ancestor">A gene, which is used as generator for the genetic tree.</param>
             <param name="headLength">Length of GEP chromosome's head (see <see cref="F:AForge.Genetic.GEPChromosome.headLength"/>).</param>
             
             <remarks><para>This constructor creates a randomly generated GEP chromosome,
             which has all genes of the same type and properties as the specified <paramref name="ancestor"/>.
             </para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.GEPChromosome.#ctor(AForge.Genetic.GEPChromosome)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Genetic.GEPChromosome"/> class.
            </summary>
            
            <param name="source">Source GEP chromosome to clone from.</param>
            
        </member>
        <member name="M:AForge.Genetic.GEPChromosome.ToString">
            <summary>
            Get string representation of the chromosome by providing its expression in
            reverse polish notation (postfix notation).
            </summary>
            
            <returns>Returns string representation of the expression represented by the GEP
            chromosome.</returns>
            
        </member>
        <member name="M:AForge.Genetic.GEPChromosome.ToStringNative">
            <summary>
            Get string representation of the chromosome. 
            </summary>
            
            <returns>Returns the chromosome in native linear representation.</returns>
            
            <remarks><para><note>The method is used for debugging mostly.</note></para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.GEPChromosome.Generate">
             <summary>
             Generate random chromosome value.
             </summary>
             
             <remarks><para>Regenerates chromosome's value using random number generator.</para>
             </remarks>
            
        </member>
        <member name="M:AForge.Genetic.GEPChromosome.GetTree">
            <summary>
            Get tree representation of the chromosome.
            </summary>
            
            <returns>Returns expression's tree represented by the chromosome.</returns>
            
            <remarks><para>The method builds expression's tree for the native linear representation
            of the GEP chromosome.</para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.GEPChromosome.CreateNew">
            <summary>
            Create new random chromosome with same parameters (factory method).
            </summary>
            
            <remarks><para>The method creates new chromosome of the same type, but randomly
            initialized. The method is useful as factory method for those classes, which work
            with chromosome's interface, but not with particular chromosome type.</para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.GEPChromosome.Clone">
             <summary>
             Clone the chromosome.
             </summary>
             
             <returns>Return's clone of the chromosome.</returns>
             
             <remarks><para>The method clones the chromosome returning the exact copy of it.</para>
             </remarks>
            
        </member>
        <member name="M:AForge.Genetic.GEPChromosome.Mutate">
            <summary>
            Mutation operator.
            </summary>
            
            <remarks><para>The method performs chromosome's mutation by calling on of the methods
            randomly: <see cref="M:AForge.Genetic.GEPChromosome.MutateGene"/>, <see cref="M:AForge.Genetic.GEPChromosome.TransposeIS"/>, <see cref="M:AForge.Genetic.GEPChromosome.TransposeRoot"/>.
            </para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.GEPChromosome.MutateGene">
            <summary>
            Usual gene mutation.
            </summary>
            
            <remarks><para>The method performs usual gene mutation by randomly changing randomly selected
            gene.</para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.GEPChromosome.TransposeIS">
            <summary>
            Transposition of IS elements (insertion sequence).
            </summary>
            
            <remarks><para>The method performs transposition of IS elements by copying randomly selected region
            of genes into chromosome's head (into randomly selected position). First gene of the chromosome's head 
            is not affected - can not be selected as target point.</para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.GEPChromosome.TransposeRoot">
             <summary>
             Root transposition.
             </summary>
            
             <remarks><para>The method performs root transposition of the GEP chromosome - inserting
             new root of the chromosome and shifting existing one. The method first of all randomly selects
             a function gene in chromosome's head - starting point of the sequence to put into chromosome's
             head. Then it randomly selects the length of the sequence making sure that the entire sequence is
             located within head. Once the starting point and the length of the sequence are known, it is copied
             into chromosome's head shifting existing elements in the head.</para>
             </remarks>
            
        </member>
        <member name="M:AForge.Genetic.GEPChromosome.Crossover(AForge.Genetic.IChromosome)">
            <summary>
            Crossover operator.
            </summary>
            
            <param name="pair">Pair chromosome to crossover with.</param>
            
            <remarks><para>The method performs one-point or two-point crossover selecting
            them randomly with equal probability.</para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.GEPChromosome.RecombinationOnePoint(AForge.Genetic.GEPChromosome)">
            <summary>
            One-point recombination (crossover).
            </summary>
            
            <param name="pair">Pair chromosome to crossover with.</param>
            
        </member>
        <member name="M:AForge.Genetic.GEPChromosome.RecombinationTwoPoint(AForge.Genetic.GEPChromosome)">
            <summary>
            Two point recombination (crossover).
            </summary>
            
            <param name="pair">Pair chromosome to crossover with.</param>
            
        </member>
        <member name="M:AForge.Genetic.GEPChromosome.Recombine(AForge.Genetic.IGPGene[],AForge.Genetic.IGPGene[],System.Int32,System.Int32)">
             <summary>
             Swap parts of two chromosomes.
             </summary>
             
             <param name="src1">First chromosome participating in genes' interchange.</param>
             <param name="src2">Second chromosome participating in genes' interchange.</param>
             <param name="point">Index of the first gene in the interchange sequence.</param>
             <param name="length">Length of the interchange sequence - number of genes
             to interchange.</param>
            
             <remarks><para>The method performs interchanging of genes between two chromosomes
             starting from the <paramref name="point"/> position.</para></remarks>
            
        </member>
        <member name="T:AForge.Genetic.GPTreeChromosome">
            <summary>
            Tree chromosome represents a tree of genes, which is is used for
            different tasks of Genetic Programming (GP).
            </summary>
            
            <remarks><para>This type of chromosome represents a tree, where each node
            is represented by <see cref="T:AForge.Genetic.GPTreeNode"/> containing <see cref="T:AForge.Genetic.IGPGene"/>.
            Depending on type of genes used to build the tree, it may represent different
            types of expressions aimed to solve different type of tasks. For example, a
            particular implementation of <see cref="T:AForge.Genetic.IGPGene"/> interface may represent
            simple algebraic operations and their arguments.
            </para>
            
            <para>See documentation to <see cref="T:AForge.Genetic.IGPGene"/> implementations for additional
            information about possible Genetic Programming trees.</para>
            </remarks>
            
        </member>
        <member name="F:AForge.Genetic.GPTreeChromosome.rand">
            <summary>
            Random generator used for chromosoms' generation.
            </summary>
        </member>
        <member name="M:AForge.Genetic.GPTreeChromosome.#ctor(AForge.Genetic.IGPGene)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Genetic.GPTreeChromosome"/> class.
            </summary>
            
            <param name="ancestor">A gene, which is used as generator for the genetic tree.</param>
            
            <remarks><para>This constructor creates a randomly generated genetic tree,
            which has all genes of the same type and properties as the specified <paramref name="ancestor"/>.
            </para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.GPTreeChromosome.#ctor(AForge.Genetic.GPTreeChromosome)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Genetic.GPTreeChromosome"/> class.
            </summary>
            
            <param name="source">Source genetic tree to clone from.</param>
            
            <remarks><para>This constructor creates new genetic tree as a copy of the
            specified <paramref name="source"/> tree.</para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.GPTreeChromosome.ToString">
             <summary>
             Get string representation of the chromosome by providing its expression in
             reverse polish notation (postfix notation).
             </summary>
             
             <returns>Returns string representation of the genetic tree.</returns>
             
             <remarks><para>The method returns string representation of the tree's root node
             (see <see cref="M:AForge.Genetic.GPTreeNode.ToString"/>).</para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.GPTreeChromosome.Generate">
             <summary>
             Generate random chromosome value.
             </summary>
             
             <remarks><para>Regenerates chromosome's value using random number generator.</para>
             </remarks>
            
        </member>
        <member name="M:AForge.Genetic.GPTreeChromosome.Generate(AForge.Genetic.GPTreeNode,System.Int32)">
            <summary>
            Generate chromosome's subtree of specified level.
            </summary>
            
            <param name="node">Sub tree's node to generate.</param>
            <param name="level">Sub tree's level to generate.</param>
            
        </member>
        <member name="M:AForge.Genetic.GPTreeChromosome.CreateNew">
            <summary>
            Create new random chromosome with same parameters (factory method).
            </summary>
            
            <remarks><para>The method creates new chromosome of the same type, but randomly
            initialized. The method is useful as factory method for those classes, which work
            with chromosome's interface, but not with particular chromosome type.</para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.GPTreeChromosome.Clone">
             <summary>
             Clone the chromosome.
             </summary>
             
             <returns>Return's clone of the chromosome.</returns>
             
             <remarks><para>The method clones the chromosome returning the exact copy of it.</para>
             </remarks>
            
        </member>
        <member name="M:AForge.Genetic.GPTreeChromosome.Mutate">
             <summary>
             Mutation operator.
             </summary>
             
             <remarks><para>The method performs chromosome's mutation by regenerating tree's
             randomly selected node.</para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.GPTreeChromosome.Crossover(AForge.Genetic.IChromosome)">
             <summary>
             Crossover operator.
             </summary>
             
             <param name="pair">Pair chromosome to crossover with.</param>
             
             <remarks><para>The method performs crossover between two chromosomes – interchanging
             randomly selected sub trees.</para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.GPTreeChromosome.RandomSwap(AForge.Genetic.GPTreeNode)">
            <summary>
            Crossover helper routine - selects random node of chromosomes tree and
            swaps it with specified node.
            </summary>
        </member>
        <member name="M:AForge.Genetic.GPTreeChromosome.Trim(AForge.Genetic.GPTreeNode,System.Int32)">
            <summary>
            Trim tree node, so its depth does not exceed specified level.
            </summary>
        </member>
        <member name="P:AForge.Genetic.GPTreeChromosome.MaxInitialLevel">
             <summary>
             Maximum initial level of genetic trees, [1, 25].
             </summary>
             
             <remarks><para>The property sets maximum possible initial depth of new
             genetic programming tree. For example, if it is set to 1, then largest initial
             tree may have a root and one level of children.</para>
             
             <para>Default value is set to <b>3</b>.</para>
             </remarks>
            
        </member>
        <member name="P:AForge.Genetic.GPTreeChromosome.MaxLevel">
             <summary>
             Maximum level of genetic trees, [1, 50].
             </summary>
             
             <remarks><para>The property sets maximum possible depth of 
             genetic programming tree, which may be created with mutation and crossover operators.
             This property guarantees that genetic programmin tree will never have
             higher depth, than the specified value.</para>
             
             <para>Default value is set to <b>5</b>.</para>
             </remarks>
            
        </member>
        <member name="T:AForge.Genetic.GPTreeNode">
            <summary>
            Represents tree node of genetic programming tree.
            </summary>
            
            <remarks><para>In genetic programming a chromosome is represented by a tree, which
            is represented by <see cref="T:AForge.Genetic.GPTreeChromosome"/> class. The <see cref="T:AForge.Genetic.GPTreeNode"/>
            class represents single node of such genetic programming tree.</para>
            
            <para>Each node may or may not have children. This means that particular node of a genetic
            programming tree may represent its sub tree or even entire tree.</para>
            </remarks>
            
        </member>
        <member name="F:AForge.Genetic.GPTreeNode.Gene">
            <summary>
            Gene represented by the chromosome.
            </summary>
        </member>
        <member name="F:AForge.Genetic.GPTreeNode.Children">
            <summary>
            List of node's children.
            </summary>
        </member>
        <member name="M:AForge.Genetic.GPTreeNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Genetic.GPTreeNode"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Genetic.GPTreeNode.#ctor(AForge.Genetic.IGPGene)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Genetic.GPTreeNode"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Genetic.GPTreeNode.ToString">
            <summary>
            Get string representation of the node.
            </summary>
            
            <returns>Returns string representation of the node.</returns>
            
            <remarks><para>String representation of the node lists all node's children and
            then the node itself. Such node's string representations equals to
            its reverse polish notation.</para>
            
            <para>For example, if nodes value is '+' and its children are '3' and '5', then
            nodes string representation is "3 5 +".</para>
            </remarks>
            
        </member>
        <member name="M:AForge.Genetic.GPTreeNode.Clone">
            <summary>
            Clone the tree node.
            </summary>
            
            <returns>Returns exact clone of the node.</returns>
            
        </member>
        <member name="T:AForge.Genetic.GPGeneType">
            <summary>
            Types of genes in Genetic Programming.
            </summary>
        </member>
        <member name="F:AForge.Genetic.GPGeneType.Function">
            <summary>
            Function gene - represents function to be executed.
            </summary>
        </member>
        <member name="F:AForge.Genetic.GPGeneType.Argument">
            <summary>
            Argument gene - represents argument of function.
            </summary>
        </member>
        <member name="T:AForge.Genetic.SimpleGeneFunction">
             <summary>
             Genetic programming gene, which represents simple arithmetic functions and arguments.
             </summary>
            
             <remarks><para>Simple gene function may represent an arithmetic function (+, -, *, /) or
             an argument to function. This class is used by Genetic Programming (or Gene Expression Programming)
             chromosomes to build arbitrary expressions with help of genetic operators.</para>
             </remarks>
            
        </member>
        <member name="F:AForge.Genetic.SimpleGeneFunction.FunctionsCount">
            <summary>
            Number of different functions supported by the class.
            </summary>
        </member>
        <member name="F:AForge.Genetic.SimpleGeneFunction.rand">
            <summary>
            Random number generator for chromosoms generation.
            </summary>
        </member>
        <member name="M:AForge.Genetic.SimpleGeneFunction.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Genetic.SimpleGeneFunction"/> class.
            </summary>
            
            <param name="variablesCount">Total amount of variables in the task which is supposed
            to be solved.</param>
            
            <remarks><para>The constructor creates randomly initialized gene with random type
            and value by calling <see cref="M:AForge.Genetic.SimpleGeneFunction.Generate"/> method.</para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.SimpleGeneFunction.#ctor(System.Int32,AForge.Genetic.GPGeneType)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Genetic.SimpleGeneFunction"/> class.
            </summary>
            
            <param name="variablesCount">Total amount of variables in the task which is supposed
            to be solved.</param>
            <param name="type">Gene type to set.</param>
            
            <remarks><para>The constructor creates randomly initialized gene with random
            value and preset gene type.</para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.SimpleGeneFunction.ToString">
            <summary>
            Get string representation of the gene.
            </summary>
            
            <returns>Returns string representation of the gene.</returns>
            
        </member>
        <member name="M:AForge.Genetic.SimpleGeneFunction.Clone">
            <summary>
            Clone the gene.
            </summary>
            
            <remarks><para>The method clones the chromosome returning the exact copy of it.</para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.SimpleGeneFunction.Generate">
            <summary>
            Randomize gene with random type and value.
            </summary>
            
            <remarks><para>The method randomizes the gene, setting its type and value randomly.</para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.SimpleGeneFunction.Generate(AForge.Genetic.GPGeneType)">
             <summary>
             Randomize gene with random value.
             </summary>
             
             <param name="type">Gene type to set.</param>
             
             <remarks><para>The method randomizes a gene, setting its value randomly, but type
             is set to the specified one.</para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.SimpleGeneFunction.CreateNew">
            <summary>
            Creates new gene with random type and value.
            </summary>
            
            <remarks><para>The method creates new randomly initialized gene .
            The method is useful as factory method for those classes, which work with gene's interface,
            but not with particular gene class.</para>
            </remarks>
            
        </member>
        <member name="M:AForge.Genetic.SimpleGeneFunction.CreateNew(AForge.Genetic.GPGeneType)">
            <summary>
            Creates new gene with certain type and random value.
            </summary>
            
            <param name="type">Gene type to create.</param>
            
            <remarks><para>The method creates new gene with specified type, but random value.
            The method is useful as factory method for those classes, which work with gene's interface,
            but not with particular gene class.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Genetic.SimpleGeneFunction.GeneType">
            <summary>
            Gene type.
            </summary>
            
            <remarks><para>The property represents type of a gene - function, argument, etc.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Genetic.SimpleGeneFunction.ArgumentsCount">
            <summary>
            Arguments count.
            </summary>
            
            <remarks><para>Arguments count of a particular function gene.</para></remarks>
            
        </member>
        <member name="P:AForge.Genetic.SimpleGeneFunction.MaxArgumentsCount">
            <summary>
            Maximum arguments count.
            </summary>
            
            <remarks><para>Maximum arguments count of a function gene supported by the class.
            The property may be used by chromosomes' classes to allocate correctly memory for
            functions' arguments, for example.</para></remarks>
            
        </member>
        <member name="T:AForge.Genetic.SimpleGeneFunction.Functions">
            <summary>
            Enumeration of supported functions.
            </summary>
        </member>
        <member name="F:AForge.Genetic.SimpleGeneFunction.Functions.Add">
            <summary>
            Addition operator.
            </summary>
        </member>
        <member name="F:AForge.Genetic.SimpleGeneFunction.Functions.Subtract">
            <summary>
            Suntraction operator.
            </summary>
        </member>
        <member name="F:AForge.Genetic.SimpleGeneFunction.Functions.Multiply">
            <summary>
            Multiplication operator.
            </summary>
        </member>
        <member name="F:AForge.Genetic.SimpleGeneFunction.Functions.Divide">
            <summary>
            Division operator.
            </summary>
        </member>
        <member name="T:AForge.Genetic.PermutationChromosome">
            <summary>
            Permutation chromosome.
            </summary>
            
            <remarks><para>Permutation chromosome is based on short array chromosome,
            but has two features:</para>
            <list type="bullet">
            <item>all genes are unique within chromosome, i.e. there are no two genes
            with the same value;</item>
            <item>maximum value of each gene is equal to chromosome length minus 1.</item>
            </list>
            </remarks>
            
        </member>
        <member name="T:AForge.Genetic.ShortArrayChromosome">
            <summary>
            Short array chromosome.
            </summary>
            
            <remarks><para>Short array chromosome represents array of unsigned short values.
            Array length is in the range of [2, 65536].
            </para></remarks>
        </member>
        <member name="F:AForge.Genetic.ShortArrayChromosome.MaxLength">
            <summary>
            Chromosome's maximum length.
            </summary>
            
            <remarks><para>Maxim chromosome's length in array elements.</para></remarks>
            
        </member>
        <member name="F:AForge.Genetic.ShortArrayChromosome.length">
            <summary>
            Chromosome's length in number of elements.
            </summary>
        </member>
        <member name="F:AForge.Genetic.ShortArrayChromosome.maxValue">
            <summary>
            Maximum value of chromosome's gene (element).
            </summary>
        </member>
        <member name="F:AForge.Genetic.ShortArrayChromosome.val">
            <summary>
            Chromosome's value.
            </summary>
        </member>
        <member name="F:AForge.Genetic.ShortArrayChromosome.rand">
            <summary>
            Random number generator for chromosoms generation, crossover, mutation, etc.
            </summary>
        </member>
        <member name="M:AForge.Genetic.ShortArrayChromosome.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Genetic.ShortArrayChromosome"/> class.
            </summary>
            
            <param name="length">Chromosome's length in array elements, [2, <see cref="F:AForge.Genetic.ShortArrayChromosome.MaxLength"/>].</param>
            
            <remarks>This constructor initializes chromosome setting genes' maximum value to
            maximum posible value of <see langword="ushort"/> type.</remarks>
            
        </member>
        <member name="M:AForge.Genetic.ShortArrayChromosome.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Genetic.ShortArrayChromosome"/> class.
            </summary>
            
            <param name="length">Chromosome's length in array elements, [2, <see cref="F:AForge.Genetic.ShortArrayChromosome.MaxLength"/>].</param>
            <param name="maxValue">Maximum value of chromosome's gene (array element).</param>
            
        </member>
        <member name="M:AForge.Genetic.ShortArrayChromosome.#ctor(AForge.Genetic.ShortArrayChromosome)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Genetic.ShortArrayChromosome"/> class.
            </summary>
            
            <param name="source">Source chromosome to copy.</param>
            
            <remarks><para>This is a copy constructor, which creates the exact copy
            of specified chromosome.</para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.ShortArrayChromosome.ToString">
             <summary>
             Get string representation of the chromosome.
             </summary>
             
             <returns>Returns string representation of the chromosome.</returns>
            
        </member>
        <member name="M:AForge.Genetic.ShortArrayChromosome.Generate">
            <summary>
            Generate random chromosome value.
            </summary>
            
            <remarks><para>Regenerates chromosome's value using random number generator.</para>
            </remarks>
            
        </member>
        <member name="M:AForge.Genetic.ShortArrayChromosome.CreateNew">
             <summary>
             Create new random chromosome with same parameters (factory method).
             </summary>
             
             <remarks><para>The method creates new chromosome of the same type, but randomly
             initialized. The method is useful as factory method for those classes, which work
             with chromosome's interface, but not with particular chromosome type.</para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.ShortArrayChromosome.Clone">
             <summary>
             Clone the chromosome.
             </summary>
             
             <returns>Return's clone of the chromosome.</returns>
             
             <remarks><para>The method clones the chromosome returning the exact copy of it.</para>
             </remarks>
            
        </member>
        <member name="M:AForge.Genetic.ShortArrayChromosome.Mutate">
            <summary>
            Mutation operator.
            </summary>
            
            <remarks><para>The method performs chromosome's mutation, changing randomly
            one of its genes (array elements).</para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.ShortArrayChromosome.Crossover(AForge.Genetic.IChromosome)">
             <summary>
             Crossover operator.
             </summary>
             
             <param name="pair">Pair chromosome to crossover with.</param>
             
             <remarks><para>The method performs crossover between two chromosomes – interchanging
             range of genes (array elements) between these chromosomes.</para></remarks>
            
        </member>
        <member name="P:AForge.Genetic.ShortArrayChromosome.Length">
             <summary>
             Chromosome's length.
             </summary>
             
             <remarks><para>Length of the chromosome in array elements.</para></remarks>
            
        </member>
        <member name="P:AForge.Genetic.ShortArrayChromosome.Value">
             <summary>
             Chromosome's value.
             </summary>
             
             <remarks><para>Current value of the chromosome.</para></remarks>
            
        </member>
        <member name="P:AForge.Genetic.ShortArrayChromosome.MaxValue">
            <summary>
            Max possible value of single chromosomes element - gene.
            </summary>
            
            <remarks><para>Maximum possible numerical value, which may be represented
            by single chromosome's gene (array element).</para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.PermutationChromosome.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Genetic.PermutationChromosome"/> class.
            </summary>
        </member>
        <member name="M:AForge.Genetic.PermutationChromosome.#ctor(AForge.Genetic.PermutationChromosome)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Genetic.PermutationChromosome"/> class.
            </summary>
            
            <param name="source">Source chromosome to copy.</param>
            
            <remarks><para>This is a copy constructor, which creates the exact copy
            of specified chromosome.</para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.PermutationChromosome.Generate">
             <summary>
             Generate random chromosome value.
             </summary>
             
             <remarks><para>Regenerates chromosome's value using random number generator.</para>
             </remarks>
            
        </member>
        <member name="M:AForge.Genetic.PermutationChromosome.CreateNew">
             <summary>
             Create new random chromosome with same parameters (factory method).
             </summary>
             
             <remarks><para>The method creates new chromosome of the same type, but randomly
             initialized. The method is useful as factory method for those classes, which work
             with chromosome's interface, but not with particular chromosome type.</para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.PermutationChromosome.Clone">
             <summary>
             Clone the chromosome.
             </summary>
             
             <returns>Return's clone of the chromosome.</returns>
             
             <remarks><para>The method clones the chromosome returning the exact copy of it.</para>
             </remarks>
            
        </member>
        <member name="M:AForge.Genetic.PermutationChromosome.Mutate">
             <summary>
             Mutation operator.
             </summary>
             
             <remarks><para>The method performs chromosome's mutation, swapping two randomly
             chosen genes (array elements).</para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.PermutationChromosome.Crossover(AForge.Genetic.IChromosome)">
             <summary>
             Crossover operator.
             </summary>
             
             <param name="pair">Pair chromosome to crossover with.</param>
             
             <remarks><para>The method performs crossover between two chromosomes – interchanging
             some parts between these chromosomes.</para></remarks>
            
        </member>
        <member name="T:AForge.Genetic.IFitnessFunction">
            <summary>
            Fitness function interface.
            </summary>
            
            <remarks>The interface should be implemented by all fitness function
            classes, which are supposed to be used for calculation of chromosomes
            fitness values. All fitness functions should return positive (<b>greater
            then zero</b>) value, which indicates how good is the evaluated chromosome - 
            the greater the value, the better the chromosome.
            </remarks>
        </member>
        <member name="M:AForge.Genetic.IFitnessFunction.Evaluate(AForge.Genetic.IChromosome)">
             <summary>
             Evaluates chromosome.
             </summary>
             
             <param name="chromosome">Chromosome to evaluate.</param>
             
             <returns>Returns chromosome's fitness value.</returns>
            
             <remarks>The method calculates fitness value of the specified
             chromosome.</remarks>
            
        </member>
        <member name="T:AForge.Genetic.OptimizationFunction1D">
             <summary>Base class for one dimensional function optimizations.</summary>
             
             <remarks><para>The class is aimed to be used for one dimensional function
             optimization problems. It implements all methods of <see cref="T:AForge.Genetic.IFitnessFunction"/>
             interface and requires overriding only one method -
             <see cref="M:AForge.Genetic.OptimizationFunction1D.OptimizationFunction(System.Double)"/>, which represents the
             function to optimize.</para>
             
             <para><note>The optimization function should be greater
             than 0 on the specified optimization range.</note></para>
             
             <para>The class works only with binary chromosomes (<see cref="T:AForge.Genetic.BinaryChromosome"/>).</para>
             
             <para>Sample usage:</para>
             <code>
             // define optimization function
             public class UserFunction : OptimizationFunction1D
             {
            	    public UserFunction( ) :
                     base( new Range( 0, 255 ) ) { }
            
             	public override double OptimizationFunction( double x )
            		{
            			return Math.Cos( x / 23 ) * Math.Sin( x / 50 ) + 2;
            		}
             }
             ...
             // create genetic population
             Population population = new Population( 40,
            		new BinaryChromosome( 32 ),
            		new UserFunction( ),
            		new EliteSelection( ) );
            	
             while ( true )
             {
            	    // run one epoch of the population
                 population.RunEpoch( );
                 // ...
             }
             </code>
             </remarks>
            
        </member>
        <member name="M:AForge.Genetic.OptimizationFunction1D.#ctor(AForge.Range)">
             <summary>
             Initializes a new instance of the <see cref="T:AForge.Genetic.OptimizationFunction1D"/> class.
             </summary>
            
             <param name="range">Specifies range for optimization.</param>
            
        </member>
        <member name="M:AForge.Genetic.OptimizationFunction1D.Evaluate(AForge.Genetic.IChromosome)">
             <summary>
             Evaluates chromosome.
             </summary>
             
             <param name="chromosome">Chromosome to evaluate.</param>
             
             <returns>Returns chromosome's fitness value.</returns>
            
             <remarks>The method calculates fitness value of the specified
             chromosome.</remarks>
            
        </member>
        <member name="M:AForge.Genetic.OptimizationFunction1D.Translate(AForge.Genetic.IChromosome)">
             <summary>
             Translates genotype to phenotype.
             </summary>
             
             <param name="chromosome">Chromosome, which genoteype should be
             translated to phenotype.</param>
            
             <returns>Returns chromosome's fenotype - the actual solution
             encoded by the chromosome.</returns> 
             
             <remarks>The method returns double value, which represents function's
             input point encoded by the specified chromosome.</remarks>
            
        </member>
        <member name="M:AForge.Genetic.OptimizationFunction1D.OptimizationFunction(System.Double)">
             <summary>
             Function to optimize.
             </summary>
            
             <param name="x">Function's input value.</param>
             
             <returns>Returns function output value.</returns>
             
             <remarks>The method should be overloaded by inherited class to
             specify the optimization function.</remarks>
            
        </member>
        <member name="P:AForge.Genetic.OptimizationFunction1D.Range">
            <summary>
            Optimization range.
            </summary>
            
            <remarks>Defines function's input range. The function's extreme point will
            be searched in this range only.
            </remarks>
            
        </member>
        <member name="P:AForge.Genetic.OptimizationFunction1D.Mode">
             <summary>
             Optimization mode.
             </summary>
            
             <remarks>Defines optimization mode - what kind of extreme point to search.</remarks> 
            
        </member>
        <member name="T:AForge.Genetic.OptimizationFunction1D.Modes">
             <summary>
             Optimization modes.
             </summary>
            
             <remarks>The enumeration defines optimization modes for
             the one dimensional function optimization.</remarks> 
            
        </member>
        <member name="F:AForge.Genetic.OptimizationFunction1D.Modes.Maximization">
            <summary>
            Search for function's maximum value.
            </summary>
        </member>
        <member name="F:AForge.Genetic.OptimizationFunction1D.Modes.Minimization">
            <summary>
            Search for function's minimum value.
            </summary>
        </member>
        <member name="T:AForge.Genetic.OptimizationFunction2D">
             <summary>Base class for two dimenstional function optimization.</summary>
            
             <remarks><para>The class is aimed to be used for two dimensional function
             optimization problems. It implements all methods of <see cref="T:AForge.Genetic.IFitnessFunction"/>
             interface and requires overriding only one method -
             <see cref="M:AForge.Genetic.OptimizationFunction2D.OptimizationFunction(System.Double,System.Double)"/>, which represents the
             function to optimize.</para>
             
             <para><note>The optimization function should be greater
             than 0 on the specified optimization range.</note></para>
             
             <para>The class works only with binary chromosomes (<see cref="T:AForge.Genetic.BinaryChromosome"/>).</para>
             
             <para>Sample usage:</para>
             <code>
             // define optimization function
             public class UserFunction : OptimizationFunction2D
             {
            		public UserFunction( ) :
            			base( new Range( -4, 4 ), new Range( -4, 4 ) ) { }
            
             	public override double OptimizationFunction( double x, double y )
            		{
            			return ( Math.Cos( y ) * x * y ) / ( 2 - Math.Sin( x ) );
            		}
             }
             ...
             // create genetic population
             Population population = new Population( 40,
            		new BinaryChromosome( 32 ),
            		new UserFunction( ),
            		new EliteSelection( ) );
            	// run one epoch of the population
            	population.RunEpoch( );
             </code>
             </remarks>
            
        </member>
        <member name="M:AForge.Genetic.OptimizationFunction2D.#ctor(AForge.Range,AForge.Range)">
             <summary>
             Initializes a new instance of the <see cref="T:AForge.Genetic.OptimizationFunction2D"/> class.
             </summary>
            
             <param name="rangeX">Specifies X variable's range.</param>
             <param name="rangeY">Specifies Y variable's range.</param>
            
        </member>
        <member name="M:AForge.Genetic.OptimizationFunction2D.Evaluate(AForge.Genetic.IChromosome)">
             <summary>
             Evaluates chromosome.
             </summary>
             
             <param name="chromosome">Chromosome to evaluate.</param>
             
             <returns>Returns chromosome's fitness value.</returns>
            
             <remarks>The method calculates fitness value of the specified
             chromosome.</remarks>
            
        </member>
        <member name="M:AForge.Genetic.OptimizationFunction2D.Translate(AForge.Genetic.IChromosome)">
             <summary>
             Translates genotype to phenotype 
             </summary>
             
             <param name="chromosome">Chromosome, which genoteype should be
             translated to phenotype</param>
            
             <returns>Returns chromosome's fenotype - the actual solution
             encoded by the chromosome</returns> 
             
             <remarks>The method returns array of two double values, which
             represent function's input point (X and Y) encoded by the specified
             chromosome.</remarks>
            
        </member>
        <member name="M:AForge.Genetic.OptimizationFunction2D.OptimizationFunction(System.Double,System.Double)">
             <summary>
             Function to optimize.
             </summary>
            
             <param name="x">Function X input value.</param>
             <param name="y">Function Y input value.</param>
             
             <returns>Returns function output value.</returns>
             
             <remarks>The method should be overloaded by inherited class to
             specify the optimization function.</remarks>
            
        </member>
        <member name="P:AForge.Genetic.OptimizationFunction2D.RangeX">
            <summary>
            X variable's optimization range.
            </summary>
            
            <remarks>Defines function's X range. The function's extreme will
            be searched in this range only.
            </remarks>
            
        </member>
        <member name="P:AForge.Genetic.OptimizationFunction2D.RangeY">
            <summary>
            Y variable's optimization range.
            </summary>
            
            <remarks>Defines function's Y range. The function's extreme will
            be searched in this range only.
            </remarks>
            
        </member>
        <member name="P:AForge.Genetic.OptimizationFunction2D.Mode">
             <summary>
             Optimization mode.
             </summary>
            
             <remarks>Defines optimization mode - what kind of extreme to search.</remarks> 
            
        </member>
        <member name="T:AForge.Genetic.OptimizationFunction2D.Modes">
             <summary>
             Optimization modes.
             </summary>
            
             <remarks>The enumeration defines optimization modes for
             the two dimensional function optimization.</remarks> 
            
        </member>
        <member name="F:AForge.Genetic.OptimizationFunction2D.Modes.Maximization">
            <summary>
            Search for function's maximum value.
            </summary>
        </member>
        <member name="F:AForge.Genetic.OptimizationFunction2D.Modes.Minimization">
            <summary>
            Search for function's minimum value.
            </summary>
        </member>
        <member name="T:AForge.Genetic.SymbolicRegressionFitness">
            <summary>
            Fitness function for symbolic regression (function approximation) problem
            </summary>
            
            <remarks><para>The fitness function calculates fitness value of
            <see cref="T:AForge.Genetic.GPTreeChromosome">GP</see> and <see cref="T:AForge.Genetic.GEPChromosome">GEP</see>
            chromosomes with the aim of solving symbolic regression problem. The fitness function's
            value is computed as:
            <code>100.0 / ( error + 1 )</code>
            where <b>error</b> equals to the sum of absolute differences between function values (computed using
            the function encoded by chromosome) and input values (function to be approximated).</para>
            
            <para>Sample usage:</para>
            <code>
            // constants
            double[] constants = new double[5] { 1, 2, 3, 5, 7 };
            // function to be approximated
            double[,] data = new double[5, 2] {
            	{1, 1}, {2, 3}, {3, 6}, {4, 10}, {5, 15} };
            // create population
            Population population = new Population( 100,
            	new GPTreeChromosome( new SimpleGeneFunction( 1 + constants.Length ) ),
            	new SymbolicRegressionFitness( data, constants ),
            	new EliteSelection( ) );
            // run one epoch of the population
            population.RunEpoch( );
            </code>
            </remarks>
            
        </member>
        <member name="M:AForge.Genetic.SymbolicRegressionFitness.#ctor(System.Double[0:,0:],System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Genetic.SymbolicRegressionFitness"/> class.
            </summary>
            
            <param name="data">Function to be approximated.</param>
            <param name="constants">Array of constants to be used as additional
            paramters for genetic expression.</param>
            
            <remarks><para>The <paramref name="data"/> parameter defines the function to be approximated and
            represents a two dimensional array of (x, y) points.</para>
            
            <para>The <paramref name="constants"/> parameter is an array of constants, which can be used as
            additional variables for a genetic expression. The actual amount of variables for
            genetic expression equals to the amount of constants plus one - the <b>x</b> variable.</para>
            </remarks>
            
        </member>
        <member name="M:AForge.Genetic.SymbolicRegressionFitness.Evaluate(AForge.Genetic.IChromosome)">
             <summary>
             Evaluates chromosome.
             </summary>
             
             <param name="chromosome">Chromosome to evaluate.</param>
             
             <returns>Returns chromosome's fitness value.</returns>
            
             <remarks>The method calculates fitness value of the specified
             chromosome.</remarks>
            
        </member>
        <member name="M:AForge.Genetic.SymbolicRegressionFitness.Translate(AForge.Genetic.IChromosome)">
             <summary>
             Translates genotype to phenotype .
             </summary>
             
             <param name="chromosome">Chromosome, which genoteype should be
             translated to phenotype.</param>
            
             <returns>Returns chromosome's fenotype - the actual solution
             encoded by the chromosome.</returns> 
             
             <remarks>The method returns string value, which represents approximation
             expression written in polish postfix notation.</remarks>
            
        </member>
        <member name="T:AForge.Genetic.TimeSeriesPredictionFitness">
            <summary>
            Fitness function for times series prediction problem
            </summary>
            
            <remarks><para>The fitness function calculates fitness value of
            <see cref="T:AForge.Genetic.GPTreeChromosome">GP</see> and <see cref="T:AForge.Genetic.GEPChromosome">GEP</see>
            chromosomes with the aim of solving times series prediction problem using
            sliding window method. The fitness function's value is computed as:
            <code>100.0 / ( error + 1 )</code>
            where <b>error</b> equals to the sum of absolute differences between predicted value
            and actual future value.</para>
            
            <para>Sample usage:</para>
            <code>
            // number of points from the past used to predict new one
            int windowSize = 5;
            // time series to predict
            double[] data = new double[13] { 1, 2, 4, 7, 11, 16, 22, 29, 37, 46, 56, 67, 79 };
            // constants
            double[] constants = new double[10] { 1, 2, 3, 5, 7, 11, 13, 17, 19, 23 };
            // create population
            Population population = new Population( 100,
            new GPTreeChromosome( new SimpleGeneFunction( windowSize + constants.Length ) ),
            new TimeSeriesPredictionFitness( data, windowSize, 1, constants ),
            new EliteSelection( ) );
            // run one epoch of the population
            population.RunEpoch( );
            </code>
            </remarks>
            
        </member>
        <member name="M:AForge.Genetic.TimeSeriesPredictionFitness.#ctor(System.Double[],System.Int32,System.Int32,System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Genetic.TimeSeriesPredictionFitness"/> class.
            </summary>
            
            <param name="data">Time series to be predicted.</param>
            <param name="windowSize">Window size - number of past samples used
            to predict future value.</param>
            <param name="predictionSize">Prediction size - number of values to be predicted. These
            values are excluded from training set.</param>
            <param name="constants">Array of constants to be used as additional
            paramters for genetic expression.</param>
            
            <remarks><para>The <paramref name="data"/> parameter is a one dimensional array, which defines times
            series to predict. The amount of learning samples is equal to the number of samples
            in the provided time series, minus window size, minus prediction size.</para>
            
            <para>The <paramref name="predictionSize"/> parameter specifies the amount of samples, which should
            be excluded from training set. This set of samples may be used for future verification
            of the prediction model.</para>
            
            <para>The <paramref name="constants"/> parameter is an array of constants, which can be used as
            additional variables for a genetic expression. The actual amount of variables for
            genetic expression equals to the amount of constants plus the window size.</para>
            </remarks>
            
        </member>
        <member name="M:AForge.Genetic.TimeSeriesPredictionFitness.Evaluate(AForge.Genetic.IChromosome)">
             <summary>
             Evaluates chromosome.
             </summary>
             
             <param name="chromosome">Chromosome to evaluate.</param>
             
             <returns>Returns chromosome's fitness value.</returns>
            
             <remarks>The method calculates fitness value of the specified
             chromosome.</remarks>
            
        </member>
        <member name="M:AForge.Genetic.TimeSeriesPredictionFitness.Translate(AForge.Genetic.IChromosome)">
             <summary>
             Translates genotype to phenotype.
             </summary>
             
             <param name="chromosome">Chromosome, which genoteype should be
             translated to phenotype.</param>
            
             <returns>Returns chromosome's fenotype - the actual solution
             encoded by the chromosome.</returns> 
             
             <remarks><para>The method returns string value, which represents prediction
             expression written in polish postfix notation.</para>
             
             <para>The interpretation of the prediction expression is very simple. For example, let's
             take a look at sample expression, which was received with window size equal to 5:
             <code lang="none">$0 $1 - $5 / $2 *</code>
             The above expression in postfix polish notation should be interpreted as a next expression:
             <code lang="none">( ( x[t - 1] - x[t - 2] ) / const1 ) * x[t - 3]</code>
             </para>
             </remarks>
            
        </member>
        <member name="T:AForge.Genetic.Population">
            <summary>
            Population of chromosomes.
            </summary>
            
            <remarks><para>The class represents population - collection of individuals (chromosomes)
            and provides functionality for common population's life cycle - population growing
            with help of genetic operators and selection of chromosomes to new generation
            with help of selection algorithm. The class may work with any type of chromosomes
            implementing <see cref="T:AForge.Genetic.IChromosome"/> interface, use any type of fitness functions
            implementing <see cref="T:AForge.Genetic.IFitnessFunction"/> interface and use any type of selection
            algorithms implementing <see cref="T:AForge.Genetic.ISelectionMethod"/> interface.</para>
            </remarks>
            
        </member>
        <member name="M:AForge.Genetic.Population.#ctor(System.Int32,AForge.Genetic.IChromosome,AForge.Genetic.IFitnessFunction,AForge.Genetic.ISelectionMethod)">
             <summary>
             Initializes a new instance of the <see cref="T:AForge.Genetic.Population"/> class.
             </summary>
             
             <param name="size">Initial size of population.</param>
             <param name="ancestor">Ancestor chromosome to use for population creatioin.</param>
             <param name="fitnessFunction">Fitness function to use for calculating
             chromosome's fitness values.</param>
             <param name="selectionMethod">Selection algorithm to use for selection
             chromosome's to new generation.</param>
             
             <remarks>Creates new population of specified size. The specified ancestor
             becomes first member of the population and is used to create other members
             with same parameters, which were used for ancestor's creation.</remarks>
             
             <exception cref="T:System.ArgumentException">Too small population's size was specified. The
             exception is thrown in the case if <paramref name="size"/> is smaller than 2.</exception>
            
        </member>
        <member name="M:AForge.Genetic.Population.Regenerate">
            <summary>
            Regenerate population.
            </summary>
            
            <remarks>The method regenerates population filling it with random chromosomes.</remarks>
            
        </member>
        <member name="M:AForge.Genetic.Population.Crossover">
            <summary>
            Do crossover in the population.
            </summary>
            
            <remarks>The method walks through the population and performs crossover operator
            taking each two chromosomes in the order of their presence in the population.
            The total amount of paired chromosomes is determined by
            <see cref="P:AForge.Genetic.Population.CrossoverRate">crossover rate</see>.</remarks>
            
        </member>
        <member name="M:AForge.Genetic.Population.Mutate">
            <summary>
            Do mutation in the population.
            </summary>
            
            <remarks>The method walks through the population and performs mutation operator
            taking each chromosome one by one. The total amount of mutated chromosomes is
            determined by <see cref="P:AForge.Genetic.Population.MutationRate">mutation rate</see>.</remarks>
            
        </member>
        <member name="M:AForge.Genetic.Population.Selection">
            <summary>
            Do selection.
            </summary>
            
            <remarks>The method applies selection operator to the current population. Using
            specified selection algorithm it selects members to the new generation from current
            generates and adds certain amount of random members, if is required
            (see <see cref="P:AForge.Genetic.Population.RandomSelectionPortion"/>).</remarks>
            
        </member>
        <member name="M:AForge.Genetic.Population.RunEpoch">
            <summary>
            Run one epoch of the population.
            </summary>
            
            <remarks>The method runs one epoch of the population, doing crossover, mutation
            and selection by calling <see cref="M:AForge.Genetic.Population.Crossover"/>, <see cref="M:AForge.Genetic.Population.Mutate"/> and
            <see cref="M:AForge.Genetic.Population.Selection"/>.</remarks>
            
        </member>
        <member name="M:AForge.Genetic.Population.Shuffle">
            <summary>
            Shuffle randomly current population.
            </summary>
            
            <remarks><para>Population shuffling may be useful in cases when selection
            operator results in not random order of chromosomes (for example, after elite
            selection population may be ordered in ascending/descending order).</para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.Population.AddChromosome(AForge.Genetic.IChromosome)">
            <summary>
            Add chromosome to the population.
            </summary>
            
            <param name="chromosome">Chromosome to add to the population.</param>
            
            <remarks><para>The method adds specified chromosome to the current population.
            Manual adding of chromosome maybe useful, when it is required to add some initialized
            chromosomes instead of random.</para>
            
            <para><note>Adding chromosome manually should be done very carefully, since it
            may break the population. The manually added chromosome must have the same type
            and initialization parameters as the ancestor passed to constructor.</note></para>
            </remarks>
            
        </member>
        <member name="M:AForge.Genetic.Population.Migrate(AForge.Genetic.Population,System.Int32,AForge.Genetic.ISelectionMethod)">
            <summary>
            Perform migration between two populations.
            </summary>
            
            <param name="anotherPopulation">Population to do migration with.</param>
            <param name="numberOfMigrants">Number of chromosomes from each population to migrate.</param>
            <param name="migrantsSelector">Selection algorithm used to select chromosomes to migrate.</param>
            
            <remarks><para>The method performs migration between two populations - current and the
            <paramref name="anotherPopulation">specified one</paramref>. During migration
            <paramref name="numberOfMigrants">specified number</paramref> of chromosomes is choosen from
            each population using <paramref name="migrantsSelector">specified selection algorithms</paramref>
            and put into another population replacing worst members there.</para></remarks>
            
        </member>
        <member name="M:AForge.Genetic.Population.Resize(System.Int32)">
            <summary>
            Resize population to the new specified size.
            </summary>
            
            <param name="newPopulationSize">New size of population.</param>
            
            <remarks><para>The method does resizing of population. In the case if population
            should grow, it just adds missing number of random members. In the case if
            population should get smaller, the <see cref="P:AForge.Genetic.Population.SelectionMethod">population's
            selection method</see> is used to reduce the population.</para></remarks>
            
            <exception cref="T:System.ArgumentException">Too small population's size was specified. The
            exception is thrown in the case if <paramref name="newPopulationSize"/> is smaller than 2.</exception>
            
        </member>
        <member name="M:AForge.Genetic.Population.Resize(System.Int32,AForge.Genetic.ISelectionMethod)">
             <summary>
             Resize population to the new specified size.
             </summary>
             
             <param name="newPopulationSize">New size of population.</param>
             <param name="membersSelector">Selection algorithm to use in the case
             if population should get smaller.</param>
             
             <remarks><para>The method does resizing of population. In the case if population
             should grow, it just adds missing number of random members. In the case if
             population should get smaller, the specified selection method is used to
             reduce the population.</para></remarks>
             
             <exception cref="T:System.ArgumentException">Too small population's size was specified. The
             exception is thrown in the case if <paramref name="newPopulationSize"/> is smaller than 2.</exception>
            
        </member>
        <member name="P:AForge.Genetic.Population.CrossoverRate">
            <summary>
            Crossover rate, [0.1, 1].
            </summary>
            
            <remarks><para>The value determines the amount of chromosomes which participate
            in crossover.</para>
            
            <para>Default value is set to <b>0.75</b>.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Genetic.Population.MutationRate">
            <summary>
            Mutation rate, [0.1, 1].
            </summary>
            
            <remarks><para>The value determines the amount of chromosomes which participate
            in mutation.</para>
            
            <para>Defaul value is set to <b>0.1</b>.</para></remarks>
            
        </member>
        <member name="P:AForge.Genetic.Population.RandomSelectionPortion">
            <summary>
            Random selection portion, [0, 0.9].
            </summary>
            
            <remarks><para>The value determines the amount of chromosomes which will be
            randomly generated for the new population. The property controls the amount
            of chromosomes, which are selected to a new population using
            <see cref="P:AForge.Genetic.Population.SelectionMethod">selection operator</see>, and amount of random
            chromosomes added to the new population.</para>
            
            <para>Default value is set to <b>0</b>.</para></remarks>
            
        </member>
        <member name="P:AForge.Genetic.Population.AutoShuffling">
            <summary>
            Determines of auto shuffling is on or off.
            </summary>
            
            <remarks><para>The property specifies if automatic shuffling needs to be done
            on each <see cref="M:AForge.Genetic.Population.RunEpoch">epoch</see> by calling <see cref="M:AForge.Genetic.Population.Shuffle"/>
            method.</para>
            
            <para>Default value is set to <see langword="false"/>.</para></remarks>
            
        </member>
        <member name="P:AForge.Genetic.Population.SelectionMethod">
            <summary>
            Selection method to use with the population.
            </summary>
            
            <remarks><para>The property sets selection method which is used to select
            population members for a new population - filter population after reproduction
            was done with operators like crossover and mutations.</para></remarks>
            
        </member>
        <member name="P:AForge.Genetic.Population.FitnessFunction">
            <summary>
            Fitness function to apply to the population.
            </summary>
            
            <remarks><para>The property sets fitness function, which is used to evaluate
            usefulness of population's chromosomes. Setting new fitness function causes recalculation
            of fitness values for all population's members and new best member will be found.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Genetic.Population.FitnessMax">
            <summary>
            Maximum fitness of the population.
            </summary>
            
            <remarks><para>The property keeps maximum fitness of chromosomes currently existing
            in the population.</para>
            
            <para><note>The property is recalculate only after <see cref="M:AForge.Genetic.Population.Selection">selection</see>
            or <see cref="M:AForge.Genetic.Population.Migrate(AForge.Genetic.Population,System.Int32,AForge.Genetic.ISelectionMethod)">migration</see> was done.</note></para>
            </remarks>
            
        </member>
        <member name="P:AForge.Genetic.Population.FitnessSum">
             <summary>
             Summary fitness of the population.
             </summary>
            
             <remarks><para>The property keeps summary fitness of all chromosome existing in the
             population.</para>
             
             <para><note>The property is recalculate only after <see cref="M:AForge.Genetic.Population.Selection">selection</see>
             or <see cref="M:AForge.Genetic.Population.Migrate(AForge.Genetic.Population,System.Int32,AForge.Genetic.ISelectionMethod)">migration</see> was done.</note></para>
             </remarks>
            
        </member>
        <member name="P:AForge.Genetic.Population.FitnessAvg">
             <summary>
             Average fitness of the population.
             </summary>
             
             <remarks><para>The property keeps average fitness of all chromosome existing in the
             population.</para>
             
             <para><note>The property is recalculate only after <see cref="M:AForge.Genetic.Population.Selection">selection</see>
             or <see cref="M:AForge.Genetic.Population.Migrate(AForge.Genetic.Population,System.Int32,AForge.Genetic.ISelectionMethod)">migration</see> was done.</note></para>
             </remarks>
            
        </member>
        <member name="P:AForge.Genetic.Population.BestChromosome">
            <summary>
            Best chromosome of the population.
            </summary>
            
            <remarks><para>The property keeps the best chromosome existing in the population
            or <see langword="null"/> if all chromosomes have 0 fitness.</para>
            
            <para><note>The property is recalculate only after <see cref="M:AForge.Genetic.Population.Selection">selection</see>
            or <see cref="M:AForge.Genetic.Population.Migrate(AForge.Genetic.Population,System.Int32,AForge.Genetic.ISelectionMethod)">migration</see> was done.</note></para>
            </remarks>
            
        </member>
        <member name="P:AForge.Genetic.Population.Size">
            <summary>
            Size of the population.
            </summary>
            
            <remarks>The property keeps initial (minimal) size of population.
            Population always returns to this size after selection operator was applied,
            which happens after <see cref="M:AForge.Genetic.Population.Selection"/> or <see cref="M:AForge.Genetic.Population.RunEpoch"/> methods
            call.</remarks>
            
        </member>
        <member name="P:AForge.Genetic.Population.Item(System.Int32)">
            <summary>
            Get chromosome with specified index.
            </summary>
            
            <param name="index">Chromosome's index to retrieve.</param>
            
            <remarks>Allows to access individuals of the population.</remarks>
            
        </member>
        <member name="T:AForge.Genetic.EliteSelection">
            <summary>
            Elite selection method.
            </summary>
            
            <remarks>Elite selection method selects specified amount of
            best chromosomes to the next generation.</remarks> 
            
        </member>
        <member name="T:AForge.Genetic.ISelectionMethod">
            <summary>
            Genetic selection method interface.
            </summary>
            
            <remarks>The interface should be implemented by all classes, which
            implement genetic selection algorithm. These algorithms select members of
            current generation, which should be kept in the new generation. Basically,
            these algorithms filter provided population keeping only specified amount of
            members.</remarks>
            
        </member>
        <member name="M:AForge.Genetic.ISelectionMethod.ApplySelection(System.Collections.Generic.List{AForge.Genetic.IChromosome},System.Int32)">
            <summary>
            Apply selection to the specified population.
            </summary>
            
            <param name="chromosomes">Population, which should be filtered.</param>
            <param name="size">The amount of chromosomes to keep.</param>
            
            <remarks>Filters specified population according to the implemented
            selection algorithm.</remarks>
            
        </member>
        <member name="M:AForge.Genetic.EliteSelection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Genetic.EliteSelection"/> class.
            </summary>
        </member>
        <member name="M:AForge.Genetic.EliteSelection.ApplySelection(System.Collections.Generic.List{AForge.Genetic.IChromosome},System.Int32)">
            <summary>
            Apply selection to the specified population.
            </summary>
            
            <param name="chromosomes">Population, which should be filtered.</param>
            <param name="size">The amount of chromosomes to keep.</param>
            
            <remarks>Filters specified population keeping only specified amount of best
            chromosomes.</remarks>
            
        </member>
        <member name="T:AForge.Genetic.RankSelection">
            <summary>
            Rank selection method.
            </summary>
            
            <remarks><para>The algorithm selects chromosomes to the new generation depending on
            their fitness values - the better fitness value chromosome has, the more chances
            it has to become member of the new generation. Each chromosome can be selected
            several times to the new generation.</para>
            
            <para>This algorithm is similar to <see cref="T:AForge.Genetic.RouletteWheelSelection">Roulette Wheel
            Selection</see> algorithm, but the difference is in "wheel" and its sectors' size
            calculation method. The size of the wheel equals to <b>size * ( size + 1 ) / 2</b>,
            where <b>size</b> is the current size of population. The worst chromosome has its sector's
            size equal to 1, the next chromosome has its sector's size equal to 2, etc.</para>
            </remarks>
            
        </member>
        <member name="M:AForge.Genetic.RankSelection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Genetic.RankSelection"/> class.
            </summary>
        </member>
        <member name="M:AForge.Genetic.RankSelection.ApplySelection(System.Collections.Generic.List{AForge.Genetic.IChromosome},System.Int32)">
            <summary>
            Apply selection to the specified population.
            </summary>
            
            <param name="chromosomes">Population, which should be filtered.</param>
            <param name="size">The amount of chromosomes to keep.</param>
            
            <remarks>Filters specified population keeping only those chromosomes, which
            won "roulette" game.</remarks>
            
        </member>
        <member name="T:AForge.Genetic.RouletteWheelSelection">
            <summary>
            Roulette wheel selection method.
            </summary>
            
            <remarks><para>The algorithm selects chromosomes to the new generation according to
            their fitness values - the more fitness value chromosome has, the more chances
            it has to become member of new generation. Each chromosome can be selected
            several times to the new generation.</para>
            
            <para>The "roulette's wheel" is divided into sectors, which size is proportional to
            the fitness values of chromosomes - the  size of the wheel is the sum of all fitness
            values, size of each sector equals to fitness value of chromosome.</para>
            </remarks>
            
        </member>
        <member name="M:AForge.Genetic.RouletteWheelSelection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Genetic.RouletteWheelSelection"/> class.
            </summary>
        </member>
        <member name="M:AForge.Genetic.RouletteWheelSelection.ApplySelection(System.Collections.Generic.List{AForge.Genetic.IChromosome},System.Int32)">
            <summary>
            Apply selection to the specified population.
            </summary>
            
            <param name="chromosomes">Population, which should be filtered.</param>
            <param name="size">The amount of chromosomes to keep.</param>
            
            <remarks>Filters specified population keeping only those chromosomes, which
            won "roulette" game.</remarks>
            
        </member>
        <member name="T:AForge.MachineLearning.BoltzmannExploration">
            <summary>
            Boltzmann distribution exploration policy.
            </summary>
            
            <remarks><para>The class implements exploration policy base on Boltzmann distribution.
            Acording to the policy, action <b>a</b> at state <b>s</b> is selected with the next probability:</para>
            <code lang="none">
                              exp( Q( s, a ) / t )
            p( s, a ) = -----------------------------
                         SUM( exp( Q( s, b ) / t ) )
                          b
            </code>
            <para>where <b>Q(s, a)</b> is action's <b>a</b> estimation (usefulness) at state <b>s</b> and
            <b>t</b> is <see cref="P:AForge.MachineLearning.BoltzmannExploration.Temperature"/>.</para>
            </remarks>
            
            <seealso cref="T:AForge.MachineLearning.RouletteWheelExploration"/>
            <seealso cref="T:AForge.MachineLearning.EpsilonGreedyExploration"/>
            <seealso cref="T:AForge.MachineLearning.TabuSearchExploration"/>
            
        </member>
        <member name="T:AForge.MachineLearning.IExplorationPolicy">
            <summary>
            Exploration policy interface.
            </summary>
            
            <remarks>The interface describes exploration policies, which are used in Reinforcement
            Learning to explore state space.</remarks>
            
        </member>
        <member name="M:AForge.MachineLearning.IExplorationPolicy.ChooseAction(System.Double[])">
            <summary>
            Choose an action.
            </summary>
            
            <param name="actionEstimates">Action estimates.</param>
            
            <returns>Returns selected action.</returns>
            
            <remarks>The method chooses an action depending on the provided estimates. The
            estimates can be any sort of estimate, which values usefulness of the action
            (expected summary reward, discounted reward, etc).</remarks>
            
        </member>
        <member name="M:AForge.MachineLearning.BoltzmannExploration.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.MachineLearning.BoltzmannExploration"/> class.
            </summary>
            
            <param name="temperature">Termperature parameter of Boltzmann distribution.</param>
            
        </member>
        <member name="M:AForge.MachineLearning.BoltzmannExploration.ChooseAction(System.Double[])">
            <summary>
            Choose an action.
            </summary>
            
            <param name="actionEstimates">Action estimates.</param>
            
            <returns>Returns selected action.</returns>
            
            <remarks>The method chooses an action depending on the provided estimates. The
            estimates can be any sort of estimate, which values usefulness of the action
            (expected summary reward, discounted reward, etc).</remarks>
            
        </member>
        <member name="P:AForge.MachineLearning.BoltzmannExploration.Temperature">
            <summary>
            Termperature parameter of Boltzmann distribution, >0.
            </summary>
            
            <remarks><para>The property sets the balance between exploration and greedy actions.
            If temperature is low, then the policy tends to be more greedy.</para></remarks>
            
        </member>
        <member name="T:AForge.MachineLearning.EpsilonGreedyExploration">
            <summary>
            Epsilon greedy exploration policy.
            </summary>
            
            <remarks><para>The class implements epsilon greedy exploration policy. Acording to the policy,
            the best action is chosen with probability <b>1-epsilon</b>. Otherwise,
            with probability <b>epsilon</b>, any other action, except the best one, is
            chosen randomly.</para>
            
            <para>According to the policy, the epsilon value is known also as exploration rate.</para>
            </remarks>
            
            <seealso cref="T:AForge.MachineLearning.RouletteWheelExploration"/>
            <seealso cref="T:AForge.MachineLearning.BoltzmannExploration"/>
            <seealso cref="T:AForge.MachineLearning.TabuSearchExploration"/>
            
        </member>
        <member name="M:AForge.MachineLearning.EpsilonGreedyExploration.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.MachineLearning.EpsilonGreedyExploration"/> class.
            </summary>
            
            <param name="epsilon">Epsilon value (exploration rate).</param>
            
        </member>
        <member name="M:AForge.MachineLearning.EpsilonGreedyExploration.ChooseAction(System.Double[])">
            <summary>
            Choose an action.
            </summary>
            
            <param name="actionEstimates">Action estimates.</param>
            
            <returns>Returns selected action.</returns>
            
            <remarks>The method chooses an action depending on the provided estimates. The
            estimates can be any sort of estimate, which values usefulness of the action
            (expected summary reward, discounted reward, etc).</remarks>
            
        </member>
        <member name="P:AForge.MachineLearning.EpsilonGreedyExploration.Epsilon">
            <summary>
            Epsilon value (exploration rate), [0, 1].
            </summary>
            
            <remarks><para>The value determines the amount of exploration driven by the policy.
            If the value is high, then the policy drives more to exploration - choosing random
            action, which excludes the best one. If the value is low, then the policy is more
            greedy - choosing the beat so far action.
            </para></remarks>
            
        </member>
        <member name="T:AForge.MachineLearning.RouletteWheelExploration">
            <summary>
            Roulette wheel exploration policy.
            </summary>
            
            <remarks><para>The class implements roulette whell exploration policy. Acording to the policy,
            action <b>a</b> at state <b>s</b> is selected with the next probability:</para>
            <code lang="none">
                              Q( s, a )
            p( s, a ) = ------------------
                         SUM( Q( s, b ) )
                          b
            </code>
            <para>where <b>Q(s, a)</b> is action's <b>a</b> estimation (usefulness) at state <b>s</b>.</para>
            
            <para><note>The exploration policy may be applied only in cases, when action estimates (usefulness)
            are represented with positive value greater then 0.</note></para>
            </remarks>
            
            <seealso cref="T:AForge.MachineLearning.BoltzmannExploration"/>
            <seealso cref="T:AForge.MachineLearning.EpsilonGreedyExploration"/>
            <seealso cref="T:AForge.MachineLearning.TabuSearchExploration"/>
            
        </member>
        <member name="M:AForge.MachineLearning.RouletteWheelExploration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.MachineLearning.RouletteWheelExploration"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.MachineLearning.RouletteWheelExploration.ChooseAction(System.Double[])">
            <summary>
            Choose an action.
            </summary>
            
            <param name="actionEstimates">Action estimates.</param>
            
            <returns>Returns selected action.</returns>
            
            <remarks>The method chooses an action depending on the provided estimates. The
            estimates can be any sort of estimate, which values usefulness of the action
            (expected summary reward, discounted reward, etc).</remarks>
            
        </member>
        <member name="T:AForge.MachineLearning.TabuSearchExploration">
            <summary>
            Tabu search exploration policy.
            </summary>
            
            <remarks>The class implements simple tabu search exploration policy,
            allowing to set certain actions as tabu for a specified amount of
            iterations. The actual exploration and choosing from non-tabu actions
            is done by <see cref="P:AForge.MachineLearning.TabuSearchExploration.BasePolicy">base exploration policy</see>.</remarks>
            
            <seealso cref="T:AForge.MachineLearning.BoltzmannExploration"/>
            <seealso cref="T:AForge.MachineLearning.EpsilonGreedyExploration"/>
            <seealso cref="T:AForge.MachineLearning.RouletteWheelExploration"/>
            
        </member>
        <member name="M:AForge.MachineLearning.TabuSearchExploration.#ctor(System.Int32,AForge.MachineLearning.IExplorationPolicy)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.MachineLearning.TabuSearchExploration"/> class.
            </summary>
            
            <param name="actions">Total actions count.</param>
            <param name="basePolicy">Base exploration policy.</param>
            
        </member>
        <member name="M:AForge.MachineLearning.TabuSearchExploration.ChooseAction(System.Double[])">
            <summary>
            Choose an action.
            </summary>
            
            <param name="actionEstimates">Action estimates.</param>
            
            <returns>Returns selected action.</returns>
            
            <remarks>The method chooses an action depending on the provided estimates. The
            estimates can be any sort of estimate, which values usefulness of the action
            (expected summary reward, discounted reward, etc). The action is choosed from
            non-tabu actions only.</remarks>
            
        </member>
        <member name="M:AForge.MachineLearning.TabuSearchExploration.ResetTabuList">
            <summary>
            Reset tabu list.
            </summary>
            
            <remarks>Clears tabu list making all actions allowed.</remarks>
            
        </member>
        <member name="M:AForge.MachineLearning.TabuSearchExploration.SetTabuAction(System.Int32,System.Int32)">
            <summary>
            Set tabu action.
            </summary>
            
            <param name="action">Action to set tabu for.</param>
            <param name="tabuTime">Tabu time in iterations.</param>
            
        </member>
        <member name="P:AForge.MachineLearning.TabuSearchExploration.BasePolicy">
            <summary>
            Base exploration policy.
            </summary>
            
            <remarks>Base exploration policy is the policy, which is used
            to choose from non-tabu actions.</remarks>
            
        </member>
        <member name="T:AForge.MachineLearning.QLearning">
            <summary>
            QLearning learning algorithm.
            </summary>
            
            <remarks>The class provides implementation of Q-Learning algorithm, known as
            off-policy Temporal Difference control.</remarks>
            
            <seealso cref="T:AForge.MachineLearning.Sarsa"/>
            
        </member>
        <member name="M:AForge.MachineLearning.QLearning.#ctor(System.Int32,System.Int32,AForge.MachineLearning.IExplorationPolicy)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.MachineLearning.QLearning"/> class.
            </summary>
            
            <param name="states">Amount of possible states.</param>
            <param name="actions">Amount of possible actions.</param>
            <param name="explorationPolicy">Exploration policy.</param>
            
            <remarks>Action estimates are randomized in the case of this constructor
            is used.</remarks>
            
        </member>
        <member name="M:AForge.MachineLearning.QLearning.#ctor(System.Int32,System.Int32,AForge.MachineLearning.IExplorationPolicy,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.MachineLearning.QLearning"/> class.
            </summary>
            
            <param name="states">Amount of possible states.</param>
            <param name="actions">Amount of possible actions.</param>
            <param name="explorationPolicy">Exploration policy.</param>
            <param name="randomize">Randomize action estimates or not.</param>
            
            <remarks>The <b>randomize</b> parameter specifies if initial action estimates should be randomized
            with small values or not. Randomization of action values may be useful, when greedy exploration
            policies are used. In this case randomization ensures that actions of the same type are not chosen always.</remarks>
            
        </member>
        <member name="M:AForge.MachineLearning.QLearning.GetAction(System.Int32)">
            <summary>
            Get next action from the specified state.
            </summary>
            
            <param name="state">Current state to get an action for.</param>
            
            <returns>Returns the action for the state.</returns>
            
            <remarks>The method returns an action according to current
            <see cref="P:AForge.MachineLearning.QLearning.ExplorationPolicy">exploration policy</see>.</remarks>
            
        </member>
        <member name="M:AForge.MachineLearning.QLearning.UpdateState(System.Int32,System.Int32,System.Double,System.Int32)">
            <summary>
            Update Q-function's value for the previous state-action pair.
            </summary>
            
            <param name="previousState">Previous state.</param>
            <param name="action">Action, which leads from previous to the next state.</param>
            <param name="reward">Reward value, received by taking specified action from previous state.</param>
            <param name="nextState">Next state.</param>
            
        </member>
        <member name="P:AForge.MachineLearning.QLearning.StatesCount">
            <summary>
            Amount of possible states.
            </summary>
            
        </member>
        <member name="P:AForge.MachineLearning.QLearning.ActionsCount">
            <summary>
            Amount of possible actions.
            </summary>
            
        </member>
        <member name="P:AForge.MachineLearning.QLearning.ExplorationPolicy">
            <summary>
            Exploration policy.
            </summary>
            
            <remarks>Policy, which is used to select actions.</remarks>
            
        </member>
        <member name="P:AForge.MachineLearning.QLearning.LearningRate">
            <summary>
            Learning rate, [0, 1].
            </summary>
            
            <remarks>The value determines the amount of updates Q-function receives
            during learning. The greater the value, the more updates the function receives.
            The lower the value, the less updates it receives.</remarks>
            
        </member>
        <member name="P:AForge.MachineLearning.QLearning.DiscountFactor">
            <summary>
            Discount factor, [0, 1].
            </summary>
            
            <remarks>Discount factor for the expected summary reward. The value serves as
            multiplier for the expected reward. So if the value is set to 1,
            then the expected summary reward is not discounted. If the value is getting
            smaller, then smaller amount of the expected reward is used for actions'
            estimates update.</remarks>
            
        </member>
        <member name="T:AForge.MachineLearning.Sarsa">
            <summary>
            Sarsa learning algorithm.
            </summary>
            
            <remarks>The class provides implementation of Sarse algorithm, known as
            on-policy Temporal Difference control.</remarks>
            
            <seealso cref="T:AForge.MachineLearning.QLearning"/>
            
        </member>
        <member name="M:AForge.MachineLearning.Sarsa.#ctor(System.Int32,System.Int32,AForge.MachineLearning.IExplorationPolicy)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.MachineLearning.Sarsa"/> class.
            </summary>
            
            <param name="states">Amount of possible states.</param>
            <param name="actions">Amount of possible actions.</param>
            <param name="explorationPolicy">Exploration policy.</param>
            
            <remarks>Action estimates are randomized in the case of this constructor
            is used.</remarks>
            
        </member>
        <member name="M:AForge.MachineLearning.Sarsa.#ctor(System.Int32,System.Int32,AForge.MachineLearning.IExplorationPolicy,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.MachineLearning.Sarsa"/> class.
            </summary>
            
            <param name="states">Amount of possible states.</param>
            <param name="actions">Amount of possible actions.</param>
            <param name="explorationPolicy">Exploration policy.</param>
            <param name="randomize">Randomize action estimates or not.</param>
            
            <remarks>The <b>randomize</b> parameter specifies if initial action estimates should be randomized
            with small values or not. Randomization of action values may be useful, when greedy exploration
            policies are used. In this case randomization ensures that actions of the same type are not chosen always.</remarks>
            
        </member>
        <member name="M:AForge.MachineLearning.Sarsa.GetAction(System.Int32)">
            <summary>
            Get next action from the specified state.
            </summary>
            
            <param name="state">Current state to get an action for.</param>
            
            <returns>Returns the action for the state.</returns>
            
            <remarks>The method returns an action according to current
            <see cref="P:AForge.MachineLearning.Sarsa.ExplorationPolicy">exploration policy</see>.</remarks>
            
        </member>
        <member name="M:AForge.MachineLearning.Sarsa.UpdateState(System.Int32,System.Int32,System.Double,System.Int32,System.Int32)">
            <summary>
            Update Q-function's value for the previous state-action pair.
            </summary>
            
            <param name="previousState">Curren state.</param>
            <param name="previousAction">Action, which lead from previous to the next state.</param>
            <param name="reward">Reward value, received by taking specified action from previous state.</param>
            <param name="nextState">Next state.</param>
            <param name="nextAction">Next action.</param>
            
            <remarks>Updates Q-function's value for the previous state-action pair in
            the case if the next state is non terminal.</remarks>
            
        </member>
        <member name="M:AForge.MachineLearning.Sarsa.UpdateState(System.Int32,System.Int32,System.Double)">
            <summary>
            Update Q-function's value for the previous state-action pair.
            </summary>
            
            <param name="previousState">Curren state.</param>
            <param name="previousAction">Action, which lead from previous to the next state.</param>
            <param name="reward">Reward value, received by taking specified action from previous state.</param>
            
            <remarks>Updates Q-function's value for the previous state-action pair in
            the case if the next state is terminal.</remarks>
            
        </member>
        <member name="P:AForge.MachineLearning.Sarsa.StatesCount">
            <summary>
            Amount of possible states.
            </summary>
            
        </member>
        <member name="P:AForge.MachineLearning.Sarsa.ActionsCount">
            <summary>
            Amount of possible actions.
            </summary>
            
        </member>
        <member name="P:AForge.MachineLearning.Sarsa.ExplorationPolicy">
            <summary>
            Exploration policy.
            </summary>
            
            <remarks>Policy, which is used to select actions.</remarks>
            
        </member>
        <member name="P:AForge.MachineLearning.Sarsa.LearningRate">
            <summary>
            Learning rate, [0, 1].
            </summary>
            
            <remarks>The value determines the amount of updates Q-function receives
            during learning. The greater the value, the more updates the function receives.
            The lower the value, the less updates it receives.</remarks>
            
        </member>
        <member name="P:AForge.MachineLearning.Sarsa.DiscountFactor">
            <summary>
            Discount factor, [0, 1].
            </summary>
            
            <remarks>Discount factor for the expected summary reward. The value serves as
            multiplier for the expected reward. So if the value is set to 1,
            then the expected summary reward is not discounted. If the value is getting
            smaller, then smaller amount of the expected reward is used for actions'
            estimates update.</remarks>
            
        </member>
        <member name="T:AForge.Math.Complex">
            <summary>
            Complex number wrapper class.
            </summary>
            
            <remarks><para>The class encapsulates complex number and provides
            set of different operators to manipulate it, lake adding, subtractio,
            multiplication, etc.</para>
            
            <para>Sample usage:</para>
            <code>
            // define two complex numbers
            Complex c1 = new Complex( 3, 9 );
            Complex c2 = new Complex( 8, 3 );
            // sum
            Complex s1 = Complex.Add( c1, c2 );
            Complex s2 = c1 + c2;
            Complex s3 = c1 + 5;
            // difference
            Complex d1 = Complex.Subtract( c1, c2 );
            Complex d2 = c1 - c2;
            Complex d3 = c1 - 2;
            </code>
            </remarks>
            
        </member>
        <member name="F:AForge.Math.Complex.Re">
            <summary>
            Real part of the complex number.
            </summary>
        </member>
        <member name="F:AForge.Math.Complex.Im">
            <summary>
            Imaginary part of the complex number.
            </summary>
        </member>
        <member name="F:AForge.Math.Complex.Zero">
            <summary>
             A double-precision complex number that represents zero.
            </summary>
        </member>
        <member name="F:AForge.Math.Complex.One">
            <summary>
             A double-precision complex number that represents one.
            </summary>
        </member>
        <member name="F:AForge.Math.Complex.I">
            <summary>
             A double-precision complex number that represents the squere root of (-1).
            </summary>
        </member>
        <member name="M:AForge.Math.Complex.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Math.Complex"/> class.
            </summary>
            
            <param name="re">Real part.</param>
            <param name="im">Imaginary part.</param>
            
        </member>
        <member name="M:AForge.Math.Complex.#ctor(AForge.Math.Complex)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Math.Complex"/> class.
            </summary>
            
            <param name="c">Source complex number.</param>
            
        </member>
        <member name="M:AForge.Math.Complex.Add(AForge.Math.Complex,AForge.Math.Complex)">
            <summary>
            Adds two complex numbers.
            </summary>
            
            <param name="a">A <see cref="T:AForge.Math.Complex"/> instance.</param>
            <param name="b">A <see cref="T:AForge.Math.Complex"/> instance.</param>
            
            <returns>Returns new <see cref="T:AForge.Math.Complex"/> instance containing the sum of specified
            complex numbers.</returns>
            
        </member>
        <member name="M:AForge.Math.Complex.Add(AForge.Math.Complex,System.Double)">
            <summary>
            Adds scalar value to a complex number.
            </summary>
            
            <param name="a">A <see cref="T:AForge.Math.Complex"/> instance.</param>
            <param name="s">A scalar value.</param>
            
            <returns>Returns new <see cref="T:AForge.Math.Complex"/> instance containing the sum of specified
            complex number and scalar value.</returns>
            
        </member>
        <member name="M:AForge.Math.Complex.Add(AForge.Math.Complex,AForge.Math.Complex,AForge.Math.Complex@)">
            <summary>
            Adds two complex numbers and puts the result into the third complex number.
            </summary>
            
            <param name="a">A <see cref="T:AForge.Math.Complex"/> instance.</param>
            <param name="b">A <see cref="T:AForge.Math.Complex"/> instance.</param>
            <param name="result">A <see cref="T:AForge.Math.Complex"/> instance to hold the result.</param>
            
        </member>
        <member name="M:AForge.Math.Complex.Add(AForge.Math.Complex,System.Double,AForge.Math.Complex@)">
            <summary>
            Adds scalar value to a complex number and puts the result into another complex number.
            </summary>
            
            <param name="a">A <see cref="T:AForge.Math.Complex"/> instance.</param>
            <param name="s">A scalar value.</param>
            <param name="result">A <see cref="T:AForge.Math.Complex"/> instance to hold the result.</param>
            
        </member>
        <member name="M:AForge.Math.Complex.Subtract(AForge.Math.Complex,AForge.Math.Complex)">
            <summary>
            Subtracts one complex number from another.
            </summary>
            
            <param name="a">A <see cref="T:AForge.Math.Complex"/> instance to subtract from.</param>
            <param name="b">A <see cref="T:AForge.Math.Complex"/> instance to be subtracted.</param>
            
            <returns>Returns new <see cref="T:AForge.Math.Complex"/> instance containing the subtraction result (<b>a - b</b>).</returns>
            
        </member>
        <member name="M:AForge.Math.Complex.Subtract(AForge.Math.Complex,System.Double)">
            <summary>
            Subtracts a scalar from a complex number.
            </summary>
            
            <param name="a">A <see cref="T:AForge.Math.Complex"/> instance to subtract from.</param>
            <param name="s">A scalar value to be subtracted.</param>
            
            <returns>Returns new <see cref="T:AForge.Math.Complex"/> instance containing the subtraction result (<b>a - s</b>).</returns>
            
        </member>
        <member name="M:AForge.Math.Complex.Subtract(System.Double,AForge.Math.Complex)">
            <summary>
            Subtracts a complex number from a scalar value.
            </summary>
            
            <param name="s">A scalar value to subtract from.</param>
            <param name="a">A <see cref="T:AForge.Math.Complex"/> instance to be subtracted.</param>
            
            <returns>Returns new <see cref="T:AForge.Math.Complex"/> instance containing the subtraction result (<b>s - a</b>).</returns>
            
        </member>
        <member name="M:AForge.Math.Complex.Subtract(AForge.Math.Complex,AForge.Math.Complex,AForge.Math.Complex@)">
            <summary>
            Subtracts one complex number from another and puts the result in the third complex number.
            </summary>
            
            <param name="a">A <see cref="T:AForge.Math.Complex"/> instance to subtract from.</param>
            <param name="b">A <see cref="T:AForge.Math.Complex"/> instance to be subtracted.</param>
            <param name="result">A <see cref="T:AForge.Math.Complex"/> instance to hold the result.</param>
            
        </member>
        <member name="M:AForge.Math.Complex.Subtract(AForge.Math.Complex,System.Double,AForge.Math.Complex@)">
            <summary>
            Subtracts a scalar value from a complex number and puts the result into another complex number.
            </summary>
            
            <param name="a">A <see cref="T:AForge.Math.Complex"/> instance to subtract from.</param>
            <param name="s">A scalar value to be subtracted.</param>
            <param name="result">A <see cref="T:AForge.Math.Complex"/> instance to hold the result.</param>
            
        </member>
        <member name="M:AForge.Math.Complex.Subtract(System.Double,AForge.Math.Complex,AForge.Math.Complex@)">
            <summary>
            Subtracts a complex number from a scalar value and puts the result into another complex number.
            </summary>
            
            <param name="s">A scalar value to subtract from.</param>
            <param name="a">A <see cref="T:AForge.Math.Complex"/> instance to be subtracted.</param>
            <param name="result">A <see cref="T:AForge.Math.Complex"/> instance to hold the result.</param>
            
        </member>
        <member name="M:AForge.Math.Complex.Multiply(AForge.Math.Complex,AForge.Math.Complex)">
            <summary>
            Multiplies two complex numbers.
            </summary>
            
            <param name="a">A <see cref="T:AForge.Math.Complex"/> instance.</param>
            <param name="b">A <see cref="T:AForge.Math.Complex"/> instance.</param>
            
            <returns>Returns new <see cref="T:AForge.Math.Complex"/> instance containing the result of multiplication.</returns>
            
        </member>
        <member name="M:AForge.Math.Complex.Multiply(AForge.Math.Complex,System.Double)">
            <summary>
            Multiplies a complex number by a scalar value.
            </summary>
            
            <param name="a">A <see cref="T:AForge.Math.Complex"/> instance.</param>
            <param name="s">A scalar value.</param>
            
            <returns>Returns new <see cref="T:AForge.Math.Complex"/> instance containing the result of multiplication.</returns>
            
        </member>
        <member name="M:AForge.Math.Complex.Multiply(AForge.Math.Complex,AForge.Math.Complex,AForge.Math.Complex@)">
            <summary>
            Multiplies two complex numbers and puts the result in a third complex number.
            </summary>
            
            <param name="a">A <see cref="T:AForge.Math.Complex"/> instance.</param>
            <param name="b">A <see cref="T:AForge.Math.Complex"/> instance.</param>
            <param name="result">A <see cref="T:AForge.Math.Complex"/> instance to hold the result.</param>
            
        </member>
        <member name="M:AForge.Math.Complex.Multiply(AForge.Math.Complex,System.Double,AForge.Math.Complex@)">
            <summary>
            Multiplies a complex number by a scalar value and puts the result into another complex number.
            </summary>
            
            <param name="a">A <see cref="T:AForge.Math.Complex"/> instance.</param>
            <param name="s">A scalar value.</param>
            <param name="result">A <see cref="T:AForge.Math.Complex"/> instance to hold the result.</param>
            
        </member>
        <member name="M:AForge.Math.Complex.Divide(AForge.Math.Complex,AForge.Math.Complex)">
            <summary>
            Divides one complex number by another complex number.
            </summary>
            
            <param name="a">A <see cref="T:AForge.Math.Complex"/> instance.</param>
            <param name="b">A <see cref="T:AForge.Math.Complex"/> instance.</param>
            
            <returns>Returns new <see cref="T:AForge.Math.Complex"/> instance containing the result.</returns>
            
            <exception cref="T:System.DivideByZeroException">Can not divide by zero.</exception>
            
        </member>
        <member name="M:AForge.Math.Complex.Divide(AForge.Math.Complex,System.Double)">
            <summary>
            Divides a complex number by a scalar value.
            </summary>
            
            <param name="a">A <see cref="T:AForge.Math.Complex"/> instance.</param>
            <param name="s">A scalar value.</param>
            
            <returns>Returns new <see cref="T:AForge.Math.Complex"/> instance containing the result.</returns>
            
            <exception cref="T:System.DivideByZeroException">Can not divide by zero.</exception>
            
        </member>
        <member name="M:AForge.Math.Complex.Divide(System.Double,AForge.Math.Complex)">
            <summary>
            Divides a scalar value by a complex number.
            </summary>
            
            <param name="s">A scalar value.</param>
            <param name="a">A <see cref="T:AForge.Math.Complex"/> instance.</param>
            
            <returns>Returns new <see cref="T:AForge.Math.Complex"/> instance containing the result.</returns>
            
            <exception cref="T:System.DivideByZeroException">Can not divide by zero.</exception>
            
        </member>
        <member name="M:AForge.Math.Complex.Divide(AForge.Math.Complex,AForge.Math.Complex,AForge.Math.Complex@)">
            <summary>
            Divides one complex number by another complex number and puts the result in a third complex number.
            </summary>
            
            <param name="a">A <see cref="T:AForge.Math.Complex"/> instance.</param>
            <param name="b">A <see cref="T:AForge.Math.Complex"/> instance.</param>
            <param name="result">A <see cref="T:AForge.Math.Complex"/> instance to hold the result.</param>
            
            <exception cref="T:System.DivideByZeroException">Can not divide by zero.</exception>
            
        </member>
        <member name="M:AForge.Math.Complex.Divide(AForge.Math.Complex,System.Double,AForge.Math.Complex@)">
            <summary>
            Divides a complex number by a scalar value and puts the result into another complex number.
            </summary>
            
            <param name="a">A <see cref="T:AForge.Math.Complex"/> instance.</param>
            <param name="s">A scalar value.</param>
            <param name="result">A <see cref="T:AForge.Math.Complex"/> instance to hold the result.</param>
            
            <exception cref="T:System.DivideByZeroException">Can not divide by zero.</exception>
            
        </member>
        <member name="M:AForge.Math.Complex.Divide(System.Double,AForge.Math.Complex,AForge.Math.Complex@)">
            <summary>
            Divides a scalar value by a complex number and puts the result into another complex number.
            </summary>
            
            <param name="a">A <see cref="T:AForge.Math.Complex"/> instance.</param>
            <param name="s">A scalar value.</param>
            <param name="result">A <see cref="T:AForge.Math.Complex"/> instance to hold the result.</param>
            
            <exception cref="T:System.DivideByZeroException">Can not divide by zero.</exception>
            
        </member>
        <member name="M:AForge.Math.Complex.Negate(AForge.Math.Complex)">
            <summary>
            Negates a complex number.
            </summary>
            
            <param name="a">A <see cref="T:AForge.Math.Complex"/> instance.</param>
            
            <returns>Returns new <see cref="T:AForge.Math.Complex"/> instance containing the negated values.</returns>
            
        </member>
        <member name="M:AForge.Math.Complex.ApproxEqual(AForge.Math.Complex,AForge.Math.Complex)">
            <summary>
            Tests whether two complex numbers are approximately equal using default tolerance value.
            </summary>
            
            <param name="a">A <see cref="T:AForge.Math.Complex"/> instance.</param>
            <param name="b">A <see cref="T:AForge.Math.Complex"/> instance.</param>
            
            <returns>Return <see langword="true"/> if the two vectors are approximately equal or <see langword="false"/> otherwise.</returns>
            
            <remarks><para>The default tolerance value, which is used for the test, equals to 8.8817841970012523233891E-16.</para></remarks>
            
        </member>
        <member name="M:AForge.Math.Complex.ApproxEqual(AForge.Math.Complex,AForge.Math.Complex,System.Double)">
            <summary>
            Tests whether two complex numbers are approximately equal given a tolerance value.
            </summary>
            
            <param name="a">A <see cref="T:AForge.Math.Complex"/> instance.</param>
            <param name="b">A <see cref="T:AForge.Math.Complex"/> instance.</param>
            <param name="tolerance">The tolerance value used to test approximate equality.</param>
            
            <remarks><para>The default tolerance value, which is used for the test, equals to 8.8817841970012523233891E-16.</para></remarks>
            
        </member>
        <member name="M:AForge.Math.Complex.Parse(System.String)">
            <summary>
            Converts the specified string to its <see cref="T:AForge.Math.Complex"/> equivalent.
            </summary>
            
            <param name="s">A string representation of a complex number.</param>
            
            <returns>Returns new <see cref="T:AForge.Math.Complex"/> instance that represents the complex number
            specified by the <paramref name="s"/> parameter.</returns>
            
            <exception cref="T:System.FormatException">String representation of the complex number is not correctly formatted.</exception>
            
        </member>
        <member name="M:AForge.Math.Complex.TryParse(System.String,AForge.Math.Complex@)">
            <summary>
            Try to convert the specified string to its <see cref="T:AForge.Math.Complex"/> equivalent.
            </summary>
            
            <param name="s">A string representation of a complex number.</param>
            
            <param name="result"><see cref="T:AForge.Math.Complex"/> instance to output the result to.</param>
            
            <returns>Returns boolean value that indicates if the parse was successful or not.</returns>
            
        </member>
        <member name="M:AForge.Math.Complex.Sqrt(AForge.Math.Complex)">
            <summary>
            Calculates square root of a complex number.
            </summary>
            
            <param name="a">A <see cref="T:AForge.Math.Complex"/> instance.</param>
            
            <returns>Returns new <see cref="T:AForge.Math.Complex"/> instance containing the square root of the specified
            complex number.</returns>
            
        </member>
        <member name="M:AForge.Math.Complex.Log(AForge.Math.Complex)">
            <summary>
            Calculates natural (base <b>e</b>) logarithm of a complex number.
            </summary>
            
            <param name="a">A <see cref="T:AForge.Math.Complex"/> instance.</param>
            
            <returns>Returns new <see cref="T:AForge.Math.Complex"/> instance containing the natural logarithm of the specified
            complex number.</returns>
            
        </member>
        <member name="M:AForge.Math.Complex.Exp(AForge.Math.Complex)">
            <summary>
            Calculates exponent (<b>e</b> raised to the specified power) of a complex number.
            </summary>
            
            <param name="a">A <see cref="T:AForge.Math.Complex"/> instance.</param>
            
            <returns>Returns new <see cref="T:AForge.Math.Complex"/> instance containing the exponent of the specified
            complex number.</returns>
            
        </member>
        <member name="M:AForge.Math.Complex.Sin(AForge.Math.Complex)">
            <summary>
            Calculates Sine value of the complex number.
            </summary>
            
            <param name="a">A <see cref="T:AForge.Math.Complex"/> instance.</param>
            
            <returns>Returns new <see cref="T:AForge.Math.Complex"/> instance containing the Sine value of the specified
            complex number.</returns>
            
        </member>
        <member name="M:AForge.Math.Complex.Cos(AForge.Math.Complex)">
            <summary>
            Calculates Cosine value of the complex number.
            </summary>
            
            <param name="a">A <see cref="T:AForge.Math.Complex"/> instance.</param>
            
            <returns>Returns new <see cref="T:AForge.Math.Complex"/> instance containing the Cosine value of the specified
            complex number.</returns>
            
        </member>
        <member name="M:AForge.Math.Complex.Tan(AForge.Math.Complex)">
            <summary>
            Calculates Tangent value of the complex number.
            </summary>
            
            <param name="a">A <see cref="T:AForge.Math.Complex"/> instance.</param>
            
            <returns>Returns new <see cref="T:AForge.Math.Complex"/> instance containing the Tangent value of the specified
            complex number.</returns>
            
        </member>
        <member name="M:AForge.Math.Complex.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:AForge.Math.Complex.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the specified object.
            </summary>
            
            <param name="obj">An object to compare to this instance.</param>
            
            <returns>Returns <see langword="true"/> if <paramref name="obj"/> is a <see cref="T:AForge.Math.Complex"/> and has the same values as this instance or <see langword="false"/> otherwise.</returns>
            
        </member>
        <member name="M:AForge.Math.Complex.ToString">
            <summary>
            Returns a string representation of this object.
            </summary>
            
            <returns>A string representation of this object.</returns>
            
        </member>
        <member name="M:AForge.Math.Complex.op_Equality(AForge.Math.Complex,AForge.Math.Complex)">
            <summary>
            Tests whether two specified complex numbers are equal.
            </summary>
            
            <param name="u">The left-hand complex number.</param>
            <param name="v">The right-hand complex number.</param>
            
            <returns>Returns <see langword="true"/> if the two complex numbers are equal or <see langword="false"/> otherwise.</returns>
            
        </member>
        <member name="M:AForge.Math.Complex.op_Inequality(AForge.Math.Complex,AForge.Math.Complex)">
            <summary>
            Tests whether two specified complex numbers are not equal.
            </summary>
            
            <param name="u">The left-hand complex number.</param>
            <param name="v">The right-hand complex number.</param>
            
            <returns>Returns <see langword="true"/> if the two complex numbers are not equal or <see langword="false"/> otherwise.</returns>
            
        </member>
        <member name="M:AForge.Math.Complex.op_UnaryNegation(AForge.Math.Complex)">
            <summary>
            Negates the complex number.
            </summary>
            
            <param name="a">A <see cref="T:AForge.Math.Complex"/>  instance.</param>
            
            <returns>Returns new <see cref="T:AForge.Math.Complex"/> instance containing the negated values.</returns>
            
        </member>
        <member name="M:AForge.Math.Complex.op_Addition(AForge.Math.Complex,AForge.Math.Complex)">
            <summary>
            Adds two complex numbers.
            </summary>
            
            <param name="a">A <see cref="T:AForge.Math.Complex"/> instance.</param>
            <param name="b">A <see cref="T:AForge.Math.Complex"/> instance.</param>
            
            <returns>Returns new <see cref="T:AForge.Math.Complex"/> instance containing the sum.</returns>
            
        </member>
        <member name="M:AForge.Math.Complex.op_Addition(AForge.Math.Complex,System.Double)">
            <summary>
            Adds a complex number and a scalar value.
            </summary>
            
            <param name="a">A <see cref="T:AForge.Math.Complex"/> instance.</param>
            <param name="s">A scalar value.</param>
            
            <returns>Returns new <see cref="T:AForge.Math.Complex"/> instance containing the sum.</returns>
            
        </member>
        <member name="M:AForge.Math.Complex.op_Addition(System.Double,AForge.Math.Complex)">
            <summary>
            Adds a complex number and a scalar value.
            </summary>
            
            <param name="a">A <see cref="T:AForge.Math.Complex"/> instance.</param>
            <param name="s">A scalar value.</param>
            
            <returns>Returns new <see cref="T:AForge.Math.Complex"/> instance containing the sum.</returns>
            
        </member>
        <member name="M:AForge.Math.Complex.op_Subtraction(AForge.Math.Complex,AForge.Math.Complex)">
            <summary>
            Subtracts one complex number from another complex number.
            </summary>
            
            <param name="a">A <see cref="T:AForge.Math.Complex"/> instance.</param>
            <param name="b">A <see cref="T:AForge.Math.Complex"/> instance.</param>
            
            <returns>Returns new <see cref="T:AForge.Math.Complex"/> instance containing the difference.</returns>
            
        </member>
        <member name="M:AForge.Math.Complex.op_Subtraction(AForge.Math.Complex,System.Double)">
            <summary>
            Subtracts a scalar value from a complex number.
            </summary>
            
            <param name="a">A <see cref="T:AForge.Math.Complex"/> instance.</param>
            <param name="s">A scalar value.</param>
            
            <returns>Returns new <see cref="T:AForge.Math.Complex"/> instance containing the difference.</returns>
            
        </member>
        <member name="M:AForge.Math.Complex.op_Subtraction(System.Double,AForge.Math.Complex)">
            <summary>
            Subtracts a complex number from a scalar value.
            </summary>
            
            <param name="s">A scalar value.</param>
            <param name="a">A <see cref="T:AForge.Math.Complex"/> instance.</param>
            
            <returns>Returns new <see cref="T:AForge.Math.Complex"/> instance containing the difference.</returns>
            
        </member>
        <member name="M:AForge.Math.Complex.op_Multiply(AForge.Math.Complex,AForge.Math.Complex)">
            <summary>
            Multiplies two complex numbers.
            </summary>
            
            <param name="a">A <see cref="T:AForge.Math.Complex"/> instance.</param>
            <param name="b">A <see cref="T:AForge.Math.Complex"/> instance.</param>
            
            <returns>Returns new <see cref="T:AForge.Math.Complex"/> instance containing the result of multiplication.</returns>
            
        </member>
        <member name="M:AForge.Math.Complex.op_Multiply(System.Double,AForge.Math.Complex)">
            <summary>
            Multiplies a complex number by a scalar value.
            </summary>
            
            <param name="s">A scalar value.</param>
            <param name="a">A <see cref="T:AForge.Math.Complex"/> instance.</param>
            
            <returns>Returns new <see cref="T:AForge.Math.Complex"/> instance containing the result of multiplication.</returns>
            
        </member>
        <member name="M:AForge.Math.Complex.op_Multiply(AForge.Math.Complex,System.Double)">
            <summary>
            Multiplies a complex number by a scalar value.
            </summary>
            
            <param name="a">A <see cref="T:AForge.Math.Complex"/> instance.</param>
            <param name="s">A scalar value.</param>
            
            <returns>Returns new <see cref="T:AForge.Math.Complex"/> instance containing the result of multiplication.</returns>
            
        </member>
        <member name="M:AForge.Math.Complex.op_Division(AForge.Math.Complex,AForge.Math.Complex)">
            <summary>
            Divides one complex number by another complex number.
            </summary>
            
            <param name="a">A <see cref="T:AForge.Math.Complex"/> instance.</param>
            <param name="b">A <see cref="T:AForge.Math.Complex"/> instance.</param>
            
            <returns>A new Complex instance containing the result.</returns>
            <returns>Returns new <see cref="T:AForge.Math.Complex"/> instance containing the result of division.</returns>
            
        </member>
        <member name="M:AForge.Math.Complex.op_Division(AForge.Math.Complex,System.Double)">
            <summary>
            Divides a complex number by a scalar value.
            </summary>
            
            <param name="a">A <see cref="T:AForge.Math.Complex"/> instance.</param>
            <param name="s">A scalar value.</param>
            
            <returns>Returns new <see cref="T:AForge.Math.Complex"/> instance containing the result of division.</returns>
            
        </member>
        <member name="M:AForge.Math.Complex.op_Division(System.Double,AForge.Math.Complex)">
            <summary>
            Divides a scalar value by a complex number.
            </summary>
            
            <param name="a">A <see cref="T:AForge.Math.Complex"/> instance.</param>
            <param name="s">A scalar value.</param>
            
            <returns>Returns new <see cref="T:AForge.Math.Complex"/> instance containing the result of division.</returns>
            
        </member>
        <member name="M:AForge.Math.Complex.op_Explicit(System.Single)~AForge.Math.Complex">
            <summary>
            Converts from a single-precision real number to a complex number. 
            </summary>
            
            <param name="value">Single-precision real number to convert to complex number.</param>
            
            <returns>Returns new <see cref="T:AForge.Math.Complex"/> instance containing complex number with
            real part initialized to the specified value.</returns>
            
        </member>
        <member name="M:AForge.Math.Complex.op_Explicit(System.Double)~AForge.Math.Complex">
            <summary>
            Converts from a double-precision real number to a complex number. 
            </summary>
            
            <param name="value">Double-precision real number to convert to complex number.</param>
            
            <returns>Returns new <see cref="T:AForge.Math.Complex"/> instance containing complex number with
            real part initialized to the specified value.</returns>
            
        </member>
        <member name="M:AForge.Math.Complex.System#ICloneable#Clone">
            <summary>
            Creates an exact copy of this <see cref="T:AForge.Math.Complex"/> object.
            </summary>
            
            <returns>Returns clone of the complex number.</returns>
            
        </member>
        <member name="M:AForge.Math.Complex.Clone">
            <summary>
            Creates an exact copy of this <see cref="T:AForge.Math.Complex"/> object.
            </summary>
            
            <returns>Returns clone of the complex number.</returns>
            
        </member>
        <member name="M:AForge.Math.Complex.GetObjectData(Alt.Runtime.Serialization.SerializationInfo,Alt.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            
            <param name="info">The <see cref="T:Alt.Runtime.Serialization.SerializationInfo"/> to populate with data. </param>
            <param name="context">The destination (see <see cref="T:Alt.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            
        </member>
        <member name="P:AForge.Math.Complex.Magnitude">
            <summary>
            Magnitude value of the complex number.
            </summary>
            
            <remarks><para>Magnitude of the complex number, which equals to <b>Sqrt( Re * Re + Im * Im )</b>.</para></remarks>
            
        </member>
        <member name="P:AForge.Math.Complex.Phase">
            <summary>
            Phase value of the complex number.
            </summary>
            
            <remarks><para>Phase of the complex number, which equals to <b>Atan( Im / Re )</b>.</para></remarks>
            
        </member>
        <member name="P:AForge.Math.Complex.SquaredMagnitude">
            <summary>
            Squared magnitude value of the complex number.
            </summary>
        </member>
        <member name="T:AForge.Math.ContinuousHistogram">
            <summary>
            Histogram for continuous random values.
            </summary>
            
            <remarks><para>The class wraps histogram for continuous stochastic function, which is represented
            by integer array and range of the function. Values of the integer array are treated
            as total amount of hits on the corresponding subranges, which are calculated by splitting the
            specified range into required amount of consequent ranges.</para>
            
            <para>For example, if the integer array is equal to { 1, 2, 4, 8, 16 } and the range is set
            to [0, 1], then the histogram consists of next subranges:
            <list type="bullet">
            <item>[0.0, 0.2] - 1 hit;</item>
            <item>[0.2, 0.4] - 2 hits;</item>
            <item>[0.4, 0.6] - 4 hits;</item>
            <item>[0.6, 0.8] - 8 hits;</item>
            <item>[0.8, 1.0] - 16 hits.</item>
            </list>
            </para>
            
            <para>Sample usage:</para>
            <code>
            // create histogram
            ContinuousHistogram histogram = new ContinuousHistogram(
                new int[] { 0, 0, 8, 4, 2, 4, 7, 1, 0 }, new Range( 0.0f, 1.0f ) );
            // get mean and standard deviation values
            Console.WriteLine( "mean = " + histogram.Mean + ", std.dev = " + histogram.StdDev );
            </code>
            </remarks>
            
        </member>
        <member name="M:AForge.Math.ContinuousHistogram.#ctor(System.Int32[],AForge.Range)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Math.ContinuousHistogram"/> class.
            </summary>
            
            <param name="values">Values of the histogram.</param>
            <param name="range">Range of random values.</param>
            
            <remarks>Values of the integer array are treated as total amount of hits on the
            corresponding subranges, which are calculated by splitting the specified range into
            required amount of consequent ranges (see <see cref="T:AForge.Math.ContinuousHistogram"/> class
            description for more information).
            </remarks>
            
        </member>
        <member name="M:AForge.Math.ContinuousHistogram.GetRange(System.Single)">
            <summary>
            Get range around median containing specified percentage of values.
            </summary>
            
            <param name="percent">Values percentage around median.</param>
            
            <returns>Returns the range which containes specifies percentage of values.</returns>
            
            <remarks><para>The method calculates range of stochastic variable, which summary probability
            comprises the specified percentage of histogram's hits.</para>
            
            <para>Sample usage:</para>
            <code>
            // create histogram
            ContinuousHistogram histogram = new ContinuousHistogram(
                new int[] { 0, 0, 8, 4, 2, 4, 7, 1, 0 }, new Range( 0.0f, 1.0f ) );
            // get 50% range
            Range range = histogram.GetRange( 0.5f );
            // show the range ([0.25, 0.75])
            Console.WriteLine( "50% range = [" + range.Min + ", " + range.Max + "]" );
            </code>
            </remarks>
            
        </member>
        <member name="M:AForge.Math.ContinuousHistogram.Update">
            <summary>
            Update statistical value of the histogram.
            </summary>
            
            <remarks>The method recalculates statistical values of the histogram, like mean,
            standard deviation, etc. The method should be called only in the case if histogram
            values were retrieved through <see cref="P:AForge.Math.ContinuousHistogram.Values"/> property and updated after that.
            </remarks>
            
        </member>
        <member name="P:AForge.Math.ContinuousHistogram.Values">
            <summary>
            Values of the histogram.
            </summary>
            
        </member>
        <member name="P:AForge.Math.ContinuousHistogram.Range">
            <summary>
            Range of random values.
            </summary>
            
        </member>
        <member name="P:AForge.Math.ContinuousHistogram.Mean">
            <summary>
            Mean value.
            </summary>
            
            <remarks><para>The property allows to retrieve mean value of the histogram.</para>
            
            <para>Sample usage:</para>
            <code>
            // create histogram
            ContinuousHistogram histogram = new ContinuousHistogram(
                new int[] { 0, 0, 8, 4, 2, 4, 7, 1, 0 }, new Range( 0.0f, 1.0f ) );
            // get mean value (= 0.505 )
            Console.WriteLine( "mean = " + histogram.Mean.ToString( "F3" ) );
            </code>
            </remarks>
            
        </member>
        <member name="P:AForge.Math.ContinuousHistogram.StdDev">
            <summary>
            Standard deviation.
            </summary>
            
            <remarks><para>The property allows to retrieve standard deviation value of the histogram.</para>
            
            <para>Sample usage:</para>
            <code>
            // create histogram
            ContinuousHistogram histogram = new ContinuousHistogram(
                new int[] { 0, 0, 8, 4, 2, 4, 7, 1, 0 }, new Range( 0.0f, 1.0f ) );
            // get std.dev. value (= 0.215)
            Console.WriteLine( "std.dev. = " + histogram.StdDev.ToString( "F3" ) );
            </code>
            </remarks>
            
        </member>
        <member name="P:AForge.Math.ContinuousHistogram.Median">
            <summary>
            Median value.
            </summary>
            
            <remarks><para>The property allows to retrieve median value of the histogram.</para>
            
            <para>Sample usage:</para>
            <code>
            // create histogram
            ContinuousHistogram histogram = new ContinuousHistogram(
                new int[] { 0, 0, 8, 4, 2, 4, 7, 1, 0 }, new Range( 0.0f, 1.0f ) );
            // get median value (= 0.500)
            Console.WriteLine( "median = " + histogram.Median.ToString( "F3" ) );
            </code>
            </remarks>
            
        </member>
        <member name="P:AForge.Math.ContinuousHistogram.Min">
            <summary>
            Minimum value.
            </summary>
            
            <remarks><para>The property allows to retrieve minimum value of the histogram with non zero
            hits count.</para>
            
            <para>Sample usage:</para>
            <code>
            // create histogram
            ContinuousHistogram histogram = new ContinuousHistogram(
                new int[] { 0, 0, 8, 4, 2, 4, 7, 1, 0 }, new Range( 0.0f, 1.0f ) );
            // get min value (= 0.250)
            Console.WriteLine( "min = " + histogram.Min.ToString( "F3" ) );
            </code>
            </remarks>
        </member>
        <member name="P:AForge.Math.ContinuousHistogram.Max">
            <summary>
            Maximum value.
            </summary>
            
            <remarks><para>The property allows to retrieve maximum value of the histogram with non zero
            hits count.</para>
            
            <para>Sample usage:</para>
            <code>
            // create histogram
            ContinuousHistogram histogram = new ContinuousHistogram(
                new int[] { 0, 0, 8, 4, 2, 4, 7, 1, 0 }, new Range( 0.0f, 1.0f ) );
            // get max value (= 0.875)
            Console.WriteLine( "max = " + histogram.Max.ToString( "F3" ) );
            </code>
            </remarks>
            
        </member>
        <member name="T:AForge.Math.FourierTransform">
            <summary>
            Fourier transformation.
            </summary>
            
            <remarks>The class implements one dimensional and two dimensional
            Discrete and Fast Fourier Transformation.</remarks>
            
        </member>
        <member name="M:AForge.Math.FourierTransform.DFT(AForge.Math.Complex[],AForge.Math.FourierTransform.Direction)">
            <summary>
            One dimensional Discrete Fourier Transform.
            </summary>
            
            <param name="data">Data to transform.</param>
            <param name="direction">Transformation direction.</param>
            
        </member>
        <member name="M:AForge.Math.FourierTransform.DFT2(AForge.Math.Complex[0:,0:],AForge.Math.FourierTransform.Direction)">
            <summary>
            Two dimensional Discrete Fourier Transform.
            </summary>
            
            <param name="data">Data to transform.</param>
            <param name="direction">Transformation direction.</param>
            
        </member>
        <member name="M:AForge.Math.FourierTransform.FFT(AForge.Math.Complex[],AForge.Math.FourierTransform.Direction)">
            <summary>
            One dimensional Fast Fourier Transform.
            </summary>
            
            <param name="data">Data to transform.</param>
            <param name="direction">Transformation direction.</param>
            
            <remarks><para><note>The method accepts <paramref name="data"/> array of 2<sup>n</sup> size
            only, where <b>n</b> may vary in the [1, 14] range.</note></para></remarks>
            
            <exception cref="T:System.ArgumentException">Incorrect data length.</exception>
            
        </member>
        <member name="M:AForge.Math.FourierTransform.FFT2(AForge.Math.Complex[0:,0:],AForge.Math.FourierTransform.Direction)">
            <summary>
            Two dimensional Fast Fourier Transform.
            </summary>
            
            <param name="data">Data to transform.</param>
            <param name="direction">Transformation direction.</param>
            
            <remarks><para><note>The method accepts <paramref name="data"/> array of 2<sup>n</sup> size
            only in each dimension, where <b>n</b> may vary in the [1, 14] range. For example, 16x16 array
            is valid, but 15x15 is not.</note></para></remarks>
            
            <exception cref="T:System.ArgumentException">Incorrect data length.</exception>
            
        </member>
        <member name="T:AForge.Math.FourierTransform.Direction">
            <summary>
            Fourier transformation direction.
            </summary>
        </member>
        <member name="F:AForge.Math.FourierTransform.Direction.Forward">
            <summary>
            Forward direction of Fourier transformation.
            </summary>
        </member>
        <member name="F:AForge.Math.FourierTransform.Direction.Backward">
            <summary>
            Backward direction of Fourier transformation.
            </summary>
        </member>
        <member name="T:AForge.Math.Gaussian">
            <summary>
            Gaussian function.
            </summary>
            
            <remarks><para>The class is used to calculate 1D and 2D Gaussian functions for
            specified <see cref="P:AForge.Math.Gaussian.Sigma"/> (s) value:</para>
            
            <code lang="none">
            1-D: f(x) = exp( x * x / ( -2 * s * s ) ) / ( s * sqrt( 2 * PI ) )
            
            2-D: f(x, y) = exp( x * x + y * y / ( -2 * s * s ) ) / ( s * s * 2 * PI )
            </code>
            
            </remarks>
            
        </member>
        <member name="M:AForge.Math.Gaussian.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Math.Gaussian"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Math.Gaussian.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Math.Gaussian"/> class.
            </summary>
            
            <param name="sigma">Sigma value.</param>
            
        </member>
        <member name="M:AForge.Math.Gaussian.Function(System.Double)">
            <summary>
            1-D Gaussian function.
            </summary>
            
            <param name="x">x value.</param>
            
            <returns>Returns function's value at point <paramref name="x"/>.</returns>
            
            <remarks><para>The function calculates 1-D Gaussian function:</para>
            
            <code lang="none">
            f(x) = exp( x * x / ( -2 * s * s ) ) / ( s * sqrt( 2 * PI ) )
            </code>
            </remarks>
            
        </member>
        <member name="M:AForge.Math.Gaussian.Function2D(System.Double,System.Double)">
            <summary>
            2-D Gaussian function.
            </summary>
            
            <param name="x">x value.</param>
            <param name="y">y value.</param>
            
            <returns>Returns function's value at point (<paramref name="x"/>, <paramref name="y"/>).</returns>
            
            <remarks><para>The function calculates 2-D Gaussian function:</para>
            
            <code lang="none">
            f(x, y) = exp( x * x + y * y / ( -2 * s * s ) ) / ( s * s * 2 * PI )
            </code>
            </remarks>
            
        </member>
        <member name="M:AForge.Math.Gaussian.Kernel(System.Int32)">
            <summary>
            1-D Gaussian kernel.
            </summary>
            
            <param name="size">Kernel size (should be odd), [3, 101].</param>
            
            <returns>Returns 1-D Gaussian kernel of the specified size.</returns>
            
            <remarks><para>The function calculates 1-D Gaussian kernel, which is array
            of Gaussian function's values in the [-r, r] range of x value, where
            r=floor(<paramref name="size"/>/2).
            </para></remarks>
            
            <exception cref="T:System.ArgumentException">Wrong kernel size.</exception>
            
        </member>
        <member name="M:AForge.Math.Gaussian.Kernel2D(System.Int32)">
            <summary>
            2-D Gaussian kernel.
            </summary>
            
            <param name="size">Kernel size (should be odd), [3, 101].</param>
            
            <returns>Returns 2-D Gaussian kernel of specified size.</returns>
            
            <remarks><para>The function calculates 2-D Gaussian kernel, which is array
            of Gaussian function's values in the [-r, r] range of x,y values, where
            r=floor(<paramref name="size"/>/2).
            </para></remarks>
            
            <exception cref="T:System.ArgumentException">Wrong kernel size.</exception>
            
        </member>
        <member name="P:AForge.Math.Gaussian.Sigma">
            <summary>
            Sigma value.
            </summary>
            
            <remarks><para>Sigma property of Gaussian function.</para>
            
            <para>Default value is set to <b>1</b>. Minimum allowed value is <b>0.00000001</b>.</para>
            </remarks>
            
        </member>
        <member name="T:AForge.Math.Geometry.ClosePointsMergingOptimizer">
            <summary>
            Shape optimizer, which merges points within close distance to each other.
            </summary>
            
            <remarks><para>This shape optimizing algorithm checks all points of a shape
            and merges any two points which are within <see cref="P:AForge.Math.Geometry.ClosePointsMergingOptimizer.MaxDistanceToMerge">specified distance</see>
            to each other. Two close points are replaced by a single point, which has
            mean coordinates of the removed points.</para>
            
            <para><note>Because of the fact that the algorithm performs points merging
            while it goes through a shape, it may merge several points (more than 2) into a
            single point, where distance between extreme points may be bigger
            than the <see cref="P:AForge.Math.Geometry.ClosePointsMergingOptimizer.MaxDistanceToMerge">specified limit</see>. For example, suppose
            a case with 3 points, where 1st and 2nd points are close enough to be merged, but the
            3rd point is a little bit further. During merging of 1st and 2nd points, it may
            happen that the new point with mean coordinates will get closer to the 3rd point,
            so they will be merged also on next iteration of the algorithm.</note></para>
            
            <para>
            For example, the below circle shape comprised of 65 points, can be optimized to 8 points
            by setting <see cref="P:AForge.Math.Geometry.ClosePointsMergingOptimizer.MaxDistanceToMerge"/> to 28.<br/>
            <img src="img/math/close_points_merging_optimizer.png" width="268" height="238"/>
            </para>
            </remarks>
            
        </member>
        <member name="T:AForge.Math.Geometry.IShapeOptimizer">
             <summary>
             Interface for shape optimizing algorithms.
             </summary>
             
             <remarks><para>The interface defines set of methods, which should be implemented
             by shape optimizing algorithms. These algorithms take input shape, which is defined
             by a set of points (corners of convex hull, etc.), and remove some insignificant points from it,
             which has little influence on the final shape's look.</para>
             
             <para>The shape optimizing algorithms can be useful in conjunction with such algorithms
             like convex hull searching, which usually may provide many hull points, where some
             of them are insignificant and could be removed.</para>
            
             <para>For additional details about shape optimizing algorithms, documentation of
             particular algorithm should be studied.</para>
             </remarks>
             
        </member>
        <member name="M:AForge.Math.Geometry.IShapeOptimizer.OptimizeShape(System.Collections.Generic.List{AForge.IntPoint})">
            <summary>
            Optimize specified shape.
            </summary>
            
            <param name="shape">Shape to be optimized.</param>
            
            <returns>Returns final optimized shape, which may have reduced amount of points.</returns>
            
        </member>
        <member name="M:AForge.Math.Geometry.ClosePointsMergingOptimizer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Math.Geometry.ClosePointsMergingOptimizer"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Math.Geometry.ClosePointsMergingOptimizer.#ctor(System.Single)">
             <summary>
             Initializes a new instance of the <see cref="T:AForge.Math.Geometry.ClosePointsMergingOptimizer"/> class.
             </summary>
             
             <param name="maxDistanceToMerge">Maximum allowed distance between points, which are
             merged during optimization (see <see cref="P:AForge.Math.Geometry.ClosePointsMergingOptimizer.MaxDistanceToMerge"/>).</param>
            
        </member>
        <member name="M:AForge.Math.Geometry.ClosePointsMergingOptimizer.OptimizeShape(System.Collections.Generic.List{AForge.IntPoint})">
            <summary>
            Optimize specified shape.
            </summary>
            
            <param name="shape">Shape to be optimized.</param>
            
            <returns>Returns final optimized shape, which may have reduced amount of points.</returns>
            
        </member>
        <member name="P:AForge.Math.Geometry.ClosePointsMergingOptimizer.MaxDistanceToMerge">
            <summary>
            Maximum allowed distance between points, which are merged during optimization, [0, ∞).
            </summary>
            
            <remarks><para>The property sets maximum allowed distance between two points of
            a shape, which are replaced by single point with mean coordinates.</para>
            
            <para>Default value is set to <b>10</b>.</para></remarks>
            
        </member>
        <member name="T:AForge.Math.Geometry.CoplanarPosit">
             <summary>
             3D pose estimation algorithm (coplanar case).
             </summary>
            
             <remarks><para>The class implements an algorithm for 3D object's pose estimation from it's
             2D coordinates obtained by perspective projection, when the object is described coplanar points.
             The idea of the implemented math and algorithm is described in "Iterative Pose Estimation using
             Coplanar Feature Points" paper written by Oberkampf, Daniel DeMenthon and Larry Davis
             (the implementation of the algorithm is very close translation of the pseudo code given by the
             paper, so should be easy to follow).</para>
             
             <para><note>At this point the implementation works only with models described by 4 points, which is
             the minimum number of points enough for 3D pose estimation.</note></para>
             
             <para><note>The 4 model's point are supposed to be coplanar, i.e. supposed to reside all within
             same planer. See <see cref="T:AForge.Math.Geometry.Posit"/> for none coplanar case.</note></para>
             
             <para>Read <a href="http://www.aforgenet.com/articles/posit/">3D Pose Estimation</a> article for
             additional information and samples.</para>
             
             <para>Sample usage:</para>
             <code>
             // points of real object - model
             Vector3[] copositObject = new Vector3[4]
             { 
                 new Vector3( -56.5f, 0,  56.5f ),
                 new Vector3(  56.5f, 0,  56.5f ),
                 new Vector3(  56.5f, 0, -56.5f ),
                 new Vector3( -56.5f, 0, -56.5f ),
             };
             // focal length of camera used to capture the object
             float focalLength = 640; // depends on your camera or projection system
             // initialize CoPOSIT object
             CoplanarPosit coposit = new CoplanarPosit( copositObject, focalLength );
             
             // 2D points of te object - projection
             AForge.Point[] projectedPoints = new AForge.Point[4]
             {
                 new AForge.Point( -77,  48 ),
                 new AForge.Point(  44,  66 ),
                 new AForge.Point(  75, -36 ),
                 new AForge.Point( -61, -58 ),
             };
             // estimate pose
             Matrix3x3 rotationMatrix;
             Vector3 translationVector;
             coposit.EstimatePose( projectedPoints,
                 out rotationMatrix, out translationVector );
             </code>
             </remarks>
             
             <seealso cref="T:AForge.Math.Geometry.Posit"/>
            
        </member>
        <member name="M:AForge.Math.Geometry.CoplanarPosit.#ctor(AForge.Math.Vector3[],System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Math.Geometry.Posit"/> class.
            </summary>
            
            <param name="model">Array of vectors containing coordinates of four real model's point.</param>
            <param name="focalLength">Effective focal length of the camera used to capture the model.</param>
            
            <exception cref="T:System.ArgumentException">The model must have 4 points.</exception>
            
        </member>
        <member name="M:AForge.Math.Geometry.CoplanarPosit.EstimatePose(AForge.Point[],AForge.Math.Matrix3x3@,AForge.Math.Vector3@)">
            <summary>
            Estimate pose of a model from it's projected 2D coordinates.
            </summary>
            
            <param name="points">4 2D points of the <see cref="P:AForge.Math.Geometry.CoplanarPosit.Model">model's</see> projection.</param>
            <param name="rotation">Gets best estimation of object's rotation.</param>
            <param name="translation">Gets best estimation of object's translation.</param>
            
            <exception cref="T:System.ArgumentException">4 points must be be given for pose estimation.</exception>
            
            <remarks><para>Because of the Coplanar POSIT algorithm's nature, it provides two pose estimations,
            which are valid from the algorithm's math point of view. For each pose an error is calculated,
            which specifies how good estimation fits to the specified real 2D coordinated. The method
            provides the best estimation through its output parameters <paramref name="rotation"/> and
            <paramref name="translation"/>. This may be enough for many of the pose estimation application.
            For those, who require checking the alternate pose estimation, it can be obtained using
            <see cref="P:AForge.Math.Geometry.CoplanarPosit.AlternateEstimatedRotation"/> and <see cref="P:AForge.Math.Geometry.CoplanarPosit.AlternateEstimatedTranslation"/> properties.
            The calculated error is provided for both estimations through <see cref="P:AForge.Math.Geometry.CoplanarPosit.BestEstimationError"/> and
            <see cref="P:AForge.Math.Geometry.CoplanarPosit.AlternateEstimationError"/> properties.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Math.Geometry.CoplanarPosit.BestEstimatedRotation">
            <summary>
            Best estimated pose recently found.
            </summary>
            
            <remarks><para>The property keeps best estimated pose found by the latest call to <see cref="M:AForge.Math.Geometry.CoplanarPosit.EstimatePose(AForge.Point[],AForge.Math.Matrix3x3@,AForge.Math.Vector3@)"/>.
            The same estimated pose is provided by that method also and can be accessed through this property
            for convenience.</para>
            
            <para>See also <see cref="P:AForge.Math.Geometry.CoplanarPosit.BestEstimatedTranslation"/> and <see cref="P:AForge.Math.Geometry.CoplanarPosit.BestEstimationError"/>.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Math.Geometry.CoplanarPosit.BestEstimatedTranslation">
            <summary>
            Best estimated translation recently found.
            </summary>
            
            <remarks><para>The property keeps best estimated translation found by the latest call to <see cref="M:AForge.Math.Geometry.CoplanarPosit.EstimatePose(AForge.Point[],AForge.Math.Matrix3x3@,AForge.Math.Vector3@)"/>.
            The same estimated translation is provided by that method also and can be accessed through this property
            for convenience.</para>
            
            <para>See also <see cref="P:AForge.Math.Geometry.CoplanarPosit.BestEstimatedRotation"/> and <see cref="P:AForge.Math.Geometry.CoplanarPosit.BestEstimationError"/>.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Math.Geometry.CoplanarPosit.BestEstimationError">
            <summary>
            Error of the best pose estimation.
            </summary>
            
            <remarks><para>The property keeps error of the best pose estimation, which is calculated as average
            error between real angles of the specified quadrilateral and angles of the quadrilateral which
            is a projection of the best pose estimation. The error is measured degrees in (angle).</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Math.Geometry.CoplanarPosit.AlternateEstimatedRotation">
            <summary>
            Alternate estimated pose recently found.
            </summary>
            
            <remarks><para>The property keeps alternate estimated pose found by the latest call to <see cref="M:AForge.Math.Geometry.CoplanarPosit.EstimatePose(AForge.Point[],AForge.Math.Matrix3x3@,AForge.Math.Vector3@)"/>.</para>
            
            <para>See also <see cref="P:AForge.Math.Geometry.CoplanarPosit.AlternateEstimatedTranslation"/> and <see cref="P:AForge.Math.Geometry.CoplanarPosit.AlternateEstimationError"/>.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Math.Geometry.CoplanarPosit.AlternateEstimatedTranslation">
            <summary>
            Alternated estimated translation recently found.
            </summary>
            
            <remarks><para>The property keeps alternate estimated translation found by the latest call to <see cref="M:AForge.Math.Geometry.CoplanarPosit.EstimatePose(AForge.Point[],AForge.Math.Matrix3x3@,AForge.Math.Vector3@)"/>.</para>
            
            <para>See also <see cref="P:AForge.Math.Geometry.CoplanarPosit.AlternateEstimatedRotation"/> and <see cref="P:AForge.Math.Geometry.CoplanarPosit.AlternateEstimationError"/>.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Math.Geometry.CoplanarPosit.AlternateEstimationError">
            <summary>
            Error of the alternate pose estimation.
            </summary>
            
            <remarks><para>The property keeps error of the alternate pose estimation, which is calculated as average
            error between real angles of the specified quadrilateral and angles of the quadrilateral which
            is a projection of the alternate pose estimation. The error is measured in degrees (angle).</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Math.Geometry.CoplanarPosit.Model">
            <summary>
            Coordinates of the model points which pose should be estimated.
            </summary>
        </member>
        <member name="P:AForge.Math.Geometry.CoplanarPosit.FocalLength">
            <summary>
            Effective focal length of the camera used to capture the model.
            </summary>
        </member>
        <member name="T:AForge.Math.Geometry.FlatAnglesOptimizer">
             <summary>
             Shape optimizer, which removes obtuse angles (close to flat) from a shape.
             </summary>
             
             <remarks><para>This shape optimizing algorithm checks all adjacent edges of a shape
             and substitutes any 2 edges with a single edge if angle between them is greater than
             <see cref="P:AForge.Math.Geometry.FlatAnglesOptimizer.MaxAngleToKeep"/>. The algorithm makes sure there are not obtuse angles in
             a shape, which are very close to flat line.</para>
             
             <para>The shape optimizer does not optimize shapes to less than 3 points, so optimized
             shape always will have at least 3 points.</para>
            
             <para>
             For example, the below circle shape comprised of 65 points, can be optimized to 10 points
             by setting <see cref="P:AForge.Math.Geometry.FlatAnglesOptimizer.MaxAngleToKeep"/> to 160.<br/>
             <img src="img/math/flat_angles_optimizer.png" width="268" height="238"/>
             </para>
             </remarks>
             
        </member>
        <member name="M:AForge.Math.Geometry.FlatAnglesOptimizer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Math.Geometry.FlatAnglesOptimizer"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Math.Geometry.FlatAnglesOptimizer.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Math.Geometry.FlatAnglesOptimizer"/> class.
            </summary>
            
            <param name="maxAngleToKeep">Maximum acceptable angle between two edges of a shape (see <see cref="P:AForge.Math.Geometry.FlatAnglesOptimizer.MaxAngleToKeep"/>).</param>
            
        </member>
        <member name="M:AForge.Math.Geometry.FlatAnglesOptimizer.OptimizeShape(System.Collections.Generic.List{AForge.IntPoint})">
            <summary>
            Optimize specified shape.
            </summary>
            
            <param name="shape">Shape to be optimized.</param>
            
            <returns>Returns final optimized shape, which may have reduced amount of points.</returns>
            
        </member>
        <member name="P:AForge.Math.Geometry.FlatAnglesOptimizer.MaxAngleToKeep">
            <summary>
            Maximum angle between adjacent edges to keep in a shape, [140, 180].
            </summary>
            
            <remarks><para>The property sets maximum angle between adjacent edges, which is kept
            during optimization. All edges, which have a greater angle between them, are substituted
            by a single edge.</para>
            
            <para>Default value is set to <b>160</b>.</para></remarks>
            
        </member>
        <member name="T:AForge.Math.Geometry.GeometryTools">
            <summary>
            Collection of some gemetry tool methods.
            </summary>
            
        </member>
        <member name="M:AForge.Math.Geometry.GeometryTools.GetAngleBetweenVectors(AForge.Point,AForge.Point,AForge.Point)">
            <summary>
            Calculate angle between to vectors measured in [0, 180] degrees range.
            </summary>
            
            <param name="startPoint">Starting point of both vectors.</param>
            <param name="vector1end">Ending point of the first vector.</param>
            <param name="vector2end">Ending point of the second vector.</param>
            
            <returns>Returns angle between specified vectors measured in degrees.</returns>
            
        </member>
        <member name="M:AForge.Math.Geometry.GeometryTools.GetAngleBetweenLines(AForge.Point,AForge.Point,AForge.Point,AForge.Point)">
            <summary>
            Calculate minimum angle between two lines measured in [0, 90] degrees range.
            </summary>
            
            <param name="a1">A point on the first line.</param>
            <param name="a2">Another point on the first line.</param>
            <param name="b1">A point on the second line.</param>
            <param name="b2">Another point on the second line.</param>
            
            <returns>Returns minimum angle between two lines.</returns>
            
            <remarks><para><note>It is preferred to use <see cref="M:AForge.Math.Geometry.Line.GetAngleBetweenLines(AForge.Math.Geometry.Line)"/> if it is required to calculate angle
            multiple times for one of the lines.</note></para></remarks>
            
            <exception cref="T:System.ArgumentException"><paramref name="a1"/> and <paramref name="a2"/> are the same,
            -OR- <paramref name="b1"/> and <paramref name="b2"/> are the same.</exception>
            
        </member>
        <member name="T:AForge.Math.Geometry.GrahamConvexHull">
            <summary>
            Graham scan algorithm for finding convex hull.
            </summary>
            
            <remarks><para>The class implements
            <a href="http://en.wikipedia.org/wiki/Graham_scan">Graham scan</a> algorithm for finding convex hull
            of a given set of points.</para>
            
            <para>Sample usage:</para>
            <code>
            // generate some random points
            Random rand = new Random( );
            List&lt;IntPoint&gt; points = new List&lt;IntPoint&gt;( );
            
            for ( int i = 0; i &lt; 10; i++ )
            {
                points.Add( new IntPoint(
                       rand.Next( 200 ) - 100,
                       rand.Next( 200 ) - 100 ) );
            }
            
            // find the convex hull
            IConvexHullAlgorithm hullFinder = new GrahamConvexHull( );
            List&lt;IntPoint&gt; hull = hullFinder.FindHull( points );
            </code>
            </remarks>
            
        </member>
        <member name="T:AForge.Math.Geometry.IConvexHullAlgorithm">
            <summary>
            Interface defining methods for algorithms, which search for convex hull of the specified points' set.
            </summary>
            
            <remarks><para>The interface defines a method, which should be implemented by different classes
            performing convex hull search for specified set of points.</para>
            
            <para><note>All algorithms, implementing this interface, should follow two rules for the found convex hull:
            <list type="bullet">
            <item>the first point in the returned list is the point with lowest X coordinate (and with lowest Y if
            there are several points with the same X value);</item>
            <item>points in the returned list are given in counter clockwise order
            (<a href="http://en.wikipedia.org/wiki/Cartesian_coordinate_system">Cartesian
            coordinate system</a>).</item>
            </list>
            </note></para>
            </remarks>
            
        </member>
        <member name="M:AForge.Math.Geometry.IConvexHullAlgorithm.FindHull(System.Collections.Generic.List{AForge.IntPoint})">
            <summary>
            Find convex hull for the given set of points.
            </summary>
            
            <param name="points">Set of points to search convex hull for.</param>
            
            <returns>Returns set of points, which form a convex hull for the given <paramref name="points"/>.</returns>
            
        </member>
        <member name="M:AForge.Math.Geometry.GrahamConvexHull.FindHull(System.Collections.Generic.List{AForge.IntPoint})">
            <summary>
            Find convex hull for the given set of points.
            </summary>
            
            <param name="points">Set of points to search convex hull for.</param>
            
            <returns>Returns set of points, which form a convex hull for the given <paramref name="points"/>.
            The first point in the list is the point with lowest X coordinate (and with lowest Y if there are
            several points with the same X value). Points are provided in counter clockwise order
            (<a href="http://en.wikipedia.org/wiki/Cartesian_coordinate_system">Cartesian
            coordinate system</a>).</returns>
            
        </member>
        <member name="T:AForge.Math.Geometry.Line">
            <summary>
            The class encapsulates 2D line and provides some tool methods related to lines.
            </summary>
            
            <remarks><para>The class provides some methods which are related to lines:
            angle between lines, distance to point, finding intersection point, etc.
            </para>
            
            <para>Generally, the equation of the line is y = <see cref="P:AForge.Math.Geometry.Line.Slope"/> * x + 
            <see cref="P:AForge.Math.Geometry.Line.Intercept"/>. However, when <see cref="P:AForge.Math.Geometry.Line.Slope"/> is an Infinity,
            <see name="Intercept"/> would normally be meaningless, and it would be
            impossible to distinguish the line x = 5 from the line x = -5. Therefore,
            if <see cref="P:AForge.Math.Geometry.Line.Slope"/> is <see cref="F:System.Single.PositiveInfinity"/> or
            <see cref="F:System.Single.NegativeInfinity"/>, the line's equation is instead 
            x = <see cref="P:AForge.Math.Geometry.Line.Intercept"/>.</para>
            
            <para>Sample usage:</para>
            <code>
            // create a line
            Line line = Line.FromPoints( new Point( 0, 0 ), new Point( 3, 4 ) );
            // check if it is vertical or horizontal
            if ( line.IsVertical || line.IsHorizontal )
            {
                // ...
            }
            
            // get intersection point with another line
            Point intersection = line.GetIntersectionWith(
                Line.FromPoints( new Point( 3, 0 ), new Point( 0, 4 ) ) );
            </code>
            </remarks>
            
        </member>
        <member name="M:AForge.Math.Geometry.Line.FromPoints(AForge.Point,AForge.Point)">
            <summary>
            Creates a <see cref="T:AForge.Math.Geometry.Line"/>  that goes through the two specified points.
            </summary>
            
            <param name="point1">One point on the line.</param>
            <param name="point2">Another point on the line.</param>
            
            <returns>Returns a <see cref="T:AForge.Math.Geometry.Line"/> representing the line between <paramref name="point1"/>
            and <paramref name="point2"/>.</returns>
            
            <exception cref="T:System.ArgumentException">Thrown if the two points are the same.</exception>
            
        </member>
        <member name="M:AForge.Math.Geometry.Line.FromSlopeIntercept(System.Single,System.Single)">
            <summary>
            Creates a <see cref="T:AForge.Math.Geometry.Line"/> with the specified slope and intercept.
            </summary>
            
            <param name="slope">The slope of the line</param>
            <param name="intercept">The Y-intercept of the line, unless the slope is an
            infinity, in which case the line's equation is "x = intercept" instead.</param>
            
            <returns>Returns a <see cref="T:AForge.Math.Geometry.Line"/> representing the specified line.</returns>
            
            <remarks><para>The construction here follows the same rules as for the rest of this class.
            Most lines are expressed as y = slope * x + intercept. Vertical lines, however, are 
            x = intercept. This is indicated by <see cref="P:AForge.Math.Geometry.Line.IsVertical"/> being true or by 
            <see cref="P:AForge.Math.Geometry.Line.Slope"/> returning <see cref="F:System.Single.PositiveInfinity"/> or 
            <see cref="F:System.Single.NegativeInfinity"/>.</para></remarks>
            
        </member>
        <member name="M:AForge.Math.Geometry.Line.FromRTheta(System.Single,System.Single)">
            <summary>
            Constructs a <see cref="T:AForge.Math.Geometry.Line"/> from a radius and an angle (in degrees).
            </summary>
            
            <param name="radius">The minimum distance from the line to the origin.</param>
            <param name="theta">The angle of the vector from the origin to the line.</param>
            
            <returns>Returns a <see cref="T:AForge.Math.Geometry.Line"/> representing the specified line.</returns>
            
            <remarks><para><paramref name="radius"/> is the minimum distance from the origin
            to the line, and <paramref name="theta"/> is the counterclockwise rotation from
            the positive X axis to the vector through the origin and normal to the line.</para>
            <para>This means that if <paramref name="theta"/> is in [0,180), the point on the line
            closest to the origin is on the positive X or Y axes, or in quadrants I or II. Likewise,
            if <paramref name="theta"/> is in [180,360), the point on the line closest to the
            origin is on the negative X or Y axes, or in quadrants III or IV.</para></remarks>
            
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if radius is negative.</exception>
            
        </member>
        <member name="M:AForge.Math.Geometry.Line.FromPointTheta(AForge.Point,System.Single)">
            <summary>
            Constructs a <see cref="T:AForge.Math.Geometry.Line"/> from a point and an angle (in degrees).
            </summary>
            
            <param name="point">The minimum distance from the line to the origin.</param>
            <param name="theta">The angle of the normal vector from the origin to the line.</param>
            
            <remarks><para><paramref name="theta"/> is the counterclockwise rotation from
            the positive X axis to the vector through the origin and normal to the line.</para>
            <para>This means that if <paramref name="theta"/> is in [0,180), the point on the line
            closest to the origin is on the positive X or Y axes, or in quadrants I or II. Likewise,
            if <paramref name="theta"/> is in [180,360), the point on the line closest to the
            origin is on the negative X or Y axes, or in quadrants III or IV.</para></remarks>
            
            <returns>Returns a <see cref="T:AForge.Math.Geometry.Line"/> representing the specified line.</returns>
            
        </member>
        <member name="M:AForge.Math.Geometry.Line.GetAngleBetweenLines(AForge.Math.Geometry.Line)">
            <summary>
            Calculate minimum angle between this line and the specified line measured in [0, 90] degrees range.
            </summary>
            
            <param name="secondLine">The line to find angle between.</param>
            
            <returns>Returns minimum angle between lines.</returns>
            
        </member>
        <member name="M:AForge.Math.Geometry.Line.GetIntersectionWith(AForge.Math.Geometry.Line)">
            <summary>
            Finds intersection point with the specified line.
            </summary>
            
            <param name="secondLine">Line to find intersection with.</param>
            
            <returns>Returns intersection point with the specified line, or 
            <see langword="null"/> if the lines are parallel and distinct.</returns>
            
            <exception cref="T:System.InvalidOperationException">Thrown if the specified line is the same line as this line.</exception>
            
        </member>
        <member name="M:AForge.Math.Geometry.Line.GetIntersectionWith(AForge.Math.Geometry.LineSegment)">
            <summary>
            Finds, provided it exists, the intersection point with the specified <see cref="T:AForge.Math.Geometry.LineSegment"/>.
            </summary>
            
            <param name="other"><see cref="T:AForge.Math.Geometry.LineSegment"/> to find intersection with.</param>
            
            <returns>Returns intersection point with the specified <see cref="T:AForge.Math.Geometry.LineSegment"/>, or <see langword="null"/>,
            if this line does not intersect with the segment.</returns>
            
            <remarks><para>If the line and segment do not intersect, the method returns <see langword="null"/>.
            If the line and segment share multiple points, the method throws an <see cref="T:System.InvalidOperationException"/>.
            </para></remarks>
            
            <exception cref="T:System.InvalidOperationException">Thrown if <paramref name="other"/> is a portion
            of this line.</exception>
            
        </member>
        <member name="M:AForge.Math.Geometry.Line.DistanceToPoint(AForge.Point)">
            <summary>
            Calculate Euclidean distance between a point and a line.
            </summary>
            
            <param name="point">The point to calculate distance to.</param>
            
            <returns>Returns the Euclidean distance between this line and the specified point. Unlike
            <see cref="M:AForge.Math.Geometry.LineSegment.DistanceToPoint(AForge.Point)"/>, this returns the distance from the infinite line. (0,0) is 0 units
            from the line defined by (0,5) and (0,8), but is 5 units from the segment with those endpoints.</returns>
            
        </member>
        <member name="M:AForge.Math.Geometry.Line.op_Equality(AForge.Math.Geometry.Line,AForge.Math.Geometry.Line)">
             <summary>
             Equality operator - checks if two lines have equal parameters.
             </summary>
             
             <param name="line1">First line to check.</param>
             <param name="line2">Second line to check.</param>
             
             <returns>Returns <see langword="true"/> if parameters of specified
             lines are equal.</returns>
            
        </member>
        <member name="M:AForge.Math.Geometry.Line.op_Inequality(AForge.Math.Geometry.Line,AForge.Math.Geometry.Line)">
             <summary>
             Inequality operator - checks if two lines have different parameters.
             </summary>
             
             <param name="line1">First line to check.</param>
             <param name="line2">Second line to check.</param>
             
             <returns>Returns <see langword="true"/> if parameters of specified
             lines are not equal.</returns>
            
        </member>
        <member name="M:AForge.Math.Geometry.Line.Equals(System.Object)">
            <summary>
            Check if this instance of <see cref="T:AForge.Math.Geometry.Line"/> equals to the specified one.
            </summary>
            
            <param name="obj">Another line to check equalty to.</param>
            
            <returns>Return <see langword="true"/> if objects are equal.</returns>
            
        </member>
        <member name="M:AForge.Math.Geometry.Line.GetHashCode">
            <summary>
            Get hash code for this instance.
            </summary>
            
            <returns>Returns the hash code for this instance.</returns>
            
        </member>
        <member name="M:AForge.Math.Geometry.Line.ToString">
             <summary>
             Get string representation of the class.
             </summary>
             
             <returns>Returns string, which contains values of the like in readable form.</returns>
            
        </member>
        <member name="P:AForge.Math.Geometry.Line.IsVertical">
             <summary>
             Checks if the line vertical or not.
             </summary>
            
        </member>
        <member name="P:AForge.Math.Geometry.Line.IsHorizontal">
            <summary>
            Checks if the line horizontal or not.
            </summary>
        </member>
        <member name="P:AForge.Math.Geometry.Line.Slope">
            <summary>
            Gets the slope of the line.
            </summary>
        </member>
        <member name="P:AForge.Math.Geometry.Line.Intercept">
            <summary>
            If not <see cref="P:AForge.Math.Geometry.Line.IsVertical"/>, gets the Line's Y-intercept.
            If <see cref="P:AForge.Math.Geometry.Line.IsVertical"/> gets the line's X-intercept.
            </summary>
        </member>
        <member name="T:AForge.Math.Geometry.LineSegment">
            <summary>
            The class encapsulates 2D line segment and provides some tool methods related to lines.
            </summary>
            
            <remarks><para>The class provides some methods which are related to line segments:
            distance to point, finding intersection point, etc.
            </para>
            
            <para>A line segment may be converted to a <see cref="T:AForge.Math.Geometry.Line"/>.</para>
            
            <para>Sample usage:</para>
            <code>
            // create a segment
            LineSegment segment = new LineSegment( new Point( 0, 0 ), new Point( 3, 4 ) );
            // get segment's length
            float length = segment.Length;
            
            // get intersection point with a line
            Point? intersection = segment.GetIntersectionWith(
                new Line( new Point( -3, 8 ), new Point( 0, 4 ) ) );
            </code>
            </remarks>
            
        </member>
        <member name="M:AForge.Math.Geometry.LineSegment.#ctor(AForge.Point,AForge.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Math.Geometry.LineSegment"/> class.
            </summary>
            
            <param name="start">Segment's start point.</param>
            <param name="end">Segment's end point.</param>
            
            <exception cref="T:System.ArgumentException">Thrown if the two points are the same.</exception>
            
        </member>
        <member name="M:AForge.Math.Geometry.LineSegment.op_Explicit(AForge.Math.Geometry.LineSegment)~AForge.Math.Geometry.Line">
            <summary>
            Converts this <see cref="T:AForge.Math.Geometry.LineSegment"/> to a <see cref="T:AForge.Math.Geometry.Line"/> by discarding
            its endpoints and extending it infinitely in both directions.
            </summary>
            
            <param name="segment">The segment to convert to a <see cref="T:AForge.Math.Geometry.Line"/>.</param>
            
            <returns>Returns a <see cref="T:AForge.Math.Geometry.Line"/> that contains this <paramref name="segment"/>.</returns>
            
        </member>
        <member name="M:AForge.Math.Geometry.LineSegment.DistanceToPoint(AForge.Point)">
            <summary>
            Calculate Euclidean distance between a point and a finite line segment.
            </summary>
            
            <param name="point">The point to calculate the distance to.</param>
            
            <returns>Returns the Euclidean distance between this line segment and the specified point. Unlike
            <see cref="M:AForge.Math.Geometry.Line.DistanceToPoint(AForge.Point)"/>, this returns the distance from the finite segment. (0,0) is 5 units
            from the segment (0,5)-(0,8), but is 0 units from the line through those points.</returns>
            
        </member>
        <member name="M:AForge.Math.Geometry.LineSegment.GetIntersectionWith(AForge.Math.Geometry.LineSegment)">
            <summary>
            Finds, provided it exists, the intersection point with the specified <see cref="T:AForge.Math.Geometry.LineSegment"/>.
            </summary>
            
            <param name="other"><see cref="T:AForge.Math.Geometry.LineSegment"/> to find intersection with.</param>
            
            <returns>Returns intersection point with the specified <see cref="T:AForge.Math.Geometry.LineSegment"/>, or <see langword="null"/>, if
            the two segments do not intersect.</returns>
            
            <remarks><para>If the two segments do not intersect, the method returns <see langword="null"/>. If the two
            segments share multiple points, this throws an <see cref="T:System.InvalidOperationException"/>.
            </para></remarks>
            
            <exception cref="T:System.InvalidOperationException">Thrown if the segments overlap - if they have
            multiple points in common.</exception>
            
        </member>
        <member name="M:AForge.Math.Geometry.LineSegment.GetIntersectionWith(AForge.Math.Geometry.Line)">
            <summary>
            Finds, provided it exists, the intersection point with the specified <see cref="T:AForge.Math.Geometry.Line"/>.
            </summary>
            
            <param name="other"><see cref="T:AForge.Math.Geometry.Line"/> to find intersection with.</param>
            
            <returns>Returns intersection point with the specified <see cref="T:AForge.Math.Geometry.Line"/>, or <see langword="null"/>, if
            the line does not intersect with this segment.</returns>
            
            <remarks><para>If the line and the segment do not intersect, the method returns <see langword="null"/>. If the line
            and the segment share multiple points, the method throws an <see cref="T:System.InvalidOperationException"/>.
            </para></remarks>
            
            <exception cref="T:System.InvalidOperationException">Thrown if this segment is a portion of
            <paramref name="other"/> line.</exception>
            
        </member>
        <member name="M:AForge.Math.Geometry.LineSegment.op_Equality(AForge.Math.Geometry.LineSegment,AForge.Math.Geometry.LineSegment)">
             <summary>
             Equality operator - checks if two line segments have equal parameters.
             </summary>
             
             <param name="line1">First line segment to check.</param>
             <param name="line2">Second line segment to check.</param>
             
             <returns>Returns <see langword="true"/> if parameters of specified
             line segments are equal.</returns>
            
        </member>
        <member name="M:AForge.Math.Geometry.LineSegment.op_Inequality(AForge.Math.Geometry.LineSegment,AForge.Math.Geometry.LineSegment)">
             <summary>
             Inequality operator - checks if two lines have different parameters.
             </summary>
             
             <param name="line1">First line segment to check.</param>
             <param name="line2">Second line segment to check.</param>
             
             <returns>Returns <see langword="true"/> if parameters of specified
             line segments are not equal.</returns>
            
        </member>
        <member name="M:AForge.Math.Geometry.LineSegment.Equals(System.Object)">
            <summary>
            Check if this instance of <see cref="T:AForge.Math.Geometry.LineSegment"/> equals to the specified one.
            </summary>
            
            <param name="obj">Another line segment to check equalty to.</param>
            
            <returns>Return <see langword="true"/> if objects are equal.</returns>
            
        </member>
        <member name="M:AForge.Math.Geometry.LineSegment.GetHashCode">
            <summary>
            Get hash code for this instance.
            </summary>
            
            <returns>Returns the hash code for this instance.</returns>
            
        </member>
        <member name="M:AForge.Math.Geometry.LineSegment.ToString">
             <summary>
             Get string representation of the class.
             </summary>
             
             <returns>Returns string, which contains values of the like in readable form.</returns>
            
        </member>
        <member name="P:AForge.Math.Geometry.LineSegment.Start">
            <summary>
            Start point of the line segment.
            </summary>
        </member>
        <member name="P:AForge.Math.Geometry.LineSegment.End">
            <summary>
            End point of the line segment.
            </summary>
        </member>
        <member name="P:AForge.Math.Geometry.LineSegment.Length">
            <summary>
            Get segment's length - Euclidean distance between its <see cref="P:AForge.Math.Geometry.LineSegment.Start"/> and <see cref="P:AForge.Math.Geometry.LineSegment.End"/> points.
            </summary>
        </member>
        <member name="T:AForge.Math.Geometry.LineStraighteningOptimizer">
             <summary>
             Shape optimizer, which removes points within close range to shapes' body.
             </summary>
             
             <remarks><para>This shape optimizing algorithm checks all points of the shape and
             removes those of them, which are in a certain distance to a line connecting previous and
             the next points. In other words, it goes through all adjacent edges of a shape and checks
             what is the distance between the corner formed by these two edges and a possible edge, which
             could be used as substitution of these edges. If the distance is equal or smaller than
             the <see cref="P:AForge.Math.Geometry.LineStraighteningOptimizer.MaxDistanceToRemove">specified value</see>, then the point is removed,
             so the two edges are substituted by a single one. When optimization process is done,
             the new shape has reduced amount of points and none of the removed points are further away
             from the new shape than the specified limit.</para>
             
             <para>The shape optimizer does not optimize shapes to less than 3 points, so optimized
             shape always will have at least 3 points.</para>
            
             <para>
             For example, the below circle shape comprised of 65 points, can be optimized to 8 points
             by setting <see cref="P:AForge.Math.Geometry.LineStraighteningOptimizer.MaxDistanceToRemove"/> to 10.<br/>
             <img src="img/math/line_straightening_optimizer.png" width="268" height="238"/>
             </para>
             </remarks>
             
        </member>
        <member name="M:AForge.Math.Geometry.LineStraighteningOptimizer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Math.Geometry.LineStraighteningOptimizer"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Math.Geometry.LineStraighteningOptimizer.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Math.Geometry.LineStraighteningOptimizer"/> class.
            </summary>
            
            <param name="maxDistanceToRemove">Maximum allowed distance between removed points
            and optimized shape (see <see cref="P:AForge.Math.Geometry.LineStraighteningOptimizer.MaxDistanceToRemove"/>).</param>
            
        </member>
        <member name="M:AForge.Math.Geometry.LineStraighteningOptimizer.OptimizeShape(System.Collections.Generic.List{AForge.IntPoint})">
            <summary>
            Optimize specified shape.
            </summary>
            
            <param name="shape">Shape to be optimized.</param>
            
            <returns>Returns final optimized shape, which may have reduced amount of points.</returns>
            
        </member>
        <member name="P:AForge.Math.Geometry.LineStraighteningOptimizer.MaxDistanceToRemove">
            <summary>
            Maximum allowed distance between removed points and optimized shape, [0, ∞).
            </summary>
            
            <remarks><para>The property sets maximum allowed distance between points removed from original
            shape and optimized shape - none of the removed points are further away
            from the new shape than the specified limit.
            </para>
            
            <para>Default value is set to <b>5</b>.</para></remarks>
            
        </member>
        <member name="T:AForge.Math.Geometry.PointsCloud">
            <summary>
            Set of tools for processing collection of points in 2D space.
            </summary>
            
            <remarks><para>The static class contains set of routines, which provide different
            operations with collection of points in 2D space. For example, finding the
            furthest point from a specified point or line.</para>
            
            <para>Sample usage:</para>
            <code>
            // create points' list
            List&lt;IntPoint&gt; points = new List&lt;IntPoint&gt;( );
            points.Add( new IntPoint( 10, 10 ) );
            points.Add( new IntPoint( 20, 15 ) );
            points.Add( new IntPoint( 15, 30 ) );
            points.Add( new IntPoint( 40, 12 ) );
            points.Add( new IntPoint( 30, 20 ) );
            // get furthest point from the specified point
            IntPoint p1 = PointsCloud.GetFurthestPoint( points, new IntPoint( 15, 15 ) );
            Console.WriteLine( p1.X + ", " + p1.Y );
            // get furthest point from line
            IntPoint p2 = PointsCloud.GetFurthestPointFromLine( points,
                new IntPoint( 50, 0 ), new IntPoint( 0, 50 ) );
            Console.WriteLine( p2.X + ", " + p2.Y );
            </code>
            </remarks>
            
        </member>
        <member name="M:AForge.Math.Geometry.PointsCloud.Shift(System.Collections.Generic.IList{AForge.IntPoint},AForge.IntPoint)">
            <summary>
            Shift cloud by adding specified value to all points in the collection.
            </summary>
            
            <param name="cloud">Collection of points to shift their coordinates.</param>
            <param name="shift">Point to shift by.</param>
            
        </member>
        <member name="M:AForge.Math.Geometry.PointsCloud.GetBoundingRectangle(System.Collections.Generic.IEnumerable{AForge.IntPoint},AForge.IntPoint@,AForge.IntPoint@)">
            <summary>
            Get bounding rectangle of the specified list of points.
            </summary>
            
            <param name="cloud">Collection of points to get bounding rectangle for.</param>
            <param name="minXY">Point comprised of smallest X and Y coordinates.</param>
            <param name="maxXY">Point comprised of biggest X and Y coordinates.</param>
            
        </member>
        <member name="M:AForge.Math.Geometry.PointsCloud.GetCenterOfGravity(System.Collections.Generic.IEnumerable{AForge.IntPoint})">
            <summary>
            Get center of gravity for the specified list of points.
            </summary>
            
            <param name="cloud">List of points to calculate center of gravity for.</param>
            
            <returns>Returns center of gravity (mean X-Y values) for the specified list of points.</returns>
            
        </member>
        <member name="M:AForge.Math.Geometry.PointsCloud.GetFurthestPoint(System.Collections.Generic.IEnumerable{AForge.IntPoint},AForge.IntPoint)">
            <summary>
            Find furthest point from the specified point.
            </summary>
            
            <param name="cloud">Collection of points to search furthest point in.</param>
            <param name="referencePoint">The point to search furthest point from.</param>
            
            <returns>Returns a point, which is the furthest away from the <paramref name="referencePoint"/>.</returns>
            
        </member>
        <member name="M:AForge.Math.Geometry.PointsCloud.GetFurthestPointsFromLine(System.Collections.Generic.IEnumerable{AForge.IntPoint},AForge.IntPoint,AForge.IntPoint,AForge.IntPoint@,AForge.IntPoint@)">
            <summary>
            Find two furthest points from the specified line.
            </summary>
            
            <param name="cloud">Collection of points to search furthest points in.</param>
            <param name="linePoint1">First point forming the line.</param>
            <param name="linePoint2">Second point forming the line.</param>
            <param name="furthestPoint1">First found furthest point.</param>
            <param name="furthestPoint2">Second found furthest point (which is on the
            opposite side from the line compared to the <paramref name="furthestPoint1"/>);</param>
            
            <remarks><para>The method finds two furthest points from the specified line,
            where one point is on one side from the line and the second point is on
            another side from the line.</para></remarks>
            
        </member>
        <member name="M:AForge.Math.Geometry.PointsCloud.GetFurthestPointsFromLine(System.Collections.Generic.IEnumerable{AForge.IntPoint},AForge.IntPoint,AForge.IntPoint,AForge.IntPoint@,System.Single@,AForge.IntPoint@,System.Single@)">
             <summary>
             Find two furthest points from the specified line.
             </summary>
             
             <param name="cloud">Collection of points to search furthest points in.</param>
             <param name="linePoint1">First point forming the line.</param>
             <param name="linePoint2">Second point forming the line.</param>
             <param name="furthestPoint1">First found furthest point.</param>
             <param name="distance1">Distance between the first found point and the given line.</param>
             <param name="furthestPoint2">Second found furthest point (which is on the
             opposite side from the line compared to the <paramref name="furthestPoint1"/>);</param>
             <param name="distance2">Distance between the second found point and the given line.</param>
             
             <remarks><para>The method finds two furthest points from the specified line,
             where one point is on one side from the line and the second point is on
             another side from the line.</para></remarks>
            
        </member>
        <member name="M:AForge.Math.Geometry.PointsCloud.GetFurthestPointFromLine(System.Collections.Generic.IEnumerable{AForge.IntPoint},AForge.IntPoint,AForge.IntPoint)">
             <summary>
             Find the furthest point from the specified line.
             </summary>
             
             <param name="cloud">Collection of points to search furthest point in.</param>
             <param name="linePoint1">First point forming the line.</param>
             <param name="linePoint2">Second point forming the line.</param>
             
             <returns>Returns a point, which is the furthest away from the
             specified line.</returns>
             
             <remarks><para>The method finds the furthest point from the specified line.
             Unlike the <see cref="M:AForge.Math.Geometry.PointsCloud.GetFurthestPointsFromLine(System.Collections.Generic.IEnumerable{AForge.IntPoint},AForge.IntPoint,AForge.IntPoint,AForge.IntPoint@,AForge.IntPoint@)"/>
             method, this method find only one point, which is the furthest away from the line
             regardless of side from the line.</para></remarks>
            
        </member>
        <member name="M:AForge.Math.Geometry.PointsCloud.GetFurthestPointFromLine(System.Collections.Generic.IEnumerable{AForge.IntPoint},AForge.IntPoint,AForge.IntPoint,System.Single@)">
             <summary>
             Find the furthest point from the specified line.
             </summary>
             
             <param name="cloud">Collection of points to search furthest points in.</param>
             <param name="linePoint1">First point forming the line.</param>
             <param name="linePoint2">Second point forming the line.</param>
             <param name="distance">Distance between the furthest found point and the given line.</param>
             
             <returns>Returns a point, which is the furthest away from the
             specified line.</returns>
             
             <remarks><para>The method finds the furthest point from the specified line.
             Unlike the <see cref="M:AForge.Math.Geometry.PointsCloud.GetFurthestPointsFromLine(System.Collections.Generic.IEnumerable{AForge.IntPoint},AForge.IntPoint,AForge.IntPoint,AForge.IntPoint@,System.Single@,AForge.IntPoint@,System.Single@)"/>
             method, this method find only one point, which is the furthest away from the line
             regardless of side from the line.</para></remarks>
            
        </member>
        <member name="M:AForge.Math.Geometry.PointsCloud.FindQuadrilateralCorners(System.Collections.Generic.IEnumerable{AForge.IntPoint})">
            <summary>
            Find corners of quadrilateral or triangular area, which contains the specified collection of points.
            </summary>
            
            <param name="cloud">Collection of points to search quadrilateral for.</param>
            
            <returns>Returns a list of 3 or 4 points, which are corners of the quadrilateral or
            triangular area filled by specified collection of point. The first point in the list
            is the point with lowest X coordinate (and with lowest Y if there are several points
            with the same X value). The corners are provided in counter clockwise order
            (<a href="http://en.wikipedia.org/wiki/Cartesian_coordinate_system">Cartesian
            coordinate system</a>).</returns>
            
            <remarks><para>The method makes an assumption that the specified collection of points
            form some sort of quadrilateral/triangular area. With this assumption it tries to find corners
            of the area.</para>
            
            <para><note>The method does not search for <b>bounding</b> quadrilateral/triangular area,
            where all specified points are <b>inside</b> of the found quadrilateral/triangle. Some of the
            specified points potentially may be outside of the found quadrilateral/triangle, since the
            method takes corners only from the specified collection of points, but does not calculate such
            to form true bounding quadrilateral/triangle.</note></para>
            
            <para>See <see cref="P:AForge.Math.Geometry.PointsCloud.QuadrilateralRelativeDistortionLimit"/> property for additional information.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Math.Geometry.PointsCloud.QuadrilateralRelativeDistortionLimit">
            <summary>
            Relative distortion limit allowed for quadrilaterals, [0.0, 0.25].
            </summary>
            
            <remarks><para>The value of this property is used to calculate distortion limit used by
            <see cref="M:AForge.Math.Geometry.PointsCloud.FindQuadrilateralCorners(System.Collections.Generic.IEnumerable{AForge.IntPoint})"/>, when processing potential corners and making decision
            if the provided points form a quadrilateral or a triangle. The distortion limit is
            calculated as:
            <code lang="none">
            distrtionLimit = RelativeDistortionLimit * ( W * H ) / 2,
            </code>
            where <b>W</b> and <b>H</b> are width and height of the "points cloud" passed to the
            <see cref="M:AForge.Math.Geometry.PointsCloud.FindQuadrilateralCorners(System.Collections.Generic.IEnumerable{AForge.IntPoint})"/>.
            </para>
            
            <para>To explain the idea behind distortion limit, let’s suppose that quadrilateral finder routine found
            the next candidates for corners:<br/>
            <img src="img/math/potential_corners.png" width="151" height="128"/><br/>
            As we can see on the above picture, the shape there potentially can be a triangle, but not quadrilateral
            (suppose that points list comes from a hand drawn picture or acquired from camera, so some
            inaccuracy may exist). It may happen that the <b>D</b> point is just a distortion (noise, etc).
            So the <see cref="M:AForge.Math.Geometry.PointsCloud.FindQuadrilateralCorners(System.Collections.Generic.IEnumerable{AForge.IntPoint})"/> check what is the distance between a potential corner
            (D in this case) and a line connecting two adjacent points (AB in this case). If the distance is smaller
            then the distortion limit, then the point may be rejected, so the shape turns into triangle.
            </para>
            
            <para>An exception is the case when both <b>C</b> and <b>D</b> points are very close to the <b>AB</b> line,
            so both their distances are less than distortion limit. In this case both points will be accepted as corners -
            the shape is just a flat quadrilateral.</para>
            
            <para>Default value is set to <b>0.1</b>.</para>
            </remarks>
            
        </member>
        <member name="T:AForge.Math.Geometry.Posit">
            <summary>
            3D pose estimation algorithm.
            </summary>
            
            <remarks><para>The class implements an algorithm for 3D object's pose estimation from it's
            2D coordinates obtained by perspective projection, when the object is described none coplanar points.
            The idea of the implemented math and algorithm is described in "Model-Based Object Pose in 25
            Lines of Code" paper written by Daniel F. DeMenthon and Larry S. Davis (the implementation of
            the algorithm is almost 1 to 1 translation of the pseudo code given by the paper, so should
            be easy to follow).</para>
            
            <para><note>At this point the implementation works only with models described by 4 points, which is
            the minimum number of points enough for 3D pose estimation.</note></para>
            
            <para><note>The 4 model's point <b>must not be coplanar</b>, i.e. must not reside all within
            same planer. See <see cref="T:AForge.Math.Geometry.CoplanarPosit"/> for coplanar case.</note></para>
            
            <para>Read <a href="http://www.aforgenet.com/articles/posit/">3D Pose Estimation</a> article for
            additional information and samples.</para>
            
            <para>Sample usage:</para>
            <code>
            // points of real object - model
            Vector3[] positObject = new Vector3[4]
            { 
                new Vector3(  28,  28, -28 ),
                new Vector3( -28,  28, -28 ),
                new Vector3(  28, -28, -28 ),
                new Vector3(  28,  28,  28 ),
            };
            // focal length of camera used to capture the object
            float focalLength = 640; // depends on your camera or projection system
            // initialize POSIT object
            Posit posit = new Posit( positObject, focalLength );
            
            // 2D points of te object - projection
            AForge.Point[] projectedPoints = new AForge.Point[4]
            {
                new AForge.Point(   -4,   29 ),
                new AForge.Point( -180,   86 ),
                new AForge.Point(   -5, -102 ),
                new AForge.Point(   76,  137 ),
            };
            // estimate pose
            Matrix3x3 rotationMatrix;
            Vector3 translationVector;
            posit.EstimatePose( projectedPoints,
                out rotationMatrix, out translationVector );
            </code>
            </remarks>
            
            <seealso cref="T:AForge.Math.Geometry.CoplanarPosit"/>
            
        </member>
        <member name="M:AForge.Math.Geometry.Posit.#ctor(AForge.Math.Vector3[],System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Math.Geometry.Posit"/> class.
            </summary>
            
            <param name="model">Array of vectors containing coordinates of four real model's point (points
            must not be on the same plane).</param>
            <param name="focalLength">Effective focal length of the camera used to capture the model.</param>
            
            <exception cref="T:System.ArgumentException">The model must have 4 points.</exception>
            
        </member>
        <member name="M:AForge.Math.Geometry.Posit.EstimatePose(AForge.Point[],AForge.Math.Matrix3x3@,AForge.Math.Vector3@)">
            <summary>
            Estimate pose of a model from it's projected 2D coordinates.
            </summary>
            
            <param name="points">4 2D points of the <see cref="P:AForge.Math.Geometry.Posit.Model">model's</see> projection.</param>
            <param name="rotation">Gets object's rotation.</param>
            <param name="translation">Gets object's translation.</param>
            
            <exception cref="T:System.ArgumentException">4 points must be be given for pose estimation.</exception>
            
        </member>
        <member name="P:AForge.Math.Geometry.Posit.Model">
            <summary>
            Coordinates of the model points which pose should be estimated.
            </summary>
        </member>
        <member name="P:AForge.Math.Geometry.Posit.FocalLength">
            <summary>
            Effective focal length of the camera used to capture the model.
            </summary>
        </member>
        <member name="T:AForge.Math.Geometry.ShapeType">
            <summary>
            Enumeration of some basic shape types.
            </summary>
        </member>
        <member name="F:AForge.Math.Geometry.ShapeType.Unknown">
            <summary>
            Unknown shape type.
            </summary>
        </member>
        <member name="F:AForge.Math.Geometry.ShapeType.Circle">
            <summary>
            Circle shape.
            </summary>
        </member>
        <member name="F:AForge.Math.Geometry.ShapeType.Triangle">
            <summary>
            Triangle shape.
            </summary>
        </member>
        <member name="F:AForge.Math.Geometry.ShapeType.Quadrilateral">
            <summary>
            Quadrilateral shape.
            </summary>
        </member>
        <member name="T:AForge.Math.Geometry.PolygonSubType">
            <summary>
            Some common sub types of some basic shapes.
            </summary>
        </member>
        <member name="F:AForge.Math.Geometry.PolygonSubType.Unknown">
            <summary>
            Unrecognized sub type of a shape (generic shape which does not have
            any specific sub type).
            </summary>
        </member>
        <member name="F:AForge.Math.Geometry.PolygonSubType.Trapezoid">
            <summary>
            Quadrilateral with one pair of parallel sides.
            </summary>
        </member>
        <member name="F:AForge.Math.Geometry.PolygonSubType.Parallelogram">
            <summary>
            Quadrilateral with two pairs of parallel sides.
            </summary>
        </member>
        <member name="F:AForge.Math.Geometry.PolygonSubType.Rectangle">
            <summary>
            Parallelogram with perpendicular adjacent sides.
            </summary>
        </member>
        <member name="F:AForge.Math.Geometry.PolygonSubType.Rhombus">
            <summary>
            Parallelogram with all sides equal.
            </summary>
        </member>
        <member name="F:AForge.Math.Geometry.PolygonSubType.Square">
            <summary>
            Rectangle with all sides equal.
            </summary>
        </member>
        <member name="F:AForge.Math.Geometry.PolygonSubType.EquilateralTriangle">
            <summary>
            Triangle with all sides/angles equal.
            </summary>
        </member>
        <member name="F:AForge.Math.Geometry.PolygonSubType.IsoscelesTriangle">
            <summary>
            Triangle with two sides/angles equal.
            </summary>
        </member>
        <member name="F:AForge.Math.Geometry.PolygonSubType.RectangledTriangle">
            <summary>
            Triangle with a 90 degrees angle.
            </summary>
        </member>
        <member name="F:AForge.Math.Geometry.PolygonSubType.RectangledIsoscelesTriangle">
            <summary>
            Triangle with a 90 degrees angle and other two angles are equal.
            </summary>
        </member>
        <member name="T:AForge.Math.Geometry.SimpleShapeChecker">
             <summary>
             A class for checking simple geometrical shapes.
             </summary>
             
             <remarks><para>The class performs checking/detection of some simple geometrical
             shapes for provided set of points (shape's edge points). During the check
             the class goes through the list of all provided points and checks how accurately
             they fit into assumed shape.</para>
             
             <para>All the shape checks allow some deviation of
             points from the shape with assumed parameters. In other words it is allowed
             that specified set of points may form a little bit distorted shape, which may be
             still recognized. The allowed amount of distortion is controlled by two
             properties (<see cref="P:AForge.Math.Geometry.SimpleShapeChecker.MinAcceptableDistortion"/> and <see cref="P:AForge.Math.Geometry.SimpleShapeChecker.RelativeDistortionLimit"/>),
             which allow higher distortion level for bigger shapes and smaller amount of
             distortion for smaller shapes. Checking specified set of points, the class
             calculates mean distance between specified set of points and edge of the assumed
             shape. If the mean distance is equal to or less than maximum allowed distance,
             then a shape is recognized. The maximum allowed distance is calculated as:
             <code lang="none">
             maxDistance = max( minAcceptableDistortion, relativeDistortionLimit * ( width + height ) / 2 )
             </code>
             , where <b>width</b> and <b>height</b> is the size of bounding rectangle for the
             specified points.
             </para>
             
             <para>See also <see cref="P:AForge.Math.Geometry.SimpleShapeChecker.AngleError"/> and <see cref="P:AForge.Math.Geometry.SimpleShapeChecker.LengthError"/> properties,
             which set acceptable errors for polygon sub type checking done by
             <see cref="M:AForge.Math.Geometry.SimpleShapeChecker.CheckPolygonSubType(System.Collections.Generic.List{AForge.IntPoint})"/> method.</para>
             
             <para><note>See the next article for details about the implemented algorithms:
             <a href="http://www.aforgenet.com/articles/shape_checker/">Detecting some simple shapes in images</a>.
             </note></para>
             
             <para>Sample usage:</para>
             <code>
             private List&lt;IntPoint&gt; idealCicle = new List&lt;IntPoint&gt;( );
             private List&lt;IntPoint&gt; distorredCircle = new List&lt;IntPoint&gt;( );
             System.Random rand = new System.Random( );
            
             // generate sample circles
             float radius = 100;
            
             for ( int i = 0; i &lt; 360; i += 10 )
             {
                 float angle = (float) ( (float) i / 180 * System.Math.PI );
             
                 // add point to ideal circle
                 idealCicle.Add( new IntPoint(
                     (int) ( radius * System.Math.Cos( angle ) ),
                     (int) ( radius * System.Math.Sin( angle ) ) ) );
             
                 // add a bit distortion for distorred cirlce
                 float distorredRadius = radius + rand.Next( 7 ) - 3;
             
                 distorredCircle.Add( new IntPoint(
                     (int) ( distorredRadius * System.Math.Cos( angle ) ),
                     (int) ( distorredRadius * System.Math.Sin( angle ) ) ) );
             }
             
             // check shape
             SimpleShapeChecker shapeChecker = new SimpleShapeChecker( );
             
             if ( shapeChecker.IsCircle( idealCicle ) )
             {
                 // ...
             }
             
             if ( shapeChecker.CheckShapeType( distorredCircle ) == ShapeType.Circle )
             {
                 // ...
             }
             </code>
             </remarks>
             
        </member>
        <member name="M:AForge.Math.Geometry.SimpleShapeChecker.CheckShapeType(System.Collections.Generic.List{AForge.IntPoint})">
            <summary>
            Check type of the shape formed by specified points.
            </summary>
            
            <param name="edgePoints">Shape's points to check.</param>
            
            <returns>Returns type of the detected shape.</returns>
            
        </member>
        <member name="M:AForge.Math.Geometry.SimpleShapeChecker.IsCircle(System.Collections.Generic.List{AForge.IntPoint})">
            <summary>
            Check if the specified set of points form a circle shape.
            </summary>
            
            <param name="edgePoints">Shape's points to check.</param>
            
            <returns>Returns <see langword="true"/> if the specified set of points form a
            circle shape or <see langword="false"/> otherwise.</returns>
            
            <remarks><para><note>Circle shape must contain at least 8 points to be recognized.
            The method returns <see langword="false"/> always, of number of points in the specified
            shape is less than 8.</note></para></remarks>
            
        </member>
        <member name="M:AForge.Math.Geometry.SimpleShapeChecker.IsCircle(System.Collections.Generic.List{AForge.IntPoint},AForge.Point@,System.Single@)">
            <summary>
            Check if the specified set of points form a circle shape.
            </summary>
            
            <param name="edgePoints">Shape's points to check.</param>
            <param name="center">Receives circle's center on successful return.</param>
            <param name="radius">Receives circle's radius on successful return.</param>
            
            <returns>Returns <see langword="true"/> if the specified set of points form a
            circle shape or <see langword="false"/> otherwise.</returns>
            
            <remarks><para><note>Circle shape must contain at least 8 points to be recognized.
            The method returns <see langword="false"/> always, of number of points in the specified
            shape is less than 8.</note></para></remarks>
            
        </member>
        <member name="M:AForge.Math.Geometry.SimpleShapeChecker.IsQuadrilateral(System.Collections.Generic.List{AForge.IntPoint})">
            <summary>
            Check if the specified set of points form a quadrilateral shape.
            </summary>
            
            <param name="edgePoints">Shape's points to check.</param>
            
            <returns>Returns <see langword="true"/> if the specified set of points form a
            quadrilateral shape or <see langword="false"/> otherwise.</returns>
            
        </member>
        <member name="M:AForge.Math.Geometry.SimpleShapeChecker.IsQuadrilateral(System.Collections.Generic.List{AForge.IntPoint},System.Collections.Generic.List{AForge.IntPoint}@)">
            <summary>
            Check if the specified set of points form a quadrilateral shape.
            </summary>
            
            <param name="edgePoints">Shape's points to check.</param>
            <param name="corners">List of quadrilateral corners on successful return.</param>
            
            <returns>Returns <see langword="true"/> if the specified set of points form a
            quadrilateral shape or <see langword="false"/> otherwise.</returns>
            
        </member>
        <member name="M:AForge.Math.Geometry.SimpleShapeChecker.IsTriangle(System.Collections.Generic.List{AForge.IntPoint})">
            <summary>
            Check if the specified set of points form a triangle shape.
            </summary>
            
            <param name="edgePoints">Shape's points to check.</param>
            
            <returns>Returns <see langword="true"/> if the specified set of points form a
            triangle shape or <see langword="false"/> otherwise.</returns>
            
        </member>
        <member name="M:AForge.Math.Geometry.SimpleShapeChecker.IsTriangle(System.Collections.Generic.List{AForge.IntPoint},System.Collections.Generic.List{AForge.IntPoint}@)">
            <summary>
            Check if the specified set of points form a triangle shape.
            </summary>
            
            <param name="edgePoints">Shape's points to check.</param>
            <param name="corners">List of triangle corners on successful return.</param>
            
            <returns>Returns <see langword="true"/> if the specified set of points form a
            triangle shape or <see langword="false"/> otherwise.</returns>
            
        </member>
        <member name="M:AForge.Math.Geometry.SimpleShapeChecker.IsConvexPolygon(System.Collections.Generic.List{AForge.IntPoint},System.Collections.Generic.List{AForge.IntPoint}@)">
            <summary>
            Check if the specified set of points form a convex polygon shape.
            </summary>
            
            <param name="edgePoints">Shape's points to check.</param>
            <param name="corners">List of polygon corners on successful return.</param>
            
            <returns>Returns <see langword="true"/> if the specified set of points form a
            convex polygon shape or <see langword="false"/> otherwise.</returns>
            
            <remarks><para><note>The method is able to detect only triangles and quadrilaterals
            for now. Check number of detected corners to resolve type of the detected polygon.
            </note></para></remarks>
            
        </member>
        <member name="M:AForge.Math.Geometry.SimpleShapeChecker.CheckPolygonSubType(System.Collections.Generic.List{AForge.IntPoint})">
            <summary>
            Check sub type of a convex polygon.
            </summary>
            
            <param name="corners">Corners of the convex polygon to check.</param>
            
            <returns>Return detected sub type of the specified shape.</returns>
            
            <remarks><para>The method check corners of a convex polygon detecting
            its subtype. Polygon's corners are usually retrieved using <see cref="M:AForge.Math.Geometry.SimpleShapeChecker.IsConvexPolygon(System.Collections.Generic.List{AForge.IntPoint},System.Collections.Generic.List{AForge.IntPoint}@)"/>
            method, but can be any list of 3-4 points (only sub types of triangles and
            quadrilateral are checked).</para>
            
            <para>See <see cref="P:AForge.Math.Geometry.SimpleShapeChecker.AngleError"/> and <see cref="P:AForge.Math.Geometry.SimpleShapeChecker.LengthError"/> properties,
            which set acceptable errors for polygon sub type checking.</para>
            </remarks>
            
        </member>
        <member name="M:AForge.Math.Geometry.SimpleShapeChecker.CheckIfPointsFitShape(System.Collections.Generic.List{AForge.IntPoint},System.Collections.Generic.List{AForge.IntPoint})">
             <summary>
             Check if a shape specified by the set of points fits a convex polygon
             specified by the set of corners.
             </summary>
             
             <param name="edgePoints">Shape's points to check.</param>
             <param name="corners">Corners of convex polygon to check fitting into.</param>
            
             <returns>Returns <see langword="true"/> if the specified shape fits
             the specified convex polygon or <see langword="false"/> otherwise.</returns>
             
             <remarks><para>The method checks if the set of specified points form the same shape
             as the set of provided corners.</para></remarks>
             
        </member>
        <member name="P:AForge.Math.Geometry.SimpleShapeChecker.MinAcceptableDistortion">
            <summary>
            Minimum value of allowed shapes' distortion.
            </summary>
            
            <remarks><para>The property sets minimum value for allowed shapes'
            distortion (in pixels). See documentation to <see cref="T:AForge.Math.Geometry.SimpleShapeChecker"/>
            class for more details about this property.</para>
            
            <para>Default value is set to <b>0.5</b>.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Math.Geometry.SimpleShapeChecker.RelativeDistortionLimit">
            <summary>
            Maximum value of allowed shapes' distortion, [0, 1].
            </summary>
            
            <remarks><para>The property sets maximum value for allowed shapes'
            distortion. The value is measured in [0, 1] range, which corresponds
            to [0%, 100%] range, which means that maximum allowed shapes'
            distortion is calculated relatively to shape's size. This results to
            higher allowed distortion level for bigger shapes and smaller allowed
            distortion for smaller shapers. See documentation to <see cref="T:AForge.Math.Geometry.SimpleShapeChecker"/>
            class for more details about this property.</para>
            
            <para>Default value is set to <b>0.03</b> (3%).</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Math.Geometry.SimpleShapeChecker.AngleError">
            <summary>
            Maximum allowed angle error in degrees, [0, 20].
            </summary>
            
            <remarks><para>The value sets maximum allowed difference between two angles to
            treat them as equal. It is used by <see cref="M:AForge.Math.Geometry.SimpleShapeChecker.CheckPolygonSubType(System.Collections.Generic.List{AForge.IntPoint})"/> method to
            check for parallel lines and angles of triangles and quadrilaterals.
            For example, if angle between two lines equals 5 degrees and this properties value
            is set to 7, then two compared lines are treated as parallel.</para>
            
            <para>Default value is set to <b>7</b>.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Math.Geometry.SimpleShapeChecker.LengthError">
             <summary>
             Maximum allowed difference in sides' length (relative to shapes' size), [0, 1].
             </summary>
            
             <remarks><para>The values sets maximum allowed difference between two sides' length
             to treat them as equal. The error value is set relative to shapes size and measured
             in [0, 1] range, which corresponds to [0%, 100%] range. Absolute length error in pixels
             is calculated as:
             <code lang="none">
             LengthError * ( width + height ) / 2
             </code>
             , where <b>width</b> and <b>height</b> is the size of bounding rectangle for the
             specified shape.
             </para>
             
             <para>Default value is set to <b>0.1</b> (10%).</para>
             </remarks>
            
        </member>
        <member name="T:AForge.Math.Histogram">
             <summary>
             Histogram for discrete random values.
             </summary>
             
             <remarks><para>The class wraps histogram for discrete stochastic function, which is represented
             by integer array, where indexes of the array are treated as values of the stochastic function,
             but array values are treated as "probabilities" (total amount of hits).
             </para>
             
             <para>Sample usage:</para>
             <code>
             // create histogram
             Histogram histogram = new Histogram( new int[10] { 0, 0, 1, 3, 6, 8, 11, 0, 0, 0 } );
             // get mean and standard deviation values
             Console.WriteLine( "mean = " + histogram.Mean + ", std.dev = " + histogram.StdDev );
             </code>
             </remarks>
            
        </member>
        <member name="M:AForge.Math.Histogram.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Math.Histogram"/> class.
            </summary>
            
            <param name="values">Values of the histogram.</param>
            
            <remarks><para>Indexes of the input array are treated as values of stochastic function,
            but array values are treated as "probabilities" (total amount of hits).
            </para></remarks>
            
        </member>
        <member name="M:AForge.Math.Histogram.GetRange(System.Double)">
            <summary>
            Get range around median containing specified percentage of values.
            </summary>
            
            <param name="percent">Values percentage around median.</param>
            
            <returns>Returns the range which containes specifies percentage of values.</returns>
            
            <remarks><para>The method calculates range of stochastic variable, which summary probability
            comprises the specified percentage of histogram's hits.</para>
            
            <para>Sample usage:</para>
            <code>
            // create histogram
            Histogram histogram = new Histogram( new int[10] { 0, 0, 1, 3, 6, 8, 11, 0, 0, 0 } );
            // get 50% range
            IntRange range = histogram.GetRange( 0.5 );
            // show the range ([4, 6])
            Console.WriteLine( "50% range = [" + range.Min + ", " + range.Max + "]" );
            </code>
            </remarks>
            
        </member>
        <member name="M:AForge.Math.Histogram.Update">
            <summary>
            Update statistical value of the histogram.
            </summary>
            
            <remarks>The method recalculates statistical values of the histogram, like mean,
            standard deviation, etc., in the case if histogram's values were changed directly.
            The method should be called only in the case if histogram's values were retrieved
            through <see cref="P:AForge.Math.Histogram.Values"/> property and updated after that.
            </remarks>
            
        </member>
        <member name="P:AForge.Math.Histogram.Values">
            <summary>
            Values of the histogram.
            </summary>
            
            <remarks><para>Indexes of this array are treated as values of stochastic function,
            but array values are treated as "probabilities" (total amount of hits).
            </para></remarks>
            
        </member>
        <member name="P:AForge.Math.Histogram.Mean">
            <summary>
            Mean value.
            </summary>
            
            <remarks><para>The property allows to retrieve mean value of the histogram.</para>
            
            <para>Sample usage:</para>
            <code>
            // create histogram
            Histogram histogram = new Histogram( new int[10] { 0, 0, 1, 3, 6, 8, 11, 0, 0, 0 } );
            // get mean value (= 4.862)
            Console.WriteLine( "mean = " + histogram.Mean.ToString( "F3" ) );
            </code>
            </remarks>
            
        </member>
        <member name="P:AForge.Math.Histogram.StdDev">
            <summary>
            Standard deviation.
            </summary>
            
            <remarks><para>The property allows to retrieve standard deviation value of the histogram.</para>
            
            <para>Sample usage:</para>
            <code>
            // create histogram
            Histogram histogram = new Histogram( new int[10] { 0, 0, 1, 3, 6, 8, 11, 0, 0, 0 } );
            // get std.dev. value (= 1.136)
            Console.WriteLine( "std.dev. = " + histogram.StdDev.ToString( "F3" ) );
            </code>
            </remarks>
            
        </member>
        <member name="P:AForge.Math.Histogram.Median">
            <summary>
            Median value.
            </summary>
            
            <remarks><para>The property allows to retrieve median value of the histogram.</para>
            
            <para>Sample usage:</para>
            <code>
            // create histogram
            Histogram histogram = new Histogram( new int[10] { 0, 0, 1, 3, 6, 8, 11, 0, 0, 0 } );
            // get median value (= 5)
            Console.WriteLine( "median = " + histogram.Median );
            </code>
            </remarks>
            
        </member>
        <member name="P:AForge.Math.Histogram.Min">
            <summary>
            Minimum value.
            </summary>
            
            <remarks><para>The property allows to retrieve minimum value of the histogram with non zero
            hits count.</para>
            
            <para>Sample usage:</para>
            <code>
            // create histogram
            Histogram histogram = new Histogram( new int[10] { 0, 0, 1, 3, 6, 8, 11, 0, 0, 0 } );
            // get min value (= 2)
            Console.WriteLine( "min = " + histogram.Min );
            </code>
            </remarks>
            
        </member>
        <member name="P:AForge.Math.Histogram.Max">
            <summary>
            Maximum value.
            </summary>
            
            <remarks><para>The property allows to retrieve maximum value of the histogram with non zero
            hits count.</para>
            
            <para>Sample usage:</para>
            <code>
            // create histogram
            Histogram histogram = new Histogram( new int[10] { 0, 0, 1, 3, 6, 8, 11, 0, 0, 0 } );
            // get max value (= 6)
            Console.WriteLine( "max = " + histogram.Max );
            </code>
            </remarks>
            
        </member>
        <member name="P:AForge.Math.Histogram.TotalCount">
             <summary>
             Total count of values.
             </summary>
             
             <remarks><para>The property represents total count of values contributed to the histogram, which is
             essentially sum of the <see cref="P:AForge.Math.Histogram.Values"/> array.</para>
            
             <para>Sample usage:</para>
             <code>
             // create histogram
             Histogram histogram = new Histogram( new int[10] { 0, 0, 1, 3, 6, 8, 11, 0, 0, 0 } );
             // get total value (= 29)
             Console.WriteLine( "total = " + histogram.TotalCount );
             </code>
             </remarks>
             
        </member>
        <member name="T:AForge.Math.Matrix3x3">
            <summary>
            A structure representing 3x3 matrix.
            </summary>
            
            <remarks><para>The structure incapsulates elements of a 3x3 matrix and
            provides some operations with it.</para></remarks>
            
        </member>
        <member name="F:AForge.Math.Matrix3x3.V00">
            <summary>
            Row 0 column 0 element of the matrix.
            </summary>
        </member>
        <member name="F:AForge.Math.Matrix3x3.V01">
            <summary>
            Row 0 column 1 element of the matrix.
            </summary>
        </member>
        <member name="F:AForge.Math.Matrix3x3.V02">
            <summary>
            Row 0 column 2 element of the matrix.
            </summary>
        </member>
        <member name="F:AForge.Math.Matrix3x3.V10">
            <summary>
            Row 1 column 0 element of the matrix.
            </summary>
        </member>
        <member name="F:AForge.Math.Matrix3x3.V11">
            <summary>
            Row 1 column 1 element of the matrix.
            </summary>
        </member>
        <member name="F:AForge.Math.Matrix3x3.V12">
            <summary>
            Row 1 column 2 element of the matrix.
            </summary>
        </member>
        <member name="F:AForge.Math.Matrix3x3.V20">
            <summary>
            Row 2 column 0 element of the matrix.
            </summary>
        </member>
        <member name="F:AForge.Math.Matrix3x3.V21">
            <summary>
            Row 2 column 1 element of the matrix.
            </summary>
        </member>
        <member name="F:AForge.Math.Matrix3x3.V22">
            <summary>
            Row 2 column 2 element of the matrix.
            </summary>
        </member>
        <member name="M:AForge.Math.Matrix3x3.ToArray">
            <summary>
            Returns array representation of the matrix.
            </summary>
            
            <returns>Returns array which contains all elements of the matrix in the row-major order.</returns>
            
        </member>
        <member name="M:AForge.Math.Matrix3x3.CreateRotationY(System.Single)">
            <summary>
            Creates rotation matrix around Y axis.
            </summary>
            
            <param name="radians">Rotation angle around Y axis in radians.</param>
            
            <returns>Returns rotation matrix to rotate an object around Y axis.</returns>
            
        </member>
        <member name="M:AForge.Math.Matrix3x3.CreateRotationX(System.Single)">
            <summary>
            Creates rotation matrix around X axis.
            </summary>
            
            <param name="radians">Rotation angle around X axis in radians.</param>
            
            <returns>Returns rotation matrix to rotate an object around X axis.</returns>
            
        </member>
        <member name="M:AForge.Math.Matrix3x3.CreateRotationZ(System.Single)">
            <summary>
            Creates rotation matrix around Z axis.
            </summary>
            
            <param name="radians">Rotation angle around Z axis in radians.</param>
            
            <returns>Returns rotation matrix to rotate an object around Z axis.</returns>
            
        </member>
        <member name="M:AForge.Math.Matrix3x3.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>
            Creates rotation matrix to rotate an object around X, Y and Z axes.
            </summary>
            
            <param name="yaw">Rotation angle around Y axis in radians.</param>
            <param name="pitch">Rotation angle around X axis in radians.</param>
            <param name="roll">Rotation angle around Z axis in radians.</param>
            
            <returns>Returns rotation matrix to rotate an object around all 3 axes.</returns>
            
            <remarks>
            <para><note>The routine assumes roll-pitch-yaw rotation order, when creating rotation
            matrix, i.e. an object is first rotated around Z axis, then around X axis and finally around
            Y axis.</note></para>
            </remarks>
            
        </member>
        <member name="M:AForge.Math.Matrix3x3.ExtractYawPitchRoll(System.Single@,System.Single@,System.Single@)">
            <summary>
            Extract rotation angles from the rotation matrix.
            </summary>
            
            <param name="yaw">Extracted rotation angle around Y axis in radians.</param>
            <param name="pitch">Extracted rotation angle around X axis in radians.</param>
            <param name="roll">Extracted rotation angle around Z axis in radians.</param>
            
            <remarks><para><note>The routine assumes roll-pitch-yaw rotation order when extracting rotation angle.
            Using extracted angles with the <see cref="M:AForge.Math.Matrix3x3.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)"/> should provide same rotation matrix.
            </note></para>
            
            <para><note>The method assumes the provided matrix represent valid rotation matrix.</note></para>
            
            <para>Sample usage:</para>
            <code>
            // assume we have a rotation matrix created like this
            float yaw   = 10.0f / 180 * Math.PI;
            float pitch = 30.0f / 180 * Math.PI;
            float roll  = 45.0f / 180 * Math.PI;
            
            Matrix3x3 rotationMatrix = Matrix3x3.CreateFromYawPitchRoll( yaw, pitch, roll );
            // ...
            
            // now somewhere in the code you may want to get rotation
            // angles back from a matrix assuming same rotation order
            float extractedYaw;
            float extractedPitch;
            float extractedRoll;
            
            rotation.ExtractYawPitchRoll( out extractedYaw, out extractedPitch, out extractedRoll );
            </code>
            </remarks>
            
        </member>
        <member name="M:AForge.Math.Matrix3x3.CreateFromRows(AForge.Math.Vector3,AForge.Math.Vector3,AForge.Math.Vector3)">
            <summary>
            Creates a matrix from 3 rows specified as vectors.
            </summary>
            
            <param name="row0">First row of the matrix to create.</param>
            <param name="row1">Second row of the matrix to create.</param>
            <param name="row2">Third row of the matrix to create.</param>
            
            <returns>Returns a matrix from specified rows.</returns>
            
        </member>
        <member name="M:AForge.Math.Matrix3x3.CreateFromColumns(AForge.Math.Vector3,AForge.Math.Vector3,AForge.Math.Vector3)">
            <summary>
            Creates a matrix from 3 columns specified as vectors.
            </summary>
            
            <param name="column0">First column of the matrix to create.</param>
            <param name="column1">Second column of the matrix to create.</param>
            <param name="column2">Third column of the matrix to create.</param>
            
            <returns>Returns a matrix from specified columns.</returns>
            
        </member>
        <member name="M:AForge.Math.Matrix3x3.CreateDiagonal(AForge.Math.Vector3)">
            <summary>
            Creates a diagonal matrix using the specified vector as diagonal elements.
            </summary>
            
            <param name="vector">Vector to use for diagonal elements of the matrix.</param>
            
            <returns>Returns a diagonal matrix.</returns>
            
        </member>
        <member name="M:AForge.Math.Matrix3x3.GetRow(System.Int32)">
            <summary>
            Get row of the matrix.
            </summary>
            
            <param name="index">Row index to get, [0, 2].</param>
            
            <returns>Returns specified row of the matrix as a vector.</returns>
            
            <exception cref="T:System.ArgumentException">Invalid row index was specified.</exception>
            
        </member>
        <member name="M:AForge.Math.Matrix3x3.GetColumn(System.Int32)">
            <summary>
            Get column of the matrix.
            </summary>
            
            <param name="index">Column index to get, [0, 2].</param>
            
            <returns>Returns specified column of the matrix as a vector.</returns>
            
            <exception cref="T:System.ArgumentException">Invalid column index was specified.</exception>
            
        </member>
        <member name="M:AForge.Math.Matrix3x3.op_Multiply(AForge.Math.Matrix3x3,AForge.Math.Matrix3x3)">
            <summary>
            Multiplies two specified matrices.
            </summary>
            
            <param name="matrix1">Matrix to multiply.</param>
            <param name="matrix2">Matrix to multiply by.</param>
            
            <returns>Return new matrix, which the result of multiplication of the two specified matrices.</returns>
            
        </member>
        <member name="M:AForge.Math.Matrix3x3.Multiply(AForge.Math.Matrix3x3,AForge.Math.Matrix3x3)">
            <summary>
            Multiplies two specified matrices.
            </summary>
            
            <param name="matrix1">Matrix to multiply.</param>
            <param name="matrix2">Matrix to multiply by.</param>
            
            <returns>Return new matrix, which the result of multiplication of the two specified matrices.</returns>
            
        </member>
        <member name="M:AForge.Math.Matrix3x3.op_Addition(AForge.Math.Matrix3x3,AForge.Math.Matrix3x3)">
             <summary>
             Adds corresponding components of two matrices.
             </summary>
             
             <param name="matrix1">The matrix to add to.</param>
             <param name="matrix2">The matrix to add to the first matrix.</param>
             
             <returns>Returns a matrix which components are equal to sum of corresponding
             components of the two specified matrices.</returns>
            
        </member>
        <member name="M:AForge.Math.Matrix3x3.Add(AForge.Math.Matrix3x3,AForge.Math.Matrix3x3)">
             <summary>
             Adds corresponding components of two matrices.
             </summary>
             
             <param name="matrix1">The matrix to add to.</param>
             <param name="matrix2">The matrix to add to the first matrix.</param>
             
             <returns>Returns a matrix which components are equal to sum of corresponding
             components of the two specified matrices.</returns>
            
        </member>
        <member name="M:AForge.Math.Matrix3x3.op_Subtraction(AForge.Math.Matrix3x3,AForge.Math.Matrix3x3)">
             <summary>
             Subtracts corresponding components of two matrices.
             </summary>
             
             <param name="matrix1">The matrix to subtract from.</param>
             <param name="matrix2">The matrix to subtract from the first matrix.</param>
             
             <returns>Returns a matrix which components are equal to difference of corresponding
             components of the two specified matrices.</returns>
            
        </member>
        <member name="M:AForge.Math.Matrix3x3.Subtract(AForge.Math.Matrix3x3,AForge.Math.Matrix3x3)">
             <summary>
             Subtracts corresponding components of two matrices.
             </summary>
             
             <param name="matrix1">The matrix to subtract from.</param>
             <param name="matrix2">The matrix to subtract from the first matrix.</param>
             
             <returns>Returns a matrix which components are equal to difference of corresponding
             components of the two specified matrices.</returns>
            
        </member>
        <member name="M:AForge.Math.Matrix3x3.op_Multiply(AForge.Math.Matrix3x3,AForge.Math.Vector3)">
             <summary>
             Multiplies specified matrix by the specified vector.
             </summary>
             
             <param name="matrix">Matrix to multiply by vector.</param>
             <param name="vector">Vector to multiply matrix by.</param>
             
             <returns>Returns new vector which is the result of multiplication of the specified matrix
             by the specified vector.</returns>
            
        </member>
        <member name="M:AForge.Math.Matrix3x3.Multiply(AForge.Math.Matrix3x3,AForge.Math.Vector3)">
             <summary>
             Multiplies specified matrix by the specified vector.
             </summary>
             
             <param name="matrix">Matrix to multiply by vector.</param>
             <param name="vector">Vector to multiply matrix by.</param>
             
             <returns>Returns new vector which is the result of multiplication of the specified matrix
             by the specified vector.</returns>
            
        </member>
        <member name="M:AForge.Math.Matrix3x3.op_Multiply(AForge.Math.Matrix3x3,System.Single)">
            <summary>
            Multiplies matrix by the specified factor.
            </summary>
            
            <param name="matrix">Matrix to multiply.</param>
            <param name="factor">Factor to multiple the specified matrix by.</param>
            
            <returns>Returns new matrix with all components equal to corresponding components of the
            specified matrix multiples by the specified factor.</returns>
            
        </member>
        <member name="M:AForge.Math.Matrix3x3.Multiply(AForge.Math.Matrix3x3,System.Single)">
            <summary>
            Multiplies matrix by the specified factor.
            </summary>
            
            <param name="matrix">Matrix to multiply.</param>
            <param name="factor">Factor to multiple the specified matrix by.</param>
            
            <returns>Returns new matrix with all components equal to corresponding components of the
            specified matrix multiples by the specified factor.</returns>
            
        </member>
        <member name="M:AForge.Math.Matrix3x3.op_Addition(AForge.Math.Matrix3x3,System.Single)">
            <summary>
            Adds specified value to all components of the specified matrix.
            </summary>
            
            <param name="matrix">Matrix to add value to.</param>
            <param name="value">Value to add to all components of the specified matrix.</param>
            
            <returns>Returns new matrix with all components equal to corresponding components of the
            specified matrix increased by the specified value.</returns>
            
        </member>
        <member name="M:AForge.Math.Matrix3x3.Add(AForge.Math.Matrix3x3,System.Single)">
            <summary>
            Adds specified value to all components of the specified matrix.
            </summary>
            
            <param name="matrix">Matrix to add value to.</param>
            <param name="value">Value to add to all components of the specified matrix.</param>
            
            <returns>Returns new matrix with all components equal to corresponding components of the
            specified matrix increased by the specified value.</returns>
            
        </member>
        <member name="M:AForge.Math.Matrix3x3.op_Equality(AForge.Math.Matrix3x3,AForge.Math.Matrix3x3)">
            <summary>
            Tests whether two specified matrices are equal.
            </summary>
            
            <param name="matrix1">The left-hand matrix.</param>
            <param name="matrix2">The right-hand matrix.</param>
            
            <returns>Returns <see langword="true"/> if the two matrices are equal or <see langword="false"/> otherwise.</returns>
            
        </member>
        <member name="M:AForge.Math.Matrix3x3.op_Inequality(AForge.Math.Matrix3x3,AForge.Math.Matrix3x3)">
            <summary>
            Tests whether two specified matrices are not equal.
            </summary>
            
            <param name="matrix1">The left-hand matrix.</param>
            <param name="matrix2">The right-hand matrix.</param>
            
            <returns>Returns <see langword="true"/> if the two matrices are not equal or <see langword="false"/> otherwise.</returns>
            
        </member>
        <member name="M:AForge.Math.Matrix3x3.Equals(AForge.Math.Matrix3x3)">
            <summary>
            Tests whether the matrix equals to the specified one.
            </summary>
            
            <param name="matrix">The matrix to test equality with.</param>
            
            <returns>Returns <see langword="true"/> if the two matrices are equal or <see langword="false"/> otherwise.</returns>
            
        </member>
        <member name="M:AForge.Math.Matrix3x3.Equals(System.Object)">
            <summary>
            Tests whether the matrix equals to the specified object.
            </summary>
            
            <param name="obj">The object to test equality with.</param>
            
            <returns>Returns <see langword="true"/> if the matrix equals to the specified object or <see langword="false"/> otherwise.</returns>
            
        </member>
        <member name="M:AForge.Math.Matrix3x3.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            
            <returns>A 32-bit signed integer hash code.</returns>
            
        </member>
        <member name="M:AForge.Math.Matrix3x3.Transpose">
            <summary>
            Transpose the matrix, A<sup>T</sup>.
            </summary>
            
            <returns>Return a matrix which equals to transposition of this matrix.</returns>
            
        </member>
        <member name="M:AForge.Math.Matrix3x3.MultiplySelfByTranspose">
             <summary>
             Multiply the matrix by its transposition, A*A<sup>T</sup>.
             </summary>
             
             <returns>Returns a matrix which is the result of multiplying this matrix by its transposition.</returns>
            
        </member>
        <member name="M:AForge.Math.Matrix3x3.MultiplyTransposeBySelf">
             <summary>
             Multiply transposition of this matrix by itself, A<sup>T</sup>*A.
             </summary>
             
             <returns>Returns a matrix which is the result of multiplying this matrix's transposition by itself.</returns>
            
        </member>
        <member name="M:AForge.Math.Matrix3x3.Adjugate">
            <summary>
            Calculate adjugate of the matrix, adj(A).
            </summary>
            
            <returns>Returns adjugate of the matrix.</returns>
            
        </member>
        <member name="M:AForge.Math.Matrix3x3.Inverse">
            <summary>
            Calculate inverse of the matrix, A<sup>-1</sup>.
            </summary>
            
            <returns>Returns inverse of the matrix.</returns>
            
            <exception cref="T:System.ArgumentException">Cannot calculate inverse of the matrix since it is singular.</exception>
            
        </member>
        <member name="M:AForge.Math.Matrix3x3.PseudoInverse">
            <summary>
            Calculate pseudo inverse of the matrix, A<sup>+</sup>.
            </summary>
            
            <returns>Returns pseudo inverse of the matrix.</returns>
            
            <remarks><para>The pseudo inverse of the matrix is calculate through its <see cref="M:AForge.Math.Matrix3x3.SVD(AForge.Math.Matrix3x3@,AForge.Math.Vector3@,AForge.Math.Matrix3x3@)"/>
            as V*E<sup>+</sup>*U<sup>T</sup>.</para></remarks>
            
        </member>
        <member name="M:AForge.Math.Matrix3x3.SVD(AForge.Math.Matrix3x3@,AForge.Math.Vector3@,AForge.Math.Matrix3x3@)">
            <summary>
            Calculate Singular Value Decomposition (SVD) of the matrix, such as A=U*E*V<sup>T</sup>.
            </summary>
            
            <param name="u">Output parameter which gets 3x3 U matrix.</param>
            <param name="e">Output parameter which gets diagonal elements of the E matrix.</param>
            <param name="v">Output parameter which gets 3x3 V matrix.</param>
            
            <remarks><para>Having components U, E and V the source matrix can be reproduced using below code:
            <code>
            Matrix3x3 source = u * Matrix3x3.Diagonal( e ) * v.Transpose( );
            </code>
            </para></remarks>
            
        </member>
        <member name="P:AForge.Math.Matrix3x3.Identity">
            <summary>
            Provides an identity matrix with all diagonal elements set to 1.
            </summary>
        </member>
        <member name="P:AForge.Math.Matrix3x3.Determinant">
            <summary>
            Calculates determinant of the matrix.
            </summary>
        </member>
        <member name="T:AForge.Math.Matrix4x4">
            <summary>
            A structure representing 4x4 matrix.
            </summary>
            
            <remarks><para>The structure incapsulates elements of a 4x4 matrix and
            provides some operations with it.</para></remarks>
            
        </member>
        <member name="F:AForge.Math.Matrix4x4.V00">
            <summary>
            Row 0 column 0 element of the matrix.
            </summary>
        </member>
        <member name="F:AForge.Math.Matrix4x4.V01">
            <summary>
            Row 0 column 1 element of the matrix.
            </summary>
        </member>
        <member name="F:AForge.Math.Matrix4x4.V02">
            <summary>
            Row 0 column 2 element of the matrix.
            </summary>
        </member>
        <member name="F:AForge.Math.Matrix4x4.V03">
            <summary>
            Row 0 column 3 element of the matrix.
            </summary>
        </member>
        <member name="F:AForge.Math.Matrix4x4.V10">
            <summary>
            Row 1 column 0 element of the matrix.
            </summary>
        </member>
        <member name="F:AForge.Math.Matrix4x4.V11">
            <summary>
            Row 1 column 1 element of the matrix.
            </summary>
        </member>
        <member name="F:AForge.Math.Matrix4x4.V12">
            <summary>
            Row 1 column 2 element of the matrix.
            </summary>
        </member>
        <member name="F:AForge.Math.Matrix4x4.V13">
            <summary>
            Row 1 column 3 element of the matrix.
            </summary>
        </member>
        <member name="F:AForge.Math.Matrix4x4.V20">
            <summary>
            Row 2 column 0 element of the matrix.
            </summary>
        </member>
        <member name="F:AForge.Math.Matrix4x4.V21">
            <summary>
            Row 2 column 1 element of the matrix.
            </summary>
        </member>
        <member name="F:AForge.Math.Matrix4x4.V22">
            <summary>
            Row 2 column 2 element of the matrix.
            </summary>
        </member>
        <member name="F:AForge.Math.Matrix4x4.V23">
            <summary>
            Row 2 column 3 element of the matrix.
            </summary>
        </member>
        <member name="F:AForge.Math.Matrix4x4.V30">
            <summary>
            Row 3 column 0 element of the matrix.
            </summary>
        </member>
        <member name="F:AForge.Math.Matrix4x4.V31">
            <summary>
            Row 3 column 1 element of the matrix.
            </summary>
        </member>
        <member name="F:AForge.Math.Matrix4x4.V32">
            <summary>
            Row 3 column 2 element of the matrix.
            </summary>
        </member>
        <member name="F:AForge.Math.Matrix4x4.V33">
            <summary>
            Row 3 column 3 element of the matrix.
            </summary>
        </member>
        <member name="M:AForge.Math.Matrix4x4.ToArray">
            <summary>
            Returns array representation of the matrix.
            </summary>
            
            <returns>Returns array which contains all elements of the matrix in the row-major order.</returns>
            
        </member>
        <member name="M:AForge.Math.Matrix4x4.CreateRotationY(System.Single)">
            <summary>
            Creates rotation matrix around Y axis.
            </summary>
            
            <param name="radians">Rotation angle around Y axis in radians.</param>
            
            <returns>Returns rotation matrix to rotate an object around Y axis.</returns>
            
        </member>
        <member name="M:AForge.Math.Matrix4x4.CreateRotationX(System.Single)">
            <summary>
            Creates rotation matrix around X axis.
            </summary>
            
            <param name="radians">Rotation angle around X axis in radians.</param>
            
            <returns>Returns rotation matrix to rotate an object around X axis.</returns>
            
        </member>
        <member name="M:AForge.Math.Matrix4x4.CreateRotationZ(System.Single)">
            <summary>
            Creates rotation matrix around Z axis.
            </summary>
            
            <param name="radians">Rotation angle around Z axis in radians.</param>
            
            <returns>Returns rotation matrix to rotate an object around Z axis.</returns>
            
        </member>
        <member name="M:AForge.Math.Matrix4x4.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>
            Creates rotation matrix to rotate an object around X, Y and Z axes.
            </summary>
            
            <param name="yaw">Rotation angle around Y axis in radians.</param>
            <param name="pitch">Rotation angle around X axis in radians.</param>
            <param name="roll">Rotation angle around Z axis in radians.</param>
            
            <returns>Returns rotation matrix to rotate an object around all 3 axes.</returns>
            
            <remarks>
            <para><note>The routine assumes roll-pitch-yaw rotation order, when creating rotation
            matrix, i.e. an object is first rotated around Z axis, then around X axis and finally around
            Y axis.</note></para>
            </remarks>
            
        </member>
        <member name="M:AForge.Math.Matrix4x4.ExtractYawPitchRoll(System.Single@,System.Single@,System.Single@)">
            <summary>
            Extract rotation angles from the rotation matrix.
            </summary>
            
            <param name="yaw">Extracted rotation angle around Y axis in radians.</param>
            <param name="pitch">Extracted rotation angle around X axis in radians.</param>
            <param name="roll">Extracted rotation angle around Z axis in radians.</param>
            
            <remarks><para><note>The routine assumes roll-pitch-yaw rotation order when extracting rotation angle.
            Using extracted angles with the <see cref="M:AForge.Math.Matrix4x4.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)"/> should provide same rotation matrix.
            </note></para>
            
            <para><note>The method assumes the provided matrix represent valid rotation matrix.</note></para>
            
            <para>Sample usage:</para>
            <code>
            // assume we have a rotation matrix created like this
            float yaw   = 10.0f / 180 * Math.PI;
            float pitch = 30.0f / 180 * Math.PI;
            float roll  = 45.0f / 180 * Math.PI;
            
            Matrix4x4 rotationMatrix = Matrix3x3.CreateFromYawPitchRoll( yaw, pitch, roll );
            // ...
            
            // now somewhere in the code you may want to get rotation
            // angles back from a matrix assuming same rotation order
            float extractedYaw;
            float extractedPitch;
            float extractedRoll;
            
            rotation.ExtractYawPitchRoll( out extractedYaw, out extractedPitch, out extractedRoll );
            </code>
            </remarks>
            
        </member>
        <member name="M:AForge.Math.Matrix4x4.CreateFromRotation(AForge.Math.Matrix3x3)">
            <summary>
            Creates 4x4 tranformation matrix from 3x3 rotation matrix.
            </summary>
            
            <param name="rotationMatrix">Source 3x3 rotation matrix.</param>
            
            <returns>Returns 4x4 rotation matrix.</returns>
            
            <remarks><para>The source 3x3 rotation matrix is copied into the top left corner of the result 4x4 matrix,
            i.e. it represents 0th, 1st and 2nd row/column. The <see cref="F:AForge.Math.Matrix4x4.V33"/> element is set to 1 and the rest
            elements of 3rd row and 3rd column are set to zeros.</para></remarks>
            
        </member>
        <member name="M:AForge.Math.Matrix4x4.CreateTranslation(AForge.Math.Vector3)">
            <summary>
            Creates translation matrix for the specified movement amount.
            </summary>
            
            <param name="position">Vector which set direction and amount of movement.</param>
            
            <returns>Returns translation matrix.</returns>
            
            <remarks><para>The specified vector is copied to the 3rd column of the result matrix.
            All diagonal elements are set to 1. The rest of matrix is initialized with zeros.</para></remarks>
            
        </member>
        <member name="M:AForge.Math.Matrix4x4.CreateLookAt(AForge.Math.Vector3,AForge.Math.Vector3)">
            <summary>
            Creates a view matrix for the specified camera position and target point.
            </summary>
            
            <param name="cameraPosition">Position of camera.</param>
            <param name="cameraTarget">Target point towards which camera is pointing.</param>
            
            <returns>Returns a view matrix.</returns>
            
            <remarks><para>Camera's "up" vector is supposed to be (0, 1, 0).</para></remarks>
            
        </member>
        <member name="M:AForge.Math.Matrix4x4.CreatePerspective(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a perspective projection matrix.
            </summary>
            
            <param name="width">Width of the view volume at the near view plane.</param>
            <param name="height">Height of the view volume at the near view plane.</param>
            <param name="nearPlaneDistance">Distance to the near view plane.</param>
            <param name="farPlaneDistance">Distance to the far view plane.</param>
            
            <returns>Return a perspective projection matrix.</returns>
            
            <exception cref="T:System.ArgumentOutOfRangeException">Both near and far view planes' distances must be greater than zero.</exception>
            <exception cref="T:System.ArgumentException">Near plane must be closer than the far plane.</exception>
            
        </member>
        <member name="M:AForge.Math.Matrix4x4.CreateFromRows(AForge.Math.Vector4,AForge.Math.Vector4,AForge.Math.Vector4,AForge.Math.Vector4)">
            <summary>
            Creates a matrix from 4 rows specified as vectors.
            </summary>
            
            <param name="row0">First row of the matrix to create.</param>
            <param name="row1">Second row of the matrix to create.</param>
            <param name="row2">Third row of the matrix to create.</param>
            <param name="row3">Fourth row of the matrix to create.</param>
            
            <returns>Returns a matrix from specified rows.</returns>
            
        </member>
        <member name="M:AForge.Math.Matrix4x4.CreateFromColumns(AForge.Math.Vector4,AForge.Math.Vector4,AForge.Math.Vector4,AForge.Math.Vector4)">
            <summary>
            Creates a matrix from 4 columns specified as vectors.
            </summary>
            
            <param name="column0">First column of the matrix to create.</param>
            <param name="column1">Second column of the matrix to create.</param>
            <param name="column2">Third column of the matrix to create.</param>
            <param name="column3">Fourth column of the matrix to create.</param>
            
            <returns>Returns a matrix from specified columns.</returns>
            
        </member>
        <member name="M:AForge.Math.Matrix4x4.CreateDiagonal(AForge.Math.Vector4)">
            <summary>
            Creates a diagonal matrix using the specified vector as diagonal elements.
            </summary>
            
            <param name="vector">Vector to use for diagonal elements of the matrix.</param>
            
            <returns>Returns a diagonal matrix.</returns>
            
        </member>
        <member name="M:AForge.Math.Matrix4x4.GetRow(System.Int32)">
            <summary>
            Get row of the matrix.
            </summary>
            
            <param name="index">Row index to get, [0, 3].</param>
            
            <returns>Returns specified row of the matrix as a vector.</returns>
            
            <exception cref="T:System.ArgumentException">Invalid row index was specified.</exception>
            
        </member>
        <member name="M:AForge.Math.Matrix4x4.GetColumn(System.Int32)">
            <summary>
            Get column of the matrix.
            </summary>
            
            <param name="index">Column index to get, [0, 3].</param>
            
            <returns>Returns specified column of the matrix as a vector.</returns>
            
            <exception cref="T:System.ArgumentException">Invalid column index was specified.</exception>
            
        </member>
        <member name="M:AForge.Math.Matrix4x4.op_Multiply(AForge.Math.Matrix4x4,AForge.Math.Matrix4x4)">
            <summary>
            Multiplies two specified matrices.
            </summary>
            
            <param name="matrix1">Matrix to multiply.</param>
            <param name="matrix2">Matrix to multiply by.</param>
            
            <returns>Return new matrix, which the result of multiplication of the two specified matrices.</returns>
            
        </member>
        <member name="M:AForge.Math.Matrix4x4.Multiply(AForge.Math.Matrix4x4,AForge.Math.Matrix4x4)">
            <summary>
            Multiplies two specified matrices.
            </summary>
            
            <param name="matrix1">Matrix to multiply.</param>
            <param name="matrix2">Matrix to multiply by.</param>
            
            <returns>Return new matrix, which the result of multiplication of the two specified matrices.</returns>
            
        </member>
        <member name="M:AForge.Math.Matrix4x4.op_Addition(AForge.Math.Matrix4x4,AForge.Math.Matrix4x4)">
             <summary>
             Adds corresponding components of two matrices.
             </summary>
             
             <param name="matrix1">The matrix to add to.</param>
             <param name="matrix2">The matrix to add to the first matrix.</param>
             
             <returns>Returns a matrix which components are equal to sum of corresponding
             components of the two specified matrices.</returns>
            
        </member>
        <member name="M:AForge.Math.Matrix4x4.Add(AForge.Math.Matrix4x4,AForge.Math.Matrix4x4)">
             <summary>
             Adds corresponding components of two matrices.
             </summary>
             
             <param name="matrix1">The matrix to add to.</param>
             <param name="matrix2">The matrix to add to the first matrix.</param>
             
             <returns>Returns a matrix which components are equal to sum of corresponding
             components of the two specified matrices.</returns>
            
        </member>
        <member name="M:AForge.Math.Matrix4x4.op_Subtraction(AForge.Math.Matrix4x4,AForge.Math.Matrix4x4)">
             <summary>
             Subtracts corresponding components of two matrices.
             </summary>
             
             <param name="matrix1">The matrix to subtract from.</param>
             <param name="matrix2">The matrix to subtract from the first matrix.</param>
             
             <returns>Returns a matrix which components are equal to difference of corresponding
             components of the two specified matrices.</returns>
            
        </member>
        <member name="M:AForge.Math.Matrix4x4.Subtract(AForge.Math.Matrix4x4,AForge.Math.Matrix4x4)">
             <summary>
             Subtracts corresponding components of two matrices.
             </summary>
             
             <param name="matrix1">The matrix to subtract from.</param>
             <param name="matrix2">The matrix to subtract from the first matrix.</param>
             
             <returns>Returns a matrix which components are equal to difference of corresponding
             components of the two specified matrices.</returns>
            
        </member>
        <member name="M:AForge.Math.Matrix4x4.op_Multiply(AForge.Math.Matrix4x4,AForge.Math.Vector4)">
             <summary>
             Multiplies specified matrix by the specified vector.
             </summary>
             
             <param name="matrix">Matrix to multiply by vector.</param>
             <param name="vector">Vector to multiply matrix by.</param>
             
             <returns>Returns new vector which is the result of multiplication of the specified matrix
             by the specified vector.</returns>
            
        </member>
        <member name="M:AForge.Math.Matrix4x4.Multiply(AForge.Math.Matrix4x4,AForge.Math.Vector4)">
             <summary>
             Multiplies specified matrix by the specified vector.
             </summary>
             
             <param name="matrix">Matrix to multiply by vector.</param>
             <param name="vector">Vector to multiply matrix by.</param>
             
             <returns>Returns new vector which is the result of multiplication of the specified matrix
             by the specified vector.</returns>
            
        </member>
        <member name="M:AForge.Math.Matrix4x4.op_Equality(AForge.Math.Matrix4x4,AForge.Math.Matrix4x4)">
            <summary>
            Tests whether two specified matrices are equal.
            </summary>
            
            <param name="matrix1">The left-hand matrix.</param>
            <param name="matrix2">The right-hand matrix.</param>
            
            <returns>Returns <see langword="true"/> if the two matrices are equal or <see langword="false"/> otherwise.</returns>
            
        </member>
        <member name="M:AForge.Math.Matrix4x4.op_Inequality(AForge.Math.Matrix4x4,AForge.Math.Matrix4x4)">
            <summary>
            Tests whether two specified matrices are not equal.
            </summary>
            
            <param name="matrix1">The left-hand matrix.</param>
            <param name="matrix2">The right-hand matrix.</param>
            
            <returns>Returns <see langword="true"/> if the two matrices are not equal or <see langword="false"/> otherwise.</returns>
            
        </member>
        <member name="M:AForge.Math.Matrix4x4.Equals(AForge.Math.Matrix4x4)">
            <summary>
            Tests whether the matrix equals to the specified one.
            </summary>
            
            <param name="matrix">The matrix to test equality with.</param>
            
            <returns>Returns <see langword="true"/> if the two matrices are equal or <see langword="false"/> otherwise.</returns>
            
        </member>
        <member name="M:AForge.Math.Matrix4x4.Equals(System.Object)">
            <summary>
            Tests whether the matrix equals to the specified object.
            </summary>
            
            <param name="obj">The object to test equality with.</param>
            
            <returns>Returns <see langword="true"/> if the matrix equals to the specified object or <see langword="false"/> otherwise.</returns>
            
        </member>
        <member name="M:AForge.Math.Matrix4x4.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            
            <returns>A 32-bit signed integer hash code.</returns>
            
        </member>
        <member name="P:AForge.Math.Matrix4x4.Identity">
            <summary>
            Provides an identity matrix with all diagonal elements set to 1.
            </summary>
        </member>
        <member name="T:AForge.Math.Metrics.CosineDistance">
            <summary>
            Cosine distance metric. 
            </summary>
            
            <remarks><para>This class represents the cosine distance metric (1 - cosine similarity)
            <a href="http://en.wikipedia.org/wiki/Cosine_similarity"></a>.
            </para>
            
            <para>Sample usage:</para>
            <code>
            // instantiate new distance class
            CosineDistance dist = new CosineDistance(); 
            // create two vectors for inputs
            double[] p = new double[] { 2.5, 3.5, 3.0, 3.5, 2.5, 3.0 };
            double[] q = new double[] { 3.0, 3.5, 1.5, 5.0, 3.5, 3.0 };
            // get distance between the two vectors
            double distance = dist.GetDistance( p, q );
            </code>
            </remarks>
            
        </member>
        <member name="T:AForge.Math.Metrics.IDistance">
             <summary>
             Interface for distance metric algorithms.
             </summary>
             
             <remarks><para>The interface defines a set of methods implemented
             by distance metric algorithms. These algorithms typically take a set of points and return a 
             distance measure of the x and y coordinates. In this case, the points are represented by two vectors.</para>
             
             <para>Distance metric algorithms are used in many machine learning algorithms e.g K-nearest neighbor
             and K-means clustering.</para>
            
             <para>For additional details about distance metrics, documentation of the
             particular algorithms should be studied.</para>
             </remarks>
             
        </member>
        <member name="M:AForge.Math.Metrics.IDistance.GetDistance(System.Double[],System.Double[])">
            <summary>
            Returns distance between two N-dimensional double vectors.
            </summary>
            
            <param name="p">1st point vector.</param>
            <param name="q">2nd point vector.</param>
            
            <returns>Returns distance measurement determined by the given algorithm.</returns>
            
        </member>
        <member name="M:AForge.Math.Metrics.CosineDistance.GetDistance(System.Double[],System.Double[])">
            <summary>
            Returns distance between two N-dimensional double vectors.
            </summary>
            
            <param name="p">1st point vector.</param>
            <param name="q">2nd point vector.</param>
            
            <returns>Returns Cosine distance between two supplied vectors.</returns>
            
            <exception cref="T:System.ArgumentException">Thrown if the two vectors are of different dimensions (if specified
            array have different length).</exception>
            
        </member>
        <member name="T:AForge.Math.Metrics.CosineSimilarity">
            <summary>
            Cosine similarity metric. 
            </summary>
            
            <remarks><para>This class represents the 
            <a href="http://en.wikipedia.org/wiki/Cosine_similarity">Cosine Similarity metric</a>.</para>
            
            <para>Sample usage:</para>
            <code>
            // instantiate new similarity class
            CosineSimilarity sim = new CosineSimilarity( ); 
            // create two vectors for inputs
            double[] p = new double[] { 2.5, 3.5, 3.0, 3.5, 2.5, 3.0 };
            double[] q = new double[] { 3.0, 3.5, 1.5, 5.0, 3.5, 3.0 };
            // get similarity between the two vectors
            double similarityScore = sim.GetSimilarityScore( p, q );
            </code>    
            </remarks>
            
        </member>
        <member name="T:AForge.Math.Metrics.ISimilarity">
             <summary>
             Interface for similarity algorithms.
             </summary>
             
             <remarks><para>The interface defines a set of methods implemented
             by similarity and correlation algorithms. These algorithms typically take a set of points and return a 
             similarity score for the two vectors.</para>
             
             <para>Similarity and correlation algorithms are used in many machine learning and collaborative
             filtering algorithms.</para>
            
             <para>For additional details about similarity metrics, documentation of the
             particular algorithms should be studied.</para>
             </remarks>
             
        </member>
        <member name="M:AForge.Math.Metrics.ISimilarity.GetSimilarityScore(System.Double[],System.Double[])">
            <summary>
            Returns similarity score for two N-dimensional double vectors. 
            </summary>
            
            <param name="p">1st point vector.</param>
            <param name="q">2nd point vector.</param>
            
            <returns>Returns similarity score determined by the given algorithm.</returns>
            
        </member>
        <member name="M:AForge.Math.Metrics.CosineSimilarity.GetSimilarityScore(System.Double[],System.Double[])">
            <summary>
            Returns similarity score for two N-dimensional double vectors. 
            </summary>
            
            <param name="p">1st point vector.</param>
            <param name="q">2nd point vector.</param>
            
            <returns>Returns Cosine similarity between two supplied vectors.</returns>
            
            <exception cref="T:System.ArgumentException">Thrown if the two vectors are of different dimensions (if specified
            array have different length).</exception>
            
        </member>
        <member name="T:AForge.Math.Metrics.EuclideanDistance">
            <summary>
            Euclidean distance metric.
            </summary>
            
            <remarks><para>This class represents the 
            <a href="http://en.wikipedia.org/wiki/Euclidean_distance">Euclidean distance metric.</a></para>
            
            <para>Sample usage:</para>
            <code>
            // instantiate new distance class
            EuclideanDistance dist = new EuclideanDistance( );
            // create two vectors for inputs
            double[] p = new double[] { 2.5, 3.5, 3.0, 3.5, 2.5, 3.0 };
            double[] q = new double[] { 3.0, 3.5, 1.5, 5.0, 3.5, 3.0 };
            // get distance between the two vectors
            double distance = dist.GetDistance( p, q );
            </code>
            </remarks>
            
        </member>
        <member name="M:AForge.Math.Metrics.EuclideanDistance.GetDistance(System.Double[],System.Double[])">
            <summary>
            Returns distance between two N-dimensional double vectors.
            </summary>
            
            <param name="p">1st point vector.</param>
            <param name="q">2nd point vector.</param>
            
            <returns>Returns Euclidean distance between two supplied vectors.</returns>
            
            <exception cref="T:System.ArgumentException">Thrown if the two vectors are of different dimensions (if specified
            array have different length).</exception>
            
        </member>
        <member name="T:AForge.Math.Metrics.EuclideanSimilarity">
            <summary>
            Euclidean similarity metric. 
            </summary>
            
            <remarks><para>This class represents the 
            <a href="http://en.wikipedia.org/wiki/Euclidean_distance">Euclidean Similarity metric</a>,
            which is calculated as 1.0 / ( 1.0 + EuclideanDistance ).</para>
            
            <para>Sample usage:</para>
            <code>
            // instantiate new similarity class
            EuclideanSimilarity sim = new EuclideanSimilarity( ); 
            // create two vectors for inputs
            double[] p = new double[] { 2.5, 3.5, 3.0, 3.5, 2.5, 3.0 };
            double[] q = new double[] { 3.0, 3.5, 1.5, 5.0, 3.5, 3.0 };
            // get simirarity between the two vectors
            double similarityScore = sim.GetSimilarityScore( p, q );
            </code>    
            </remarks>
            
        </member>
        <member name="M:AForge.Math.Metrics.EuclideanSimilarity.GetSimilarityScore(System.Double[],System.Double[])">
            <summary>
            Returns similarity score for two N-dimensional double vectors. 
            </summary>
            
            <param name="p">1st point vector.</param>
            <param name="q">2nd point vector.</param>
            
            <returns>Returns Euclidean similarity between two supplied vectors.</returns>
            
            <exception cref="T:System.ArgumentException">Thrown if the two vectors are of different dimensions (if specified
            array have different length).</exception>
            
        </member>
        <member name="T:AForge.Math.Metrics.HammingDistance">
            <summary>
            Hamming distance metric. 
            </summary>
            
            <remarks><para>This class represents the 
            <a href="http://en.wikipedia.org/wiki/Hamming_Distance">Hamming distance metric</a>.</para>
            
            <para>Sample usage:</para>
            <code>
            // instantiate new distance class
            HammingDistance dist = new HammingDistance( ); 
            // create two vectors for inputs
            double[] p = new double[] { 2.5, 3.5, 3.0, 3.5, 2.5, 3.0 };
            double[] q = new double[] { 3.0, 3.5, 1.5, 5.0, 3.5, 3.0 };
            // get distance between the two vectors
            double distance = dist.GetDistance( p, q );
            </code>
            </remarks>
            
        </member>
        <member name="M:AForge.Math.Metrics.HammingDistance.GetDistance(System.Double[],System.Double[])">
            <summary>
            Returns distance between two N-dimensional double vectors.
            </summary>
            
            <param name="p">1st point vector.</param>
            <param name="q">2nd point vector.</param>
            
            <returns>Returns Hamming distance between two supplied vectors.</returns>
            
            <exception cref="T:System.ArgumentException">Thrown if the two vectors are of different dimensions (if specified
            array have different length).</exception>
            
        </member>
        <member name="T:AForge.Math.Metrics.JaccardDistance">
            <summary>
            Jaccard distance metric. 
            </summary>
            
            <remarks><para>This class represents the 
            <a href="http://en.wikipedia.org/wiki/Jaccard_distance">Jaccard distance metric</a>.</para>
            
            <para>Sample usage:</para>
            <code>
            // instantiate new distance class
            JaccardDistance dist = new JaccardDistance( ); 
            // create two vectors for inputs
            double[] p = new double[] { 2.5, 3.5, 3.0, 3.5, 2.5, 3.0 };
            double[] q = new double[] { 3.0, 3.5, 1.5, 5.0, 3.5, 3.0 };
            // get distance between the two vectors
            double distance = dist.GetDistance( p, q );
            </code>   
            </remarks>
            
        </member>
        <member name="M:AForge.Math.Metrics.JaccardDistance.GetDistance(System.Double[],System.Double[])">
            <summary>
            Returns distance between two N-dimensional double vectors.
            </summary>
            
            <param name="p">1st point vector.</param>
            <param name="q">2nd point vector.</param>
            
            <returns>Returns Jaccard distance between two supplied vectors.</returns>
            
            <exception cref="T:System.ArgumentException">Thrown if the two vectors are of different dimensions (if specified
            array have different length).</exception>
            
        </member>
        <member name="T:AForge.Math.Metrics.ManhattanDistance">
            <summary>
            Manhattan distance metric. 
            </summary>
            
            <remarks><para>This class represents the 
            <a href="http://en.wikipedia.org/wiki/Manhattan_distance">Manhattan distance metric</a>
            (aka City Block and Taxi Cab distance).</para>
            
            <para>Sample usage:</para>
            <code>
            // instantiate new distance class
            ManhattanDistance dist = new ManhattanDistance( ); 
            // create two vectors for inputs
            double[] p = new double[] { 2.5, 3.5, 3.0, 3.5, 2.5, 3.0 };
            double[] q = new double[] { 3.0, 3.5, 1.5, 5.0, 3.5, 3.0 };
            // get distance between the two vectors
            double distance = dist.GetDistance( p, q );
            </code>
            </remarks>
            
        </member>
        <member name="M:AForge.Math.Metrics.ManhattanDistance.GetDistance(System.Double[],System.Double[])">
            <summary>
            Returns distance between two N-dimensional double vectors.
            </summary>
            
            <param name="p">1st point vector.</param>
            <param name="q">2nd point vector.</param>
            
            <returns>Returns Manhattan distance between two supplied vectors.</returns>
            
            <exception cref="T:System.ArgumentException">Thrown if the two vectors are of different dimensions (if specified
            array have different length).</exception>
            
        </member>
        <member name="T:AForge.Math.Metrics.PearsonCorrelation">
            <summary>
            Pearson correlation metric. 
            </summary>
            
            <remarks><para>This class represents the 
            <a href="http://en.wikipedia.org/wiki/Pearson_correlation">Pearson correlation metric</a>.</para>
            
            <para>Sample usage:</para>
            <code>
            // instantiate new pearson correlation class
            PearsonCorrelation cor = new PearsonCorrelation( ); 
            // create two vectors for inputs
            double[] p = new double[] { 2.5, 3.5, 3.0, 3.5, 2.5, 3.0 };
            double[] q = new double[] { 3.0, 3.5, 1.5, 5.0, 3.5, 3.0 };
            // get correlation between the two vectors
            double correlation = cor.GetSimilarityScore( p, q );
            </code>    
            </remarks>
            
        </member>
        <member name="M:AForge.Math.Metrics.PearsonCorrelation.GetSimilarityScore(System.Double[],System.Double[])">
            <summary>
            Returns the pearson correlation for two N-dimensional double vectors. 
            </summary>
            
            <param name="p">1st point vector.</param>
            <param name="q">2nd point vector.</param>
            
            <returns>Returns Pearson correlation between two supplied vectors.</returns>
            
            <exception cref="T:System.ArgumentException">Thrown if the two vectors are of different dimensions (if specified
            array have different length).</exception>
            
        </member>
        <member name="T:AForge.Math.PerlinNoise">
            <summary>
            Perlin noise function.
            </summary>
            
            <remarks><para>The class implements 1-D and 2-D Perlin noise functions, which represent
            sum of several smooth noise functions with different frequency and amplitude. The description
            of Perlin noise function and its calculation may be found on
            <a href="http://freespace.virgin.net/hugo.elias/models/m_perlin.htm" target="_blank">Hugo Elias's page</a>.
            </para>
            
            <para>The number of noise functions, which comprise the resulting Perlin noise function, is
            set by <see cref="P:AForge.Math.PerlinNoise.Octaves"/> property. Amplitude and frequency values for each octave
            start from values, which are set by <see cref="P:AForge.Math.PerlinNoise.InitFrequency"/> and <see cref="P:AForge.Math.PerlinNoise.InitAmplitude"/>
            properties.</para>
            
            <para>Sample usage (clouds effect):</para>
            <code>
            // create Perlin noise function
            PerlinNoise noise = new PerlinNoise( 8, 0.5, 1.0 / 32 );
            // generate clouds effect
            float[,] texture = new float[height, width];
            
            for ( int y = 0; y &lt; height; y++ )
            {
            	for ( int x = 0; x &lt; width; x++ )
            	{
            		texture[y, x] = 
            			Math.Max( 0.0f, Math.Min( 1.0f,
            				(float) noise.Function2D( x, y ) * 0.5f + 0.5f
            			) );
            	}
            }
            </code>
            </remarks>
            
        </member>
        <member name="M:AForge.Math.PerlinNoise.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Math.PerlinNoise"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Math.PerlinNoise.#ctor(System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Math.PerlinNoise"/> class.
            </summary>
            
            <param name="octaves">Number of octaves (see <see cref="P:AForge.Math.PerlinNoise.Octaves"/> property).</param>
            <param name="persistence">Persistence value (see <see cref="P:AForge.Math.PerlinNoise.Persistence"/> property).</param>
            
        </member>
        <member name="M:AForge.Math.PerlinNoise.#ctor(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Math.PerlinNoise"/> class.
            </summary>
            
            <param name="octaves">Number of octaves (see <see cref="P:AForge.Math.PerlinNoise.Octaves"/> property).</param>
            <param name="persistence">Persistence value (see <see cref="P:AForge.Math.PerlinNoise.Persistence"/> property).</param>
            <param name="initFrequency">Initial frequency (see <see cref="P:AForge.Math.PerlinNoise.InitFrequency"/> property).</param>
            <param name="initAmplitude">Initial amplitude (see <see cref="P:AForge.Math.PerlinNoise.InitAmplitude"/> property).</param>
            
        </member>
        <member name="M:AForge.Math.PerlinNoise.Function(System.Double)">
            <summary>
            1-D Perlin noise function.
            </summary>
            
            <param name="x">x value.</param>
            
            <returns>Returns function's value at point <paramref name="x"/>.</returns>
            
        </member>
        <member name="M:AForge.Math.PerlinNoise.Function2D(System.Double,System.Double)">
            <summary>
            2-D Perlin noise function.
            </summary>
            
            <param name="x">x value.</param>
            <param name="y">y value.</param>
            
            <returns>Returns function's value at point (<paramref name="x"/>, <paramref name="y"/>).</returns>
            
        </member>
        <member name="M:AForge.Math.PerlinNoise.Noise(System.Int32)">
            <summary>
            Ordinary noise function
            </summary>
        </member>
        <member name="M:AForge.Math.PerlinNoise.SmoothedNoise(System.Double)">
            <summary>
            Smoothed noise.
            </summary>
        </member>
        <member name="M:AForge.Math.PerlinNoise.CosineInterpolate(System.Double,System.Double,System.Double)">
            <summary>
            Cosine interpolation.
            </summary>
        </member>
        <member name="P:AForge.Math.PerlinNoise.InitFrequency">
            <summary>
            Initial frequency.
            </summary>
            
            <remarks><para>The property sets initial frequency of the first octave. Frequencies for
            next octaves are calculated using the next equation:<br/>
            frequency<sub>i</sub> = <see cref="P:AForge.Math.PerlinNoise.InitFrequency"/> * 2<sup>i</sup>,
            where i = [0, <see cref="P:AForge.Math.PerlinNoise.Octaves"/>).
            </para>
            
            <para>Default value is set to <b>1</b>.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Math.PerlinNoise.InitAmplitude">
             <summary>
             Initial amplitude.
             </summary>
             
             <remarks><para>The property sets initial amplitude of the first octave. Amplitudes for
             next octaves are calculated using the next equation:<br/>
             amplitude<sub>i</sub> = <see cref="P:AForge.Math.PerlinNoise.InitAmplitude"/> * <see cref="P:AForge.Math.PerlinNoise.Persistence"/><sup>i</sup>,
             where i = [0, <see cref="P:AForge.Math.PerlinNoise.Octaves"/>).
             </para>
             
             <para>Default value is set to <b>1</b>.</para>
             </remarks>
            
        </member>
        <member name="P:AForge.Math.PerlinNoise.Persistence">
             <summary>
             Persistence value.
             </summary>
            
             <remarks><para>The property sets so called persistence value, which controls the way
             how <see cref="P:AForge.Math.PerlinNoise.InitAmplitude">amplitude</see> is calculated for each octave comprising
             the Perlin noise function.</para>
             
             <para>Default value is set to <b>0.65</b>.</para>
             </remarks>
            
        </member>
        <member name="P:AForge.Math.PerlinNoise.Octaves">
            <summary>
            Number of octaves, [1, 32].
            </summary>
            
            <remarks><para>The property sets the number of noise functions, which sum up the resulting
            Perlin noise function.</para>
            
            <para>Default value is set to <b>4</b>.</para>
            </remarks>
            
        </member>
        <member name="T:AForge.Math.Random.ExponentialGenerator">
            <summary>
            Exponential random numbers generator.
            </summary>
            
            <remarks><para>The random number generator generates exponential
            random numbers with specified rate value (lambda).</para>
            
            <para>The generator uses <see cref="T:AForge.Math.Random.UniformOneGenerator"/> generator as a base
            to generate random numbers.</para>
            
            <para>Sample usage:</para>
            <code>
            // create instance of random generator
            IRandomNumberGenerator generator = new ExponentialGenerator( 5 );
            // generate random number
            float randomNumber = generator.Next( );
            </code>
            </remarks>
            
        </member>
        <member name="T:AForge.Math.Random.IRandomNumberGenerator">
            <summary>
            Interface for random numbers generators.
            </summary>
            
            <remarks><para>The interface defines set of methods and properties, which should
            be implemented by different algorithms for random numbers generatation.</para>
            </remarks>
            
        </member>
        <member name="M:AForge.Math.Random.IRandomNumberGenerator.Next">
            <summary>
            Generate next random number.
            </summary>
            
            <returns>Returns next random number.</returns>
            
        </member>
        <member name="M:AForge.Math.Random.IRandomNumberGenerator.SetSeed(System.Int32)">
            <summary>
            Set seed of the random numbers generator.
            </summary>
            
            <param name="seed">Seed value.</param>
            
        </member>
        <member name="P:AForge.Math.Random.IRandomNumberGenerator.Mean">
            <summary>
            Mean value of generator.
            </summary>
            
        </member>
        <member name="P:AForge.Math.Random.IRandomNumberGenerator.Variance">
            <summary>
            Variance value of generator.
            </summary>
            
        </member>
        <member name="M:AForge.Math.Random.ExponentialGenerator.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Math.Random.ExponentialGenerator"/> class.
            </summary>
            
            <param name="rate">Rate value.</param>
            
            <exception cref="T:System.ArgumentException">Rate value should be greater than zero.</exception>
            
        </member>
        <member name="M:AForge.Math.Random.ExponentialGenerator.#ctor(System.Single,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Math.Random.ExponentialGenerator"/> class.
            </summary>
            
            <param name="rate">Rate value (inverse mean).</param>
            <param name="seed">Seed value to initialize random numbers generator.</param>
            
            <exception cref="T:System.ArgumentException">Rate value should be greater than zero.</exception>
            
        </member>
        <member name="M:AForge.Math.Random.ExponentialGenerator.Next">
            <summary>
            Generate next random number
            </summary>
            
            <returns>Returns next random number.</returns>
            
        </member>
        <member name="M:AForge.Math.Random.ExponentialGenerator.SetSeed(System.Int32)">
            <summary>
            Set seed of the random numbers generator.
            </summary>
            
            <param name="seed">Seed value.</param>
            
            <remarks>Resets random numbers generator initializing it with
            specified seed value.</remarks>
            
        </member>
        <member name="P:AForge.Math.Random.ExponentialGenerator.Rate">
            <summary>
            Rate value (inverse mean).
            </summary>
            
            <remarks>The rate value should be positive and non zero.</remarks>
            
        </member>
        <member name="P:AForge.Math.Random.ExponentialGenerator.Mean">
            <summary>
            Mean value of the generator.
            </summary>
            
        </member>
        <member name="P:AForge.Math.Random.ExponentialGenerator.Variance">
             <summary>
             Variance value of the generator.
             </summary>
            
        </member>
        <member name="T:AForge.Math.Random.GaussianGenerator">
            <summary>
            Gaussian random numbers generator.
            </summary>
            
            <remarks><para>The random number generator generates gaussian
            random numbers with specified mean and standard deviation values.</para>
            
            <para>The generator uses <see cref="T:AForge.Math.Random.StandardGenerator"/> generator as base
            to generate random numbers.</para>
            
            <para>Sample usage:</para>
            <code>
            // create instance of random generator
            IRandomNumberGenerator generator = new GaussianGenerator( 5.0, 1.5 );
            // generate random number
            float randomNumber = generator.Next( );
            </code>
            </remarks>
            
        </member>
        <member name="M:AForge.Math.Random.GaussianGenerator.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Math.Random.GaussianGenerator"/> class.
            </summary>
            
            <param name="mean">Mean value.</param>
            <param name="stdDev">Standard deviation value.</param>
            
        </member>
        <member name="M:AForge.Math.Random.GaussianGenerator.#ctor(System.Single,System.Single,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Math.Random.GaussianGenerator"/> class.
            </summary>
            
            <param name="mean">Mean value.</param>
            <param name="stdDev">Standard deviation value.</param>
            <param name="seed">Seed value to initialize random numbers generator.</param>
            
        </member>
        <member name="M:AForge.Math.Random.GaussianGenerator.Next">
            <summary>
            Generate next random number.
            </summary>
            
            <returns>Returns next random number.</returns>
            
        </member>
        <member name="M:AForge.Math.Random.GaussianGenerator.SetSeed(System.Int32)">
            <summary>
            Set seed of the random numbers generator.
            </summary>
            
            <param name="seed">Seed value.</param>
            
            <remarks>Resets random numbers generator initializing it with
            specified seed value.</remarks>
            
        </member>
        <member name="P:AForge.Math.Random.GaussianGenerator.Mean">
             <summary>
             Mean value of the generator.
             </summary>
            
        </member>
        <member name="P:AForge.Math.Random.GaussianGenerator.Variance">
             <summary>
             Variance value of the generator.
             </summary>
            
        </member>
        <member name="P:AForge.Math.Random.GaussianGenerator.StdDev">
             <summary>
             Standard deviation value.
             </summary>
            
        </member>
        <member name="T:AForge.Math.Random.StandardGenerator">
            <summary>
            Standard random numbers generator.
            </summary>
            
            <remarks><para>The random number generator generates gaussian
            random numbers with zero mean and standard deviation of one. The generator
            implements polar form of the Box-Muller transformation.</para>
            
            <para>The generator uses <see cref="T:AForge.Math.Random.UniformOneGenerator"/> generator as a base
            to generate random numbers.</para>
            
            <para>Sample usage:</para>
            <code>
            // create instance of random generator
            IRandomNumberGenerator generator = new StandardGenerator( );
            // generate random number
            float randomNumber = generator.Next( );
            </code>
            </remarks>
            
        </member>
        <member name="M:AForge.Math.Random.StandardGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Math.Random.StandardGenerator"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Math.Random.StandardGenerator.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Math.Random.StandardGenerator"/> class.
            </summary>
            
            <param name="seed">Seed value to initialize random numbers generator.</param>
            
        </member>
        <member name="M:AForge.Math.Random.StandardGenerator.Next">
            <summary>
            Generate next random number.
            </summary>
            
            <returns>Returns next random number.</returns>
            
        </member>
        <member name="M:AForge.Math.Random.StandardGenerator.SetSeed(System.Int32)">
            <summary>
            Set seed of the random numbers generator.
            </summary>
            
            <param name="seed">Seed value.</param>
            
            <remarks>Resets random numbers generator initializing it with
            specified seed value.</remarks>
            
        </member>
        <member name="P:AForge.Math.Random.StandardGenerator.Mean">
            <summary>
            Mean value of the generator.
            </summary>
            
        </member>
        <member name="P:AForge.Math.Random.StandardGenerator.Variance">
             <summary>
             Variance value of the generator.
             </summary>
            
        </member>
        <member name="T:AForge.Math.Random.UniformGenerator">
            <summary>
            Uniform random numbers generator.
            </summary>
            
            <remarks><para>The random numbers generator generates uniformly
            distributed numbers in the <see cref="P:AForge.Math.Random.UniformGenerator.Range">specified range</see> - values
            are greater or equal to minimum range's value and less than maximum range's
            value.</para>
            
            <para>The generator uses <see cref="T:AForge.Math.Random.UniformOneGenerator"/> generator
            to generate random numbers.</para>
            
            <para>Sample usage:</para>
            <code>
            // create instance of random generator
            IRandomNumberGenerator generator = new UniformGenerator( new Range( 50, 100 ) );
            // generate random number
            float randomNumber = generator.Next( );
            </code>
            </remarks>
            
        </member>
        <member name="M:AForge.Math.Random.UniformGenerator.#ctor(AForge.Range)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Math.Random.UniformGenerator"/> class.
            </summary>
            
            <param name="range">Random numbers range.</param>
            
            <remarks>Initializes random numbers generator with zero seed.</remarks>
            
        </member>
        <member name="M:AForge.Math.Random.UniformGenerator.#ctor(AForge.Range,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Math.Random.UniformGenerator"/> class.
            </summary>
            
            <param name="range">Random numbers range.</param>
            <param name="seed">Seed value to initialize random numbers generator.</param>
            
        </member>
        <member name="M:AForge.Math.Random.UniformGenerator.Next">
            <summary>
            Generate next random number.
            </summary>
            
            <returns>Returns next random number.</returns>
            
        </member>
        <member name="M:AForge.Math.Random.UniformGenerator.SetSeed(System.Int32)">
            <summary>
            Set seed of the random numbers generator.
            </summary>
            
            <param name="seed">Seed value.</param>
            
            <remarks>Resets random numbers generator initializing it with
            specified seed value.</remarks>
            
        </member>
        <member name="P:AForge.Math.Random.UniformGenerator.Mean">
             <summary>
             Mean value of the generator.
             </summary>
            
        </member>
        <member name="P:AForge.Math.Random.UniformGenerator.Variance">
             <summary>
             Variance value of the generator.
             </summary>
            
        </member>
        <member name="P:AForge.Math.Random.UniformGenerator.Range">
            <summary>
            Random numbers range.
            </summary>
            
            <remarks><para>Range of random numbers to generate. Generated numbers are
            greater or equal to minimum range's value and less than maximum range's
            value.</para>
            </remarks>
            
        </member>
        <member name="T:AForge.Math.Random.UniformOneGenerator">
            <summary>
            Uniform random numbers generator in the range of [0, 1).
            </summary>
            
            <remarks><para>The random number generator generates uniformly
            distributed numbers in the range of [0, 1) - greater or equal to 0.0
            and less than 1.0.</para>
            
            <para><note>At this point the generator is based on the
            internal .NET generator, but may be rewritten to
            use faster generation algorithm.</note></para>
            
            <para>Sample usage:</para>
            <code>
            // create instance of random generator
            IRandomNumberGenerator generator = new UniformOneGenerator( );
            // generate random number
            float randomNumber = generator.Next( );
            </code>
            </remarks>
            
        </member>
        <member name="M:AForge.Math.Random.UniformOneGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Math.Random.UniformOneGenerator"/> class.
            </summary>
            
            <remarks>Initializes random numbers generator with zero seed.</remarks>
            
        </member>
        <member name="M:AForge.Math.Random.UniformOneGenerator.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Math.Random.UniformOneGenerator"/> class.
            </summary>
            
            <param name="seed">Seed value to initialize random numbers generator.</param>
            
        </member>
        <member name="M:AForge.Math.Random.UniformOneGenerator.Next">
            <summary>
            Generate next random number.
            </summary>
            
            <returns>Returns next random number.</returns>
            
        </member>
        <member name="M:AForge.Math.Random.UniformOneGenerator.SetSeed(System.Int32)">
            <summary>
            Set seed of the random numbers generator.
            </summary>
            
            <param name="seed">Seed value.</param>
            
            <remarks>Resets random numbers generator initializing it with
            specified seed value.</remarks>
            
        </member>
        <member name="P:AForge.Math.Random.UniformOneGenerator.Mean">
             <summary>
             Mean value of the generator.
             </summary>
            
        </member>
        <member name="P:AForge.Math.Random.UniformOneGenerator.Variance">
             <summary>
             Variance value of the generator.
             </summary>
            
        </member>
        <member name="T:AForge.Math.Statistics">
            <summary>
            Set of statistics functions.
            </summary>
            
            <remarks>The class represents collection of simple functions used
            in statistics.</remarks>
            
        </member>
        <member name="M:AForge.Math.Statistics.Mean(System.Int32[])">
            <summary>
            Calculate mean value.
            </summary>
            
            <param name="values">Histogram array.</param>
            
            <returns>Returns mean value.</returns>
            
            <remarks><para>The input array is treated as histogram, i.e. its
            indexes are treated as values of stochastic function, but
            array values are treated as "probabilities" (total amount of
            hits).</para>
            
            <para>Sample usage:</para>
            <code>
            // create histogram array
            int[] histogram = new int[] { 1, 1, 2, 3, 6, 8, 11, 12, 7, 3 };
            // calculate mean value
            double mean = Statistics.Mean( histogram );
            // output it (5.759)
            Console.WriteLine( "mean = " + mean.ToString( "F3" ) );
            </code>
            </remarks>
            
        </member>
        <member name="M:AForge.Math.Statistics.StdDev(System.Int32[])">
            <summary>
            Calculate standard deviation.
            </summary>
            
            <param name="values">Histogram array.</param>
            
            <returns>Returns value of standard deviation.</returns>
            
            <remarks><para>The input array is treated as histogram, i.e. its
            indexes are treated as values of stochastic function, but
            array values are treated as "probabilities" (total amount of
            hits).</para>
            
            <para>Sample usage:</para>
            <code>
            // create histogram array
            int[] histogram = new int[] { 1, 1, 2, 3, 6, 8, 11, 12, 7, 3 };
            // calculate standard deviation value
            double stdDev = Statistics.StdDev( histogram );
            // output it (1.999)
            Console.WriteLine( "std.dev. = " + stdDev.ToString( "F3" ) );
            </code>
            </remarks>
            
        </member>
        <member name="M:AForge.Math.Statistics.StdDev(System.Int32[],System.Double)">
            <summary>
            Calculate standard deviation.
            </summary>
            
            <param name="values">Histogram array.</param>
            <param name="mean">Mean value of the histogram.</param>
            
            <returns>Returns value of standard deviation.</returns>
            
            <remarks><para>The input array is treated as histogram, i.e. its
            indexes are treated as values of stochastic function, but
            array values are treated as "probabilities" (total amount of
            hits).</para>
            
            <para>The method is an equevalent to the <see cref="M:AForge.Math.Statistics.StdDev(System.Int32[])"/> method,
            but it relieas on the passed mean value, which is previously calculated
            using <see cref="M:AForge.Math.Statistics.Mean(System.Int32[])"/> method.</para>
            </remarks>
            
        </member>
        <member name="M:AForge.Math.Statistics.Median(System.Int32[])">
            <summary>
            Calculate median value.
            </summary>
            
            <param name="values">Histogram array.</param>
            
            <returns>Returns value of median.</returns>
            
            <remarks>
            <para>The input array is treated as histogram, i.e. its
            indexes are treated as values of stochastic function, but
            array values are treated as "probabilities" (total amount of
            hits).</para>
            
            <para><note>The median value is calculated accumulating histogram's
            values starting from the <b>left</b> point until the sum reaches 50% of
            histogram's sum.</note></para>
            
            <para>Sample usage:</para>
            <code>
            // create histogram array
            int[] histogram = new int[] { 1, 1, 2, 3, 6, 8, 11, 12, 7, 3 };
            // calculate median value
            int median = Statistics.Median( histogram );
            // output it (6)
            Console.WriteLine( "median = " + median );
            </code>
            </remarks>
            
        </member>
        <member name="M:AForge.Math.Statistics.GetRange(System.Int32[],System.Double)">
            <summary>
            Get range around median containing specified percentage of values.
            </summary>
            
            <param name="values">Histogram array.</param>
            <param name="percent">Values percentage around median.</param>
            
            <returns>Returns the range which containes specifies percentage
            of values.</returns>
            
            <remarks>
            <para>The input array is treated as histogram, i.e. its
            indexes are treated as values of stochastic function, but
            array values are treated as "probabilities" (total amount of
            hits).</para>
            
            <para>The method calculates range of stochastic variable, which summary probability
            comprises the specified percentage of histogram's hits.</para>
            
            <para>Sample usage:</para>
            <code>
            // create histogram array
            int[] histogram = new int[] { 1, 1, 2, 3, 6, 8, 11, 12, 7, 3 };
            // get 75% range around median
            IntRange range = Statistics.GetRange( histogram, 0.75 );
            // output it ([4, 8])
            Console.WriteLine( "range = [" + range.Min + ", " + range.Max + "]" );
            </code>
            </remarks>
            
        </member>
        <member name="M:AForge.Math.Statistics.Entropy(System.Int32[])">
            <summary>
            Calculate entropy value.
            </summary>
            
            <param name="values">Histogram array.</param>
            
            <returns>Returns entropy value of the specified histagram array.</returns>
            
            <remarks><para>The input array is treated as histogram, i.e. its
            indexes are treated as values of stochastic function, but
            array values are treated as "probabilities" (total amount of
            hits).</para>
            
            <para>Sample usage:</para>
            <code>
            // create histogram array with 2 values of equal probabilities
            int[] histogram1 = new int[2] { 3, 3 };
            // calculate entropy
            double entropy1 = Statistics.Entropy( histogram1 );
            // output it (1.000)
            Console.WriteLine( "entropy1 = " + entropy1.ToString( "F3" ) );
            
            // create histogram array with 4 values of equal probabilities
            int[] histogram2 = new int[4] { 1, 1, 1, 1 };
            // calculate entropy
            double entropy2 = Statistics.Entropy( histogram2 );
            // output it (2.000)
            Console.WriteLine( "entropy2 = " + entropy2.ToString( "F3" ) );
            
            // create histogram array with 4 values of different probabilities
            int[] histogram3 = new int[4] { 1, 2, 3, 4 };
            // calculate entropy
            double entropy3 = Statistics.Entropy( histogram3 );
            // output it (1.846)
            Console.WriteLine( "entropy3 = " + entropy3.ToString( "F3" ) );
            </code>
            </remarks>
            
        </member>
        <member name="M:AForge.Math.Statistics.Mode(System.Int32[])">
             <summary>
             Calculate mode value.
             </summary>
             
             <param name="values">Histogram array.</param>
             
             <returns>Returns mode value of the histogram array.</returns>
             
             <remarks>
             <para>The input array is treated as histogram, i.e. its
             indexes are treated as values of stochastic function, but
             array values are treated as "probabilities" (total amount of
             hits).</para>
             
             <para><note>Returns the minimum mode value if the specified histogram is multimodal.</note></para>
            
             <para>Sample usage:</para>
             <code>
             // create array
             int[] values = new int[] { 1, 1, 2, 3, 6, 8, 11, 12, 7, 3 };
             // calculate mode value
             int mode = Statistics.Mode( values );
             // output it (7)
             Console.WriteLine( "mode = " + mode );
             </code>
             </remarks>
             
        </member>
        <member name="T:AForge.Math.Tools">
            <summary>
            Set of tool functions.
            </summary>
            
            <remarks>The class contains different utility functions.</remarks>
            
        </member>
        <member name="M:AForge.Math.Tools.Pow2(System.Int32)">
            <summary>
            Calculates power of 2.
            </summary>
            
            <param name="power">Power to raise in.</param>
            
            <returns>Returns specified power of 2 in the case if power is in the range of
            [0, 30]. Otherwise returns 0.</returns>
            
        </member>
        <member name="M:AForge.Math.Tools.IsPowerOf2(System.Int32)">
            <summary>
            Checks if the specified integer is power of 2.
            </summary>
            
            <param name="x">Integer number to check.</param>
            
            <returns>Returns <b>true</b> if the specified number is power of 2.
            Otherwise returns <b>false</b>.</returns>
            
        </member>
        <member name="M:AForge.Math.Tools.Log2(System.Int32)">
            <summary>
            Get base of binary logarithm.
            </summary>
            
            <param name="x">Source integer number.</param>
            
            <returns>Power of the number (base of binary logarithm).</returns>
            
        </member>
        <member name="T:AForge.Math.Vector3">
            <summary>
            3D Vector structure with X, Y and Z coordinates.
            </summary>
            
            <remarks><para>The structure incapsulates X, Y and Z coordinates of a 3D vector and
            provides some operations with it.</para></remarks>
            
        </member>
        <member name="F:AForge.Math.Vector3.X">
            <summary>
            X coordinate of the vector.
            </summary>
        </member>
        <member name="F:AForge.Math.Vector3.Y">
            <summary>
            Y coordinate of the vector.
            </summary>
        </member>
        <member name="F:AForge.Math.Vector3.Z">
            <summary>
            Z coordinate of the vector.
            </summary>
        </member>
        <member name="M:AForge.Math.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Math.Vector3"/> structure.
            </summary>
            
            <param name="x">X coordinate of the vector.</param>
            <param name="y">Y coordinate of the vector.</param>
            <param name="z">Z coordinate of the vector.</param>
            
        </member>
        <member name="M:AForge.Math.Vector3.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Math.Vector3"/> structure.
            </summary>
            
            <param name="value">Value, which is set to all 3 coordinates of the vector.</param>
            
        </member>
        <member name="M:AForge.Math.Vector3.ToString">
            <summary>
            Returns a string representation of this object.
            </summary>
            
            <returns>A string representation of this object.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector3.ToArray">
            <summary>
            Returns array representation of the vector.
            </summary>
            
            <returns>Array with 3 values containing X/Y/Z coordinates.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector3.op_Addition(AForge.Math.Vector3,AForge.Math.Vector3)">
             <summary>
             Adds corresponding coordinates of two vectors.
             </summary>
             
             <param name="vector1">The vector to add to.</param>
             <param name="vector2">The vector to add to the first vector.</param>
             
             <returns>Returns a vector which coordinates are equal to sum of corresponding
             coordinates of the two specified vectors.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector3.Add(AForge.Math.Vector3,AForge.Math.Vector3)">
             <summary>
             Adds corresponding coordinates of two vectors.
             </summary>
             
             <param name="vector1">The vector to add to.</param>
             <param name="vector2">The vector to add to the first vector.</param>
             
             <returns>Returns a vector which coordinates are equal to sum of corresponding
             coordinates of the two specified vectors.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector3.op_Addition(AForge.Math.Vector3,System.Single)">
            <summary>
            Adds a value to all coordinates of the specified vector.
            </summary>
            
            <param name="vector">Vector to add the specified value to.</param>
            <param name="value">Value to add to all coordinates of the vector.</param>
            
            <returns>Returns new vector with all coordinates increased by the specified value.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector3.Add(AForge.Math.Vector3,System.Single)">
            <summary>
            Adds a value to all coordinates of the specified vector.
            </summary>
            
            <param name="vector">Vector to add the specified value to.</param>
            <param name="value">Value to add to all coordinates of the vector.</param>
            
            <returns>Returns new vector with all coordinates increased by the specified value.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector3.op_Subtraction(AForge.Math.Vector3,AForge.Math.Vector3)">
             <summary>
             Subtracts corresponding coordinates of two vectors.
             </summary>
             
             <param name="vector1">The vector to subtract from.</param>
             <param name="vector2">The vector to subtract from the first vector.</param>
             
             <returns>Returns a vector which coordinates are equal to difference of corresponding
             coordinates of the two specified vectors.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector3.Subtract(AForge.Math.Vector3,AForge.Math.Vector3)">
             <summary>
             Subtracts corresponding coordinates of two vectors.
             </summary>
             
             <param name="vector1">The vector to subtract from.</param>
             <param name="vector2">The vector to subtract from the first vector.</param>
             
             <returns>Returns a vector which coordinates are equal to difference of corresponding
             coordinates of the two specified vectors.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector3.op_Subtraction(AForge.Math.Vector3,System.Single)">
            <summary>
            Subtracts a value from all coordinates of the specified vector.
            </summary>
            
            <param name="vector">Vector to subtract the specified value from.</param>
            <param name="value">Value to subtract from all coordinates of the vector.</param>
            
            <returns>Returns new vector with all coordinates decreased by the specified value.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector3.Subtract(AForge.Math.Vector3,System.Single)">
            <summary>
            Subtracts a value from all coordinates of the specified vector.
            </summary>
            
            <param name="vector">Vector to subtract the specified value from.</param>
            <param name="value">Value to subtract from all coordinates of the vector.</param>
            
            <returns>Returns new vector with all coordinates decreased by the specified value.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector3.op_Multiply(AForge.Math.Vector3,AForge.Math.Vector3)">
             <summary>
             Multiplies corresponding coordinates of two vectors.
             </summary>
             
             <param name="vector1">The first vector to multiply.</param>
             <param name="vector2">The second vector to multiply.</param>
             
             <returns>Returns a vector which coordinates are equal to multiplication of corresponding
             coordinates of the two specified vectors.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector3.Multiply(AForge.Math.Vector3,AForge.Math.Vector3)">
             <summary>
             Multiplies corresponding coordinates of two vectors.
             </summary>
             
             <param name="vector1">The first vector to multiply.</param>
             <param name="vector2">The second vector to multiply.</param>
             
             <returns>Returns a vector which coordinates are equal to multiplication of corresponding
             coordinates of the two specified vectors.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector3.op_Multiply(AForge.Math.Vector3,System.Single)">
             <summary>
             Multiplies coordinates of the specified vector by the specified factor.
             </summary>
             
             <param name="vector">Vector to multiply coordinates of.</param>
             <param name="factor">Factor to multiple coordinates of the specified vector by.</param>
             
             <returns>Returns new vector with all coordinates multiplied by the specified factor.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector3.Multiply(AForge.Math.Vector3,System.Single)">
             <summary>
             Multiplies coordinates of the specified vector by the specified factor.
             </summary>
             
             <param name="vector">Vector to multiply coordinates of.</param>
             <param name="factor">Factor to multiple coordinates of the specified vector by.</param>
             
             <returns>Returns new vector with all coordinates multiplied by the specified factor.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector3.op_Division(AForge.Math.Vector3,AForge.Math.Vector3)">
             <summary>
             Divides corresponding coordinates of two vectors.
             </summary>
             
             <param name="vector1">The first vector to divide.</param>
             <param name="vector2">The second vector to devide.</param>
             
             <returns>Returns a vector which coordinates are equal to coordinates of the first vector divided by
             corresponding coordinates of the second vector.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector3.Divide(AForge.Math.Vector3,AForge.Math.Vector3)">
             <summary>
             Divides corresponding coordinates of two vectors.
             </summary>
             
             <param name="vector1">The first vector to divide.</param>
             <param name="vector2">The second vector to devide.</param>
             
             <returns>Returns a vector which coordinates are equal to coordinates of the first vector divided by
             corresponding coordinates of the second vector.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector3.op_Division(AForge.Math.Vector3,System.Single)">
             <summary>
             Divides coordinates of the specified vector by the specified factor.
             </summary>
             
             <param name="vector">Vector to divide coordinates of.</param>
             <param name="factor">Factor to divide coordinates of the specified vector by.</param>
             
             <returns>Returns new vector with all coordinates divided by the specified factor.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector3.Divide(AForge.Math.Vector3,System.Single)">
             <summary>
             Divides coordinates of the specified vector by the specified factor.
             </summary>
             
             <param name="vector">Vector to divide coordinates of.</param>
             <param name="factor">Factor to divide coordinates of the specified vector by.</param>
             
             <returns>Returns new vector with all coordinates divided by the specified factor.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector3.op_Equality(AForge.Math.Vector3,AForge.Math.Vector3)">
            <summary>
            Tests whether two specified vectors are equal.
            </summary>
            
            <param name="vector1">The left-hand vector.</param>
            <param name="vector2">The right-hand vector.</param>
            
            <returns>Returns <see langword="true"/> if the two vectors are equal or <see langword="false"/> otherwise.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector3.op_Inequality(AForge.Math.Vector3,AForge.Math.Vector3)">
            <summary>
            Tests whether two specified vectors are not equal.
            </summary>
            
            <param name="vector1">The left-hand vector.</param>
            <param name="vector2">The right-hand vector.</param>
            
            <returns>Returns <see langword="true"/> if the two vectors are not equal or <see langword="false"/> otherwise.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector3.Equals(AForge.Math.Vector3)">
            <summary>
            Tests whether the vector equals to the specified one.
            </summary>
            
            <param name="vector">The vector to test equality with.</param>
            
            <returns>Returns <see langword="true"/> if the two vectors are equal or <see langword="false"/> otherwise.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector3.Equals(System.Object)">
            <summary>
            Tests whether the vector equals to the specified object.
            </summary>
            
            <param name="obj">The object to test equality with.</param>
            
            <returns>Returns <see langword="true"/> if the vector equals to the specified object or <see langword="false"/> otherwise.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector3.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            
            <returns>A 32-bit signed integer hash code.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector3.Normalize">
             <summary>
             Normalizes the vector by dividing it’s all coordinates with the vector's norm.
             </summary>
             
             <returns>Returns the value of vectors’ norm before normalization.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector3.Inverse">
             <summary>
             Inverse the vector.
             </summary>
             
             <returns>Returns a vector with all coordinates equal to 1.0 divided by the value of corresponding coordinate
             in this vector (or equal to 0.0 if this vector has corresponding coordinate also set to 0.0).</returns>
            
        </member>
        <member name="M:AForge.Math.Vector3.Abs">
            <summary>
            Calculate absolute values of the vector.
            </summary>
            
            <returns>Returns a vector with all coordinates equal to absolute values of this vector's coordinates.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector3.Cross(AForge.Math.Vector3,AForge.Math.Vector3)">
            <summary>
            Calculates cross product of two vectors.
            </summary>
            
            <param name="vector1">First vector to use for cross product calculation.</param>
            <param name="vector2">Second vector to use for cross product calculation.</param>
            
            <returns>Returns cross product of the two specified vectors.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector3.Dot(AForge.Math.Vector3,AForge.Math.Vector3)">
            <summary>
            Calculates dot product of two vectors.
            </summary>
            
            <param name="vector1">First vector to use for dot product calculation.</param>
            <param name="vector2">Second vector to use for dot product calculation.</param>
            
            <returns>Returns dot product of the two specified vectors.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector3.ToVector4">
            <summary>
            Converts the vector to a 4D vector.
            </summary>
            
            <returns>Returns 4D vector which is an extension of the 3D vector.</returns>
            
            <remarks><para>The method returns a 4D vector which has X, Y and Z coordinates equal to the
            coordinates of this 3D vector and <see cref="F:AForge.Math.Vector4.W">W</see> coordinate set to 1.0.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Math.Vector3.Max">
             <summary>
             Returns maximum value of the vector.
             </summary>
            
             <remarks><para>Returns maximum value of all 3 vector's coordinates.</para></remarks>
            
        </member>
        <member name="P:AForge.Math.Vector3.Min">
             <summary>
             Returns minimum value of the vector.
             </summary>
            
             <remarks><para>Returns minimum value of all 3 vector's coordinates.</para></remarks>
            
        </member>
        <member name="P:AForge.Math.Vector3.MaxIndex">
             <summary>
             Returns index of the coordinate with maximum value.
             </summary>
            
             <remarks><para>Returns index of the coordinate, which has the maximum value - 0 for X,
             1 for Y or 2 for Z.</para>
             
             <para><note>If there are multiple coordinates which have the same maximum value, the
             property returns smallest index.</note></para>
             </remarks>
            
        </member>
        <member name="P:AForge.Math.Vector3.MinIndex">
             <summary>
             Returns index of the coordinate with minimum value.
             </summary>
            
             <remarks><para>Returns index of the coordinate, which has the minimum value - 0 for X,
             1 for Y or 2 for Z.</para>
             
             <para><note>If there are multiple coordinates which have the same minimum value, the
             property returns smallest index.</note></para>
             </remarks>
            
        </member>
        <member name="P:AForge.Math.Vector3.Norm">
            <summary>
            Returns vector's norm.
            </summary>
            
            <remarks><para>Returns Euclidean norm of the vector, which is a
            square root of the sum: X<sup>2</sup>+Y<sup>2</sup>+Z<sup>2</sup>.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Math.Vector3.Square">
            <summary>
            Returns square of the vector's norm.
            </summary>
            
            <remarks><para>Return X<sup>2</sup>+Y<sup>2</sup>+Z<sup>2</sup>, which is
            a square of <see cref="P:AForge.Math.Vector3.Norm">vector's norm</see> or a <see cref="M:AForge.Math.Vector3.Dot(AForge.Math.Vector3,AForge.Math.Vector3)">dot product</see> of this vector
            with itself.</para></remarks>
            
        </member>
        <member name="T:AForge.Math.Vector4">
            <summary>
            4D Vector structure with X, Y, Z and W coordinates.
            </summary>
            
            <remarks><para>The structure incapsulates X, Y, Z and W coordinates of a 4D vector and
            provides some operations with it.</para></remarks>
            
        </member>
        <member name="F:AForge.Math.Vector4.X">
            <summary>
            X coordinate of the vector.
            </summary>
        </member>
        <member name="F:AForge.Math.Vector4.Y">
            <summary>
            Y coordinate of the vector.
            </summary>
        </member>
        <member name="F:AForge.Math.Vector4.Z">
            <summary>
            Z coordinate of the vector.
            </summary>
        </member>
        <member name="F:AForge.Math.Vector4.W">
            <summary>
            W coordinate of the vector.
            </summary>
        </member>
        <member name="M:AForge.Math.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Math.Vector4"/> structure.
            </summary>
            
            <param name="x">X coordinate of the vector.</param>
            <param name="y">Y coordinate of the vector.</param>
            <param name="z">Z coordinate of the vector.</param>
            <param name="w">W coordinate of the vector.</param>
            
        </member>
        <member name="M:AForge.Math.Vector4.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Math.Vector4"/> structure.
            </summary>
            
            <param name="value">Value, which is set to all 4 coordinates of the vector.</param>
            
        </member>
        <member name="M:AForge.Math.Vector4.ToString">
            <summary>
            Returns a string representation of this object.
            </summary>
            
            <returns>A string representation of this object.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector4.ToArray">
            <summary>
            Returns array representation of the vector.
            </summary>
            
            <returns>Array with 4 values containing X/Y/Z/W coordinates.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector4.op_Addition(AForge.Math.Vector4,AForge.Math.Vector4)">
             <summary>
             Adds corresponding coordinates of two vectors.
             </summary>
             
             <param name="vector1">The vector to add to.</param>
             <param name="vector2">The vector to add to the first vector.</param>
             
             <returns>Returns a vector which coordinates are equal to sum of corresponding
             coordinates of the two specified vectors.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector4.Add(AForge.Math.Vector4,AForge.Math.Vector4)">
             <summary>
             Adds corresponding coordinates of two vectors.
             </summary>
             
             <param name="vector1">The vector to add to.</param>
             <param name="vector2">The vector to add to the first vector.</param>
             
             <returns>Returns a vector which coordinates are equal to sum of corresponding
             coordinates of the two specified vectors.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector4.op_Addition(AForge.Math.Vector4,System.Single)">
            <summary>
            Adds a value to all coordinates of the specified vector.
            </summary>
            
            <param name="vector">Vector to add the specified value to.</param>
            <param name="value">Value to add to all coordinates of the vector.</param>
            
            <returns>Returns new vector with all coordinates increased by the specified value.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector4.Add(AForge.Math.Vector4,System.Single)">
            <summary>
            Adds a value to all coordinates of the specified vector.
            </summary>
            
            <param name="vector">Vector to add the specified value to.</param>
            <param name="value">Value to add to all coordinates of the vector.</param>
            
            <returns>Returns new vector with all coordinates increased by the specified value.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector4.op_Subtraction(AForge.Math.Vector4,AForge.Math.Vector4)">
             <summary>
             Subtracts corresponding coordinates of two vectors.
             </summary>
             
             <param name="vector1">The vector to subtract from.</param>
             <param name="vector2">The vector to subtract from the first vector.</param>
             
             <returns>Returns a vector which coordinates are equal to difference of corresponding
             coordinates of the two specified vectors.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector4.Subtract(AForge.Math.Vector4,AForge.Math.Vector4)">
             <summary>
             Subtracts corresponding coordinates of two vectors.
             </summary>
             
             <param name="vector1">The vector to subtract from.</param>
             <param name="vector2">The vector to subtract from the first vector.</param>
             
             <returns>Returns a vector which coordinates are equal to difference of corresponding
             coordinates of the two specified vectors.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector4.op_Subtraction(AForge.Math.Vector4,System.Single)">
            <summary>
            Subtracts a value from all coordinates of the specified vector.
            </summary>
            
            <param name="vector">Vector to subtract the specified value from.</param>
            <param name="value">Value to subtract from all coordinates of the vector.</param>
            
            <returns>Returns new vector with all coordinates decreased by the specified value.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector4.Subtract(AForge.Math.Vector4,System.Single)">
            <summary>
            Subtracts a value from all coordinates of the specified vector.
            </summary>
            
            <param name="vector">Vector to subtract the specified value from.</param>
            <param name="value">Value to subtract from all coordinates of the vector.</param>
            
            <returns>Returns new vector with all coordinates decreased by the specified value.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector4.op_Multiply(AForge.Math.Vector4,AForge.Math.Vector4)">
             <summary>
             Multiplies corresponding coordinates of two vectors.
             </summary>
             
             <param name="vector1">The first vector to multiply.</param>
             <param name="vector2">The second vector to multiply.</param>
             
             <returns>Returns a vector which coordinates are equal to multiplication of corresponding
             coordinates of the two specified vectors.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector4.Multiply(AForge.Math.Vector4,AForge.Math.Vector4)">
             <summary>
             Multiplies corresponding coordinates of two vectors.
             </summary>
             
             <param name="vector1">The first vector to multiply.</param>
             <param name="vector2">The second vector to multiply.</param>
             
             <returns>Returns a vector which coordinates are equal to multiplication of corresponding
             coordinates of the two specified vectors.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector4.op_Multiply(AForge.Math.Vector4,System.Single)">
             <summary>
             Multiplies coordinates of the specified vector by the specified factor.
             </summary>
             
             <param name="vector">Vector to multiply coordinates of.</param>
             <param name="factor">Factor to multiple coordinates of the specified vector by.</param>
             
             <returns>Returns new vector with all coordinates multiplied by the specified factor.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector4.Multiply(AForge.Math.Vector4,System.Single)">
             <summary>
             Multiplies coordinates of the specified vector by the specified factor.
             </summary>
             
             <param name="vector">Vector to multiply coordinates of.</param>
             <param name="factor">Factor to multiple coordinates of the specified vector by.</param>
             
             <returns>Returns new vector with all coordinates multiplied by the specified factor.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector4.op_Division(AForge.Math.Vector4,AForge.Math.Vector4)">
             <summary>
             Divides corresponding coordinates of two vectors.
             </summary>
             
             <param name="vector1">The first vector to divide.</param>
             <param name="vector2">The second vector to devide.</param>
             
             <returns>Returns a vector which coordinates are equal to coordinates of the first vector divided by
             corresponding coordinates of the second vector.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector4.Divide(AForge.Math.Vector4,AForge.Math.Vector4)">
             <summary>
             Divides corresponding coordinates of two vectors.
             </summary>
             
             <param name="vector1">The first vector to divide.</param>
             <param name="vector2">The second vector to devide.</param>
             
             <returns>Returns a vector which coordinates are equal to coordinates of the first vector divided by
             corresponding coordinates of the second vector.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector4.op_Division(AForge.Math.Vector4,System.Single)">
             <summary>
             Divides coordinates of the specified vector by the specified factor.
             </summary>
             
             <param name="vector">Vector to divide coordinates of.</param>
             <param name="factor">Factor to divide coordinates of the specified vector by.</param>
             
             <returns>Returns new vector with all coordinates divided by the specified factor.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector4.Divide(AForge.Math.Vector4,System.Single)">
             <summary>
             Divides coordinates of the specified vector by the specified factor.
             </summary>
             
             <param name="vector">Vector to divide coordinates of.</param>
             <param name="factor">Factor to divide coordinates of the specified vector by.</param>
             
             <returns>Returns new vector with all coordinates divided by the specified factor.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector4.op_Equality(AForge.Math.Vector4,AForge.Math.Vector4)">
            <summary>
            Tests whether two specified vectors are equal.
            </summary>
            
            <param name="vector1">The left-hand vector.</param>
            <param name="vector2">The right-hand vector.</param>
            
            <returns>Returns <see langword="true"/> if the two vectors are equal or <see langword="false"/> otherwise.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector4.op_Inequality(AForge.Math.Vector4,AForge.Math.Vector4)">
            <summary>
            Tests whether two specified vectors are not equal.
            </summary>
            
            <param name="vector1">The left-hand vector.</param>
            <param name="vector2">The right-hand vector.</param>
            
            <returns>Returns <see langword="true"/> if the two vectors are not equal or <see langword="false"/> otherwise.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector4.Equals(AForge.Math.Vector4)">
            <summary>
            Tests whether the vector equals to the specified one.
            </summary>
            
            <param name="vector">The vector to test equality with.</param>
            
            <returns>Returns <see langword="true"/> if the two vectors are equal or <see langword="false"/> otherwise.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector4.Equals(System.Object)">
            <summary>
            Tests whether the vector equals to the specified object.
            </summary>
            
            <param name="obj">The object to test equality with.</param>
            
            <returns>Returns <see langword="true"/> if the vector equals to the specified object or <see langword="false"/> otherwise.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector4.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            
            <returns>A 32-bit signed integer hash code.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector4.Normalize">
             <summary>
             Normalizes the vector by dividing it’s all coordinates with the vector's norm.
             </summary>
             
             <returns>Returns the value of vectors’ norm before normalization.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector4.Inverse">
             <summary>
             Inverse the vector.
             </summary>
             
             <returns>Returns a vector with all coordinates equal to 1.0 divided by the value of corresponding coordinate
             in this vector (or equal to 0.0 if this vector has corresponding coordinate also set to 0.0).</returns>
            
        </member>
        <member name="M:AForge.Math.Vector4.Abs">
            <summary>
            Calculate absolute values of the vector.
            </summary>
            
            <returns>Returns a vector with all coordinates equal to absolute values of this vector's coordinates.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector4.Dot(AForge.Math.Vector4,AForge.Math.Vector4)">
            <summary>
            Calculates dot product of two vectors.
            </summary>
            
            <param name="vector1">First vector to use for dot product calculation.</param>
            <param name="vector2">Second vector to use for dot product calculation.</param>
            
            <returns>Returns dot product of the two specified vectors.</returns>
            
        </member>
        <member name="M:AForge.Math.Vector4.ToVector3">
            <summary>
            Converts the vector to a 3D vector.
            </summary>
            
            <returns>Returns 3D vector which has X/Y/Z coordinates equal to X/Y/Z coordinates
            of this vector divided by <see cref="F:AForge.Math.Vector4.W"/>.</returns>
            
        </member>
        <member name="P:AForge.Math.Vector4.Max">
             <summary>
             Returns maximum value of the vector.
             </summary>
            
             <remarks><para>Returns maximum value of all 4 vector's coordinates.</para></remarks>
            
        </member>
        <member name="P:AForge.Math.Vector4.Min">
             <summary>
             Returns minimum value of the vector.
             </summary>
            
             <remarks><para>Returns minimum value of all 4 vector's coordinates.</para></remarks>
            
        </member>
        <member name="P:AForge.Math.Vector4.MaxIndex">
             <summary>
             Returns index of the coordinate with maximum value.
             </summary>
            
             <remarks><para>Returns index of the coordinate, which has the maximum value - 0 for X,
             1 for Y, 2 for Z or 3 for W.</para>
             
             <para><note>If there are multiple coordinates which have the same maximum value, the
             property returns smallest index.</note></para>
             </remarks>
            
        </member>
        <member name="P:AForge.Math.Vector4.MinIndex">
             <summary>
             Returns index of the coordinate with minimum value.
             </summary>
            
             <remarks><para>Returns index of the coordinate, which has the minimum value - 0 for X,
             1 for Y, 2 for Z or 3 for W.</para>
             
             <para><note>If there are multiple coordinates which have the same minimum value, the
             property returns smallest index.</note></para>
             </remarks>
            
        </member>
        <member name="P:AForge.Math.Vector4.Norm">
            <summary>
            Returns vector's norm.
            </summary>
            
            <remarks><para>Returns Euclidean norm of the vector, which is a
            square root of the sum: X<sup>2</sup>+Y<sup>2</sup>+Z<sup>2</sup>+W<sup>2</sup>.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Math.Vector4.Square">
            <summary>
            Returns square of the vector's norm.
            </summary>
            
            <remarks><para>Return X<sup>2</sup>+Y<sup>2</sup>+Z<sup>2</sup>+W<sup>2</sup>, which is
            a square of <see cref="P:AForge.Math.Vector4.Norm">vector's norm</see> or a <see cref="M:AForge.Math.Vector4.Dot(AForge.Math.Vector4,AForge.Math.Vector4)">dot product</see> of this vector
            with itself.</para></remarks>
            
        </member>
        <member name="T:AForge.Neuro.BipolarSigmoidFunction">
             <summary>
             Bipolar sigmoid activation function.
             </summary>
            
             <remarks><para>The class represents bipolar sigmoid activation function with
             the next expression:
             <code lang="none">
                            2
             f(x) = ------------------ - 1
                    1 + exp(-alpha * x)
            
                       2 * alpha * exp(-alpha * x )
             f'(x) = -------------------------------- = alpha * (1 - f(x)^2) / 2
                       (1 + exp(-alpha * x))^2
             </code>
             </para>
             
             <para>Output range of the function: <b>[-1, 1]</b>.</para>
             
             <para>Functions graph:</para>
             <img src="img/neuro/sigmoid_bipolar.bmp" width="242" height="172" />
             </remarks>
             
        </member>
        <member name="T:AForge.Neuro.IActivationFunction">
            <summary>
            Activation function interface.
            </summary>
            
            <remarks>All activation functions, which are supposed to be used with
            neurons, which calculate their output as a function of weighted sum of
            their inputs, should implement this interfaces.
            </remarks>
            
        </member>
        <member name="M:AForge.Neuro.IActivationFunction.Function(System.Double)">
             <summary>
             Calculates function value.
             </summary>
            
             <param name="x">Function input value.</param>
             
             <returns>Function output value, <i>f(x)</i>.</returns>
            
             <remarks>The method calculates function value at point <paramref name="x"/>.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.IActivationFunction.Derivative(System.Double)">
             <summary>
             Calculates function derivative.
             </summary>
             
             <param name="x">Function input value.</param>
             
             <returns>Function derivative, <i>f'(x)</i>.</returns>
             
             <remarks>The method calculates function derivative at point <paramref name="x"/>.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.IActivationFunction.Derivative2(System.Double)">
            <summary>
            Calculates function derivative.
            </summary>
            
            <param name="y">Function output value - the value, which was obtained
            with the help of <see cref="M:AForge.Neuro.IActivationFunction.Function(System.Double)"/> method.</param>
            
            <returns>Function derivative, <i>f'(x)</i>.</returns>
            
            <remarks><para>The method calculates the same derivative value as the
            <see cref="M:AForge.Neuro.IActivationFunction.Derivative(System.Double)"/> method, but it takes not the input <b>x</b> value
            itself, but the function value, which was calculated previously with
            the help of <see cref="M:AForge.Neuro.IActivationFunction.Function(System.Double)"/> method.</para>
            
            <para><note>Some applications require as function value, as derivative value,
            so they can save the amount of calculations using this method to calculate derivative.</note></para>
            </remarks>
            
        </member>
        <member name="M:AForge.Neuro.BipolarSigmoidFunction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Neuro.SigmoidFunction"/> class.
            </summary>
        </member>
        <member name="M:AForge.Neuro.BipolarSigmoidFunction.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Neuro.BipolarSigmoidFunction"/> class.
            </summary>
            
            <param name="alpha">Sigmoid's alpha value.</param>
            
        </member>
        <member name="M:AForge.Neuro.BipolarSigmoidFunction.Function(System.Double)">
             <summary>
             Calculates function value.
             </summary>
            
             <param name="x">Function input value.</param>
             
             <returns>Function output value, <i>f(x)</i>.</returns>
            
             <remarks>The method calculates function value at point <paramref name="x"/>.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.BipolarSigmoidFunction.Derivative(System.Double)">
             <summary>
             Calculates function derivative.
             </summary>
             
             <param name="x">Function input value.</param>
             
             <returns>Function derivative, <i>f'(x)</i>.</returns>
             
             <remarks>The method calculates function derivative at point <paramref name="x"/>.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.BipolarSigmoidFunction.Derivative2(System.Double)">
             <summary>
             Calculates function derivative.
             </summary>
             
             <param name="y">Function output value - the value, which was obtained
             with the help of <see cref="M:AForge.Neuro.BipolarSigmoidFunction.Function(System.Double)"/> method.</param>
             
             <returns>Function derivative, <i>f'(x)</i>.</returns>
            
             <remarks><para>The method calculates the same derivative value as the
             <see cref="M:AForge.Neuro.BipolarSigmoidFunction.Derivative(System.Double)"/> method, but it takes not the input <b>x</b> value
             itself, but the function value, which was calculated previously with
             the help of <see cref="M:AForge.Neuro.BipolarSigmoidFunction.Function(System.Double)"/> method.</para>
             
             <para><note>Some applications require as function value, as derivative value,
             so they can save the amount of calculations using this method to calculate derivative.</note></para>
             </remarks>
             
        </member>
        <member name="M:AForge.Neuro.BipolarSigmoidFunction.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
            A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="P:AForge.Neuro.BipolarSigmoidFunction.Alpha">
             <summary>
             Sigmoid's alpha value.
             </summary>
            
             <remarks><para>The value determines steepness of the function. Increasing value of
             this property changes sigmoid to look more like a threshold function. Decreasing
             value of this property makes sigmoid to be very smooth (slowly growing from its
             minimum value to its maximum value).</para>
            
             <para>Default value is set to <b>2</b>.</para>
             </remarks>
             
        </member>
        <member name="T:AForge.Neuro.SigmoidFunction">
             <summary>
             Sigmoid activation function.
             </summary>
            
             <remarks><para>The class represents sigmoid activation function with
             the next expression:
             <code lang="none">
                            1
             f(x) = ------------------
                    1 + exp(-alpha * x)
            
                       alpha * exp(-alpha * x )
             f'(x) = ---------------------------- = alpha * f(x) * (1 - f(x))
                       (1 + exp(-alpha * x))^2
             </code>
             </para>
            
             <para>Output range of the function: <b>[0, 1]</b>.</para>
             
             <para>Functions graph:</para>
             <img src="img/neuro/sigmoid.bmp" width="242" height="172" />
             </remarks>
             
        </member>
        <member name="M:AForge.Neuro.SigmoidFunction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Neuro.SigmoidFunction"/> class.
            </summary>
        </member>
        <member name="M:AForge.Neuro.SigmoidFunction.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Neuro.SigmoidFunction"/> class.
            </summary>
            
            <param name="alpha">Sigmoid's alpha value.</param>
            
        </member>
        <member name="M:AForge.Neuro.SigmoidFunction.Function(System.Double)">
             <summary>
             Calculates function value.
             </summary>
            
             <param name="x">Function input value.</param>
             
             <returns>Function output value, <i>f(x)</i>.</returns>
            
             <remarks>The method calculates function value at point <paramref name="x"/>.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.SigmoidFunction.Derivative(System.Double)">
             <summary>
             Calculates function derivative.
             </summary>
             
             <param name="x">Function input value.</param>
             
             <returns>Function derivative, <i>f'(x)</i>.</returns>
             
             <remarks>The method calculates function derivative at point <paramref name="x"/>.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.SigmoidFunction.Derivative2(System.Double)">
            <summary>
            Calculates function derivative.
            </summary>
            
            <param name="y">Function output value - the value, which was obtained
            with the help of <see cref="M:AForge.Neuro.SigmoidFunction.Function(System.Double)"/> method.</param>
            
            <returns>Function derivative, <i>f'(x)</i>.</returns>
            
            <remarks><para>The method calculates the same derivative value as the
            <see cref="M:AForge.Neuro.SigmoidFunction.Derivative(System.Double)"/> method, but it takes not the input <b>x</b> value
            itself, but the function value, which was calculated previously with
            the help of <see cref="M:AForge.Neuro.SigmoidFunction.Function(System.Double)"/> method.</para>
            
            <para><note>Some applications require as function value, as derivative value,
            so they can save the amount of calculations using this method to calculate derivative.</note></para>
            </remarks>
            
        </member>
        <member name="M:AForge.Neuro.SigmoidFunction.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
            A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="P:AForge.Neuro.SigmoidFunction.Alpha">
             <summary>
             Sigmoid's alpha value.
             </summary>
             
             <remarks><para>The value determines steepness of the function. Increasing value of
             this property changes sigmoid to look more like a threshold function. Decreasing
             value of this property makes sigmoid to be very smooth (slowly growing from its
             minimum value to its maximum value).</para>
            
             <para>Default value is set to <b>2</b>.</para>
             </remarks>
             
        </member>
        <member name="T:AForge.Neuro.ThresholdFunction">
             <summary>
             Threshold activation function.
             </summary>
            
             <remarks><para>The class represents threshold activation function with
             the next expression:
             <code lang="none">
             f(x) = 1, if x >= 0, otherwise 0
             </code>
             </para>
             
             <para>Output range of the function: <b>[0, 1]</b>.</para>
             
             <para>Functions graph:</para>
             <img src="img/neuro/threshold.bmp" width="242" height="172" />
             </remarks>
            
        </member>
        <member name="M:AForge.Neuro.ThresholdFunction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Neuro.ThresholdFunction"/> class.
            </summary>
        </member>
        <member name="M:AForge.Neuro.ThresholdFunction.Function(System.Double)">
             <summary>
             Calculates function value.
             </summary>
            
             <param name="x">Function input value.</param>
             
             <returns>Function output value, <i>f(x)</i>.</returns>
            
             <remarks>The method calculates function value at point <paramref name="x"/>.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.ThresholdFunction.Derivative(System.Double)">
             <summary>
             Calculates function derivative (not supported).
             </summary>
             
             <param name="x">Input value.</param>
             
             <returns>Always returns 0.</returns>
             
             <remarks><para><note>The method is not supported, because it is not possible to
             calculate derivative of the function.</note></para></remarks>
            
        </member>
        <member name="M:AForge.Neuro.ThresholdFunction.Derivative2(System.Double)">
            <summary>
            Calculates function derivative (not supported).
            </summary>
            
            <param name="y">Input value.</param>
            
            <returns>Always returns 0.</returns>
            
            <remarks><para><note>The method is not supported, because it is not possible to
            calculate derivative of the function.</note></para></remarks>
            
        </member>
        <member name="M:AForge.Neuro.ThresholdFunction.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
            A new object that is a copy of this instance.
            </returns>
            
        </member>
        <member name="T:AForge.Neuro.ActivationLayer">
             <summary>
             Activation layer.
             </summary>
             
             <remarks>Activation layer is a layer of <see cref="T:AForge.Neuro.ActivationNeuron">activation neurons</see>.
             The layer is usually used in multi-layer neural networks.</remarks>
            
        </member>
        <member name="T:AForge.Neuro.Layer">
            <summary>
            Base neural layer class.
            </summary>
            
            <remarks>This is a base neural layer class, which represents
            collection of neurons.</remarks>
            
        </member>
        <member name="F:AForge.Neuro.Layer.inputsCount">
            <summary>
            Layer's inputs count.
            </summary>
        </member>
        <member name="F:AForge.Neuro.Layer.neuronsCount">
            <summary>
            Layer's neurons count.
            </summary>
        </member>
        <member name="F:AForge.Neuro.Layer.neurons">
            <summary>
            Layer's neurons.
            </summary>
        </member>
        <member name="F:AForge.Neuro.Layer.output">
            <summary>
            Layer's output vector.
            </summary>
        </member>
        <member name="M:AForge.Neuro.Layer.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Neuro.Layer"/> class.
            </summary>
            
            <param name="neuronsCount">Layer's neurons count.</param>
            <param name="inputsCount">Layer's inputs count.</param>
            
            <remarks>Protected contructor, which initializes <see cref="F:AForge.Neuro.Layer.inputsCount"/>,
            <see cref="F:AForge.Neuro.Layer.neuronsCount"/> and <see cref="F:AForge.Neuro.Layer.neurons"/> members.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.Layer.Compute(System.Double[])">
            <summary>
            Compute output vector of the layer.
            </summary>
            
            <param name="input">Input vector.</param>
            
            <returns>Returns layer's output vector.</returns>
            
            <remarks><para>The actual layer's output vector is determined by neurons,
            which comprise the layer - consists of output values of layer's neurons.
            The output vector is also stored in <see cref="P:AForge.Neuro.Layer.Output"/> property.</para>
            
            <para><note>The method may be called safely from multiple threads to compute layer's
            output value for the specified input values. However, the value of
            <see cref="P:AForge.Neuro.Layer.Output"/> property in multi-threaded environment is not predictable,
            since it may hold layer's output computed from any of the caller threads. Multi-threaded
            access to the method is useful in those cases when it is required to improve performance
            by utilizing several threads and the computation is based on the immediate return value
            of the method, but not on layer's output property.</note></para>
            </remarks>
            
        </member>
        <member name="M:AForge.Neuro.Layer.Randomize">
            <summary>
            Randomize neurons of the layer.
            </summary>
            
            <remarks>Randomizes layer's neurons by calling <see cref="M:AForge.Neuro.Neuron.Randomize"/> method
            of each neuron.</remarks>
            
        </member>
        <member name="P:AForge.Neuro.Layer.InputsCount">
            <summary>
            Layer's inputs count.
            </summary>
        </member>
        <member name="P:AForge.Neuro.Layer.Neurons">
            <summary>
            Layer's neurons.
            </summary>
            
        </member>
        <member name="P:AForge.Neuro.Layer.Output">
            <summary>
            Layer's output vector.
            </summary>
            
            <remarks><para>The calculation way of layer's output vector is determined by neurons,
            which comprise the layer.</para>
            
            <para><note>The property is not initialized (equals to <see langword="null"/>) until
            <see cref="M:AForge.Neuro.Layer.Compute(System.Double[])"/> method is called.</note></para>
            </remarks>
            
        </member>
        <member name="M:AForge.Neuro.ActivationLayer.#ctor(System.Int32,System.Int32,AForge.Neuro.IActivationFunction)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Neuro.ActivationLayer"/> class.
            </summary>
            
            <param name="neuronsCount">Layer's neurons count.</param>
            <param name="inputsCount">Layer's inputs count.</param>
            <param name="function">Activation function of neurons of the layer.</param>
            
            <remarks>The new layer is randomized (see <see cref="M:AForge.Neuro.ActivationNeuron.Randomize"/>
            method) after it is created.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.ActivationLayer.SetActivationFunction(AForge.Neuro.IActivationFunction)">
            <summary>
            Set new activation function for all neurons of the layer.
            </summary>
            
            <param name="function">Activation function to set.</param>
            
            <remarks><para>The methods sets new activation function for each neuron by setting
            their <see cref="P:AForge.Neuro.ActivationNeuron.ActivationFunction"/> property.</para></remarks>
            
        </member>
        <member name="T:AForge.Neuro.DistanceLayer">
            <summary>
            Distance layer.
            </summary>
            
            <remarks>Distance layer is a layer of <see cref="T:AForge.Neuro.DistanceNeuron">distance neurons</see>.
            The layer is usually a single layer of such networks as Kohonen Self
            Organizing Map, Elastic Net, Hamming Memory Net.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.DistanceLayer.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Neuro.DistanceLayer"/> class.
            </summary>
            
            <param name="neuronsCount">Layer's neurons count.</param>
            <param name="inputsCount">Layer's inputs count.</param>
            
            <remarks>The new layet is randomized (see <see cref="M:AForge.Neuro.Neuron.Randomize"/>
            method) after it is created.</remarks>
            
        </member>
        <member name="T:AForge.Neuro.Learning.BackPropagationLearning">
            <summary>
            Back propagation learning algorithm.
            </summary>
            
            <remarks><para>The class implements back propagation learning algorithm,
            which is widely used for training multi-layer neural networks with
            continuous activation functions.</para>
            
            <para>Sample usage (training network to calculate XOR function):</para>
            <code>
            // initialize input and output values
            double[][] input = new double[4][] {
                new double[] {0, 0}, new double[] {0, 1},
                new double[] {1, 0}, new double[] {1, 1}
            };
            double[][] output = new double[4][] {
                new double[] {0}, new double[] {1},
                new double[] {1}, new double[] {0}
            };
            // create neural network
            ActivationNetwork   network = new ActivationNetwork(
                SigmoidFunction( 2 ),
                2, // two inputs in the network
                2, // two neurons in the first layer
                1 ); // one neuron in the second layer
            // create teacher
            BackPropagationLearning teacher = new BackPropagationLearning( network );
            // loop
            while ( !needToStop )
            {
                // run epoch of learning procedure
                double error = teacher.RunEpoch( input, output );
                // check error value to see if we need to stop
                // ...
            }
            </code>
            </remarks>
            
            <seealso cref="T:AForge.Neuro.Learning.EvolutionaryLearning"/>
            
        </member>
        <member name="T:AForge.Neuro.Learning.ISupervisedLearning">
            <summary>
            Supervised learning interface.
            </summary>
            
            <remarks><para>The interface describes methods, which should be implemented
            by all supervised learning algorithms. Supervised learning is such
            type of learning algorithms, where system's desired output is known on
            the learning stage. So, given sample input values and desired outputs,
            system should adopt its internals to produce correct (or close to correct)
            result after the learning step is complete.</para></remarks>
            
        </member>
        <member name="M:AForge.Neuro.Learning.ISupervisedLearning.Run(System.Double[],System.Double[])">
            <summary>
            Runs learning iteration.
            </summary>
            
            <param name="input">Input vector.</param>
            <param name="output">Desired output vector.</param>
            
            <returns>Returns learning error.</returns>
            
        </member>
        <member name="M:AForge.Neuro.Learning.ISupervisedLearning.RunEpoch(System.Double[][],System.Double[][])">
            <summary>
            Runs learning epoch.
            </summary>
            
            <param name="input">Array of input vectors.</param>
            <param name="output">Array of output vectors.</param>
            
            <returns>Returns sum of learning errors.</returns>
            
        </member>
        <member name="M:AForge.Neuro.Learning.BackPropagationLearning.#ctor(AForge.Neuro.ActivationNetwork)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Neuro.Learning.BackPropagationLearning"/> class.
            </summary>
            
            <param name="network">Network to teach.</param>
            
        </member>
        <member name="M:AForge.Neuro.Learning.BackPropagationLearning.Run(System.Double[],System.Double[])">
             <summary>
             Runs learning iteration.
             </summary>
             
             <param name="input">Input vector.</param>
             <param name="output">Desired output vector.</param>
             
             <returns>Returns squared error (difference between current network's output and
             desired output) divided by 2.</returns>
             
             <remarks><para>Runs one learning iteration and updates neuron's
             weights.</para></remarks>
            
        </member>
        <member name="M:AForge.Neuro.Learning.BackPropagationLearning.RunEpoch(System.Double[][],System.Double[][])">
            <summary>
            Runs learning epoch.
            </summary>
            
            <param name="input">Array of input vectors.</param>
            <param name="output">Array of output vectors.</param>
            
            <returns>Returns summary learning error for the epoch. See <see cref="M:AForge.Neuro.Learning.BackPropagationLearning.Run(System.Double[],System.Double[])"/>
            method for details about learning error calculation.</returns>
            
            <remarks><para>The method runs one learning epoch, by calling <see cref="M:AForge.Neuro.Learning.BackPropagationLearning.Run(System.Double[],System.Double[])"/> method
            for each vector provided in the <paramref name="input"/> array.</para></remarks>
            
        </member>
        <member name="M:AForge.Neuro.Learning.BackPropagationLearning.CalculateError(System.Double[])">
            <summary>
            Calculates error values for all neurons of the network.
            </summary>
            
            <param name="desiredOutput">Desired output vector.</param>
            
            <returns>Returns summary squared error of the last layer divided by 2.</returns>
            
        </member>
        <member name="M:AForge.Neuro.Learning.BackPropagationLearning.CalculateUpdates(System.Double[])">
            <summary>
            Calculate weights updates.
            </summary>
            
            <param name="input">Network's input vector.</param>
            
        </member>
        <member name="M:AForge.Neuro.Learning.BackPropagationLearning.UpdateNetwork">
            <summary>
            Update network'sweights.
            </summary>
            
        </member>
        <member name="P:AForge.Neuro.Learning.BackPropagationLearning.LearningRate">
             <summary>
             Learning rate, [0, 1].
             </summary>
             
             <remarks><para>The value determines speed of learning.</para>
             
             <para>Default value equals to <b>0.1</b>.</para>
             </remarks>
            
        </member>
        <member name="P:AForge.Neuro.Learning.BackPropagationLearning.Momentum">
            <summary>
            Momentum, [0, 1].
            </summary>
            
            <remarks><para>The value determines the portion of previous weight's update
            to use on current iteration. Weight's update values are calculated on
            each iteration depending on neuron's error. The momentum specifies the amount
            of update to use from previous iteration and the amount of update
            to use from current iteration. If the value is equal to 0.1, for example,
            then 0.1 portion of previous update and 0.9 portion of current update are used
            to update weight's value.</para>
            
            <para>Default value equals to <b>0.0</b>.</para>
            </remarks>
            
        </member>
        <member name="T:AForge.Neuro.Learning.DeltaRuleLearning">
            <summary>
            Delta rule learning algorithm.
            </summary>
            
            <remarks><para>This learning algorithm is used to train one layer neural
            network of <see cref="T:AForge.Neuro.ActivationNeuron">Activation Neurons</see>
            with continuous activation function, see <see cref="T:AForge.Neuro.SigmoidFunction"/>
            for example.</para>
            
            <para>See information about <a href="http://en.wikipedia.org/wiki/Delta_rule">delta rule</a>
            learning algorithm.</para>
            </remarks>
            
        </member>
        <member name="M:AForge.Neuro.Learning.DeltaRuleLearning.#ctor(AForge.Neuro.ActivationNetwork)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Neuro.Learning.DeltaRuleLearning"/> class.
            </summary>
            
            <param name="network">Network to teach.</param>
            
            <exception cref="T:System.ArgumentException">Invalid nuaral network. It should have one layer only.</exception>
            
        </member>
        <member name="M:AForge.Neuro.Learning.DeltaRuleLearning.Run(System.Double[],System.Double[])">
             <summary>
             Runs learning iteration.
             </summary>
             
             <param name="input">Input vector.</param>
             <param name="output">Desired output vector.</param>
             
             <returns>Returns squared error (difference between current network's output and
             desired output) divided by 2.</returns>
             
             <remarks><para>Runs one learning iteration and updates neuron's
             weights.</para></remarks>
            
        </member>
        <member name="M:AForge.Neuro.Learning.DeltaRuleLearning.RunEpoch(System.Double[][],System.Double[][])">
             <summary>
             Runs learning epoch.
             </summary>
             
             <param name="input">Array of input vectors.</param>
             <param name="output">Array of output vectors.</param>
             
             <returns>Returns summary learning error for the epoch. See <see cref="M:AForge.Neuro.Learning.DeltaRuleLearning.Run(System.Double[],System.Double[])"/>
             method for details about learning error calculation.</returns>
             
             <remarks><para>The method runs one learning epoch, by calling <see cref="M:AForge.Neuro.Learning.DeltaRuleLearning.Run(System.Double[],System.Double[])"/> method
             for each vector provided in the <paramref name="input"/> array.</para></remarks>
            
        </member>
        <member name="P:AForge.Neuro.Learning.DeltaRuleLearning.LearningRate">
            <summary>
            Learning rate, [0, 1].
            </summary>
            
            <remarks><para>The value determines speed of learning.</para>
            
            <para>Default value equals to <b>0.1</b>.</para>
            </remarks>
            
        </member>
        <member name="T:AForge.Neuro.Learning.ElasticNetworkLearning">
             <summary>
             Elastic network learning algorithm.
             </summary>
            
             <remarks><para>This class implements elastic network's learning algorithm and
             allows to train <see cref="T:AForge.Neuro.DistanceNetwork">Distance Networks</see>.</para>
             </remarks> 
            
        </member>
        <member name="T:AForge.Neuro.Learning.IUnsupervisedLearning">
            <summary>
            Unsupervised learning interface.
            </summary>
            
            <remarks><para>The interface describes methods, which should be implemented
            by all unsupervised learning algorithms. Unsupervised learning is such
            type of learning algorithms, where system's desired output is not known on
            the learning stage. Given sample input values, it is expected, that
            system will organize itself in the way to find similarities betweed provided
            samples.</para></remarks>
            
        </member>
        <member name="M:AForge.Neuro.Learning.IUnsupervisedLearning.Run(System.Double[])">
            <summary>
            Runs learning iteration.
            </summary>
            
            <param name="input">Input vector.</param>
            
            <returns>Returns learning error.</returns>
            
        </member>
        <member name="M:AForge.Neuro.Learning.IUnsupervisedLearning.RunEpoch(System.Double[][])">
             <summary>
             Runs learning epoch.
             </summary>
             
             <param name="input">Array of input vectors.</param>
            
             <returns>Returns sum of learning errors.</returns>
             
        </member>
        <member name="M:AForge.Neuro.Learning.ElasticNetworkLearning.#ctor(AForge.Neuro.DistanceNetwork)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Neuro.Learning.ElasticNetworkLearning"/> class.
            </summary>
            
            <param name="network">Neural network to train.</param>
            
        </member>
        <member name="M:AForge.Neuro.Learning.ElasticNetworkLearning.Run(System.Double[])">
            <summary>
            Runs learning iteration.
            </summary>
            
            <param name="input">Input vector.</param>
            
            <returns>Returns learning error - summary absolute difference between neurons'
            weights and appropriate inputs. The difference is measured according to the neurons
            distance to the winner neuron.</returns>
            
            <remarks><para>The method runs one learning iterations - finds winner neuron (the neuron
            which has weights with values closest to the specified input vector) and updates its weight
            (as well as weights of neighbor neurons) in the way to decrease difference with the specified
            input vector.</para></remarks>
            
        </member>
        <member name="M:AForge.Neuro.Learning.ElasticNetworkLearning.RunEpoch(System.Double[][])">
            <summary>
            Runs learning epoch.
            </summary>
            
            <param name="input">Array of input vectors.</param>
            
            <returns>Returns summary learning error for the epoch. See <see cref="M:AForge.Neuro.Learning.ElasticNetworkLearning.Run(System.Double[])"/>
            method for details about learning error calculation.</returns>
            
            <remarks><para>The method runs one learning epoch, by calling <see cref="M:AForge.Neuro.Learning.ElasticNetworkLearning.Run(System.Double[])"/> method
            for each vector provided in the <paramref name="input"/> array.</para></remarks>
            
        </member>
        <member name="P:AForge.Neuro.Learning.ElasticNetworkLearning.LearningRate">
            <summary>
            Learning rate, [0, 1].
            </summary>
            
            <remarks><para>Determines speed of learning.</para>
            
            <para>Default value equals to <b>0.1</b>.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Neuro.Learning.ElasticNetworkLearning.LearningRadius">
            <summary>
            Learning radius, [0, 1].
            </summary>
            
            <remarks><para>Determines the amount of neurons to be updated around
            winner neuron. Neurons, which are in the circle of specified radius,
            are updated during the learning procedure. Neurons, which are closer
            to the winner neuron, get more update.</para>
            
            <para>Default value equals to <b>0.5</b>.</para>
            </remarks>
            
        </member>
        <member name="T:AForge.Neuro.Learning.EvolutionaryFitness">
            <summary>
            Fitness function used for chromosomes representing collection of neural network's weights.
            </summary>
            
        </member>
        <member name="M:AForge.Neuro.Learning.EvolutionaryFitness.#ctor(AForge.Neuro.ActivationNetwork,System.Double[][],System.Double[][])">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Neuro.Learning.EvolutionaryFitness"/> class.
            </summary>
            
            <param name="network">Neural network for which fitness will be calculated.</param>
            <param name="input">Input data samples for neural network.</param>
            <param name="output">Output data sampels for neural network (desired output).</param>
            
            <exception cref="T:System.ArgumentException">Length of inputs and outputs arrays must be equal and greater than 0.</exception>
            <exception cref="T:System.ArgumentException">Length of each input vector must be equal to neural network's inputs count.</exception>
            
        </member>
        <member name="M:AForge.Neuro.Learning.EvolutionaryFitness.Evaluate(AForge.Genetic.IChromosome)">
             <summary>
             Evaluates chromosome.
             </summary>
             
             <param name="chromosome">Chromosome to evaluate.</param>
             
             <returns>Returns chromosome's fitness value.</returns>
            
             <remarks>The method calculates fitness value of the specified
             chromosome.</remarks>
            
        </member>
        <member name="T:AForge.Neuro.Learning.EvolutionaryLearning">
            <summary>
            Neural networks' evolutionary learning algorithm, which is based on Genetic Algorithms.
            </summary>
            
            <remarks><para>The class implements supervised neural network's learning algorithm,
            which is based on Genetic Algorithms. For the given neural network, it create a population
            of <see cref="T:AForge.Genetic.DoubleArrayChromosome"/> chromosomes, which represent neural network's
            weights. Then, during the learning process, the genetic population evolves and weights, which
            are represented by the best chromosome, are set to the source neural network.</para>
            
            <para>See <see cref="T:AForge.Genetic.Population"/> class for additional information about genetic population
            and evolutionary based search.</para>
            
            <para>Sample usage (training network to calculate XOR function):</para>
            <code>
            // initialize input and output values
            double[][] input = new double[4][] {
                new double[] {-1,  1}, new double[] {-1, 1},
                new double[] { 1, -1}, new double[] { 1, 1}
            };
            double[][] output = new double[4][] {
                new double[] {-1}, new double[] { 1},
                new double[] { 1}, new double[] {-1}
            };
            // create neural network
            ActivationNetwork   network = new ActivationNetwork(
                BipolarSigmoidFunction( 2 ),
                2, // two inputs in the network
                2, // two neurons in the first layer
                1 ); // one neuron in the second layer
            // create teacher
            EvolutionaryLearning teacher = new EvolutionaryLearning( network,
                100 ); // number of chromosomes in genetic population
            // loop
            while ( !needToStop )
            {
                // run epoch of learning procedure
                double error = teacher.RunEpoch( input, output );
                // check error value to see if we need to stop
                // ...
            }
            
            </code>
            </remarks>
            
            <seealso cref="T:AForge.Neuro.Learning.BackPropagationLearning"/>
            
        </member>
        <member name="M:AForge.Neuro.Learning.EvolutionaryLearning.#ctor(AForge.Neuro.ActivationNetwork,System.Int32,AForge.Math.Random.IRandomNumberGenerator,AForge.Math.Random.IRandomNumberGenerator,AForge.Math.Random.IRandomNumberGenerator,AForge.Genetic.ISelectionMethod,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Neuro.Learning.EvolutionaryLearning"/> class.
            </summary>
            
            <param name="activationNetwork">Activation network to be trained.</param>
            <param name="populationSize">Size of genetic population.</param>
            <param name="chromosomeGenerator">Random numbers generator used for initialization of genetic
            population representing neural network's weights and thresholds (see <see cref="F:AForge.Genetic.DoubleArrayChromosome.chromosomeGenerator"/>).</param>
            <param name="mutationMultiplierGenerator">Random numbers generator used to generate random
            factors for multiplication of network's weights and thresholds during genetic mutation
            (ses <see cref="F:AForge.Genetic.DoubleArrayChromosome.mutationMultiplierGenerator"/>.)</param>
            <param name="mutationAdditionGenerator">Random numbers generator used to generate random
            values added to neural network's weights and thresholds during genetic mutation
            (see <see cref="F:AForge.Genetic.DoubleArrayChromosome.mutationAdditionGenerator"/>).</param>
            <param name="selectionMethod">Method of selection best chromosomes in genetic population.</param>
            <param name="crossOverRate">Crossover rate in genetic population (see
            <see cref="P:AForge.Genetic.Population.CrossoverRate"/>).</param>
            <param name="mutationRate">Mutation rate in genetic population (see
            <see cref="P:AForge.Genetic.Population.MutationRate"/>).</param>
            <param name="randomSelectionRate">Rate of injection of random chromosomes during selection
            in genetic population (see <see cref="P:AForge.Genetic.Population.RandomSelectionPortion"/>).</param>
            
        </member>
        <member name="M:AForge.Neuro.Learning.EvolutionaryLearning.#ctor(AForge.Neuro.ActivationNetwork,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:AForge.Neuro.Learning.EvolutionaryLearning"/> class.
             </summary>
             
             <param name="activationNetwork">Activation network to be trained.</param>
             <param name="populationSize">Size of genetic population.</param>
             
             <remarks><para>This version of constructor is used to create genetic population
             for searching optimal neural network's weight using default set of parameters, which are:
             <list type="bullet">
             <item>Selection method - elite;</item>
             <item>Crossover rate - 0.75;</item>
             <item>Mutation rate - 0.25;</item>
             <item>Rate of injection of random chromosomes during selection - 0.20;</item>
             <item>Random numbers generator for initializing new chromosome -
             <c>UniformGenerator( new Range( -1, 1 ) )</c>;</item>
             <item>Random numbers generator used during mutation for genes' multiplication -
             <c>ExponentialGenerator( 1 )</c>;</item>
             <item>Random numbers generator used during mutation for adding random value to genes -
             <c>UniformGenerator( new Range( -0.5f, 0.5f ) )</c>.</item>
             </list></para>
             
             <para>In order to have full control over the above default parameters, it is possible to
             used extended version of constructor, which allows to specify all of the parameters.</para>
             </remarks>
            
        </member>
        <member name="M:AForge.Neuro.Learning.EvolutionaryLearning.Run(System.Double[],System.Double[])">
            <summary>
            Runs learning iteration.
            </summary>
            
            <param name="input">Input vector.</param>
            <param name="output">Desired output vector.</param>
            
            <returns>Returns learning error.</returns>
            
            <remarks><note>The method is not implemented, since evolutionary learning algorithm is global
            and requires all inputs/outputs in order to run its one epoch. Use <see cref="M:AForge.Neuro.Learning.EvolutionaryLearning.RunEpoch(System.Double[][],System.Double[][])"/>
            method instead.</note></remarks>
            
            <exception cref="T:System.NotImplementedException">The method is not implemented by design.</exception>
            
        </member>
        <member name="M:AForge.Neuro.Learning.EvolutionaryLearning.RunEpoch(System.Double[][],System.Double[][])">
             <summary>
             Runs learning epoch.
             </summary>
             
             <param name="input">Array of input vectors.</param>
             <param name="output">Array of output vectors.</param>
             
             <returns>Returns summary squared learning error for the entire epoch.</returns>
             
             <remarks><para><note>While running the neural network's learning process, it is required to
             pass the same <paramref name="input"/> and <paramref name="output"/> values for each
             epoch. On the very first run of the method it will initialize evolutionary fitness
             function with the given input/output. So, changing input/output in middle of the learning
             process, will break it.</note></para></remarks>
            
        </member>
        <member name="T:AForge.Neuro.Learning.PerceptronLearning">
            <summary>
            Perceptron learning algorithm.
            </summary>
            
            <remarks><para>This learning algorithm is used to train one layer neural
            network of <see cref="T:AForge.Neuro.ActivationNeuron">Activation Neurons</see>
            with the <see cref="T:AForge.Neuro.ThresholdFunction">Threshold</see>
            activation function.</para>
            
            <para>See information about <a href="http://en.wikipedia.org/wiki/Perceptron">Perceptron</a>
            and its learning algorithm.</para>
            </remarks>
            
        </member>
        <member name="M:AForge.Neuro.Learning.PerceptronLearning.#ctor(AForge.Neuro.ActivationNetwork)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Neuro.Learning.PerceptronLearning"/> class.
            </summary>
            
            <param name="network">Network to teach.</param>
            
            <exception cref="T:System.ArgumentException">Invalid nuaral network. It should have one layer only.</exception>
            
        </member>
        <member name="M:AForge.Neuro.Learning.PerceptronLearning.Run(System.Double[],System.Double[])">
            <summary>
            Runs learning iteration.
            </summary>
            
            <param name="input">Input vector.</param>
            <param name="output">Desired output vector.</param>
            
            <returns>Returns absolute error - difference between current network's output and
            desired output.</returns>
            
            <remarks><para>Runs one learning iteration and updates neuron's
            weights in the case if neuron's output is not equal to the
            desired output.</para></remarks>
            
        </member>
        <member name="M:AForge.Neuro.Learning.PerceptronLearning.RunEpoch(System.Double[][],System.Double[][])">
            <summary>
            Runs learning epoch.
            </summary>
            
            <param name="input">Array of input vectors.</param>
            <param name="output">Array of output vectors.</param>
            
            <returns>Returns summary learning error for the epoch. See <see cref="M:AForge.Neuro.Learning.PerceptronLearning.Run(System.Double[],System.Double[])"/>
            method for details about learning error calculation.</returns>
            
            <remarks><para>The method runs one learning epoch, by calling <see cref="M:AForge.Neuro.Learning.PerceptronLearning.Run(System.Double[],System.Double[])"/> method
            for each vector provided in the <paramref name="input"/> array.</para></remarks>
            
        </member>
        <member name="P:AForge.Neuro.Learning.PerceptronLearning.LearningRate">
            <summary>
            Learning rate, [0, 1].
            </summary>
            
            <remarks><para>The value determines speed of learning.</para>
            
            <para>Default value equals to <b>0.1</b>.</para>
            </remarks>
            
        </member>
        <member name="T:AForge.Neuro.Learning.ResilientBackpropagationLearning">
            <summary>
            Resilient Backpropagation learning algorithm.
            </summary>
            
            <remarks><para>This class implements the resilient backpropagation (RProp)
            learning algorithm. The RProp learning algorithm is one of the fastest learning
            algorithms for feed-forward learning networks which use only first-order
            information.</para>
            
            <para>Sample usage (training network to calculate XOR function):</para>
            <code>
            // initialize input and output values
            double[][] input = new double[4][] {
                new double[] {0, 0}, new double[] {0, 1},
                new double[] {1, 0}, new double[] {1, 1}
            };
            double[][] output = new double[4][] {
                new double[] {0}, new double[] {1},
                new double[] {1}, new double[] {0}
            };
            // create neural network
            ActivationNetwork   network = new ActivationNetwork(
                SigmoidFunction( 2 ),
                2, // two inputs in the network
                2, // two neurons in the first layer
                1 ); // one neuron in the second layer
            // create teacher
            ResilientBackpropagationLearning teacher = new ResilientBackpropagationLearning( network );
            // loop
            while ( !needToStop )
            {
                // run epoch of learning procedure
                double error = teacher.RunEpoch( input, output );
                // check error value to see if we need to stop
                // ...
            }
            </code>
            </remarks>
            
        </member>
        <member name="M:AForge.Neuro.Learning.ResilientBackpropagationLearning.#ctor(AForge.Neuro.ActivationNetwork)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Neuro.Learning.ResilientBackpropagationLearning"/> class.
            </summary>
            
            <param name="network">Network to teach.</param>
            
        </member>
        <member name="M:AForge.Neuro.Learning.ResilientBackpropagationLearning.Run(System.Double[],System.Double[])">
             <summary>
             Runs learning iteration.
             </summary>
             
             <param name="input">Input vector.</param>
             <param name="output">Desired output vector.</param>
             
             <returns>Returns squared error (difference between current network's output and
             desired output) divided by 2.</returns>
             
             <remarks><para>Runs one learning iteration and updates neuron's
             weights.</para></remarks>
            
        </member>
        <member name="M:AForge.Neuro.Learning.ResilientBackpropagationLearning.RunEpoch(System.Double[][],System.Double[][])">
            <summary>
            Runs learning epoch.
            </summary>
            
            <param name="input">Array of input vectors.</param>
            <param name="output">Array of output vectors.</param>
            
            <returns>Returns summary learning error for the epoch. See <see cref="M:AForge.Neuro.Learning.ResilientBackpropagationLearning.Run(System.Double[],System.Double[])"/>
            method for details about learning error calculation.</returns>
            
            <remarks><para>The method runs one learning epoch, by calling <see cref="M:AForge.Neuro.Learning.ResilientBackpropagationLearning.Run(System.Double[],System.Double[])"/> method
            for each vector provided in the <paramref name="input"/> array.</para></remarks>
            
        </member>
        <member name="M:AForge.Neuro.Learning.ResilientBackpropagationLearning.ResetGradient">
            <summary>
            Resets current weight and threshold derivatives.
            </summary>
            
        </member>
        <member name="M:AForge.Neuro.Learning.ResilientBackpropagationLearning.ResetUpdates(System.Double)">
            <summary>
            Resets the current update steps using the given learning rate.
            </summary>
            
        </member>
        <member name="M:AForge.Neuro.Learning.ResilientBackpropagationLearning.UpdateNetwork">
            <summary>
            Update network's weights.
            </summary>
            
        </member>
        <member name="M:AForge.Neuro.Learning.ResilientBackpropagationLearning.CalculateError(System.Double[])">
            <summary>
            Calculates error values for all neurons of the network.
            </summary>
            
            <param name="desiredOutput">Desired output vector.</param>
            
            <returns>Returns summary squared error of the last layer divided by 2.</returns>
            
        </member>
        <member name="M:AForge.Neuro.Learning.ResilientBackpropagationLearning.CalculateGradient(System.Double[])">
            <summary>
            Calculate weights updates
            </summary>
            
            <param name="input">Network's input vector.</param>
            
        </member>
        <member name="P:AForge.Neuro.Learning.ResilientBackpropagationLearning.LearningRate">
             <summary>
             Learning rate.
             </summary>
             
             <remarks><para>The value determines speed of learning.</para>
             
             <para>Default value equals to <b>0.0125</b>.</para>
             </remarks>
            
        </member>
        <member name="T:AForge.Neuro.Learning.SOMLearning">
            <summary>
            Kohonen Self Organizing Map (SOM) learning algorithm.
            </summary>
            
            <remarks><para>This class implements Kohonen's SOM learning algorithm and
            is widely used in clusterization tasks. The class allows to train
            <see cref="T:AForge.Neuro.DistanceNetwork">Distance Networks</see>.</para>
            
            <para>Sample usage (clustering RGB colors):</para>
            <code>
            // set range for randomization neurons' weights
            Neuron.RandRange = new Range( 0, 255 );
            // create network
            DistanceNetwork	network = new DistanceNetwork(
                    3, // thress inputs in the network
                    100 * 100 ); // 10000 neurons
            // create learning algorithm
            SOMLearning	trainer = new SOMLearning( network );
            // network's input
            double[] input = new double[3];
            // loop
            while ( !needToStop )
            {
                input[0] = rand.Next( 256 );
                input[1] = rand.Next( 256 );
                input[2] = rand.Next( 256 );
            
                trainer.Run( input );
            
                // ...
                // update learning rate and radius continuously,
                // so networks may come steady state
            }
            </code>
            </remarks>
            
        </member>
        <member name="M:AForge.Neuro.Learning.SOMLearning.#ctor(AForge.Neuro.DistanceNetwork)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Neuro.Learning.SOMLearning"/> class.
            </summary>
            
            <param name="network">Neural network to train.</param>
            
            <remarks><para>This constructor supposes that a square network will be passed for training -
            it should be possible to get square root of network's neurons amount.</para></remarks>
            
            <exception cref="T:System.ArgumentException">Invalid network size - square network is expected.</exception>
            
        </member>
        <member name="M:AForge.Neuro.Learning.SOMLearning.#ctor(AForge.Neuro.DistanceNetwork,System.Int32,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:AForge.Neuro.Learning.SOMLearning"/> class.
             </summary>
             
             <param name="network">Neural network to train.</param>
             <param name="width">Neural network's width.</param>
             <param name="height">Neural network's height.</param>
            
             <remarks>The constructor allows to pass network of arbitrary rectangular shape.
             The amount of neurons in the network should be equal to <b>width</b> * <b>height</b>.
             </remarks>
            
             <exception cref="T:System.ArgumentException">Invalid network size - network size does not correspond
             to specified width and height.</exception>
             
        </member>
        <member name="M:AForge.Neuro.Learning.SOMLearning.Run(System.Double[])">
            <summary>
            Runs learning iteration.
            </summary>
            
            <param name="input">Input vector.</param>
            
            <returns>Returns learning error - summary absolute difference between neurons' weights
            and appropriate inputs. The difference is measured according to the neurons
            distance to the winner neuron.</returns>
            
            <remarks><para>The method runs one learning iterations - finds winner neuron (the neuron
            which has weights with values closest to the specified input vector) and updates its weight
            (as well as weights of neighbor neurons) in the way to decrease difference with the specified
            input vector.</para></remarks>
            
        </member>
        <member name="M:AForge.Neuro.Learning.SOMLearning.RunEpoch(System.Double[][])">
            <summary>
            Runs learning epoch.
            </summary>
            
            <param name="input">Array of input vectors.</param>
            
            <returns>Returns summary learning error for the epoch. See <see cref="M:AForge.Neuro.Learning.SOMLearning.Run(System.Double[])"/>
            method for details about learning error calculation.</returns>
            
            <remarks><para>The method runs one learning epoch, by calling <see cref="M:AForge.Neuro.Learning.SOMLearning.Run(System.Double[])"/> method
            for each vector provided in the <paramref name="input"/> array.</para></remarks>
            
        </member>
        <member name="P:AForge.Neuro.Learning.SOMLearning.LearningRate">
            <summary>
            Learning rate, [0, 1].
            </summary>
            
            <remarks><para>Determines speed of learning.</para>
            
            <para>Default value equals to <b>0.1</b>.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Neuro.Learning.SOMLearning.LearningRadius">
            <summary>
            Learning radius.
            </summary>
            
            <remarks><para>Determines the amount of neurons to be updated around
            winner neuron. Neurons, which are in the circle of specified radius,
            are updated during the learning procedure. Neurons, which are closer
            to the winner neuron, get more update.</para>
            
            <para><note>In the case if learning rate is set to 0, then only winner
            neuron's weights are updated.</note></para>
            
            <para>Default value equals to <b>7</b>.</para>
            </remarks>
            
        </member>
        <member name="T:AForge.Neuro.ActivationNetwork">
             <summary>
             Activation network.
             </summary>
             
             <remarks><para>Activation network is a base for multi-layer neural network
             with activation functions. It consists of <see cref="T:AForge.Neuro.ActivationLayer">activation
             layers</see>.</para>
            
             <para>Sample usage:</para>
             <code>
             // create activation network
            	ActivationNetwork network = new ActivationNetwork(
            		new SigmoidFunction( ), // sigmoid activation function
            		3,                      // 3 inputs
            		4, 1 );                 // 2 layers:
                                         // 4 neurons in the firs layer
                                         // 1 neuron in the second layer
            	</code>
             </remarks>
             
        </member>
        <member name="T:AForge.Neuro.Network">
            <summary>
            Base neural network class.
            </summary>
            
            <remarks>This is a base neural netwok class, which represents
            collection of neuron's layers.</remarks>
            
        </member>
        <member name="F:AForge.Neuro.Network.inputsCount">
            <summary>
            Network's inputs count.
            </summary>
        </member>
        <member name="F:AForge.Neuro.Network.layersCount">
            <summary>
            Network's layers count.
            </summary>
        </member>
        <member name="F:AForge.Neuro.Network.layers">
            <summary>
            Network's layers.
            </summary>
        </member>
        <member name="F:AForge.Neuro.Network.output">
            <summary>
            Network's output vector.
            </summary>
        </member>
        <member name="M:AForge.Neuro.Network.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Neuro.Network"/> class.
            </summary>
            
            <param name="inputsCount">Network's inputs count.</param>
            <param name="layersCount">Network's layers count.</param>
            
            <remarks>Protected constructor, which initializes <see cref="F:AForge.Neuro.Network.inputsCount"/>,
            <see cref="F:AForge.Neuro.Network.layersCount"/> and <see cref="F:AForge.Neuro.Network.layers"/> members.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.Network.Compute(System.Double[])">
            <summary>
            Compute output vector of the network.
            </summary>
            
            <param name="input">Input vector.</param>
            
            <returns>Returns network's output vector.</returns>
            
            <remarks><para>The actual network's output vecor is determined by layers,
            which comprise the layer - represents an output vector of the last layer
            of the network. The output vector is also stored in <see cref="P:AForge.Neuro.Network.Output"/> property.</para>
            
            <para><note>The method may be called safely from multiple threads to compute network's
            output value for the specified input values. However, the value of
            <see cref="P:AForge.Neuro.Network.Output"/> property in multi-threaded environment is not predictable,
            since it may hold network's output computed from any of the caller threads. Multi-threaded
            access to the method is useful in those cases when it is required to improve performance
            by utilizing several threads and the computation is based on the immediate return value
            of the method, but not on network's output property.</note></para>
            </remarks>
            
        </member>
        <member name="M:AForge.Neuro.Network.Randomize">
            <summary>
            Randomize layers of the network.
            </summary>
            
            <remarks>Randomizes network's layers by calling <see cref="M:AForge.Neuro.Layer.Randomize"/> method
            of each layer.</remarks>
            
        </member>
        <member name="P:AForge.Neuro.Network.InputsCount">
            <summary>
            Network's inputs count.
            </summary>
        </member>
        <member name="P:AForge.Neuro.Network.Layers">
            <summary>
            Network's layers.
            </summary>
        </member>
        <member name="P:AForge.Neuro.Network.Output">
            <summary>
            Network's output vector.
            </summary>
            
            <remarks><para>The calculation way of network's output vector is determined by
            layers, which comprise the network.</para>
            
            <para><note>The property is not initialized (equals to <see langword="null"/>) until
            <see cref="M:AForge.Neuro.Network.Compute(System.Double[])"/> method is called.</note></para>
            </remarks>
            
        </member>
        <member name="M:AForge.Neuro.ActivationNetwork.#ctor(AForge.Neuro.IActivationFunction,System.Int32,System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Neuro.ActivationNetwork"/> class.
            </summary>
            
            <param name="function">Activation function of neurons of the network.</param>
            <param name="inputsCount">Network's inputs count.</param>
            <param name="neuronsCount">Array, which specifies the amount of neurons in
            each layer of the neural network.</param>
            
            <remarks>The new network is randomized (see <see cref="M:AForge.Neuro.ActivationNeuron.Randomize"/>
            method) after it is created.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.ActivationNetwork.SetActivationFunction(AForge.Neuro.IActivationFunction)">
            <summary>
            Set new activation function for all neurons of the network.
            </summary>
            
            <param name="function">Activation function to set.</param>
            
            <remarks><para>The method sets new activation function for all neurons by calling
            <see cref="M:AForge.Neuro.ActivationLayer.SetActivationFunction(AForge.Neuro.IActivationFunction)"/> method for each layer of the network.</para></remarks>
            
        </member>
        <member name="T:AForge.Neuro.DistanceNetwork">
             <summary>
             Distance network.
             </summary>
            
             <remarks>Distance network is a neural network of only one <see cref="T:AForge.Neuro.DistanceLayer">distance
             layer</see>. The network is a base for such neural networks as SOM, Elastic net, etc.
             </remarks>
            
        </member>
        <member name="M:AForge.Neuro.DistanceNetwork.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Neuro.DistanceNetwork"/> class.
            </summary>
            
            <param name="inputsCount">Network's inputs count.</param>
            <param name="neuronsCount">Network's neurons count.</param>
            
            <remarks>The new network is randomized (see <see cref="M:AForge.Neuro.Neuron.Randomize"/>
            method) after it is created.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.DistanceNetwork.GetWinner">
            <summary>
            Get winner neuron.
            </summary>
            
            <returns>Index of the winner neuron.</returns>
            
            <remarks>The method returns index of the neuron, which weights have
            the minimum distance from network's input.</remarks>
            
        </member>
        <member name="T:AForge.Neuro.ActivationNeuron">
            <summary>
            Activation neuron.
            </summary>
            
            <remarks><para>Activation neuron computes weighted sum of its inputs, adds
            threshold value and then applies <see cref="P:AForge.Neuro.ActivationNeuron.ActivationFunction">activation function</see>.
            The neuron isusually used in multi-layer neural networks.</para></remarks>
            
            <seealso cref="T:AForge.Neuro.IActivationFunction"/>
            
        </member>
        <member name="T:AForge.Neuro.Neuron">
            <summary>
            Base neuron class.
            </summary>
            
            <remarks>This is a base neuron class, which encapsulates such
            common properties, like neuron's input, output and weights.</remarks>
            
        </member>
        <member name="F:AForge.Neuro.Neuron.inputsCount">
            <summary>
            Neuron's inputs count.
            </summary>
        </member>
        <member name="F:AForge.Neuro.Neuron.weights">
            <summary>
            Nouron's wieghts.
            </summary>
        </member>
        <member name="F:AForge.Neuro.Neuron.output">
            <summary>
            Neuron's output value.
            </summary>
        </member>
        <member name="F:AForge.Neuro.Neuron.rand">
            <summary>
            Random number generator.
            </summary>
            
            <remarks>The generator is used for neuron's weights randomization.</remarks>
            
        </member>
        <member name="F:AForge.Neuro.Neuron.randRange">
            <summary>
            Random generator range.
            </summary>
            
            <remarks>Sets the range of random generator. Affects initial values of neuron's weight.
            Default value is [0, 1].</remarks>
            
        </member>
        <member name="M:AForge.Neuro.Neuron.#ctor(System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:AForge.Neuro.Neuron"/> class.
             </summary>
            
             <param name="inputs">Neuron's inputs count.</param>
             
             <remarks>The new neuron will be randomized (see <see cref="M:AForge.Neuro.Neuron.Randomize"/> method)
             after it is created.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.Neuron.Randomize">
            <summary>
            Randomize neuron.
            </summary>
            
            <remarks>Initialize neuron's weights with random values within the range specified
            by <see cref="P:AForge.Neuro.Neuron.RandRange"/>.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.Neuron.Compute(System.Double[])">
            <summary>
            Computes output value of neuron.
            </summary>
            
            <param name="input">Input vector.</param>
            
            <returns>Returns neuron's output value.</returns>
            
            <remarks>The actual neuron's output value is determined by inherited class.
            The output value is also stored in <see cref="P:AForge.Neuro.Neuron.Output"/> property.</remarks>
            
        </member>
        <member name="P:AForge.Neuro.Neuron.RandGenerator">
            <summary>
            Random number generator.
            </summary>
            
            <remarks>The property allows to initialize random generator with a custom seed. The generator is
            used for neuron's weights randomization.</remarks>
            
        </member>
        <member name="P:AForge.Neuro.Neuron.RandRange">
            <summary>
            Random generator range.
            </summary>
            
            <remarks>Sets the range of random generator. Affects initial values of neuron's weight.
            Default value is [0, 1].</remarks>
            
        </member>
        <member name="P:AForge.Neuro.Neuron.InputsCount">
            <summary>
            Neuron's inputs count.
            </summary>
        </member>
        <member name="P:AForge.Neuro.Neuron.Output">
            <summary>
            Neuron's output value.
            </summary>
            
            <remarks>The calculation way of neuron's output value is determined by inherited class.</remarks>
            
        </member>
        <member name="P:AForge.Neuro.Neuron.Weights">
            <summary>
            Neuron's weights.
            </summary>
        </member>
        <member name="F:AForge.Neuro.ActivationNeuron.threshold">
            <summary>
            Threshold value.
            </summary>
            
            <remarks>The value is added to inputs weighted sum before it is passed to activation
            function.</remarks>
            
        </member>
        <member name="F:AForge.Neuro.ActivationNeuron.function">
            <summary>
            Activation function.
            </summary>
            
            <remarks>The function is applied to inputs weighted sum plus
            threshold value.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.ActivationNeuron.#ctor(System.Int32,AForge.Neuro.IActivationFunction)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Neuro.ActivationNeuron"/> class.
            </summary>
            
            <param name="inputs">Neuron's inputs count.</param>
            <param name="function">Neuron's activation function.</param>
            
        </member>
        <member name="M:AForge.Neuro.ActivationNeuron.Randomize">
            <summary>
            Randomize neuron.
            </summary>
            
            <remarks>Calls base class <see cref="M:AForge.Neuro.Neuron.Randomize">Randomize</see> method
            to randomize neuron's weights and then randomizes threshold's value.</remarks>
            
        </member>
        <member name="M:AForge.Neuro.ActivationNeuron.Compute(System.Double[])">
            <summary>
            Computes output value of neuron.
            </summary>
            
            <param name="input">Input vector.</param>
            
            <returns>Returns neuron's output value.</returns>
            
            <remarks><para>The output value of activation neuron is equal to value
            of nueron's activation function, which parameter is weighted sum
            of its inputs plus threshold value. The output value is also stored
            in <see cref="P:AForge.Neuro.Neuron.Output">Output</see> property.</para>
            
            <para><note>The method may be called safely from multiple threads to compute neuron's
            output value for the specified input values. However, the value of
            <see cref="P:AForge.Neuro.Neuron.Output"/> property in multi-threaded environment is not predictable,
            since it may hold neuron's output computed from any of the caller threads. Multi-threaded
            access to the method is useful in those cases when it is required to improve performance
            by utilizing several threads and the computation is based on the immediate return value
            of the method, but not on neuron's output property.</note></para>
            </remarks>
            
            <exception cref="T:System.ArgumentException">Wrong length of the input vector, which is not
            equal to the <see cref="P:AForge.Neuro.Neuron.InputsCount">expected value</see>.</exception>
            
        </member>
        <member name="P:AForge.Neuro.ActivationNeuron.Threshold">
            <summary>
            Threshold value.
            </summary>
            
            <remarks>The value is added to inputs weighted sum before it is passed to activation
            function.</remarks>
            
        </member>
        <member name="P:AForge.Neuro.ActivationNeuron.ActivationFunction">
            <summary>
            Neuron's activation function.
            </summary>
            
        </member>
        <member name="T:AForge.Neuro.DistanceNeuron">
            <summary>
            Distance neuron.
            </summary>
            
            <remarks><para>Distance neuron computes its output as distance between
            its weights and inputs - sum of absolute differences between weights'
            values and corresponding inputs' values. The neuron is usually used in Kohonen
            Self Organizing Map.</para></remarks>
            
        </member>
        <member name="M:AForge.Neuro.DistanceNeuron.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Neuro.DistanceNeuron"/> class.
            </summary>
            
            <param name="inputs">Neuron's inputs count.</param>
            
        </member>
        <member name="M:AForge.Neuro.DistanceNeuron.Compute(System.Double[])">
            <summary>
            Computes output value of neuron.
            </summary>
            
            <param name="input">Input vector.</param>
            
            <returns>Returns neuron's output value.</returns>
            
            <remarks><para>The output value of distance neuron is equal to the distance
            between its weights and inputs - sum of absolute differences.
            The output value is also stored in <see cref="P:AForge.Neuro.Neuron.Output">Output</see>
            property.</para>
            
            <para><note>The method may be called safely from multiple threads to compute neuron's
            output value for the specified input values. However, the value of
            <see cref="P:AForge.Neuro.Neuron.Output"/> property in multi-threaded environment is not predictable,
            since it may hold neuron's output computed from any of the caller threads. Multi-threaded
            access to the method is useful in those cases when it is required to improve performance
            by utilizing several threads and the computation is based on the immediate return value
            of the method, but not on neuron's output property.</note></para>
            </remarks>
            
            <exception cref="T:System.ArgumentException">Wrong length of the input vector, which is not
            equal to the <see cref="P:AForge.Neuro.Neuron.InputsCount">expected value</see>.</exception>
            
        </member>
        <member name="T:AForge.Imaging.Formats.IImageDecoder">
            <summary>
            Image decoder interface, which specifies set of methods, which should be
            implemented by image decoders for different file formats.
            </summary>
            
            <remarks><para>The interface specifies set of methods, which are suitable not
            only for simple one-frame image formats. The interface also defines methods
            to work with image formats designed to store multiple frames and image formats
            which provide different type of image description (like acquisition
            parameters, etc).
            </para></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Formats.IImageDecoder.DecodeSingleFrame(System.IO.Stream)">
            <summary>
            Decode first frame of image from the specified stream.
            </summary>
            
            <param name="stream">Source stream, which contains encoded image.</param>
            
            <returns>Returns decoded image frame.</returns>
            
            <remarks>
            <para>For one-frame image formats the method is supposed to decode single
            available frame. For multi-frame image formats the first frame should be
            decoded.</para>
            
            <para>Implementations of this method may throw
            <see cref="T:System.FormatException"/> exception to report about unrecognized image
            format, <see cref="T:System.ArgumentException"/> exception to report about incorrectly
            formatted image or <see cref="T:System.NotSupportedException"/> exception to report if
            certain formats are not supported.</para>
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Formats.IImageDecoder.Open(System.IO.Stream)">
            <summary>
            Open specified stream.
            </summary>
            
            <param name="stream">Stream to open.</param>
            
            <returns>Returns number of images found in the specified stream.</returns>
            
            <remarks><para>Implementation of this method is supposed to read image's header,
            checking for correct image format and reading its atributes.</para>
            
            <para>Implementations of this method may throw
            <see cref="T:System.FormatException"/> exception to report about unrecognized image
            format, <see cref="T:System.ArgumentException"/> exception to report about incorrectly
            formatted image or <see cref="T:System.NotSupportedException"/> exception to report if
            certain formats are not supported.</para>
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Formats.IImageDecoder.DecodeFrame(System.Int32,AForge.Imaging.Formats.ImageInfo@)">
            <summary>
            Decode specified frame.
            </summary>
            
            <param name="frameIndex">Image frame to decode.</param>
            <param name="imageInfo">Receives information about decoded frame.</param>
            
            <returns>Returns decoded frame.</returns>
            
            <remarks>Implementations of this method may throw
            <see cref="T:System.NullReferenceException"/> exception in the case if no image
            stream was opened previously, <see cref="T:System.ArgumentOutOfRangeException"/> in the
            case if stream does not contain frame with specified index or  <see cref="T:System.ArgumentException"/>
            exception to report about incorrectly formatted image.
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Formats.IImageDecoder.Close">
            <summary>
            Close decoding of previously opened stream.
            </summary>
            
            <remarks><para>Implementations of this method don't close stream itself, but just close
            decoding cleaning all associated data with it.</para></remarks>
            
        </member>
        <member name="T:AForge.Imaging.Formats.ImageInfo">
            <summary>
            Information about image's frame.
            </summary>
            
            <remarks><para>This is a base class, which keeps basic information about image, like its width,
            height, etc. Classes, which inherit from this, may define more properties describing certain
            image formats.</para></remarks>
            
        </member>
        <member name="F:AForge.Imaging.Formats.ImageInfo.width">
            <summary>
            Image's width.
            </summary>
        </member>
        <member name="F:AForge.Imaging.Formats.ImageInfo.height">
            <summary>
            Image's height.
            </summary>
        </member>
        <member name="F:AForge.Imaging.Formats.ImageInfo.bitsPerPixel">
            <summary>
            Number of bits per image's pixel.
            </summary>
        </member>
        <member name="F:AForge.Imaging.Formats.ImageInfo.frameIndex">
            <summary>
            Frame's index.
            </summary>
        </member>
        <member name="F:AForge.Imaging.Formats.ImageInfo.totalFrames">
            <summary>
             Total frames in the image.
            </summary>
        </member>
        <member name="M:AForge.Imaging.Formats.ImageInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Formats.ImageInfo"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Formats.ImageInfo.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Formats.ImageInfo"/> class.
            </summary>
            
            <param name="width">Image's width.</param>
            <param name="height">Image's height.</param>
            <param name="bitsPerPixel">Number of bits per image's pixel.</param>
            <param name="frameIndex">Frame's index.</param>
            <param name="totalFrames">Total frames in the image.</param>
            
        </member>
        <member name="M:AForge.Imaging.Formats.ImageInfo.Clone">
            <summary>
            Creates a new object that is a copy of the current instance. 
            </summary>
            
            <returns>A new object that is a copy of this instance.</returns>
            
        </member>
        <member name="P:AForge.Imaging.Formats.ImageInfo.Width">
            <summary>
            Image's width.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Formats.ImageInfo.Height">
            <summary>
            Image's height.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Formats.ImageInfo.BitsPerPixel">
            <summary>
            Number of bits per image's pixel.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Formats.ImageInfo.FrameIndex">
            <summary>
            Frame's index.
            </summary>
            
            <remarks><para>Some image formats support storing multiple frames in one image file.
            The property specifies index of a particular frame.</para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Formats.ImageInfo.TotalFrames">
            <summary>
            Total frames in the image.
            </summary>
            
            <remarks><para>Some image formats support storing multiple frames in one image file.
            The property specifies total number of frames in image file.</para></remarks>
            
        </member>
        <member name="T:AForge.Imaging.Formats.ImageDecoder">
            <summary>
            Image decoder to decode different custom image file formats.
            </summary>
            
            <remarks><para>The class represent a help class, which simplifies decoding of image
            files finding appropriate image decoder automatically (using list of registered
            image decoders). Instead of using required image decoder directly, users may use this
            class, which will find required decoder by file's extension.</para>
            
            <para>By default the class registers on its own all decoders, which are available in
            AForge.Imaging.Formats library. If user has implementation of his own image decoders, he
            needs to register them using <see cref="M:AForge.Imaging.Formats.ImageDecoder.RegisterDecoder(System.String,AForge.Imaging.Formats.IImageDecoder)"/> method to be able to use them through
            the <see cref="T:AForge.Imaging.Formats.ImageDecoder"/> class.</para>
            
            <para><note>If the class can not find appropriate decode in the list of registered
            decoders, it passes file to .NET's image decoder for decoding.</note></para>
            
            <para>Sample usage:</para>
            <code>
            // sample file name
            string fileName = "myFile.pnm";
            // decode image file
            Bitmap = ImageDecoder.DecodeFromFile( fileName );
            </code>
            </remarks>
            
            <seealso cref="!:PNMCodec"/>
            <seealso cref="!:FITSCodec"/>
            
        </member>
        <member name="M:AForge.Imaging.Formats.ImageDecoder.RegisterDecoder(System.String,AForge.Imaging.Formats.IImageDecoder)">
            <summary>
            Register image decoder for a specified file extension.
            </summary>
            
            <param name="fileExtension">File extension to register decoder for ("bmp", for example).</param>
            <param name="decoder">Image decoder to use for the specified file extension.</param>
            
            <remarks><para>The method allows to register image decoder object, which should be used
            to decode images from files with the specified extension.</para></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Formats.ImageDecoder.DecodeFromFile(System.String)">
            <summary>
            Decode first frame for the specified file.
            </summary>
            
            <param name="fileName">File name to read image from.</param>
            
            <returns>Return decoded image. In the case if file format support multiple
            frames, the method return the first frame.</returns>
            
            <remarks><para>The method uses table of registered image decoders to find the one,
            which should be used for the specified file. If there is not appropriate decoder
            found, the method uses default .NET's image decoding routine (see
            <see cref="!:System.Drawing.Image.FromFile( string )"/>).</para></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Formats.ImageDecoder.DecodeFromFile(System.String,AForge.Imaging.Formats.ImageInfo@)">
            <summary>
            Decode first frame for the specified file.
            </summary>
            
            <param name="fileName">File name to read image from.</param>
            <param name="imageInfo">Information about the decoded image.</param>
            
            <returns>Return decoded image. In the case if file format support multiple
            frames, the method return the first frame.</returns>
            
            <remarks><para>The method uses table of registered image decoders to find the one,
            which should be used for the specified file. If there is not appropriate decoder
            found, the method uses default .NET's image decoding routine (see
            <see cref="!:System.Drawing.Image.FromFile( string )"/>).</para></remarks>
            
        </member>
        <member name="T:AForge.Imaging.Formats.Tools">
            <summary>
            Set of tools used internally in AForge.Imaging.Formats library.
            </summary>
        </member>
        <member name="M:AForge.Imaging.Formats.Tools.ReadStream(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read specified amount of bytes from the specified stream.
            </summary>
            
            <param name="stream">Source sream to read data from.</param>
            <param name="buffer">Buffer to read data into.</param>
            <param name="offset">Offset in buffer to put data into.</param>
            <param name="count">Number of bytes to read.</param>
            
            <returns>Returns total number of bytes read. It may be smaller than requested amount only
            in the case if end of stream was reached.</returns>
            
            <remarks><para>This tool function guarantees that requested number of bytes
            was read from the source stream (.NET streams don't guarantee this and may return less bytes
            than it was requested). Only in the case if end of stream was reached, the function
            may return with less bytes read.</para>
            </remarks>
            
        </member>
        <member name="T:AForge.Imaging.Blob">
            <summary>
            Image's blob.
            </summary>
            
            <remarks><para>The class represents a blob - part of another images. The
            class encapsulates the blob itself and information about its position
            in parent image.</para>
            
            <para><note>The class is not responsible for blob's image disposing, so it should be
            done manually when it is required.</note></para>
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Blob.#ctor(System.Int32,Alt.Sketch.RectI)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Blob"/> class.
            </summary>
            
            <param name="id">Blob's ID in the original image.</param>
            <param name="rect">Blob's rectangle in the original image.</param>
            
            <remarks><para>This constructor leaves <see cref="P:AForge.Imaging.Blob.Image"/> property not initialized. The blob's
            image may be extracted later using <see cref="M:AForge.Imaging.BlobCounterBase.ExtractBlobsImage(Alt.Sketch.Bitmap,AForge.Imaging.Blob,System.Boolean)"/>
            or <see cref="M:AForge.Imaging.BlobCounterBase.ExtractBlobsImage(AForge.Imaging.UnmanagedImage,AForge.Imaging.Blob,System.Boolean)"/> method.</para></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Blob.#ctor(AForge.Imaging.Blob)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Blob"/> class.
            </summary>
            
            <param name="source">Source blob to copy.</param>
            
            <remarks><para>This copy constructor leaves <see cref="P:AForge.Imaging.Blob.Image"/> property not initialized. The blob's
            image may be extracted later using <see cref="M:AForge.Imaging.BlobCounterBase.ExtractBlobsImage(Alt.Sketch.Bitmap,AForge.Imaging.Blob,System.Boolean)"/>
            or <see cref="M:AForge.Imaging.BlobCounterBase.ExtractBlobsImage(AForge.Imaging.UnmanagedImage,AForge.Imaging.Blob,System.Boolean)"/> method.</para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Blob.Image">
             <summary>
             Blob's image.
             </summary>
            
             <remarks><para>The property keeps blob's image. In the case if it equals to <b>null</b>,
             the image may be extracted using <see cref="M:AForge.Imaging.BlobCounterBase.ExtractBlobsImage(Alt.Sketch.Bitmap,AForge.Imaging.Blob,System.Boolean)"/>
             or <see cref="M:AForge.Imaging.BlobCounterBase.ExtractBlobsImage(AForge.Imaging.UnmanagedImage,AForge.Imaging.Blob,System.Boolean)"/> method.</para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Blob.OriginalSize">
            <summary>
            Blob's image size.
            </summary>
            
            <remarks><para>The property specifies size of the <see cref="P:AForge.Imaging.Blob.Image">blob's image</see>.
            If the property is set to <see langword="true"/>, the blob's image size equals to the
            size of original image. If the property is set to <see langword="false"/>, the blob's
            image size equals to size of actual blob.</para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Blob.Rectangle">
            <summary>
            Blob's rectangle in the original image.
            </summary>
            
            <remarks><para>The property specifies position of the blob in the original image
            and its size.</para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Blob.ID">
            <summary>
            Blob's ID in the original image.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Blob.Area">
            <summary>
            Blob's area.
            </summary>
            
            <remarks><para>The property equals to blob's area measured in number of pixels
            contained by the blob.</para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Blob.Fullness">
            <summary>
            Blob's fullness, [0, 1].
            </summary>
            
            <remarks><para>The property equals to blob's fullness, which is calculated
            as <b>Area / ( Width * Height )</b>. If it equals to <b>1</b>, then
            it means that entire blob's rectangle is filled by blob's pixel (no
            blank areas), which is true only for rectangles. If it equals to <b>0.5</b>,
            for example, then it means that only half of the bounding rectangle is filled
            by blob's pixels.</para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Blob.CenterOfGravity">
            <summary>
            Blob's center of gravity point.
            </summary>
            
            <remarks><para>The property keeps center of gravity point, which is calculated as
            mean value of X and Y coordinates of blob's points.</para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Blob.ColorMean">
            <summary>
            Blob's mean color.
            </summary>
            
            <remarks><para>The property keeps mean color of pixels comprising the blob.</para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Blob.ColorStdDev">
            <summary>
            Blob color's standard deviation.
            </summary>
            
            <remarks><para>The property keeps standard deviation of pixels' colors comprising the blob.</para></remarks>
            
        </member>
        <member name="T:AForge.Imaging.BlobCounter">
            <summary>
            Blob counter - counts objects in image, which are separated by black background.
            </summary>
            
            <remarks><para>The class counts and extracts stand alone objects in
            images using connected components labeling algorithm.</para>
            
            <para><note>The algorithm treats all pixels with values less or equal to <see cref="P:AForge.Imaging.BlobCounter.BackgroundThreshold"/>
            as background, but pixels with higher values are treated as objects' pixels.</note></para>
            
            <para>For blobs' searching the class supports 8 bpp indexed grayscale images and
            24/32 bpp color images that are at least two pixels wide. Images that are one
            pixel wide can be processed if they are rotated first, or they can be processed
            with <see cref="T:AForge.Imaging.RecursiveBlobCounter"/>.
            See documentation about <see cref="T:AForge.Imaging.BlobCounterBase"/> for information about which
            pixel formats are supported for extraction of blobs.</para>
            
            <para>Sample usage:</para>
            <code>
            // create an instance of blob counter algorithm
            BlobCounter bc = new BlobCounter( );
            // process binary image
            bc.ProcessImage( image );
            RectI[] rects = bc.GetObjectsRectangles( );
            // process blobs
            foreach ( RectI rect in rects )
            {
                // ...
            }
            </code>
            </remarks>
            
        </member>
        <member name="T:AForge.Imaging.BlobCounterBase">
            <summary>
            Base class for different blob counting algorithms.
            </summary>
            
            <remarks><para>The class is abstract and serves as a base for different blob counting algorithms.
            Classes, which inherit from this base class, require to implement <see cref="M:AForge.Imaging.BlobCounterBase.BuildObjectsMap(AForge.Imaging.UnmanagedImage)"/>
            method, which does actual building of object's label's map.</para>
            
            <para>For blobs' searcing usually all inherited classes accept binary images, which are actually
            grayscale thresholded images. But the exact supported format should be checked in particular class,
            inheriting from the base class. For blobs' extraction the class supports grayscale (8 bpp indexed)
            and color images (24 and 32 bpp).</para>
            
            <para>Sample usage:</para>
            <code>
            // create an instance of blob counter algorithm
            BlobCounterBase bc = new ...
            // set filtering options
            bc.FilterBlobs = true;
            bc.MinWidth  = 5;
            bc.MinHeight = 5;
            // process binary image
            bc.ProcessImage( image );
            Blob[] blobs = bc.GetObjects( image, false );
            // process blobs
            foreach ( Blob blob in blobs )
            {
                // ...
                // blob.Rectangle - blob's rectangle
                // blob.Image - blob's image
            }
            </code>
            </remarks>
            
        </member>
        <member name="F:AForge.Imaging.BlobCounterBase.objectsCount">
            <summary>
            Objects count.
            </summary>
        </member>
        <member name="F:AForge.Imaging.BlobCounterBase.objectLabels">
            <summary>
            Objects' labels.
            </summary>
        </member>
        <member name="F:AForge.Imaging.BlobCounterBase.imageWidth">
            <summary>
            Width of processed image.
            </summary>
        </member>
        <member name="F:AForge.Imaging.BlobCounterBase.imageHeight">
            <summary>
            Height of processed image.
            </summary>
        </member>
        <member name="M:AForge.Imaging.BlobCounterBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.BlobCounterBase"/> class.
            </summary>
            
            <remarks>Creates new instance of the <see cref="T:AForge.Imaging.BlobCounterBase"/> class with
            an empty objects map. Before using methods, which provide information about blobs
            or extract them, the <see cref="M:AForge.Imaging.BlobCounterBase.ProcessImage(Alt.Sketch.Bitmap)"/>,
            <see cref="M:AForge.Imaging.BlobCounterBase.ProcessImage(Alt.Sketch.BitmapData)"/> or <see cref="M:AForge.Imaging.BlobCounterBase.ProcessImage(AForge.Imaging.UnmanagedImage)"/>
            method should be called to collect objects map.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.BlobCounterBase.#ctor(Alt.Sketch.Bitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.BlobCounterBase"/> class.
            </summary>
            
            <param name="image">Binary image to look for objects in.</param>
            
            <remarks>Creates new instance of the <see cref="T:AForge.Imaging.BlobCounterBase"/> class with
            initialized objects map built by calling <see cref="M:AForge.Imaging.BlobCounterBase.ProcessImage(Alt.Sketch.Bitmap)"/> method.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.BlobCounterBase.#ctor(Alt.Sketch.BitmapData)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.BlobCounterBase"/> class.
            </summary>
            
            <param name="imageData">Binary image data to look for objects in.</param>
            
            <remarks>Creates new instance of the <see cref="T:AForge.Imaging.BlobCounterBase"/> class with
            initialized objects map built by calling <see cref="M:AForge.Imaging.BlobCounterBase.ProcessImage(Alt.Sketch.BitmapData)"/> method.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.BlobCounterBase.#ctor(AForge.Imaging.UnmanagedImage)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.BlobCounterBase"/> class.
            </summary>
            
            <param name="image">Unmanaged binary image to look for objects in.</param>
            
            <remarks>Creates new instance of the <see cref="T:AForge.Imaging.BlobCounterBase"/> class with
            initialized objects map built by calling <see cref="M:AForge.Imaging.BlobCounterBase.ProcessImage(AForge.Imaging.UnmanagedImage)"/> method.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.BlobCounterBase.ProcessImage(Alt.Sketch.Bitmap)">
            <summary>
            Build objects map.
            </summary>
            
            <param name="image">Source binary image.</param>
            
            <remarks><para>Processes the image and builds objects map, which is used later to extracts blobs.</para></remarks>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.BlobCounterBase.ProcessImage(Alt.Sketch.BitmapData)">
            <summary>
            Build objects map.
            </summary>
            
            <param name="imageData">Source binary image data.</param>
            
            <remarks><para>Processes the image and builds objects map, which is used later to extracts blobs.</para></remarks>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.BlobCounterBase.ProcessImage(AForge.Imaging.UnmanagedImage)">
            <summary>
            Build object map from raw image data.
            </summary>
            
            <param name="image">Source unmanaged binary image data.</param>
            
            <remarks><para>Processes the image and builds objects map, which is used later to extracts blobs.</para></remarks>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            <exception cref="T:AForge.Imaging.InvalidImagePropertiesException">Thrown by some inherited classes if some image property other
            than the pixel format is not supported. See that class's documentation or the exception message for details.</exception>
            
        </member>
        <member name="M:AForge.Imaging.BlobCounterBase.GetObjectsRectangles">
            <summary>
            Get objects' rectangles.
            </summary>
            
            <returns>Returns array of objects' rectangles.</returns>
            
            <remarks>The method returns array of objects rectangles. Before calling the
            method, the <see cref="M:AForge.Imaging.BlobCounterBase.ProcessImage(Alt.Sketch.Bitmap)"/>, <see cref="M:AForge.Imaging.BlobCounterBase.ProcessImage(Alt.Sketch.BitmapData)"/>
            or <see cref="M:AForge.Imaging.BlobCounterBase.ProcessImage(AForge.Imaging.UnmanagedImage)"/> method should be called, which will
            build objects map.</remarks>
            
            <exception cref="T:System.ApplicationException">No image was processed before, so objects' rectangles
            can not be collected.</exception>
            
        </member>
        <member name="M:AForge.Imaging.BlobCounterBase.GetObjectsInformation">
            <summary>
            Get objects' information.
            </summary>
            
            <returns>Returns array of partially initialized blobs (without <see cref="P:AForge.Imaging.Blob.Image"/> property initialized).</returns>
            
            <remarks><para>By the amount of provided information, the method is between <see cref="M:AForge.Imaging.BlobCounterBase.GetObjectsRectangles"/> and
            <see cref="M:AForge.Imaging.BlobCounterBase.GetObjects(AForge.Imaging.UnmanagedImage,System.Boolean)"/> methods. The method provides array of blobs without initialized their image.
            Blob's image may be extracted later using <see cref="M:AForge.Imaging.BlobCounterBase.ExtractBlobsImage(Alt.Sketch.Bitmap,AForge.Imaging.Blob,System.Boolean)"/>
            or <see cref="M:AForge.Imaging.BlobCounterBase.ExtractBlobsImage(AForge.Imaging.UnmanagedImage,AForge.Imaging.Blob,System.Boolean)"/> method.
            </para></remarks>
            
            <example>
            <code>
            // create blob counter and process image
            BlobCounter bc = new BlobCounter( sourceImage );
            // specify sort order
            bc.ObjectsOrder = ObjectsOrder.Size;
            // get objects' information (blobs without image)
            Blob[] blobs = bc.GetObjectInformation( );
            // process blobs
            foreach ( Blob blob in blobs )
            {
                // check blob's properties
                if ( blob.Rectangle.Width &gt; 50 )
                {
                    // the blob looks interesting, let's extract it
                    bc.ExtractBlobsImage( sourceImage, blob );
                }
            }
            </code>
            </example>
            
            <exception cref="T:System.ApplicationException">No image was processed before, so objects' information
            can not be collected.</exception>
            
        </member>
        <member name="M:AForge.Imaging.BlobCounterBase.GetObjects(Alt.Sketch.Bitmap,System.Boolean)">
             <summary>
             Get blobs.
             </summary>
             
             <param name="image">Source image to extract objects from.</param>
             
             <returns>Returns array of blobs.</returns>
             <param name="extractInOriginalSize">Specifies size of blobs' image to extract.
             If set to <see langword="true"/> each blobs' image will have the same size as
             the specified image. If set to <see langword="false"/> each blobs' image will
             have the size of its blob.</param>
            
             <remarks><para>The method returns array of blobs. Before calling the
             method, the <see cref="M:AForge.Imaging.BlobCounterBase.ProcessImage(Alt.Sketch.Bitmap)"/>, <see cref="M:AForge.Imaging.BlobCounterBase.ProcessImage(Alt.Sketch.BitmapData)"/>
             or <see cref="M:AForge.Imaging.BlobCounterBase.ProcessImage(AForge.Imaging.UnmanagedImage)"/> method should be called, which will build
             objects map.</para>
             
             <para>The method supports 24/32 bpp color and 8 bpp indexed grayscale images.</para>
             </remarks>
             
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the provided image.</exception>
             <exception cref="T:System.ApplicationException">No image was processed before, so objects
             can not be collected.</exception>
             
        </member>
        <member name="M:AForge.Imaging.BlobCounterBase.GetObjects(AForge.Imaging.UnmanagedImage,System.Boolean)">
             <summary>
             Get blobs.
             </summary>
             
             <param name="image">Source unmanaged image to extract objects from.</param>
             <param name="extractInOriginalSize">Specifies size of blobs' image to extract.
             If set to <see langword="true"/> each blobs' image will have the same size as
             the specified image. If set to <see langword="false"/> each blobs' image will
             have the size of its blob.</param>
             
             <returns>Returns array of blobs.</returns>
             
             <remarks><para>The method returns array of blobs. Before calling the
             method, the <see cref="M:AForge.Imaging.BlobCounterBase.ProcessImage(Alt.Sketch.Bitmap)"/>, <see cref="M:AForge.Imaging.BlobCounterBase.ProcessImage(Alt.Sketch.BitmapData)"/>
             or <see cref="M:AForge.Imaging.BlobCounterBase.ProcessImage(AForge.Imaging.UnmanagedImage)"/> method should be called, which will build
             objects map.</para>
             
             <para>The method supports 24/32 bpp color and 8 bpp indexed grayscale images.</para>
             </remarks>
            
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the provided image.</exception>
             <exception cref="T:System.ApplicationException">No image was processed before, so objects
             can not be collected.</exception>
             
        </member>
        <member name="M:AForge.Imaging.BlobCounterBase.ExtractBlobsImage(Alt.Sketch.Bitmap,AForge.Imaging.Blob,System.Boolean)">
             <summary>
             Extract blob's image.
             </summary>
             
             <param name="image">Source image to extract blob's image from.</param>
             <param name="blob">Blob which is required to be extracted.</param>
             <param name="extractInOriginalSize">Specifies size of blobs' image to extract.
             If set to <see langword="true"/> each blobs' image will have the same size as
             the specified image. If set to <see langword="false"/> each blobs' image will
             have the size of its blob.</param>
            
             <remarks><para>The method is used to extract image of partially initialized blob, which
             was provided by <see cref="M:AForge.Imaging.BlobCounterBase.GetObjectsInformation"/> method. Before calling the
             method, the <see cref="M:AForge.Imaging.BlobCounterBase.ProcessImage(Alt.Sketch.Bitmap)"/>, <see cref="M:AForge.Imaging.BlobCounterBase.ProcessImage(Alt.Sketch.BitmapData)"/>
             or <see cref="M:AForge.Imaging.BlobCounterBase.ProcessImage(AForge.Imaging.UnmanagedImage)"/> method should be called, which will build
             objects map.</para>
             
             <para>The method supports 24/32 bpp color and 8 bpp indexed grayscale images.</para>
             </remarks>
             
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the provided image.</exception>
             <exception cref="T:System.ApplicationException">No image was processed before, so blob
             can not be extracted.</exception>
             
        </member>
        <member name="M:AForge.Imaging.BlobCounterBase.ExtractBlobsImage(AForge.Imaging.UnmanagedImage,AForge.Imaging.Blob,System.Boolean)">
             <summary>
             Extract blob's image.
             </summary>
             
             <param name="image">Source unmanaged image to extract blob's image from.</param>
             <param name="blob">Blob which is required to be extracted.</param>
             <param name="extractInOriginalSize">Specifies size of blobs' image to extract.
             If set to <see langword="true"/> each blobs' image will have the same size as
             the specified image. If set to <see langword="false"/> each blobs' image will
             have the size of its blob.</param>
            
             <remarks><para>The method is used to extract image of partially initialized blob, which
             was provided by <see cref="M:AForge.Imaging.BlobCounterBase.GetObjectsInformation"/> method. Before calling the
             method, the <see cref="M:AForge.Imaging.BlobCounterBase.ProcessImage(Alt.Sketch.Bitmap)"/>, <see cref="M:AForge.Imaging.BlobCounterBase.ProcessImage(Alt.Sketch.BitmapData)"/>
             or <see cref="M:AForge.Imaging.BlobCounterBase.ProcessImage(AForge.Imaging.UnmanagedImage)"/> method should be called, which will build
             objects map.</para>
             
             <para>The method supports 24/32 bpp color and 8 bpp indexed grayscale images.</para>
             </remarks>
             
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the provided image.</exception>
             <exception cref="T:System.ApplicationException">No image was processed before, so blob
             can not be extracted.</exception>
             
        </member>
        <member name="M:AForge.Imaging.BlobCounterBase.GetBlobsLeftAndRightEdges(AForge.Imaging.Blob,System.Collections.Generic.List{AForge.IntPoint}@,System.Collections.Generic.List{AForge.IntPoint}@)">
            <summary>
            Get list of points on the left and right edges of the blob.
            </summary>
            
            <param name="blob">Blob to collect edge points for.</param>
            <param name="leftEdge">List of points on the left edge of the blob.</param>
            <param name="rightEdge">List of points on the right edge of the blob.</param>
            
            <remarks><para>The method scans each line of the blob and finds the most left and the
            most right points for it adding them to appropriate lists. The method may be very
            useful in conjunction with different routines from <see cref="N:AForge.Math.Geometry"/>,
            which allow finding convex hull or quadrilateral's corners.</para>
            
            <para><note>Both lists of points are sorted by Y coordinate - points with smaller Y
            value go first.</note></para>
            </remarks>
            
            <exception cref="T:System.ApplicationException">No image was processed before, so blob
            can not be extracted.</exception>
            
        </member>
        <member name="M:AForge.Imaging.BlobCounterBase.GetBlobsTopAndBottomEdges(AForge.Imaging.Blob,System.Collections.Generic.List{AForge.IntPoint}@,System.Collections.Generic.List{AForge.IntPoint}@)">
            <summary>
            Get list of points on the top and bottom edges of the blob.
            </summary>
            
            <param name="blob">Blob to collect edge points for.</param>
            <param name="topEdge">List of points on the top edge of the blob.</param>
            <param name="bottomEdge">List of points on the bottom edge of the blob.</param>
            
            <remarks><para>The method scans each column of the blob and finds the most top and the
            most bottom points for it adding them to appropriate lists. The method may be very
            useful in conjunction with different routines from <see cref="N:AForge.Math.Geometry"/>,
            which allow finding convex hull or quadrilateral's corners.</para>
            
            <para><note>Both lists of points are sorted by X coordinate - points with smaller X
            value go first.</note></para>
            </remarks>
            
            <exception cref="T:System.ApplicationException">No image was processed before, so blob
            can not be extracted.</exception>
            
        </member>
        <member name="M:AForge.Imaging.BlobCounterBase.GetBlobsEdgePoints(AForge.Imaging.Blob)">
            <summary>
            Get list of object's edge points.
            </summary>
            
            <param name="blob">Blob to collect edge points for.</param>
            
            <returns>Returns unsorted list of blob's edge points.</returns>
            
            <remarks><para>The method scans each row and column of the blob and finds the
            most top/bottom/left/right points. The method returns similar result as if results of
            both <see cref="M:AForge.Imaging.BlobCounterBase.GetBlobsLeftAndRightEdges(AForge.Imaging.Blob,System.Collections.Generic.List{AForge.IntPoint}@,System.Collections.Generic.List{AForge.IntPoint}@)"/> and <see cref="M:AForge.Imaging.BlobCounterBase.GetBlobsTopAndBottomEdges(AForge.Imaging.Blob,System.Collections.Generic.List{AForge.IntPoint}@,System.Collections.Generic.List{AForge.IntPoint}@)"/>
            methods were combined, but each edge point occurs only once in the list.</para>
            
            <para><note>Edge points in the returned list are not ordered. This makes the list unusable
            for visualization with methods, which draw polygon or poly-line. But the returned list
            can be used with such algorithms, like convex hull search, shape analyzer, etc.</note></para>
            </remarks>
            
            <exception cref="T:System.ApplicationException">No image was processed before, so blob
            can not be extracted.</exception>
            
        </member>
        <member name="M:AForge.Imaging.BlobCounterBase.BuildObjectsMap(AForge.Imaging.UnmanagedImage)">
            <summary>
            Actual objects map building.
            </summary>
            
            <param name="image">Unmanaged image to process.</param>
            
            <remarks><note>By the time this method is called bitmap's pixel format is not
            yet checked, so this should be done by the class inheriting from the base class.
            <see cref="F:AForge.Imaging.BlobCounterBase.imageWidth"/> and <see cref="F:AForge.Imaging.BlobCounterBase.imageHeight"/> members are initialized
            before the method is called, so these members may be used safely.</note></remarks>
            
        </member>
        <member name="P:AForge.Imaging.BlobCounterBase.ObjectsCount">
            <summary>
            Objects count.
            </summary>
            
            <remarks><para>Number of objects (blobs) found by <see cref="M:AForge.Imaging.BlobCounterBase.ProcessImage(Alt.Sketch.Bitmap)"/> method.
            </para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.BlobCounterBase.ObjectLabels">
            <summary>
            Objects' labels.
            </summary>
            
            <remarks>The array of <b>width</b> * <b>height</b> size, which holds
            labels for all objects. Background is represented with <b>0</b> value,
            but objects are represented with labels starting from <b>1</b>.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.BlobCounterBase.ObjectsOrder">
            <summary>
            Objects sort order.
            </summary>
            
            <remarks><para>The property specifies objects' sort order, which are provided
            by <see cref="M:AForge.Imaging.BlobCounterBase.GetObjectsRectangles"/>, <see cref="M:AForge.Imaging.BlobCounterBase.GetObjectsInformation"/>, etc.
            </para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.BlobCounterBase.FilterBlobs">
            <summary>
            Specifies if blobs should be filtered.
            </summary>
            
            <remarks><para>If the property is equal to <b>false</b>, then there is no any additional
            post processing after image was processed. If the property is set to <b>true</b>, then
            blobs filtering is done right after image processing routine. If <see cref="P:AForge.Imaging.BlobCounterBase.BlobsFilter"/>
            is set, then custom blobs' filtering is done, which is implemented by user. Otherwise
            blobs are filtered according to dimensions specified in <see cref="P:AForge.Imaging.BlobCounterBase.MinWidth"/>,
            <see cref="P:AForge.Imaging.BlobCounterBase.MinHeight"/>, <see cref="P:AForge.Imaging.BlobCounterBase.MaxWidth"/> and <see cref="P:AForge.Imaging.BlobCounterBase.MaxHeight"/> properties.</para>
            
            <para>Default value is set to <see langword="false"/>.</para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.BlobCounterBase.CoupledSizeFiltering">
            <summary>
            Specifies if size filetering should be coupled or not.
            </summary>
            
            <remarks><para>In uncoupled filtering mode, objects are filtered out in the case if
            their width is smaller than <see cref="P:AForge.Imaging.BlobCounterBase.MinWidth"/> <b>or</b> height is smaller than 
            <see cref="P:AForge.Imaging.BlobCounterBase.MinHeight"/>. But in coupled filtering mode, objects are filtered out in
            the case if their width is smaller than <see cref="P:AForge.Imaging.BlobCounterBase.MinWidth"/> <b>and</b> height is
            smaller than <see cref="P:AForge.Imaging.BlobCounterBase.MinHeight"/>. In both modes the idea with filtering by objects'
            maximum size is the same as filtering by objects' minimum size.</para>
            
            <para>Default value is set to <see langword="false"/>, what means uncoupled filtering by size.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.BlobCounterBase.MinWidth">
            <summary>
            Minimum allowed width of blob.
            </summary>
            
            <remarks><para>The property specifies minimum object's width acceptable by blob counting
            routine and has power only when <see cref="P:AForge.Imaging.BlobCounterBase.FilterBlobs"/> property is set to
            <see langword="true"/> and <see cref="P:AForge.Imaging.BlobCounterBase.BlobsFilter">custom blobs' filter</see> is
            set to <see langword="null"/>.</para>
            
            <para>See documentation to <see cref="P:AForge.Imaging.BlobCounterBase.CoupledSizeFiltering"/> for additional information.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.BlobCounterBase.MinHeight">
            <summary>
            Minimum allowed height of blob.
            </summary>
            
            <remarks><para>The property specifies minimum object's height acceptable by blob counting
            routine and has power only when <see cref="P:AForge.Imaging.BlobCounterBase.FilterBlobs"/> property is set to
            <see langword="true"/> and <see cref="P:AForge.Imaging.BlobCounterBase.BlobsFilter">custom blobs' filter</see> is
            set to <see langword="null"/>.</para>
            
            <para>See documentation to <see cref="P:AForge.Imaging.BlobCounterBase.CoupledSizeFiltering"/> for additional information.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.BlobCounterBase.MaxWidth">
            <summary>
            Maximum allowed width of blob.
            </summary>
            
            <remarks><para>The property specifies maximum object's width acceptable by blob counting
            routine and has power only when <see cref="P:AForge.Imaging.BlobCounterBase.FilterBlobs"/> property is set to
            <see langword="true"/> and <see cref="P:AForge.Imaging.BlobCounterBase.BlobsFilter">custom blobs' filter</see> is
            set to <see langword="null"/>.</para>
            
            <para>See documentation to <see cref="P:AForge.Imaging.BlobCounterBase.CoupledSizeFiltering"/> for additional information.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.BlobCounterBase.MaxHeight">
            <summary>
            Maximum allowed height of blob.
            </summary>
            
            <remarks><para>The property specifies maximum object's height acceptable by blob counting
            routine and has power only when <see cref="P:AForge.Imaging.BlobCounterBase.FilterBlobs"/> property is set to
            <see langword="true"/> and <see cref="P:AForge.Imaging.BlobCounterBase.BlobsFilter">custom blobs' filter</see> is
            set to <see langword="null"/>.</para>
            
            <para>See documentation to <see cref="P:AForge.Imaging.BlobCounterBase.CoupledSizeFiltering"/> for additional information.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.BlobCounterBase.BlobsFilter">
            <summary>
            Custom blobs' filter to use.
            </summary>
            
            <remarks><para>The property specifies custom blobs' filtering routine to use. It has
            effect only in the case if <see cref="P:AForge.Imaging.BlobCounterBase.FilterBlobs"/> property is set to <see langword="true"/>.</para>
            
            <para><note>When custom blobs' filtering routine is set, it has priority over default filtering done
            with <see cref="P:AForge.Imaging.BlobCounterBase.MinWidth"/>, <see cref="P:AForge.Imaging.BlobCounterBase.MinHeight"/>, <see cref="P:AForge.Imaging.BlobCounterBase.MaxWidth"/> and <see cref="P:AForge.Imaging.BlobCounterBase.MaxHeight"/>.</note></para>
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.BlobCounter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.BlobCounter"/> class.
            </summary>
            
            <remarks>Creates new instance of the <see cref="T:AForge.Imaging.BlobCounter"/> class with
            an empty objects map. Before using methods, which provide information about blobs
            or extract them, the <see cref="M:AForge.Imaging.BlobCounterBase.ProcessImage(Alt.Sketch.Bitmap)"/>,
            <see cref="M:AForge.Imaging.BlobCounterBase.ProcessImage(Alt.Sketch.BitmapData)"/> or <see cref="M:AForge.Imaging.BlobCounterBase.ProcessImage(AForge.Imaging.UnmanagedImage)"/>
            method should be called to collect objects map.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.BlobCounter.#ctor(Alt.Sketch.Bitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.BlobCounter"/> class.
            </summary>
            
            <param name="image">Image to look for objects in.</param>
            
        </member>
        <member name="M:AForge.Imaging.BlobCounter.#ctor(Alt.Sketch.BitmapData)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.BlobCounter"/> class.
            </summary>
            
            <param name="imageData">Image data to look for objects in.</param>
            
        </member>
        <member name="M:AForge.Imaging.BlobCounter.#ctor(AForge.Imaging.UnmanagedImage)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.BlobCounter"/> class.
            </summary>
            
            <param name="image">Unmanaged image to look for objects in.</param>
            
        </member>
        <member name="M:AForge.Imaging.BlobCounter.BuildObjectsMap(AForge.Imaging.UnmanagedImage)">
            <summary>
            Actual objects map building.
            </summary>
            
            <param name="image">Unmanaged image to process.</param>
            
            <remarks>The method supports 8 bpp indexed grayscale images and 24/32 bpp color images.</remarks>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            <exception cref="T:AForge.Imaging.InvalidImagePropertiesException">Cannot process images that are one pixel wide. Rotate the image
            or use <see cref="T:AForge.Imaging.RecursiveBlobCounter"/>.</exception>
            
        </member>
        <member name="P:AForge.Imaging.BlobCounter.BackgroundThreshold">
             <summary>
             Background threshold's value.
             </summary>
             
             <remarks><para>The property sets threshold value for distinguishing between background
             pixel and objects' pixels. All pixel with values less or equal to this property are
             treated as background, but pixels with higher values are treated as objects' pixels.</para>
             
             <para><note>In the case of colour images a pixel is treated as objects' pixel if <b>any</b> of its
             RGB values are higher than corresponding values of this threshold.</note></para>
             
             <para><note>For processing grayscale image, set the property with all RGB components eqaul.</note></para>
            
             <para>Default value is set to <b>(0, 0, 0)</b> - black colour.</para></remarks>
             
        </member>
        <member name="T:AForge.Imaging.ObjectsOrder">
            <summary>
            Possible object orders.
            </summary>
            
            <remarks>The enumeration defines possible sorting orders of objects, found by blob
            counting classes.</remarks>
            
        </member>
        <member name="F:AForge.Imaging.ObjectsOrder.None">
            <summary>
            Unsorted order (as it is collected by algorithm).
            </summary>
        </member>
        <member name="F:AForge.Imaging.ObjectsOrder.Size">
            <summary>
            Objects are sorted by size in descending order (bigger objects go first).
            Size is calculated as <b>Width * Height</b>.
            </summary>
        </member>
        <member name="F:AForge.Imaging.ObjectsOrder.Area">
            <summary>
            Objects are sorted by area in descending order (bigger objects go first).
            </summary>
        </member>
        <member name="F:AForge.Imaging.ObjectsOrder.YX">
            <summary>
            Objects are sorted by Y coordinate, then by X coordinate in ascending order
            (smaller coordinates go first).
            </summary>
        </member>
        <member name="F:AForge.Imaging.ObjectsOrder.XY">
            <summary>
            Objects are sorted by X coordinate, then by Y coordinate in ascending order
            (smaller coordinates go first).
            </summary>
        </member>
        <member name="T:AForge.Imaging.BlockMatch">
            <summary>
            Block match class keeps information about found block match. The class is
            used with block matching algorithms implementing <see cref="T:AForge.Imaging.IBlockMatching"/>
            interface.
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.BlockMatch.#ctor(AForge.IntPoint,AForge.IntPoint,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.BlockMatch"/> class.
            </summary>
            
            <param name="sourcePoint">Reference point in source image.</param>
            <param name="matchPoint">Match point in search image (point of a found match).</param>
            <param name="similarity">Similarity between blocks in source and search images, [0..1].</param>
            
        </member>
        <member name="P:AForge.Imaging.BlockMatch.SourcePoint">
            <summary>
            Reference point in source image.
            </summary>
        </member>
        <member name="P:AForge.Imaging.BlockMatch.MatchPoint">
            <summary>
            Match point in search image (point of a found match).
            </summary>
        </member>
        <member name="P:AForge.Imaging.BlockMatch.Similarity">
            <summary>
            Similarity between blocks in source and search images, [0..1].
            </summary>
        </member>
        <member name="T:AForge.Imaging.RGB">
            <summary>
            RGB components.
            </summary>
            
            <remarks><para>The class encapsulates <b>RGB</b> color components.</para>
            <para><note><see cref="!:System.Drawing.Imaging.PixelFormat">PixelFormat.Format24bppRgb</see>
            actually means BGR format.</note></para>
            </remarks>
            
        </member>
        <member name="F:AForge.Imaging.RGB.R">
            <summary>
            Index of red component.
            </summary>
        </member>
        <member name="F:AForge.Imaging.RGB.G">
            <summary>
            Index of green component.
            </summary>
        </member>
        <member name="F:AForge.Imaging.RGB.B">
            <summary>
            Index of blue component.
            </summary>
        </member>
        <member name="F:AForge.Imaging.RGB.A">
            <summary>
            Index of alpha component for ARGB images.
            </summary>
        </member>
        <member name="F:AForge.Imaging.RGB.Red">
            <summary>
            Red component.
            </summary>
        </member>
        <member name="F:AForge.Imaging.RGB.Green">
            <summary>
            Green component.
            </summary>
        </member>
        <member name="F:AForge.Imaging.RGB.Blue">
            <summary>
            Blue component.
            </summary>
        </member>
        <member name="F:AForge.Imaging.RGB.Alpha">
            <summary>
            Alpha component.
            </summary>
        </member>
        <member name="M:AForge.Imaging.RGB.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.RGB"/> class.
            </summary>
        </member>
        <member name="M:AForge.Imaging.RGB.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.RGB"/> class.
            </summary>
            
            <param name="red">Red component.</param>
            <param name="green">Green component.</param>
            <param name="blue">Blue component.</param>
            
        </member>
        <member name="M:AForge.Imaging.RGB.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.RGB"/> class.
            </summary>
            
            <param name="red">Red component.</param>
            <param name="green">Green component.</param>
            <param name="blue">Blue component.</param>
            <param name="alpha">Alpha component.</param>
            
        </member>
        <member name="M:AForge.Imaging.RGB.#ctor(Alt.Sketch.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.RGB"/> class.
            </summary>
            
            <param name="color">Initialize from specified <see cref="T:Alt.Sketch.Color">color.</see></param>
            
        </member>
        <member name="P:AForge.Imaging.RGB.Color">
            <summary>
            <see cref="T:Alt.Sketch.Color">Color</see> value of the class.
            </summary>
        </member>
        <member name="T:AForge.Imaging.HSL">
            <summary>
            HSL components.
            </summary>
            
            <remarks>The class encapsulates <b>HSL</b> color components.</remarks>
            
        </member>
        <member name="F:AForge.Imaging.HSL.Hue">
            <summary>
            Hue component.
            </summary>
            
            <remarks>Hue is measured in the range of [0, 359].</remarks>
            
        </member>
        <member name="F:AForge.Imaging.HSL.Saturation">
            <summary>
            Saturation component.
            </summary>
            
            <remarks>Saturation is measured in the range of [0, 1].</remarks>
            
        </member>
        <member name="F:AForge.Imaging.HSL.Luminance">
            <summary>
            Luminance value.
            </summary>
            
            <remarks>Luminance is measured in the range of [0, 1].</remarks>
            
        </member>
        <member name="M:AForge.Imaging.HSL.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.HSL"/> class.
            </summary>
        </member>
        <member name="M:AForge.Imaging.HSL.#ctor(System.Int32,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.HSL"/> class.
            </summary>
            
            <param name="hue">Hue component.</param>
            <param name="saturation">Saturation component.</param>
            <param name="luminance">Luminance component.</param>
            
        </member>
        <member name="M:AForge.Imaging.HSL.FromRGB(AForge.Imaging.RGB,AForge.Imaging.HSL)">
            <summary>
            Convert from RGB to HSL color space.
            </summary>
            
            <param name="rgb">Source color in <b>RGB</b> color space.</param>
            <param name="hsl">Destination color in <b>HSL</b> color space.</param>
            
            <remarks><para>See <a href="http://en.wikipedia.org/wiki/HSI_color_space#Conversion_from_RGB_to_HSL_or_HSV">HSL and HSV Wiki</a>
            for information about the algorithm to convert from RGB to HSL.</para></remarks>
            
        </member>
        <member name="M:AForge.Imaging.HSL.FromRGB(AForge.Imaging.RGB)">
            <summary>
            Convert from RGB to HSL color space.
            </summary>
            
            <param name="rgb">Source color in <b>RGB</b> color space.</param>
            
            <returns>Returns <see cref="T:AForge.Imaging.HSL"/> instance, which represents converted color value.</returns>
            
        </member>
        <member name="M:AForge.Imaging.HSL.ToRGB(AForge.Imaging.HSL,AForge.Imaging.RGB)">
            <summary>
            Convert from HSL to RGB color space.
            </summary>
            
            <param name="hsl">Source color in <b>HSL</b> color space.</param>
            <param name="rgb">Destination color in <b>RGB</b> color space.</param>
            
        </member>
        <member name="M:AForge.Imaging.HSL.ToRGB">
            <summary>
            Convert the color to <b>RGB</b> color space.
            </summary>
            
            <returns>Returns <see cref="T:AForge.Imaging.RGB"/> instance, which represents converted color value.</returns>
            
        </member>
        <member name="T:AForge.Imaging.YCbCr">
            <summary>
            YCbCr components.
            </summary>
            
            <remarks>The class encapsulates <b>YCbCr</b> color components.</remarks>
            
        </member>
        <member name="F:AForge.Imaging.YCbCr.YIndex">
            <summary>
            Index of <b>Y</b> component.
            </summary>
        </member>
        <member name="F:AForge.Imaging.YCbCr.CbIndex">
            <summary>
            Index of <b>Cb</b> component.
            </summary>
        </member>
        <member name="F:AForge.Imaging.YCbCr.CrIndex">
            <summary>
            Index of <b>Cr</b> component.
            </summary>
        </member>
        <member name="F:AForge.Imaging.YCbCr.Y">
            <summary>
            <b>Y</b> component.
            </summary>
        </member>
        <member name="F:AForge.Imaging.YCbCr.Cb">
            <summary>
            <b>Cb</b> component.
            </summary>
        </member>
        <member name="F:AForge.Imaging.YCbCr.Cr">
            <summary>
            <b>Cr</b> component.
            </summary>
        </member>
        <member name="M:AForge.Imaging.YCbCr.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.YCbCr"/> class.
            </summary>
        </member>
        <member name="M:AForge.Imaging.YCbCr.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.YCbCr"/> class.
            </summary>
            
            <param name="y"><b>Y</b> component.</param>
            <param name="cb"><b>Cb</b> component.</param>
            <param name="cr"><b>Cr</b> component.</param>
            
        </member>
        <member name="M:AForge.Imaging.YCbCr.FromRGB(AForge.Imaging.RGB,AForge.Imaging.YCbCr)">
            <summary>
            Convert from RGB to YCbCr color space (Rec 601-1 specification). 
            </summary>
            
            <param name="rgb">Source color in <b>RGB</b> color space.</param>
            <param name="ycbcr">Destination color in <b>YCbCr</b> color space.</param>
            
        </member>
        <member name="M:AForge.Imaging.YCbCr.FromRGB(AForge.Imaging.RGB)">
            <summary>
            Convert from RGB to YCbCr color space (Rec 601-1 specification).
            </summary>
            
            <param name="rgb">Source color in <b>RGB</b> color space.</param>
            
            <returns>Returns <see cref="T:AForge.Imaging.YCbCr"/> instance, which represents converted color value.</returns>
            
        </member>
        <member name="M:AForge.Imaging.YCbCr.ToRGB(AForge.Imaging.YCbCr,AForge.Imaging.RGB)">
            <summary>
            Convert from YCbCr to RGB color space.
            </summary>
            
            <param name="ycbcr">Source color in <b>YCbCr</b> color space.</param>
            <param name="rgb">Destination color in <b>RGB</b> color spacs.</param>
            
        </member>
        <member name="M:AForge.Imaging.YCbCr.ToRGB">
            <summary>
            Convert the color to <b>RGB</b> color space.
            </summary>
            
            <returns>Returns <see cref="T:AForge.Imaging.RGB"/> instance, which represents converted color value.</returns>
            
        </member>
        <member name="T:AForge.Imaging.Drawing">
            <summary>
            Drawing primitives.
            </summary>
            
            <remarks><para>The class allows to do drawing of some primitives directly on
            locked image data or unmanaged image.</para>
            
            <para><note>All methods of this class support drawing only on color 24/32 bpp images and
            on grayscale 8 bpp indexed images.</note></para>
            
            <para><note>When it comes to alpha blending for 24/32 bpp images, all calculations are done
            as described on <a href="http://en.wikipedia.org/wiki/Alpha_compositing#Description">Wikipeadia</a>
            (see "over" operator).</note></para>
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Drawing.FillRectangle(Alt.Sketch.BitmapData,Alt.Sketch.RectI,Alt.Sketch.Color)">
            <summary>
            Fill rectangle on the specified image.
            </summary>
            
            <param name="imageData">Source image data to draw on.</param>
            <param name="rectangle">Rectangle's coordinates to fill.</param>
            <param name="color">Rectangle's color.</param>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">The source image has incorrect pixel format.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Drawing.FillRectangle(AForge.Imaging.UnmanagedImage,Alt.Sketch.RectI,Alt.Sketch.Color)">
            <summary>
            Fill rectangle on the specified image.
            </summary>
            
            <param name="image">Source image to draw on.</param>
            <param name="rectangle">Rectangle's coordinates to fill.</param>
            <param name="color">Rectangle's color.</param>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">The source image has incorrect pixel format.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Drawing.Rectangle(Alt.Sketch.BitmapData,Alt.Sketch.RectI,Alt.Sketch.Color)">
            <summary>
            Draw rectangle on the specified image.
            </summary>
            
            <param name="imageData">Source image data to draw on.</param>
            <param name="rectangle">Rectangle's coordinates to draw.</param>
            <param name="color">Rectangle's color.</param>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">The source image has incorrect pixel format.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Drawing.Rectangle(AForge.Imaging.UnmanagedImage,Alt.Sketch.RectI,Alt.Sketch.Color)">
            <summary>
            Draw rectangle on the specified image.
            </summary>
            
            <param name="image">Source image to draw on.</param>
            <param name="rectangle">Rectangle's coordinates to draw.</param>
            <param name="color">Rectangle's color.</param>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">The source image has incorrect pixel format.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Drawing.Line(Alt.Sketch.BitmapData,AForge.IntPoint,AForge.IntPoint,Alt.Sketch.Color)">
            <summary>
            Draw a line on the specified image.
            </summary>
            
            <param name="imageData">Source image data to draw on.</param>
            <param name="point1">The first point to connect.</param>
            <param name="point2">The second point to connect.</param>
            <param name="color">Line's color.</param>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">The source image has incorrect pixel format.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Drawing.Line(AForge.Imaging.UnmanagedImage,AForge.IntPoint,AForge.IntPoint,Alt.Sketch.Color)">
            <summary>
            Draw a line on the specified image.
            </summary>
            
            <param name="image">Source image to draw on.</param>
            <param name="point1">The first point to connect.</param>
            <param name="point2">The second point to connect.</param>
            <param name="color">Line's color.</param>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">The source image has incorrect pixel format.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Drawing.Polygon(Alt.Sketch.BitmapData,System.Collections.Generic.List{AForge.IntPoint},Alt.Sketch.Color)">
            <summary>
            Draw a polygon on the specified image.
            </summary>
            
            <param name="imageData">Source image data to draw on.</param>
            <param name="points">Points of the polygon to draw.</param>
            <param name="color">Polygon's color.</param>
            
            <remarks><para>The method draws a polygon by connecting all points from the
            first one to the last one and then connecting the last point with the first one.
            </para></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Drawing.Polygon(AForge.Imaging.UnmanagedImage,System.Collections.Generic.List{AForge.IntPoint},Alt.Sketch.Color)">
            <summary>
            Draw a polygon on the specified image.
            </summary>
            
            <param name="image">Source image to draw on.</param>
            <param name="points">Points of the polygon to draw.</param>
            <param name="color">Polygon's color.</param>
            
            <remarks><para>The method draws a polygon by connecting all points from the
            first one to the last one and then connecting the last point with the first one.
            </para></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Drawing.Polyline(Alt.Sketch.BitmapData,System.Collections.Generic.List{AForge.IntPoint},Alt.Sketch.Color)">
            <summary>
            Draw a polyline on the specified image.
            </summary>
            
            <param name="imageData">Source image data to draw on.</param>
            <param name="points">Points of the polyline to draw.</param>
            <param name="color">polyline's color.</param>
            
            <remarks><para>The method draws a polyline by connecting all points from the
            first one to the last one. Unlike <see cref="M:AForge.Imaging.Drawing.Polygon(Alt.Sketch.BitmapData,System.Collections.Generic.List{AForge.IntPoint},Alt.Sketch.Color)"/>
            method, this method does not connect the last point with the first one.
            </para></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Drawing.Polyline(AForge.Imaging.UnmanagedImage,System.Collections.Generic.List{AForge.IntPoint},Alt.Sketch.Color)">
            <summary>
            Draw a polyline on the specified image.
            </summary>
            
            <param name="image">Source image to draw on.</param>
            <param name="points">Points of the polyline to draw.</param>
            <param name="color">polyline's color.</param>
            
            <remarks><para>The method draws a polyline by connecting all points from the
            first one to the last one. Unlike <see cref="M:AForge.Imaging.Drawing.Polygon(AForge.Imaging.UnmanagedImage,System.Collections.Generic.List{AForge.IntPoint},Alt.Sketch.Color)"/>
            method, this method does not connect the last point with the first one.
            </para></remarks>
            
        </member>
        <member name="T:AForge.Imaging.UnsupportedImageFormatException">
            <summary>
            Unsupported image format exception.
            </summary>
            
            <remarks><para>The unsupported image format exception is thrown in the case when
            user passes an image of certain format to an image processing routine, which does
            not support the format. Check documentation of the image processing routine
            to discover which formats are supported by the routine.</para>
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.UnsupportedImageFormatException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.UnsupportedImageFormatException"/> class.
            </summary>
        </member>
        <member name="M:AForge.Imaging.UnsupportedImageFormatException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.UnsupportedImageFormatException"/> class.
            </summary>
            
            <param name="message">Message providing some additional information.</param>
            
        </member>
        <member name="M:AForge.Imaging.UnsupportedImageFormatException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.UnsupportedImageFormatException"/> class.
            </summary>
            
            <param name="message">Message providing some additional information.</param>
            <param name="paramName">Name of the invalid parameter.</param>
            
        </member>
        <member name="T:AForge.Imaging.InvalidImagePropertiesException">
            <summary>
            Invalid image properties exception.
            </summary>
            
            <remarks><para>The invalid image properties exception is thrown in the case when
            user provides an image with certain properties, which are treated as invalid by
            particular image processing routine. Another case when this exception is
            thrown is the case when user tries to access some properties of an image (or
            of a recently processed image by some routine), which are not valid for that image.</para>
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.InvalidImagePropertiesException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.InvalidImagePropertiesException"/> class.
            </summary>
        </member>
        <member name="M:AForge.Imaging.InvalidImagePropertiesException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.InvalidImagePropertiesException"/> class.
            </summary>
            
            <param name="message">Message providing some additional information.</param>
            
        </member>
        <member name="M:AForge.Imaging.InvalidImagePropertiesException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.InvalidImagePropertiesException"/> class.
            </summary>
            
            <param name="message">Message providing some additional information.</param>
            <param name="paramName">Name of the invalid parameter.</param>
            
        </member>
        <member name="T:AForge.Imaging.ExhaustiveBlockMatching">
            <summary>
            Block matching implementation with the exhaustive search algorithm.
            </summary>
            
            <remarks><para>The class implements exhaustive search block matching algorithm
            (see documentation for <see cref="T:AForge.Imaging.IBlockMatching"/> for information about
            block matching algorithms). Exhaustive search algorithm tests each possible
            location of block within search window trying to find a match with minimal
            difference.</para>
            
            <para><note>Because of the exhaustive nature of the algorithm, high performance
            should not be expected in the case if big number of reference points is provided
            or big block size and search radius are specified. Minimizing theses values increases
            performance. But too small block size and search radius may affect quality.</note></para>
            
            <para><note>The class processes only grayscale (8 bpp indexed) and color (24 bpp) images.</note></para>
            
            <para>Sample usage:</para>
            <code>
            // collect reference points using corners detector (for example)
            SusanCornersDetector scd = new SusanCornersDetector( 30, 18 );
            List&lt;IntPoint&gt; points = scd.ProcessImage( sourceImage );
            
            // create block matching algorithm's instance
            ExhaustiveBlockMatching bm = new ExhaustiveBlockMatching( 8, 12 );
            // process images searching for block matchings
            List&lt;BlockMatch&gt; matches = bm.ProcessImage( sourceImage, points, searchImage );
            
            // draw displacement vectors
            BitmapData data = sourceImage.LockBits(
                new RectI( 0, 0, sourceImage.Width, sourceImage.Height ),
                ImageLockMode.ReadWrite, sourceImage.PixelFormat );
            
            foreach ( BlockMatch match in matches )
            {
                // highlight the original point in source image
                Drawing.FillRectangle( data,
                    new RectI( match.SourcePoint.X - 1, match.SourcePoint.Y - 1, 3, 3 ),
                    Color.Yellow );
                // draw line to the point in search image
                Drawing.Line( data, match.SourcePoint, match.MatchPoint, Color.Red );
            
                // check similarity
                if ( match.Similarity &gt; 0.98f )
                {
                    // process block with high similarity somehow special
                }
            }
            
            sourceImage.UnlockBits( data );
            </code>
            
            <para><b>Test image 1 (source):</b></para>
            <img src="img/imaging/ebm_sample1.png" width="217" height="192"/>
            <para><b>Test image 2 (search):</b></para>
            <img src="img/imaging/ebm_sample2.png" width="217" height="192"/>
            <para><b>Result image:</b></para>
            <img src="img/imaging/ebm_result.png" width="217" height="192"/>
            </remarks>
            
        </member>
        <member name="T:AForge.Imaging.IBlockMatching">
            <summary>
            Block matching interface.
            </summary>
            
            <remarks><para>The interface specifies set of methods, which should be implemented by different
            block matching algorithms.</para>
            
            <para>Block matching algorithms work with two images - source and search image - and
            a set of reference points. For each provided reference point, the algorithm takes
            a block from source image (reference point is a coordinate of block's center) and finds
            the best match for it in search image providing its coordinate (search is done within
            search window of specified size). In other words, block matching algorithm tries to
            find new coordinates in search image of specified reference points in source image.
            </para>
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.IBlockMatching.ProcessImage(Alt.Sketch.Bitmap,System.Collections.Generic.List{AForge.IntPoint},Alt.Sketch.Bitmap)">
            <summary>
            Process images matching blocks between them.
            </summary>
            
            <param name="sourceImage">Source image with reference points.</param>
            <param name="coordinates">List of reference points to be matched.</param>
            <param name="searchImage">Image in which the reference points will be looked for.</param>
            
            <returns>Returns list of found block matches.</returns>
            
        </member>
        <member name="M:AForge.Imaging.IBlockMatching.ProcessImage(Alt.Sketch.BitmapData,System.Collections.Generic.List{AForge.IntPoint},Alt.Sketch.BitmapData)">
            <summary>
            Process images matching blocks between them.
            </summary>
            
            <param name="sourceImageData">Source image with reference points.</param>
            <param name="coordinates">List of reference points to be matched.</param>
            <param name="searchImageData">Image in which the reference points will be looked for.</param>
            
            <returns>Returns list of found block matches.</returns>
            
        </member>
        <member name="M:AForge.Imaging.IBlockMatching.ProcessImage(AForge.Imaging.UnmanagedImage,System.Collections.Generic.List{AForge.IntPoint},AForge.Imaging.UnmanagedImage)">
            <summary>
            Process images matching blocks between them.
            </summary>
            
            <param name="sourceImage">Source unmanaged image with reference points.</param>
            <param name="coordinates">List of reference points to be matched.</param>
            <param name="searchImage">Unmanaged image in which the reference points will be looked for.</param>
            
            <returns>Returns list of found block matches.</returns>
            
        </member>
        <member name="M:AForge.Imaging.ExhaustiveBlockMatching.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.ExhaustiveBlockMatching"/> class.
            </summary>
        </member>
        <member name="M:AForge.Imaging.ExhaustiveBlockMatching.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.ExhaustiveBlockMatching"/> class.
            </summary>
            
            <param name="blockSize">Block size to search for.</param>
            <param name="searchRadius">Search radius.</param>
            
        </member>
        <member name="M:AForge.Imaging.ExhaustiveBlockMatching.ProcessImage(Alt.Sketch.Bitmap,System.Collections.Generic.List{AForge.IntPoint},Alt.Sketch.Bitmap)">
            <summary>
            Process images matching blocks between hem.
            </summary>
            
            <param name="sourceImage">Source image with reference points.</param>
            <param name="coordinates">List of reference points to be matched.</param>
            <param name="searchImage">Image in which the reference points will be looked for.</param>
            
            <returns>Returns list of found block matches. The list is sorted by similarity
            of found matches in descending order.</returns>
            
            <exception cref="T:AForge.Imaging.InvalidImagePropertiesException">Source and search images sizes must match.</exception>
            <exception cref="T:System.ArgumentException">Source images can be grayscale (8 bpp indexed) or color (24 bpp) image only.</exception>
            <exception cref="T:AForge.Imaging.InvalidImagePropertiesException">Source and search images must have same pixel format.</exception>
            
        </member>
        <member name="M:AForge.Imaging.ExhaustiveBlockMatching.ProcessImage(Alt.Sketch.BitmapData,System.Collections.Generic.List{AForge.IntPoint},Alt.Sketch.BitmapData)">
            <summary>
            Process images matching blocks between them.
            </summary>
            
            <param name="sourceImageData">Source image with reference points.</param>
            <param name="coordinates">List of reference points to be matched.</param>
            <param name="searchImageData">Image in which the reference points will be looked for.</param>
            
            <returns>Returns list of found block matches. The list is sorted by similarity
            of found matches in descending order.</returns>
            
            <exception cref="T:AForge.Imaging.InvalidImagePropertiesException">Source and search images sizes must match.</exception>
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Source images can be grayscale (8 bpp indexed) or color (24 bpp) image only.</exception>
            <exception cref="T:System.ArgumentException">Source and search images must have same pixel format.</exception>
            
        </member>
        <member name="M:AForge.Imaging.ExhaustiveBlockMatching.ProcessImage(AForge.Imaging.UnmanagedImage,System.Collections.Generic.List{AForge.IntPoint},AForge.Imaging.UnmanagedImage)">
            <summary>
            Process images matching blocks between them.
            </summary>
            
            <param name="sourceImage">Source unmanaged image with reference points.</param>
            <param name="coordinates">List of reference points to be matched.</param>
            <param name="searchImage">Unmanaged image in which the reference points will be looked for.</param>
            
            <returns>Returns list of found block matches. The list is sorted by similarity
            of found matches in descending order.</returns>
            
            <exception cref="T:AForge.Imaging.InvalidImagePropertiesException">Source and search images sizes must match.</exception>
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Source images can be grayscale (8 bpp indexed) or color (24 bpp) image only.</exception>
            <exception cref="T:System.ArgumentException">Source and search images must have same pixel format.</exception>
            
        </member>
        <member name="P:AForge.Imaging.ExhaustiveBlockMatching.SearchRadius">
            <summary>
            Search radius.
            </summary>
            
            <remarks><para>The value specifies the shift from reference point in all
            four directions, used to search for the best matching block.</para>
            
            <para>Default value is set to <b>12</b>.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.ExhaustiveBlockMatching.BlockSize">
            <summary>
            Block size to search for.
            </summary>
            
            <remarks><para>The value specifies block size to search for. For each provided
            reference pointer, a square block of this size is taken from the source image
            (reference point becomes the coordinate of block's center) and the best match
            is searched in second image within specified <see cref="P:AForge.Imaging.ExhaustiveBlockMatching.SearchRadius">search
            radius</see>.</para>
            
            <para>Default value is set to <b>16</b>.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.ExhaustiveBlockMatching.SimilarityThreshold">
            <summary>
            Similarity threshold, [0..1].
            </summary>
            
            <remarks><para>The property sets the minimal acceptable similarity between blocks
            in source and search images. If similarity is lower than this value,
            then the candidate block in search image is not treated as a match for the block
            in source image.
            </para>
            
            <para>Default value is set to <b>0.9</b>.</para>
            </remarks>
            
        </member>
        <member name="T:AForge.Imaging.ExhaustiveTemplateMatching">
            <summary>
            Exhaustive template matching.
            </summary>
            
            <remarks><para>The class implements exhaustive template matching algorithm,
            which performs complete scan of source image, comparing each pixel with corresponding
            pixel of template.</para>
            
            <para>The class processes only grayscale 8 bpp and color 24 bpp images.</para>
            
            <para>Sample usage:</para>
            <code>
            // create template matching algorithm's instance
            ExhaustiveTemplateMatching tm = new ExhaustiveTemplateMatching( 0.9f );
            // find all matchings with specified above similarity
            TemplateMatch[] matchings = tm.ProcessImage( sourceImage, templateImage );
            // highlight found matchings
            BitmapData data = sourceImage.LockBits(
                new RectI( 0, 0, sourceImage.Width, sourceImage.Height ),
                ImageLockMode.ReadWrite, sourceImage.PixelFormat );
            foreach ( TemplateMatch m in matchings )
            {
                RectI( data, m.Rectangle, Color.White );
                // do something else with matching
            }
            sourceImage.UnlockBits( data );
            </code>
            
            <para>The class also can be used to get similarity level between two image of the same
            size, which can be useful to get information about how different/similar are images:</para>
            <code>
            // create template matching algorithm's instance
            // use zero similarity to make sure algorithm will provide anything
            ExhaustiveTemplateMatching tm = new ExhaustiveTemplateMatching( 0 );
            // compare two images
            TemplateMatch[] matchings = tm.ProcessImage( image1, image2 );
            // check similarity level
            if ( matchings[0].Similarity > 0.95f )
            {
                // do something with quite similar images
            }
            </code>
            
            </remarks>
            
        </member>
        <member name="T:AForge.Imaging.ITemplateMatching">
            <summary>
            Template matching algorithm's interface.
            </summary>
            
            <remarks><para>The interface specifies set of methods, which should be implemented by different
            template matching algorithms - algorithms, which search for the given template in specified
            image.</para></remarks>
            
        </member>
        <member name="M:AForge.Imaging.ITemplateMatching.ProcessImage(Alt.Sketch.Bitmap,Alt.Sketch.Bitmap,Alt.Sketch.RectI)">
            <summary>
            Process image looking for matchings with specified template.
            </summary>
            
            <param name="image">Source image to process.</param>
            <param name="template">Template image to search for.</param>
            <param name="searchZone">Rectangle in source image to search template for.</param>
            
            <returns>Returns array of found matchings.</returns>
            
        </member>
        <member name="M:AForge.Imaging.ITemplateMatching.ProcessImage(Alt.Sketch.BitmapData,Alt.Sketch.BitmapData,Alt.Sketch.RectI)">
            <summary>
            Process image looking for matchings with specified template.
            </summary>
            
            <param name="imageData">Source image data to process.</param>
            <param name="templateData">Template image to search for.</param>
            <param name="searchZone">Rectangle in source image to search template for.</param>
            
            <returns>Returns array of found matchings.</returns>
            
        </member>
        <member name="M:AForge.Imaging.ITemplateMatching.ProcessImage(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage,Alt.Sketch.RectI)">
            <summary>
            Process image looking for matchings with specified template.
            </summary>
            
            <param name="image">Unmanaged source image to process.</param>
            <param name="template">Unmanaged template image to search for.</param>
            <param name="searchZone">Rectangle in source image to search template for.</param>
            
            <returns>Returns array of found matchings.</returns>
            
        </member>
        <member name="M:AForge.Imaging.ExhaustiveTemplateMatching.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.ExhaustiveTemplateMatching"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.ExhaustiveTemplateMatching.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.ExhaustiveTemplateMatching"/> class.
            </summary>
            
            <param name="similarityThreshold">Similarity threshold.</param>
            
        </member>
        <member name="M:AForge.Imaging.ExhaustiveTemplateMatching.ProcessImage(Alt.Sketch.Bitmap,Alt.Sketch.Bitmap)">
            <summary>
            Process image looking for matchings with specified template.
            </summary>
            
            <param name="image">Source image to process.</param>
            <param name="template">Template image to search for.</param>
            
            <returns>Returns array of found template matches. The array is sorted by similarity
            of found matches in descending order.</returns>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">The source image has incorrect pixel format.</exception>
            <exception cref="T:AForge.Imaging.InvalidImagePropertiesException">Template image is bigger than source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.ExhaustiveTemplateMatching.ProcessImage(Alt.Sketch.Bitmap,Alt.Sketch.Bitmap,Alt.Sketch.RectI)">
            <summary>
            Process image looking for matchings with specified template.
            </summary>
            
            <param name="image">Source image to process.</param>
            <param name="template">Template image to search for.</param>
            <param name="searchZone">Rectangle in source image to search template for.</param>
            
            <returns>Returns array of found template matches. The array is sorted by similarity
            of found matches in descending order.</returns>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">The source image has incorrect pixel format.</exception>
            <exception cref="T:AForge.Imaging.InvalidImagePropertiesException">Template image is bigger than source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.ExhaustiveTemplateMatching.ProcessImage(Alt.Sketch.BitmapData,Alt.Sketch.BitmapData)">
            <summary>
            Process image looking for matchings with specified template.
            </summary>
            
            <param name="imageData">Source image data to process.</param>
            <param name="templateData">Template image to search for.</param>
            
            <returns>Returns array of found template matches. The array is sorted by similarity
            of found matches in descending order.</returns>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">The source image has incorrect pixel format.</exception>
            <exception cref="T:AForge.Imaging.InvalidImagePropertiesException">Template image is bigger than source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.ExhaustiveTemplateMatching.ProcessImage(Alt.Sketch.BitmapData,Alt.Sketch.BitmapData,Alt.Sketch.RectI)">
            <summary>
            Process image looking for matchings with specified template.
            </summary>
            
            <param name="imageData">Source image data to process.</param>
            <param name="templateData">Template image to search for.</param>
            <param name="searchZone">Rectangle in source image to search template for.</param>
            
            <returns>Returns array of found template matches. The array is sorted by similarity
            of found matches in descending order.</returns>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">The source image has incorrect pixel format.</exception>
            <exception cref="T:AForge.Imaging.InvalidImagePropertiesException">Template image is bigger than source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.ExhaustiveTemplateMatching.ProcessImage(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
             <summary>
             Process image looking for matchings with specified template.
             </summary>
             
             <param name="image">Unmanaged source image to process.</param>
             <param name="template">Unmanaged template image to search for.</param>
             
             <returns>Returns array of found template matches. The array is sorted by similarity
             of found matches in descending order.</returns>
             
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">The source image has incorrect pixel format.</exception>
             <exception cref="T:AForge.Imaging.InvalidImagePropertiesException">Template image is bigger than source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.ExhaustiveTemplateMatching.ProcessImage(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage,Alt.Sketch.RectI)">
             <summary>
             Process image looking for matchings with specified template.
             </summary>
             
             <param name="image">Unmanaged source image to process.</param>
             <param name="template">Unmanaged template image to search for.</param>
             <param name="searchZone">Rectangle in source image to search template for.</param>
             
             <returns>Returns array of found template matches. The array is sorted by similarity
             of found matches in descending order.</returns>
             
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">The source image has incorrect pixel format.</exception>
             <exception cref="T:AForge.Imaging.InvalidImagePropertiesException">Template image is bigger than search zone.</exception>
            
        </member>
        <member name="P:AForge.Imaging.ExhaustiveTemplateMatching.SimilarityThreshold">
            <summary>
            Similarity threshold, [0..1].
            </summary>
            
            <remarks><para>The property sets the minimal acceptable similarity between template
            and potential found candidate. If similarity is lower than this value,
            then object is not treated as matching with template.
            </para>
            
            <para>Default value is set to <b>0.9</b>.</para>
            </remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.Add">
            <summary>
            Add fillter - add pixel values of two images.
            </summary>
            
            <remarks><para>The add filter takes two images (source and overlay images)
            of the same size and pixel format and produces an image, where each pixel equals
            to the sum value of corresponding pixels from provided images (if sum is greater
            than maximum allowed value, 255 or 65535, then it is truncated to that maximum).</para>
            
            <para>The filter accepts 8 and 16 bpp grayscale images and 24, 32, 48 and 64 bpp
            color images for processing.</para>
            
            <para>Sample usage:</para>
            <code>
            // create filter
            Add filter = new Add( overlayImage );
            // apply the filter
            Bitmap resultImage = filter.Apply( sourceImage );
            </code>
            
            <para><b>Source image:</b></para>
            <img src="img/imaging/sample6.png" width="320" height="240"/>
            <para><b>Overlay image:</b></para>
            <img src="img/imaging/sample7.png" width="320" height="240"/>
            <para><b>Result image:</b></para>
            <img src="img/imaging/add.png" width="320" height="240"/>
            </remarks>
            
            <seealso cref="T:AForge.Imaging.Filters.Merge"/>
            <seealso cref="T:AForge.Imaging.Filters.Intersect"/>
            <seealso cref="T:AForge.Imaging.Filters.Subtract"/>
            <seealso cref="T:AForge.Imaging.Filters.Difference"/>
            
        </member>
        <member name="T:AForge.Imaging.Filters.BaseInPlaceFilter2">
            <summary>
            Base class for filters, which operate with two images of the same size and format and
            may be applied directly to the source image.
            </summary>
            
            <remarks><para>The abstract class is the base class for all filters, which can
            be applied to an image producing new image as a result of image processing or
            applied directly to the source image without changing its size and pixel format.</para>
            
            <para>The base class is aimed for such type of filters, which require additional image
            to process the source image. The additional image is set by <see cref="P:AForge.Imaging.Filters.BaseInPlaceFilter2.OverlayImage"/>
            or <see cref="P:AForge.Imaging.Filters.BaseInPlaceFilter2.UnmanagedOverlayImage"/> property and must have the same size and pixel format
            as source image. See documentation of particular inherited class for information
            about overlay image purpose.
            </para>
            </remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.BaseInPlaceFilter">
            <summary>
            Base class for filters, which may be applied directly to the source image.
            </summary>
            
            <remarks><para>The abstract class is the base class for all filters, which can
            be applied to an image producing new image as a result of image processing or
            applied directly to the source image without changing its size and pixel format.</para>
            </remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.IFilter">
            <summary>
            Image processing filter interface.
            </summary>
            
            <remarks>The interface defines the set of methods, which should be
            provided by all image processing filters. Methods of this interface
            keep the source image unchanged and returt the result of image processing
            filter as new image.</remarks>
            
            <seealso cref="T:AForge.Imaging.Filters.IInPlaceFilter"/>
            <seealso cref="T:AForge.Imaging.Filters.IInPlacePartialFilter"/>
            
        </member>
        <member name="M:AForge.Imaging.Filters.IFilter.Apply(Alt.Sketch.Bitmap)">
             <summary>
             Apply filter to an image.
             </summary>
             
             <param name="image">Source image to apply filter to.</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source image.</returns>
             
             <remarks>The method keeps the source image unchanged and returns
             the result of image processing filter as new image.</remarks> 
            
        </member>
        <member name="M:AForge.Imaging.Filters.IFilter.Apply(Alt.Sketch.BitmapData)">
            <summary>
            Apply filter to an image.
            </summary>
            
            <param name="imageData">Source image to apply filter to.</param>
            
            <returns>Returns filter's result obtained by applying the filter to
            the source image.</returns>
            
            <remarks>The filter accepts bitmap data as input and returns the result
            of image processing filter as new image. The source image data are kept
            unchanged.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.IFilter.Apply(AForge.Imaging.UnmanagedImage)">
            <summary>
            Apply filter to an image.
            </summary>
            
            <param name="image">Image in unmanaged memory.</param>
            
            <returns>Returns filter's result obtained by applying the filter to
            the source image.</returns>
            
            <remarks>The method keeps the source image unchanged and returns
            the result of image processing filter as new image.</remarks> 
            
        </member>
        <member name="M:AForge.Imaging.Filters.IFilter.Apply(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
            <summary>
            Apply filter to an image.
            </summary>
            
            <param name="sourceImage">Source image to be processed.</param>
            <param name="destinationImage">Destination image to store filter's result.</param>
            
            <remarks><para>The method keeps the source image unchanged and puts the
            the result of image processing filter into destination image.</para>
            
            <para><note>The destination image must have the size, which is expected by
            the filter.</note></para>
            </remarks>
            
            <exception cref="T:AForge.Imaging.InvalidImagePropertiesException">In the case if destination image has incorrect
            size.</exception>
            
        </member>
        <member name="T:AForge.Imaging.Filters.IInPlaceFilter">
            <summary>
            In-place filter interface.
            </summary>
            
            <remarks>The interface defines the set of methods, which should be
            implemented by filters, which are capable to do image processing
            directly on the source image. Not all image processing filters
            can be applied directly to the source image - only filters, which do not
            change image's dimension and pixel format, can be applied directly to the
            source image.</remarks>
            
            <seealso cref="T:AForge.Imaging.Filters.IFilter"/>
            <seealso cref="T:AForge.Imaging.Filters.IInPlacePartialFilter"/>
            
        </member>
        <member name="M:AForge.Imaging.Filters.IInPlaceFilter.ApplyInPlace(Alt.Sketch.Bitmap)">
            <summary>
            Apply filter to an image.
            </summary>
            
            <param name="image">Image to apply filter to.</param>
            
            <remarks>The method applies filter directly to the provided image data.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.IInPlaceFilter.ApplyInPlace(Alt.Sketch.BitmapData)">
            <summary>
            Apply filter to an image.
            </summary>
            
            <param name="imageData">Image to apply filter to.</param>
            
            <remarks>The method applies filter directly to the provided image data.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.IInPlaceFilter.ApplyInPlace(AForge.Imaging.UnmanagedImage)">
            <summary>
            Apply filter to an image in unmanaged memory.
            </summary>
            
            <param name="image">Image in unmanaged memory.</param>
            
            <remarks>The method applies filter directly to the provided image data.</remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.IFilterInformation">
            <summary>
            Interface which provides information about image processing filter.
            </summary>
            
            <remarks><para>The interface defines set of properties, which provide different type
            of information about image processing filters implementing <see cref="T:AForge.Imaging.Filters.IFilter"/> interface
            or another filter's interface.</para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.IFilterInformation.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
            
            <remarks><para>The dictionary defines, which pixel formats are supported for
            source images and which pixel format will be used for resulting image.
            </para>
            
            <para>Keys of this dictionary defines all pixel formats which are supported for source
            images, but corresponding values define what will be resulting pixel format. For
            example, if value <see cref="!:System.Drawing.Imaging.PixelFormat">Format16bppGrayScale</see>
            is put into the dictionary with the
            <see cref="!:System.Drawing.Imaging.PixelFormat">Format48bppRgb</see> key, then it means
            that the filter accepts color 48 bpp image and produces 16 bpp grayscale image as a result
            of image processing.</para>
            
            <para>The information provided by this property is mostly actual for filters, which can not
            be applied directly to the source image, but provide new image a result. Since usually all
            filters implement <see cref="T:AForge.Imaging.Filters.IFilter"/> interface, the information provided by this property
            (if filter also implements <see cref="T:AForge.Imaging.Filters.IFilterInformation"/> interface) may be useful to
            user to resolve filter's capabilities.</para>
            
            <para>Sample usage:</para>
            <code>
            // get filter's IFilterInformation interface
            IFilterInformation info = (IFilterInformation) filter;
            // check if the filter supports our image's format
            if ( info.FormatTranslations.ContainsKey( image.PixelFormat )
            {
                // format is supported, check what will be result of image processing
                PixelFormat resultingFormat = info.FormatTranslations[image.PixelFormat];
            }
            /// </code>
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseInPlaceFilter.Apply(Alt.Sketch.Bitmap)">
             <summary>
             Apply filter to an image.
             </summary>
             
             <param name="image">Source image to apply filter to.</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source image.</returns>
             
             <remarks>The method keeps the source image unchanged and returns
             the result of image processing filter as new image.</remarks>
             
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseInPlaceFilter.Apply(Alt.Sketch.BitmapData)">
             <summary>
             Apply filter to an image.
             </summary>
             
             <param name="imageData">Source image to apply filter to.</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source image.</returns>
             
             <remarks>The filter accepts bitmap data as input and returns the result
             of image processing filter as new image. The source image data are kept
             unchanged.</remarks>
            
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseInPlaceFilter.Apply(AForge.Imaging.UnmanagedImage)">
             <summary>
             Apply filter to an image in unmanaged memory.
             </summary>
             
             <param name="image">Source image in unmanaged memory to apply filter to.</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source image.</returns>
             
             <remarks>The method keeps the source image unchanged and returns
             the result of image processing filter as new image.</remarks>
             
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseInPlaceFilter.Apply(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
             <summary>
             Apply filter to an image in unmanaged memory.
             </summary>
             
             <param name="sourceImage">Source image in unmanaged memory to apply filter to.</param>
             <param name="destinationImage">Destination image in unmanaged memory to put result into.</param>
             
             <remarks><para>The method keeps the source image unchanged and puts result of image processing
             into destination image.</para>
             
             <para><note>The destination image must have the same width and height as source image. Also
             destination image must have pixel format, which is expected by particular filter (see
             <see cref="P:AForge.Imaging.Filters.BaseInPlaceFilter.FormatTranslations"/> property for information about pixel format conversions).</note></para>
             </remarks>
             
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
             <exception cref="T:AForge.Imaging.InvalidImagePropertiesException">Incorrect destination pixel format.</exception>
             <exception cref="T:AForge.Imaging.InvalidImagePropertiesException">Destination image has wrong width and/or height.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseInPlaceFilter.ApplyInPlace(Alt.Sketch.Bitmap)">
            <summary>
            Apply filter to an image.
            </summary>
            
            <param name="image">Image to apply filter to.</param>
            
            <remarks>The method applies the filter directly to the provided source image.</remarks>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseInPlaceFilter.ApplyInPlace(Alt.Sketch.BitmapData)">
             <summary>
             Apply filter to an image.
             </summary>
             
             <param name="imageData">Image data to apply filter to.</param>
             
             <remarks>The method applies the filter directly to the provided source image.</remarks>
             
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseInPlaceFilter.ApplyInPlace(AForge.Imaging.UnmanagedImage)">
             <summary>
             Apply filter to an unmanaged image.
             </summary>
             
             <param name="image">Unmanaged image to apply filter to.</param>
             
             <remarks>The method applies the filter directly to the provided source unmanaged image.</remarks>
             
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseInPlaceFilter.ProcessFilter(AForge.Imaging.UnmanagedImage)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.BaseInPlaceFilter.FormatTranslations">
             <summary>
             Format translations dictionary.
             </summary>
             
             <remarks><para>The dictionary defines, which pixel formats are supported for
             source images and which pixel format will be used for resulting image.
             </para>
             
             <para>See <see cref="P:AForge.Imaging.Filters.IFilterInformation.FormatTranslations"/> for more information.</para>
             </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseInPlaceFilter2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.BaseInPlaceFilter2"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseInPlaceFilter2.#ctor(Alt.Sketch.Bitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.BaseInPlaceFilter2"/> class.
            </summary>
            
            <param name="overlayImage">Overlay image.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseInPlaceFilter2.#ctor(AForge.Imaging.UnmanagedImage)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.BaseInPlaceFilter2"/> class.
            </summary>
            
            <param name="unmanagedOverlayImage">Unmanaged overlay image.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseInPlaceFilter2.ProcessFilter(AForge.Imaging.UnmanagedImage)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
            
             <exception cref="T:AForge.Imaging.InvalidImagePropertiesException">Source and overlay images have different pixel formats and/or size.</exception>
             <exception cref="T:System.NullReferenceException">Overlay image is not set.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseInPlaceFilter2.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
             <param name="overlay">Overlay image data.</param>
             
             <remarks><para>Overlay image size and pixel format is checked by this base class, before
             passing execution to inherited class.</para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.BaseInPlaceFilter2.OverlayImage">
             <summary>
             Overlay image.
             </summary>
             
             <remarks>
             <para>The property sets an overlay image, which will be used as the second image required
             to process source image. See documentation of particular inherited class for information
             about overlay image purpose.
             </para>
             
             <para><note>Overlay image must have the same size and pixel format as source image.
             Otherwise exception will be generated when filter is applied to source image.</note></para>
             
             <para><note>Setting this property will clear the <see cref="P:AForge.Imaging.Filters.BaseInPlaceFilter2.UnmanagedOverlayImage"/> property -
             only one overlay image is allowed: managed or unmanaged.</note></para>
             </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.BaseInPlaceFilter2.UnmanagedOverlayImage">
             <summary>
             Unmanaged overlay image.
             </summary>
             
             <remarks>
             <para>The property sets an overlay image, which will be used as the second image required
             to process source image. See documentation of particular inherited class for information
             about overlay image purpose.
             </para>
             
             <para><note>Overlay image must have the same size and pixel format as source image.
             Otherwise exception will be generated when filter is applied to source image.</note></para>
             
             <para><note>Setting this property will clear the <see cref="P:AForge.Imaging.Filters.BaseInPlaceFilter2.OverlayImage"/> property -
             only one overlay image is allowed: managed or unmanaged.</note></para>
             </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Add.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Add"/> class.
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.Add.#ctor(Alt.Sketch.Bitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Add"/> class.
            </summary>
            
            <param name="overlayImage">Overlay image.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Add.#ctor(AForge.Imaging.UnmanagedImage)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Add"/> class.
            </summary>
            
            <param name="unmanagedOverlayImage">Unmanaged overlay image.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Add.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
             <param name="overlay">Overlay image data.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Add.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="T:AForge.Imaging.Filters.Difference">
             <summary>
             Difference filter - get the difference between overlay and source images.
             </summary>
             
             <remarks><para>The difference filter takes two images (source and
             <see cref="P:AForge.Imaging.Filters.BaseInPlaceFilter2.OverlayImage">overlay</see> images)
             of the same size and pixel format and produces an image, where each pixel equals
             to absolute difference between corresponding pixels from provided images.</para>
             
             <para>The filter accepts 8 and 16 bpp grayscale images and 24, 32, 48 and 64 bpp
             color images for processing.</para>
             
             <para><note>In the case if images with alpha channel are used (32 or 64 bpp), visualization
             of the result image may seem a bit unexpected - most probably nothing will be seen
             (in the case if image is displayed according to its alpha channel). This may be
             caused by the fact that after differencing the entire alpha channel will be zeroed
             (zero difference between alpha channels), what means that the resulting image will be
             100% transparent.</note></para>
             
             <para>Sample usage:</para>
             <code>
             // create filter
             Difference filter = new Difference( overlayImage );
             // apply the filter
             Bitmap resultImage = filter.Apply( sourceImage );
             </code>
            
             <para><b>Source image:</b></para>
             <img src="img/imaging/sample6.png" width="320" height="240"/>
             <para><b>Overlay image:</b></para>
             <img src="img/imaging/sample7.png" width="320" height="240"/>
             <para><b>Result image:</b></para>
             <img src="img/imaging/difference.png" width="320" height="240"/>
             </remarks>
            
             <seealso cref="T:AForge.Imaging.Filters.Intersect"/>
             <seealso cref="T:AForge.Imaging.Filters.Merge"/>
             <seealso cref="T:AForge.Imaging.Filters.Add"/>
             <seealso cref="T:AForge.Imaging.Filters.Subtract"/>
             
        </member>
        <member name="M:AForge.Imaging.Filters.Difference.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Difference"/> class.
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.Difference.#ctor(Alt.Sketch.Bitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Difference"/> class.
            </summary>
            
            <param name="overlayImage">Overlay image.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Difference.#ctor(AForge.Imaging.UnmanagedImage)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Difference"/> class.
            </summary>
            
            <param name="unmanagedOverlayImage">Unmanaged overlay image.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Difference.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
             <param name="overlay">Overlay image data.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Difference.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="T:AForge.Imaging.Filters.Intersect">
            <summary>
            Intersect filter - get MIN of pixels in two images.
            </summary>
            
            <remarks><para>The intersect filter takes two images (source and overlay images)
            of the same size and pixel format and produces an image, where each pixel equals
            to the minimum value of corresponding pixels from provided images.</para>
            
            <para>The filter accepts 8 and 16 bpp grayscale images and 24, 32, 48 and 64 bpp
            color images for processing.</para>
            
            <para>Sample usage:</para>
            <code>
            // create filter
            Intersect filter = new Intersect( overlayImage );
            // apply the filter
            Bitmap resultImage = filter.Apply( sourceImage );
            </code>
            
            <para><b>Source image:</b></para>
            <img src="img/imaging/sample6.png" width="320" height="240"/>
            <para><b>Overlay image:</b></para>
            <img src="img/imaging/sample7.png" width="320" height="240"/>
            <para><b>Result image:</b></para>
            <img src="img/imaging/intersect.png" width="320" height="240"/>
            </remarks>
            
            <seealso cref="T:AForge.Imaging.Filters.Merge"/>
            <seealso cref="T:AForge.Imaging.Filters.Difference"/>
            <seealso cref="T:AForge.Imaging.Filters.Add"/>
            <seealso cref="T:AForge.Imaging.Filters.Subtract"/>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Intersect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Merge"/> class.
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.Intersect.#ctor(Alt.Sketch.Bitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Merge"/> class.
            </summary>
            
            <param name="overlayImage">Overlay image.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Intersect.#ctor(AForge.Imaging.UnmanagedImage)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Intersect"/> class.
            </summary>
            
            <param name="unmanagedOverlayImage">Unmanaged overlay image.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Intersect.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
             <param name="overlay">Overlay image data.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Intersect.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="T:AForge.Imaging.Filters.Merge">
             <summary>
             Merge filter - get MAX of pixels in two images.
             </summary>
             
             <remarks><para>The merge filter takes two images (source and overlay images)
             of the same size and pixel format and produces an image, where each pixel equals
             to the maximum value of corresponding pixels from provided images.</para>
             
             <para>The filter accepts 8 and 16 bpp grayscale images and 24, 32, 48 and 64 bpp
             color images for processing.</para>
             
             <para>Sample usage:</para>
             <code>
             // create filter
             Merge filter = new Merge( overlayImage );
             // apply the filter
             Bitmap resultImage = filter.Apply( sourceImage );
             </code>
            
             <para><b>Source image:</b></para>
             <img src="img/imaging/sample6.png" width="320" height="240"/>
             <para><b>Overlay image:</b></para>
             <img src="img/imaging/sample7.png" width="320" height="240"/>
             <para><b>Result image:</b></para>
             <img src="img/imaging/merge.png" width="320" height="240"/>
             </remarks>
             
             <seealso cref="T:AForge.Imaging.Filters.Intersect"/>
             <seealso cref="T:AForge.Imaging.Filters.Difference"/>
             <seealso cref="T:AForge.Imaging.Filters.Add"/>
             <seealso cref="T:AForge.Imaging.Filters.Subtract"/>
             
        </member>
        <member name="M:AForge.Imaging.Filters.Merge.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Merge"/> class
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.Merge.#ctor(Alt.Sketch.Bitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Merge"/> class.
            </summary>
            
            <param name="overlayImage">Overlay image.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Merge.#ctor(AForge.Imaging.UnmanagedImage)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Merge"/> class.
            </summary>
            
            <param name="unmanagedOverlayImage">Unmanaged overlay image.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Merge.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
             <param name="overlay">Overlay image data.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Merge.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="T:AForge.Imaging.Filters.Morph">
            <summary>
            Morph filter.
            </summary>
            
            <remarks><para>The filter combines two images by taking
            <see cref="P:AForge.Imaging.Filters.Morph.SourcePercent">specified percent</see> of pixels' intensities from source
            image and the rest from overlay image. For example, if the
            <see cref="P:AForge.Imaging.Filters.Morph.SourcePercent">source percent</see> value is set to 0.8, then each pixel
            of the result image equals to <b>0.8 * source + 0.2 * overlay</b>, where <b>source</b>
            and <b>overlay</b> are corresponding pixels' values in source and overlay images.</para>
            
            <para>The filter accepts 8 bpp grayscale and 24 bpp color images for processing.</para>
            
            <para>Sample usage:</para>
            <code>
            // create filter
            Morph filter = new Morph( overlayImage );
            filter.SourcePercent = 0.75;
            // apply the filter
            Bitmap resultImage = filter.Apply( sourceImage );
            </code>
            
            <para><b>Source image:</b></para>
            <img src="img/imaging/sample6.png" width="320" height="240"/>
            <para><b>Overlay image:</b></para>
            <img src="img/imaging/sample7.png" width="320" height="240"/>
            <para><b>Result image:</b></para>
            <img src="img/imaging/morph.png" width="320" height="240"/>
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Morph.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Morph"/> class.
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.Morph.#ctor(Alt.Sketch.Bitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Morph"/> class.
            </summary>
            
            <param name="overlayImage">Overlay image.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Morph.#ctor(AForge.Imaging.UnmanagedImage)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Morph"/> class.
            </summary>
            
            <param name="unmanagedOverlayImage">Unmanaged overlay image.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Morph.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
             <param name="overlay">Overlay image data.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Morph.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.Morph.SourcePercent">
            <summary>
            Percent of source image to keep, [0, 1].
            </summary>
            
            <remarks><para>The property specifies the percentage of source pixels' to take. The
            rest is taken from an overlay image.</para></remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.MoveTowards">
             <summary>
             Move towards filter.
             </summary>
             
             <remarks><para>The result of this filter is an image, which is based on source image,
             but updated in the way to decrease diffirence with overlay image - source image is
             moved towards overlay image. The update equation is defined in the next way:
             <b>res = src + Min( Abs( ovr - src ), step ) * Sign( ovr - src )</b>.</para>
             
             <para>The bigger is <see cref="P:AForge.Imaging.Filters.MoveTowards.StepSize">step size</see> value the more resulting
             image will look like overlay image. For example, in the case if step size is equal
             to 255 (or 65535 for images with 16 bits per channel), the resulting image will be
             equal to overlay image regardless of source image's pixel values. In the case if step
             size is set to 1, the resulting image will very little differ from the source image.
             But, in the case if the filter is applied repeatedly to the resulting image again and
             again, it will become equal to overlay image in maximum 255 (65535 for images with 16
             bits per channel) iterations.</para>
             
             <para>The filter accepts 8 and 16 bpp grayscale images and 24, 32, 48 and 64 bpp
             color images for processing.</para>
             
             <para>Sample usage:</para>
             <code>
             // create filter
             MoveTowards filter = new MoveTowards( overlayImage, 20 );
             // apply the filter
             Bitmap resultImage = filter.Apply( sourceImage );
             </code>
            
             <para><b>Source image:</b></para>
             <img src="img/imaging/sample6.png" width="320" height="240"/>
             <para><b>Overlay image:</b></para>
             <img src="img/imaging/sample7.png" width="320" height="240"/>
             <para><b>Result image:</b></para>
             <img src="img/imaging/move_towards.png" width="320" height="240"/>
             </remarks>
             
        </member>
        <member name="M:AForge.Imaging.Filters.MoveTowards.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.MoveTowards"/> class
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.MoveTowards.#ctor(Alt.Sketch.Bitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.MoveTowards"/> class.
            </summary>
            
            <param name="overlayImage">Overlay image.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.MoveTowards.#ctor(Alt.Sketch.Bitmap,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.MoveTowards"/> class.
            </summary>
            
            <param name="overlayImage">Overlay image.</param>
            <param name="stepSize">Step size.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.MoveTowards.#ctor(AForge.Imaging.UnmanagedImage)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.MoveTowards"/> class.
            </summary>
            
            <param name="unmanagedOverlayImage">Unmanaged overlay image.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.MoveTowards.#ctor(AForge.Imaging.UnmanagedImage,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.MoveTowards"/> class.
            </summary>
            
            <param name="unmanagedOverlayImage">Unmanaged overlay image.</param>
            <param name="stepSize">Step size.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.MoveTowards.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
             <param name="overlay">Overlay image data.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.MoveTowards.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.MoveTowards.StepSize">
             <summary>
             Step size, [0, 65535].
             </summary>
            
             <remarks>
             <para>The property defines the maximum amount of changes per pixel in the source image.</para>
             
             <para>Default value is set to 1.</para>
             </remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.StereoAnaglyph">
            <summary>
            Stereo anaglyph filter.
            </summary>
            
            <remarks><para>The image processing filter produces stereo anaglyph images which are
            aimed to be viewed through anaglyph glasses with red filter over the left eye and
            cyan over the right.</para>
            
            <img src="img/imaging/anaglyph_glasses.png" width="125" height="97"/>
            
            <para>The stereo image is produced by combining two images of the same scene taken
            from a bit different points. The right image must be provided to the filter using
            <see cref="P:AForge.Imaging.Filters.BaseInPlaceFilter2.OverlayImage"/> property, but the left image must be provided to
            <see cref="M:AForge.Imaging.Filters.IFilter.Apply(Alt.Sketch.Bitmap)"/> method, which creates the anaglyph image.</para>
            
            <para>The filter accepts 24 bpp color images for processing.</para>
            
            <para>See <see cref="T:AForge.Imaging.Filters.StereoAnaglyph.Algorithm"/> enumeration for the list of supported anaglyph algorithms.</para>
            
            <para>Sample usage:</para>
            <code>
            // create filter
            StereoAnaglyph filter = new StereoAnaglyph( );
            // set right image as overlay
            filter.Overlay = rightImage
            // apply the filter (providing left image)
            Bitmap resultImage = filter.Apply( leftImage );
            </code>
            
            <para><b>Source image (left):</b></para>
            <img src="img/imaging/sample16_left.png" width="320" height="240"/>
            <para><b>Overlay image (right):</b></para>
            <img src="img/imaging/sample16_right.png" width="320" height="240"/>
            <para><b>Result image:</b></para>
            <img src="img/imaging/anaglyph.png" width="320" height="240"/>
            
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.StereoAnaglyph.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.StereoAnaglyph"/> class.
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.StereoAnaglyph.#ctor(AForge.Imaging.Filters.StereoAnaglyph.Algorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.StereoAnaglyph"/> class.
            </summary>
            
            <param name="anaglyphAlgorithm">Algorithm to use for creating anaglyph images.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.StereoAnaglyph.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data (left image).</param>
             <param name="overlay">Overlay image data (right image).</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.StereoAnaglyph.AnaglyphAlgorithm">
            <summary>
            Algorithm to use for creating anaglyph images.
            </summary>
            
            <remarks><para>Default value is set to <see cref="F:AForge.Imaging.Filters.StereoAnaglyph.Algorithm.GrayAnaglyph"/>.</para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.StereoAnaglyph.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="T:AForge.Imaging.Filters.StereoAnaglyph.Algorithm">
            <summary>
            Enumeration of algorithms for creating anaglyph images.
            </summary>
            
            <remarks><para>See <a href="http://www.3dtv.at/Knowhow/AnaglyphComparison_en.aspx">anaglyph methods comparison</a> for
            descipton of different algorithms.</para>
            </remarks>
            
        </member>
        <member name="F:AForge.Imaging.Filters.StereoAnaglyph.Algorithm.TrueAnaglyph">
            <summary>
            Creates anaglyph image using the below calculations:
            <list type="bullet">
            <item>R<sub>a</sub>=0.299*R<sub>l</sub>+0.587*G<sub>l</sub>+0.114*B<sub>l</sub>;</item>
            <item>G<sub>a</sub>=0;</item>
            <item>B<sub>a</sub>=0.299*R<sub>r</sub>+0.587*G<sub>r</sub>+0.114*B<sub>r</sub>.</item>
            </list>
            </summary>
        </member>
        <member name="F:AForge.Imaging.Filters.StereoAnaglyph.Algorithm.GrayAnaglyph">
            <summary>
            Creates anaglyph image using the below calculations:
            <list type="bullet">
            <item>R<sub>a</sub>=0.299*R<sub>l</sub>+0.587*G<sub>l</sub>+0.114*B<sub>l</sub>;</item>
            <item>G<sub>a</sub>=0.299*R<sub>r</sub>+0.587*G<sub>r</sub>+0.114*B<sub>r</sub>;</item>
            <item>B<sub>a</sub>=0.299*R<sub>r</sub>+0.587*G<sub>r</sub>+0.114*B<sub>r</sub>.</item>
            </list>
            </summary>
        </member>
        <member name="F:AForge.Imaging.Filters.StereoAnaglyph.Algorithm.ColorAnaglyph">
            <summary>
            Creates anaglyph image using the below calculations:
            <list type="bullet">
            <item>R<sub>a</sub>=R<sub>l</sub>;</item>
            <item>G<sub>a</sub>=G<sub>r</sub>;</item>
            <item>B<sub>a</sub>=B<sub>r</sub>.</item>
            </list>
            </summary>
        </member>
        <member name="F:AForge.Imaging.Filters.StereoAnaglyph.Algorithm.HalfColorAnaglyph">
            <summary>
            Creates anaglyph image using the below calculations:
            <list type="bullet">
            <item>R<sub>a</sub>=0.299*R<sub>l</sub>+0.587*G<sub>l</sub>+0.114*B<sub>l</sub>;</item>
            <item>G<sub>a</sub>=G<sub>r</sub>;</item>
            <item>B<sub>a</sub>=B<sub>r</sub>.</item>
            </list>
            </summary>
        </member>
        <member name="F:AForge.Imaging.Filters.StereoAnaglyph.Algorithm.OptimizedAnaglyph">
            <summary>
            Creates anaglyph image using the below calculations:
            <list type="bullet">
            <item>R<sub>a</sub>=0.7*G<sub>l</sub>+0.3*B<sub>l</sub>;</item>
            <item>G<sub>a</sub>=G<sub>r</sub>;</item>
            <item>B<sub>a</sub>=B<sub>r</sub>.</item>
            </list>
            </summary>
        </member>
        <member name="T:AForge.Imaging.Filters.Subtract">
            <summary>
            Subtract filter - subtract pixel values of two images.
            </summary>
            
            <remarks><para>The subtract filter takes two images (source and overlay images)
            of the same size and pixel format and produces an image, where each pixel equals
            to the difference value of corresponding pixels from provided images (if difference is less
            than minimum allowed value, 0, then it is truncated to that minimum value).</para>
            
            <para>The filter accepts 8 and 16 bpp grayscale images and 24, 32, 48 and 64 bpp
            color images for processing.</para>
            
            <para>Sample usage:</para>
            <code>
            // create filter
            Subtract filter = new Subtract( overlayImage );
            // apply the filter
            Bitmap resultImage = filter.Apply( sourceImage );
            </code>
            
            <para><b>Source image:</b></para>
            <img src="img/imaging/sample6.png" width="320" height="240"/>
            <para><b>Overlay image:</b></para>
            <img src="img/imaging/sample7.png" width="320" height="240"/>
            <para><b>Result image:</b></para>
            <img src="img/imaging/subtract.png" width="320" height="240"/>
            </remarks>
            
            <seealso cref="T:AForge.Imaging.Filters.Merge"/>
            <seealso cref="T:AForge.Imaging.Filters.Intersect"/>
            <seealso cref="T:AForge.Imaging.Filters.Add"/>
            <seealso cref="T:AForge.Imaging.Filters.Difference"/>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Subtract.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Subtract"/> class.
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.Subtract.#ctor(Alt.Sketch.Bitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Subtract"/> class.
            </summary>
            
            <param name="overlayImage">Overlay image</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Subtract.#ctor(AForge.Imaging.UnmanagedImage)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Subtract"/> class.
            </summary>
            
            <param name="unmanagedOverlayImage">Unmanaged overlay image.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Subtract.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
             <param name="overlay">Overlay image data.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Subtract.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="T:AForge.Imaging.Filters.BaseFilter">
            <summary>
            Base class for filters, which produce new image of the same size as a
            result of image processing.
            </summary>
            
            <remarks><para>The abstract class is the base class for all filters, which
            do image processing creating new image with the same size as source.
            Filters based on this class cannot be applied directly to the source
            image, which is kept unchanged.</para>
            
            <para>The base class itself does not define supported pixel formats of source
            image and resulting pixel formats of destination image. Filters inheriting from
            this base class, should specify supported pixel formats and their transformations
            overriding abstract <see cref="P:AForge.Imaging.Filters.BaseFilter.FormatTranslations"/> property.</para>
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseFilter.Apply(Alt.Sketch.Bitmap)">
             <summary>
             Apply filter to an image.
             </summary>
             
             <param name="image">Source image to apply filter to.</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source image.</returns>
             
             <remarks>The method keeps the source image unchanged and returns
             the result of image processing filter as new image.</remarks>
             
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseFilter.Apply(Alt.Sketch.BitmapData)">
             <summary>
             Apply filter to an image.
             </summary>
             
             <param name="imageData">Source image to apply filter to.</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source image.</returns>
             
             <remarks>The filter accepts bitmap data as input and returns the result
             of image processing filter as new image. The source image data are kept
             unchanged.</remarks>
            
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseFilter.Apply(AForge.Imaging.UnmanagedImage)">
             <summary>
             Apply filter to an image in unmanaged memory.
             </summary>
             
             <param name="image">Source image in unmanaged memory to apply filter to.</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source image.</returns>
             
             <remarks>The method keeps the source image unchanged and returns
             the result of image processing filter as new image.</remarks>
             
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseFilter.Apply(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
             <summary>
             Apply filter to an image in unmanaged memory.
             </summary>
             
             <param name="sourceImage">Source image in unmanaged memory to apply filter to.</param>
             <param name="destinationImage">Destination image in unmanaged memory to put result into.</param>
             
             <remarks><para>The method keeps the source image unchanged and puts result of image processing
             into destination image.</para>
             
             <para><note>The destination image must have the same width and height as source image. Also
             destination image must have pixel format, which is expected by particular filter (see
             <see cref="P:AForge.Imaging.Filters.BaseFilter.FormatTranslations"/> property for information about pixel format conversions).</note></para>
             </remarks>
             
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
             <exception cref="T:AForge.Imaging.InvalidImagePropertiesException">Incorrect destination pixel format.</exception>
             <exception cref="T:AForge.Imaging.InvalidImagePropertiesException">Destination image has wrong width and/or height.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseFilter.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
            <summary>
            Process the filter on the specified image.
            </summary>
            
            <param name="sourceData">Source image data.</param>
            <param name="destinationData">Destination image data.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.BaseFilter.FormatTranslations">
             <summary>
             Format translations dictionary.
             </summary>
             
             <remarks><para>The dictionary defines, which pixel formats are supported for
             source images and which pixel format will be used for resulting image.
             </para>
             
             <para>See <see cref="P:AForge.Imaging.Filters.IFilterInformation.FormatTranslations"/> for more information.</para>
             </remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.BaseFilter2">
            <summary>
            Base class for filters, which operate with two images of the same size and format and
            produce new image as a result.
            </summary>
            
            <remarks><para>The abstract class is the base class for all filters, which can
            be applied to an image producing new image as a result of image processing.</para>
            
            <para>The base class is aimed for such type of filters, which require additional image
            to process the source image. The additional image is set by <see cref="P:AForge.Imaging.Filters.BaseFilter2.OverlayImage"/>
            or <see cref="P:AForge.Imaging.Filters.BaseFilter2.UnmanagedOverlayImage"/> property and must have the same size and pixel format
            as source image. See documentation of particular inherited class for information
            about overlay image purpose.
            </para>
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseFilter2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.BaseFilter2"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseFilter2.#ctor(Alt.Sketch.Bitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.BaseFilter2"/> class.
            </summary>
            
            <param name="overlayImage">Overlay image.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseFilter2.#ctor(AForge.Imaging.UnmanagedImage)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.BaseFilter2"/> class.
            </summary>
            
            <param name="unmanagedOverlayImage">Unmanaged overlay image.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseFilter2.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
            <summary>
            Process the filter on the specified image.
            </summary>
            
            <param name="sourceData">Source image data.</param>
            <param name="destinationData">Destination image data.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseFilter2.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="sourceData">Source image data.</param>
             <param name="overlay">Overlay image data.</param>
             <param name="destinationData">Destination image data</param>
             
             <remarks><para>Overlay image size and pixel format is checked by this base class, before
             passing execution to inherited class.</para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.BaseFilter2.OverlayImage">
             <summary>
             Overlay image.
             </summary>
             
             <remarks>
             <para>The property sets an overlay image, which will be used as the second image required
             to process source image. See documentation of particular inherited class for information
             about overlay image purpose.
             </para>
             
             <para><note>Overlay image must have the same size and pixel format as source image.
             Otherwise exception will be generated when filter is applied to source image.</note></para>
             
             <para><note>Setting this property will clear the <see cref="P:AForge.Imaging.Filters.BaseFilter2.UnmanagedOverlayImage"/> property -
             only one overlay image is allowed: managed or unmanaged.</note></para>
             </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.BaseFilter2.UnmanagedOverlayImage">
             <summary>
             Unmanaged overlay image.
             </summary>
             
             <remarks>
             <para>The property sets an overlay image, which will be used as the second image required
             to process source image. See documentation of particular inherited class for information
             about overlay image purpose.
             </para>
             
             <para><note>Overlay image must have the same size and pixel format as source image.
             Otherwise exception will be generated when filter is applied to source image.</note></para>
             
             <para><note>Setting this property will clear the <see cref="P:AForge.Imaging.Filters.BaseFilter2.OverlayImage"/> property -
             only one overlay image is allowed: managed or unmanaged.</note></para>
             </remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.BaseInPlacePartialFilter">
            <summary>
            Base class for filters, which may be applied directly to the source image or its part.
            </summary>
            
            <remarks><para>The abstract class is the base class for all filters, which can
            be applied to an image producing new image as a result of image processing or
            applied directly to the source image (or its part) without changing its size and
            pixel format.</para>
            </remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.IInPlacePartialFilter">
            <summary>
            In-place partial filter interface.
            </summary>
            
            <remarks><para>The interface defines the set of methods, which should be
            implemented by filters, which are capable to do image processing
            directly on the source image. Not all image processing filters
            can be applied directly to the source image - only filters, which do not
            change image dimension and pixel format, can be applied directly to the
            source image.</para>
            
            <para>The interface also supports partial image filtering, allowing to specify
            image rectangle, which should be filtered.</para>
            </remarks>
            
            <seealso cref="T:AForge.Imaging.Filters.IFilter"/>
            <seealso cref="T:AForge.Imaging.Filters.IInPlaceFilter"/>
            
        </member>
        <member name="M:AForge.Imaging.Filters.IInPlacePartialFilter.ApplyInPlace(Alt.Sketch.Bitmap,Alt.Sketch.RectI)">
            <summary>
            Apply filter to an image or its part.
            </summary>
            
            <param name="image">Image to apply filter to.</param>
            <param name="rect">Image rectangle for processing by filter.</param>
            
            <remarks>The method applies filter directly to the provided image data.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.IInPlacePartialFilter.ApplyInPlace(Alt.Sketch.BitmapData,Alt.Sketch.RectI)">
            <summary>
            Apply filter to an image or its part.
            </summary>
            
            <param name="imageData">Image to apply filter to.</param>
            <param name="rect">Image rectangle for processing by filter.</param>
            
            <remarks>The method applies filter directly to the provided image data.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.IInPlacePartialFilter.ApplyInPlace(AForge.Imaging.UnmanagedImage,Alt.Sketch.RectI)">
            <summary>
            Apply filter to an image in unmanaged memory.
            </summary>
            
            <param name="image">Image in unmanaged memory.</param>
            <param name="rect">Image rectangle for processing by filter.</param>
            
            <remarks>The method applies filter directly to the provided image.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseInPlacePartialFilter.Apply(Alt.Sketch.Bitmap)">
             <summary>
             Apply filter to an image.
             </summary>
             
             <param name="image">Source image to apply filter to.</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source image.</returns>
             
             <remarks>The method keeps the source image unchanged and returns
             the result of image processing filter as new image.</remarks>
             
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseInPlacePartialFilter.Apply(Alt.Sketch.BitmapData)">
             <summary>
             Apply filter to an image.
             </summary>
             
             <param name="imageData">Source image to apply filter to.</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source image.</returns>
             
             <remarks>The filter accepts bitmap data as input and returns the result
             of image processing filter as new image. The source image data are kept
             unchanged.</remarks>
            
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseInPlacePartialFilter.Apply(AForge.Imaging.UnmanagedImage)">
             <summary>
             Apply filter to an image in unmanaged memory.
             </summary>
             
             <param name="image">Source image in unmanaged memory to apply filter to.</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source image.</returns>
             
             <remarks>The method keeps the source image unchanged and returns
             the result of image processing filter as new image.</remarks>
             
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseInPlacePartialFilter.Apply(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
             <summary>
             Apply filter to an image in unmanaged memory.
             </summary>
             
             <param name="sourceImage">Source image in unmanaged memory to apply filter to.</param>
             <param name="destinationImage">Destination image in unmanaged memory to put result into.</param>
             
             <remarks><para>The method keeps the source image unchanged and puts result of image processing
             into destination image.</para>
             
             <para><note>The destination image must have the same width and height as source image. Also
             destination image must have pixel format, which is expected by particular filter (see
             <see cref="P:AForge.Imaging.Filters.BaseInPlacePartialFilter.FormatTranslations"/> property for information about pixel format conversions).</note></para>
             </remarks>
             
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
             <exception cref="T:AForge.Imaging.InvalidImagePropertiesException">Incorrect destination pixel format.</exception>
             <exception cref="T:AForge.Imaging.InvalidImagePropertiesException">Destination image has wrong width and/or height.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseInPlacePartialFilter.ApplyInPlace(Alt.Sketch.Bitmap)">
            <summary>
            Apply filter to an image.
            </summary>
            
            <param name="image">Image to apply filter to.</param>
            
            <remarks>The method applies the filter directly to the provided source image.</remarks>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseInPlacePartialFilter.ApplyInPlace(Alt.Sketch.BitmapData)">
             <summary>
             Apply filter to an image.
             </summary>
             
             <param name="imageData">Image data to apply filter to.</param>
             
             <remarks>The method applies the filter directly to the provided source image.</remarks>
             
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseInPlacePartialFilter.ApplyInPlace(AForge.Imaging.UnmanagedImage)">
             <summary>
             Apply filter to an unmanaged image.
             </summary>
             
             <param name="image">Unmanaged image to apply filter to.</param>
             
             <remarks>The method applies the filter directly to the provided source unmanaged image.</remarks>
             
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseInPlacePartialFilter.ApplyInPlace(Alt.Sketch.Bitmap,Alt.Sketch.RectI)">
            <summary>
            Apply filter to an image or its part.
            </summary>
            
            <param name="image">Image to apply filter to.</param>
            <param name="rect">Image rectangle for processing by the filter.</param>
            
            <remarks>The method applies the filter directly to the provided source image.</remarks>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseInPlacePartialFilter.ApplyInPlace(Alt.Sketch.BitmapData,Alt.Sketch.RectI)">
             <summary>
             Apply filter to an image or its part.
             </summary>
             
             <param name="imageData">Image data to apply filter to.</param>
             <param name="rect">Image rectangle for processing by the filter.</param>
             
             <remarks>The method applies the filter directly to the provided source image.</remarks>
             
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseInPlacePartialFilter.ApplyInPlace(AForge.Imaging.UnmanagedImage,Alt.Sketch.RectI)">
            <summary>
            Apply filter to an unmanaged image or its part.
            </summary>
            
            <param name="image">Unmanaged image to apply filter to.</param>
            <param name="rect">Image rectangle for processing by the filter.</param>
            
            <remarks>The method applies the filter directly to the provided source image.</remarks>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseInPlacePartialFilter.ProcessFilter(AForge.Imaging.UnmanagedImage,Alt.Sketch.RectI)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
             <param name="rect">Image rectangle for processing by the filter.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.BaseInPlacePartialFilter.FormatTranslations">
             <summary>
             Format translations dictionary.
             </summary>
             
             <remarks><para>The dictionary defines, which pixel formats are supported for
             source images and which pixel format will be used for resulting image.
             </para>
             
             <para>See <see cref="P:AForge.Imaging.Filters.IFilterInformation.FormatTranslations"/> for more information.</para>
             </remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.BaseResizeFilter">
            <summary>
            Base class for image resizing filters.
            </summary>
            
            <remarks><para>The abstract class is the base class for all filters,
            which implement image rotation algorithms.</para>
            </remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.BaseTransformationFilter">
            <summary>
            Base class for filters, which may produce new image of different size as a
            result of image processing.
            </summary>
            
            <remarks><para>The abstract class is the base class for all filters, which
            do image processing creating new image of the size, which may differ from the
            size of source image. Filters based on this class cannot be applied directly
            to the source image, which is kept unchanged.</para>
            
            <para>The base class itself does not define supported pixel formats of source
            image and resulting pixel formats of destination image. Filters inheriting from
            this base class, should specify supported pixel formats and their transformations
            overriding abstract <see cref="P:AForge.Imaging.Filters.BaseTransformationFilter.FormatTranslations"/> property.</para>
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseTransformationFilter.Apply(Alt.Sketch.Bitmap)">
             <summary>
             Apply filter to an image.
             </summary>
             
             <param name="image">Source image to apply filter to.</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source image.</returns>
             
             <remarks>The method keeps the source image unchanged and returns
             the result of image processing filter as new image.</remarks>
             
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseTransformationFilter.Apply(Alt.Sketch.BitmapData)">
             <summary>
             Apply filter to an image.
             </summary>
             
             <param name="imageData">Source image to apply filter to.</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source image.</returns>
             
             <remarks>The filter accepts bitmap data as input and returns the result
             of image processing filter as new image. The source image data are kept
             unchanged.</remarks>
            
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseTransformationFilter.Apply(AForge.Imaging.UnmanagedImage)">
             <summary>
             Apply filter to an image in unmanaged memory.
             </summary>
             
             <param name="image">Source image in unmanaged memory to apply filter to.</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source image.</returns>
             
             <remarks>The method keeps the source image unchanged and returns
             the result of image processing filter as new image.</remarks>
             
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseTransformationFilter.Apply(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
             <summary>
             Apply filter to an image in unmanaged memory.
             </summary>
             
             <param name="sourceImage">Source image in unmanaged memory to apply filter to.</param>
             <param name="destinationImage">Destination image in unmanaged memory to put result into.</param>
             
             <remarks><para>The method keeps the source image unchanged and puts result of image processing
             into destination image.</para>
             
             <para><note>The destination image must have the same width and height as source image. Also
             destination image must have pixel format, which is expected by particular filter (see
             <see cref="P:AForge.Imaging.Filters.BaseTransformationFilter.FormatTranslations"/> property for information about pixel format conversions).</note></para>
             </remarks>
             
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
             <exception cref="T:AForge.Imaging.InvalidImagePropertiesException">Incorrect destination pixel format.</exception>
             <exception cref="T:AForge.Imaging.InvalidImagePropertiesException">Destination image has wrong width and/or height.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseTransformationFilter.CalculateNewImageSize(AForge.Imaging.UnmanagedImage)">
            <summary>
            Calculates new image size.
            </summary>
            
            <param name="sourceData">Source image data.</param>
            
            <returns>New image size - size of the destination image.</returns>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseTransformationFilter.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
            <summary>
            Process the filter on the specified image.
            </summary>
            
            <param name="sourceData">Source image data.</param>
            <param name="destinationData">Destination image data.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.BaseTransformationFilter.FormatTranslations">
             <summary>
             Format translations dictionary.
             </summary>
             
             <remarks><para>The dictionary defines, which pixel formats are supported for
             source images and which pixel format will be used for resulting image.
             </para>
             
             <para>See <see cref="P:AForge.Imaging.Filters.IFilterInformation.FormatTranslations"/> for more information.</para>
             </remarks>
            
        </member>
        <member name="F:AForge.Imaging.Filters.BaseResizeFilter.newWidth">
            <summary>
            New image width.
            </summary>
        </member>
        <member name="F:AForge.Imaging.Filters.BaseResizeFilter.newHeight">
            <summary>
            New image height.
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.BaseResizeFilter.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.BaseResizeFilter"/> class.
            </summary>
            
            <param name="newWidth">Width of the new resized image.</param>
            <param name="newHeight">Height of the new resize image.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseResizeFilter.CalculateNewImageSize(AForge.Imaging.UnmanagedImage)">
            <summary>
            Calculates new image size.
            </summary>
            
            <param name="sourceData">Source image data.</param>
            
            <returns>New image size - size of the destination image.</returns>
            
        </member>
        <member name="P:AForge.Imaging.Filters.BaseResizeFilter.NewWidth">
            <summary>
            Width of the new resized image.
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.Filters.BaseResizeFilter.NewHeight">
            <summary>
            Height of the new resized image.
            </summary>
            
        </member>
        <member name="T:AForge.Imaging.Filters.BaseRotateFilter">
            <summary>
            Base class for image rotation filters.
            </summary>
            
            <remarks>The abstract class is the base class for all filters,
            which implement rotating algorithms.</remarks>
            
        </member>
        <member name="F:AForge.Imaging.Filters.BaseRotateFilter.angle">
            <summary>
            Rotation angle.
            </summary>
        </member>
        <member name="F:AForge.Imaging.Filters.BaseRotateFilter.keepSize">
            <summary>
            Keep image size or not.
            </summary>
        </member>
        <member name="F:AForge.Imaging.Filters.BaseRotateFilter.fillColor">
            <summary>
            Fill color.
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.BaseRotateFilter.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.BaseRotateFilter"/> class.
            </summary>
            
            <param name="angle">Rotation angle.</param>
            
            <remarks><para>This constructor sets <see cref="P:AForge.Imaging.Filters.BaseRotateFilter.KeepSize"/> property to <b>false</b>.
            </para></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseRotateFilter.#ctor(System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.BaseRotateFilter"/> class.
            </summary>
            
            <param name="angle">Rotation angle.</param>
            <param name="keepSize">Keep image size or not.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseRotateFilter.CalculateNewImageSize(AForge.Imaging.UnmanagedImage)">
            <summary>
            Calculates new image size.
            </summary>
            
            <param name="sourceData">Source image data.</param>
            
            <returns>New image size - size of the destination image.</returns>
            
        </member>
        <member name="P:AForge.Imaging.Filters.BaseRotateFilter.Angle">
            <summary>
            Rotation angle, [0, 360].
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.BaseRotateFilter.KeepSize">
            <summary>
            Keep image size or not.
            </summary>
            
            <remarks><para>The property determines if source image's size will be kept
            as it is or not. If the value is set to <b>false</b>, then the new image will have
            new dimension according to rotation angle. If the valus is set to
            <b>true</b>, then the new image will have the same size, which means that some parts
            of the image may be clipped because of rotation.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.BaseRotateFilter.FillColor">
            <summary>
            Fill color.
            </summary>
            
            <remarks><para>The fill color is used to fill areas of destination image,
            which don't have corresponsing pixels in source image.</para></remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.BaseUsingCopyPartialFilter">
             <summary>
             Base class for filters, which require source image backup to make them applicable to
             source image (or its part) directly.
             </summary>
             
             <remarks><para>The base class is used for filters, which can not do
             direct manipulations with source image. To make effect of in-place filtering,
             these filters create a background copy of the original image (done by this
             base class) and then do manipulations with it putting result back to the original
             source image.</para>
             
             <para><note>The background copy of the source image is created only in the case of in-place
             filtering. Otherwise background copy is not created - source image is processed and result is
             put to destination image.</note></para>
             
             <para>The base class is for those filters, which support as filtering entire image, as
             partial filtering of specified rectangle only.</para>
             </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseUsingCopyPartialFilter.Apply(Alt.Sketch.Bitmap)">
             <summary>
             Apply filter to an image.
             </summary>
             
             <param name="image">Source image to apply filter to.</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source image.</returns>
             
             <remarks>The method keeps the source image unchanged and returns
             the result of image processing filter as new image.</remarks>
             
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseUsingCopyPartialFilter.Apply(Alt.Sketch.BitmapData)">
             <summary>
             Apply filter to an image.
             </summary>
             
             <param name="imageData">Source image to apply filter to.</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source image.</returns>
             
             <remarks>The filter accepts bitmap data as input and returns the result
             of image processing filter as new image. The source image data are kept
             unchanged.</remarks>
            
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseUsingCopyPartialFilter.Apply(AForge.Imaging.UnmanagedImage)">
             <summary>
             Apply filter to an image in unmanaged memory.
             </summary>
             
             <param name="image">Source image in unmanaged memory to apply filter to.</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source image.</returns>
             
             <remarks>The method keeps the source image unchanged and returns
             the result of image processing filter as new image.</remarks>
             
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseUsingCopyPartialFilter.Apply(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
             <summary>
             Apply filter to an image in unmanaged memory.
             </summary>
             
             <param name="sourceImage">Source image in unmanaged memory to apply filter to.</param>
             <param name="destinationImage">Destination image in unmanaged memory to put result into.</param>
             
             <remarks><para>The method keeps the source image unchanged and puts result of image processing
             into destination image.</para>
             
             <para><note>The destination image must have the same width and height as source image. Also
             destination image must have pixel format, which is expected by particular filter (see
             <see cref="P:AForge.Imaging.Filters.BaseUsingCopyPartialFilter.FormatTranslations"/> property for information about pixel format conversions).</note></para>
             </remarks>
             
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
             <exception cref="T:AForge.Imaging.InvalidImagePropertiesException">Incorrect destination pixel format.</exception>
             <exception cref="T:AForge.Imaging.InvalidImagePropertiesException">Destination image has wrong width and/or height.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseUsingCopyPartialFilter.ApplyInPlace(Alt.Sketch.Bitmap)">
            <summary>
            Apply filter to an image.
            </summary>
            
            <param name="image">Image to apply filter to.</param>
            
            <remarks>The method applies the filter directly to the provided source image.</remarks>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseUsingCopyPartialFilter.ApplyInPlace(Alt.Sketch.BitmapData)">
             <summary>
             Apply filter to an image.
             </summary>
             
             <param name="imageData">Image data to apply filter to.</param>
             
             <remarks>The method applies the filter directly to the provided source image.</remarks>
             
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseUsingCopyPartialFilter.ApplyInPlace(AForge.Imaging.UnmanagedImage)">
             <summary>
             Apply filter to an unmanaged image.
             </summary>
             
             <param name="image">Unmanaged image to apply filter to.</param>
             
             <remarks>The method applies the filter directly to the provided source unmanaged image.</remarks>
             
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseUsingCopyPartialFilter.ApplyInPlace(Alt.Sketch.Bitmap,Alt.Sketch.RectI)">
            <summary>
            Apply filter to an image or its part.
            </summary>
            
            <param name="image">Image to apply filter to.</param>
            <param name="rect">Image rectangle for processing by the filter.</param>
            
            <remarks>The method applies the filter directly to the provided source image.</remarks>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseUsingCopyPartialFilter.ApplyInPlace(Alt.Sketch.BitmapData,Alt.Sketch.RectI)">
             <summary>
             Apply filter to an image or its part.
             </summary>
             
             <param name="imageData">Image data to apply filter to.</param>
             <param name="rect">Image rectangle for processing by the filter.</param>
             
             <remarks>The method applies the filter directly to the provided source image.</remarks>
             
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseUsingCopyPartialFilter.ApplyInPlace(AForge.Imaging.UnmanagedImage,Alt.Sketch.RectI)">
            <summary>
            Apply filter to an unmanaged image or its part.
            </summary>
            
            <param name="image">Unmanaged image to apply filter to.</param>
            <param name="rect">Image rectangle for processing by the filter.</param>
            
            <remarks>The method applies the filter directly to the provided source image.</remarks>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseUsingCopyPartialFilter.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage,Alt.Sketch.RectI)">
            <summary>
            Process the filter on the specified image.
            </summary>
            
            <param name="sourceData">Source image data.</param>
            <param name="destinationData">Destination image data.</param>
            <param name="rect">Image rectangle for processing by the filter.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.BaseUsingCopyPartialFilter.FormatTranslations">
             <summary>
             Format translations dictionary.
             </summary>
             
             <remarks><para>The dictionary defines, which pixel formats are supported for
             source images and which pixel format will be used for resulting image.
             </para>
             
             <para>See <see cref="P:AForge.Imaging.Filters.IFilterInformation.FormatTranslations"/> for more information.</para>
             </remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.BrightnessCorrection">
            <summary>
            Brightness adjusting in RGB color space.
            </summary>
            
            <remarks><para>The filter operates in <b>RGB</b> color space and adjusts
            pixels' brightness by increasing every pixel's RGB values by the specified
            <see cref="P:AForge.Imaging.Filters.BrightnessCorrection.AdjustValue">adjust value</see>. The filter is based on <see cref="T:AForge.Imaging.Filters.LevelsLinear"/>
            filter and simply sets all input ranges to (0, 255-<see cref="P:AForge.Imaging.Filters.BrightnessCorrection.AdjustValue"/>) and
            all output range to (<see cref="P:AForge.Imaging.Filters.BrightnessCorrection.AdjustValue"/>, 255) in the case if the adjust value is positive.
            If the adjust value is negative, then all input ranges are set to
            (-<see cref="P:AForge.Imaging.Filters.BrightnessCorrection.AdjustValue"/>, 255 ) and all output ranges are set to
            ( 0, 255+<see cref="P:AForge.Imaging.Filters.BrightnessCorrection.AdjustValue"/>).</para>
            
            <para>See <see cref="T:AForge.Imaging.Filters.LevelsLinear"/> documentation for more information about the base filter.</para>
            
            <para>The filter accepts 8 bpp grayscale and 24/32 bpp color images for processing.</para>
            
            <para>Sample usage:</para>
            <code>
            // create filter
            BrightnessCorrection filter = new BrightnessCorrection( -50 );
            // apply the filter
            filter.ApplyInPlace( image );
            </code>
            
            <para><b>Initial image:</b></para>
            <img src="img/imaging/sample1.jpg" width="480" height="361"/>
            <para><b>Result image:</b></para>
            <img src="img/imaging/brightness_correction.jpg" width="480" height="361"/>
            </remarks>
            
            <seealso cref="T:AForge.Imaging.Filters.LevelsLinear"/>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BrightnessCorrection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.BrightnessCorrection"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BrightnessCorrection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.BrightnessCorrection"/> class.
            </summary>
            
            <param name="adjustValue">Brightness <see cref="P:AForge.Imaging.Filters.BrightnessCorrection.AdjustValue">adjust value</see>.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BrightnessCorrection.ProcessFilter(AForge.Imaging.UnmanagedImage,Alt.Sketch.RectI)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
             <param name="rect">Image rectangle for processing by the filter.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.BrightnessCorrection.AdjustValue">
             <summary>
             Brightness adjust value, [-255, 255].
             </summary>
             
             <remarks>Default value is set to <b>10</b>, which corresponds to increasing
             RGB values of each pixel by 10.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.BrightnessCorrection.FormatTranslations">
             <summary>
             Format translations dictionary.
             </summary>
             
             <remarks><para>See <see cref="P:AForge.Imaging.Filters.IFilterInformation.FormatTranslations"/>
             documentation for additional information.</para></remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.ChannelFiltering">
            <summary>
            Channels filters.
            </summary>
            
            <remarks><para>The filter does color channels' filtering by clearing (filling with
            specified values) values, which are inside/outside of the specified value's
            range. The filter allows to fill certain ranges of RGB color channels with specified
            value.</para>
            
            <para>The filter is similar to <see cref="T:AForge.Imaging.Filters.ColorFiltering"/>, but operates with not
            entire pixels, but with their RGB values individually. This means that pixel itself may
            not be filtered (will be kept), but one of its RGB values may be filtered if they are
            inside/outside of specified range.</para>
            
            <para>The filter accepts 24 and 32 bpp color images for processing.</para>
            
            <para>Sample usage:</para>
            <code>
            // create filter
            ChannelFiltering filter = new ChannelFiltering( );
            // set channels' ranges to keep
            filter.Red   = new IntRange(   0, 255 );
            filter.Green = new IntRange( 100, 255 );
            filter.Blue  = new IntRange( 100, 255 );
            // apply the filter
            filter.ApplyInPlace( image );
            </code>
            
            <para><b>Initial image:</b></para>
            <img src="img/imaging/sample1.jpg" width="480" height="361"/>
            <para><b>Result image:</b></para>
            <img src="img/imaging/channel_filtering.jpg" width="480" height="361"/>
            </remarks>
            
            <seealso cref="T:AForge.Imaging.Filters.ColorFiltering"/>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ChannelFiltering.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.ChannelFiltering"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ChannelFiltering.#ctor(AForge.IntRange,AForge.IntRange,AForge.IntRange)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.ChannelFiltering"/> class.
            </summary>
            
            <param name="red">Red channel's filtering range.</param>
            <param name="green">Green channel's filtering range.</param>
            <param name="blue">Blue channel's filtering range.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ChannelFiltering.ProcessFilter(AForge.Imaging.UnmanagedImage,Alt.Sketch.RectI)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
             <param name="rect">Image rectangle for processing by the filter.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ChannelFiltering.CalculateMap(AForge.IntRange,System.Byte,System.Boolean,System.Byte[])">
            <summary>
            Calculate filtering map.
            </summary>
            
            <param name="range">Filtering range.</param>
            <param name="fill">Fillter value.</param>
            <param name="fillOutsideRange">Fill outside or inside the range.</param>
            <param name="map">Filtering map.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.ChannelFiltering.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.ChannelFiltering.Red">
            <summary>
            Red channel's range.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.ChannelFiltering.FillRed">
            <summary>
            Red fill value.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.ChannelFiltering.Green">
            <summary>
            Green channel's range.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.ChannelFiltering.FillGreen">
            <summary>
            Green fill value.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.ChannelFiltering.Blue">
            <summary>
            Blue channel's range.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.ChannelFiltering.FillBlue">
            <summary>
            Blue fill value.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.ChannelFiltering.RedFillOutsideRange">
            <summary>
            Determines, if red channel should be filled inside or outside filtering range.
            </summary>
            
            <remarks>Default value is set to <see langword="true"/>.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.ChannelFiltering.GreenFillOutsideRange">
            <summary>
            Determines, if green channel should be filled inside or outside filtering range.
            </summary>
            
            <remarks>Default value is set to <see langword="true"/>.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.ChannelFiltering.BlueFillOutsideRange">
             <summary>
             Determines, if blue channel should be filled inside or outside filtering range.
             </summary>
             
             <remarks>Default value is set to <see langword="true"/>.</remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.ColorFiltering">
            <summary>
            Color filtering.
            </summary>
            
            <remarks><para>The filter filters pixels inside/outside of specified RGB color range -
            it keeps pixels with colors inside/outside of specified range and fills the rest with
            <see cref="P:AForge.Imaging.Filters.ColorFiltering.FillColor">specified color</see>.</para>
            
            <para>The filter accepts 24 and 32 bpp color images for processing.</para>
            
            <para>Sample usage:</para>
            <code>
            // create filter
            ColorFiltering filter = new ColorFiltering( );
            // set color ranges to keep
            filter.Red   = new IntRange( 100, 255 );
            filter.Green = new IntRange( 0, 75 );
            filter.Blue  = new IntRange( 0, 75 );
            // apply the filter
            filter.ApplyInPlace( image );
            </code>
            
            <para><b>Initial image:</b></para>
            <img src="img/imaging/sample1.jpg" width="480" height="361"/>
            <para><b>Result image:</b></para>
            <img src="img/imaging/color_filtering.jpg" width="480" height="361"/>
            </remarks>
            
            <seealso cref="T:AForge.Imaging.Filters.ChannelFiltering"/>
            <seealso cref="T:AForge.Imaging.Filters.EuclideanColorFiltering"/>
            <seealso cref="T:AForge.Imaging.Filters.HSLFiltering"/>
            <seealso cref="T:AForge.Imaging.Filters.YCbCrFiltering"/>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ColorFiltering.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.ColorFiltering"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ColorFiltering.#ctor(AForge.IntRange,AForge.IntRange,AForge.IntRange)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.ColorFiltering"/> class.
            </summary>
            
            <param name="red">Red components filtering range.</param>
            <param name="green">Green components filtering range.</param>
            <param name="blue">Blue components filtering range.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ColorFiltering.ProcessFilter(AForge.Imaging.UnmanagedImage,Alt.Sketch.RectI)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
             <param name="rect">Image rectangle for processing by the filter.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.ColorFiltering.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.ColorFiltering.Red">
            <summary>
            Range of red color component.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.ColorFiltering.Green">
            <summary>
            Range of green color component.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.ColorFiltering.Blue">
            <summary>
            Range of blue color component.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.ColorFiltering.FillColor">
            <summary>
            Fill color used to fill filtered pixels.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.ColorFiltering.FillOutsideRange">
            <summary>
            Determines, if pixels should be filled inside or outside of specified
            color ranges.
            </summary>
            
            <remarks><para>Default value is set to <see langword="true"/>, which means
            the filter removes colors outside of the specified range.</para></remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.ColorRemapping">
            <summary>
            Color remapping.
            </summary>
            
            <remarks><para>The filter allows to remap colors of the image. Unlike <see cref="T:AForge.Imaging.Filters.LevelsLinear"/> filter
            the filter allow to do non-linear remapping. For each pixel of specified image the filter changes
            its values (value of each color plane) to values, which are stored in remapping arrays by corresponding
            indexes. For example, if pixel's RGB value equals to (32, 96, 128), the filter will change it to
            (<see cref="P:AForge.Imaging.Filters.ColorRemapping.RedMap"/>[32], <see cref="P:AForge.Imaging.Filters.ColorRemapping.GreenMap"/>[96], <see cref="P:AForge.Imaging.Filters.ColorRemapping.BlueMap"/>[128]).</para>
            
            <para>The filter accepts 8 bpp grayscale and 24/32 bpp color images for processing.</para>
            
            <para>Sample usage:</para>
            <code>
            // create map
            byte[] map = new byte[256];
            for ( int i = 0; i &lt; 256; i++ )
            {
                map[i] = (byte) Math.Min( 255, Math.Pow( 2, (double) i / 32 ) );
            }
            // create filter
            ColorRemapping filter = new ColorRemapping( map, map, map );
            // apply the filter
            filter.ApplyInPlace( image );
            </code>
            
            <para><b>Initial image:</b></para>
            <img src="img/imaging/sample1.jpg" width="480" height="361"/>
            <para><b>Result image:</b></para>
            <img src="img/imaging/color_remapping.jpg" width="480" height="361"/>
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ColorRemapping.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.ColorRemapping"/> class.
            </summary>
            
            <remarks>Initializes the filter without any remapping. All
            pixel values are mapped to the same values.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ColorRemapping.#ctor(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.ColorRemapping"/> class.
            </summary>
            
            <param name="redMap">Red map.</param>
            <param name="greenMap">Green map.</param>
            <param name="blueMap">Blue map.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ColorRemapping.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.ColorRemapping"/> class.
            </summary>
            
            <param name="grayMap">Gray map.</param>
            
            <remarks>This constructor is supposed for grayscale images.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ColorRemapping.ProcessFilter(AForge.Imaging.UnmanagedImage,Alt.Sketch.RectI)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
             <param name="rect">Image rectangle for processing by the filter.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.ColorRemapping.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.ColorRemapping.RedMap">
            <summary>
            Remapping array for red color plane.
            </summary>
            
            <remarks><para>The remapping array should contain 256 remapping values. The remapping occurs
            by changing pixel's red value <b>r</b> to <see cref="P:AForge.Imaging.Filters.ColorRemapping.RedMap"/>[r].</para></remarks>
            
            <exception cref="T:System.ArgumentException">A map should be array with 256 value.</exception>
            
        </member>
        <member name="P:AForge.Imaging.Filters.ColorRemapping.GreenMap">
            <summary>
            Remapping array for green color plane.
            </summary>
            
            <remarks><para>The remapping array should contain 256 remapping values. The remapping occurs
            by changing pixel's green value <b>g</b> to <see cref="P:AForge.Imaging.Filters.ColorRemapping.GreenMap"/>[g].</para></remarks>
            
            <exception cref="T:System.ArgumentException">A map should be array with 256 value.</exception>
            
        </member>
        <member name="P:AForge.Imaging.Filters.ColorRemapping.BlueMap">
            <summary>
            Remapping array for blue color plane.
            </summary>
            
            <remarks><para>The remapping array should contain 256 remapping values. The remapping occurs
            by changing pixel's blue value <b>b</b> to <see cref="P:AForge.Imaging.Filters.ColorRemapping.BlueMap"/>[b].</para></remarks>
            
            <exception cref="T:System.ArgumentException">A map should be array with 256 value.</exception>
            
        </member>
        <member name="P:AForge.Imaging.Filters.ColorRemapping.GrayMap">
            <summary>
            Remapping array for gray color.
            </summary>
            
            <remarks><para>The remapping array should contain 256 remapping values. The remapping occurs
            by changing pixel's value <b>g</b> to <see cref="P:AForge.Imaging.Filters.ColorRemapping.GrayMap"/>[g].</para>
            
            <para>The gray map is for grayscale images only.</para></remarks>
            
            <exception cref="T:System.ArgumentException">A map should be array with 256 value.</exception>
            
        </member>
        <member name="T:AForge.Imaging.Filters.ContrastCorrection">
             <summary>
             Contrast adjusting in RGB color space.
             </summary>
             
             <remarks><para>The filter operates in <b>RGB</b> color space and adjusts
             pixels' contrast value by increasing RGB values of bright pixel and decreasing
             RGB values of dark pixels (or vise versa if contrast needs to be decreased).
             The filter is based on <see cref="T:AForge.Imaging.Filters.LevelsLinear"/>
             filter and simply sets all input ranges to (<see cref="P:AForge.Imaging.Filters.ContrastCorrection.Factor"/>, 255-<see cref="P:AForge.Imaging.Filters.ContrastCorrection.Factor"/>) and
             all output range to (0, 255) in the case if the factor value is positive.
             If the factor value is negative, then all input ranges are set to
             (0, 255 ) and all output ranges are set to
             (-<see cref="P:AForge.Imaging.Filters.ContrastCorrection.Factor"/>, 255_<see cref="P:AForge.Imaging.Filters.ContrastCorrection.Factor"/>).</para>
             
             <para>See <see cref="T:AForge.Imaging.Filters.LevelsLinear"/> documentation forr more information about the base filter.</para>
             
             <para>The filter accepts 8 bpp grayscale and 24/32 bpp color images for processing.</para>
            
             <para>Sample usage:</para>
             <code>
             // create filter
             ContrastCorrection filter = new ContrastCorrection( 15 );
             // apply the filter
             filter.ApplyInPlace( image );
             </code>
             
             <para><b>Initial image:</b></para>
             <img src="img/imaging/sample1.jpg" width="480" height="361"/>
             <para><b>Result image:</b></para>
             <img src="img/imaging/contrast_correction.jpg" width="480" height="361"/>
             </remarks>
            
             <seealso cref="T:AForge.Imaging.Filters.LevelsLinear"/>
             
        </member>
        <member name="M:AForge.Imaging.Filters.ContrastCorrection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.ContrastCorrection"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ContrastCorrection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.ContrastCorrection"/> class.
            </summary>
            
            <param name="factor">Contrast <see cref="P:AForge.Imaging.Filters.ContrastCorrection.Factor">adjusting factor</see>.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ContrastCorrection.ProcessFilter(AForge.Imaging.UnmanagedImage,Alt.Sketch.RectI)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
             <param name="rect">Image rectangle for processing by the filter.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.ContrastCorrection.Factor">
            <summary>
            Contrast adjusting factor, [-127, 127].
            </summary>
            
            <remarks><para>Factor which is used to adjust contrast. Factor values greater than
            0 increase contrast making light areas lighter and dark areas darker. Factor values
            less than 0 decrease contrast - decreasing variety of contrast.</para>
            
            <para>Default value is set to <b>10</b>.</para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.ContrastCorrection.FormatTranslations">
             <summary>
             Format translations dictionary.
             </summary>
             
             <remarks><para>See <see cref="P:AForge.Imaging.Filters.IFilterInformation.FormatTranslations"/>
             documentation for additional information.</para></remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.ContrastStretch">
            <summary>
            Contrast stretching filter.
            </summary>
            
            <remarks><para>Contrast stretching (or as it is often called normalization) is a simple image enhancement
            technique that attempts to improve the contrast in an image by 'stretching' the range of intensity values
            it contains to span a desired range of values, e.g. the full range of pixel values that the image type
            concerned allows. It differs from the more sophisticated <see cref="T:AForge.Imaging.Filters.HistogramEqualization">histogram equalization</see>
            in that it can only apply a linear scaling function to the image pixel values.</para>
            
            <para>The result of this filter may be achieved by using <see cref="T:AForge.Imaging.ImageStatistics"/> class, which allows to
            get pixels' intensities histogram, and <see cref="T:AForge.Imaging.Filters.LevelsLinear"/> filter, which does linear correction
            of pixel's intensities.</para>
            
            <para>The filter accepts 8 bpp grayscale and 24 bpp color images.</para>
            
            <para>Sample usage:</para>
            <code>
            // create filter
            ContrastStretch filter = new ContrastStretch( );
            // process image
            filter.ApplyInPlace( sourceImage );
            </code>
            
            <para><b>Source image:</b></para>
            <img src="img/imaging/sample5.jpg" width="480" height="387"/>
            <para><b>Result image:</b></para>
            <img src="img/imaging/contrast_stretch.jpg" width="480" height="387"/>
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ContrastStretch.#ctor">
            <summary>   
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.ContrastStretch"/> class.
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.ContrastStretch.ProcessFilter(AForge.Imaging.UnmanagedImage,Alt.Sketch.RectI)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
             <param name="rect">Image rectangle for processing by the filter.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.ContrastStretch.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="T:AForge.Imaging.Filters.EuclideanColorFiltering">
             <summary>
             Euclidean color filtering.
             </summary>
             
             <remarks><para>The filter filters pixels, which color is inside/outside
             of RGB sphere with specified center and radius - it keeps pixels with
             colors inside/outside of the specified sphere and fills the rest with
             <see cref="P:AForge.Imaging.Filters.EuclideanColorFiltering.FillColor">specified color</see>.</para>
             
             <para>The filter accepts 24 and 32 bpp color images for processing.</para>
             
             <para>Sample usage:</para>
             <code>
             // create filter
             EuclideanColorFiltering filter = new EuclideanColorFiltering( );
             // set center colol and radius
             filter.CenterColor = new RGB( 215, 30, 30 );
             filter.Radius = 100;
             // apply the filter
             filter.ApplyInPlace( image );
             </code>
            
             <para><b>Initial image:</b></para>
             <img src="img/imaging/sample1.jpg" width="480" height="361"/>
             <para><b>Result image:</b></para>
             <img src="img/imaging/euclidean_filtering.jpg" width="480" height="361"/>
             </remarks>
             
             <seealso cref="T:AForge.Imaging.Filters.ColorFiltering"/>
             
        </member>
        <member name="M:AForge.Imaging.Filters.EuclideanColorFiltering.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.EuclideanColorFiltering"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.EuclideanColorFiltering.#ctor(AForge.Imaging.RGB,System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.EuclideanColorFiltering"/> class.
            </summary>
            
            <param name="center">RGB sphere's center.</param>
            <param name="radius">RGB sphere's radius.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.EuclideanColorFiltering.ProcessFilter(AForge.Imaging.UnmanagedImage,Alt.Sketch.RectI)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
             <param name="rect">Image rectangle for processing by the filter.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.EuclideanColorFiltering.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.EuclideanColorFiltering.Radius">
            <summary>
            RGB sphere's radius, [0, 450].
            </summary>
            
            <remarks>Default value is 100.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.EuclideanColorFiltering.CenterColor">
            <summary>
            RGB sphere's center.
            </summary>
            
            <remarks>Default value is (255, 255, 255) - white color.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.EuclideanColorFiltering.FillColor">
            <summary>
            Fill color used to fill filtered pixels.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.EuclideanColorFiltering.FillOutside">
            <summary>
            Determines, if pixels should be filled inside or outside specified
            RGB sphere.
            </summary>
            
            <remarks><para>Default value is set to <see langword="true"/>, which means
            the filter removes colors outside of the specified range.</para></remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.GammaCorrection">
            <summary>
            Gamma correction filter.
            </summary>
            
            <remarks><para>The filter performs <a href="http://en.wikipedia.org/wiki/Gamma_correction">gamma correction</a>
            of specified image in RGB color space. Each pixels' value is converted using the V<sub>out</sub>=V<sub>in</sub><sup>g</sup>
            equation, where <b>g</b> is <see cref="P:AForge.Imaging.Filters.GammaCorrection.Gamma">gamma value</see>.</para>
            
            <para>The filter accepts 8 bpp grayscale and 24 bpp color images for processing.</para>
            
            <para>Sample usage:</para>
            <code>
            // create filter
            GammaCorrection filter = new GammaCorrection( 0.5 );
            // apply the filter
            filter.ApplyInPlace( image );
            </code>
            
            <para><b>Initial image:</b></para>
            <img src="img/imaging/sample1.jpg" width="480" height="361"/>
            <para><b>Result image:</b></para>
            <img src="img/imaging/gamma.jpg" width="480" height="361"/>
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.GammaCorrection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.GammaCorrection"/> class.
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.GammaCorrection.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.GammaCorrection"/> class.
            </summary>
            
            <param name="gamma">Gamma value.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.GammaCorrection.ProcessFilter(AForge.Imaging.UnmanagedImage,Alt.Sketch.RectI)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
             <param name="rect">Image rectangle for processing by the filter.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.GammaCorrection.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.GammaCorrection.Gamma">
            <summary>
            Gamma value, [0.1, 5.0].
            </summary>
            
            <remarks>Default value is set to <b>2.2</b>.</remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.HistogramEqualization">
             <summary>
             Histogram equalization filter.
             </summary>
            
             <remarks><para>The filter does histogram equalization increasing local contrast in images. The effect
             of histogram equalization can be better seen on images, where pixel values have close contrast values.
             Through this adjustment, pixels intensities can be better distributed on the histogram. This allows for
             areas of lower local contrast to gain a higher contrast without affecting the global contrast.
             </para>
             
             <para>The filter accepts 8 bpp grayscale images and 24/32 bpp
             color images for processing.</para>
             
             <para><note>For color images the histogram equalization is applied to each color plane separately.</note></para>
             
             <para>Sample usage:</para>
             <code>
             // create filter
             HistogramEqualization filter = new HistogramEqualization( );
             // process image
             filter.ApplyInPlace( sourceImage );
             </code>
             
             <para><b>Source image:</b></para>
             <img src="img/imaging/sample5.jpg" width="480" height="387" />
             <para><b>Result image:</b></para>
             <img src="img/imaging/equalized.jpg" width="480" height="387" />
             </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.HistogramEqualization.#ctor">
            <summary>   
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.HistogramEqualization"/> class.
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.HistogramEqualization.ProcessFilter(AForge.Imaging.UnmanagedImage,Alt.Sketch.RectI)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
             <param name="rect">Image rectangle for processing by the filter.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.HistogramEqualization.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="T:AForge.Imaging.Filters.Invert">
             <summary>
             Invert image.
             </summary>
             
             <remarks><para>The filter inverts colored and grayscale images.</para>
            
             <para>The filter accepts 8, 16 bpp grayscale and 24, 48 bpp color images for processing.</para>
             
             <para>Sample usage:</para>
             <code>
             // create filter
             Invert filter = new Invert( );
             // apply the filter
             filter.ApplyInPlace( image );
             </code>
             
             <para><b>Initial image:</b></para>
             <img src="img/imaging/sample1.jpg" width="480" height="361" />
             <para><b>Result image:</b></para>
             <img src="img/imaging/invert.jpg" width="480" height="361" />
             </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Invert.#ctor">
            <summary>   
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Invert"/> class.
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.Invert.ProcessFilter(AForge.Imaging.UnmanagedImage,Alt.Sketch.RectI)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
             <param name="rect">Image rectangle for processing by the filter.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Invert.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="T:AForge.Imaging.Filters.LevelsLinear">
            <summary>
            Linear correction of RGB channels.
            </summary>
            
            <remarks><para>The filter performs linear correction of RGB channels by mapping specified
            channels' input ranges to output ranges. It is similar to the
            <see cref="T:AForge.Imaging.Filters.ColorRemapping"/>, but the remapping is linear.</para>
            
            <para>The filter accepts 8 bpp grayscale and 24/32 bpp color images for processing.</para>
            
            <para>Sample usage:</para>
            <code>
            // create filter
            LevelsLinear filter = new LevelsLinear( );
            // set ranges
            filter.InRed   = new IntRange( 30, 230 );
            filter.InGreen = new IntRange( 50, 240 );
            filter.InBlue  = new IntRange( 10, 210 );
            // apply the filter
            filter.ApplyInPlace( image );
            </code>
            
            <para><b>Initial image:</b></para>
            <img src="img/imaging/sample1.jpg" width="480" height="361"/>
            <para><b>Result image:</b></para>
            <img src="img/imaging/levels_linear.jpg" width="480" height="361"/>
            </remarks>
            
            <seealso cref="T:AForge.Imaging.Filters.HSLLinear"/>
            <seealso cref="!:YCbCrLinear"/>
            
        </member>
        <member name="M:AForge.Imaging.Filters.LevelsLinear.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.LevelsLinear"/> class.
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.LevelsLinear.ProcessFilter(AForge.Imaging.UnmanagedImage,Alt.Sketch.RectI)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
             <param name="rect">Image rectangle for processing by the filter.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.LevelsLinear.CalculateMap(AForge.IntRange,AForge.IntRange,System.Byte[])">
            <summary>
            Calculate conversion map.
            </summary>
            
            <param name="inRange">Input range.</param>
            <param name="outRange">Output range.</param>
            <param name="map">Conversion map.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.LevelsLinear.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.LevelsLinear.InRed">
            <summary>
            Red component's input range.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.LevelsLinear.InGreen">
            <summary>
            Green component's input range.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.LevelsLinear.InBlue">
            <summary>
            Blue component's input range.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.LevelsLinear.InGray">
            <summary>
            Gray component's input range.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.LevelsLinear.Input">
            <summary>
            Input range for RGB components.
            </summary>
            
            <remarks>The property allows to set red, green and blue input ranges to the same value.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.LevelsLinear.OutRed">
            <summary>
            Red component's output range.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.LevelsLinear.OutGreen">
            <summary>
            Green component's output range.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.LevelsLinear.OutBlue">
            <summary>
            Blue component's output range.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.LevelsLinear.OutGray">
            <summary>
            Gray component's output range.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.LevelsLinear.Output">
            <summary>
            Output range for RGB components.
            </summary>
            
            <remarks>The property allows to set red, green and blue output ranges to the same value.</remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.RotateChannels">
            <summary>
            Rotate RGB channels.
            </summary>
            
            <remarks><para>The filter rotates RGB channels: red channel is replaced with green,
            green channel is replaced with blue, blue channel is replaced with red.</para>
            
            <para>The filter accepts 24/32 bpp color images for processing.</para>
            
            <para>Sample usage:</para>
            <code>
            // create filter
            RotateChannels filter = new RotateChannels( );
            // apply the filter
            filter.ApplyInPlace( image );
            </code>
            
            <para><b>Initial image:</b></para>
            <img src="img/imaging/sample1.jpg" width="480" height="361" />
            <para><b>Result image:</b></para>
            <img src="img/imaging/rotate_channels.jpg" width="480" height="361" />
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.RotateChannels.#ctor">
            <summary>   
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.RotateChannels"/> class.
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.RotateChannels.ProcessFilter(AForge.Imaging.UnmanagedImage,Alt.Sketch.RectI)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
             <param name="rect">Image rectangle for processing by the filter.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.RotateChannels.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="T:AForge.Imaging.Filters.Sepia">
             <summary>
             Sepia filter - old brown photo.
             </summary>
            
             <remarks><para>The filter makes an image look like an old brown photo. The main
             idea of the algorithm:
             <list type="bullet">
             <item>transform to YIQ color space;</item>
             <item>modify it;</item>
             <item>transform back to RGB.</item>
             </list></para>
             
             <para>
             <b>1) RGB -> YIQ</b>:
             <code lang="none">
            	Y = 0.299 * R + 0.587 * G + 0.114 * B
            	I = 0.596 * R - 0.274 * G - 0.322 * B
            	Q = 0.212 * R - 0.523 * G + 0.311 * B
            	</code>
            	</para>
            	
             <para>
             <b>2) update</b>:
             <code lang="none">
            	I = 51
            	Q = 0
            	</code>
            	</para>
            	
             <para>
            	<b>3) YIQ -> RGB</b>:
             <code lang="none">
            	R = 1.0 * Y + 0.956 * I + 0.621 * Q
            	G = 1.0 * Y - 0.272 * I - 0.647 * Q
            	B = 1.0 * Y - 1.105 * I + 1.702 * Q
            	</code>
            	</para>
             
             <para>The filter accepts 24/32 bpp color images for processing.</para>
             
             <para>Sample usage:</para>
             <code>
             // create filter
             Sepia filter = new Sepia( );
             // apply the filter
             filter.ApplyInPlace( image );
             </code>
             
             <para><b>Initial image:</b></para>
             <img src="img/imaging/sample1.jpg" width="480" height="361" />
             <para><b>Result image:</b></para>
             <img src="img/imaging/sepia.jpg" width="480" height="361" />
             </remarks> 
            
        </member>
        <member name="M:AForge.Imaging.Filters.Sepia.#ctor">
            <summary>   
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Sepia"/> class.
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.Sepia.ProcessFilter(AForge.Imaging.UnmanagedImage,Alt.Sketch.RectI)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
             <param name="rect">Image rectangle for processing by the filter.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Sepia.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="T:AForge.Imaging.ColorReduction.IColorQuantizer">
            <summary>
            Interface which is implemented by different color quantization algorithms.
            </summary>
            
            <remarks><para>The interface defines set of methods, which are to be implemented by different
            color quantization algorithms - algorithms which are aimed to provide reduced color table/palette
            for a color image.</para>
            
            <para>See documentation to particular implementation of the interface for additional information
            about the algorithm.</para>
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.ColorReduction.IColorQuantizer.AddColor(Alt.Sketch.Color)">
            <summary>
            Process color by a color quantization algorithm.
            </summary>
            
            <param name="color">Color to process.</param>
            
            <remarks><para>Depending on particular implementation of <see cref="T:AForge.Imaging.ColorReduction.IColorQuantizer"/> interface,
            this method may simply process the specified color or store it in internal list for
            later color palette calculation.</para></remarks>
            
        </member>
        <member name="M:AForge.Imaging.ColorReduction.IColorQuantizer.GetPalette(System.Int32)">
             <summary>
             Get palette of the specified size.
             </summary>
             
             <param name="colorCount">Palette size to return.</param>
             
             <returns>Returns reduced color palette for the accumulated/processed colors.</returns>
             
             <remarks><para>The method must be called after continuously calling <see cref="M:AForge.Imaging.ColorReduction.IColorQuantizer.AddColor(Alt.Sketch.Color)"/> method and
             returns reduced color palette for colors accumulated/processed so far.</para></remarks>
            
        </member>
        <member name="M:AForge.Imaging.ColorReduction.IColorQuantizer.Clear">
            <summary>
            Clear internals of the algorithm, like accumulated color table, etc.
            </summary>
            
            <remarks><para>The methods resets internal state of a color quantization algorithm returning
            it to initial state.</para></remarks>
            
        </member>
        <member name="T:AForge.Imaging.ColorReduction.MedianCutQuantizer">
            <summary>
            Median cut color quantization algorithm.
            </summary>
            
            <remarks><para>The class implements <a href="http://en.wikipedia.org/wiki/Median_cut">median cut</a>
            <a href="http://en.wikipedia.org/wiki/Median_cut">color quantization</a> algorithm.</para>
            
            <para>See also <see cref="!:ColorImageQuantizer"/> class, which may simplify processing of images.</para>
            
            <para>Sample usage:</para>
            <code>
            // create the color quantization algorithm
            IColorQuantizer quantizer = new MedianCutQuantizer( );
            // process colors (taken from image for example)
            for ( int i = 0; i &lt; pixelsToProcess; i++ )
            {
                quantizer.AddColor( /* pixel color */ );
            }
            // get palette reduced to 16 colors
            Color[] palette = quantizer.GetPalette( 16 );
            </code>
            </remarks>
            
            <seealso cref="!:ColorImageQuantizer"/>
            
        </member>
        <member name="M:AForge.Imaging.ColorReduction.MedianCutQuantizer.AddColor(Alt.Sketch.Color)">
            <summary>
            Add color to the list of processed colors.
            </summary>
            
            <param name="color">Color to add to the internal list.</param>
            
            <remarks><para>The method adds the specified color into internal list of processed colors. The list
            is used later by <see cref="M:AForge.Imaging.ColorReduction.MedianCutQuantizer.GetPalette(System.Int32)"/> method to build reduced color table of the specified size.</para>
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.ColorReduction.MedianCutQuantizer.GetPalette(System.Int32)">
            <summary>
            Get paletter of the specified size.
            </summary>
            
            <param name="colorCount">Palette size to get.</param>
            
            <returns>Returns reduced palette of the specified size, which covers colors processed so far.</returns>
            
            <remarks><para>The method must be called after continuously calling <see cref="M:AForge.Imaging.ColorReduction.MedianCutQuantizer.AddColor(Alt.Sketch.Color)"/> method and
            returns reduced color palette for colors accumulated/processed so far.</para></remarks>
            
        </member>
        <member name="M:AForge.Imaging.ColorReduction.MedianCutQuantizer.Clear">
            <summary>
            Clear internal state of the color quantization algorithm by clearing the list of colors
            so far processed.
            </summary>
            
        </member>
        <member name="T:AForge.Imaging.Filters.Blur">
             <summary>
             Blur filter.
             </summary>
             
             <remarks><para>The filter performs <see cref="T:AForge.Imaging.Filters.Convolution">convolution filter</see> using
             the blur kernel:</para>
             
             <code lang="none">
             1  2  3  2  1
             2  4  5  4  2
             3  5  6  5  3
             2  4  5  4  2
             1  2  3  2  1
             </code>
             
             <para>For the list of supported pixel formats, see the documentation to <see cref="T:AForge.Imaging.Filters.Convolution"/>
             filter.</para>
             
             <para><note>By default this filter sets <see cref="P:AForge.Imaging.Filters.Convolution.ProcessAlpha"/> property to
             <see langword="true"/>, so the alpha channel of 32 bpp and 64 bpp images is blurred as well.
             </note></para>
             
             <para>Sample usage:</para>
             <code>
             // create filter
             Blur filter = new Blur( );
             // apply the filter
             filter.ApplyInPlace( image );
             </code>
            
             <para><b>Initial image:</b></para>
             <img src="img/imaging/sample1.jpg" width="480" height="361"/>
             <para><b>Result image:</b></para>
             <img src="img/imaging/blur.jpg" width="480" height="361"/>
             </remarks>
             
             <seealso cref="T:AForge.Imaging.Filters.Convolution"/>
             
        </member>
        <member name="T:AForge.Imaging.Filters.Convolution">
            <summary>
            Convolution filter.
            </summary>
            
            <remarks><para>The filter implements convolution operator, which calculates each pixel
            of the result image as weighted sum of the correspond pixel and its neighbors in the source
            image. The weights are set by <see cref="P:AForge.Imaging.Filters.Convolution.Kernel">convolution kernel</see>. The weighted
            sum is divided by <see cref="P:AForge.Imaging.Filters.Convolution.Divisor"/> before putting it into result image and also
            may be thresholded using <see cref="P:AForge.Imaging.Filters.Convolution.Threshold"/> value.</para>
            
            <para>Convolution is a simple mathematical operation which is fundamental to many common
            image processing filters. Depending on the type of provided kernel, the filter may produce
            different results, like blur image, sharpen it, find edges, etc.</para>
            
            <para>The filter accepts 8 and 16 bpp grayscale images and 24, 32, 48 and 64 bpp
            color images for processing. Note: depending on the value of <see cref="P:AForge.Imaging.Filters.Convolution.ProcessAlpha"/>
            property, the alpha channel is either copied as is or processed with the kernel.</para>
            
            <para>Sample usage:</para>
            <code>
            // define emboss kernel
            int[,] kernel = {
                        { -2, -1,  0 },
                        { -1,  1,  1 },
                        {  0,  1,  2 } };
            // create filter
            Convolution filter = new Convolution( kernel );
            // apply the filter
            filter.ApplyInPlace( image );
            </code>
            
            <para><b>Initial image:</b></para>
            <img src="img/imaging/sample5.jpg" width="480" height="361"/>
            <para><b>Result image:</b></para>
            <img src="img/imaging/emboss.jpg" width="480" height="361"/>
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Convolution.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Convolution"/> class.
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.Convolution.#ctor(System.Int32[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Convolution"/> class.
            </summary>
            
            <param name="kernel">Convolution kernel.</param>
            
            <remarks><para>Using this constructor (specifying only convolution kernel),
            <see cref="P:AForge.Imaging.Filters.Convolution.Divisor">division factor</see> will be calculated automatically
            summing all kernel values. In the case if kernel's sum equals to zero,
            division factor will be assigned to 1.</para></remarks>
            
            <exception cref="T:System.ArgumentException">Invalid kernel size is specified. Kernel must be
            square, its width/height should be odd and should be in the [3, 25] range.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Convolution.#ctor(System.Int32[0:,0:],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Convolution"/> class.
            </summary>
            
            <param name="kernel">Convolution kernel.</param>
            <param name="divisor">Divisor, used used to divide weighted sum.</param>
            
            <exception cref="T:System.ArgumentException">Invalid kernel size is specified. Kernel must be
            square, its width/height should be odd and should be in the [3, 25] range.</exception>
            <exception cref="T:System.ArgumentException">Divisor can not be equal to zero.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Convolution.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage,Alt.Sketch.RectI)">
            <summary>
            Process the filter on the specified image.
            </summary>
            
            <param name="source">Source image data.</param>
            <param name="destination">Destination image data.</param>
            <param name="rect">Image rectangle for processing by the filter.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Convolution.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.Convolution.Kernel">
            <summary>
            Convolution kernel.
            </summary>
            
            <remarks>
            <para><note>Convolution kernel must be square and its width/height
            should be odd and should be in the [3, 99] range.</note></para>
            
            <para><note>Setting convolution kernel through this property does not
            affect <see cref="P:AForge.Imaging.Filters.Convolution.Divisor"/> - it is not recalculated automatically.</note></para>
            </remarks>
            
            <exception cref="T:System.ArgumentException">Invalid kernel size is specified.</exception>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Convolution.Divisor">
            <summary>
            Division factor.
            </summary>
            
            <remarks><para>The value is used to divide convolution - weighted sum
            of pixels is divided by this value.</para>
            
            <para><note>The value may be calculated automatically in the case if constructor
            with one parameter is used (<see cref="M:AForge.Imaging.Filters.Convolution.#ctor(System.Int32[0:,0:])"/>).</note></para>
            </remarks>
            
            <exception cref="T:System.ArgumentException">Divisor can not be equal to zero.</exception>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Convolution.Threshold">
            <summary>
            Threshold to add to weighted sum.
            </summary>
            
            <remarks><para>The property specifies threshold value, which is added to each weighted
            sum of pixels. The value is added right after division was done by <see cref="P:AForge.Imaging.Filters.Convolution.Divisor"/>
            value.</para>
            
            <para>Default value is set to <b>0</b>.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Convolution.DynamicDivisorForEdges">
            <summary>
            Use dynamic divisor for edges or not.
            </summary>
            
            <remarks><para>The property specifies how to handle edges. If it is set to
            <see langword="false"/>, then the same divisor (which is specified by <see cref="P:AForge.Imaging.Filters.Convolution.Divisor"/>
            property or calculated automatically) will be applied both for non-edge regions
            and for edge regions. If the value is set to <see langword="true"/>, then dynamically
            calculated divisor will be used for edge regions, which is sum of those kernel
            elements, which are taken into account for particular processed pixel
            (elements, which are not outside image).</para>
            
            <para>Default value is set to <see langword="true"/>.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Convolution.ProcessAlpha">
            <summary>
            Specifies if alpha channel must be processed or just copied.
            </summary>
            
            <remarks><para>The property specifies the way how alpha channel is handled for 32 bpp
            and 64 bpp images. If the property is set to <see langword="false"/>, then alpha
            channel's values are just copied as is. If the property is set to <see langword="true"/>
            then alpha channel is convolved using the specified kernel same way as RGB channels.</para>
            
            <para>Default value is set to <see langword="false"/>.</para>
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Blur.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Blur"/> class.
            </summary>
        </member>
        <member name="T:AForge.Imaging.Filters.Edges">
             <summary>
             Simple edge detector.
             </summary>
             
             <remarks><para>The filter performs <see cref="T:AForge.Imaging.Filters.Convolution">convolution filter</see> using
             the edges kernel:</para>
             
             <code lang="none">
              0  -1   0
             -1   4  -1
              0  -1   0
             </code>
             
             <para>For the list of supported pixel formats, see the documentation to <see cref="T:AForge.Imaging.Filters.Convolution"/>
             filter.</para>
             
             <para>Sample usage:</para>
             <code>
             // create filter
             Edges filter = new Edges( );
             // apply the filter
             filter.ApplyInPlace( image );
             </code>
            
             <para><b>Initial image:</b></para>
             <img src="img/imaging/sample1.jpg" width="480" height="361"/>
             <para><b>Result image:</b></para>
             <img src="img/imaging/edges.png" width="480" height="361"/>
             </remarks>
             
             <seealso cref="T:AForge.Imaging.Filters.Convolution"/>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Edges.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Edges"/> class.
            </summary>
        </member>
        <member name="T:AForge.Imaging.Filters.GaussianBlur">
             <summary>
             Gaussian blur filter.
             </summary>
             
             <remarks><para>The filter performs <see cref="T:AForge.Imaging.Filters.Convolution">convolution filter</see> using
             the kernel, which is calculate with the help of <see cref="M:AForge.Math.Gaussian.Kernel2D(System.Int32)"/>
             method and then converted to integer kernel by dividing all elements by the element with the
             smallest value. Using the kernel the convolution filter is known as Gaussian blur.</para>
             
             <para>Using <see cref="P:AForge.Imaging.Filters.GaussianBlur.Sigma"/> property it is possible to configure
             <see cref="P:AForge.Math.Gaussian.Sigma">sigma value of Gaussian function</see>.</para>
             
             <para>For the list of supported pixel formats, see the documentation to <see cref="T:AForge.Imaging.Filters.Convolution"/>
             filter.</para>
             
             <para><note>By default this filter sets <see cref="P:AForge.Imaging.Filters.Convolution.ProcessAlpha"/> property to
             <see langword="true"/>, so the alpha channel of 32 bpp and 64 bpp images is blurred as well.
             </note></para>
             
             <para>Sample usage:</para>
             <code>
             // create filter with kernel size equal to 11
             // and Gaussia sigma value equal to 4.0
             GaussianBlur filter = new GaussianBlur( 4, 11 );
             // apply the filter
             filter.ApplyInPlace( image );
             </code>
            
             <para><b>Initial image:</b></para>
             <img src="img/imaging/sample1.jpg" width="480" height="361"/>
             <para><b>Result image:</b></para>
             <img src="img/imaging/gaussian_blur.jpg" width="480" height="361"/>
             </remarks>
             
             <seealso cref="T:AForge.Imaging.Filters.Convolution"/>
             
        </member>
        <member name="M:AForge.Imaging.Filters.GaussianBlur.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.GaussianBlur"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.GaussianBlur.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.GaussianBlur"/> class.
            </summary>
            
            <param name="sigma">Gaussian sigma value.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.GaussianBlur.#ctor(System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.GaussianBlur"/> class.
            </summary>
            
            <param name="sigma">Gaussian sigma value.</param>
            <param name="size">Kernel size.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.GaussianBlur.Sigma">
            <summary>
            Gaussian sigma value, [0.5, 5.0].
            </summary>
            
            <remarks><para>Sigma value for Gaussian function used to calculate
            the kernel.</para>
            
            <para>Default value is set to <b>1.4</b>.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.GaussianBlur.Size">
            <summary>
            Kernel size, [3, 21].
            </summary>
            
            <remarks><para>Size of Gaussian kernel.</para>
            
            <para>Default value is set to <b>5</b>.</para>
            </remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.Mean">
            <summary>
            Mean filter.
            </summary>
            
            <remarks><para>The filter performs each pixel value's averaging with its 8 neighbors, which is 
            <see cref="T:AForge.Imaging.Filters.Convolution">convolution filter</see> using the mean kernel:</para>
            
            <code lang="none">
            1  1  1
            1  1  1
            1  1  1
            </code>
            
            <para>For the list of supported pixel formats, see the documentation to <see cref="T:AForge.Imaging.Filters.Convolution"/>
            filter.</para>
            
            <para>With the above kernel the convolution filter is just calculates each pixel's value
            in result image as average of 9 corresponding pixels in the source image.</para>
            
            <para><note>By default this filter sets <see cref="P:AForge.Imaging.Filters.Convolution.ProcessAlpha"/> property to
            <see langword="true"/>, so the alpha channel of 32 bpp and 64 bpp images is blurred as well.
            </note></para>
            
            <para>Sample usage:</para>
            <code>
            // create filter
            Mean filter = new Mean( );
            // apply the filter
            filter.ApplyInPlace( image );
            </code>
            
            <para><b>Initial image:</b></para>
            <img src="img/imaging/sample13.png" width="480" height="361"/>
            <para><b>Result image:</b></para>
            <img src="img/imaging/mean.png" width="480" height="361"/>
            </remarks>
            
            <seealso cref="T:AForge.Imaging.Filters.Convolution"/>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Mean.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Mean"/> class.
            </summary>
        </member>
        <member name="T:AForge.Imaging.Filters.Sharpen">
            <summary>
            Sharpen filter
            </summary>
            
            <remarks><para>The filter performs <see cref="T:AForge.Imaging.Filters.Convolution">convolution filter</see> using
            the sharpen kernel:</para>
            
            <code lang="none">
             0  -1   0
            -1   5  -1
             0  -1   0
            </code>
            
            <para>For the list of supported pixel formats, see the documentation to <see cref="T:AForge.Imaging.Filters.Convolution"/>
            filter.</para>
            
            <para>Sample usage:</para>
            <code>
            // create filter
            Sharpen filter = new Sharpen( );
            // apply the filter
            filter.ApplyInPlace( image );
            </code>
            
            <para><b>Initial image:</b></para>
            <img src="img/imaging/sample1.jpg" width="480" height="361"/>
            <para><b>Result image:</b></para>
            <img src="img/imaging/sharpen.jpg" width="480" height="361"/>
            </remarks>
            
            <seealso cref="T:AForge.Imaging.Filters.Convolution"/>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Sharpen.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Sharpen"/> class.
            </summary>
        </member>
        <member name="T:AForge.Imaging.Filters.GaussianSharpen">
             <summary>
             Gaussian sharpen filter.
             </summary>
             
             <remarks><para>The filter performs <see cref="T:AForge.Imaging.Filters.Convolution">convolution filter</see> using
             the kernel, which is calculate with the help of <see cref="M:AForge.Math.Gaussian.Kernel2D(System.Int32)"/>
             method and then converted to integer sharpening kernel. First of all the integer kernel
             is calculated from <see cref="M:AForge.Math.Gaussian.Kernel2D(System.Int32)"/> by dividing all elements by
             the element with the smallest value. Then the integer kernel is converted to sharpen kernel by
             negating all kernel's elements (multiplying with <b>-1</b>), but the central kernel's element
             is calculated as <b>2 * sum - centralElement</b>, where <b>sum</b> is the sum off elements
             in the integer kernel before negating.</para>
             
             <para>For the list of supported pixel formats, see the documentation to <see cref="T:AForge.Imaging.Filters.Convolution"/>
             filter.</para>
             
             <para>Sample usage:</para>
             <code>
             // create filter with kernel size equal to 11
             // and Gaussia sigma value equal to 4.0
             GaussianSharpen filter = new GaussianSharpen( 4, 11 );
             // apply the filter
             filter.ApplyInPlace( image );
             </code>
            
             <para><b>Initial image:</b></para>
             <img src="img/imaging/sample1.jpg" width="480" height="361"/>
             <para><b>Result image:</b></para>
             <img src="img/imaging/gaussian_sharpen.jpg" width="480" height="361"/>
             </remarks>
             
             <seealso cref="T:AForge.Imaging.Filters.Convolution"/>
            
        </member>
        <member name="M:AForge.Imaging.Filters.GaussianSharpen.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.GaussianSharpen"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.GaussianSharpen.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.GaussianSharpen"/> class.
            </summary>
            
            <param name="sigma">Gaussian sigma value.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.GaussianSharpen.#ctor(System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.GaussianSharpen"/> class.
            </summary>
            
            <param name="sigma">Gaussian sigma value.</param>
            <param name="size">Kernel size.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.GaussianSharpen.Sigma">
            <summary>
            Gaussian sigma value, [0.5, 5.0].
            </summary>
            
            <remarks><para>Sigma value for Gaussian function used to calculate
            the kernel.</para>
            
            <para>Default value is set to <b>1.4</b>.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.GaussianSharpen.Size">
             <summary>
             Kernel size, [3, 5].
             </summary>
             
             <remarks><para>Size of Gaussian kernel.</para>
             
             <para>Default value is set to <b>5</b>.</para>
             </remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.FilterIterator">
            <summary>
            Filter iterator.
            </summary>
            
            <remarks><para>Filter iterator performs specified amount of filter's iterations.
            The filter take the specified <see cref="P:AForge.Imaging.Filters.FilterIterator.BaseFilter">base filter</see> and applies it
            to source image <see cref="P:AForge.Imaging.Filters.FilterIterator.Iterations">specified amount of times</see>.</para>
            
            <para><note>The filter itself does not have any restrictions to pixel format of source
            image. This is set by <see cref="P:AForge.Imaging.Filters.FilterIterator.BaseFilter">base filter</see>.</note></para>
            
            <para><note>The filter does image processing using only <see cref="T:AForge.Imaging.Filters.IFilter"/>
            interface of the specified <see cref="P:AForge.Imaging.Filters.FilterIterator.BaseFilter">base filter</see>. This means
            that this filter may not utilize all potential features of the base filter, like
            in-place processing (see <see cref="T:AForge.Imaging.Filters.IInPlaceFilter"/>) and region based processing
            (see <see cref="T:AForge.Imaging.Filters.IInPlacePartialFilter"/>). To utilize those features, it is required to
            do filter's iteration manually.</note></para>
            
            <para>Sample usage (morphological thinning):</para>
            <code>
            // create filter sequence
            FiltersSequence filterSequence = new FiltersSequence( );
            // add 8 thinning filters with different structuring elements
            filterSequence.Add( new HitAndMiss(
                new short [,] { { 0, 0, 0 }, { -1, 1, -1 }, { 1, 1, 1 } },
                HitAndMiss.Modes.Thinning ) );
            filterSequence.Add( new HitAndMiss(
                new short [,] { { -1, 0, 0 }, { 1, 1, 0 }, { -1, 1, -1 } },
                HitAndMiss.Modes.Thinning ) );
            filterSequence.Add( new HitAndMiss(
                new short [,] { { 1, -1, 0 }, { 1, 1, 0 }, { 1, -1, 0 } },
                HitAndMiss.Modes.Thinning ) );
            filterSequence.Add( new HitAndMiss(
                new short [,] { { -1, 1, -1 }, { 1, 1, 0 }, { -1, 0, 0 } },
                HitAndMiss.Modes.Thinning ) );
            filterSequence.Add( new HitAndMiss(
                new short [,] { { 1, 1, 1 }, { -1, 1, -1 }, { 0, 0, 0 } },
                HitAndMiss.Modes.Thinning ) );
            filterSequence.Add( new HitAndMiss(
                new short [,] { { -1, 1, -1 }, { 0, 1, 1 }, { 0, 0, -1 } },
                HitAndMiss.Modes.Thinning ) );
            filterSequence.Add( new HitAndMiss(
                new short [,] { { 0, -1, 1 }, { 0, 1, 1 }, { 0, -1, 1 } },
                HitAndMiss.Modes.Thinning ) );
            filterSequence.Add( new HitAndMiss(
                new short [,] { { 0, 0, -1 }, { 0, 1, 1 }, { -1, 1, -1 } },
                HitAndMiss.Modes.Thinning ) );
            // create filter iterator for 10 iterations
            FilterIterator filter = new FilterIterator( filterSequence, 10 );
            // apply the filter
            Bitmap newImage = filter.Apply( image );
            </code>
            
            <para><b>Initial image:</b></para>
            <img src="img/imaging/sample14.png" width="150" height="150"/>
            <para><b>Result image:</b></para>
            <img src="img/imaging/thinning.png" width="150" height="150"/>
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.FilterIterator.#ctor(AForge.Imaging.Filters.IFilter)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.FilterIterator"/> class.
            </summary>
            
            <param name="baseFilter">Filter to iterate.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.FilterIterator.#ctor(AForge.Imaging.Filters.IFilter,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.FilterIterator"/> class.
            </summary>
            
            <param name="baseFilter">Filter to iterate.</param>
            <param name="iterations">Iterations amount.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.FilterIterator.Apply(Alt.Sketch.Bitmap)">
             <summary>
             Apply filter to an image.
             </summary>
             
             <param name="image">Source image to apply filter to.</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source image.</returns>
             
             <remarks>The method keeps the source image unchanged and returns
             the result of image processing filter as new image.</remarks> 
            
        </member>
        <member name="M:AForge.Imaging.Filters.FilterIterator.Apply(Alt.Sketch.BitmapData)">
            <summary>
            Apply filter to an image.
            </summary>
            
            <param name="imageData">Source image to apply filter to.</param>
            
            <returns>Returns filter's result obtained by applying the filter to
            the source image.</returns>
            
            <remarks>The filter accepts bitmap data as input and returns the result
            of image processing filter as new image. The source image data are kept
            unchanged.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.FilterIterator.Apply(AForge.Imaging.UnmanagedImage)">
            <summary>
            Apply filter to an image in unmanaged memory.
            </summary>
            
            <param name="image">Source image in unmanaged memory to apply filter to.</param>
            
            <returns>Returns filter's result obtained by applying the filter to
            the source image.</returns>
            
            <remarks>The method keeps the source image unchanged and returns
            the result of image processing filter as new image.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.FilterIterator.Apply(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
            <summary>
            Apply filter to an image in unmanaged memory.
            </summary>
            
            <param name="sourceImage">Source image in unmanaged memory to apply filter to.</param>
            <param name="destinationImage">Destination image in unmanaged memory to put result into.</param>
            
            <remarks><para>The method keeps the source image unchanged and puts result of image processing
            into destination image.</para>
            
            <para><note>The destination image must have the same width and height as source image. Also
            destination image must have pixel format, which is expected by particular filter (see
            <see cref="P:AForge.Imaging.Filters.FilterIterator.FormatTranslations"/> property for information about pixel format conversions).</note></para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.FilterIterator.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
            
            <remarks><para>See <see cref="P:AForge.Imaging.Filters.IFilterInformation.FormatTranslations"/>
            documentation for additional information.</para>
            
            <para><note>The filter provides format translation dictionary taken from
            <see cref="P:AForge.Imaging.Filters.FilterIterator.BaseFilter"/> filter.</note></para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.FilterIterator.BaseFilter">
            <summary>
            Base filter.
            </summary>
            
            <remarks><para>The base filter is the filter to be applied specified amount of iterations to
            a specified image.</para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.FilterIterator.Iterations">
            <summary>
            Iterations amount, [1, 255].
            </summary>
            
            <remarks><para>The amount of times to apply specified filter to a specified image.</para>
            
            <para>Default value is set to <b>1</b>.</para>
            </remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.FiltersSequence">
            <summary>
            Filters' collection to apply to an image in sequence.
            </summary>
            
            <remarks><para>The class represents collection of filters, which need to be applied
            to an image in sequence. Using the class user may specify set of filters, which will
            be applied to source image one by one in the order user defines them.</para>
            
            <para>The class itself does not define which pixel formats are accepted for the source
            image and which pixel formats may be produced by the filter. Format of acceptable source
            and possible output is defined by filters, which added to the sequence.</para>
            
            <para>Sample usage:</para>
            <code>
            // create filter, which is binarization sequence
            FiltersSequence filter = new FiltersSequence(
                new GrayscaleBT709( ),
                new Threshold( )
            );
            // apply the filter
            Bitmap newImage = filter.Apply( image );
            </code>
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.FiltersSequence.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.FiltersSequence"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.FiltersSequence.#ctor(AForge.Imaging.Filters.IFilter[])">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.FiltersSequence"/> class.
            </summary>
            
            <param name="filters">Sequence of filters to apply.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.FiltersSequence.Add(AForge.Imaging.Filters.IFilter)">
            <summary>
            Add new filter to the sequence.
            </summary>
            
            <param name="filter">Filter to add to the sequence.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.FiltersSequence.Apply(Alt.Sketch.Bitmap)">
             <summary>
             Apply filter to an image.
             </summary>
             
             <param name="image">Source image to apply filter to.</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source image.</returns>
             
             <remarks>The method keeps the source image unchanged and returns
             the result of image processing filter as new image.</remarks>
             
             <exception cref="T:System.ApplicationException">No filters were added into the filters' sequence.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.FiltersSequence.Apply(Alt.Sketch.BitmapData)">
             <summary>
             Apply filter to an image.
             </summary>
             
             <param name="imageData">Source image to apply filter to.</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source image.</returns>
             
             <remarks>The filter accepts bitmap data as input and returns the result
             of image processing filter as new image. The source image data are kept
             unchanged.</remarks>
            
             <exception cref="T:System.ApplicationException">No filters were added into the filters' sequence.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.FiltersSequence.Apply(AForge.Imaging.UnmanagedImage)">
             <summary>
             Apply filter to an image in unmanaged memory.
             </summary>
             
             <param name="image">Source image in unmanaged memory to apply filter to.</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source image.</returns>
             
             <remarks>The method keeps the source image unchanged and returns
             the result of image processing filter as new image.</remarks>
             
             <exception cref="T:System.ApplicationException">No filters were added into the filters' sequence.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.FiltersSequence.Apply(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
             <summary>
             Apply filter to an image in unmanaged memory.
             </summary>
             
             <param name="sourceImage">Source image in unmanaged memory to apply filter to.</param>
             <param name="destinationImage">Destination image in unmanaged memory to put result into.</param>
             
             <remarks><para>The method keeps the source image unchanged and puts result of image processing
             into destination image.</para>
             
             <para><note>The destination image must have width, height and pixel format as it is expected by
             the final filter in the sequence.</note></para>
             </remarks>
             
             <exception cref="T:System.ApplicationException">No filters were added into the filters' sequence.</exception>
            
        </member>
        <member name="P:AForge.Imaging.Filters.FiltersSequence.Item(System.Int32)">
            <summary>
            Get filter at the specified index.
            </summary>
            
            <param name="index">Index of filter to get.</param>
            
            <returns>Returns filter at specified index.</returns>
            
        </member>
        <member name="T:AForge.Imaging.Filters.PointedColorFloodFill">
            <summary>
            Flood filling with specified color starting from specified point.
            </summary>
            
            <remarks><para>The filter performs image's area filling (4 directional) starting
            from the <see cref="P:AForge.Imaging.Filters.PointedColorFloodFill.StartingPoint">specified point</see>. It fills
            the area of the pointed color, but also fills other colors, which
            are similar to the pointed within specified <see cref="P:AForge.Imaging.Filters.PointedColorFloodFill.Tolerance">tolerance</see>.
            The area is filled using <see cref="P:AForge.Imaging.Filters.PointedColorFloodFill.FillColor">specified fill color</see>.
            </para>
            
            <para>The filter accepts 8 bpp grayscale images and 24 bpp
            color images for processing.</para>
            
            <para>Sample usage:</para>
            <code>
            // create filter
            PointedColorFloodFill filter = new PointedColorFloodFill( );
            // configure the filter
            filter.Tolerance = Color.FromArgb( 150, 92, 92 );
            filter.FillColor = Color.FromArgb( 255, 255, 255 );
            filter.StartingPoint = new IntPoint( 150, 100 );
            // apply the filter
            filter.ApplyInPlace( image );
            </code>
            
            <para><b>Initial image:</b></para>
            <img src="img/imaging/sample1.jpg" width="480" height="361"/>
            <para><b>Result image:</b></para>
            <img src="img/imaging/pointed_color_fill.jpg" width="480" height="361"/>
            </remarks>
            
            <seealso cref="T:AForge.Imaging.Filters.PointedMeanFloodFill"/>
            
        </member>
        <member name="M:AForge.Imaging.Filters.PointedColorFloodFill.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.PointedColorFloodFill"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.PointedColorFloodFill.#ctor(Alt.Sketch.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.PointedColorFloodFill"/> class.
            </summary>
            
            <param name="fillColor">Fill color.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.PointedColorFloodFill.ProcessFilter(AForge.Imaging.UnmanagedImage,Alt.Sketch.RectI)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
             <param name="rect">Image rectangle for processing by the filter.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.PointedColorFloodFill.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.PointedColorFloodFill.Tolerance">
            <summary>
            Flood fill tolerance.
            </summary>
            
            <remarks><para>The tolerance value determines which colors to fill. If the
            value is set to 0, then only color of the <see cref="P:AForge.Imaging.Filters.PointedColorFloodFill.StartingPoint">pointed pixel</see>
            is filled. If the value is not 0, then other colors may be filled as well,
            which are similar to the color of the pointed pixel within the specified
            tolerance.</para>
            
            <para>The tolerance value is specified as <see cref="T:Alt.Sketch.Color"/>,
            where each component (R, G and B) represents tolerance for the corresponding
            component of color. This allows to set different tolerances for red, green
            and blue components.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.PointedColorFloodFill.FillColor">
            <summary>
            Fill color.
            </summary>
            
            <remarks><para>The fill color is used to fill image's area starting from the
            <see cref="P:AForge.Imaging.Filters.PointedColorFloodFill.StartingPoint">specified point</see>.</para>
            
            <para>For grayscale images the color needs to be specified with all three
            RGB values set to the same value, (128, 128, 128) for example.</para>
            
            <para>Default value is set to <b>black</b>.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.PointedColorFloodFill.StartingPoint">
            <summary>
            Point to start filling from.
            </summary>
            
            <remarks><para>The property allows to set the starting point, where filling is
            started from.</para>
            
            <remarks>Default value is set to <b>(0, 0)</b>.</remarks>
            </remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.PointedMeanFloodFill">
            <summary>
            Flood filling with mean color starting from specified point.
            </summary>
            
            <remarks><para>The filter performs image's area filling (4 directional) starting
            from the <see cref="P:AForge.Imaging.Filters.PointedMeanFloodFill.StartingPoint">specified point</see>. It fills
            the area of the pointed color, but also fills other colors, which
            are similar to the pointed within specified <see cref="P:AForge.Imaging.Filters.PointedMeanFloodFill.Tolerance">tolerance</see>.
            The area is filled using its mean color.
            </para>
            
            <para>The filter is similar to <see cref="T:AForge.Imaging.Filters.PointedColorFloodFill"/> filter, but instead
            of filling the are with specified color, it fills the area with its mean color. This means
            that this is a two pass filter - first pass is to calculate the mean value and the second pass is to
            fill the area. Unlike to <see cref="T:AForge.Imaging.Filters.PointedColorFloodFill"/> filter, this filter has nothing
            to do in the case if zero <see cref="P:AForge.Imaging.Filters.PointedMeanFloodFill.Tolerance">tolerance</see> is specified.</para>
            
            <para>The filter accepts 8 bpp grayscale images and 24 bpp
            color images for processing.</para>
            
            <para>Sample usage:</para>
            <code>
            // create filter
            PointedMeanFloodFill filter = new PointedMeanFloodFill( );
            // configre the filter
            filter.Tolerance = Color.FromArgb( 150, 92, 92 );
            filter.StartingPoint = new IntPoint( 150, 100 );
            // apply the filter
            filter.ApplyInPlace( image );
            </code>
            
            <para><b>Initial image:</b></para>
            <img src="img/imaging/sample1.jpg" width="480" height="361"/>
            <para><b>Result image:</b></para>
            <img src="img/imaging/pointed_mean_fill.jpg" width="480" height="361"/>
            </remarks>
            
            <seealso cref="T:AForge.Imaging.Filters.PointedColorFloodFill"/>
            
        </member>
        <member name="M:AForge.Imaging.Filters.PointedMeanFloodFill.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.PointedMeanFloodFill"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.PointedMeanFloodFill.ProcessFilter(AForge.Imaging.UnmanagedImage,Alt.Sketch.RectI)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
             <param name="rect">Image rectangle for processing by the filter.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.PointedMeanFloodFill.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
            
            <remarks><para>See <see cref="P:AForge.Imaging.Filters.IFilterInformation.FormatTranslations"/>
            documentation for additional information.</para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.PointedMeanFloodFill.Tolerance">
            <summary>
            Flood fill tolerance.
            </summary>
            
            <remarks><para>The tolerance value determines the level of similarity between
            colors to fill and the pointed color. If the value is set to zero, then the
            filter does nothing, since the filling area contains only one color and its
            filling with mean is meaningless.</para>
            
            <para>The tolerance value is specified as <see cref="T:Alt.Sketch.Color"/>,
            where each component (R, G and B) represents tolerance for the corresponding
            component of color. This allows to set different tolerances for red, green
            and blue components.</para>
            
            <para>Default value is set to <b>(16, 16, 16)</b>.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.PointedMeanFloodFill.StartingPoint">
            <summary>
            Point to start filling from.
            </summary>
            
            <remarks><para>The property allows to set the starting point, where filling is
            started from.</para>
            
            <remarks>Default value is set to <b>(0, 0)</b>.</remarks>
            </remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.HSLFiltering">
            <summary>
            Color filtering in HSL color space.
            </summary>
            
            <remarks><para>The filter operates in <b>HSL</b> color space and filters
            pixels, which color is inside/outside of the specified HSL range -
            it keeps pixels with colors inside/outside of the specified range and fills the
            rest with <see cref="P:AForge.Imaging.Filters.HSLFiltering.FillColor">specified color</see>.</para>
            
            <para>The filter accepts 24 and 32 bpp color images for processing.</para>
            
            <para>Sample usage:</para>
            <code>
            // create filter
            HSLFiltering filter = new HSLFiltering( );
            // set color ranges to keep
            filter.Hue = new IntRange( 335, 0 );
            filter.Saturation = new Range( 0.6f, 1 );
            filter.Luminance = new Range( 0.1f, 1 );
            // apply the filter
            filter.ApplyInPlace( image );
            </code>
            
            <para><b>Initial image:</b></para>
            <img src="img/imaging/sample1.jpg" width="480" height="361"/>
            <para><b>Result image:</b></para>
            <img src="img/imaging/hsl_filtering.jpg" width="480" height="361"/>
            
            <para>Sample usage with saturation update only:</para>
            <code>
            // create filter
            HSLFiltering filter = new HSLFiltering( );
            // configure the filter
            filter.Hue = new IntRange( 340, 20 );
            filter.UpdateLuminance = false;
            filter.UpdateHue = false;
            // apply the filter
            filter.ApplyInPlace( image );
            </code>
            
            <para><b>Result image:</b></para>
            <img src="img/imaging/hsl_filtering2.jpg" width="480" height="361"/>
            </remarks>
            
            <seealso cref="T:AForge.Imaging.Filters.ColorFiltering"/>
            <seealso cref="T:AForge.Imaging.Filters.YCbCrFiltering"/>
            
        </member>
        <member name="M:AForge.Imaging.Filters.HSLFiltering.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.HSLFiltering"/> class.
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.HSLFiltering.#ctor(AForge.IntRange,AForge.Range,AForge.Range)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.HSLFiltering"/> class.
            </summary>
            
            <param name="hue">Range of hue component.</param>
            <param name="saturation">Range of saturation component.</param>
            <param name="luminance">Range of luminance component.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.HSLFiltering.ProcessFilter(AForge.Imaging.UnmanagedImage,Alt.Sketch.RectI)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
             <param name="rect">Image rectangle for processing by the filter.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.HSLFiltering.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.HSLFiltering.Hue">
            <summary>
            Range of hue component, [0, 359].
            </summary>
            
            <remarks><note>Because of hue values are cycled, the minimum value of the hue
            range may have bigger integer value than the maximum value, for example [330, 30].</note></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.HSLFiltering.Saturation">
            <summary>
            Range of saturation component, [0, 1].
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.HSLFiltering.Luminance">
            <summary>
            Range of luminance component, [0, 1].
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.HSLFiltering.FillColor">
            <summary>
            Fill color used to fill filtered pixels.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.HSLFiltering.FillOutsideRange">
            <summary>
            Determines, if pixels should be filled inside or outside specified
            color range.
            </summary>
            
            <remarks><para>Default value is set to <see langword="true"/>, which means
            the filter removes colors outside of the specified range.</para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.HSLFiltering.UpdateHue">
            <summary>
            Determines, if hue value of filtered pixels should be updated.
            </summary>
            
            <remarks><para>The property specifies if hue of filtered pixels should be
            updated with value from <see cref="P:AForge.Imaging.Filters.HSLFiltering.FillColor">fill color</see> or not.</para>
            
            <para>Default value is set to <see langword="true"/>.</para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.HSLFiltering.UpdateSaturation">
            <summary>
            Determines, if saturation value of filtered pixels should be updated.
            </summary>
            
            <remarks><para>The property specifies if saturation of filtered pixels should be
            updated with value from <see cref="P:AForge.Imaging.Filters.HSLFiltering.FillColor">fill color</see> or not.</para>
            
            <para>Default value is set to <see langword="true"/>.</para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.HSLFiltering.UpdateLuminance">
            <summary>
            Determines, if luminance value of filtered pixels should be updated.
            </summary>
            
            <remarks><para>The property specifies if luminance of filtered pixels should be
            updated with value from <see cref="P:AForge.Imaging.Filters.HSLFiltering.FillColor">fill color</see> or not.</para>
            
            <para>Default value is set to <see langword="true"/>.</para></remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.HSLLinear">
            <summary>
            Luminance and saturation linear correction.
            </summary>
            
            <remarks><para>The filter operates in <b>HSL</b> color space and provides
            with the facility of luminance and saturation linear correction - mapping specified channels'
            input ranges to specified output ranges.</para>
            
            <para>The filter accepts 24 and 32 bpp color images for processing.</para>
            
            <para>Sample usage:</para>
            <code>
            // create filter
            HSLLinear filter = new HSLLinear( );
            // configure the filter
            filter.InLuminance   = new Range( 0, 0.85f );
            filter.OutSaturation = new Range( 0.25f, 1 );
            // apply the filter
            filter.ApplyInPlace( image );
            </code>
            
            <para><b>Initial image:</b></para>
            <img src="img/imaging/sample1.jpg" width="480" height="361"/>
            <para><b>Result image:</b></para>
            <img src="img/imaging/hsl_linear.jpg" width="480" height="361"/>
            </remarks>
            
            <seealso cref="T:AForge.Imaging.Filters.LevelsLinear"/>
            <seealso cref="!:YCbCrLinear"/>
            
        </member>
        <member name="M:AForge.Imaging.Filters.HSLLinear.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.HSLLinear"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.HSLLinear.ProcessFilter(AForge.Imaging.UnmanagedImage,Alt.Sketch.RectI)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
             <param name="rect">Image rectangle for processing by the filter.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.HSLLinear.InLuminance">
            <summary>
            Luminance input range.
            </summary>
            
            <remarks>Luminance component is measured in the range of [0, 1].</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.HSLLinear.OutLuminance">
            <summary>
            Luminance output range.
            </summary>
            
            <remarks>Luminance component is measured in the range of [0, 1].</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.HSLLinear.InSaturation">
            <summary>
            Saturation input range.
            </summary>
            
            <remarks>Saturation component is measured in the range of [0, 1].</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.HSLLinear.OutSaturation">
            <summary>
            Saturation output range.
            </summary>
            
            <remarks>Saturation component is measured in the range of [0, 1].</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.HSLLinear.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="T:AForge.Imaging.Filters.HueModifier">
             <summary>
             Hue modifier.
             </summary>
             
             <remarks><para>The filter operates in <b>HSL</b> color space and updates
             pixels' hue values setting it to the specified value (luminance and
             saturation are kept unchanged). The result of the filter looks like the image
             is observed through a glass of the given color.</para>
            
             <para>The filter accepts 24 and 32 bpp color images for processing.</para>
             <para>Sample usage:</para>
             <code>
             // create filter
             HueModifier filter = new HueModifier( 180 );
             // apply the filter
             filter.ApplyInPlace( image );
             </code>
             
             <para><b>Initial image:</b></para>
             <img src="img/imaging/sample1.jpg" width="480" height="361" />
             <para><b>Result image:</b></para>
             <img src="img/imaging/hue_modifier.jpg" width="480" height="361" />
             </remarks>
             
        </member>
        <member name="M:AForge.Imaging.Filters.HueModifier.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.HueModifier"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.HueModifier.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.HueModifier"/> class.
            </summary>
            
            <param name="hue">Hue value to set.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.HueModifier.ProcessFilter(AForge.Imaging.UnmanagedImage,Alt.Sketch.RectI)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
             <param name="rect">Image rectangle for processing by the filter.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.HueModifier.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.HueModifier.Hue">
            <summary>
            Hue value to set, [0, 359].
            </summary>
            
            <remarks><para>Default value is set to <b>0</b>.</para></remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.SaturationCorrection">
            <summary>
            Saturation adjusting in HSL color space.
            </summary>
            
            <remarks><para>The filter operates in <b>HSL</b> color space and adjusts
            pixels' saturation value, increasing it or decreasing by specified percentage.
            The filters is based on <see cref="T:AForge.Imaging.Filters.HSLLinear"/> filter, passing work to it after
            recalculating saturation <see cref="P:AForge.Imaging.Filters.SaturationCorrection.AdjustValue">adjust value</see> to input/output
            ranges of the <see cref="T:AForge.Imaging.Filters.HSLLinear"/> filter.</para>
            
            <para>The filter accepts 24 and 32 bpp color images for processing.</para>
            
            <para>Sample usage:</para>
            <code>
            // create filter
            SaturationCorrection filter = new SaturationCorrection( -0.5f );
            // apply the filter
            filter.ApplyInPlace( image );
            </code>
            
            <para><b>Initial image:</b></para>
            <img src="img/imaging/sample1.jpg" width="480" height="361"/>
            <para><b>Result image:</b></para>
            <img src="img/imaging/saturation_correction.jpg" width="480" height="361"/>
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.SaturationCorrection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.SaturationCorrection"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.SaturationCorrection.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.SaturationCorrection"/> class.
            </summary>
            
            <param name="adjustValue">Saturation adjust value.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.SaturationCorrection.ProcessFilter(AForge.Imaging.UnmanagedImage,Alt.Sketch.RectI)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
             <param name="rect">Image rectangle for processing by the filter.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.SaturationCorrection.AdjustValue">
            <summary>
            Saturation adjust value, [-1, 1].
            </summary>
            
            <remarks>Default value is set to <b>0.1</b>, which corresponds to increasing
            saturation by 10%.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.SaturationCorrection.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="T:AForge.Imaging.Filters.FlatFieldCorrection">
            <summary>
            Flat field correction filter.
            </summary>
            
            <remarks><para>The goal of flat-field correction is to remove artifacts from 2-D images that
            are caused by variations in the pixel-to-pixel sensitivity of the detector and/or by distortions
            in the optical path. The filter requires two images for the input - source image, which represents
            acquisition of some objects (using microscope, for example), and background image, which is taken
            without any objects presented. The source image is corrected using the formula: <b>src = bgMean * src / bg</b>,
            where <b>src</b> - source image's pixel value, <b>bg</b> - background image's pixel value, <b>bgMean</b> - mean
            value of background image.</para>
            
            <para><note>If background image is not provided, then it will be automatically generated on each filter run
            from source image. The automatically generated background image is produced running Gaussian Blur on the
            original image with (sigma value is set to 5, kernel size is set to 21). Before blurring the original image
            is resized to 1/3 of its original size and then the result of blurring is resized back to the original size.
            </note></para>
            
            <para><note>The class processes only grayscale (8 bpp indexed) and color (24 bpp) images.</note></para>
            
            <para>Sample usage:</para>
            <code>
            // create filter
            FlatFieldCorrection filter = new FlatFieldCorrection( bgImage );
            // process image
            filter.ApplyInPlace( sourceImage );
            </code>
            
            <para><b>Source image:</b></para>
            <img src="img/imaging/sample4.jpg" width="480" height="387" />
            <para><b>Background image:</b></para>
            <img src="img/imaging/bg.jpg" width="480" height="387" />
            <para><b>Result image:</b></para>
            <img src="img/imaging/flat_field.jpg" width="480" height="387" />
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.FlatFieldCorrection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.FlatFieldCorrection"/> class.
            </summary>
            
            <remarks><para>This constructor does not set background image, which means that background
            image will be generated on the fly on each filter run. The automatically generated background
            image is produced running Gaussian Blur on the original image with (sigma value is set to 5,
            kernel size is set to 21). Before blurring the original image is resized to 1/3 of its original size
            and then the result of blurring is resized back to the original size.</para></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.FlatFieldCorrection.#ctor(Alt.Sketch.Bitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.FlatFieldCorrection"/> class.
            </summary>
            
            <param name="backgroundImage">Background image used for flat field correction.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.FlatFieldCorrection.ProcessFilter(AForge.Imaging.UnmanagedImage)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.FlatFieldCorrection.BackgoundImage">
            <summary>
            Background image used for flat field correction.
            </summary>
            
            <remarks><para>The property sets the background image (without any objects), which will be used
            for illumination correction of an image passed to the filter.</para>
            
            <para><note>The background image must have the same size and pixel format as source image.
            Otherwise exception will be generated when filter is applied to source image.</note></para>
            
            <para><note>Setting this property will clear the <see cref="P:AForge.Imaging.Filters.FlatFieldCorrection.UnmanagedBackgoundImage"/> property -
            only one background image is allowed: managed or unmanaged.</note></para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.FlatFieldCorrection.UnmanagedBackgoundImage">
            <summary>
            Background image used for flat field correction.
            </summary>
            
            <remarks><para>The property sets the background image (without any objects), which will be used
            for illumination correction of an image passed to the filter.</para>
            
            <para><note>The background image must have the same size and pixel format as source image.
            Otherwise exception will be generated when filter is applied to source image.</note></para>
            
            <para><note>Setting this property will clear the <see cref="P:AForge.Imaging.Filters.FlatFieldCorrection.BackgoundImage"/> property -
            only one background image is allowed: managed or unmanaged.</note></para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.FlatFieldCorrection.FormatTranslations">
             <summary>
             Format translations dictionary.
             </summary>
            
             <remarks><para>See <see cref="P:AForge.Imaging.Filters.IFilterInformation.FormatTranslations"/> for more information.</para></remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.BottomHat">
             <summary>
             Bottop-hat operator from Mathematical Morphology.
             </summary>
             
             <remarks><para>Bottom-hat morphological operator <see cref="T:AForge.Imaging.Filters.Subtract">subtracts</see>
             input image from the result of <see cref="T:AForge.Imaging.Filters.Closing">morphological closing</see> on the
             the input image.</para>
             
             <para>Applied to binary image, the filter allows to get all object parts, which were
             added by <see cref="T:AForge.Imaging.Filters.Closing">closing</see> filter, but were not removed after that due
             to formed connections/fillings.</para>
             
             <para>The filter accepts 8 and 16 bpp grayscale images and 24 and 48 bpp
             color images for processing.</para>
            
             <para>Sample usage:</para>
             <code>
             // create filter
             BottomHat filter = new BottomHat( );
             // apply the filter
             filter.Apply( image );
             </code>
             
             <para><b>Initial image:</b></para>
             <img src="img/imaging/sample12.png" width="320" height="240"/>
             <para><b>Result image:</b></para>
             <img src="img/imaging/bottomhat.png" width="320" height="240"/>
             </remarks>
             
             <seealso cref="T:AForge.Imaging.Filters.TopHat"/>
             
        </member>
        <member name="M:AForge.Imaging.Filters.BottomHat.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.BottomHat"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BottomHat.#ctor(System.Int16[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.BottomHat"/> class.
            </summary>
            
            <param name="se">Structuring element to pass to <see cref="T:AForge.Imaging.Filters.Closing"/> operator.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BottomHat.ProcessFilter(AForge.Imaging.UnmanagedImage)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.BottomHat.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="T:AForge.Imaging.Filters.Closing">
            <summary>
            Closing operator from Mathematical Morphology.
            </summary>
            
            <remarks><para>Closing morphology operator equals to <see cref="T:AForge.Imaging.Filters.Dilatation">dilatation</see> followed
            by <see cref="T:AForge.Imaging.Filters.Erosion">erosion</see>.</para>
            
            <para>Applied to binary image, the filter may be used connect or fill objects. Since dilatation is used
            first, it may connect/fill object areas. Then erosion restores objects. But since dilatation may connect
            something before, erosion may not remove after that because of the formed connection.</para>
            
            <para>See documentation to <see cref="T:AForge.Imaging.Filters.Erosion"/> and <see cref="T:AForge.Imaging.Filters.Dilatation"/> classes for more
            information and list of supported pixel formats.</para>
            
            <para>Sample usage:</para>
            <code>
            // create filter
            Closing filter = new Closing( );
            // apply the filter
            filter.Apply( image );
            </code>
            
            <para><b>Initial image:</b></para>
            <img src="img/imaging/sample12.png" width="320" height="240"/>
            <para><b>Result image:</b></para>
            <img src="img/imaging/closing.png" width="320" height="240"/>
            </remarks>
            
            <seealso cref="T:AForge.Imaging.Filters.Erosion"/>
            <seealso cref="T:AForge.Imaging.Filters.Dilatation"/>
            <seealso cref="T:AForge.Imaging.Filters.Opening"/>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Closing.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Closing"/> class.
            </summary>
            
            <remarks><para>Initializes new instance of the <see cref="T:AForge.Imaging.Filters.Closing"/> class using
            default structuring element for both <see cref="T:AForge.Imaging.Filters.Erosion"/> and <see cref="T:AForge.Imaging.Filters.Dilatation"/>
            classes - 3x3 structuring element with all elements equal to 1.
            </para></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Closing.#ctor(System.Int16[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Closing"/> class.
            </summary>
            
            <param name="se">Structuring element.</param>
            
            <remarks><para>See documentation to <see cref="T:AForge.Imaging.Filters.Erosion"/> and <see cref="T:AForge.Imaging.Filters.Dilatation"/>
            classes for information about structuring element constraints.</para></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Closing.Apply(Alt.Sketch.Bitmap)">
             <summary>
             Apply filter to an image.
             </summary>
             
             <param name="image">Source image to apply filter to.</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source image.</returns>
             
             <remarks>The method keeps the source image unchanged and returns
             the result of image processing filter as new image.</remarks>
             
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Closing.Apply(Alt.Sketch.BitmapData)">
            <summary>
            Apply filter to an image.
            </summary>
            
            <param name="imageData">Source image to apply filter to.</param>
            
            <returns>Returns filter's result obtained by applying the filter to
            the source image.</returns>
            
            <remarks>The filter accepts bitmap data as input and returns the result
            of image processing filter as new image. The source image data are kept
            unchanged.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Closing.Apply(AForge.Imaging.UnmanagedImage)">
             <summary>
             Apply filter to an image in unmanaged memory.
             </summary>
             
             <param name="image">Source image in unmanaged memory to apply filter to.</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source image.</returns>
             
             <remarks>The method keeps the source image unchanged and returns
             the result of image processing filter as new image.</remarks>
             
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Closing.Apply(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
             <summary>
             Apply filter to an image in unmanaged memory.
             </summary>
             
             <param name="sourceImage">Source image in unmanaged memory to apply filter to.</param>
             <param name="destinationImage">Destination image in unmanaged memory to put result into.</param>
             
             <remarks><para>The method keeps the source image unchanged and puts result of image processing
             into destination image.</para>
             
             <para><note>The destination image must have the same width and height as source image. Also
             destination image must have pixel format, which is expected by particular filter (see
             <see cref="P:AForge.Imaging.Filters.Closing.FormatTranslations"/> property for information about pixel format conversions).</note></para>
             </remarks>
             
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
             <exception cref="T:AForge.Imaging.InvalidImagePropertiesException">Incorrect destination pixel format.</exception>
             <exception cref="T:AForge.Imaging.InvalidImagePropertiesException">Destination image has wrong width and/or height.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Closing.ApplyInPlace(Alt.Sketch.Bitmap)">
            <summary>
            Apply filter to an image.
            </summary>
            
            <param name="image">Image to apply filter to.</param>
            
            <remarks>The method applies the filter directly to the provided source image.</remarks>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
             
        </member>
        <member name="M:AForge.Imaging.Filters.Closing.ApplyInPlace(Alt.Sketch.BitmapData)">
             <summary>
             Apply filter to an image.
             </summary>
             
             <param name="imageData">Image data to apply filter to.</param>
             
             <remarks>The method applies the filter directly to the provided source image.</remarks>
             
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Closing.ApplyInPlace(AForge.Imaging.UnmanagedImage)">
             <summary>
             Apply filter to an unmanaged image.
             </summary>
             
             <param name="image">Unmanaged image to apply filter to.</param>
             
             <remarks>The method applies the filter directly to the provided source unmanaged image.</remarks>
             
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Closing.ApplyInPlace(Alt.Sketch.Bitmap,Alt.Sketch.RectI)">
            <summary>
            Apply filter to an image or its part.
            </summary>
            
            <param name="image">Image to apply filter to.</param>
            <param name="rect">Image rectangle for processing by the filter.</param>
            
            <remarks>The method applies the filter directly to the provided source image.</remarks>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
             
        </member>
        <member name="M:AForge.Imaging.Filters.Closing.ApplyInPlace(Alt.Sketch.BitmapData,Alt.Sketch.RectI)">
             <summary>
             Apply filter to an image or its part.
             </summary>
             
             <param name="imageData">Image data to apply filter to.</param>
             <param name="rect">Image rectangle for processing by the filter.</param>
             
             <remarks>The method applies the filter directly to the provided source image.</remarks>
             
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Closing.ApplyInPlace(AForge.Imaging.UnmanagedImage,Alt.Sketch.RectI)">
            <summary>
            Apply filter to an unmanaged image or its part.
            </summary>
            
            <param name="image">Unmanaged image to apply filter to.</param>
            <param name="rect">Image rectangle for processing by the filter.</param>
            
            <remarks>The method applies the filter directly to the provided source image.</remarks>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Closing.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="T:AForge.Imaging.Filters.Dilatation">
            <summary>
            Dilatation operator from Mathematical Morphology.
            </summary>
            
            <remarks><para>The filter assigns maximum value of surrounding pixels to each pixel of
            the result image. Surrounding pixels, which should be processed, are specified by
            structuring element: 1 - to process the neighbor, -1 - to skip it.</para>
            
            <para>The filter especially useful for binary image processing, where it allows to grow
            separate objects or join objects.</para>
            
            <para>For processing image with 3x3 structuring element, there are different optimizations
            available, like <see cref="!:Dilatation3x3"/> and <see cref="!:BinaryDilatation3x3"/>.</para>
            
            <para>The filter accepts 8 and 16 bpp grayscale images and 24 and 48 bpp
            color images for processing.</para>
            
            <para>Sample usage:</para>
            <code>
            // create filter
            Dilatation filter = new Dilatation( );
            // apply the filter
            filter.Apply( image );
            </code>
            
            <para><b>Initial image:</b></para>
            <img src="img/imaging/sample12.png" width="320" height="240"/>
            <para><b>Result image:</b></para>
            <img src="img/imaging/dilatation.png" width="320" height="240"/>
            </remarks>
            
            <seealso cref="T:AForge.Imaging.Filters.Erosion"/>
            <seealso cref="T:AForge.Imaging.Filters.Closing"/>
            <seealso cref="T:AForge.Imaging.Filters.Opening"/>
            <seealso cref="!:Dilatation3x3"/>
            <seealso cref="!:BinaryDilatation3x3"/>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Dilatation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Dilatation"/> class.
            </summary>
            
            <remarks><para>Initializes new instance of the <see cref="T:AForge.Imaging.Filters.Dilatation"/> class using
            default structuring element - 3x3 structuring element with all elements equal to 1.
            </para></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Dilatation.#ctor(System.Int16[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Dilatation"/> class.
            </summary>
            
            <param name="se">Structuring element.</param>
            
            <remarks><para>Structuring elemement for the dilatation morphological operator
            must be square matrix with odd size in the range of [3, 99].</para></remarks>
            
            <exception cref="T:System.ArgumentException">Invalid size of structuring element.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Dilatation.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage,Alt.Sketch.RectI)">
            <summary>
            Process the filter on the specified image.
            </summary>
            
            <param name="sourceData">Source image data.</param>
            <param name="destinationData">Destination image data.</param>
            <param name="rect">Image rectangle for processing by the filter.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Dilatation.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="T:AForge.Imaging.Filters.Erosion">
            <summary>
            Erosion operator from Mathematical Morphology.
            </summary>
            
            <remarks><para>The filter assigns minimum value of surrounding pixels to each pixel of
            the result image. Surrounding pixels, which should be processed, are specified by
            structuring element: 1 - to process the neighbor, -1 - to skip it.</para>
            
            <para>The filter especially useful for binary image processing, where it removes pixels, which
            are not surrounded by specified amount of neighbors. It gives ability to remove noisy pixels
            (stand-alone pixels) or shrink objects.</para>
            
            <para>For processing image with 3x3 structuring element, there are different optimizations
            available, like <see cref="!:Erosion3x3"/> and <see cref="!:BinaryErosion3x3"/>.</para>
            
            <para>The filter accepts 8 and 16 bpp grayscale images and 24 and 48 bpp
            color images for processing.</para>
            
            <para>Sample usage:</para>
            <code>
            // create filter
            Erosion filter = new Erosion( );
            // apply the filter
            filter.Apply( image );
            </code>
            
            <para><b>Initial image:</b></para>
            <img src="img/imaging/sample12.png" width="320" height="240"/>
            <para><b>Result image:</b></para>
            <img src="img/imaging/erosion.png" width="320" height="240"/>
            </remarks>
            
            <seealso cref="T:AForge.Imaging.Filters.Dilatation"/>
            <seealso cref="T:AForge.Imaging.Filters.Closing"/>
            <seealso cref="T:AForge.Imaging.Filters.Opening"/>
            <seealso cref="!:Erosion3x3"/>
            <seealso cref="!:BinaryErosion3x3"/>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Erosion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Erosion"/> class.
            </summary>
            
            <remarks><para>Initializes new instance of the <see cref="T:AForge.Imaging.Filters.Erosion"/> class using
            default structuring element - 3x3 structuring element with all elements equal to 1.
            </para></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Erosion.#ctor(System.Int16[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Erosion"/> class.
            </summary>
            
            <param name="se">Structuring element.</param>
            
            <remarks><para>Structuring elemement for the erosion morphological operator
            must be square matrix with odd size in the range of [3, 99].</para></remarks>
            
            <exception cref="T:System.ArgumentException">Invalid size of structuring element.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Erosion.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage,Alt.Sketch.RectI)">
            <summary>
            Process the filter on the specified image.
            </summary>
            
            <param name="sourceData">Source image data.</param>
            <param name="destinationData">Destination image data.</param>
            <param name="rect">Image rectangle for processing by the filter.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Erosion.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="T:AForge.Imaging.Filters.Opening">
             <summary>
             Opening operator from Mathematical Morphology.
             </summary>
             
             <remarks><para>Opening morphology operator equals to <see cref="T:AForge.Imaging.Filters.Erosion">erosion</see> followed
             by <see cref="T:AForge.Imaging.Filters.Dilatation">dilatation</see>.</para>
             
             <para>Applied to binary image, the filter may be used for removing small object keeping big objects
             unchanged. Since erosion is used first, it removes all small objects. Then dilatation restores big
             objects, which were not removed by erosion.</para>
             
             <para>See documentation to <see cref="T:AForge.Imaging.Filters.Erosion"/> and <see cref="T:AForge.Imaging.Filters.Dilatation"/> classes for more
             information and list of supported pixel formats.</para>
             
             <para>Sample usage:</para>
             <code>
             // create filter
             Opening filter = new Opening( );
             // apply the filter
             filter.Apply( image );
             </code>
             
             <para><b>Initial image:</b></para>
             <img src="img/imaging/sample12.png" width="320" height="240"/>
             <para><b>Result image:</b></para>
             <img src="img/imaging/opening.png" width="320" height="240"/>
             </remarks>
            
             <seealso cref="T:AForge.Imaging.Filters.Erosion"/>
             <seealso cref="T:AForge.Imaging.Filters.Dilatation"/>
             <seealso cref="T:AForge.Imaging.Filters.Closing"/>
             
        </member>
        <member name="M:AForge.Imaging.Filters.Opening.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Opening"/> class.
            </summary>
            
            <remarks><para>Initializes new instance of the <see cref="T:AForge.Imaging.Filters.Opening"/> class using
            default structuring element for both <see cref="T:AForge.Imaging.Filters.Erosion"/> and <see cref="T:AForge.Imaging.Filters.Dilatation"/>
            classes - 3x3 structuring element with all elements equal to 1.
            </para></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Opening.#ctor(System.Int16[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Opening"/> class.
            </summary>
            
            <param name="se">Structuring element.</param>
            
            <remarks><para>See documentation to <see cref="T:AForge.Imaging.Filters.Erosion"/> and <see cref="T:AForge.Imaging.Filters.Dilatation"/>
            classes for information about structuring element constraints.</para></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Opening.Apply(Alt.Sketch.Bitmap)">
             <summary>
             Apply filter to an image.
             </summary>
             
             <param name="image">Source image to apply filter to.</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source image.</returns>
             
             <remarks>The method keeps the source image unchanged and returns
             the result of image processing filter as new image.</remarks>
             
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Opening.Apply(Alt.Sketch.BitmapData)">
            <summary>
            Apply filter to an image.
            </summary>
            
            <param name="imageData">Source image to apply filter to.</param>
            
            <returns>Returns filter's result obtained by applying the filter to
            the source image.</returns>
            
            <remarks>The filter accepts bitmap data as input and returns the result
            of image processing filter as new image. The source image data are kept
            unchanged.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Opening.Apply(AForge.Imaging.UnmanagedImage)">
             <summary>
             Apply filter to an image in unmanaged memory.
             </summary>
             
             <param name="image">Source image in unmanaged memory to apply filter to.</param>
             
             <returns>Returns filter's result obtained by applying the filter to
             the source image.</returns>
             
             <remarks>The method keeps the source image unchanged and returns
             the result of image processing filter as new image.</remarks>
             
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Opening.Apply(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
             <summary>
             Apply filter to an image in unmanaged memory.
             </summary>
             
             <param name="sourceImage">Source image in unmanaged memory to apply filter to.</param>
             <param name="destinationImage">Destination image in unmanaged memory to put result into.</param>
             
             <remarks><para>The method keeps the source image unchanged and puts result of image processing
             into destination image.</para>
             
             <para><note>The destination image must have the same width and height as source image. Also
             destination image must have pixel format, which is expected by particular filter (see
             <see cref="P:AForge.Imaging.Filters.Opening.FormatTranslations"/> property for information about pixel format conversions).</note></para>
             </remarks>
             
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
             <exception cref="T:AForge.Imaging.InvalidImagePropertiesException">Incorrect destination pixel format.</exception>
             <exception cref="T:AForge.Imaging.InvalidImagePropertiesException">Destination image has wrong width and/or height.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Opening.ApplyInPlace(Alt.Sketch.Bitmap)">
            <summary>
            Apply filter to an image.
            </summary>
            
            <param name="image">Image to apply filter to.</param>
            
            <remarks>The method applies the filter directly to the provided source image.</remarks>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
             
        </member>
        <member name="M:AForge.Imaging.Filters.Opening.ApplyInPlace(Alt.Sketch.BitmapData)">
             <summary>
             Apply filter to an image.
             </summary>
             
             <param name="imageData">Image data to apply filter to.</param>
             
             <remarks>The method applies the filter directly to the provided source image.</remarks>
             
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Opening.ApplyInPlace(AForge.Imaging.UnmanagedImage)">
             <summary>
             Apply filter to an unmanaged image.
             </summary>
             
             <param name="image">Unmanaged image to apply filter to.</param>
             
             <remarks>The method applies the filter directly to the provided source unmanaged image.</remarks>
             
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Opening.ApplyInPlace(Alt.Sketch.Bitmap,Alt.Sketch.RectI)">
            <summary>
            Apply filter to an image or its part.
            </summary>
            
            <param name="image">Image to apply filter to.</param>
            <param name="rect">Image rectangle for processing by the filter.</param>
            
            <remarks>The method applies the filter directly to the provided source image.</remarks>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
             
        </member>
        <member name="M:AForge.Imaging.Filters.Opening.ApplyInPlace(Alt.Sketch.BitmapData,Alt.Sketch.RectI)">
             <summary>
             Apply filter to an image or its part.
             </summary>
             
             <param name="imageData">Image data to apply filter to.</param>
             <param name="rect">Image rectangle for processing by the filter.</param>
             
             <remarks>The method applies the filter directly to the provided source image.</remarks>
             
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Opening.ApplyInPlace(AForge.Imaging.UnmanagedImage,Alt.Sketch.RectI)">
            <summary>
            Apply filter to an unmanaged image or its part.
            </summary>
            
            <param name="image">Unmanaged image to apply filter to.</param>
            <param name="rect">Image rectangle for processing by the filter.</param>
            
            <remarks>The method applies the filter directly to the provided source image.</remarks>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Opening.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="T:AForge.Imaging.Filters.TopHat">
            <summary>
            Top-hat operator from Mathematical Morphology.
            </summary>
            
            <remarks><para>Top-hat morphological operator <see cref="T:AForge.Imaging.Filters.Subtract">subtracts</see>
            result of <see cref="T:AForge.Imaging.Filters.Opening">morphological opening</see> on the input image
            from the input image itself.</para>
            
             <para>Applied to binary image, the filter allows to get all those object (their parts)
             which were removed by <see cref="T:AForge.Imaging.Filters.Opening">opening</see> filter, but never restored.</para>
            
            <para>The filter accepts 8 and 16 bpp grayscale images and 24 and 48 bpp
            color images for processing.</para>
            
            <para>Sample usage:</para>
            <code>
            // create filter
            TopHat filter = new TopHat( );
            // apply the filter
            filter.Apply( image );
            </code>
            
            <para><b>Initial image:</b></para>
            <img src="img/imaging/sample12.png" width="320" height="240"/>
            <para><b>Result image:</b></para>
            <img src="img/imaging/tophat.png" width="320" height="240"/>
            </remarks>
            
            <see cref="T:AForge.Imaging.Filters.BottomHat"/>
            
        </member>
        <member name="M:AForge.Imaging.Filters.TopHat.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.TopHat"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.TopHat.#ctor(System.Int16[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.TopHat"/> class.
            </summary>
            
            <param name="se">Structuring element to pass to <see cref="T:AForge.Imaging.Filters.Opening"/> operator.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.TopHat.ProcessFilter(AForge.Imaging.UnmanagedImage)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.TopHat.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="T:AForge.Imaging.Filters.AdditiveNoise">
            <summary>
            Additive noise filter.
            </summary>
            
            <remarks><para>The filter adds random value to each pixel of the source image.
            The distribution of random values can be specified by <see cref="P:AForge.Imaging.Filters.AdditiveNoise.Generator">random generator</see>.
            </para>
            
            <para>The filter accepts 8 bpp grayscale images and 24 bpp
            color images for processing.</para>
            
            <para>Sample usage:</para>
            <code>
            // create random generator
            IRandomNumberGenerator generator = new UniformGenerator( new Range( -50, 50 ) );
            // create filter
            AdditiveNoise filter = new AdditiveNoise( generator );
            // apply the filter
            filter.ApplyInPlace( image );
            </code>
            
            <para><b>Initial image:</b></para>
            <img src="img/imaging/sample1.jpg" width="480" height="361"/>
            <para><b>Result image:</b></para>
            <img src="img/imaging/additive_noise.jpg" width="480" height="361"/>
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.AdditiveNoise.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.AdditiveNoise"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.AdditiveNoise.#ctor(AForge.Math.Random.IRandomNumberGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.AdditiveNoise"/> class.
            </summary>
            
            <param name="generator">Random number genertor used to add noise.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.AdditiveNoise.ProcessFilter(AForge.Imaging.UnmanagedImage,Alt.Sketch.RectI)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
             <param name="rect">Image rectangle for processing by the filter.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.AdditiveNoise.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.AdditiveNoise.Generator">
            <summary>
            Random number genertor used to add noise.
            </summary>
            
            <remarks>Default generator is uniform generator in the range of (-10, 10).</remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.SaltAndPepperNoise">
            <summary>
            Salt and pepper noise.
            </summary>
            
            <remarks><para>The filter adds random salt and pepper noise - sets
            maximum or minimum values to randomly selected pixels.</para>
            
            <para>The filter accepts 8 bpp grayscale images and 24/32 bpp
            color images for processing.</para>
            
            <para>Sample usage:</para>
            <code>
            // create filter
            SaltAndPepperNoise filter = new SaltAndPepperNoise( 10 );
            // apply the filter
            filter.ApplyInPlace( image );
            </code>
            
            <para><b>Initial image:</b></para>
            <img src="img/imaging/sample1.jpg" width="480" height="361" />
            <para><b>Result image:</b></para>
            <img src="img/imaging/salt_noise.jpg" width="480" height="361" />
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.SaltAndPepperNoise.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.SaltAndPepperNoise"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.SaltAndPepperNoise.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.SaltAndPepperNoise"/> class.
            </summary>
            
            <param name="noiseAmount">Amount of noise to generate in percents, [0, 100].</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.SaltAndPepperNoise.ProcessFilter(AForge.Imaging.UnmanagedImage,Alt.Sketch.RectI)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
             <param name="rect">Image rectangle for processing by the filter.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.SaltAndPepperNoise.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.SaltAndPepperNoise.NoiseAmount">
            <summary>
            Amount of noise to generate in percents, [0, 100].
            </summary>
            
        </member>
        <member name="T:AForge.Imaging.Filters.BlobsFiltering">
             <summary>
             Blobs filtering by size.
             </summary>
             
             <remarks><para>The filter performs filtering of blobs by their size in the specified
             source image - all blobs, which are smaller or bigger then specified limits, are
             removed from the image.</para>
             
             <para><note>The image processing filter treats all none black pixels as objects'
             pixels and all black pixel as background.</note></para>
             
             <para>The filter accepts 8 bpp grayscale images and 24/32
             color images for processing.</para>
             
             <para>Sample usage:</para>
             <code>
             // create filter
             BlobsFiltering filter = new BlobsFiltering( );
             // configure filter
             filter.CoupledSizeFiltering = true;
             filter.MinWidth  = 70;
             filter.MinHeight = 70;
             // apply the filter
             filter.ApplyInPlace( image );
             </code>
             
             <para><b>Initial image:</b></para>
             <img src="img/imaging/sample2.jpg" width="320" height="240"/>
             <para><b>Result image:</b></para>
             <img src="img/imaging/blobs_filtering.jpg" width="320" height="240"/>
             </remarks>
             
             <seealso cref="T:AForge.Imaging.BlobCounter"/>
             <seealso cref="T:AForge.Imaging.BlobCounterBase"/>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BlobsFiltering.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.BlobsFiltering"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BlobsFiltering.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.BlobsFiltering"/> class.
            </summary>
            
            <param name="minWidth">Minimum allowed width of blob.</param>
            <param name="minHeight">Minimum allowed height of blob.</param>
            <param name="maxWidth">Maximum allowed width of blob.</param>
            <param name="maxHeight">Maximum allowed height of blob.</param>
            
            <remarks>This constructor creates an instance of <see cref="T:AForge.Imaging.Filters.BlobsFiltering"/> class
            with <see cref="P:AForge.Imaging.Filters.BlobsFiltering.CoupledSizeFiltering"/> property set to <b>false</b>.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BlobsFiltering.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.BlobsFiltering"/> class.
            </summary>
            
            <param name="minWidth">Minimum allowed width of blob.</param>
            <param name="minHeight">Minimum allowed height of blob.</param>
            <param name="maxWidth">Maximum allowed width of blob.</param>
            <param name="maxHeight">Maximum allowed height of blob.</param>
            <param name="coupledSizeFiltering">Specifies if size filetering should be coupled or not.</param>
            
            <remarks><para>For information about coupled filtering mode see documentation for
            <see cref="P:AForge.Imaging.BlobCounterBase.CoupledSizeFiltering"/> property of <see cref="T:AForge.Imaging.BlobCounterBase"/>
            class.</para></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BlobsFiltering.#ctor(AForge.Imaging.IBlobsFilter)">
             <summary>
             Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.BlobsFiltering"/> class.
             </summary>
             
             <param name="blobsFilter">Custom blobs' filtering routine to use
             (see <see cref="P:AForge.Imaging.BlobCounterBase.BlobsFilter"/>).</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BlobsFiltering.ProcessFilter(AForge.Imaging.UnmanagedImage)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.BlobsFiltering.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.BlobsFiltering.CoupledSizeFiltering">
            <summary>
            Specifies if size filetering should be coupled or not.
            </summary>
            
            <remarks><para>See documentation for <see cref="P:AForge.Imaging.BlobCounterBase.CoupledSizeFiltering"/> property
            of <see cref="T:AForge.Imaging.BlobCounterBase"/> class for more information.</para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.BlobsFiltering.MinWidth">
            <summary>
            Minimum allowed width of blob.
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.Filters.BlobsFiltering.MinHeight">
            <summary>
            Minimum allowed height of blob.
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.Filters.BlobsFiltering.MaxWidth">
            <summary>
            Maximum allowed width of blob.
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.Filters.BlobsFiltering.MaxHeight">
            <summary>
            Maximum allowed height of blob.
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.Filters.BlobsFiltering.BlobsFilter">
            <summary>
            Custom blobs' filter to use.
            </summary>
            
            <remarks><para>See <see cref="P:AForge.Imaging.BlobCounterBase.BlobsFilter"/> for information
            about custom blobs' filtering routine.</para></remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.CanvasCrop">
            <summary>
            Fill areas outiside of specified region.
            </summary>
            
            <remarks>
            <para>The filter fills areas outside of specified region using the specified color.</para>
            
            <para>The filter accepts 8bpp grayscale and 24/32 bpp color images for processing.</para>
            
            <para>Sample usage:</para>
            <code>
            // create filter
            CanvasCrop filter = new CanvasCrop( new RectI(
                                    5, 5, image.Width - 10, image.Height - 10 ), Color.Red );
            // apply the filter
            filter.ApplyInPlace( image );
            </code>
            
            <para><b>Initial image:</b></para>
            <img src="img/imaging/sample1.jpg" width="480" height="361"/>
            <para><b>Result image:</b></para>
            <img src="img/imaging/canvas_crop.jpg" width="480" height="361"/>
            </remarks>
            
            <seealso cref="T:AForge.Imaging.Filters.CanvasFill"/>
            
        </member>
        <member name="M:AForge.Imaging.Filters.CanvasCrop.#ctor(Alt.Sketch.RectI)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.CanvasCrop"/> class.
            </summary>
            
            <param name="region">Region to keep.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.CanvasCrop.#ctor(Alt.Sketch.RectI,Alt.Sketch.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.CanvasCrop"/> class.
            </summary>
            
            <param name="region">Region to keep.</param>
            <param name="fillColorRGB">RGB color to use for filling areas outside of specified region in color images.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.CanvasCrop.#ctor(Alt.Sketch.RectI,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.CanvasCrop"/> class.
            </summary>
            
            <param name="region">Region to keep.</param>
            <param name="fillColorGray">Gray color to use for filling areas outside of specified region in grayscale images.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.CanvasCrop.#ctor(Alt.Sketch.RectI,Alt.Sketch.Color,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.CanvasCrop"/> class.
            </summary>
            
            <param name="region">Region to keep.</param>
            <param name="fillColorRGB">RGB color to use for filling areas outside of specified region in color images.</param>
            <param name="fillColorGray">Gray color to use for filling areas outside of specified region in grayscale images.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.CanvasCrop.ProcessFilter(AForge.Imaging.UnmanagedImage)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.CanvasCrop.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
            
            <remarks><para>See <see cref="P:AForge.Imaging.Filters.IFilterInformation.FormatTranslations"/>
            documentation for additional information.</para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.CanvasCrop.FillColorRGB">
            <summary>
            RGB fill color.
            </summary>
            
            <remarks><para>The color is used to fill areas out of specified region in color images.</para>
            
            <para>Default value is set to white - RGB(255, 255, 255).</para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.CanvasCrop.FillColorGray">
            <summary>
            Gray fill color.
            </summary>
            
            <remarks><para>The color is used to fill areas out of specified region in grayscale images.</para>
            
            <para>Default value is set to white - 255.</para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.CanvasCrop.Region">
            <summary>
            Region to keep.
            </summary>
            
            <remarks>Pixels inside of the specified region will keep their values, but
            pixels outside of the region will be filled with specified color.</remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.CanvasFill">
            <summary>
            Fill areas iniside of the specified region.
            </summary>
            
            <remarks>
            <para>The filter fills areas inside of specified region using the specified color.</para>
            
            <para>The filter accepts 8bpp grayscale and 24/32 bpp color images for processing.</para>
            
            <para>Sample usage:</para>
            <code>
            // create filter
            CanvasFill filter = new CanvasFill( new RectI(
                                    5, 5, image.Width - 10, image.Height - 10 ), Color.Red );
            // apply the filter
            filter.ApplyInPlace( image );
            </code>
            </remarks>
            
            <seealso cref="T:AForge.Imaging.Filters.CanvasCrop"/>
            
        </member>
        <member name="M:AForge.Imaging.Filters.CanvasFill.#ctor(Alt.Sketch.RectI)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.CanvasFill"/> class.
            </summary>
            
            <param name="region">Region to fill.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.CanvasFill.#ctor(Alt.Sketch.RectI,Alt.Sketch.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.CanvasFill"/> class.
            </summary>
            
            <param name="region">Region to fill.</param>
            <param name="fillColorRGB">RGB color to use for filling areas inside of specified region in color images.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.CanvasFill.#ctor(Alt.Sketch.RectI,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.CanvasFill"/> class.
            </summary>
            
            <param name="region">Region to fill.</param>
            <param name="fillColorGray">Gray color to use for filling areas inside of specified region in grayscale images.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.CanvasFill.#ctor(Alt.Sketch.RectI,Alt.Sketch.Color,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.CanvasFill"/> class.
            </summary>
            
            <param name="region">Region to fill.</param>
            <param name="fillColorRGB">RGB color to use for filling areas inside of specified region in color images.</param>
            <param name="fillColorGray">Gray color to use for filling areas inside of specified region in grayscale images.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.CanvasFill.ProcessFilter(AForge.Imaging.UnmanagedImage)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.CanvasFill.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
            
            <remarks><para>See <see cref="P:AForge.Imaging.Filters.IFilterInformation.FormatTranslations"/>
            documentation for additional information.</para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.CanvasFill.FillColorRGB">
            <summary>
            RGB fill color.
            </summary>
            
            <remarks><para>The color is used to fill areas out of specified region in color images.</para>
            
            <para>Default value is set to white - RGB(255, 255, 255).</para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.CanvasFill.FillColorGray">
            <summary>
            Gray fill color.
            </summary>
            
            <remarks><para>The color is used to fill areas out of specified region in grayscale images.</para>
            
            <para>Default value is set to white - 255.</para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.CanvasFill.Region">
            <summary>
            Region to fill.
            </summary>
            
            <remarks>Pixels inside of the specified region will be filled with specified color.</remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.CanvasMove">
            <summary>
            Move canvas to the specified point.
            </summary>
            
            <remarks>
            <para>The filter moves canvas to the specified area filling unused empty areas with specified color.</para>
            
            <para>The filter accepts 8/16 bpp grayscale images and 24/32/48/64 bpp color image
            for processing.</para>
            
            <para>Sample usage:</para>
            <code>
            // create filter
            CanvasMove filter = new CanvasMove( new IntPoint( -50, -50 ), Color.Green );
            // apply the filter
            filter.ApplyInPlace( image );
            </code>
            
            <para><b>Initial image:</b></para>
            <img src="img/imaging/sample1.jpg" width="480" height="361" />
            <para><b>Result image:</b></para>
            <img src="img/imaging/canvas_move.jpg" width="480" height="361" />
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.CanvasMove.#ctor(AForge.IntPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.CanvasMove"/> class.
            </summary>
            
            <param name="movePoint">Point to move the canvas to.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.CanvasMove.#ctor(AForge.IntPoint,Alt.Sketch.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.CanvasMove"/> class.
            </summary>
            
            <param name="movePoint">Point to move the canvas.</param>
            <param name="fillColorRGB">RGB color to use for filling areas empty areas in color images.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.CanvasMove.#ctor(AForge.IntPoint,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.CanvasMove"/> class.
            </summary>
            
            <param name="movePoint">Point to move the canvas.</param>
            <param name="fillColorGray">Gray color to use for filling empty areas in grayscale images.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.CanvasMove.#ctor(AForge.IntPoint,Alt.Sketch.Color,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.CanvasMove"/> class.
            </summary>
            
            <param name="movePoint">Point to move the canvas.</param>
            <param name="fillColorRGB">RGB color to use for filling areas empty areas in color images.</param>
            <param name="fillColorGray">Gray color to use for filling empty areas in grayscale images.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.CanvasMove.ProcessFilter(AForge.Imaging.UnmanagedImage)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.CanvasMove.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
            
            <remarks><para>See <see cref="P:AForge.Imaging.Filters.IFilterInformation.FormatTranslations"/>
            documentation for additional information.</para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.CanvasMove.FillColorRGB">
            <summary>
            RGB fill color.
            </summary>
            
            <remarks><para>The color is used to fill empty areas in color images.</para>
            
            <para>Default value is set to white - ARGB(255, 255, 255, 255).</para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.CanvasMove.FillColorGray">
             <summary>
             Gray fill color.
             </summary>
             
             <remarks><para>The color is used to fill empty areas in grayscale images.</para>
             
             <para>Default value is set to white - 255.</para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.CanvasMove.MovePoint">
            <summary>
            Point to move the canvas to.
            </summary>
            
        </member>
        <member name="T:AForge.Imaging.Filters.ConnectedComponentsLabeling">
             <summary>
             Connected components labeling.
             </summary>
             
             <remarks><para>The filter performs labeling of objects in the source image. It colors
             each separate object using different color. The image processing filter treats all none
             black pixels as objects' pixels and all black pixel as background.</para>
             
             <para>The filter accepts 8 bpp grayscale images and 24/32 bpp color images and produces
             24 bpp RGB image.</para>
            
             <para>Sample usage:</para>
             <code>
             // create filter
             ConnectedComponentsLabeling filter = new ConnectedComponentsLabeling( );
             // apply the filter
             Bitmap newImage = filter.Apply( image );
             // check objects count
             int objectCount = filter.ObjectCount;
             </code>
             
             <para><b>Initial image:</b></para>
             <img src="img/imaging/sample2.jpg" width="320" height="240" />
             <para><b>Result image:</b></para>
             <img src="img/imaging/labeling.jpg" width="320" height="240" />
             </remarks>
             
        </member>
        <member name="M:AForge.Imaging.Filters.ConnectedComponentsLabeling.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.ConnectedComponentsLabeling"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ConnectedComponentsLabeling.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
            <summary>
            Process the filter on the specified image.
            </summary>
            
            <param name="sourceData">Source image data.</param>
            <param name="destinationData">Destination image data.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.ConnectedComponentsLabeling.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.ConnectedComponentsLabeling.BlobCounter">
            <summary>
            Blob counter used to locate separate blobs.
            </summary>
            
            <remarks><para>The property allows to set blob counter to use for blobs' localization.</para>
            
            <para>Default value is set to <see cref="P:AForge.Imaging.Filters.ConnectedComponentsLabeling.BlobCounter"/>.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.ConnectedComponentsLabeling.ColorTable">
            <summary>
            Colors used to color the binary image.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.ConnectedComponentsLabeling.FilterBlobs">
            <summary>
            Specifies if blobs should be filtered.
            </summary>
            
            <remarks><para>See documentation for <see cref="P:AForge.Imaging.BlobCounterBase.FilterBlobs"/> property
            of <see cref="T:AForge.Imaging.BlobCounterBase"/> class for more information.</para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.ConnectedComponentsLabeling.CoupledSizeFiltering">
            <summary>
            Specifies if size filetering should be coupled or not.
            </summary>
            
            <remarks><para>See documentation for <see cref="P:AForge.Imaging.BlobCounterBase.CoupledSizeFiltering"/> property
            of <see cref="T:AForge.Imaging.BlobCounterBase"/> class for more information.</para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.ConnectedComponentsLabeling.MinWidth">
            <summary>
            Minimum allowed width of blob.
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.Filters.ConnectedComponentsLabeling.MinHeight">
            <summary>
            Minimum allowed height of blob.
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.Filters.ConnectedComponentsLabeling.MaxWidth">
            <summary>
            Maximum allowed width of blob.
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.Filters.ConnectedComponentsLabeling.MaxHeight">
            <summary>
            Maximum allowed height of blob.
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.Filters.ConnectedComponentsLabeling.ObjectCount">
            <summary>
            Objects count.
            </summary>
            
            <remarks>The amount of objects found in the last processed image.</remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.CornersMarker">
            <summary>
            Filter to mark (highlight) corners of objects.
            </summary>
            
            <remarks>
            <para>The filter highlights corners of objects on the image using provided corners
            detection algorithm.</para>
            
            <para>The filter accepts 8 bpp grayscale and 24/32 color images for processing.</para>
            
            <para>Sample usage:</para>
            <code>
            // create corner detector's instance
            SusanCornersDetector scd = new SusanCornersDetector( );
            // create corner maker filter
            CornersMarker filter = new CornersMarker( scd, Color.Red );
            // apply the filter
            filter.ApplyInPlace( image );
            </code>
            
            <para><b>Initial image:</b></para>
            <img src="img/imaging/sample2.jpg" width="320" height="240" />
            <para><b>Result image:</b></para>
            <img src="img/imaging/susan_corners.png" width="320" height="240" />
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.CornersMarker.#ctor(AForge.Imaging.ICornersDetector)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.CornersMarker"/> class.
            </summary>
            
            <param name="detector">Interface of corners' detection algorithm.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.CornersMarker.#ctor(AForge.Imaging.ICornersDetector,Alt.Sketch.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.CornersMarker"/> class.
            </summary>
            
            <param name="detector">Interface of corners' detection algorithm.</param>
            <param name="markerColor">Marker's color used to mark corner.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.CornersMarker.ProcessFilter(AForge.Imaging.UnmanagedImage)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.CornersMarker.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.CornersMarker.MarkerColor">
            <summary>
            Color used to mark corners.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.CornersMarker.Detector">
            <summary>
            Interface of corners' detection algorithm used to detect corners.
            </summary>
        </member>
        <member name="T:AForge.Imaging.Filters.ExtractBiggestBlob">
            <summary>
            Extract the biggest blob from image.
            </summary>
            
            <remarks><para>The filter locates the biggest blob in the source image and extracts it.
            The filter also can use the source image for the biggest blob's location only, but extract it from
            another image, which is set using <see cref="P:AForge.Imaging.Filters.ExtractBiggestBlob.OriginalImage"/> property. The original image 
            usually is the source of the processed image.</para>
            
            <para>The filter accepts 8 bpp grayscale images and 24/32 color images for processing as source image passed to
            <see cref="M:AForge.Imaging.Filters.ExtractBiggestBlob.Apply(Alt.Sketch.Bitmap)"/> method and also for the <see cref="P:AForge.Imaging.Filters.ExtractBiggestBlob.OriginalImage"/>.</para>
            
            <para>Sample usage:</para>
            <code>
            // create filter
            ExtractBiggestBlob filter = new ExtractBiggestBlob( );
            // apply the filter
            Bitmap biggestBlobsImage = filter.Apply( image );
            </code>
            
            <para><b>Initial image:</b></para>
            <img src="img/imaging/sample2.jpg" width="320" height="240"/>
            <para><b>Result image:</b></para>
            <img src="img/imaging/biggest_blob.jpg" width="141" height="226"/>
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ExtractBiggestBlob.Apply(Alt.Sketch.Bitmap)">
             <summary>
             Apply filter to an image.
             </summary>
             
             <param name="image">Source image to get biggest blob from.</param>
             
             <returns>Returns image of the biggest blob.</returns>
             
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the original image.</exception>
             <exception cref="T:AForge.Imaging.InvalidImagePropertiesException">Source and original images must have the same size.</exception>
             <exception cref="T:System.ArgumentException">The source image does not contain any blobs.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ExtractBiggestBlob.Apply(Alt.Sketch.BitmapData)">
             <summary>
             Apply filter to an image.
             </summary>
             
             <param name="imageData">Source image to get biggest blob from.</param>
             
             <returns>Returns image of the biggest blob.</returns>
             
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the original image.</exception>
             <exception cref="T:AForge.Imaging.InvalidImagePropertiesException">Source and original images must have the same size.</exception>
             <exception cref="T:System.ArgumentException">The source image does not contain any blobs.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ExtractBiggestBlob.Apply(AForge.Imaging.UnmanagedImage)">
            <summary>
            Apply filter to an image (not implemented).
            </summary>
            
            <param name="image">Image in unmanaged memory.</param>
            
            <returns>Returns filter's result obtained by applying the filter to
            the source image.</returns>
            
            <exception cref="T:System.NotImplementedException">The method is not implemented.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ExtractBiggestBlob.Apply(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
            <summary>
            Apply filter to an image (not implemented).
            </summary>
            
            <param name="sourceImage">Source image to be processed.</param>
            <param name="destinationImage">Destination image to store filter's result.</param>
            
            <exception cref="T:System.NotImplementedException">The method is not implemented.</exception>
            
        </member>
        <member name="P:AForge.Imaging.Filters.ExtractBiggestBlob.BlobPosition">
            <summary>
            Position of the extracted blob.
            </summary>
            
            <remarks><para>After applying the filter this property keeps position of the extracted
            blob in the source image.</para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.ExtractBiggestBlob.FormatTranslations">
             <summary>
             Format translations dictionary.
             </summary>
             
             <remarks><para>The dictionary defines, which pixel formats are supported for
             source images and which pixel format will be used for resulting image.
             </para>
             
             <para>See <see cref="P:AForge.Imaging.Filters.IFilterInformation.FormatTranslations"/> for more information.</para>
             </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.ExtractBiggestBlob.OriginalImage">
            <summary>
            Original image, which is the source of the processed image where the biggest blob is searched for.
            </summary>
            
            <remarks><para>The property may be set to <see langword="null"/>. In this case the biggest blob
            is extracted from the image, which is passed to <see cref="M:AForge.Imaging.Filters.ExtractBiggestBlob.Apply(Alt.Sketch.Bitmap)"/> image.</para>
            </remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.ImageWarp">
             <summary>
             Image warp effect filter.
             </summary>
             
             <remarks><para>The image processing filter implements a warping filter, which
             sets pixels in destination image to values from source image taken with specified offset
             (see <see cref="P:AForge.Imaging.Filters.ImageWarp.WarpMap"/>).
             </para>
             
             <para>The filter accepts 8 bpp grayscale images and 24/32
             color images for processing.</para>
             
             <para>Sample usage:</para>
             <code>
             // build warp map
             int width  = image.Width;
             int height = image.Height;
             
             IntPoint[,] warpMap = new IntPoint[height, width];
            
             int size = 8;
             int maxOffset = -size + 1;
            
             for ( int y = 0; y &lt; height; y++ )
             {
                 for ( int x = 0; x &lt; width; x++ )
                 {
                     int dx = ( x / size ) * size - x;
                     int dy = ( y / size ) * size - y;
            
                     if ( dx + dy &lt;= maxOffset )
                     {
                         dx = ( x / size + 1 ) * size - 1 - x;
                     }
            
                     warpMap[y, x] = new IntPoint( dx, dy );
                 }
             }
             // create filter
             ImageWarp filter = new ImageWarp( warpMap );
             // apply the filter
             Bitmap newImage = filter.Apply( image );
             </code>
             
             <para><b>Initial image:</b></para>
             <img src="img/imaging/sample1.jpg" width="480" height="361"/>
             <para><b>Result image:</b></para>
             <img src="img/imaging/image_warp.png" width="480" height="361"/>
             </remarks>
             
        </member>
        <member name="M:AForge.Imaging.Filters.ImageWarp.#ctor(AForge.IntPoint[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.ImageWarp"/> class.
            </summary>
            
            <param name="warpMap">Map used for warping images (see <see cref="P:AForge.Imaging.Filters.ImageWarp.WarpMap"/>).</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ImageWarp.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
            <summary>
            Process the filter on the specified image.
            </summary>
            
            <param name="source">Source image data.</param>
            <param name="destination">Destination image data.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.ImageWarp.WarpMap">
            <summary>
            Map used for warping images.
            </summary>
            
            <remarks><para>The property sets displacement map used for warping images.
            The map sets offsets of pixels in source image, which are used to set values in destination
            image. In other words, each pixel in destination image is set to the same value
            as pixel in source image with corresponding offset (coordinates of pixel in source image
            are calculated as sum of destination coordinate and corresponding value from warp map).
            </para>
            
            <para><note>The map array is accessed using [y, x] indexing, i.e.
            first dimension in the map array corresponds to Y axis of image.</note></para>
            
            <para><note>If the map is smaller or bigger than the image to process, then only minimum
            overlapping area of the image is processed. This allows to prepare single big map and reuse
            it for a set of images for creating similar effects.</note></para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.ImageWarp.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
            
            <remarks><para>See <see cref="P:AForge.Imaging.Filters.IFilterInformation.FormatTranslations"/>
            documentation for additional information.</para></remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.Jitter">
            <summary>
            Jitter filter.
            </summary>
            
            <remarks><para>The filter moves each pixel of a source image in
            random direction within a window of specified <see cref="P:AForge.Imaging.Filters.Jitter.Radius">radius</see>.</para>
            
            <para>The filter accepts 8 bpp grayscale images and 24/32
            color images for processing.</para>
            
            <para>Sample usage:</para>
            <code>
            // create filter
            Jitter filter = new Jitter( 4 );
            // apply the filter
            filter.ApplyInPlace( image );
            </code>
            
            <para><b>Initial image:</b></para>
            <img src="img/imaging/sample1.jpg" width="480" height="361"/>
            <para><b>Result image:</b></para>
            <img src="img/imaging/jitter.jpg" width="480" height="361"/>
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Jitter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Jitter"/> class.
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.Jitter.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Jitter"/> class.
            </summary>
            
            <param name="radius">Jittering radius.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Jitter.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage,Alt.Sketch.RectI)">
            <summary>
            Process the filter on the specified image.
            </summary>
            
            <param name="source">Source image data.</param>
            <param name="destination">Destination image data.</param>
            <param name="rect">Image rectangle for processing by the filter.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Jitter.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
            
            <remarks><para>See <see cref="P:AForge.Imaging.Filters.IFilterInformation.FormatTranslations"/>
            documentation for additional information.</para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Jitter.Radius">
            <summary>
            Jittering radius, [1, 10]
            </summary>
            
            <remarks><para>Determines radius in which pixels can move.</para>
            
            <para>Default value is set to <b>2</b>.</para>
            </remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.Mirror">
            <summary>
            Mirroring filter.
            </summary>
            
            <remarks><para>The filter mirrors image around X and/or Y axis (horizontal and vertical
            mirroring).</para>
            
            <para>The filter accepts 8 bpp grayscale images and 24 bpp
            color images for processing.</para>
            
            <para>Sample usage:</para>
            <code>
            // create filter
            Mirror filter = new Mirror( false, true );
            // apply the filter
            filter.ApplyInPlace( image );
            </code>
            
            <para><b>Initial image:</b></para>
            <img src="img/imaging/sample1.jpg" width="480" height="361" />
            <para><b>Result image:</b></para>
            <img src="img/imaging/mirror.jpg" width="480" height="361" />
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Mirror.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Mirror"/> class.
            </summary>
            
            <param name="mirrorX">Specifies if mirroring should be done for X axis.</param>
            <param name="mirrorY">Specifies if mirroring should be done for Y axis</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Mirror.ProcessFilter(AForge.Imaging.UnmanagedImage,Alt.Sketch.RectI)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
             <param name="rect">Image rectangle for processing by the filter.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Mirror.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.Mirror.MirrorX">
            <summary>
            Specifies if mirroring should be done for X axis (horizontal mirroring).
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Mirror.MirrorY">
            <summary>
            Specifies if mirroring should be done for Y axis (vertical mirroring).
            </summary>
            
        </member>
        <member name="T:AForge.Imaging.Filters.OilPainting">
            <summary>
            Oil painting filter.
            </summary>
            
            <remarks><para>Processing source image the filter changes each pixels' value
            to the value of pixel with the most frequent intensity within window of the
            <see cref="P:AForge.Imaging.Filters.OilPainting.BrushSize">specified size</see>. Going through the window the filters
            finds which intensity of pixels is the most frequent. Then it updates value
            of the pixel in the center of the window to the value with the most frequent
            intensity. The update procedure creates the effect of oil painting.</para>
            
            <para>The filter accepts 8 bpp grayscale images and 24/32
            color images for processing.</para>
            
            <para>Sample usage:</para>
            <code>
            // create filter
            OilPainting filter = new OilPainting( 15 );
            // apply the filter
            filter.ApplyInPlace( image );
            </code>
            
            <para><b>Initial image:</b></para>
            <img src="img/imaging/sample1.jpg" width="480" height="361"/>
            <para><b>Result image:</b></para>
            <img src="img/imaging/oil_painting.jpg" width="480" height="361"/>
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.OilPainting.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.OilPainting"/> class.
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.OilPainting.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.OilPainting"/> class.
            </summary>
            
            <param name="brushSize">Brush size.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.OilPainting.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage,Alt.Sketch.RectI)">
            <summary>
            Process the filter on the specified image.
            </summary>
            
            <param name="source">Source image data.</param>
            <param name="destination">Destination image data.</param>
            <param name="rect">Image rectangle for processing by the filter.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.OilPainting.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
            
            <remarks><para>See <see cref="P:AForge.Imaging.Filters.IFilterInformation.FormatTranslations"/>
            documentation for additional information.</para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.OilPainting.BrushSize">
            <summary>
            Brush size, [3, 21].
            </summary>
            
            <remarks><para>Window size to search for most frequent pixels' intensity.</para>
            
            <para>Default value is set to <b>5</b>.</para></remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.Pixellate">
            <summary>
            Pixellate filter.
            </summary>
            
            <remarks><para>The filter processes an image creating the effect of an image with larger
            pixels - pixellated image. The effect is achieved by filling image's rectangles of the
            specified size by the color, which is mean color value for the corresponding rectangle.
            The size of rectangles to process is set by <see cref="P:AForge.Imaging.Filters.Pixellate.PixelWidth"/> and <see cref="P:AForge.Imaging.Filters.Pixellate.PixelHeight"/>
            properties.</para>
            
            <para>The filter accepts 8 bpp grayscale images and 24 bpp
            color images for processing.</para>
            
            <para>Sample usage:</para>
            <code>
            // create filter
            Pixellate filter = new Pixellate( );
            // apply the filter
            filter.ApplyInPlace( image );
            </code>
            
            <para><b>Initial image:</b></para>
            <img src="img/imaging/sample1.jpg" width="480" height="361"/>
            <para><b>Result image:</b></para>
            <img src="img/imaging/pixellate.jpg" width="480" height="361"/>
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Pixellate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Pixellate"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Pixellate.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Pixellate"/> class.
            </summary>
            
            <param name="pixelSize">Pixel size.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Pixellate.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Pixellate"/> class.
            </summary>
            
            <param name="pixelWidth">Pixel width.</param>
            <param name="pixelHeight">Pixel height.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Pixellate.ProcessFilter(AForge.Imaging.UnmanagedImage,Alt.Sketch.RectI)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
             <param name="rect">Image rectangle for processing by the filter.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Pixellate.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.Pixellate.PixelWidth">
            <summary>
            Pixel width, [2, 32].
            </summary>
            
            <remarks>Default value is set to <b>8</b>.</remarks>
            
            <seealso cref="P:AForge.Imaging.Filters.Pixellate.PixelSize"/>
            <seealso cref="P:AForge.Imaging.Filters.Pixellate.PixelHeight"/>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Pixellate.PixelHeight">
            <summary>
            Pixel height, [2, 32].
            </summary>
            
            <remarks>Default value is set to <b>8</b>.</remarks>
            
            <seealso cref="P:AForge.Imaging.Filters.Pixellate.PixelSize"/>
            <seealso cref="P:AForge.Imaging.Filters.Pixellate.PixelWidth"/>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Pixellate.PixelSize">
            <summary>
            Pixel size, [2, 32].
            </summary>
            
            <remarks>The property is used to set both <see cref="P:AForge.Imaging.Filters.Pixellate.PixelWidth"/> and
            <see cref="P:AForge.Imaging.Filters.Pixellate.PixelHeight"/> simultaneously.</remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.TexturedFilter">
            <summary>
            Textured filter - filter an image using texture.
            </summary>
            
            <remarks><para>The filter is similar to <see cref="T:AForge.Imaging.Filters.TexturedMerge"/> filter in its
            nature, but instead of working with source image and overly, it uses provided
            filters to create images to merge (see <see cref="P:AForge.Imaging.Filters.TexturedFilter.Filter1"/> and <see cref="P:AForge.Imaging.Filters.TexturedFilter.Filter2"/>
            properties). In addition, it uses a bit more complex formula for calculation
            of destination pixel's value, which gives greater amount of flexibility:<br/>
            <b>dst = <see cref="P:AForge.Imaging.Filters.TexturedFilter.FilterLevel"/> * ( src1 * textureValue + src2 * ( 1.0 - textureValue ) ) + <see cref="P:AForge.Imaging.Filters.TexturedFilter.PreserveLevel"/> * src2</b>,
            where <b>src1</b> is value of pixel from the image produced by <see cref="P:AForge.Imaging.Filters.TexturedFilter.Filter1"/>,
            <b>src2</b> is value of pixel from the image produced by <see cref="P:AForge.Imaging.Filters.TexturedFilter.Filter2"/>,
            <b>dst</b> is value of pixel in a destination image and <b>textureValue</b> is corresponding value
            from provided texture (see <see cref="P:AForge.Imaging.Filters.TexturedFilter.TextureGenerator"/> or <see cref="P:AForge.Imaging.Filters.TexturedFilter.Texture"/>).</para>
            
            <para><note>It is possible to set <see cref="P:AForge.Imaging.Filters.TexturedFilter.Filter2"/> to <see langword="null"/>. In this case
            original source image will be used instead of result produced by the second filter.</note></para>
            
            <para>The filter 24 bpp color images for processing.</para>
            
            <para>Sample usage #1:</para>
            <code>
            // create filter
            TexturedFilter filter = new TexturedFilter( new CloudsTexture( ),
                new HueModifier( 50 ) );
            // apply the filter
            Bitmap newImage = filter.Apply( image );
            </code>
            
            <para>Sample usage #2:</para>
            <code>
            // create filter
            TexturedFilter filter = new TexturedFilter( new CloudsTexture( ),
                new GrayscaleBT709( ), new Sepia( ) );
            // apply the filter
            Bitmap newImage = filter.Apply( image );
            </code>
            
            <para><b>Initial image:</b></para>
            <img src="img/imaging/sample1.jpg" width="480" height="361"/>
            <para><b>Result image #1:</b></para>
            <img src="img/imaging/textured_filter1.jpg" width="480" height="361"/>
            <para><b>Result image #2:</b></para>
            <img src="img/imaging/textured_filter2.jpg" width="480" height="361"/>
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.TexturedFilter.#ctor(System.Single[0:,0:],AForge.Imaging.Filters.IFilter)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.TexturedFilter"/> class.
            </summary>
            
            <param name="texture">Generated texture.</param>
            <param name="filter1">First filter.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.TexturedFilter.#ctor(System.Single[0:,0:],AForge.Imaging.Filters.IFilter,AForge.Imaging.Filters.IFilter)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.TexturedFilter"/> class.
            </summary>
            
            <param name="texture">Generated texture.</param>
            <param name="filter1">First filter.</param>
            <param name="filter2">Second filter.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.TexturedFilter.#ctor(AForge.Imaging.Textures.ITextureGenerator,AForge.Imaging.Filters.IFilter)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.TexturedFilter"/> class.
            </summary>
            
            <param name="generator">Texture generator.</param>
            <param name="filter1">First filter.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.TexturedFilter.#ctor(AForge.Imaging.Textures.ITextureGenerator,AForge.Imaging.Filters.IFilter,AForge.Imaging.Filters.IFilter)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.TexturedFilter"/> class.
            </summary>
            
            <param name="generator">Texture generator.</param>
            <param name="filter1">First filter.</param>
            <param name="filter2">Second filter.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.TexturedFilter.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
            <summary>
            Process the filter on the specified image.
            </summary>
            
            <param name="sourceData">Source image data.</param>
            <param name="destinationData">Destination image data.</param>
            
            <exception cref="T:AForge.Imaging.InvalidImagePropertiesException">Texture size does not match image size.</exception>
            <exception cref="T:System.ApplicationException">Filters should not change image dimension.</exception>
            
        </member>
        <member name="P:AForge.Imaging.Filters.TexturedFilter.FormatTranslations">
             <summary>
             Format translations dictionary.
             </summary>
            
             <remarks><para>See <see cref="P:AForge.Imaging.Filters.IFilterInformation.FormatTranslations"/> for more information.</para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.TexturedFilter.FilterLevel">
            <summary>
            Filter level value, [0, 1].
            </summary>
            
            <remarks><para>Filtering factor determines portion of the destionation image, which is formed
            as a result of merging source images using specified texture.</para>
            
            <para>Default value is set to <b>1.0</b>.</para>
            
            <para>See <see cref="T:AForge.Imaging.Filters.TexturedFilter"/> class description for more details.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.TexturedFilter.PreserveLevel">
            <summary>
            Preserve level value
            </summary>
            
            <remarks><para>Preserving factor determines portion taken from the image produced
            by <see cref="P:AForge.Imaging.Filters.TexturedFilter.Filter2"/> (or from original source) without applying textured
            merge to it.</para>
            
            <para>Default value is set to <b>0.0</b>.</para>
            
            <para>See <see cref="T:AForge.Imaging.Filters.TexturedFilter"/> class description for more details.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.TexturedFilter.Texture">
            <summary>
            Generated texture.
            </summary>
            
            <remarks><para>Two dimensional array of texture intensities.</para>
            
            <para><note>Size of the provided texture should be the same as size of images, which will
            be passed to the filter.</note></para>
            
            <para><note>The <see cref="P:AForge.Imaging.Filters.TexturedFilter.TextureGenerator"/> property has priority over this property - if
            generator is specified than the static generated texture is not used.</note></para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.TexturedFilter.TextureGenerator">
            <summary>
            Texture generator.
            </summary>
            
            <remarks><para>Generator used to generate texture.</para>
            
            <para><note>The property has priority over the <see cref="P:AForge.Imaging.Filters.TexturedFilter.Texture"/> property.</note></para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.TexturedFilter.Filter1">
            <summary>
            First filter.
            </summary>
            
            <remarks><para>Filter, which is used to produce first image for the merge. The filter
            needs to implement <see cref="T:AForge.Imaging.Filters.IFilterInformation"/> interface, so it could be possible
            to get information about the filter. The filter must be able to process color 24 bpp
            images and produce color 24 bpp or grayscale 8 bppp images as result.</para>
            </remarks>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">The specified filter does not support 24 bpp color images.</exception>
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">The specified filter does not produce image of supported format.</exception>
            <exception cref="T:System.ArgumentException">The specified filter does not implement IFilterInformation interface.</exception>
            
        </member>
        <member name="P:AForge.Imaging.Filters.TexturedFilter.Filter2">
            <summary>
            Second filter
            </summary>
            
            <remarks><para>Filter, which is used to produce second image for the merge. The filter
            needs to implement <see cref="T:AForge.Imaging.Filters.IFilterInformation"/> interface, so it could be possible
            to get information about the filter. The filter must be able to process color 24 bpp
            images and produce color 24 bpp or grayscale 8 bppp images as result.</para>
            
            <para><note>The filter may be set to <see langword="null"/>. In this case original source image
            is used as a second image for the merge.</note></para>
            </remarks>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">The specified filter does not support 24 bpp color images.</exception>
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">The specified filter does not produce image of supported format.</exception>
            <exception cref="T:System.ArgumentException">The specified filter does not implement IFilterInformation interface.</exception>
            
        </member>
        <member name="T:AForge.Imaging.Filters.TexturedMerge">
            <summary>
            Merge two images using factors from texture.
            </summary>
            
            <remarks><para>The filter is similar to <see cref="T:AForge.Imaging.Filters.Morph"/> filter in its idea, but
            instead of using single value for balancing amount of source's and overlay's image
            values (see <see cref="P:AForge.Imaging.Filters.Morph.SourcePercent"/>), the filter uses texture, which determines
            the amount to take from source image and overlay image.</para>
            
            <para>The filter uses specified texture to adjust values using the next formula:<br/>
            <b>dst = src * textureValue + ovr * ( 1.0 - textureValue )</b>,<br/>
            where <b>src</b> is value of pixel in a source image, <b>ovr</b> is value of pixel in
            overlay image, <b>dst</b> is value of pixel in a destination image and
            <b>textureValue</b> is corresponding value from provided texture (see <see cref="P:AForge.Imaging.Filters.TexturedMerge.TextureGenerator"/> or
            <see cref="P:AForge.Imaging.Filters.TexturedMerge.Texture"/>).</para>
            
            <para>The filter accepts 8 bpp grayscale and 24 bpp color images for processing.</para>
            
            <para>Sample usage #1:</para>
            <code>
            // create filter
            TexturedMerge filter = new TexturedMerge( new TextileTexture( ) );
            // create an overlay image to merge with
            filter.OverlayImage = new Bitmap( image.Width, image.Height,
                    PixelFormat.Format24bppRgb );
            // fill the overlay image with solid color
            PointedColorFloodFill fillFilter = new PointedColorFloodFill( Color.DarkKhaki );
            fillFilter.ApplyInPlace( filter.OverlayImage );
            // apply the merge filter
            filter.ApplyInPlace( image );
            </code>
            
            <para>Sample usage #2:</para>
            <code>
            // create filter
            TexturedMerge filter = new TexturedMerge( new CloudsTexture( ) );
            // create 2 images with modified Hue
            HueModifier hm1 = new HueModifier( 50 );
            HueModifier hm2 = new HueModifier( 200 );
            filter.OverlayImage = hm2.Apply( image );
            hm1.ApplyInPlace( image );
            // apply the merge filter
            filter.ApplyInPlace( image );
            </code>
            
            <para><b>Initial image:</b></para>
            <img src="img/imaging/sample1.jpg" width="480" height="361"/>
            <para><b>Result image #1:</b></para>
            <img src="img/imaging/textured_merge1.jpg" width="480" height="361"/>
            <para><b>Result image #2:</b></para>
            <img src="img/imaging/textured_merge2.jpg" width="480" height="361"/>
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.TexturedMerge.#ctor(System.Single[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.TexturedMerge"/> class.
            </summary>
            
            <param name="texture">Generated texture.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.TexturedMerge.#ctor(AForge.Imaging.Textures.ITextureGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.TexturedMerge"/> class.
            </summary>
            
            <param name="generator">Texture generator.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.TexturedMerge.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
             <param name="overlay">Overlay image data.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.TexturedMerge.FormatTranslations">
             <summary>
             Format translations dictionary.
             </summary>
            
             <remarks><para>See <see cref="P:AForge.Imaging.Filters.IFilterInformation.FormatTranslations"/> for more information.</para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.TexturedMerge.Texture">
            <summary>
            Generated texture.
            </summary>
            
            <remarks><para>Two dimensional array of texture intensities.</para>
            
            <para><note>In the case if image passed to the filter is smaller or
            larger than the specified texture, than image's region is processed, which equals to the
            minimum overlapping area.</note></para>
            
            <para><note>The <see cref="P:AForge.Imaging.Filters.TexturedMerge.TextureGenerator"/> property has priority over this property - if
            generator is specified than the static generated texture is not used.</note></para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.TexturedMerge.TextureGenerator">
            <summary>
            Texture generator.
            </summary>
            
            <remarks><para>Generator used to generate texture.</para>
            
            <para><note>The property has priority over the <see cref="P:AForge.Imaging.Filters.TexturedMerge.Texture"/> property.</note></para>
            </remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.Texturer">
            <summary>
            Texturer filter.
            </summary>
            
            <remarks><para>Adjust pixels’ color values using factors from the given texture. In conjunction with different type
            of texture generators, the filter may produce different type of interesting effects.</para>
            
            <para>The filter uses specified texture to adjust values using the next formula:<br/>
            <b>dst = src * <see cref="P:AForge.Imaging.Filters.Texturer.PreserveLevel"/> + src * <see cref="P:AForge.Imaging.Filters.Texturer.FilterLevel"/> * textureValue</b>,<br/>
            where <b>src</b> is value of pixel in a source image, <b>dst</b> is value of pixel in a destination image and
            <b>textureValue</b> is corresponding value from provided texture (see <see cref="P:AForge.Imaging.Filters.Texturer.TextureGenerator"/> or
            <see cref="P:AForge.Imaging.Filters.Texturer.Texture"/>). Using <see cref="P:AForge.Imaging.Filters.Texturer.PreserveLevel"/> and <see cref="P:AForge.Imaging.Filters.Texturer.FilterLevel"/> values it is possible
            to control the portion of source data affected by texture.
            </para>
            
            <para>In most cases the <see cref="P:AForge.Imaging.Filters.Texturer.PreserveLevel"/> and <see cref="P:AForge.Imaging.Filters.Texturer.FilterLevel"/> properties are set in such
            way, that <see cref="P:AForge.Imaging.Filters.Texturer.PreserveLevel"/> + <see cref="P:AForge.Imaging.Filters.Texturer.FilterLevel"/> = <b>1</b>. But there is no limitations actually
            for those values, so their sum may be as greater, as lower than 1 in order create different type of
            effects.</para>
            
            <para>The filter accepts 8 bpp grayscale and 24 bpp color images for processing.</para>
            
            <para>Sample usage:</para>
            <code>
            // create filter
            Texturer filter = new Texturer( new TextileTexture( ), 0.3, 0.7 );
            // apply the filter
            filter.ApplyInPlace( image );
            </code>
            
            <para><b>Initial image:</b></para>
            <img src="img/imaging/sample1.jpg" width="480" height="361"/>
            <para><b>Result image:</b></para>
            <img src="img/imaging/texturer.jpg" width="480" height="361"/>
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Texturer.#ctor(System.Single[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Texturer"/> class.
            </summary>
            
            <param name="texture">Generated texture.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Texturer.#ctor(System.Single[0:,0:],System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Texturer"/> class.
            </summary>
            
            <param name="texture">Generated texture.</param>
            <param name="filterLevel">Filter level value (see <see cref="P:AForge.Imaging.Filters.Texturer.FilterLevel"/> property).</param>
            <param name="preserveLevel">Preserve level value (see <see cref="P:AForge.Imaging.Filters.Texturer.PreserveLevel"/> property).</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Texturer.#ctor(AForge.Imaging.Textures.ITextureGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Texturer"/> class.
            </summary>
            
            <param name="generator">Texture generator.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Texturer.#ctor(AForge.Imaging.Textures.ITextureGenerator,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Texturer"/> class.
            </summary>
            
            <param name="generator">Texture generator.</param>
            <param name="filterLevel">Filter level value (see <see cref="P:AForge.Imaging.Filters.Texturer.FilterLevel"/> property).</param>
            <param name="preserveLevel">Preserve level value (see <see cref="P:AForge.Imaging.Filters.Texturer.PreserveLevel"/> property).</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Texturer.ProcessFilter(AForge.Imaging.UnmanagedImage,Alt.Sketch.RectI)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
             <param name="rect">Image rectangle for processing by the filter.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Texturer.FormatTranslations">
             <summary>
             Format translations dictionary.
             </summary>
            
             <remarks><para>See <see cref="P:AForge.Imaging.Filters.IFilterInformation.FormatTranslations"/> for more information.</para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Texturer.FilterLevel">
            <summary>
            Filter level value.
            </summary>
            
            <remarks><para>Filtering factor determines image fraction to filter - to multiply 
            by values from the provided texture.</para>
            
            <para>Default value is set to <b>0.5</b>.</para>
            
            <para>See <see cref="T:AForge.Imaging.Filters.Texturer"/> class description for more details.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Texturer.PreserveLevel">
            <summary>
            Preserve level value.
            </summary>
            
            <remarks><para>Preserving factor determines image fraction to keep from filtering.</para>
            
            <para>Default value is set to <b>0.5</b>.</para>
            
            <para>See <see cref="T:AForge.Imaging.Filters.Texturer"/> class description for more details.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Texturer.Texture">
            <summary>
            Generated texture.
            </summary>
            
            <remarks><para>Two dimensional array of texture intensities.</para>
            
            <para><note>In the case if image passed to the filter is smaller or
            larger than the specified texture, than image's region is processed, which equals to the
            minimum overlapping area.</note></para>
            
            <para><note>The <see cref="P:AForge.Imaging.Filters.Texturer.TextureGenerator"/> property has priority over this property - if
            generator is specified than the static generated texture is not used.</note></para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Texturer.TextureGenerator">
            <summary>
            Texture generator.
            </summary>
            
            <remarks><para>Generator used to generate texture.</para>
            
            <para><note>The property has priority over the <see cref="P:AForge.Imaging.Filters.Texturer.Texture"/> property.</note></para>
            </remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.WaterWave">
            <summary>
            Simple water wave effect filter.
            </summary>
            
            <remarks><para>The image processing filter implements simple water wave effect. Using
            properties of the class, it is possible to set number of vertical/horizontal waves,
            as well as their amplitude.</para>
            
            <para>Bilinear interpolation is used to create smooth effect.</para>
            
            <para>The filter accepts 8 bpp grayscale images and 24/32
            color images for processing.</para>
            
            <para>Sample usage:</para>
            <code>
            // create filter
            WaterWave filter = new WaterWave( );
            filter.HorizontalWavesCount     = 10;
            filter.HorizontalWavesAmplitude = 5;
            filter.VerticalWavesCount       = 3;
            filter.VerticalWavesAmplitude   = 15;
            // apply the filter
            Bitmap newImage = filter.Apply( image );
            </code>
            
            <para><b>Initial image:</b></para>
            <img src="img/imaging/sample1.jpg" width="480" height="361" />
            <para><b>Result image:</b></para>
            <img src="img/imaging/water_wave.jpg" width="480" height="361" />
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.WaterWave.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.WaterWave"/> class.
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.WaterWave.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
            <summary>
            Process the filter on the specified image.
            </summary>
            
            <param name="source">Source image data.</param>
            <param name="destination">Destination image data.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.WaterWave.HorizontalWavesCount">
            <summary>
            Number of horizontal waves, [1, 10000].
            </summary>
            
            <remarks><para>Default value is set to <b>5</b>.</para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.WaterWave.VerticalWavesCount">
            <summary>
            Number of vertical waves, [1, 10000].
            </summary>
            
            <remarks><para>Default value is set to <b>5</b>.</para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.WaterWave.HorizontalWavesAmplitude">
            <summary>
            Amplitude of horizontal waves measured in pixels, [0, 10000].
            </summary>
            
            <remarks><para>Default value is set to <b>10</b>.</para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.WaterWave.VerticalWavesAmplitude">
            <summary>
            Amplitude of vertical waves measured in pixels, [0, 10000].
            </summary>
            
            <remarks><para>Default value is set to <b>10</b>.</para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.WaterWave.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
            
            <remarks><para>See <see cref="P:AForge.Imaging.Filters.IFilterInformation.FormatTranslations"/>
            documentation for additional information.</para></remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.AdaptiveSmoothing">
            <summary>
            Adaptive Smoothing - noise removal with edges preserving.
            </summary>
            
            <remarks><para>The filter is aimed to perform image smoothing, but keeping sharp edges.
            This makes it applicable to additive noise removal and smoothing objects' interiors, but
            not applicable for spikes (salt and pepper noise) removal.</para>
            
            <para>The next calculations are done for each pixel:
            <list type="bullet">
            <item>weights are calculate for 9 pixels - pixel itself and 8 neighbors:
            <code lang="none">
            w(x, y) = exp( -1 * (Gx^2 + Gy^2) / (2 * factor^2) )
            Gx(x, y) = (I(x + 1, y) - I(x - 1, y)) / 2
            Gy(x, y) = (I(x, y + 1) - I(x, y - 1)) / 2
            </code>,
            where <see cref="P:AForge.Imaging.Filters.AdaptiveSmoothing.Factor">factor</see> is a configurable value determining smoothing's quality.</item>
            <item>sum of 9 weights is calclated (weightTotal);</item>
            <item>sum of 9 weighted pixel values is calculatd (total);</item>
            <item>destination pixel is calculated as <b>total / weightTotal</b>.</item>
            </list></para>
            
            <para>Description of the filter was found in <b>"An Edge Detection Technique Using
            the Facet Model and Parameterized Relaxation Labeling" by Ioannis Matalas, Student Member,
            IEEE, Ralph Benjamin, and Richard Kitney</b>.</para>
            
            <para>The filter accepts 8 bpp grayscale images and 24 bpp
            color images for processing.</para>
            
            <para>Sample usage:</para>
            <code>
            // create filter
            AdaptiveSmoothing filter = new AdaptiveSmoothing( );
            // apply the filter
            filter.ApplyInPlace( image );
            </code>
            
            <para><b>Initial image:</b></para>
            <img src="img/imaging/sample13.png" width="480" height="361"/>
            <para><b>Result image:</b></para>
            <img src="img/imaging/adaptive_smooth.png" width="480" height="361"/>
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.AdaptiveSmoothing.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.AdaptiveSmoothing"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.AdaptiveSmoothing.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.AdaptiveSmoothing"/> class.
            </summary>
            
            <param name="factor">Factor value.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.AdaptiveSmoothing.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage,Alt.Sketch.RectI)">
            <summary>
            Process the filter on the specified image.
            </summary>
            
            <param name="source">Source image data.</param>
            <param name="destination">Destination image data.</param>
            <param name="rect">Image rectangle for processing by the filter.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.AdaptiveSmoothing.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.AdaptiveSmoothing.Factor">
            <summary>
            Factor value.
            </summary>
            
            <remarks><para>Factor determining smoothing quality (see <see cref="T:AForge.Imaging.Filters.AdaptiveSmoothing"/>
            documentation).</para>
            
            <para>Default value is set to <b>3</b>.</para>
            </remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.BilateralSmoothing">
             <summary>
             Bilateral filter implementation - edge preserving smoothing and noise reduction that uses chromatic and spatial factors.
             </summary>
             
             <remarks>
             <para>Bilateral filter conducts "selective" Gaussian smoothing of areas of same color (domains) which removes noise and contrast artifacts
             while preserving sharp edges.</para>
             
             <para>Two major parameters <see cref="P:AForge.Imaging.Filters.BilateralSmoothing.SpatialFactor"/> and <see cref="P:AForge.Imaging.Filters.BilateralSmoothing.ColorFactor"/> define the result of the filter. 
             By changing these parameters you may achieve either only noise reduction with little change to the
             image or get nice looking effect to the entire image.</para>
            
             <para>Although the filter can use parallel processing large <see cref="P:AForge.Imaging.Filters.BilateralSmoothing.KernelSize"/> values
             (greater than 25) on high resolution images may decrease speed of processing. Also on high
             resolution images small <see cref="P:AForge.Imaging.Filters.BilateralSmoothing.KernelSize"/> values (less than 9) may not provide noticeable
             results.</para>
             
             <para>More details on the algorithm can be found by following this
             <a href="http://saplin.blogspot.com/2012/01/bilateral-image-filter-edge-preserving.html">link</a>.</para>
             
             <para>The filter accepts 8 bpp grayscale images and 24/32 bpp color images for processing.</para>
             
             <para>Sample usage:</para>
             <code>
             // create filter
             BilateralSmoothing filter = new BilateralSmoothing( );
             filter.KernelSize    = 7;
             filter.SpatialFactor = 10;
             filter.ColorFactor   = 60;
             filter.ColorPower    = 0.5;
             // apply the filter
             filter.ApplyInPlace( image );
             </code>
             
             <para><b>Initial image:</b></para>
             <img src="img/imaging/sample13.png" width="480" height="361"/>
             <para><b>Result image:</b></para>
             <img src="img/imaging/bilateral.jpg" width="480" height="361"/>
             </remarks>
             
        </member>
        <member name="M:AForge.Imaging.Filters.BilateralSmoothing.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.BilateralSmoothing"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BilateralSmoothing.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage,Alt.Sketch.RectI)">
            <summary>
            Process the filter on the specified image.
            </summary>
            
            <param name="source">Source image data.</param>
            <param name="destination">Destination image data.</param>
            <param name="rect">Image rectangle for processing by the filter.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.BilateralSmoothing.LimitKernelSize">
            <summary>
            Specifies if exception must be thrown in the case a large
            <see cref="P:AForge.Imaging.Filters.BilateralSmoothing.KernelSize">kernel size</see> is used which may lead
            to significant performance issues.
            </summary>
            
            <remarks>
            <para>Default value is set to <see langword="true"/>.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.BilateralSmoothing.EnableParallelProcessing">
            <summary>
            Enable or not parallel processing on multi-core CPUs.
            </summary>
            
            <remarks><para>If the property is set to <see langword="true"/>, then this image processing
            routine will run in parallel on the systems with multiple core/CPUs. The <see cref="M:AForge.Parallel.For(System.Int32,System.Int32,AForge.Parallel.ForLoopBody)"/>
            is used to make it parallel.</para>
            
            <para>Default value is set to <see langword="false"/>.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.BilateralSmoothing.KernelSize">
            <summary>
            Size of a square for limiting surrounding pixels that take part in calculations, [3, 255].
            </summary>
            
            <remarks><para>The greater the value the more is the general power of the filter. Small values
            (less than 9) on high resolution images (3000 pixels wide) do not give significant results.
            Large values increase the number of calculations and degrade performance.</para>
            
            <para><note>The value of this property must be an odd integer in the [3, 255] range if
            <see cref="P:AForge.Imaging.Filters.BilateralSmoothing.LimitKernelSize"/> is set to <see langword="false"/> or in the [3, 25] range
            otherwise.</note></para>
            
            <para>Default value is set to <b>9</b>.</para>
            </remarks>
            
            <exception cref="T:System.ArgumentOutOfRangeException">The specified value is out of range (see
            eception message for details).</exception>
            <exception cref="T:System.ArgumentException">The value of this must be an odd integer.</exception>
            
        </member>
        <member name="P:AForge.Imaging.Filters.BilateralSmoothing.SpatialFactor">
            <summary>
            Determines smoothing power within a color domain (neighbor pixels of similar color), >= 1.
            </summary>
            
            <remarks>
            <para>Default value is set to <b>10</b>.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.BilateralSmoothing.SpatialPower">
            <summary>
            Exponent power, used in Spatial function calculation, >= 1.
            </summary>
            
            <remarks>
            <para>Default value is set to <b>2</b>.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.BilateralSmoothing.ColorFactor">
            <summary>
            Determines the variance of color for a color domain, >= 1.
            </summary>
            
            <remarks>
            <para>Default value is set to <b>50</b>.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.BilateralSmoothing.ColorPower">
            <summary>
            Exponent power, used in Color function calculation, >= 1.
            </summary>
            
            <remarks>
            <para>Default value is set to <b>2</b>.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.BilateralSmoothing.FormatTranslations">
             <summary>
             Format translations dictionary.
             </summary>
             
             <remarks><para>See <see cref="P:AForge.Imaging.Filters.IFilterInformation.FormatTranslations"/>
             documentation for additional information.</para></remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.ConservativeSmoothing">
            <summary>
            Conservative smoothing.
            </summary>
            
            <remarks><para>The filter implements conservative smoothing, which is a noise reduction
            technique that derives its name from the fact that it employs a simple, fast filtering
            algorithm that sacrifices noise suppression power in order to preserve the high spatial
            frequency detail (e.g. sharp edges) in an image. It is explicitly designed to remove noise
            spikes - <b>isolated</b> pixels of exceptionally low or high pixel intensity
            (<see cref="T:AForge.Imaging.Filters.SaltAndPepperNoise">salt and pepper noise</see>).</para>
            
            <para>If the filter finds a pixel which has minimum/maximum value compared to its surrounding
            pixel, then its value is replaced by minimum/maximum value of those surrounding pixel.
            For example, lets suppose the filter uses <see cref="P:AForge.Imaging.Filters.ConservativeSmoothing.KernelSize">kernel size</see> of 3x3,
            which means each pixel has 8 surrounding pixel. If pixel's value is smaller than any value
            of surrounding pixels, then the value of the pixel is replaced by minimum value of those surrounding
            pixels.</para>
            
            <para>The filter accepts 8 bpp grayscale images and 24/32 bpp
            color images for processing.</para>
            
            <para>Sample usage:</para>
            <code>
            // create filter
            ConservativeSmoothing filter = new ConservativeSmoothing( );
            // apply the filter
            filter.ApplyInPlace( image );
            </code>
            
            <para><b>Initial image:</b></para>
            <img src="img/imaging/sample13.png" width="480" height="361"/>
            <para><b>Result image:</b></para>
            <img src="img/imaging/conservative_smoothing.png" width="480" height="361"/>
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ConservativeSmoothing.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.ConservativeSmoothing"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ConservativeSmoothing.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.ConservativeSmoothing"/> class.
            </summary>
            
            <param name="size">Kernel size.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ConservativeSmoothing.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage,Alt.Sketch.RectI)">
            <summary>
            Process the filter on the specified image.
            </summary>
            
            <param name="source">Source image data.</param>
            <param name="destination">Destination image data.</param>
            <param name="rect">Image rectangle for processing by the filter.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.ConservativeSmoothing.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.ConservativeSmoothing.KernelSize">
            <summary>
            Kernel size, [3, 25].
            </summary>
            
            <remarks><para>Determines the size of pixel's square used for smoothing.</para>
            
            <para>Default value is set to <b>3</b>.</para>
            
            <para><note>The value should be odd.</note></para>
            </remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.Median">
            <summary>
            Median filter.
            </summary>
            
            <remarks><para>The median filter is normally used to reduce noise in an image, somewhat like
            the <see cref="T:AForge.Imaging.Filters.Mean">mean filter</see>. However, it often does a better job than the mean
            filter of preserving useful detail in the image.</para>
            
            <para>Each pixel of the original source image is replaced with the median of neighboring pixel
            values. The median is calculated by first sorting all the pixel values from the surrounding
            neighborhood into numerical order and then replacing the pixel being considered with the
            middle pixel value.</para>
            
            <para>The filter accepts 8 bpp grayscale images and 24/32 bpp
            color images for processing.</para>
            
            <para>Sample usage:</para>
            <code>
            // create filter
            Median filter = new Median( );
            // apply the filter
            filter.ApplyInPlace( image );
            </code>
            
            <para><b>Initial image:</b></para>
            <img src="img/imaging/sample13.png" width="480" height="361"/>
            <para><b>Result image:</b></para>
            <img src="img/imaging/median.png" width="480" height="361"/>
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Median.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Median"/> class.
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.Median.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Median"/> class.
            </summary>
            
            <param name="size">Processing square size.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Median.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage,Alt.Sketch.RectI)">
            <summary>
            Process the filter on the specified image.
            </summary>
            
            <param name="source">Source image data.</param>
            <param name="destination">Destination image data.</param>
            <param name="rect">Image rectangle for processing by the filter.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Median.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.Median.Size">
            <summary>
            Processing square size for the median filter, [3, 25].
            </summary>
            
            <remarks><para>Default value is set to <b>3</b>.</para>
            
            <para><note>The value should be odd.</note></para>
            </remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.BackwardQuadrilateralTransformation">
            <summary>
            Performs backward quadrilateral transformation into an area in destination image.
            </summary>
            
            <remarks><para>The class implements backward quadrilateral transformation algorithm,
            which allows to transform any rectangular image into any quadrilateral area
            in a given destination image. The idea of the algorithm is based on homogeneous
            transformation and its math is described by Paul Heckbert in his
            "<a href="http://graphics.cs.cmu.edu/courses/15-463/2008_fall/Papers/proj.pdf">Projective Mappings for Image Warping</a>" paper.
            </para>
            
            <para>The image processing routines implements similar math to <see cref="T:AForge.Imaging.Filters.QuadrilateralTransformation"/>,
            but performs it in backward direction.</para>
            
            <para>The image processing filter accepts 8 grayscale images and 24/32 bpp
            color images for processing.</para>
            
            <para>Sample usage:</para>
            <code>
            // define quadrilateral's corners
            List&lt;IntPoint&gt; corners = new List&lt;IntPoint&gt;( );
            corners.Add( new IntPoint(  99,  99 ) );
            corners.Add( new IntPoint( 156,  79 ) );
            corners.Add( new IntPoint( 184, 126 ) );
            corners.Add( new IntPoint( 122, 150 ) );
            // create filter
            BackwardQuadrilateralTransformation filter =
                new BackwardQuadrilateralTransformation( sourceImage, corners );
            // apply the filter
            Bitmap newImage = filter.Apply( image );
            </code>
            
            <para><b>Source image:</b></para>
            <img src="img/imaging/icon.png" width="128" height="128"/>
            <para><b>Destination image:</b></para>
            <img src="img/imaging/sample18.jpg" width="320" height="240"/>
            <para><b>Result image:</b></para>
            <img src="img/imaging/backward_quadrilateral.jpg" width="320" height="240"/>
            </remarks>
            
            <seealso cref="T:AForge.Imaging.Filters.QuadrilateralTransformation"/>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BackwardQuadrilateralTransformation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.BackwardQuadrilateralTransformation"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BackwardQuadrilateralTransformation.#ctor(Alt.Sketch.Bitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.BackwardQuadrilateralTransformation"/> class.
            </summary>
            
            <param name="sourceImage">Source image to be transformed into specified quadrilateral
            (see <see cref="P:AForge.Imaging.Filters.BackwardQuadrilateralTransformation.SourceImage"/>).</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BackwardQuadrilateralTransformation.#ctor(AForge.Imaging.UnmanagedImage)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.BackwardQuadrilateralTransformation"/> class.
            </summary>
            
            <param name="sourceUnmanagedImage">Source unmanaged image to be transformed into specified quadrilateral
            (see <see cref="P:AForge.Imaging.Filters.BackwardQuadrilateralTransformation.SourceUnmanagedImage"/>).</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BackwardQuadrilateralTransformation.#ctor(Alt.Sketch.Bitmap,System.Collections.Generic.List{AForge.IntPoint})">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.BackwardQuadrilateralTransformation"/> class.
            </summary>
            
            <param name="sourceImage">Source image to be transformed into specified quadrilateral
            (see <see cref="P:AForge.Imaging.Filters.BackwardQuadrilateralTransformation.SourceImage"/>).</param>
            <param name="destinationQuadrilateral">Quadrilateral in destination image to transform into.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BackwardQuadrilateralTransformation.#ctor(AForge.Imaging.UnmanagedImage,System.Collections.Generic.List{AForge.IntPoint})">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.BackwardQuadrilateralTransformation"/> class.
            </summary>
            
            <param name="sourceUnmanagedImage">Source unmanaged image to be transformed into specified quadrilateral
            (see <see cref="P:AForge.Imaging.Filters.BackwardQuadrilateralTransformation.SourceUnmanagedImage"/>).</param>
            <param name="destinationQuadrilateral">Quadrilateral in destination image to transform into.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BackwardQuadrilateralTransformation.ProcessFilter(AForge.Imaging.UnmanagedImage)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="image">Image data to process by the filter.</param>
            
             <exception cref="T:System.NullReferenceException">Destination quadrilateral was not set.</exception>
             
        </member>
        <member name="P:AForge.Imaging.Filters.BackwardQuadrilateralTransformation.FormatTranslations">
             <summary>
             Format translations dictionary.
             </summary>
             
             <remarks><para>See <see cref="P:AForge.Imaging.Filters.IFilterInformation.FormatTranslations"/>
             documentation for additional information.</para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.BackwardQuadrilateralTransformation.SourceImage">
             <summary>
             Source image to be transformed into specified quadrilateral.
             </summary>
             
             <remarks><para>The property sets the source image, which will be transformed
             to the specified quadrilateral and put into destination image the filter is applied to.</para>
             
             <para><note>The source image must have the same pixel format as a destination image the filter
             is applied to. Otherwise exception will be generated when filter is applied.</note></para>
             
             <para><note>Setting this property will clear the <see cref="P:AForge.Imaging.Filters.BackwardQuadrilateralTransformation.SourceUnmanagedImage"/> property -
             only one source image is allowed: managed or unmanaged.</note></para>
             </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.BackwardQuadrilateralTransformation.SourceUnmanagedImage">
             <summary>
             Source unmanaged image to be transformed into specified quadrilateral.
             </summary>
             
             <remarks><para>The property sets the source image, which will be transformed
             to the specified quadrilateral and put into destination image the filter is applied to.</para>
             
             <para><note>The source image must have the same pixel format as a destination image the filter
             is applied to. Otherwise exception will be generated when filter is applied.</note></para>
             
             <para><note>Setting this property will clear the <see cref="P:AForge.Imaging.Filters.BackwardQuadrilateralTransformation.SourceImage"/> property -
             only one source image is allowed: managed or unmanaged.</note></para>
             </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.BackwardQuadrilateralTransformation.DestinationQuadrilateral">
             <summary>
             Quadrilateral in destination image to transform into.
             </summary>
             
             <remarks><para>The property specifies 4 corners of a quadrilateral area
             in destination image where the source image will be transformed into.
             </para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.BackwardQuadrilateralTransformation.UseInterpolation">
            <summary>
            Specifies if bilinear interpolation should be used or not.
            </summary>
            
            <remarks><para>Default value is set to <see langword="true"/> - interpolation
            is used.</para>
            </remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.Crop">
            <summary>
            Crop an image.
            </summary>
            
            <remarks>
            <para>The filter crops an image providing a new image, which contains only the specified
            rectangle of the original image.</para>
            
            <para>The filter accepts 8 and 16 bpp grayscale images and 24, 32, 48 and 64 bpp
            color images for processing.</para>
            
            <para>Sample usage:</para>
            <code>
            // create filter
            Crop filter = new Crop( new RectI( 75, 75, 320, 240 ) );
            // apply the filter
            Bitmap newImage = filter.Apply( image );
            </code>
            
            <para><b>Initial image:</b></para>
            <img src="img/imaging/sample1.jpg" width="480" height="361" />
            <para><b>Result image:</b></para>
            <img src="img/imaging/crop.jpg" width="320" height="240" />
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Crop.#ctor(Alt.Sketch.RectI)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Crop"/> class.
            </summary>
            
            <param name="rect">Rectangle to crop.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Crop.CalculateNewImageSize(AForge.Imaging.UnmanagedImage)">
            <summary>
            Calculates new image size.
            </summary>
            
            <param name="sourceData">Source image data.</param>
            
            <returns>New image size - size of the destination image.</returns>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Crop.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
            <summary>
            Process the filter on the specified image.
            </summary>
            
            <param name="sourceData">Source image data.</param>
            <param name="destinationData">Destination image data.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Crop.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.Crop.Rectangle">
            <summary>
            Rectangle to crop.
            </summary>
        </member>
        <member name="T:AForge.Imaging.Filters.QuadrilateralTransformation">
            <summary>
            Performs quadrilateral transformation of an area in a given source image.
            </summary>
            
            <remarks><para>The class implements quadrilateral transformation algorithm,
            which allows to transform any quadrilateral from a given source image
            to a rectangular image. The idea of the algorithm is based on homogeneous
            transformation and its math is described by Paul Heckbert in his
            "<a href="http://graphics.cs.cmu.edu/courses/15-463/2008_fall/Papers/proj.pdf">Projective Mappings for Image Warping</a>" paper.
            </para>
            
            <para>The image processing filter accepts 8 grayscale images and 24/32 bpp
            color images for processing.</para>
            
            <para>Sample usage:</para>
            <code>
            // define quadrilateral's corners
            List&lt;IntPoint&gt; corners = new List&lt;IntPoint&gt;( );
            corners.Add( new IntPoint(  99,  99 ) );
            corners.Add( new IntPoint( 156,  79 ) );
            corners.Add( new IntPoint( 184, 126 ) );
            corners.Add( new IntPoint( 122, 150 ) );
            // create filter
            QuadrilateralTransformation filter =
                new QuadrilateralTransformation( corners, 200, 200 );
            // apply the filter
            Bitmap newImage = filter.Apply( image );
            </code>
            
            <para><b>Initial image:</b></para>
            <img src="img/imaging/sample18.jpg" width="320" height="240"/>
            <para><b>Result image:</b></para>
            <img src="img/imaging/quadrilateral_ex_bilinear.png" width="200" height="200"/>
            </remarks>
            
            <seealso cref="T:AForge.Imaging.Filters.BackwardQuadrilateralTransformation"/>
            <seealso cref="T:AForge.Imaging.Filters.SimpleQuadrilateralTransformation"/>
            
        </member>
        <member name="F:AForge.Imaging.Filters.QuadrilateralTransformation.newWidth">
            <summary>
            New image width.
            </summary>
        </member>
        <member name="F:AForge.Imaging.Filters.QuadrilateralTransformation.newHeight">
            <summary>
            New image height.
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.QuadrilateralTransformation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.QuadrilateralTransformation"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.QuadrilateralTransformation.#ctor(System.Collections.Generic.List{AForge.IntPoint},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.QuadrilateralTransformation"/> class.
            </summary>
            
            <param name="sourceQuadrilateral">Corners of the source quadrilateral area.</param>
            <param name="newWidth">Width of the new transformed image.</param>
            <param name="newHeight">Height of the new transformed image.</param>
            
            <remarks><para>This constructor sets <see cref="P:AForge.Imaging.Filters.QuadrilateralTransformation.AutomaticSizeCalculaton"/> to
            <see langword="false"/>, which means that destination image will have width and
            height as specified by user.</para></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.QuadrilateralTransformation.#ctor(System.Collections.Generic.List{AForge.IntPoint})">
             <summary>
             Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.QuadrilateralTransformation"/> class.
             </summary>
             
             <param name="sourceQuadrilateral">Corners of the source quadrilateral area.</param>
             
             <remarks><para>This constructor sets <see cref="P:AForge.Imaging.Filters.QuadrilateralTransformation.AutomaticSizeCalculaton"/> to
             <see langword="true"/>, which means that destination image will have width and
             height automatically calculated based on <see cref="P:AForge.Imaging.Filters.QuadrilateralTransformation.SourceQuadrilateral"/> property.</para></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.QuadrilateralTransformation.CalculateNewImageSize(AForge.Imaging.UnmanagedImage)">
            <summary>
            Calculates new image size.
            </summary>
            
            <param name="sourceData">Source image data.</param>
            
            <returns>New image size - size of the destination image.</returns>
            
            <exception cref="T:System.NullReferenceException">Source quadrilateral was not set.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.QuadrilateralTransformation.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
            <summary>
            Process the filter on the specified image.
            </summary>
            
            <param name="sourceData">Source image data.</param>
            <param name="destinationData">Destination image data.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.QuadrilateralTransformation.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
            
            <remarks><para>See <see cref="P:AForge.Imaging.Filters.IFilterInformation.FormatTranslations"/>
            documentation for additional information.</para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.QuadrilateralTransformation.AutomaticSizeCalculaton">
            <summary>
            Automatic calculation of destination image or not.
            </summary>
            
            <remarks><para>The property specifies how to calculate size of destination (transformed)
            image. If the property is set to <see langword="false"/>, then <see cref="P:AForge.Imaging.Filters.QuadrilateralTransformation.NewWidth"/>
            and <see cref="P:AForge.Imaging.Filters.QuadrilateralTransformation.NewHeight"/> properties have effect and destination image's size is
            specified by user. If the property is set to <see langword="true"/>, then setting the above
            mentioned properties does not have any effect, but destionation image's size is
            automatically calculated from <see cref="P:AForge.Imaging.Filters.QuadrilateralTransformation.SourceQuadrilateral"/> property - width and height
            come from length of longest edges.
            </para>
            
            <para>Default value is set to <see langword="true"/>.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.QuadrilateralTransformation.SourceQuadrilateral">
            <summary>
            Quadrilateral's corners in source image.
            </summary>
            
            <remarks><para>The property specifies four corners of the quadrilateral area
            in the source image to be transformed.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.QuadrilateralTransformation.NewWidth">
            <summary>
            Width of the new transformed image.
            </summary>
            
            <remarks><para>The property defines width of the destination image, which gets
            transformed quadrilateral image.</para>
            
            <para><note>Setting the property does not have any effect, if <see cref="P:AForge.Imaging.Filters.QuadrilateralTransformation.AutomaticSizeCalculaton"/>
            property is set to <see langword="true"/>. In this case destination image's width
            is calculated automatically based on <see cref="P:AForge.Imaging.Filters.QuadrilateralTransformation.SourceQuadrilateral"/> property.</note></para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.QuadrilateralTransformation.NewHeight">
            <summary>
            Height of the new transformed image.
            </summary>
            
            <remarks><para>The property defines height of the destination image, which gets
            transformed quadrilateral image.</para>
            
            <para><note>Setting the property does not have any effect, if <see cref="P:AForge.Imaging.Filters.QuadrilateralTransformation.AutomaticSizeCalculaton"/>
            property is set to <see langword="true"/>. In this case destination image's height
            is calculated automatically based on <see cref="P:AForge.Imaging.Filters.QuadrilateralTransformation.SourceQuadrilateral"/> property.</note></para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.QuadrilateralTransformation.UseInterpolation">
            <summary>
            Specifies if bilinear interpolation should be used or not.
            </summary>
            
            <remarks><para>Default value is set to <see langword="true"/> - interpolation
            is used.</para>
            </remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.QuadrilateralTransformationBilinear">
            <summary>
            Performs quadrilateral transformation using bilinear algorithm for interpolation.
            </summary>
            
            <remarks><para>The class is deprecated and <see cref="T:AForge.Imaging.Filters.SimpleQuadrilateralTransformation"/> should be used instead.</para>
            </remarks>
            
            <seealso cref="T:AForge.Imaging.Filters.SimpleQuadrilateralTransformation"/>
            
        </member>
        <member name="M:AForge.Imaging.Filters.QuadrilateralTransformationBilinear.#ctor(System.Collections.Generic.List{AForge.IntPoint},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.QuadrilateralTransformationBilinear"/> class.
            </summary>
            
            <param name="sourceCorners">Corners of the source quadrilateral area.</param>
            <param name="newWidth">Width of the new transformed image.</param>
            <param name="newHeight">Height of the new transformed image.</param>
            
            <remarks><para>This constructor sets <see cref="P:AForge.Imaging.Filters.QuadrilateralTransformationBilinear.AutomaticSizeCalculaton"/> to
            <see langword="false"/>, which means that destination image will have width and
            height as specified by user.</para></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.QuadrilateralTransformationBilinear.#ctor(System.Collections.Generic.List{AForge.IntPoint})">
             <summary>
             Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.QuadrilateralTransformationBilinear"/> class.
             </summary>
             
             <param name="sourceCorners">Corners of the source quadrilateral area.</param>
             
             <remarks><para>This constructor sets <see cref="P:AForge.Imaging.Filters.QuadrilateralTransformationBilinear.AutomaticSizeCalculaton"/> to
             <see langword="true"/>, which means that destination image will have width and
             height automatically calculated based on <see cref="P:AForge.Imaging.Filters.QuadrilateralTransformationBilinear.SourceCorners"/> property.</para></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.QuadrilateralTransformationBilinear.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
            <summary>
            Process the filter on the specified image.
            </summary>
            
            <param name="sourceData">Source image data.</param>
            <param name="destinationData">Destination image data.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.QuadrilateralTransformationBilinear.CalculateNewImageSize(AForge.Imaging.UnmanagedImage)">
            <summary>
            Calculates new image size.
            </summary>
            
            <param name="sourceData">Source image data.</param>
            
            <returns>New image size - size of the destination image.</returns>
            
            <exception cref="T:System.ArgumentException">The specified quadrilateral's corners are outside of the given image.</exception>
            
        </member>
        <member name="P:AForge.Imaging.Filters.QuadrilateralTransformationBilinear.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.QuadrilateralTransformationBilinear.AutomaticSizeCalculaton">
            <summary>
            Automatic calculation of destination image or not.
            </summary>
            
            <remarks><para>The property specifies how to calculate size of destination (transformed)
            image. If the property is set to <see langword="false"/>, then <see cref="P:AForge.Imaging.Filters.QuadrilateralTransformationBilinear.NewWidth"/>
            and <see cref="P:AForge.Imaging.Filters.QuadrilateralTransformationBilinear.NewHeight"/> properties have effect and destination image's size is
            specified by user. If the property is set to <see langword="true"/>, then setting the above
            mentioned properties does not have any effect, but destionation image's size is
            automatically calculated from <see cref="P:AForge.Imaging.Filters.QuadrilateralTransformationBilinear.SourceCorners"/> property - width and height
            come from length of longest edges.
            </para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.QuadrilateralTransformationBilinear.SourceCorners">
            <summary>
            Quadrilateral's corners in source image.
            </summary>
            
            <remarks><para>The property specifies four corners of the quadrilateral area
            in the source image to be transformed.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.QuadrilateralTransformationBilinear.NewWidth">
            <summary>
            Width of the new transformed image.
            </summary>
            
            <remarks><para>The property defines width of the destination image, which gets
            transformed quadrilateral image.</para>
            
            <para><note>Setting the property does not have any effect, if <see cref="P:AForge.Imaging.Filters.QuadrilateralTransformationBilinear.AutomaticSizeCalculaton"/>
            property is set to <see langword="true"/>. In this case destination image's width
            is calculated automatically based on <see cref="P:AForge.Imaging.Filters.QuadrilateralTransformationBilinear.SourceCorners"/> property.</note></para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.QuadrilateralTransformationBilinear.NewHeight">
            <summary>
            Height of the new transformed image.
            </summary>
            
            <remarks><para>The property defines height of the destination image, which gets
            transformed quadrilateral image.</para>
            
            <para><note>Setting the property does not have any effect, if <see cref="P:AForge.Imaging.Filters.QuadrilateralTransformationBilinear.AutomaticSizeCalculaton"/>
            property is set to <see langword="true"/>. In this case destination image's height
            is calculated automatically based on <see cref="P:AForge.Imaging.Filters.QuadrilateralTransformationBilinear.SourceCorners"/> property.</note></para>
            </remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.QuadrilateralTransformationNearestNeighbor">
             <summary>
             Performs quadrilateral transformation using nearest neighbor algorithm for interpolation.
             </summary>
             
             <remarks><para>The class is deprecated and <see cref="T:AForge.Imaging.Filters.SimpleQuadrilateralTransformation"/> should be used instead.</para>
             </remarks>
             
             <seealso cref="T:AForge.Imaging.Filters.SimpleQuadrilateralTransformation"/>
            
        </member>
        <member name="M:AForge.Imaging.Filters.QuadrilateralTransformationNearestNeighbor.#ctor(System.Collections.Generic.List{AForge.IntPoint},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.QuadrilateralTransformationNearestNeighbor"/> class.
            </summary>
            
            <param name="sourceCorners">Corners of the source quadrilateral area.</param>
            <param name="newWidth">Width of the new transformed image.</param>
            <param name="newHeight">Height of the new transformed image.</param>
            
            <remarks><para>This constructor sets <see cref="P:AForge.Imaging.Filters.QuadrilateralTransformationNearestNeighbor.AutomaticSizeCalculaton"/> to
            <see langword="false"/>, which means that destination image will have width and
            height as specified by user.</para></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.QuadrilateralTransformationNearestNeighbor.#ctor(System.Collections.Generic.List{AForge.IntPoint})">
             <summary>
             Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.QuadrilateralTransformationNearestNeighbor"/> class.
             </summary>
             
             <param name="sourceCorners">Corners of the source quadrilateral area.</param>
             
             <remarks><para>This constructor sets <see cref="P:AForge.Imaging.Filters.QuadrilateralTransformationNearestNeighbor.AutomaticSizeCalculaton"/> to
             <see langword="true"/>, which means that destination image will have width and
             height automatically calculated based on <see cref="P:AForge.Imaging.Filters.QuadrilateralTransformationNearestNeighbor.SourceCorners"/> property.</para></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.QuadrilateralTransformationNearestNeighbor.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
            <summary>
            Process the filter on the specified image.
            </summary>
            
            <param name="sourceData">Source image data.</param>
            <param name="destinationData">Destination image data.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.QuadrilateralTransformationNearestNeighbor.CalculateNewImageSize(AForge.Imaging.UnmanagedImage)">
            <summary>
            Calculates new image size.
            </summary>
            
            <param name="sourceData">Source image data.</param>
            
            <returns>New image size - size of the destination image.</returns>
            
            <exception cref="T:System.ArgumentException">The specified quadrilateral's corners are outside of the given image.</exception>
            
        </member>
        <member name="P:AForge.Imaging.Filters.QuadrilateralTransformationNearestNeighbor.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.QuadrilateralTransformationNearestNeighbor.AutomaticSizeCalculaton">
            <summary>
            Automatic calculation of destination image or not.
            </summary>
            
            <remarks><para>The property specifies how to calculate size of destination (transformed)
            image. If the property is set to <see langword="false"/>, then <see cref="P:AForge.Imaging.Filters.QuadrilateralTransformationNearestNeighbor.NewWidth"/>
            and <see cref="P:AForge.Imaging.Filters.QuadrilateralTransformationNearestNeighbor.NewHeight"/> properties have effect and destination image's size is
            specified by user. If the property is set to <see langword="true"/>, then setting the above
            mentioned properties does not have any effect, but destionation image's size is
            automatically calculated from <see cref="P:AForge.Imaging.Filters.QuadrilateralTransformationNearestNeighbor.SourceCorners"/> property - width and height
            come from length of longest edges.
            </para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.QuadrilateralTransformationNearestNeighbor.SourceCorners">
            <summary>
            Quadrilateral's corners in source image.
            </summary>
            
            <remarks><para>The property specifies four corners of the quadrilateral area
            in the source image to be transformed.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.QuadrilateralTransformationNearestNeighbor.NewWidth">
            <summary>
            Width of the new transformed image.
            </summary>
            
            <remarks><para>The property defines width of the destination image, which gets
            transformed quadrilateral image.</para>
            
            <para><note>Setting the property does not have any effect, if <see cref="P:AForge.Imaging.Filters.QuadrilateralTransformationNearestNeighbor.AutomaticSizeCalculaton"/>
            property is set to <see langword="true"/>. In this case destination image's width
            is calculated automatically based on <see cref="P:AForge.Imaging.Filters.QuadrilateralTransformationNearestNeighbor.SourceCorners"/> property.</note></para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.QuadrilateralTransformationNearestNeighbor.NewHeight">
            <summary>
            Height of the new transformed image.
            </summary>
            
            <remarks><para>The property defines height of the destination image, which gets
            transformed quadrilateral image.</para>
            
            <para><note>Setting the property does not have any effect, if <see cref="P:AForge.Imaging.Filters.QuadrilateralTransformationNearestNeighbor.AutomaticSizeCalculaton"/>
            property is set to <see langword="true"/>. In this case destination image's height
            is calculated automatically based on <see cref="P:AForge.Imaging.Filters.QuadrilateralTransformationNearestNeighbor.SourceCorners"/> property.</note></para>
            </remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.ResizeBicubic">
             <summary>
             Resize image using bicubic interpolation algorithm.
             </summary>
             
             <remarks><para>The class implements image resizing filter using bicubic
             interpolation algorithm. It uses bicubic kernel W(x) as described on
             <a href="http://en.wikipedia.org/wiki/Bicubic_interpolation#Bicubic_convolution_algorithm">Wikipedia</a>
             (coefficient <b>a</b> is set to <b>-0.5</b>).</para>
             
             <para>The filter accepts 8 grayscale images and 24 bpp
             color images for processing.</para>
             
             <para>Sample usage:</para>
             <code>
             // create filter
             ResizeBicubic filter = new ResizeBicubic( 400, 300 );
             // apply the filter
             Bitmap newImage = filter.Apply( image );
             </code>
             
             <para><b>Initial image:</b></para>
             <img src="img/imaging/sample9.png" width="320" height="240"/>
             <para><b>Result image:</b></para>
             <img src="img/imaging/resize_bicubic.png" width="400" height="300"/>
             </remarks>
             
             <seealso cref="T:AForge.Imaging.Filters.ResizeNearestNeighbor"/>
             <seealso cref="T:AForge.Imaging.Filters.ResizeBilinear"/>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ResizeBicubic.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.ResizeBicubic"/> class.
            </summary>
            
            <param name="newWidth">Width of new image.</param>
            <param name="newHeight">Height of new image.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ResizeBicubic.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
            <summary>
            Process the filter on the specified image.
            </summary>
            
            <param name="sourceData">Source image data.</param>
            <param name="destinationData">Destination image data.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.ResizeBicubic.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="T:AForge.Imaging.Filters.ResizeBilinear">
             <summary>
             Resize image using bilinear interpolation algorithm.
             </summary>
             
             <remarks><para>The class implements image resizing filter using bilinear
             interpolation algorithm.</para>
             
             <para>The filter accepts 8 grayscale images and 24/32 bpp
             color images for processing.</para>
             
             <para>Sample usage:</para>
             <code>
             // create filter
             ResizeBilinear filter = new ResizeBilinear( 400, 300 );
             // apply the filter
             Bitmap newImage = filter.Apply( image );
             </code>
             
             <para><b>Initial image:</b></para>
             <img src="img/imaging/sample9.png" width="320" height="240"/>
             <para><b>Result image:</b></para>
             <img src="img/imaging/resize_bilinear.png" width="400" height="300"/>
             </remarks>
             
             <seealso cref="T:AForge.Imaging.Filters.ResizeNearestNeighbor"/>
             <seealso cref="T:AForge.Imaging.Filters.ResizeBicubic"/>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ResizeBilinear.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.ResizeBilinear"/> class.
            </summary>
            
            <param name="newWidth">Width of the new image.</param>
            <param name="newHeight">Height of the new image.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ResizeBilinear.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
            <summary>
            Process the filter on the specified image.
            </summary>
            
            <param name="sourceData">Source image data.</param>
            <param name="destinationData">Destination image data.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.ResizeBilinear.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="T:AForge.Imaging.Filters.ResizeNearestNeighbor">
            <summary>
            Resize image using nearest neighbor algorithm.
            </summary>
            
            <remarks><para>The class implements image resizing filter using nearest
            neighbor algorithm, which does not assume any interpolation.</para>
            
            <para>The filter accepts 8 and 16 bpp grayscale images and 24, 32, 48 and 64 bpp
            color images for processing.</para>
            
            <para>Sample usage:</para>
            <code>
            // create filter
            ResizeNearestNeighbor filter = new ResizeNearestNeighbor( 400, 300 );
            // apply the filter
            Bitmap newImage = filter.Apply( image );
            </code>
            
            <para><b>Initial image:</b></para>
            <img src="img/imaging/sample9.png" width="320" height="240"/>
            <para><b>Result image:</b></para>
            <img src="img/imaging/resize_nearest.png" width="400" height="300"/>
            </remarks>
            
            <seealso cref="T:AForge.Imaging.Filters.ResizeBilinear"/>
            <seealso cref="T:AForge.Imaging.Filters.ResizeBicubic"/>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ResizeNearestNeighbor.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.ResizeNearestNeighbor"/> class.
            </summary>
            
            <param name="newWidth">Width of the new image.</param>
            <param name="newHeight">Height of the new image.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.ResizeNearestNeighbor.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
            <summary>
            Process the filter on the specified image.
            </summary>
            
            <param name="sourceData">Source image data.</param>
            <param name="destinationData">Destination image data.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.ResizeNearestNeighbor.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="T:AForge.Imaging.Filters.RotateBicubic">
             <summary>
             Rotate image using bicubic interpolation.
             </summary>
             
             <remarks><para>The class implements image rotation filter using bicubic
             interpolation algorithm. It uses bicubic kernel W(x) as described on
             <a href="http://en.wikipedia.org/wiki/Bicubic_interpolation#Bicubic_convolution_algorithm">Wikipedia</a>
             (coefficient <b>a</b> is set to <b>-0.5</b>).</para>
             
             <para><note>Rotation is performed in counterclockwise direction.</note></para>
             
             <para>The filter accepts 8 bpp grayscale images and 24 bpp
             color images for processing.</para>
            
             <para>Sample usage:</para>
             <code>
             // create filter - rotate for 30 degrees keeping original image size
             RotateBicubic filter = new RotateBicubic( 30, true );
             // apply the filter
             Bitmap newImage = filter.Apply( image );
             </code>
             
             <para><b>Initial image:</b></para>
             <img src="img/imaging/sample9.png" width="320" height="240"/>
             <para><b>Result image:</b></para>
             <img src="img/imaging/rotate_bicubic.png" width="320" height="240"/>
             </remarks>
             
             <seealso cref="T:AForge.Imaging.Filters.RotateBilinear"/>
             <seealso cref="T:AForge.Imaging.Filters.RotateNearestNeighbor"/>
             
        </member>
        <member name="M:AForge.Imaging.Filters.RotateBicubic.#ctor(System.Double)">
             <summary>
             Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.RotateBicubic"/> class.
             </summary>
             
             <param name="angle">Rotation angle.</param>
             
             <remarks><para>This constructor sets <see cref="P:AForge.Imaging.Filters.BaseRotateFilter.KeepSize"/> property
             to <see langword="false"/>.</para>
             </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.RotateBicubic.#ctor(System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.RotateBicubic"/> class.
            </summary>
            
            <param name="angle">Rotation angle.</param>
            <param name="keepSize">Keep image size or not.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.RotateBicubic.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="sourceData">Source image data.</param>
             <param name="destinationData">Destination image data.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.RotateBicubic.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="T:AForge.Imaging.Filters.RotateBilinear">
             <summary>
             Rotate image using bilinear interpolation.
             </summary>
             
             <para><note>Rotation is performed in counterclockwise direction.</note></para>
             
             <remarks><para>The class implements image rotation filter using bilinear
             interpolation algorithm.</para>
             
             <para>The filter accepts 8 bpp grayscale images and 24 bpp
             color images for processing.</para>
            
             <para>Sample usage:</para>
             <code>
             // create filter - rotate for 30 degrees keeping original image size
             RotateBilinear filter = new RotateBilinear( 30, true );
             // apply the filter
             Bitmap newImage = filter.Apply( image );
             </code>
             
             <para><b>Initial image:</b></para>
             <img src="img/imaging/sample9.png" width="320" height="240"/>
             <para><b>Result image:</b></para>
             <img src="img/imaging/rotate_bilinear.png" width="320" height="240"/>
             </remarks>
             
             <seealso cref="T:AForge.Imaging.Filters.RotateNearestNeighbor"/>
             <seealso cref="T:AForge.Imaging.Filters.RotateBicubic"/>
             
        </member>
        <member name="M:AForge.Imaging.Filters.RotateBilinear.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.RotateBilinear"/> class.
            </summary>
            
            <param name="angle">Rotation angle.</param>
            
            <remarks><para>This constructor sets <see cref="P:AForge.Imaging.Filters.BaseRotateFilter.KeepSize"/> property
            to <see langword="false"/>.</para>
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.RotateBilinear.#ctor(System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.RotateBilinear"/> class.
            </summary>
            
            <param name="angle">Rotation angle.</param>
            <param name="keepSize">Keep image size or not.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.RotateBilinear.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="sourceData">Source image data.</param>
             <param name="destinationData">Destination image data.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.RotateBilinear.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="T:AForge.Imaging.Filters.RotateNearestNeighbor">
             <summary>
             Rotate image using nearest neighbor algorithm.
             </summary>
             
             <remarks><para>The class implements image rotation filter using nearest
             neighbor algorithm, which does not assume any interpolation.</para>
             
             <para><note>Rotation is performed in counterclockwise direction.</note></para>
             
             <para>The filter accepts 8/16 bpp grayscale images and 24/48 bpp color image
             for processing.</para>
            
             <para>Sample usage:</para>
             <code>
             // create filter - rotate for 30 degrees keeping original image size
             RotateNearestNeighbor filter = new RotateNearestNeighbor( 30, true );
             // apply the filter
             Bitmap newImage = filter.Apply( image );
             </code>
             
             <para><b>Initial image:</b></para>
             <img src="img/imaging/sample9.png" width="320" height="240"/>
             <para><b>Result image:</b></para>
             <img src="img/imaging/rotate_nearest.png" width="320" height="240"/>
             </remarks>
             
             <seealso cref="T:AForge.Imaging.Filters.RotateBilinear"/>
             <seealso cref="T:AForge.Imaging.Filters.RotateBicubic"/>
             
        </member>
        <member name="M:AForge.Imaging.Filters.RotateNearestNeighbor.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.RotateNearestNeighbor"/> class.
            </summary>
            
            <param name="angle">Rotation angle.</param>
            
            <remarks><para>This constructor sets <see cref="P:AForge.Imaging.Filters.BaseRotateFilter.KeepSize"/> property to
            <see langword="false"/>.
            </para></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.RotateNearestNeighbor.#ctor(System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.RotateNearestNeighbor"/> class.
            </summary>
            
            <param name="angle">Rotation angle.</param>
            <param name="keepSize">Keep image size or not.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.RotateNearestNeighbor.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
            <summary>
            Process the filter on the specified image.
            </summary>
            
            <param name="sourceData">Source image data.</param>
            <param name="destinationData">Destination image data.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.RotateNearestNeighbor.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="T:AForge.Imaging.Filters.Shrink">
            <summary>
            Shrink an image by removing specified color from its boundaries.
            </summary>
            
            <remarks><para>Removes pixels with specified color from image boundaries making
            the image smaller in size.</para>
            
            <para>The filter accepts 8 bpp grayscale and 24 bpp color images for processing.</para>
            
            <para>Sample usage:</para>
            <code>
            // create filter
            Shrink filter = new Shrink( Color.Black );
            // apply the filter
            Bitmap newImage = filter.Apply( image );
            </code>
            
            <para><b>Initial image:</b></para>
            <img src="img/imaging/sample2.jpg" width="320" height="240" />
            <para><b>Result image:</b></para>
            <img src="img/imaging/shrink.jpg" width="295" height="226" />
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Shrink.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Shrink"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Shrink.#ctor(Alt.Sketch.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.Shrink"/> class.
            </summary>
            
            <param name="colorToRemove">Color to remove from boundaries.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Shrink.CalculateNewImageSize(AForge.Imaging.UnmanagedImage)">
            <summary>
            Calculates new image size.
            </summary>
            
            <param name="sourceData">Source image data.</param>
            
            <returns>New image size - size of the destination image.</returns>
            
        </member>
        <member name="M:AForge.Imaging.Filters.Shrink.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
            <summary>
            Process the filter on the specified image.
            </summary>
            
            <param name="sourceData">Source image data.</param>
            <param name="destinationData">Destination image data.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.Shrink.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.Shrink.ColorToRemove">
            <summary>
            Color to remove from boundaries.
            </summary>
            
        </member>
        <member name="T:AForge.Imaging.Filters.SimpleQuadrilateralTransformation">
             <summary>
             Performs quadrilateral transformation of an area in the source image.
             </summary>
             
             <remarks><para>The class implements simple algorithm described by
             <a href="http://www.codeguru.com/forum/showpost.php?p=1186454&amp;postcount=2">Olivier Thill</a>
             for transforming quadrilateral area from a source image into rectangular image.
             The idea of the algorithm is based on finding for each line of destination
             rectangular image a corresponding line connecting "left" and "right" sides of
             quadrilateral in a source image. Then the line is linearly transformed into the
             line in destination image.</para>
             
             <para><note>Due to simplicity of the algorithm it does not do any correction for perspective.
             </note></para>
             
             <para><note>To make sure the algorithm works correctly, it is preferred if the
             "left-top" corner of the quadrilateral (screen coordinates system) is
             specified first in the list of quadrilateral's corners. At least
             user need to make sure that the "left" side (side connecting first and the last
             corner) and the "right" side (side connecting second and third corners) are
             not horizontal.</note></para>
             
             <para>Use <see cref="T:AForge.Imaging.Filters.QuadrilateralTransformation"/> to avoid the above mentioned limitations,
             which is a more advanced quadrilateral transformation algorithms (although a bit more
             computationally expensive).</para>
             
             <para>The image processing filter accepts 8 grayscale images and 24/32 bpp
             color images for processing.</para>
             
             <para>Sample usage:</para>
             <code>
             // define quadrilateral's corners
             List&lt;IntPoint&gt; corners = new List&lt;IntPoint&gt;( );
             corners.Add( new IntPoint(  99,  99 ) );
             corners.Add( new IntPoint( 156,  79 ) );
             corners.Add( new IntPoint( 184, 126 ) );
             corners.Add( new IntPoint( 122, 150 ) );
             // create filter
             SimpleQuadrilateralTransformation filter =
                 new SimpleQuadrilateralTransformation( corners, 200, 200 );
             // apply the filter
             Bitmap newImage = filter.Apply( image );
             </code>
             
             <para><b>Initial image:</b></para>
             <img src="img/imaging/sample18.jpg" width="320" height="240"/>
             <para><b>Result image:</b></para>
             <img src="img/imaging/quadrilateral_bilinear.png" width="200" height="200"/>
             </remarks>
             
             <seealso cref="T:AForge.Imaging.Filters.QuadrilateralTransformation"/>
            
        </member>
        <member name="F:AForge.Imaging.Filters.SimpleQuadrilateralTransformation.newWidth">
            <summary>
            New image width.
            </summary>
        </member>
        <member name="F:AForge.Imaging.Filters.SimpleQuadrilateralTransformation.newHeight">
            <summary>
            New image height.
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.SimpleQuadrilateralTransformation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.SimpleQuadrilateralTransformation"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.SimpleQuadrilateralTransformation.#ctor(System.Collections.Generic.List{AForge.IntPoint},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.SimpleQuadrilateralTransformation"/> class.
            </summary>
            
            <param name="sourceQuadrilateral">Corners of the source quadrilateral area.</param>
            <param name="newWidth">Width of the new transformed image.</param>
            <param name="newHeight">Height of the new transformed image.</param>
            
            <remarks><para>This constructor sets <see cref="P:AForge.Imaging.Filters.SimpleQuadrilateralTransformation.AutomaticSizeCalculaton"/> to
            <see langword="false"/>, which means that destination image will have width and
            height as specified by user.</para></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.SimpleQuadrilateralTransformation.#ctor(System.Collections.Generic.List{AForge.IntPoint})">
             <summary>
             Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.SimpleQuadrilateralTransformation"/> class.
             </summary>
             
             <param name="sourceQuadrilateral">Corners of the source quadrilateral area.</param>
             
             <remarks><para>This constructor sets <see cref="P:AForge.Imaging.Filters.SimpleQuadrilateralTransformation.AutomaticSizeCalculaton"/> to
             <see langword="true"/>, which means that destination image will have width and
             height automatically calculated based on <see cref="P:AForge.Imaging.Filters.SimpleQuadrilateralTransformation.SourceQuadrilateral"/> property.</para></remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.SimpleQuadrilateralTransformation.CalculateNewImageSize(AForge.Imaging.UnmanagedImage)">
            <summary>
            Calculates new image size.
            </summary>
            
            <param name="sourceData">Source image data.</param>
            
            <returns>New image size - size of the destination image.</returns>
            
            <exception cref="T:System.NullReferenceException">Source quadrilateral was not set.</exception>
            
        </member>
        <member name="M:AForge.Imaging.Filters.SimpleQuadrilateralTransformation.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
            <summary>
            Process the filter on the specified image.
            </summary>
            
            <param name="sourceData">Source image data.</param>
            <param name="destinationData">Destination image data.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.SimpleQuadrilateralTransformation.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
            
            <remarks><para>See <see cref="P:AForge.Imaging.Filters.IFilterInformation.FormatTranslations"/>
            documentation for additional information.</para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.SimpleQuadrilateralTransformation.AutomaticSizeCalculaton">
            <summary>
            Automatic calculation of destination image or not.
            </summary>
            
            <remarks><para>The property specifies how to calculate size of destination (transformed)
            image. If the property is set to <see langword="false"/>, then <see cref="P:AForge.Imaging.Filters.SimpleQuadrilateralTransformation.NewWidth"/>
            and <see cref="P:AForge.Imaging.Filters.SimpleQuadrilateralTransformation.NewHeight"/> properties have effect and destination image's size is
            specified by user. If the property is set to <see langword="true"/>, then setting the above
            mentioned properties does not have any effect, but destionation image's size is
            automatically calculated from <see cref="P:AForge.Imaging.Filters.SimpleQuadrilateralTransformation.SourceQuadrilateral"/> property - width and height
            come from length of longest edges.
            </para>
            
            <para>Default value is set to <see langword="true"/>.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.SimpleQuadrilateralTransformation.SourceQuadrilateral">
            <summary>
            Quadrilateral's corners in source image.
            </summary>
            
            <remarks><para>The property specifies four corners of the quadrilateral area
            in the source image to be transformed.</para>
            
            <para>See documentation to the <see cref="T:AForge.Imaging.Filters.SimpleQuadrilateralTransformation"/>
            class itself for additional information.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.SimpleQuadrilateralTransformation.NewWidth">
            <summary>
            Width of the new transformed image.
            </summary>
            
            <remarks><para>The property defines width of the destination image, which gets
            transformed quadrilateral image.</para>
            
            <para><note>Setting the property does not have any effect, if <see cref="P:AForge.Imaging.Filters.SimpleQuadrilateralTransformation.AutomaticSizeCalculaton"/>
            property is set to <see langword="true"/>. In this case destination image's width
            is calculated automatically based on <see cref="P:AForge.Imaging.Filters.SimpleQuadrilateralTransformation.SourceQuadrilateral"/> property.</note></para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.SimpleQuadrilateralTransformation.NewHeight">
            <summary>
            Height of the new transformed image.
            </summary>
            
            <remarks><para>The property defines height of the destination image, which gets
            transformed quadrilateral image.</para>
            
            <para><note>Setting the property does not have any effect, if <see cref="P:AForge.Imaging.Filters.SimpleQuadrilateralTransformation.AutomaticSizeCalculaton"/>
            property is set to <see langword="true"/>. In this case destination image's height
            is calculated automatically based on <see cref="P:AForge.Imaging.Filters.SimpleQuadrilateralTransformation.SourceQuadrilateral"/> property.</note></para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.SimpleQuadrilateralTransformation.UseInterpolation">
            <summary>
            Specifies if bilinear interpolation should be used or not.
            </summary>
            
            <remarks><para>Default value is set to <see langword="true"/> - interpolation
            is used.</para>
            </remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.TransformFromPolar">
            <summary>
            Transform polar image into rectangle.
            </summary>
            
            <remarks>The image processing routine is oposite transformation to the one done by <see cref="T:AForge.Imaging.Filters.TransformToPolar"/>
            routine, i.e. transformation from polar image into rectangle. The produced effect is similar to GIMP's
            "Polar Coordinates" distortion filter (or its equivalent in Photoshop).
            
            <para>The filter accepts 8 bpp grayscale and 24/32 bpp color images for processing.</para>
            
            <para>Sample usage:</para>
            <code>
            // create filter
            TransformFromPolar filter = new TransformFromPolar( );
            filter.OffsetAngle = 0;
            filter.CirlceDepth = 1;
            filter.UseOriginalImageSize = false;
            filter.NewSize = new SizeI( 360, 120 );
            // apply the filter
            Bitmap newImage = filter.Apply( image );
            </code>
            
            <para><b>Initial image:</b></para>
            <img src="img/imaging/sample22.png" width="240" height="240"/>
            <para><b>Result image:</b></para>
            <img src="img/imaging/from_polar.png" width="360" height="120"/>
            </remarks>
            
            <seealso cref="T:AForge.Imaging.Filters.TransformToPolar"/>
            
        </member>
        <member name="M:AForge.Imaging.Filters.TransformFromPolar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.TransformFromPolar"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.TransformFromPolar.CalculateNewImageSize(AForge.Imaging.UnmanagedImage)">
            <summary>
            Calculates new image size.
            </summary>
            
            <param name="sourceData">Source image data.</param>
            
            <returns>New image size - size of the destination image.</returns>
            
        </member>
        <member name="M:AForge.Imaging.Filters.TransformFromPolar.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
            <summary>
            Process the filter on the specified image.
            </summary>
            
            <param name="sourceData">Source image data.</param>
            <param name="destinationData">Destination image data.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.TransformFromPolar.CirlceDepth">
            <summary>
            Circularity coefficient of the mapping, [0, 1].
            </summary>
            
            <remarks><para>The property specifies circularity coefficient of the mapping to be done.
            If the coefficient is set to 1, then destination image will be produced by mapping
            ideal circle from the source image, which is placed in source image's centre and its
            radius equals to the minimum distance from centre to the image’s edge. If the coefficient
            is set to 0, then the mapping will use entire area of the source image (circle will
            be extended into direction of edges). Changing the property from 0 to 1 user may balance
            circularity of the produced output.</para>
            
            <para>Default value is set to <b>1</b>.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.TransformFromPolar.OffsetAngle">
            <summary>
            Offset angle used to shift mapping, [-360, 360] degrees.
            </summary>
            
            <remarks><para>The property specifies offset angle, which can be used to shift
            mapping in clockwise direction. For example, if user sets this property to 30, then
            start of polar mapping is shifted by 30 degrees in clockwise direction.</para>
            
            <para>Default value is set to <b>0</b>.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.TransformFromPolar.MapBackwards">
             <summary>
             Specifies direction of mapping.
             </summary>
            
             <remarks><para>The property specifies direction of mapping source image. If the
             property is set to <see langword="false"/>, the image is mapped in clockwise direction;
             otherwise in counter clockwise direction.</para>
             
             <para>Default value is set to <see langword="false"/>.</para>
             </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.TransformFromPolar.MapFromTop">
            <summary>
            Specifies if centre of the source image should to top or bottom of the result image.
            </summary>
            
            <remarks><para>The property specifies position of the source image's centre in the destination image.
            If the property is set to <see langword="true"/>, then it goes to the top of the result image;
            otherwise it goes to the bottom.</para>
            
            <para>Default value is set to <see langword="true"/>.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.TransformFromPolar.NewSize">
            <summary>
            Size of destination image.
            </summary>
            
            <remarks><para>The property specifies size of result image produced by this image
            processing routine in the case if <see cref="P:AForge.Imaging.Filters.TransformFromPolar.UseOriginalImageSize"/> property
            is set to <see langword="false"/>.</para>
            
            <para><note>Both width and height must be in the [1, 10000] range.</note></para>
            
            <para>Default value is set to <b>200 x 200</b>.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.TransformFromPolar.UseOriginalImageSize">
            <summary>
            Use source image size for destination or not.
            </summary>
            
            <remarks><para>The property specifies if the image processing routine should create destination
            image of the same size as original image or of the size specified by <see cref="P:AForge.Imaging.Filters.TransformFromPolar.NewSize"/>
            property.</para>
            
            <para>Default value is set to <see langword="true"/>.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.TransformFromPolar.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
            
            <remarks><para>See <see cref="P:AForge.Imaging.Filters.IFilterInformation.FormatTranslations"/>
            documentation for additional information.</para></remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.TransformToPolar">
            <summary>
            Transform rectangle image into circle (to polar coordinates).
            </summary>
            
            <remarks><para>The image processing routine does transformation of the source image into
            circle (polar transformation). The produced effect is similar to GIMP's "Polar Coordinates"
            distortion filter (or its equivalent in Photoshop).
            </para>
            
            <para>The filter accepts 8 bpp grayscale and 24/32 bpp color images for processing.</para>
            
            <para>Sample usage:</para>
            <code>
            // create filter
            TransformToPolar filter = new TransformToPolar( );
            filter.OffsetAngle = 0;
            filter.CirlceDepth = 1;
            filter.UseOriginalImageSize = false;
            filter.NewSize = new SizeI( 200, 200 );
            // apply the filter
            Bitmap newImage = filter.Apply( image );
            </code>
            
            <para><b>Initial image:</b></para>
            <img src="img/imaging/sample21.png" width="320" height="160"/>
            <para><b>Result image:</b></para>
            <img src="img/imaging/polar.png" width="200" height="200"/>
            </remarks>
            
            <seealso cref="T:AForge.Imaging.Filters.TransformFromPolar"/>
            
        </member>
        <member name="M:AForge.Imaging.Filters.TransformToPolar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.TransformToPolar"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.TransformToPolar.CalculateNewImageSize(AForge.Imaging.UnmanagedImage)">
            <summary>
            Calculates new image size.
            </summary>
            
            <param name="sourceData">Source image data.</param>
            
            <returns>New image size - size of the destination image.</returns>
            
        </member>
        <member name="M:AForge.Imaging.Filters.TransformToPolar.ProcessFilter(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
            <summary>
            Process the filter on the specified image.
            </summary>
            
            <param name="sourceData">Source image data.</param>
            <param name="destinationData">Destination image data.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.TransformToPolar.CirlceDepth">
            <summary>
            Circularity coefficient of the mapping, [0, 1].
            </summary>
            
            <remarks><para>The property specifies circularity coefficient of the mapping to be done.
            If the coefficient is set to 1, then the mapping will produce ideal circle. If the coefficient
            is set to 0, then the mapping will occupy entire area of the destination image (circle will
            be extended into direction of edges). Changing the property from 0 to 1 user may balance
            circularity of the produced output.
            </para>
            
            <para>Default value is set to <b>1</b>.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.TransformToPolar.OffsetAngle">
            <summary>
            Offset angle used to shift mapping, [-360, 360] degrees.
            </summary>
            
            <remarks><para>The property specifies offset angle, which can be used to shift
            mapping in counter clockwise direction. For example, if user sets this property to 30, then
            start of polar mapping is shifted by 30 degrees in counter clockwise direction.</para>
            
            <para>Default value is set to <b>0</b>.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.TransformToPolar.MapBackwards">
             <summary>
             Specifies direction of mapping.
             </summary>
            
             <remarks><para>The property specifies direction of mapping source image's X axis. If the
             property is set to <see langword="false"/>, the image is mapped in clockwise direction;
             otherwise in counter clockwise direction.</para>
             
             <para>Default value is set to <see langword="false"/>.</para>
             </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.TransformToPolar.MapFromTop">
            <summary>
            Specifies if top of the source image should go to center or edge of the result image.
            </summary>
            
            <remarks><para>The property specifies position of the source image's top line in the destination
            image. If the property is set to <see langword="true"/>, then it goes to the center of the result image;
            otherwise it goes to the edge.</para>
            
            <para>Default value is set to <see langword="true"/>.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.TransformToPolar.FillColor">
            <summary>
            Fill color to use for unprocessed areas.
            </summary>
            
            <remarks><para>The property specifies fill color, which is used to fill unprocessed areas.
            In the case if <see cref="P:AForge.Imaging.Filters.TransformToPolar.CirlceDepth"/> is greater than 0, then there will be some areas on
            the image's edge, which are not filled by the produced "circular" image, but are filled by
            the specified color.
            </para>
            
            <para>Default value is set to <see cref="P:Alt.Sketch.Color.White"/>.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.TransformToPolar.NewSize">
            <summary>
            Size of destination image.
            </summary>
            
            <remarks><para>The property specifies size of result image produced by this image
            processing routine in the case if <see cref="P:AForge.Imaging.Filters.TransformToPolar.UseOriginalImageSize"/> property
            is set to <see langword="false"/>.</para>
            
            <para><note>Both width and height must be in the [1, 10000] range.</note></para>
            
            <para>Default value is set to <b>200 x 200</b>.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.TransformToPolar.UseOriginalImageSize">
            <summary>
            Use source image size for destination or not.
            </summary>
            
            <remarks><para>The property specifies if the image processing routine should create destination
            image of the same size as original image or of the size specified by <see cref="P:AForge.Imaging.Filters.TransformToPolar.NewSize"/>
            property.</para>
            
            <para>Default value is set to <see langword="true"/>.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.TransformToPolar.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
            
            <remarks><para>See <see cref="P:AForge.Imaging.Filters.IFilterInformation.FormatTranslations"/>
            documentation for additional information.</para></remarks>
            
        </member>
        <member name="T:AForge.Imaging.Filters.YCbCrFiltering">
            <summary>
            Color filtering in YCbCr color space.
            </summary>
            
            <remarks><para>The filter operates in <b>YCbCr</b> color space and filters
            pixels, which color is inside/outside of the specified YCbCr range - 
            it keeps pixels with colors inside/outside of the specified range and fills the
            rest with <see cref="P:AForge.Imaging.Filters.YCbCrFiltering.FillColor">specified color</see>.</para>
            
            <para>The filter accepts 24 and 32 bpp color images for processing.</para>
            
            <para>Sample usage:</para>
            <code>
            // create filter
            YCbCrFiltering filter = new YCbCrFiltering( );
            // set color ranges to keep
            filter.Cb = new Range( -0.2f, 0.0f );
            filter.Cr = new Range( 0.26f, 0.5f );
            // apply the filter
            filter.ApplyInPlace( image );
            </code>
            
            <para><b>Initial image:</b></para>
            <img src="img/imaging/sample1.jpg" width="480" height="361"/>
            <para><b>Result image:</b></para>
            <img src="img/imaging/ycbcr_filtering.jpg" width="480" height="361"/>
            </remarks>
            
            <seealso cref="T:AForge.Imaging.Filters.ColorFiltering"/>
            <seealso cref="T:AForge.Imaging.Filters.HSLFiltering"/>
            
        </member>
        <member name="M:AForge.Imaging.Filters.YCbCrFiltering.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.YCbCrFiltering"/> class.
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.YCbCrFiltering.#ctor(AForge.Range,AForge.Range,AForge.Range)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.YCbCrFiltering"/> class.
            </summary>
            
            <param name="yRange">Range of Y component.</param>
            <param name="cbRange">Range of Cb component.</param>
            <param name="crRange">Range of Cr component.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.YCbCrFiltering.ProcessFilter(AForge.Imaging.UnmanagedImage,Alt.Sketch.RectI)">
             <summary>
             Process the filter on the specified image.
             </summary>
             
             <param name="image">Source image data.</param>
             <param name="rect">Image rectangle for processing by the filter.</param>
            
        </member>
        <member name="P:AForge.Imaging.Filters.YCbCrFiltering.FormatTranslations">
            <summary>
            Format translations dictionary.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.YCbCrFiltering.Y">
            <summary>
            Range of Y component, [0, 1].
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.Filters.YCbCrFiltering.Cb">
            <summary>
            Range of Cb component, [-0.5, 0.5].
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.Filters.YCbCrFiltering.Cr">
            <summary>
            Range of Cr component, [-0.5, 0.5].
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.Filters.YCbCrFiltering.FillColor">
            <summary>
            Fill color used to fill filtered pixels.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.YCbCrFiltering.FillOutsideRange">
            <summary>
            Determines, if pixels should be filled inside or outside specified
            color range.
            </summary>
            
            <remarks><para>Default value is set to <see langword="true"/>, which means
            the filter removes colors outside of the specified range.</para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.YCbCrFiltering.UpdateY">
            <summary>
            Determines, if Y value of filtered pixels should be updated.
            </summary>
            
            <remarks><para>The property specifies if Y channel of filtered pixels should be
            updated with value from <see cref="P:AForge.Imaging.Filters.YCbCrFiltering.FillColor">fill color</see> or not.</para>
            
            <para>Default value is set to <see langword="true"/>.</para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.YCbCrFiltering.UpdateCb">
            <summary>
            Determines, if Cb value of filtered pixels should be updated.
            </summary>
            
            <remarks><para>The property specifies if Cb channel of filtered pixels should be
            updated with value from <see cref="P:AForge.Imaging.Filters.YCbCrFiltering.FillColor">fill color</see> or not.</para>
            
            <para>Default value is set to <see langword="true"/>.</para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.YCbCrFiltering.UpdateCr">
            <summary>
            Determines, if Cr value of filtered pixels should be updated.
            </summary>
            
            <remarks><para>The property specifies if Cr channel of filtered pixels should be
            updated with value from <see cref="P:AForge.Imaging.Filters.YCbCrFiltering.FillColor">fill color</see> or not.</para>
            
            <para>Default value is set to <see langword="true"/>.</para></remarks>
            
        </member>
        <member name="T:AForge.Imaging.HorizontalIntensityStatistics">
            <summary>
            Horizontal intensity statistics.
            </summary>
            
            <remarks><para>The class provides information about horizontal distribution
            of pixel intensities, which may be used to locate objects, their centers, etc.
            </para>
            
            <para>The class accepts grayscale (8 bpp indexed and 16 bpp) and color (24, 32, 48 and 64 bpp) images.
            In the case of 32 and 64 bpp color images, the alpha channel is not processed - statistics is not
            gathered for this channel.</para>
            
            <para>Sample usage:</para>
            <code>
            // collect statistics
            HorizontalIntensityStatistics his = new HorizontalIntensityStatistics( sourceImage );
            // get gray histogram (for grayscale image)
            Histogram histogram = his.Gray;
            // output some histogram's information
            System.Diagnostics.Debug.WriteLine( "Mean = " + histogram.Mean );
            System.Diagnostics.Debug.WriteLine( "Min = " + histogram.Min );
            System.Diagnostics.Debug.WriteLine( "Max = " + histogram.Max );
            </code>
            
            <para><b>Sample grayscale image with its horizontal intensity histogram:</b></para>
            <img src="img/imaging/hor_histogram.jpg" width="320" height="338"/>
            </remarks>
            
            <seealso cref="T:AForge.Imaging.VerticalIntensityStatistics"/>
            
        </member>
        <member name="M:AForge.Imaging.HorizontalIntensityStatistics.#ctor(Alt.Sketch.Bitmap)">
             <summary>
             Initializes a new instance of the <see cref="T:AForge.Imaging.HorizontalIntensityStatistics"/> class.
             </summary>
             
             <param name="image">Source image.</param>
            
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
             
        </member>
        <member name="M:AForge.Imaging.HorizontalIntensityStatistics.#ctor(Alt.Sketch.BitmapData)">
             <summary>
             Initializes a new instance of the <see cref="T:AForge.Imaging.HorizontalIntensityStatistics"/> class.
             </summary>
             
             <param name="imageData">Source image data.</param>
            
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
             
        </member>
        <member name="M:AForge.Imaging.HorizontalIntensityStatistics.#ctor(AForge.Imaging.UnmanagedImage)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.HorizontalIntensityStatistics"/> class.
            </summary>
            
            <param name="image">Source unmanaged image.</param>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.HorizontalIntensityStatistics.ProcessImage(AForge.Imaging.UnmanagedImage)">
            <summary>
            Gather horizontal intensity statistics for specified image.
            </summary>
            
            <param name="image">Source image.</param>
            
        </member>
        <member name="P:AForge.Imaging.HorizontalIntensityStatistics.Red">
            <summary>
            Histogram for red channel.
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.HorizontalIntensityStatistics.Green">
            <summary>
            Histogram for green channel.
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.HorizontalIntensityStatistics.Blue">
            <summary>
            Histogram for blue channel.
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.HorizontalIntensityStatistics.Gray">
            <summary>
            Histogram for gray channel (intensities).
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.HorizontalIntensityStatistics.IsGrayscale">
            <summary>
            Value wich specifies if the processed image was color or grayscale.
            </summary>
            
            <remarks><para>If the property equals to <b>true</b>, then the <see cref="P:AForge.Imaging.HorizontalIntensityStatistics.Gray"/>
            property should be used to retrieve histogram for the processed grayscale image.
            Otherwise <see cref="P:AForge.Imaging.HorizontalIntensityStatistics.Red"/>, <see cref="P:AForge.Imaging.HorizontalIntensityStatistics.Green"/> and <see cref="P:AForge.Imaging.HorizontalIntensityStatistics.Blue"/> property
            should be used to retrieve histogram for particular RGB channel of the processed
            color image.</para></remarks>
            
        </member>
        <member name="T:AForge.Imaging.IBlobsFilter">
             <summary>
             Interface for custom blobs' filters used for filtering blobs after
             blob counting.
             </summary>
             
             <remarks><para>The interface should be implemented by classes, which perform
             custom blobs' filtering different from default filtering implemented in
             <see cref="T:AForge.Imaging.BlobCounterBase"/>. See <see cref="P:AForge.Imaging.BlobCounterBase.BlobsFilter"/>
             for additional information.</para>
             </remarks>
            
        </member>
        <member name="M:AForge.Imaging.IBlobsFilter.Check(AForge.Imaging.Blob)">
             <summary>
             Check specified blob and decide if should be kept or not.
             </summary>
             
             <param name="blob">Blob to check.</param>
             
             <returns>Return <see langword="true"/> if the blob should be kept or
             <see langword="false"/> if it should be removed.</returns>
            
        </member>
        <member name="T:AForge.Imaging.ICornersDetector">
            <summary>
            Corners detector's interface.
            </summary>
            
            <remarks><para>The interface specifies set of methods, which should be implemented by different
            corners detection algorithms.</para></remarks>
            
        </member>
        <member name="M:AForge.Imaging.ICornersDetector.ProcessImage(Alt.Sketch.Bitmap)">
            <summary>
            Process image looking for corners.
            </summary>
            
            <param name="image">Source image to process.</param>
            
            <returns>Returns list of found corners (X-Y coordinates).</returns>
            
        </member>
        <member name="M:AForge.Imaging.ICornersDetector.ProcessImage(Alt.Sketch.BitmapData)">
            <summary>
            Process image looking for corners.
            </summary>
            
            <param name="imageData">Source image data to process.</param>
            
            <returns>Returns list of found corners (X-Y coordinates).</returns>
            
        </member>
        <member name="M:AForge.Imaging.ICornersDetector.ProcessImage(AForge.Imaging.UnmanagedImage)">
            <summary>
            Process image looking for corners.
            </summary>
            
            <param name="image">Unmanaged source image to process.</param>
            
            <returns>Returns list of found corners (X-Y coordinates).</returns>
            
        </member>
        <member name="T:AForge.Imaging.Image">
            <summary>
            Core image relatad methods.
            </summary>
            
            <remarks>All methods of this class are static and represent general routines
            used by different image processing classes.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Image.Clone(Alt.Sketch.Bitmap,Alt.Sketch.PixelFormat)">
             <summary>
             Clone image.
             </summary>
             
             <param name="source">Source image.</param>
             <param name="format">Pixel format of result image.</param>
             
             <returns>Returns clone of the source image with specified pixel format.</returns>
            
             <remarks>The original <see cref="!:Alt.Sketch.Bitmap.Clone(System.RectI, System.Drawing.Imaging.PixelFormat)">Bitmap.Clone()</see>
             does not produce the desired result - it does not create a clone with specified pixel format.
             More of it, the original method does not create an actual clone - it does not create a copy
             of the image. That is why this method was implemented to provide the functionality.</remarks> 
            
        </member>
        <member name="M:AForge.Imaging.Image.Clone(Alt.Sketch.Bitmap)">
            <summary>
            Clone image.
            </summary>
            
            <param name="source">Source image.</param>
            
            <returns>Return clone of the source image.</returns>
            
            <remarks>The original <see cref="!:Alt.Sketch.Bitmap.Clone(System.RectI, System.Drawing.Imaging.PixelFormat)">Bitmap.Clone()</see>
            does not produce the desired result - it does not create an actual clone (it does not create a copy
            of the image). That is why this method was implemented to provide the functionality.</remarks> 
            
        </member>
        <member name="M:AForge.Imaging.Image.Clone(Alt.Sketch.BitmapData)">
             <summary>
             Clone image.
             </summary>
             
             <param name="sourceData">Source image data.</param>
            
             <returns>Clones image from source image data. The message does not clone pallete in the
             case if the source image has indexed pixel format.</returns>
             
        </member>
        <member name="M:AForge.Imaging.Image.FromFile(System.String)">
            <summary>
            Load bitmap from file.
            </summary>
            
            <param name="fileName">File name to load bitmap from.</param>
            
            <returns>Returns loaded bitmap.</returns>
            
            <remarks><para>The method is provided as an alternative of <see cref="!:System.Drawing.Image.FromFile(string)"/>
            method to solve the issues of locked file. The standard .NET's method locks the source file until
            image's object is disposed, so the file can not be deleted or overwritten. This method workarounds the issue and
            does not lock the source file.</para>
            
            <para>Sample usage:</para>
            <code>
            Bitmap image = AForge.Imaging.Image.FromFile( "test.jpg" );
            </code>
            </remarks>
            
        </member>
        <member name="T:AForge.Imaging.ImageStatistics">
            <summary>
            Gather statistics about image in RGB color space.
            </summary>
            
            <remarks><para>The class is used to accumulate statistical values about images,
            like histogram, mean, standard deviation, etc. for each color channel in RGB color
            space.</para>
            
            <para>The class accepts 8 bpp grayscale and 24/32 bpp color images for processing.</para>
            
            <para>Sample usage:</para>
            <code>
            // gather statistics
            ImageStatistics stat = new ImageStatistics( image );
            // get red channel's histogram
            Histogram red = stat.Red;
            // check mean value of red channel
            if ( red.Mean &gt; 128 )
            {
                // do further processing
            }
            </code>
            </remarks>
            
            <seealso cref="T:AForge.Math.Histogram"/>
            
        </member>
        <member name="M:AForge.Imaging.ImageStatistics.#ctor(Alt.Sketch.Bitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.ImageStatistics"/> class.
            </summary>
            
            <param name="image">Image to gather statistics about.</param>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Source pixel format is not supported.</exception>
            
        </member>
        <member name="M:AForge.Imaging.ImageStatistics.#ctor(Alt.Sketch.Bitmap,System.Byte[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.ImageStatistics"/> class.
            </summary>
            
            <param name="image">Image to gather statistics about.</param>
            <param name="mask">Mask array which specifies areas to collect statistics for.</param>
            
            <remarks><para>The mask array must be of the same size as the specified source image, where 0 values
            correspond to areas which should be excluded from processing. So statistics is calculated only for pixels,
            which have none zero corresponding value in the mask.
            </para></remarks>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Source pixel format is not supported.</exception>
            <exception cref="T:System.ArgumentException">Mask must have the same size as the source image to get statistics for.</exception>
            
        </member>
        <member name="M:AForge.Imaging.ImageStatistics.#ctor(AForge.Imaging.UnmanagedImage)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.ImageStatistics"/> class.
            </summary>
            
            <param name="image">Unmanaged image to gather statistics about.</param>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Source pixel format is not supported.</exception>
            
        </member>
        <member name="M:AForge.Imaging.ImageStatistics.#ctor(AForge.Imaging.UnmanagedImage,System.Byte[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.ImageStatistics"/> class.
            </summary>
            
            <param name="image">Image to gather statistics about.</param>
            <param name="mask">Mask array which specifies areas to collect statistics for.</param>
            
            <remarks><para>The mask array must be of the same size as the specified source image, where 0 values
            correspond to areas which should be excluded from processing. So statistics is calculated only for pixels,
            which have none zero corresponding value in the mask.
            </para></remarks>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Source pixel format is not supported.</exception>
            <exception cref="T:System.ArgumentException">Mask must have the same size as the source image to get statistics for.</exception>
            
        </member>
        <member name="P:AForge.Imaging.ImageStatistics.Red">
            <summary>
            Histogram of red channel.
            </summary>
            
            <remarks><para><note>The property is valid only for color images
            (see <see cref="P:AForge.Imaging.ImageStatistics.IsGrayscale"/> property).</note></para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.ImageStatistics.Green">
            <summary>
            Histogram of green channel.
            </summary>
            
            <remarks><para><note>The property is valid only for color images
            (see <see cref="P:AForge.Imaging.ImageStatistics.IsGrayscale"/> property).</note></para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.ImageStatistics.Blue">
            <summary>
            Histogram of blue channel.
            </summary>
            
            <remarks><para><note>The property is valid only for color images
            (see <see cref="P:AForge.Imaging.ImageStatistics.IsGrayscale"/> property).</note></para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.ImageStatistics.Gray">
            <summary>
            Histogram of gray channel.
            </summary>
            
            <remarks><para><note>The property is valid only for grayscale images
            (see <see cref="P:AForge.Imaging.ImageStatistics.IsGrayscale"/> property).</note></para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.ImageStatistics.RedWithoutBlack">
            <summary>
            Histogram of red channel excluding black pixels.
            </summary>
            
            <remarks><para>The property keeps statistics about red channel, which
            excludes all black pixels, what affects mean, standard deviation, etc.</para>
            
            <para><note>The property is valid only for color images
            (see <see cref="P:AForge.Imaging.ImageStatistics.IsGrayscale"/> property).</note></para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.ImageStatistics.GreenWithoutBlack">
            <summary>
            Histogram of green channel excluding black pixels.
            </summary>
            
            <remarks><para>The property keeps statistics about green channel, which
            excludes all black pixels, what affects mean, standard deviation, etc.</para>
            
            <para><note>The property is valid only for color images
            (see <see cref="P:AForge.Imaging.ImageStatistics.IsGrayscale"/> property).</note></para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.ImageStatistics.BlueWithoutBlack">
            <summary>
            Histogram of blue channel excluding black pixels
            </summary>
            
            <remarks><para>The property keeps statistics about blue channel, which
            excludes all black pixels, what affects mean, standard deviation, etc.</para>
            
            <para><note>The property is valid only for color images
            (see <see cref="P:AForge.Imaging.ImageStatistics.IsGrayscale"/> property).</note></para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.ImageStatistics.GrayWithoutBlack">
            <summary>
            Histogram of gray channel channel excluding black pixels.
            </summary>
            
            <remarks><para>The property keeps statistics about gray channel, which
            excludes all black pixels, what affects mean, standard deviation, etc.</para>
            
            <para><note>The property is valid only for grayscale images
            (see <see cref="P:AForge.Imaging.ImageStatistics.IsGrayscale"/> property).</note></para></remarks>
            
        </member>
        <member name="P:AForge.Imaging.ImageStatistics.PixelsCount">
            <summary>
            Total pixels count in the processed image.
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.ImageStatistics.PixelsCountWithoutBlack">
            <summary>
            Total pixels count in the processed image excluding black pixels.
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.ImageStatistics.IsGrayscale">
            <summary>
            Value wich specifies if the processed image was color or grayscale.
            </summary>
            
            <remarks><para>If the value is set to <see langword="true"/> then <see cref="P:AForge.Imaging.ImageStatistics.Gray"/>
            property should be used to get statistics information about image. Otherwise
            <see cref="P:AForge.Imaging.ImageStatistics.Red"/>, <see cref="P:AForge.Imaging.ImageStatistics.Green"/> and <see cref="P:AForge.Imaging.ImageStatistics.Blue"/> properties should be used
            for color images.</para></remarks>
            
        </member>
        <member name="T:AForge.Imaging.Interpolation">
            <summary>
            Interpolation routines.
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Interpolation.BiCubicKernel(System.Double)">
            <summary>
            Bicubic kernel.
            </summary>
            
            <param name="x">X value.</param>
            
            <returns>Bicubic cooefficient.</returns>
            
            <remarks><para>The function implements bicubic kernel W(x) as described on
            <a href="http://en.wikipedia.org/wiki/Bicubic_interpolation#Bicubic_convolution_algorithm">Wikipedia</a>
            (coefficient <b>a</b> is set to <b>-0.5</b>).</para></remarks>
            
        </member>
        <member name="T:AForge.Imaging.MemoryManager">
            <summary>
            Internal memory manager used by image processing routines.
            </summary>
            
            <remarks><para>The memory manager supports memory allocation/deallocation
            caching. Caching means that memory blocks may be not freed on request, but
            kept for later reuse.</para></remarks>
            
        </member>
        <member name="M:AForge.Imaging.MemoryManager.Alloc(System.Int32)">
            <summary>
            Allocate unmanaged memory.
            </summary>
            
            <param name="size">Memory size to allocate.</param>
            
            <returns>Return's pointer to the allocated memory buffer.</returns>
            
            <remarks>The method allocates requested amount of memory and returns pointer to it. It may avoid allocation
            in the case some caching scheme is uses and there is already enough allocated memory available.</remarks>
            
            <exception cref="T:System.OutOfMemoryException">There is insufficient memory to satisfy the request.</exception>
            
        </member>
        <member name="M:AForge.Imaging.MemoryManager.Free(System.IntPtr)">
            <summary>
            Free unmanaged memory.
            </summary>
            
            <param name="pointer">Pointer to memory buffer to free.</param>
            
            <remarks>This method may skip actual deallocation of memory and keep it for future <see cref="M:AForge.Imaging.MemoryManager.Alloc(System.Int32)"/> requests,
            if some caching scheme is used.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.MemoryManager.FreeUnusedMemory">
            <summary>
            Force freeing unused memory.
            </summary>
            
            <remarks>Frees and removes from cache memory blocks, which are not used by users.</remarks>
            
            <returns>Returns number of freed memory blocks.</returns>
            
        </member>
        <member name="P:AForge.Imaging.MemoryManager.MaximumCacheSize">
            <summary>
            Maximum amount of memory blocks to keep in cache.
            </summary>
            
            <remarks><para>The value specifies the amount of memory blocks, which could be
            cached by the memory manager.</para>
            
            <para>Default value is set to 3. Maximum value is 10.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Imaging.MemoryManager.CurrentCacheSize">
            <summary>
            Current amount of memory blocks in cache.
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.MemoryManager.BusyMemoryBlocks">
            <summary>
            Amount of busy memory blocks in cache (which were not freed yet by user).
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.MemoryManager.FreeMemoryBlocks">
            <summary>
            Amount of free memory blocks in cache (which are not busy by users).
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.MemoryManager.CachedMemory">
            <summary>
            Amount of cached memory in bytes.
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.MemoryManager.MaxSizeToCache">
            <summary>
            Maximum memory block's size in bytes, which could be cached.
            </summary>
            
            <remarks>Memory blocks, which size is greater than this value, are not cached.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.MemoryManager.MinSizeToCache">
            <summary>
            Minimum memory block's size in bytes, which could be cached.
            </summary>
            
            <remarks>Memory blocks, which size is less than this value, are not cached.</remarks>
            
        </member>
        <member name="T:AForge.Imaging.MoravecCornersDetector">
            <summary>
            Moravec corners detector.
            </summary>
            
            <remarks><para>The class implements Moravec corners detector. For information about algorithm's
            details its <a href="http://www.cim.mcgill.ca/~dparks/CornerDetector/mainMoravec.htm">description</a>
            should be studied.</para>
            
            <para><note>Due to limitations of Moravec corners detector (anisotropic response, etc.) its usage is limited
            to certain cases only.</note></para>
            
            <para>The class processes only grayscale 8 bpp and color 24/32 bpp images.</para>
            
            <para>Sample usage:</para>
            <code>
            // create corner detector's instance
            MoravecCornersDetector mcd = new MoravecCornersDetector( );
            // process image searching for corners
            List&lt;IntPoint&gt; corners = scd.ProcessImage( image );
            // process points
            foreach ( IntPoint corner in corners )
            {
                // ... 
            }
            </code>
            </remarks>
            
            <seealso cref="!:SusanCornersDetector"/>
            
        </member>
        <member name="M:AForge.Imaging.MoravecCornersDetector.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.MoravecCornersDetector"/> class.
            </summary>
        </member>
        <member name="M:AForge.Imaging.MoravecCornersDetector.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.MoravecCornersDetector"/> class.
            </summary>
            
            <param name="threshold">Threshold value, which is used to filter out uninteresting points.</param>
            
        </member>
        <member name="M:AForge.Imaging.MoravecCornersDetector.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.MoravecCornersDetector"/> class.
            </summary>
            
            <param name="threshold">Threshold value, which is used to filter out uninteresting points.</param>
            <param name="windowSize">Window size used to determine if point is interesting.</param>
            
        </member>
        <member name="M:AForge.Imaging.MoravecCornersDetector.ProcessImage(Alt.Sketch.Bitmap)">
            <summary>
            Process image looking for corners.
            </summary>
            
            <param name="image">Source image to process.</param>
            
            <returns>Returns array of found corners (X-Y coordinates).</returns>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">The source image has incorrect pixel format.</exception>
            
        </member>
        <member name="M:AForge.Imaging.MoravecCornersDetector.ProcessImage(Alt.Sketch.BitmapData)">
            <summary>
            Process image looking for corners.
            </summary>
            
            <param name="imageData">Source image data to process.</param>
            
            <returns>Returns array of found corners (X-Y coordinates).</returns>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">The source image has incorrect pixel format.</exception>
            
        </member>
        <member name="M:AForge.Imaging.MoravecCornersDetector.ProcessImage(AForge.Imaging.UnmanagedImage)">
             <summary>
             Process image looking for corners.
             </summary>
             
             <param name="image">Unmanaged source image to process.</param>
             
             <returns>Returns array of found corners (X-Y coordinates).</returns>
            
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">The source image has incorrect pixel format.</exception>
             
        </member>
        <member name="P:AForge.Imaging.MoravecCornersDetector.WindowSize">
            <summary>
            Window size used to determine if point is interesting, [3, 15].
            </summary>
            
            <remarks><para>The value specifies window size, which is used for initial searching of
            corners candidates and then for searching local maximums.</para>
            
            <para>Default value is set to <b>3</b>.</para>
            </remarks>
            
            <exception cref="T:System.ArgumentException">Setting value is not odd.</exception>
            
        </member>
        <member name="P:AForge.Imaging.MoravecCornersDetector.Threshold">
            <summary>
            Threshold value, which is used to filter out uninteresting points.
            </summary>
            
            <remarks><para>The value is used to filter uninteresting points - points which have value below
            specified threshold value are treated as not corners candidates. Increasing this value decreases
            the amount of detected point.</para>
            
            <para>Default value is set to <b>500</b>.</para>
            </remarks>
            
        </member>
        <member name="T:AForge.Imaging.QuadrilateralFinder">
             <summary>
             Searching of quadrilateral/triangle corners.
             </summary>
            
             <remarks><para>The class searches for quadrilateral's/triangle's corners on the specified image.
             It first collects edge points of the object and then uses
             <see cref="M:AForge.Math.Geometry.PointsCloud.FindQuadrilateralCorners(System.Collections.Generic.IEnumerable{AForge.IntPoint})"/> to find corners
             the quadrilateral/triangle.</para>
             
             <para><note>The class treats all black pixels as background (none-object) and
             all none-black pixels as object.</note></para>
             
             <para>The class processes grayscale 8 bpp and color 24/32 bpp images.</para>
             
             <para>Sample usage:</para>
             <code>
             // get corners of the quadrilateral
             QuadrilateralFinder qf = new QuadrilateralFinder( );
             List&lt;IntPoint&gt; corners = qf.ProcessImage( image );
             
             // lock image to draw on it with AForge.NET's methods
             // (or draw directly on image without locking if it is unmanaged image)
             BitmapData data = image.LockBits( new RectI( 0, 0, image.Width, image.Height ),
                 ImageLockMode.ReadWrite, image.PixelFormat );
             
             Drawing.Polygon( data, corners, Color.Red );
             for ( int i = 0; i &lt; corners.Count; i++ )
             {
                 Drawing.FillRectangle( data,
                     new RectI( corners[i].X - 2, corners[i].Y - 2, 5, 5 ),
                     Color.FromArgb( i * 32 + 127 + 32, i * 64, i * 64 ) );
             }
             
             image.UnlockBits( data );
             </code>
             
             <para><b>Source image:</b></para>
             <img src="img/imaging/sample17.png" width="320" height="240"/>
             <para><b>Result image:</b></para>
             <img src="img/imaging/quadrilateral_finder.png" width="320" height="240"/>
             </remarks>
            
        </member>
        <member name="M:AForge.Imaging.QuadrilateralFinder.ProcessImage(Alt.Sketch.Bitmap)">
             <summary>
             Find corners of quadrilateral/triangular area in the specified image.
             </summary>
             
             <param name="image">Source image to search quadrilateral for.</param>
             
             <returns>Returns a list of points, which are corners of the quadrilateral/triangular area found
             in the specified image. The first point in the list is the point with lowest
             X coordinate (and with lowest Y if there are several points with the same X value).
             Points are in clockwise order (screen coordinates system).</returns>
            
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
             
        </member>
        <member name="M:AForge.Imaging.QuadrilateralFinder.ProcessImage(Alt.Sketch.BitmapData)">
             <summary>
             Find corners of quadrilateral/triangular area in the specified image.
             </summary>
             
             <param name="imageData">Source image data to search quadrilateral for.</param>
             
             <returns>Returns a list of points, which are corners of the quadrilateral/triangular area found
             in the specified image. The first point in the list is the point with lowest
             X coordinate (and with lowest Y if there are several points with the same X value).
             Points are in clockwise order (screen coordinates system).</returns>
            
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
             
        </member>
        <member name="M:AForge.Imaging.QuadrilateralFinder.ProcessImage(AForge.Imaging.UnmanagedImage)">
             <summary>
             Find corners of quadrilateral/triangular area in the specified image.
             </summary>
             
             <param name="image">Source image to search quadrilateral for.</param>
             
             <returns>Returns a list of points, which are corners of the quadrilateral/triangular area found
             in the specified image. The first point in the list is the point with lowest
             X coordinate (and with lowest Y if there are several points with the same X value).
             Points are in clockwise order (screen coordinates system).</returns>
            
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
             
        </member>
        <member name="T:AForge.Imaging.RecursiveBlobCounter">
            <summary>
            Blob counter based on recursion.
            </summary>
            
            <remarks><para>The class counts and extracts stand alone objects in
            images using recursive version of connected components labeling
            algorithm.</para>
            
            <para><note>The algorithm treats all pixels with values less or equal to <see cref="P:AForge.Imaging.RecursiveBlobCounter.BackgroundThreshold"/>
            as background, but pixels with higher values are treated as objects' pixels.</note></para>
            
            <para><note>Since this algorithm is based on recursion, it is
            required to be careful with its application to big images with big blobs,
            because in this case recursion will require big stack size and may lead
            to stack overflow. The recursive version may be applied (and may be even
            faster than <see cref="T:AForge.Imaging.BlobCounter"/>) to an image with small blobs -
            "star sky" image (or small cells, for example, etc).</note></para>
            
            <para>For blobs' searching the class supports 8 bpp indexed grayscale images and
            24/32 bpp color images. 
            See documentation about <see cref="T:AForge.Imaging.BlobCounterBase"/> for information about which
            pixel formats are supported for extraction of blobs.</para>
            
            <para>Sample usage:</para>
            <code>
            // create an instance of blob counter algorithm
            RecursiveBlobCounter bc = new RecursiveBlobCounter( );
            // process binary image
            bc.ProcessImage( image );
            RectI[] rects = bc.GetObjectsRectangles( );
            // process blobs
            foreach ( RectI rect in rects )
            {
                // ...
            }
            </code>
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.RecursiveBlobCounter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.RecursiveBlobCounter"/> class.
            </summary>
            
            <remarks>Creates new instance of the <see cref="T:AForge.Imaging.RecursiveBlobCounter"/> class with
            an empty objects map. Before using methods, which provide information about blobs
            or extract them, the <see cref="M:AForge.Imaging.BlobCounterBase.ProcessImage(Alt.Sketch.Bitmap)"/>,
            <see cref="M:AForge.Imaging.BlobCounterBase.ProcessImage(Alt.Sketch.BitmapData)"/> or <see cref="M:AForge.Imaging.BlobCounterBase.ProcessImage(AForge.Imaging.UnmanagedImage)"/>
            method should be called to collect objects map.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.RecursiveBlobCounter.#ctor(Alt.Sketch.Bitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.RecursiveBlobCounter"/> class.
            </summary>
            
            <param name="image">Image to look for objects in.</param>
            
        </member>
        <member name="M:AForge.Imaging.RecursiveBlobCounter.#ctor(Alt.Sketch.BitmapData)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.RecursiveBlobCounter"/> class.
            </summary>
            
            <param name="imageData">Image data to look for objects in.</param>
            
        </member>
        <member name="M:AForge.Imaging.RecursiveBlobCounter.#ctor(AForge.Imaging.UnmanagedImage)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.RecursiveBlobCounter"/> class.
            </summary>
            
            <param name="image">Unmanaged image to look for objects in.</param>
            
        </member>
        <member name="M:AForge.Imaging.RecursiveBlobCounter.BuildObjectsMap(AForge.Imaging.UnmanagedImage)">
            <summary>
            Actual objects map building.
            </summary>
            
            <param name="image">Unmanaged image to process.</param>
            
            <remarks>The method supports 8 bpp indexed grayscale images and 24/32 bpp color images.</remarks>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="P:AForge.Imaging.RecursiveBlobCounter.BackgroundThreshold">
             <summary>
             Background threshold's value.
             </summary>
             
             <remarks><para>The property sets threshold value for distinguishing between background
             pixel and objects' pixels. All pixel with values less or equal to this property are
             treated as background, but pixels with higher values are treated as objects' pixels.</para>
             
             <para><note>In the case of colour images a pixel is treated as objects' pixel if <b>any</b> of its
             RGB values are higher than corresponding values of this threshold.</note></para>
             
             <para><note>For processing grayscale image, set the property with all RGB components eqaul.</note></para>
            
             <para>Default value is set to <b>(0, 0, 0)</b> - black colour.</para></remarks>
             
        </member>
        <member name="T:AForge.Imaging.TemplateMatch">
            <summary>
            Template match class keeps information about found template match. The class is
            used with template matching algorithms implementing <see cref="T:AForge.Imaging.ITemplateMatching"/>
            interface.
            </summary>
        </member>
        <member name="M:AForge.Imaging.TemplateMatch.#ctor(Alt.Sketch.RectI,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.TemplateMatch"/> class.
            </summary>
            
            <param name="rect">Rectangle of the matching area.</param>
            <param name="similarity">Similarity between template and found matching, [0..1].</param>
            
        </member>
        <member name="P:AForge.Imaging.TemplateMatch.Rectangle">
            <summary>
            Rectangle of the matching area.
            </summary>
        </member>
        <member name="P:AForge.Imaging.TemplateMatch.Similarity">
            <summary>
            Similarity between template and found matching, [0..1].
            </summary>
        </member>
        <member name="T:AForge.Imaging.Textures.CloudsTexture">
             <summary>
             Clouds texture.
             </summary>
             
             <remarks><para>The texture generator creates textures with effect of clouds.</para>
             
             <para>The generator is based on the <see cref="T:AForge.Math.PerlinNoise">Perlin noise function</see>.</para>
             
             <para>Sample usage:</para>
             <code>
             // create texture generator
             CloudsTexture textureGenerator = new CloudsTexture( );
             // generate new texture
             float[,] texture = textureGenerator.Generate( 320, 240 );
             // convert it to image to visualize
             Bitmap textureImage = TextureTools.ToBitmap( texture );
             </code>
            
             <para><b>Result image:</b></para>
             <img src="img/imaging/clouds_texture.jpg" width="320" height="240"/>
             </remarks>
             
        </member>
        <member name="T:AForge.Imaging.Textures.ITextureGenerator">
            <summary>
            Texture generator interface.
            </summary>
            
            <remarks><para>Each texture generator generates a 2-D texture of the specified size and returns
            it as two dimensional array of intensities in the range of [0, 1] - texture's values.</para>
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Textures.ITextureGenerator.Generate(System.Int32,System.Int32)">
            <summary>
            Generate texture.
            </summary>
            
            <param name="width">Texture's width.</param>
            <param name="height">Texture's height.</param>
            
            <returns>Two dimensional array of texture's intensities.</returns>
            
            <remarks>Generates new texture of the specified size.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Textures.ITextureGenerator.Reset">
            <summary>
            Reset generator.
            </summary>
            
            <remarks>Resets the generator - resets all internal variables, regenerates
            internal random numbers, etc.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Textures.CloudsTexture.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Textures.CloudsTexture"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Textures.CloudsTexture.Generate(System.Int32,System.Int32)">
            <summary>
            Generate texture.
            </summary>
            
            <param name="width">Texture's width.</param>
            <param name="height">Texture's height.</param>
            
            <returns>Two dimensional array of intensities.</returns>
            
            <remarks>Generates new texture of the specified size.</remarks>
             
        </member>
        <member name="M:AForge.Imaging.Textures.CloudsTexture.Reset">
            <summary>
            Reset generator.
            </summary>
            
            <remarks>Regenerates internal random numbers.</remarks>
            
        </member>
        <member name="T:AForge.Imaging.Textures.LabyrinthTexture">
             <summary>
             Labirinth texture.
             </summary>
             
             <remarks><para>The texture generator creates textures with effect of labyrinth.</para>
             
             <para>The generator is based on the <see cref="T:AForge.Math.PerlinNoise">Perlin noise function</see>.</para>
             
             <para>Sample usage:</para>
             <code>
             // create texture generator
             LabyrinthTexture textureGenerator = new LabyrinthTexture( );
             // generate new texture
             float[,] texture = textureGenerator.Generate( 320, 240 );
             // convert it to image to visualize
             Bitmap textureImage = TextureTools.ToBitmap( texture );
             </code>
            
             <para><b>Result image:</b></para>
             <img src="img/imaging/labyrinth_texture.jpg" width="320" height="240"/>
             </remarks>
             
        </member>
        <member name="M:AForge.Imaging.Textures.LabyrinthTexture.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Textures.LabyrinthTexture"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Textures.LabyrinthTexture.Generate(System.Int32,System.Int32)">
            <summary>
            Generate texture.
            </summary>
            
            <param name="width">Texture's width.</param>
            <param name="height">Texture's height.</param>
            
            <returns>Two dimensional array of intensities.</returns>
            
            <remarks>Generates new texture of the specified size.</remarks>
             
        </member>
        <member name="M:AForge.Imaging.Textures.LabyrinthTexture.Reset">
            <summary>
            Reset generator.
            </summary>
            
            <remarks>Regenerates internal random numbers.</remarks>
            
        </member>
        <member name="T:AForge.Imaging.Textures.MarbleTexture">
             <summary>
             Marble texture.
             </summary>
             
             <remarks><para>The texture generator creates textures with effect of marble.
             The <see cref="P:AForge.Imaging.Textures.MarbleTexture.XPeriod"/> and <see cref="P:AForge.Imaging.Textures.MarbleTexture.YPeriod"/> properties allow to control the look
             of marble texture in X/Y directions.</para>
             
             <para>The generator is based on the <see cref="T:AForge.Math.PerlinNoise">Perlin noise function</see>.</para>
             
             <para>Sample usage:</para>
             <code>
             // create texture generator
             MarbleTexture textureGenerator = new MarbleTexture( );
             // generate new texture
             float[,] texture = textureGenerator.Generate( 320, 240 );
             // convert it to image to visualize
             Bitmap textureImage = TextureTools.ToBitmap( texture );
             </code>
            
             <para><b>Result image:</b></para>
             <img src="img/imaging/marble_texture.jpg" width="320" height="240"/>
             </remarks>
             
        </member>
        <member name="M:AForge.Imaging.Textures.MarbleTexture.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Textures.MarbleTexture"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Textures.MarbleTexture.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Textures.MarbleTexture"/> class.
            </summary>
            
            <param name="xPeriod">X period value.</param>
            <param name="yPeriod">Y period value.</param>
            
        </member>
        <member name="M:AForge.Imaging.Textures.MarbleTexture.Generate(System.Int32,System.Int32)">
            <summary>
            Generate texture.
            </summary>
            
            <param name="width">Texture's width.</param>
            <param name="height">Texture's height.</param>
            
            <returns>Two dimensional array of intensities.</returns>
            
            <remarks>Generates new texture of the specified size.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Textures.MarbleTexture.Reset">
            <summary>
            Reset generator.
            </summary>
            
            <remarks>Regenerates internal random numbers.</remarks>
             
        </member>
        <member name="P:AForge.Imaging.Textures.MarbleTexture.XPeriod">
            <summary>
            X period value, ≥ 2.
            </summary>
            
            <remarks>Default value is set to <b>5</b>.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Textures.MarbleTexture.YPeriod">
            <summary>
            Y period value, ≥ 2.
            </summary>
            
            <remarks>Default value is set to <b>10</b>.</remarks>
            
        </member>
        <member name="T:AForge.Imaging.Textures.TextileTexture">
             <summary>
             Textile texture.
             </summary>
             
             <remarks><para>The texture generator creates textures with effect of textile.</para>
             
             <para>The generator is based on the <see cref="T:AForge.Math.PerlinNoise">Perlin noise function</see>.</para>
             
             <para>Sample usage:</para>
             <code>
             // create texture generator
             TextileTexture textureGenerator = new TextileTexture( );
             // generate new texture
             float[,] texture = textureGenerator.Generate( 320, 240 );
             // convert it to image to visualize
             Bitmap textureImage = TextureTools.ToBitmap( texture );
             </code>
            
             <para><b>Result image:</b></para>
             <img src="img/imaging/textile_texture.jpg" width="320" height="240"/>
             </remarks>
             
        </member>
        <member name="M:AForge.Imaging.Textures.TextileTexture.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Textures.TextileTexture"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Textures.TextileTexture.Generate(System.Int32,System.Int32)">
            <summary>
            Generate texture.
            </summary>
            
            <param name="width">Texture's width.</param>
            <param name="height">Texture's height.</param>
            
            <returns>Two dimensional array of intensities.</returns>
            
            <remarks>Generates new texture of the specified size.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Textures.TextileTexture.Reset">
            <summary>
            Reset generator.
            </summary>
            
            <remarks>Regenerates internal random numbers.</remarks>
            
        </member>
        <member name="T:AForge.Imaging.Textures.TextureTools">
            <summary>
            Texture tools.
            </summary>
            
            <remarks><para>The class represents collection of different texture tools, like
            converting a texture to/from grayscale image.</para>
            
            <para>Sample usage:</para>
            <code>
            // create texture generator
            WoodTexture textureGenerator = new WoodTexture( );
            // generate new texture
            float[,] texture = textureGenerator.Generate( 320, 240 );
            // convert it to image to visualize
            Bitmap textureImage = TextureTools.ToBitmap( texture );
            </code>
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Textures.TextureTools.ToBitmap(System.Single[0:,0:])">
            <summary>
            Convert texture to grayscale bitmap.
            </summary>
            
            <param name="texture">Texture to convert to bitmap.</param>
            
            <returns>Returns bitmap of the texture.</returns>
            
        </member>
        <member name="T:AForge.Imaging.Textures.WoodTexture">
             <summary>
             Wood texture.
             </summary>
             
             <remarks><para>The texture generator creates textures with effect of
             rings on trunk's shear. The <see cref="P:AForge.Imaging.Textures.WoodTexture.Rings"/> property allows to specify the
             desired amount of wood rings.</para>
             
             <para>The generator is based on the <see cref="T:AForge.Math.PerlinNoise">Perlin noise function</see>.</para>
             
             <para>Sample usage:</para>
             <code>
             // create texture generator
             WoodTexture textureGenerator = new WoodTexture( );
             // generate new texture
             float[,] texture = textureGenerator.Generate( 320, 240 );
             // convert it to image to visualize
             Bitmap textureImage = TextureTools.ToBitmap( texture );
             </code>
            
             <para><b>Result image:</b></para>
             <img src="img/imaging/wood_texture.jpg" width="320" height="240"/>
             </remarks>
             
        </member>
        <member name="M:AForge.Imaging.Textures.WoodTexture.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Textures.WoodTexture"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.Textures.WoodTexture.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.Textures.WoodTexture"/> class.
            </summary>
            
            <param name="rings">Wood rings amount.</param>
            
        </member>
        <member name="M:AForge.Imaging.Textures.WoodTexture.Generate(System.Int32,System.Int32)">
            <summary>
            Generate texture.
            </summary>
            
            <param name="width">Texture's width.</param>
            <param name="height">Texture's height.</param>
            
            <returns>Two dimensional array of intensities.</returns>
            
            <remarks>Generates new texture of the specified size.</remarks>
            
        </member>
        <member name="M:AForge.Imaging.Textures.WoodTexture.Reset">
            <summary>
            Reset generator.
            </summary>
            
            <remarks>Regenerates internal random numbers.</remarks>
            
        </member>
        <member name="P:AForge.Imaging.Textures.WoodTexture.Rings">
            <summary>
            Wood rings amount, ≥ 3.
            </summary>
            
            <remarks><para>The property sets the amount of wood rings, which make effect of
            rings on trunk's shear.</para>
            
            <para>Default value is set to <b>12</b>.</para></remarks>
            
        </member>
        <member name="T:AForge.Imaging.UnmanagedImage">
            <summary>
            Image in unmanaged memory.
            </summary>
            
            <remarks>
            <para>The class represents wrapper of an image in unmanaged memory. Using this class
            it is possible as to allocate new image in unmanaged memory, as to just wrap provided
            pointer to unmanaged memory, where an image is stored.</para>
            
            <para>Usage of unmanaged images is mostly beneficial when it is required to apply <b>multiple</b>
            image processing routines to a single image. In such scenario usage of .NET managed images 
            usually leads to worse performance, because each routine needs to lock managed image
            before image processing is done and then unlock it after image processing is done. Without
            these lock/unlock there is no way to get direct access to managed image's data, which means
            there is no way to do fast image processing. So, usage of managed images lead to overhead, which
            is caused by locks/unlock. Unmanaged images are represented internally using unmanaged memory
            buffer. This means that it is not required to do any locks/unlocks in order to get access to image
            data (no overhead).</para>
            
            <para>Sample usage:</para>
            <code>
            // sample 1 - wrapping .NET image into unmanaged without
            // making extra copy of image in memory
            BitmapData imageData = image.LockBits(
                new RectI( 0, 0, image.Width, image.Height ),
                ImageLockMode.ReadWrite, image.PixelFormat );
            
            try
            {
                UnmanagedImage unmanagedImage = new UnmanagedImage( imageData ) );
                // apply several routines to the unmanaged image
            }
            finally
            {
                image.UnlockBits( imageData );
            }
            
            
            // sample 2 - converting .NET image into unmanaged
            UnmanagedImage unmanagedImage = UnmanagedImage.FromManagedImage( image );
            // apply several routines to the unmanaged image
            ...
            // conver to managed image if it is required to display it at some point of time
            Bitmap managedImage = unmanagedImage.ToManagedImage( );
            </code>
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.UnmanagedImage.#ctor(System.IntPtr,System.Int32,System.Int32,System.Int32,Alt.Sketch.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.UnmanagedImage"/> class.
            </summary>
            
            <param name="imageData">Pointer to image data in unmanaged memory.</param>
            <param name="width">Image width in pixels.</param>
            <param name="height">Image height in pixels.</param>
            <param name="stride">Image stride (line size in bytes).</param>
            <param name="pixelFormat">Image pixel format.</param>
            
            <remarks><para><note>Using this constructor, make sure all specified image attributes are correct
            and correspond to unmanaged memory buffer. If some attributes are specified incorrectly,
            this may lead to exceptions working with the unmanaged memory.</note></para></remarks>
            
        </member>
        <member name="M:AForge.Imaging.UnmanagedImage.#ctor(Alt.Sketch.BitmapData)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.UnmanagedImage"/> class.
            </summary>
            
            <param name="bitmapData">Locked bitmap data.</param>
            
            <remarks><note>Unlike <see cref="M:AForge.Imaging.UnmanagedImage.FromManagedImage(Alt.Sketch.BitmapData)"/> method, this constructor does not make
            copy of managed image. This means that managed image must stay locked for the time of using the instance
            of unamanged image.</note></remarks>
            
        </member>
        <member name="M:AForge.Imaging.UnmanagedImage.Finalize">
            <summary>
            Destroys the instance of the <see cref="T:AForge.Imaging.UnmanagedImage"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Imaging.UnmanagedImage.Dispose">
            <summary>
            Dispose the object.
            </summary>
            
            <remarks><para>Frees unmanaged resources used by the object. The object becomes unusable
            after that.</para>
            
            <par><note>The method needs to be called only in the case if unmanaged image was allocated
            using <see cref="M:AForge.Imaging.UnmanagedImage.Create(System.Int32,System.Int32,Alt.Sketch.PixelFormat)"/> method. In the case if the class instance was created using constructor,
            this method does not free unmanaged memory.</note></par>
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.UnmanagedImage.Dispose(System.Boolean)">
            <summary>
            Dispose the object.
            </summary>
            
            <param name="disposing">Indicates if disposing was initiated manually.</param>
            
        </member>
        <member name="M:AForge.Imaging.UnmanagedImage.Clone">
            <summary>
            Clone the unmanaged images.
            </summary>
            
            <returns>Returns clone of the unmanaged image.</returns>
            
            <remarks><para>The method does complete cloning of the object.</para></remarks>
            
        </member>
        <member name="M:AForge.Imaging.UnmanagedImage.Copy(AForge.Imaging.UnmanagedImage)">
            <summary>
            Copy unmanaged image.
            </summary>
            
            <param name="destImage">Destination image to copy this image to.</param>
            
            <remarks><para>The method copies current unmanaged image to the specified image.
            Size and pixel format of the destination image must be exactly the same.</para></remarks>
            
            <exception cref="T:AForge.Imaging.InvalidImagePropertiesException">Destination image has different size or pixel format.</exception>
            
        </member>
        <member name="M:AForge.Imaging.UnmanagedImage.Create(System.Int32,System.Int32,Alt.Sketch.PixelFormat)">
            <summary>
            Allocate new image in unmanaged memory.
            </summary>
            
            <param name="width">Image width.</param>
            <param name="height">Image height.</param>
            <param name="pixelFormat">Image pixel format.</param>
            
            <returns>Return image allocated in unmanaged memory.</returns>
            
            <remarks><para>Allocate new image with specified attributes in unmanaged memory.</para>
            
            <para><note>The method supports only
            <see cref="!:System.Drawing.Imaging.PixelFormat">Format8bppIndexed</see>,
            <see cref="!:System.Drawing.Imaging.PixelFormat">Format16bppGrayScale</see>,
            <see cref="!:System.Drawing.Imaging.PixelFormat">Format24bppRgb</see>,
            <see cref="!:System.Drawing.Imaging.PixelFormat">Format32bppRgb</see>,
            <see cref="!:System.Drawing.Imaging.PixelFormat">Format32bppArgb</see>,
            <see cref="!:System.Drawing.Imaging.PixelFormat">Format32bppPArgb</see>,
            <see cref="!:System.Drawing.Imaging.PixelFormat">Format48bppRgb</see>,
            <see cref="!:System.Drawing.Imaging.PixelFormat">Format64bppArgb</see> and
            <see cref="!:System.Drawing.Imaging.PixelFormat">Format64bppPArgb</see> pixel formats.
            In the case if <see cref="!:System.Drawing.Imaging.PixelFormat">Format8bppIndexed</see>
            format is specified, pallete is not not created for the image (supposed that it is
            8 bpp grayscale image).
            </note></para>
            </remarks>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format was specified.</exception>
            <exception cref="T:AForge.Imaging.InvalidImagePropertiesException">Invalid image size was specified.</exception>
            
        </member>
        <member name="M:AForge.Imaging.UnmanagedImage.ToManagedImage">
            <summary>
            Create managed image from the unmanaged.
            </summary>
            
            <returns>Returns managed copy of the unmanaged image.</returns>
            
            <remarks><para>The method creates a managed copy of the unmanaged image with the
            same size and pixel format (it calls <see cref="M:AForge.Imaging.UnmanagedImage.ToManagedImage(System.Boolean)"/> specifying
            <see langword="true"/> for the <b>makeCopy</b> parameter).</para></remarks>
            
        </member>
        <member name="M:AForge.Imaging.UnmanagedImage.ToManagedImage(System.Boolean)">
            <summary>
            Create managed image from the unmanaged.
            </summary>
            
            <param name="makeCopy">Make a copy of the unmanaged image or not.</param>
            
            <returns>Returns managed copy of the unmanaged image.</returns>
            
            <remarks><para>If the <paramref name="makeCopy"/> is set to <see langword="true"/>, then the method
            creates a managed copy of the unmanaged image, so the managed image stays valid even when the unmanaged
            image gets disposed. However, setting this parameter to <see langword="false"/> creates a managed image which is
            just a wrapper around the unmanaged image. So if unmanaged image is disposed, the
            managed image becomes no longer valid and accessing it will generate an exception.</para></remarks>
            
            <exception cref="T:AForge.Imaging.InvalidImagePropertiesException">The unmanaged image has some invalid properties, which results
            in failure of converting it to managed image. This may happen if user used the
            <see cref="M:AForge.Imaging.UnmanagedImage.#ctor(System.IntPtr,System.Int32,System.Int32,System.Int32,Alt.Sketch.PixelFormat)"/> constructor specifying some
            invalid parameters.</exception>
            
        </member>
        <member name="M:AForge.Imaging.UnmanagedImage.FromManagedImage(Alt.Sketch.Bitmap)">
            <summary>
            Create unmanaged image from the specified managed image.
            </summary>
            
            <param name="image">Source managed image.</param>
            
            <returns>Returns new unmanaged image, which is a copy of source managed image.</returns>
            
            <remarks><para>The method creates an exact copy of specified managed image, but allocated
            in unmanaged memory.</para></remarks>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.UnmanagedImage.FromManagedImage(Alt.Sketch.BitmapData)">
            <summary>
            Create unmanaged image from the specified managed image.
            </summary>
            
            <param name="imageData">Source locked image data.</param>
            
            <returns>Returns new unmanaged image, which is a copy of source managed image.</returns>
            
            <remarks><para>The method creates an exact copy of specified managed image, but allocated
            in unmanaged memory. This means that managed image may be unlocked right after call to this
            method.</para></remarks>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.UnmanagedImage.CollectActivePixels">
            <summary>
            Collect coordinates of none black pixels in the image.
            </summary>
            
            <returns>Returns list of points, which have other than black color.</returns>
            
        </member>
        <member name="M:AForge.Imaging.UnmanagedImage.CollectActivePixels(Alt.Sketch.RectI)">
             <summary>
             Collect coordinates of none black pixels within specified rectangle of the image.
             </summary>
             
             <param name="rect">Image's rectangle to process.</param>
             
             <returns>Returns list of points, which have other than black color.</returns>
            
        </member>
        <member name="M:AForge.Imaging.UnmanagedImage.SetPixels(System.Collections.Generic.List{AForge.IntPoint},Alt.Sketch.Color)">
             <summary>
             Set pixels with the specified coordinates to the specified color.
             </summary>
             
             <param name="coordinates">List of points to set color for.</param>
             <param name="color">Color to set for the specified points.</param>
             
             <remarks><para><note>For images having 16 bpp per color plane, the method extends the specified color
             value to 16 bit by multiplying it by 256.</note></para></remarks>
            
        </member>
        <member name="M:AForge.Imaging.UnmanagedImage.SetPixel(AForge.IntPoint,Alt.Sketch.Color)">
             <summary>
             Set pixel with the specified coordinates to the specified color.
             </summary>
             
             <param name="point">Point's coordiates to set color for.</param>
             <param name="color">Color to set for the pixel.</param>
             
             <remarks><para>See <see cref="M:AForge.Imaging.UnmanagedImage.SetPixel(System.Int32,System.Int32,Alt.Sketch.Color)"/> for more information.</para></remarks>
            
        </member>
        <member name="M:AForge.Imaging.UnmanagedImage.SetPixel(System.Int32,System.Int32,Alt.Sketch.Color)">
            <summary>
            Set pixel with the specified coordinates to the specified color.
            </summary>
            
            <param name="x">X coordinate of the pixel to set.</param>
            <param name="y">Y coordinate of the pixel to set.</param>
            <param name="color">Color to set for the pixel.</param>
            
            <remarks><para><note>For images having 16 bpp per color plane, the method extends the specified color
            value to 16 bit by multiplying it by 256.</note></para>
            
            <para>For grayscale images this method will calculate intensity value based on the below formula:
            <code lang="none">
            0.2125 * Red + 0.7154 * Green + 0.0721 * Blue
            </code>
            </para>
            </remarks>
            
        </member>
        <member name="M:AForge.Imaging.UnmanagedImage.SetPixel(System.Int32,System.Int32,System.Byte)">
             <summary>
             Set pixel with the specified coordinates to the specified value.
             </summary>
            
             <param name="x">X coordinate of the pixel to set.</param>
             <param name="y">Y coordinate of the pixel to set.</param>
             <param name="value">Pixel value to set.</param>
             
             <remarks><para>The method sets all color components of the pixel to the specified value.
             If it is a grayscale image, then pixel's intensity is set to the specified value.
             If it is a color image, then pixel's R/G/B components are set to the same specified value
             (if an image has alpha channel, then it is set to maximum value - 255 or 65535).</para>
             
             <para><note>For images having 16 bpp per color plane, the method extends the specified color
             value to 16 bit by multiplying it by 256.</note></para>
             </remarks>
             
        </member>
        <member name="M:AForge.Imaging.UnmanagedImage.GetPixel(AForge.IntPoint)">
             <summary>
             Get color of the pixel with the specified coordinates.
             </summary>
             
             <param name="point">Point's coordiates to get color of.</param>
             
             <returns>Return pixel's color at the specified coordinates.</returns>
             
             <remarks><para>See <see cref="M:AForge.Imaging.UnmanagedImage.GetPixel(System.Int32,System.Int32)"/> for more information.</para></remarks>
            
        </member>
        <member name="M:AForge.Imaging.UnmanagedImage.GetPixel(System.Int32,System.Int32)">
            <summary>
            Get color of the pixel with the specified coordinates.
            </summary>
            
            <param name="x">X coordinate of the pixel to get.</param>
            <param name="y">Y coordinate of the pixel to get.</param>
            
            <returns>Return pixel's color at the specified coordinates.</returns>
            
            <remarks>
            <para><note>In the case if the image has 8 bpp grayscale format, the method will return a color with
            all R/G/B components set to same value, which is grayscale intensity.</note></para>
            
            <para><note>The method supports only 8 bpp grayscale images and 24/32 bpp color images so far.</note></para>
            </remarks>
            
            <exception cref="T:System.ArgumentOutOfRangeException">The specified pixel coordinate is out of image's bounds.</exception>
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Pixel format of this image is not supported by the method.</exception>
            
        </member>
        <member name="P:AForge.Imaging.UnmanagedImage.ImageData">
            <summary>
            Pointer to image data in unmanaged memory.
            </summary>
        </member>
        <member name="P:AForge.Imaging.UnmanagedImage.Width">
            <summary>
            Image width in pixels.
            </summary>
        </member>
        <member name="P:AForge.Imaging.UnmanagedImage.Height">
            <summary>
            Image height in pixels.
            </summary>
        </member>
        <member name="P:AForge.Imaging.UnmanagedImage.Stride">
            <summary>
            Image stride (line size in bytes).
            </summary>
        </member>
        <member name="P:AForge.Imaging.UnmanagedImage.PixelFormat">
            <summary>
            Image pixel format.
            </summary>
        </member>
        <member name="T:AForge.Imaging.VerticalIntensityStatistics">
             <summary>
             Vertical intensity statistics.
             </summary>
             
             <remarks><para>The class provides information about vertical distribution
             of pixel intensities, which may be used to locate objects, their centers, etc.
             </para>
             
             <para>The class accepts grayscale (8 bpp indexed and 16 bpp) and color (24, 32, 48 and 64 bpp) images.
             In the case of 32 and 64 bpp color images, the alpha channel is not processed - statistics is not
             gathered for this channel.</para>
             
             <para>Sample usage:</para>
             <code>
             // collect statistics
             VerticalIntensityStatistics vis = new VerticalIntensityStatistics( sourceImage );
             // get gray histogram (for grayscale image)
             Histogram histogram = vis.Gray;
             // output some histogram's information
             System.Diagnostics.Debug.WriteLine( "Mean = " + histogram.Mean );
             System.Diagnostics.Debug.WriteLine( "Min = " + histogram.Min );
             System.Diagnostics.Debug.WriteLine( "Max = " + histogram.Max );
             </code>
             
             <para><b>Sample grayscale image with its vertical intensity histogram:</b></para>
             <img src="img/imaging/ver_histogram.jpg" width="450" height="240"/>
             </remarks>
             
             <seealso cref="T:AForge.Imaging.HorizontalIntensityStatistics"/>
            
        </member>
        <member name="M:AForge.Imaging.VerticalIntensityStatistics.#ctor(Alt.Sketch.Bitmap)">
             <summary>
             Initializes a new instance of the <see cref="T:AForge.Imaging.VerticalIntensityStatistics"/> class.
             </summary>
             
             <param name="image">Source image.</param>
            
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
             
        </member>
        <member name="M:AForge.Imaging.VerticalIntensityStatistics.#ctor(Alt.Sketch.BitmapData)">
             <summary>
             Initializes a new instance of the <see cref="T:AForge.Imaging.VerticalIntensityStatistics"/> class.
             </summary>
             
             <param name="imageData">Source image data.</param>
            
             <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
             
        </member>
        <member name="M:AForge.Imaging.VerticalIntensityStatistics.#ctor(AForge.Imaging.UnmanagedImage)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Imaging.HorizontalIntensityStatistics"/> class.
            </summary>
            
            <param name="image">Source unmanaged image.</param>
            
            <exception cref="T:AForge.Imaging.UnsupportedImageFormatException">Unsupported pixel format of the source image.</exception>
            
        </member>
        <member name="M:AForge.Imaging.VerticalIntensityStatistics.ProcessImage(AForge.Imaging.UnmanagedImage)">
            <summary>
            Gather vertical intensity statistics for specified image.
            </summary>
            
            <param name="image">Source image.</param>
            
        </member>
        <member name="P:AForge.Imaging.VerticalIntensityStatistics.Red">
            <summary>
            Histogram for red channel.
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.VerticalIntensityStatistics.Green">
            <summary>
            Histogram for green channel.
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.VerticalIntensityStatistics.Blue">
            <summary>
            Histogram for blue channel.
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.VerticalIntensityStatistics.Gray">
            <summary>
            Histogram for gray channel (intensities).
            </summary>
            
        </member>
        <member name="P:AForge.Imaging.VerticalIntensityStatistics.IsGrayscale">
            <summary>
            Value wich specifies if the processed image was color or grayscale.
            </summary>
            
            <remarks><para>If the property equals to <b>true</b>, then the <see cref="P:AForge.Imaging.VerticalIntensityStatistics.Gray"/>
            property should be used to retrieve histogram for the processed grayscale image.
            Otherwise <see cref="P:AForge.Imaging.VerticalIntensityStatistics.Red"/>, <see cref="P:AForge.Imaging.VerticalIntensityStatistics.Green"/> and <see cref="P:AForge.Imaging.VerticalIntensityStatistics.Blue"/> property
            should be used to retrieve histogram for particular RGB channel of the processed
            color image.</para></remarks>
            
        </member>
        <member name="T:AForge.Video.AsyncVideoSource">
            <summary>
            Proxy video source for asynchronous processing of another nested video source.
            </summary>
            
            <remarks><para>The class represents a simple proxy, which wraps the specified <see cref="P:AForge.Video.AsyncVideoSource.NestedVideoSource"/>
            with the aim of asynchronous processing of received video frames. The class intercepts <see cref="E:AForge.Video.AsyncVideoSource.NewFrame"/>
            event from the nested video source and fires it to clients from its own thread, which is different from the thread
            used by nested video source for video acquisition. This allows clients to perform processing of video frames
            without blocking video acquisition thread, which continue to run and acquire next video frame while current is still
            processed.</para>
            
            <para>For example, let’s suppose that it takes 100 ms for the nested video source to acquire single frame, so the original
            frame rate is 10 frames per second. Also let’s assume that we have an image processing routine, which also takes
            100 ms to process a single frame. If the acquisition and processing are done sequentially, then resulting
            frame rate will drop to 5 frames per second. However, if doing both in parallel, then there is a good chance to
            keep resulting frame rate equal (or close) to the original frame rate.</para>
            
            <para>The class provides a bonus side effect - easer debugging of image processing routines, which are put into
            <see cref="E:AForge.Video.AsyncVideoSource.NewFrame"/> event handler. In many cases video source classes fire their <see cref="E:AForge.Video.IVideoSource.NewFrame"/>
            event from a try/catch block, which makes it very hard to spot error made in user's code - the catch block simply
            hides exception raised in user’s code. The <see cref="T:AForge.Video.AsyncVideoSource"/> does not have any try/catch blocks around
            firing of <see cref="E:AForge.Video.AsyncVideoSource.NewFrame"/> event, so always user gets exception in the case it comes from his code. At the same time
            nested video source is not affected by the user's exception, since it runs in different thread.</para>
            
            <para>Sample usage:</para>
            <code>
            // usage of AsyncVideoSource is the same as usage of any
            // other video source class, so code change is very little
            
            // create nested video source, for example JPEGStream
            JPEGStream stream = new JPEGStream( "some url" );
            // create async video source
            AsyncVideoSource asyncSource = new AsyncVideoSource( stream );
            // set NewFrame event handler
            asyncSource.NewFrame += new NewFrameEventHandler( video_NewFrame );
            // start the video source
            asyncSource.Start( );
            // ...
            
            private void video_NewFrame( object sender, NewFrameEventArgs eventArgs )
            {
                // get new frame
                Bitmap bitmap = eventArgs.Frame;
                // process the frame
            }
            </code>
            </remarks>
            
        </member>
        <member name="T:AForge.Video.IVideoSource">
            <summary>
            Video source interface.
            </summary>
            
            <remarks>The interface describes common methods for different type of video sources.</remarks>
            
        </member>
        <member name="M:AForge.Video.IVideoSource.Start">
            <summary>
            Start video source.
            </summary>
            
            <remarks>Starts video source and return execution to caller. Video source
            object creates background thread and notifies about new frames with the
            help of <see cref="E:AForge.Video.IVideoSource.NewFrame"/> event.</remarks>
            
        </member>
        <member name="M:AForge.Video.IVideoSource.SignalToStop">
            <summary>
            Signal video source to stop its work.
            </summary>
            
            <remarks>Signals video source to stop its background thread, stop to
            provide new frames and free resources.</remarks>
            
        </member>
        <member name="M:AForge.Video.IVideoSource.WaitForStop">
            <summary>
            Wait for video source has stopped.
            </summary>
            
            <remarks>Waits for video source stopping after it was signalled to stop using
            <see cref="M:AForge.Video.IVideoSource.SignalToStop"/> method.</remarks>
            
        </member>
        <member name="M:AForge.Video.IVideoSource.Stop">
            <summary>
            Stop video source.
            </summary>
            
            <remarks>Stops video source aborting its thread.</remarks>
            
        </member>
        <member name="E:AForge.Video.IVideoSource.NewFrame">
            <summary>
            New frame event.
            </summary>
            
            <remarks><para>This event is used to notify clients about new available video frame.</para>
            
            <para><note>Since video source may have multiple clients, each client is responsible for
            making a copy (cloning) of the passed video frame, but video source is responsible for
            disposing its own original copy after notifying of clients.</note></para>
            </remarks>
            
        </member>
        <member name="E:AForge.Video.IVideoSource.VideoSourceError">
            <summary>
            Video source error event.
            </summary>
            
            <remarks>This event is used to notify clients about any type of errors occurred in
            video source object, for example internal exceptions.</remarks>
            
        </member>
        <member name="E:AForge.Video.IVideoSource.PlayingFinished">
            <summary>
            Video playing finished event.
            </summary>
            
            <remarks><para>This event is used to notify clients that the video playing has finished.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Video.IVideoSource.Source">
            <summary>
            Video source.
            </summary>
            
            <remarks>The meaning of the property depends on particular video source.
            Depending on video source it may be a file name, URL or any other string
            describing the video source.</remarks>
            
        </member>
        <member name="P:AForge.Video.IVideoSource.FramesReceived">
            <summary>
            Received frames count.
            </summary>
            
            <remarks>Number of frames the video source provided from the moment of the last
            access to the property.
            </remarks>
            
        </member>
        <member name="P:AForge.Video.IVideoSource.BytesReceived">
            <summary>
            Received bytes count.
            </summary>
            
            <remarks>Number of bytes the video source provided from the moment of the last
            access to the property.
            </remarks>
            
        </member>
        <member name="P:AForge.Video.IVideoSource.IsRunning">
            <summary>
            State of the video source.
            </summary>
            
            <remarks>Current state of video source object - running or not.</remarks>
            
        </member>
        <member name="M:AForge.Video.AsyncVideoSource.#ctor(AForge.Video.IVideoSource)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Video.AsyncVideoSource"/> class.
            </summary>
            
            <param name="nestedVideoSource">Nested video source which is the target for asynchronous processing.</param>
            
        </member>
        <member name="M:AForge.Video.AsyncVideoSource.#ctor(AForge.Video.IVideoSource,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Video.AsyncVideoSource"/> class.
            </summary>
            
            <param name="nestedVideoSource">Nested video source which is the target for asynchronous processing.</param>
            <param name="skipFramesIfBusy">Specifies if the object should skip frames from the nested video source
            in the case if it is still busy processing the previous video frame.</param>
            
        </member>
        <member name="M:AForge.Video.AsyncVideoSource.Start">
            <summary>
            Start video source.
            </summary>
            
            <remarks><para>Starts the nested video source and returns execution to caller. This object creates
            an extra thread which is used to fire <see cref="E:AForge.Video.AsyncVideoSource.NewFrame"/> events, so the image processing could be
            done on another thread without blocking video acquisition thread.</para></remarks>
            
        </member>
        <member name="M:AForge.Video.AsyncVideoSource.SignalToStop">
             <summary>
             Signal video source to stop its work.
             </summary>
             
             <remarks><para>Signals video source to stop its background thread, stop to
             provide new frames and free resources.</para></remarks>
            
        </member>
        <member name="M:AForge.Video.AsyncVideoSource.WaitForStop">
             <summary>
             Wait for video source has stopped.
             </summary>
             
             <remarks><para>Waits for video source stopping after it was signalled to stop using
             <see cref="M:AForge.Video.AsyncVideoSource.SignalToStop"/> method.</para></remarks>
            
        </member>
        <member name="M:AForge.Video.AsyncVideoSource.Stop">
            <summary>
            Stop video source.
            </summary>
            
            <remarks><para>Stops nested video source by calling its <see cref="M:AForge.Video.IVideoSource.Stop"/> method.
            See documentation of the particular video source for additional details.</para></remarks>
            
        </member>
        <member name="E:AForge.Video.AsyncVideoSource.NewFrame">
            <summary>
            New frame event.
            </summary>
            
            <remarks><para>Notifies clients about new available frame from video source.</para>
            
            <para><note>This event is fired from a different thread other than the video acquisition thread created
            by <see cref="P:AForge.Video.AsyncVideoSource.NestedVideoSource"/>. This allows nested video frame to continue acquisition of the next
            video frame while clients perform processing of the current video frame.</note></para>
            
            <para><note>Since video source may have multiple clients, each client is responsible for
            making a copy (cloning) of the passed video frame, because the video source disposes its
            own original copy after notifying of clients.</note></para>
            </remarks>
            
        </member>
        <member name="E:AForge.Video.AsyncVideoSource.VideoSourceError">
             <summary>
             Video source error event.
             </summary>
             
             <remarks><para>This event is used to notify clients about any type of errors occurred in
             video source object, for example internal exceptions.</para>
             
             <para><note>Unlike <see cref="E:AForge.Video.AsyncVideoSource.NewFrame"/> event, this event is simply redirected to the corresponding
             event of the <see cref="P:AForge.Video.AsyncVideoSource.NestedVideoSource"/>, so it is fired from the thread of the nested video source.</note></para>
             </remarks>
            
        </member>
        <member name="E:AForge.Video.AsyncVideoSource.PlayingFinished">
            <summary>
            Video playing finished event.
            </summary>
            
            <remarks><para>This event is used to notify clients that the video playing has finished.</para>
            
            <para><note>Unlike <see cref="E:AForge.Video.AsyncVideoSource.NewFrame"/> event, this event is simply redirected to the corresponding
            event of the <see cref="P:AForge.Video.AsyncVideoSource.NestedVideoSource"/>, so it is fired from the thread of the nested video source.</note></para>
            </remarks>
            
        </member>
        <member name="P:AForge.Video.AsyncVideoSource.NestedVideoSource">
            <summary>
            Nested video source which is the target for asynchronous processing.
            </summary>
            
            <remarks><para>The property is set through the class constructor.</para>
            
            <para>All calls to this object are actually redirected to the nested video source. The only
            exception is the <see cref="E:AForge.Video.AsyncVideoSource.NewFrame"/> event, which is handled differently. This object gets
            <see cref="E:AForge.Video.IVideoSource.NewFrame"/> event from the nested class and then fires another
            <see cref="E:AForge.Video.AsyncVideoSource.NewFrame"/> event, but from a different thread.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Video.AsyncVideoSource.SkipFramesIfBusy">
            <summary>
            Specifies if the object should skip frames from the nested video source when it is busy. 
            </summary>
            
            <remarks><para>Specifies if the object should skip frames from the nested video source
            in the case if it is still busy processing the previous video frame in its own thread.</para>
            
            <para>Default value is set to <see langword="false"/>.</para></remarks>
            
        </member>
        <member name="P:AForge.Video.AsyncVideoSource.Source">
            <summary>
            Video source string.
            </summary>
            
            <remarks><para>The property is redirected to the corresponding property of <see cref="P:AForge.Video.AsyncVideoSource.NestedVideoSource"/>,
            so check its documentation to find what it means.</para></remarks>
            
        </member>
        <member name="P:AForge.Video.AsyncVideoSource.FramesReceived">
            <summary>
            Received frames count.
            </summary>
            
            <remarks><para>Number of frames the <see cref="P:AForge.Video.AsyncVideoSource.NestedVideoSource">nested video source</see> received from
            the moment of the last access to the property.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Video.AsyncVideoSource.BytesReceived">
             <summary>
             Received bytes count.
             </summary>
             
             <remarks><para>Number of bytes the <see cref="P:AForge.Video.AsyncVideoSource.NestedVideoSource">nested video source</see> received from
             the moment of the last access to the property.</para></remarks>
            
        </member>
        <member name="P:AForge.Video.AsyncVideoSource.FramesProcessed">
            <summary>
            Processed frames count.
            </summary>
            
            <remarks><para>The property keeps the number of processed video frames since the last access to this property. 
            </para>
            
            <para>The value of this property equals to <see cref="P:AForge.Video.AsyncVideoSource.FramesReceived"/> in most cases if the
            <see cref="P:AForge.Video.AsyncVideoSource.SkipFramesIfBusy"/> property is set to <see langword="false"/> - every received frame gets processed
            sooner or later. However, if the <see cref="P:AForge.Video.AsyncVideoSource.SkipFramesIfBusy"/> property is set to <see langword="true"/>,
            then value of this property may be lower than the value of the <see cref="P:AForge.Video.AsyncVideoSource.FramesReceived"/> property, which
            means that nested video source performs acquisition faster than client perform processing of the received frame
            and some frame are skipped from processing.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Video.AsyncVideoSource.IsRunning">
            <summary>
            State of the video source.
            </summary>
            
            <remarks><para>Current state of the video source object - running or not.</para></remarks>
            
        </member>
        <member name="T:AForge.Video.ByteArrayUtils">
            <summary>
            Some internal utilities for handling arrays.
            </summary>
            
        </member>
        <member name="M:AForge.Video.ByteArrayUtils.Compare(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Check if the array contains needle at specified position.
            </summary>
            
            <param name="array">Source array to check for needle.</param>
            <param name="needle">Needle we are searching for.</param>
            <param name="startIndex">Start index in source array.</param>
            
            <returns>Returns <b>true</b> if the source array contains the needle at
            the specified index. Otherwise it returns <b>false</b>.</returns>
            
        </member>
        <member name="M:AForge.Video.ByteArrayUtils.Find(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <summary>
            Find subarray in the source array.
            </summary>
            
            <param name="array">Source array to search for needle.</param>
            <param name="needle">Needle we are searching for.</param>
            <param name="startIndex">Start index in source array.</param>
            <param name="sourceLength">Number of bytes in source array, where the needle is searched for.</param>
            
            <returns>Returns starting position of the needle if it was found or <b>-1</b> otherwise.</returns>
            
        </member>
        <member name="T:AForge.Video.VideoException">
            <summary>
            Video related exception.
            </summary>
            
            <remarks><para>The exception is thrown in the case of some video related issues, like
            failure of initializing codec, compression, etc.</para></remarks>
            
        </member>
        <member name="M:AForge.Video.VideoException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Video.VideoException"/> class.
            </summary>
            
            <param name="message">Exception's message.</param>
            
        </member>
        <member name="T:AForge.Video.JPEGStream">
            <summary>
            JPEG video source.
            </summary>
            
            <remarks><para>The video source constantly downloads JPEG files from the specified URL.</para>
            
            <para>Sample usage:</para>
            <code>
            // create JPEG video source
            JPEGStream stream = new JPEGStream( "some url" );
            // set NewFrame event handler
            stream.NewFrame += new NewFrameEventHandler( video_NewFrame );
            // start the video source
            stream.Start( );
            // ...
            // signal to stop
            stream.SignalToStop( );
            // ...
            
            private void video_NewFrame( object sender, NewFrameEventArgs eventArgs )
            {
                // get new frame
                Bitmap bitmap = eventArgs.Frame;
                // process the frame
            }
            </code>
            
            <para><note>Some cameras produce HTTP header, which does not conform strictly to
            standard, what leads to .NET exception. To avoid this exception the <b>useUnsafeHeaderParsing</b>
            configuration option of <b>httpWebRequest</b> should be set, what may be done using application
            configuration file.</note></para>
            <code>
            &lt;configuration&gt;
            	&lt;system.net&gt;
            		&lt;settings&gt;
            			&lt;httpWebRequest useUnsafeHeaderParsing="true" /&gt;
            		&lt;/settings&gt;
            	&lt;/system.net&gt;
            &lt;/configuration&gt;
            </code>
            </remarks>
            
        </member>
        <member name="M:AForge.Video.JPEGStream.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Video.JPEGStream"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Video.JPEGStream.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Video.JPEGStream"/> class.
            </summary>
            
            <param name="source">URL, which provides JPEG files.</param>
            
        </member>
        <member name="M:AForge.Video.JPEGStream.Start">
            <summary>
            Start video source.
            </summary>
            
            <remarks>Starts video source and return execution to caller. Video source
            object creates background thread and notifies about new frames with the
            help of <see cref="E:AForge.Video.JPEGStream.NewFrame"/> event.</remarks>
            
            <exception cref="T:System.ArgumentException">Video source is not specified.</exception>
            
        </member>
        <member name="M:AForge.Video.JPEGStream.SignalToStop">
            <summary>
            Signal video source to stop its work.
            </summary>
            
            <remarks>Signals video source to stop its background thread, stop to
            provide new frames and free resources.</remarks>
            
        </member>
        <member name="M:AForge.Video.JPEGStream.WaitForStop">
            <summary>
            Wait for video source has stopped.
            </summary>
            
            <remarks>Waits for source stopping after it was signalled to stop using
            <see cref="M:AForge.Video.JPEGStream.SignalToStop"/> method.</remarks>
            
        </member>
        <member name="M:AForge.Video.JPEGStream.Stop">
            <summary>
            Stop video source.
            </summary>
            
            <remarks><para>Stops video source aborting its thread.</para>
            
            <para><note>Since the method aborts background thread, its usage is highly not preferred
            and should be done only if there are no other options. The correct way of stopping camera
            is <see cref="M:AForge.Video.JPEGStream.SignalToStop">signaling it stop</see> and then
            <see cref="M:AForge.Video.JPEGStream.WaitForStop">waiting</see> for background thread's completion.</note></para>
            </remarks>
            
        </member>
        <member name="M:AForge.Video.JPEGStream.Free">
            <summary>
            Free resource.
            </summary>
            
        </member>
        <member name="E:AForge.Video.JPEGStream.NewFrame">
            <summary>
            New frame event.
            </summary>
            
            <remarks><para>Notifies clients about new available frame from video source.</para>
            
            <para><note>Since video source may have multiple clients, each client is responsible for
            making a copy (cloning) of the passed video frame, because the video source disposes its
            own original copy after notifying of clients.</note></para>
            </remarks>
            
        </member>
        <member name="E:AForge.Video.JPEGStream.VideoSourceError">
            <summary>
            Video source error event.
            </summary>
            
            <remarks>This event is used to notify clients about any type of errors occurred in
            video source object, for example internal exceptions.</remarks>
            
        </member>
        <member name="E:AForge.Video.JPEGStream.PlayingFinished">
            <summary>
            Video playing finished event.
            </summary>
            
            <remarks><para>This event is used to notify clients that the video playing has finished.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Video.JPEGStream.SeparateConnectionGroup">
            <summary>
            Use or not separate connection group.
            </summary>
            
            <remarks>The property indicates to open web request in separate connection group.</remarks>
            
        </member>
        <member name="P:AForge.Video.JPEGStream.PreventCaching">
            <summary>
            Use or not caching.
            </summary>
            
            <remarks>If the property is set to <b>true</b>, then a fake random parameter will be added
            to URL to prevent caching. It's required for clients, who are behind proxy server.</remarks>
            
        </member>
        <member name="P:AForge.Video.JPEGStream.FrameInterval">
            <summary>
            Frame interval.
            </summary>
            
            <remarks>The property sets the interval in milliseconds betwen frames. If the property is
            set to 100, then the desired frame rate will be 10 frames per second. Default value is 0 -
            get new frames as fast as possible.</remarks>
            
        </member>
        <member name="P:AForge.Video.JPEGStream.Source">
            <summary>
            Video source.
            </summary>
            
            <remarks>URL, which provides JPEG files.</remarks>
            
        </member>
        <member name="P:AForge.Video.JPEGStream.Login">
            <summary>
            Login value.
            </summary>
            
            <remarks>Login required to access video source.</remarks>
            
        </member>
        <member name="P:AForge.Video.JPEGStream.Password">
            <summary>
            Password value.
            </summary>
            
            <remarks>Password required to access video source.</remarks>
            
        </member>
        <member name="P:AForge.Video.JPEGStream.Proxy">
            <summary>
            Gets or sets proxy information for the request.
            </summary>
            
            <remarks><para>The local computer or application config file may specify that a default
            proxy to be used. If the Proxy property is specified, then the proxy settings from the Proxy
            property overridea the local computer or application config file and the instance will use
            the proxy settings specified. If no proxy is specified in a config file
            and the Proxy property is unspecified, the request uses the proxy settings
            inherited from Internet Explorer on the local computer. If there are no proxy settings
            in Internet Explorer, the request is sent directly to the server.
            </para></remarks>
            
        </member>
        <member name="P:AForge.Video.JPEGStream.FramesReceived">
            <summary>
            Received frames count.
            </summary>
            
            <remarks>Number of frames the video source provided from the moment of the last
            access to the property.
            </remarks>
            
        </member>
        <member name="P:AForge.Video.JPEGStream.BytesReceived">
            <summary>
            Received bytes count.
            </summary>
            
            <remarks>Number of bytes the video source provided from the moment of the last
            access to the property.
            </remarks>
            
        </member>
        <member name="P:AForge.Video.JPEGStream.RequestTimeout">
            <summary>
            Request timeout value.
            </summary>
            
            <remarks><para>The property sets timeout value in milliseconds for web requests.</para>
            
            <para>Default value is set <b>10000</b> milliseconds.</para></remarks>
            
        </member>
        <member name="P:AForge.Video.JPEGStream.IsRunning">
            <summary>
            State of the video source.
            </summary>
            
            <remarks>Current state of video source object - running or not.</remarks>
            
        </member>
        <member name="P:AForge.Video.JPEGStream.ForceBasicAuthentication">
            <summary>
            Force using of basic authentication when connecting to the video source.
            </summary>
            
            <remarks><para>For some IP cameras (TrendNET IP cameras, for example) using standard .NET's authentication via credentials
            does not seem to be working (seems like camera does not request for authentication, but expects corresponding headers to be
            present on connection request). So this property allows to force basic authentication by adding required HTTP headers when
            request is sent.</para>
            
            <para>Default value is set to <see langword="false"/>.</para>
            </remarks>
            
        </member>
        <member name="T:AForge.Video.MJPEGStream">
            <summary>
            MJPEG video source.
            </summary>
            
            <remarks><para>The video source downloads JPEG images from the specified URL, which represents
            MJPEG stream.</para>
            
            <para>Sample usage:</para>
            <code>
            // create MJPEG video source
            MJPEGStream stream = new MJPEGStream( "some url" );
            // set event handlers
            stream.NewFrame += new NewFrameEventHandler( video_NewFrame );
            // start the video source
            stream.Start( );
            // ...
            </code>
            
            <para><note>Some cameras produce HTTP header, which does not conform strictly to
            standard, what leads to .NET exception. To avoid this exception the <b>useUnsafeHeaderParsing</b>
            configuration option of <b>httpWebRequest</b> should be set, what may be done using application
            configuration file.</note></para>
            <code>
            &lt;configuration&gt;
            	&lt;system.net&gt;
            		&lt;settings&gt;
            			&lt;httpWebRequest useUnsafeHeaderParsing="true" /&gt;
            		&lt;/settings&gt;
            	&lt;/system.net&gt;
            &lt;/configuration&gt;
            </code>
            </remarks>
            
        </member>
        <member name="M:AForge.Video.MJPEGStream.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Video.MJPEGStream"/> class.
            </summary>
            
        </member>
        <member name="M:AForge.Video.MJPEGStream.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Video.MJPEGStream"/> class.
            </summary>
            
            <param name="source">URL, which provides MJPEG stream.</param>
            
        </member>
        <member name="M:AForge.Video.MJPEGStream.Start">
            <summary>
            Start video source.
            </summary>
            
            <remarks>Starts video source and return execution to caller. Video source
            object creates background thread and notifies about new frames with the
            help of <see cref="E:AForge.Video.MJPEGStream.NewFrame"/> event.</remarks>
            
            <exception cref="T:System.ArgumentException">Video source is not specified.</exception>
            
        </member>
        <member name="M:AForge.Video.MJPEGStream.SignalToStop">
            <summary>
            Signal video source to stop its work.
            </summary>
            
            <remarks>Signals video source to stop its background thread, stop to
            provide new frames and free resources.</remarks>
            
        </member>
        <member name="M:AForge.Video.MJPEGStream.WaitForStop">
            <summary>
            Wait for video source has stopped.
            </summary>
            
            <remarks>Waits for source stopping after it was signalled to stop using
            <see cref="M:AForge.Video.MJPEGStream.SignalToStop"/> method.</remarks>
            
        </member>
        <member name="M:AForge.Video.MJPEGStream.Stop">
            <summary>
            Stop video source.
            </summary>
            
            <remarks><para>Stops video source aborting its thread.</para>
            
            <para><note>Since the method aborts background thread, its usage is highly not preferred
            and should be done only if there are no other options. The correct way of stopping camera
            is <see cref="M:AForge.Video.MJPEGStream.SignalToStop">signaling it stop</see> and then
            <see cref="M:AForge.Video.MJPEGStream.WaitForStop">waiting</see> for background thread's completion.</note></para>
            </remarks>
            
        </member>
        <member name="M:AForge.Video.MJPEGStream.Free">
            <summary>
            Free resource.
            </summary>
            
        </member>
        <member name="E:AForge.Video.MJPEGStream.NewFrame">
            <summary>
            New frame event.
            </summary>
            
            <remarks><para>Notifies clients about new available frame from video source.</para>
            
            <para><note>Since video source may have multiple clients, each client is responsible for
            making a copy (cloning) of the passed video frame, because the video source disposes its
            own original copy after notifying of clients.</note></para>
            </remarks>
            
        </member>
        <member name="E:AForge.Video.MJPEGStream.VideoSourceError">
            <summary>
            Video source error event.
            </summary>
            
            <remarks>This event is used to notify clients about any type of errors occurred in
            video source object, for example internal exceptions.</remarks>
            
        </member>
        <member name="E:AForge.Video.MJPEGStream.PlayingFinished">
            <summary>
            Video playing finished event.
            </summary>
            
            <remarks><para>This event is used to notify clients that the video playing has finished.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Video.MJPEGStream.SeparateConnectionGroup">
            <summary>
            Use or not separate connection group.
            </summary>
            
            <remarks>The property indicates to open web request in separate connection group.</remarks>
            
        </member>
        <member name="P:AForge.Video.MJPEGStream.Source">
            <summary>
            Video source.
            </summary>
            
            <remarks>URL, which provides MJPEG stream.</remarks>
            
        </member>
        <member name="P:AForge.Video.MJPEGStream.Login">
            <summary>
            Login value.
            </summary>
            
            <remarks>Login required to access video source.</remarks>
            
        </member>
        <member name="P:AForge.Video.MJPEGStream.Password">
            <summary>
            Password value.
            </summary>
            
            <remarks>Password required to access video source.</remarks>
            
        </member>
        <member name="P:AForge.Video.MJPEGStream.Proxy">
            <summary>
            Gets or sets proxy information for the request.
            </summary>
            
            <remarks><para>The local computer or application config file may specify that a default
            proxy to be used. If the Proxy property is specified, then the proxy settings from the Proxy
            property overridea the local computer or application config file and the instance will use
            the proxy settings specified. If no proxy is specified in a config file
            and the Proxy property is unspecified, the request uses the proxy settings
            inherited from Internet Explorer on the local computer. If there are no proxy settings
            in Internet Explorer, the request is sent directly to the server.
            </para></remarks>
            
        </member>
        <member name="P:AForge.Video.MJPEGStream.HttpUserAgent">
            <summary>
            User agent to specify in HTTP request header.
            </summary>
            
            <remarks><para>Some IP cameras check what is the requesting user agent and depending
            on it they provide video in different formats or do not provide it at all. The property
            sets the value of user agent string, which is sent to camera in request header.
            </para>
            
            <para>Default value is set to "Mozilla/5.0". If the value is set to <see langword="null"/>,
            the user agent string is not sent in request header.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Video.MJPEGStream.FramesReceived">
            <summary>
            Received frames count.
            </summary>
            
            <remarks>Number of frames the video source provided from the moment of the last
            access to the property.
            </remarks>
            
        </member>
        <member name="P:AForge.Video.MJPEGStream.BytesReceived">
            <summary>
            Received bytes count.
            </summary>
            
            <remarks>Number of bytes the video source provided from the moment of the last
            access to the property.
            </remarks>
            
        </member>
        <member name="P:AForge.Video.MJPEGStream.RequestTimeout">
            <summary>
            Request timeout value.
            </summary>
            
            <remarks>The property sets timeout value in milliseconds for web requests.
            Default value is 10000 milliseconds.</remarks>
            
        </member>
        <member name="P:AForge.Video.MJPEGStream.IsRunning">
            <summary>
            State of the video source.
            </summary>
            
            <remarks>Current state of video source object - running or not.</remarks>
            
        </member>
        <member name="P:AForge.Video.MJPEGStream.ForceBasicAuthentication">
            <summary>
            Force using of basic authentication when connecting to the video source.
            </summary>
            
            <remarks><para>For some IP cameras (TrendNET IP cameras, for example) using standard .NET's authentication via credentials
            does not seem to be working (seems like camera does not request for authentication, but expects corresponding headers to be
            present on connection request). So this property allows to force basic authentication by adding required HTTP headers when
            request is sent.</para>
            
            <para>Default value is set to <see langword="false"/>.</para>
            </remarks>
            
        </member>
        <member name="T:AForge.Video.NewFrameEventHandler">
            <summary>
            Delegate for new frame event handler.
            </summary>
            
            <param name="sender">Sender object.</param>
            <param name="eventArgs">Event arguments.</param>
            
        </member>
        <member name="T:AForge.Video.VideoSourceErrorEventHandler">
            <summary>
            Delegate for video source error event handler.
            </summary>
            
            <param name="sender">Sender object.</param>
            <param name="eventArgs">Event arguments.</param>
            
        </member>
        <member name="T:AForge.Video.PlayingFinishedEventHandler">
            <summary>
            Delegate for playing finished event handler.
            </summary>
            
            <param name="sender">Sender object.</param>
            <param name="reason">Reason of finishing video playing.</param>
            
        </member>
        <member name="T:AForge.Video.ReasonToFinishPlaying">
            <summary>
            Reason of finishing video playing.
            </summary>
            
            <remarks><para>When video source class fire the <see cref="E:AForge.Video.IVideoSource.PlayingFinished"/> event, they
            need to specify reason of finishing video playing. For example, it may be end of stream reached.</para></remarks>
            
        </member>
        <member name="F:AForge.Video.ReasonToFinishPlaying.EndOfStreamReached">
            <summary>
            Video playing has finished because it end was reached.
            </summary>
        </member>
        <member name="F:AForge.Video.ReasonToFinishPlaying.StoppedByUser">
            <summary>
            Video playing has finished because it was stopped by user.
            </summary>
        </member>
        <member name="F:AForge.Video.ReasonToFinishPlaying.DeviceLost">
            <summary>
            Video playing has finished because the device was lost (unplugged).
            </summary>
        </member>
        <member name="F:AForge.Video.ReasonToFinishPlaying.VideoSourceError">
            <summary>
            Video playing has finished because of some error happened the video source (camera, stream, file, etc.).
            A error reporting event usually is fired to provide error information.
            </summary>
        </member>
        <member name="T:AForge.Video.NewFrameEventArgs">
            <summary>
            Arguments for new frame event from video source.
            </summary>
            
        </member>
        <member name="M:AForge.Video.NewFrameEventArgs.#ctor(Alt.Sketch.Bitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Video.NewFrameEventArgs"/> class.
            </summary>
            
            <param name="frame">New frame.</param>
            
        </member>
        <member name="P:AForge.Video.NewFrameEventArgs.Frame">
            <summary>
            New frame from video source.
            </summary>
            
        </member>
        <member name="T:AForge.Video.VideoSourceErrorEventArgs">
            <summary>
            Arguments for video source error event from video source.
            </summary>
            
        </member>
        <member name="M:AForge.Video.VideoSourceErrorEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:AForge.Video.VideoSourceErrorEventArgs"/> class.
            </summary>
            
            <param name="description">Error description.</param>
            
        </member>
        <member name="P:AForge.Video.VideoSourceErrorEventArgs.Description">
            <summary>
            Video source error description.
            </summary>
            
        </member>
        <member name="T:AForge.Vision.Motion.IMotionDetector">
             <summary>
             Interface of motion detector algorithm.
             </summary>
             
             <remarks><para>The interface specifies methods, which should be implemented
             by all motion detection algorithms - algorithms which perform processing of video
             frames in order to detect motion. Amount of detected motion may be checked using
             <see cref="P:AForge.Vision.Motion.IMotionDetector.MotionLevel"/> property. Also <see cref="P:AForge.Vision.Motion.IMotionDetector.MotionFrame"/> property may
             be used in order to see all the detected motion areas. For example, the <see cref="P:AForge.Vision.Motion.IMotionDetector.MotionFrame"/> property
             is used by motion processing algorithms for further motion post processing, like
             highlighting motion areas, counting number of detected moving object, etc.
             </para></remarks>
             
             <seealso cref="!:MotionDetector"/>
             <seealso cref="T:AForge.Vision.Motion.IMotionProcessing"/>
            
            
        </member>
        <member name="M:AForge.Vision.Motion.IMotionDetector.ProcessFrame(AForge.Imaging.UnmanagedImage)">
            <summary>
            Process new video frame.
            </summary>
            
            <param name="videoFrame">Video frame to process (detect motion in).</param>
            
            <remarks><para>Processes new frame from video source and detects motion in it.</para></remarks>
            
        </member>
        <member name="M:AForge.Vision.Motion.IMotionDetector.Reset">
            <summary>
            Reset motion detector to initial state.
            </summary>
            
            <remarks><para>Resets internal state and variables of motion detection algorithm.
            Usually this is required to be done before processing new video source, but
            may be also done at any time to restart motion detection algorithm.</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Vision.Motion.IMotionDetector.MotionLevel">
            <summary>
            Motion level value, [0, 1].
            </summary>
            
            <remarks><para>Amount of changes in the last processed frame. For example, if value of
            this property equals to 0.1, then it means that last processed frame has 10% of changes
            (however it is up to specific implementation to decide how to compare specified frame).</para>
            </remarks>
            
        </member>
        <member name="P:AForge.Vision.Motion.IMotionDetector.MotionFrame">
            <summary>
            Motion frame containing detected areas of motion.
            </summary>
            
            <remarks><para>Motion frame is a grayscale image, which shows areas of detected motion.
            All black pixels in the motion frame correspond to areas, where no motion is
            detected. But white pixels correspond to areas, where motion is detected.</para></remarks>
            
        </member>
        <member name="T:AForge.Vision.Motion.IMotionProcessing">
             <summary>
             Interface of motion processing algorithm.
             </summary>
            
             <remarks><para>The interface specifies methods, which should be implemented
             by all motion processng algorithms - algorithm which perform further post processing
             of detected motion, which is done by motion detection algorithms (see <see cref="T:AForge.Vision.Motion.IMotionDetector"/>).
             </para></remarks>
             
             <seealso cref="!:MotionDetector"/>
             <seealso cref="T:AForge.Vision.Motion.IMotionDetector"/>
            
        </member>
        <member name="M:AForge.Vision.Motion.IMotionProcessing.ProcessFrame(AForge.Imaging.UnmanagedImage,AForge.Imaging.UnmanagedImage)">
            <summary>
            Process video and motion frames doing further post processing after
            performed motion detection.
            </summary>
            
            <param name="videoFrame">Original video frame.</param>
            <param name="motionFrame">Motion frame provided by motion detection
            algorithm (see <see cref="T:AForge.Vision.Motion.IMotionDetector"/>).</param>
            
            <remarks><para>The method does father post processing of detected motion.
            Type of motion post processing is specified by specific implementation
            of the <see cref="T:AForge.Vision.Motion.IMotionProcessing"/> interface - it may motion
            area highlighting, motion objects counting, etc.</para></remarks>
            
        </member>
        <member name="M:AForge.Vision.Motion.IMotionProcessing.Reset">
             <summary>
             Reset internal state of motion processing algorithm.
             </summary>
             
             <remarks><para>The method allows to reset internal state of motion processing
             algorithm and prepare it for processing of next video stream or to restart
             the algorithm.</para>
             
             <para><note>Some motion processing algorithms may not have any stored internal
             states and may just process provided video frames without relying on any motion
             history etc. In this case such algorithms provide empty implementation of this method.</note></para>
             </remarks>
            
        </member>
    </members>
</doc>
