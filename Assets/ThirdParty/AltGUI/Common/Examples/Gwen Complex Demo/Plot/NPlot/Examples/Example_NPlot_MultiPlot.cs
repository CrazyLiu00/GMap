//  Copyright (C) 2012-2015 AltSoftLab Inc.
//  This source code is provided "as is" without express or implied warranty of any kind.

using System;
using System.Reflection;

using Alt.Collections;
using Alt.Data;
using Alt.GUI.Temporary.Gwen;
using Alt.GUI.Temporary.Gwen.Control;
using Alt.GUI.NPlot;
using Alt.Sketch;


namespace Alt.GUI.Demo.NPlot
{
    class Example_NPlot_MultiPlot : Example__Base
    {
        Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl costPS;
        Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl volumePS;


        readonly Color plotSurface_AxisColor_Default = Color.Black;
        readonly Color plotSurface_TickTextColor_Default = Color.WhiteSmoke;
        readonly Color plotSurface_Label_Default = Color.WhiteSmoke;


        public Example_NPlot_MultiPlot(Base parent)
            : base(parent)
        {
        }


        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);


            costPS = new Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl(this);

            costPS.AutoScaleAutoGeneratedAxes = false;
            costPS.AutoScaleTitle = false;
            costPS.DateTimeToolTip = false;
            costPS.Legend = null;
            costPS.LegendZOrder = -1;
            costPS.Location = new PointI(13, 13);
            costPS.Name = "costPS";
            costPS.RightMenu = null;
            costPS.ShowCoordinates = false;
            costPS.Size = new SizeI(606, 285);
            costPS.SmoothingMode = SmoothingMode.None;
            costPS.SurfacePadding = 10;
            costPS.Title = "";
            costPS.TitleFont = new Font("Arial", 14F, FontStyle.Regular, GraphicsUnit.Pixel);
            costPS.XAxis1 = null;
            costPS.XAxis2 = null;
            costPS.YAxis1 = null;
            costPS.YAxis2 = null;


            volumePS = new Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl(this);

            volumePS.AutoScaleAutoGeneratedAxes = false;
            volumePS.AutoScaleTitle = false;
            volumePS.DateTimeToolTip = false;
            volumePS.Legend = null;
            volumePS.LegendZOrder = -1;
            volumePS.Location = new PointI(13, 305);
            volumePS.Name = "volumePS";
            volumePS.RightMenu = null;
            volumePS.ShowCoordinates = false;
            volumePS.Size = new SizeI(606, 109);
            volumePS.SmoothingMode = SmoothingMode.None;
            volumePS.SurfacePadding = 10;
            volumePS.Title = "";
            volumePS.TitleFont = new Font("Arial", 14F, FontStyle.Regular, GraphicsUnit.Pixel);
            volumePS.XAxis1 = null;
            volumePS.XAxis2 = null;
            volumePS.YAxis1 = null;
            volumePS.YAxis2 = null;


            volumePS.Dock = Pos.Bottom;
            costPS.Dock = Pos.Fill;
			Padding = new Alt.GUI.Temporary.Gwen.Padding(20);


            costPS.Clear();
            costPS.DateTimeToolTip = true;

            // obtain stock information from xml file
            DataSet ds = new DataSet();
            System.IO.Stream file = Alt.IO.VirtualFile.OpenRead("AltData/NPlot/asx_jbh.xml");
            ds.ReadXml(file, XmlReadMode.ReadSchema);
            DataTable dt = ds.Tables[0];
            //NoNeed	DataView dv = new DataView(dt);

            // create CandlePlot.
            CandlePlot cp = new CandlePlot();
            cp.DataSource = dt;
            cp.AbscissaData = "Date";
            cp.OpenData = "Open";
            cp.LowData = "Low";
            cp.HighData = "High";
            cp.CloseData = "Close";
            cp.BearishColor = Color.Red;
            cp.BullishColor = Color.Green;
            cp.Style = CandlePlot.Styles.Filled;
            costPS.SmoothingMode = SmoothingMode.AntiAlias;
            costPS.Add(new Grid());
            costPS.Add(cp);
            costPS.Title = "AU:JBH";
            costPS.YAxis1.Label = "Price [$]";
            costPS.YAxis1.LabelOffset = 40;
            costPS.YAxis1.LabelOffsetAbsolute = true;
            costPS.XAxis1.HideTickText = true;
            costPS.SurfacePadding = 5;
            costPS.AddInteraction(new Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.HorizontalDrag());
            costPS.AddInteraction(new Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.VerticalDrag());
            costPS.AddInteraction(new Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.AxisDrag(false));
            costPS.InteractionOccured += new Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.InteractionHandler(costPS_InteractionOccured);
            costPS.AddAxesConstraint(new AxesConstraint.AxisPosition(PlotSurface2D.YAxisPosition.Left, 60));

            PointPlot pp = new PointPlot();
            pp.Marker = new Marker(Marker.MarkerType.Square, 0);
            pp.Marker.Pen = new Pen(Color.Red, 5.0f);
            pp.Marker.DropLine = true;
            pp.DataSource = dt;
            pp.AbscissaData = "Date";
            pp.OrdinateData = "Volume";
            volumePS.Add(pp);
            volumePS.YAxis1.Label = "Volume";
            volumePS.YAxis1.LabelOffsetAbsolute = true;
            volumePS.YAxis1.LabelOffset = 40;
            volumePS.SurfacePadding = 5;
            volumePS.AddAxesConstraint(new AxesConstraint.AxisPosition(PlotSurface2D.YAxisPosition.Left, 60));
            volumePS.AddInteraction(new Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.AxisDrag(false));
            volumePS.AddInteraction(new Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.Interactions.HorizontalDrag());
            volumePS.InteractionOccured += new Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.InteractionHandler(volumePS_InteractionOccured);
            volumePS.PreRefresh += new Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.PreRefreshHandler(volumePS_PreRefresh);

            costPS.RightMenu = new ReducedContextMenu(costPS);


            SetPlotBackColor();


            UpdateSize();
        }


        void SetPlotBackColor()
        {
            Color color = Color.Transparent;// White;

            volumePS.ClientBackColor = color;
            costPS.ClientBackColor = color;

            volumePS.TitleColor = plotSurface_Label_Default;

            volumePS.XAxis1.AxisColor = plotSurface_AxisColor_Default;
            volumePS.XAxis1.TickTextColor = plotSurface_TickTextColor_Default;
            volumePS.XAxis1.LabelColor = plotSurface_Label_Default;

            volumePS.YAxis1.AxisColor = plotSurface_AxisColor_Default;
            volumePS.YAxis1.TickTextColor = plotSurface_TickTextColor_Default;
            volumePS.YAxis1.LabelColor = plotSurface_Label_Default;

            costPS.TitleColor = plotSurface_Label_Default;

            costPS.XAxis1.AxisColor = plotSurface_AxisColor_Default;
            costPS.XAxis1.TickTextColor = plotSurface_TickTextColor_Default;
            costPS.XAxis1.LabelColor = plotSurface_Label_Default;

            costPS.YAxis1.AxisColor = plotSurface_AxisColor_Default;
            costPS.YAxis1.TickTextColor = plotSurface_TickTextColor_Default;
            costPS.YAxis1.LabelColor = plotSurface_Label_Default;
        }


        protected override void OnResize(EventArgs e)
        {
            base.OnResize(e);

            UpdateSize();
        }


        void UpdateSize()
        {
            if (volumePS != null)
            {
                volumePS.Height = (int)((Height - Padding.Height) * 0.3);
            }
        }


        /// <summary>
        /// Right context menu with non-default functionality. Just take out some functionality. Could also have added some.
        /// </summary>
        public class ReducedContextMenu : Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl.PlotContextMenu
        {
            /// <summary>
            /// Constructor
            /// </summary>
            public ReducedContextMenu(Alt.GUI.NPlot.Temporary.Gwen.PlotSurface2DControl plotSurface2D)
                : base(plotSurface2D)
            {
                ArrayList menuItems = MenuItems;

                // remove show coordinates, and print functionality
                menuItems.RemoveAt(1);

                SetMenuItems(menuItems);
            }
        }


        /// <summary>
        /// When the costPS chart has changed, this is called which updates the volumePS chart.
        /// </summary>
        /// <param name="sender"></param>
        private void costPS_InteractionOccured(object sender)
        {
            DateTimeAxis axis = new DateTimeAxis(costPS.XAxis1);
            axis.Label = "Date / Time";
            axis.HideTickText = false;
            volumePS.XAxis1 = axis;
            volumePS.Refresh();
        }


        /// <summary>
        /// When the volumePS chart has changed, this is called which updates hte costPS chart.
        /// </summary>
        private void volumePS_InteractionOccured(object sender)
        {
            DateTimeAxis axis = new DateTimeAxis(volumePS.XAxis1);
            axis.Label = "";
            axis.HideTickText = true;
            costPS.XAxis1 = axis;
            costPS.Refresh();
        }


        /// <summary>
        /// This is called prior to volumePS refresh to enforce the WorldMin is 0. 
        /// This may have been changed by the axisdrag interaction.
        /// </summary>
        /// <param name="sender"></param>
        private void volumePS_PreRefresh(object sender)
        {
            volumePS.YAxis1.WorldMin = 0.0;
        }
    }
}
